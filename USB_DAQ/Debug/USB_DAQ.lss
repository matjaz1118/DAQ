
USB_DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d88  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004e0  20000000  00402d88  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  200004e0  00403268  000104e0  2**2
                  ALLOC
  3 .stack        00002004  2000075c  004034e4  000104e0  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010509  2**0
                  CONTENTS, READONLY
  6 .debug_info   00012ad1  00000000  00000000  0001057a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000329d  00000000  00000000  0002304b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000652e  00000000  00000000  000262e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ce0  00000000  00000000  0002c816  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b98  00000000  00000000  0002d4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014c85  00000000  00000000  0002e08e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000120fc  00000000  00000000  00042d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005017d  00000000  00000000  00054e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ab4  00000000  00000000  000a4f8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20002760 	.word	0x20002760
  400004:	004029e5 	.word	0x004029e5
  400008:	004029e1 	.word	0x004029e1
  40000c:	004029e1 	.word	0x004029e1
  400010:	004029e1 	.word	0x004029e1
  400014:	004029e1 	.word	0x004029e1
  400018:	004029e1 	.word	0x004029e1
	...
  40002c:	004029e1 	.word	0x004029e1
  400030:	004029e1 	.word	0x004029e1
  400034:	00000000 	.word	0x00000000
  400038:	004029e1 	.word	0x004029e1
  40003c:	004029e1 	.word	0x004029e1
  400040:	004029e1 	.word	0x004029e1
  400044:	004029e1 	.word	0x004029e1
  400048:	004029e1 	.word	0x004029e1
  40004c:	004029e1 	.word	0x004029e1
  400050:	004029e1 	.word	0x004029e1
  400054:	004029e1 	.word	0x004029e1
  400058:	004029e1 	.word	0x004029e1
  40005c:	004029e1 	.word	0x004029e1
  400060:	004029e1 	.word	0x004029e1
  400064:	004029e1 	.word	0x004029e1
  400068:	004029e1 	.word	0x004029e1
  40006c:	00401171 	.word	0x00401171
  400070:	00401185 	.word	0x00401185
  400074:	004029e1 	.word	0x004029e1
  400078:	004029e1 	.word	0x004029e1
  40007c:	004029e1 	.word	0x004029e1
  400080:	004029e1 	.word	0x004029e1
  400084:	004029e1 	.word	0x004029e1
  400088:	004029e1 	.word	0x004029e1
  40008c:	004029e1 	.word	0x004029e1
  400090:	004029e1 	.word	0x004029e1
  400094:	004029e1 	.word	0x004029e1
  400098:	004029e1 	.word	0x004029e1
  40009c:	004029e1 	.word	0x004029e1
  4000a0:	004029e1 	.word	0x004029e1
  4000a4:	004029e1 	.word	0x004029e1
  4000a8:	004029e1 	.word	0x004029e1
  4000ac:	004029e1 	.word	0x004029e1
  4000b0:	004029e1 	.word	0x004029e1
  4000b4:	00400295 	.word	0x00400295
  4000b8:	004029e1 	.word	0x004029e1
  4000bc:	004029e1 	.word	0x004029e1
  4000c0:	004029e1 	.word	0x004029e1
  4000c4:	004029e1 	.word	0x004029e1
  4000c8:	00401915 	.word	0x00401915
  4000cc:	004029e1 	.word	0x004029e1

004000d0 <deregister_tm_clones>:
  4000d0:	b508      	push	{r3, lr}
  4000d2:	4805      	ldr	r0, [pc, #20]	; (4000e8 <deregister_tm_clones+0x18>)
  4000d4:	4b05      	ldr	r3, [pc, #20]	; (4000ec <deregister_tm_clones+0x1c>)
  4000d6:	1a1b      	subs	r3, r3, r0
  4000d8:	2b06      	cmp	r3, #6
  4000da:	d800      	bhi.n	4000de <deregister_tm_clones+0xe>
  4000dc:	bd08      	pop	{r3, pc}
  4000de:	4b04      	ldr	r3, [pc, #16]	; (4000f0 <deregister_tm_clones+0x20>)
  4000e0:	2b00      	cmp	r3, #0
  4000e2:	d0fb      	beq.n	4000dc <deregister_tm_clones+0xc>
  4000e4:	4798      	blx	r3
  4000e6:	e7f9      	b.n	4000dc <deregister_tm_clones+0xc>
  4000e8:	00402d88 	.word	0x00402d88
  4000ec:	00402d8b 	.word	0x00402d8b
  4000f0:	00000000 	.word	0x00000000

004000f4 <register_tm_clones>:
  4000f4:	b508      	push	{r3, lr}
  4000f6:	4807      	ldr	r0, [pc, #28]	; (400114 <register_tm_clones+0x20>)
  4000f8:	4b07      	ldr	r3, [pc, #28]	; (400118 <register_tm_clones+0x24>)
  4000fa:	1a1b      	subs	r3, r3, r0
  4000fc:	109b      	asrs	r3, r3, #2
  4000fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  400102:	1059      	asrs	r1, r3, #1
  400104:	d100      	bne.n	400108 <register_tm_clones+0x14>
  400106:	bd08      	pop	{r3, pc}
  400108:	4a04      	ldr	r2, [pc, #16]	; (40011c <register_tm_clones+0x28>)
  40010a:	2a00      	cmp	r2, #0
  40010c:	d0fb      	beq.n	400106 <register_tm_clones+0x12>
  40010e:	4790      	blx	r2
  400110:	e7f9      	b.n	400106 <register_tm_clones+0x12>
  400112:	bf00      	nop
  400114:	00402d88 	.word	0x00402d88
  400118:	00402d88 	.word	0x00402d88
  40011c:	00000000 	.word	0x00000000

00400120 <__do_global_dtors_aux>:
  400120:	b510      	push	{r4, lr}
  400122:	4c06      	ldr	r4, [pc, #24]	; (40013c <__do_global_dtors_aux+0x1c>)
  400124:	7823      	ldrb	r3, [r4, #0]
  400126:	b943      	cbnz	r3, 40013a <__do_global_dtors_aux+0x1a>
  400128:	f7ff ffd2 	bl	4000d0 <deregister_tm_clones>
  40012c:	4b04      	ldr	r3, [pc, #16]	; (400140 <__do_global_dtors_aux+0x20>)
  40012e:	b113      	cbz	r3, 400136 <__do_global_dtors_aux+0x16>
  400130:	4804      	ldr	r0, [pc, #16]	; (400144 <__do_global_dtors_aux+0x24>)
  400132:	f3af 8000 	nop.w
  400136:	2301      	movs	r3, #1
  400138:	7023      	strb	r3, [r4, #0]
  40013a:	bd10      	pop	{r4, pc}
  40013c:	200004e0 	.word	0x200004e0
  400140:	00000000 	.word	0x00000000
  400144:	00402d88 	.word	0x00402d88

00400148 <frame_dummy>:
  400148:	b508      	push	{r3, lr}
  40014a:	4b08      	ldr	r3, [pc, #32]	; (40016c <frame_dummy+0x24>)
  40014c:	b11b      	cbz	r3, 400156 <frame_dummy+0xe>
  40014e:	4808      	ldr	r0, [pc, #32]	; (400170 <frame_dummy+0x28>)
  400150:	4908      	ldr	r1, [pc, #32]	; (400174 <frame_dummy+0x2c>)
  400152:	f3af 8000 	nop.w
  400156:	4808      	ldr	r0, [pc, #32]	; (400178 <frame_dummy+0x30>)
  400158:	6803      	ldr	r3, [r0, #0]
  40015a:	b113      	cbz	r3, 400162 <frame_dummy+0x1a>
  40015c:	4b07      	ldr	r3, [pc, #28]	; (40017c <frame_dummy+0x34>)
  40015e:	b103      	cbz	r3, 400162 <frame_dummy+0x1a>
  400160:	4798      	blx	r3
  400162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400166:	f7ff bfc5 	b.w	4000f4 <register_tm_clones>
  40016a:	bf00      	nop
  40016c:	00000000 	.word	0x00000000
  400170:	00402d88 	.word	0x00402d88
  400174:	200004e4 	.word	0x200004e4
  400178:	00402d88 	.word	0x00402d88
  40017c:	00000000 	.word	0x00000000

00400180 <timer_init>:

daq_settings_t *DAQSettingsPtr;
uint32_t result, sequencePosition = 1, repetitionCounter, sampleCounter;

void timer_init (void)
{
  400180:	b510      	push	{r4, lr}
	
	
	pmc_enable_periph_clk(ID_TC0);
  400182:	2017      	movs	r0, #23
  400184:	4c0f      	ldr	r4, [pc, #60]	; (4001c4 <timer_init+0x44>)
  400186:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOA);
  400188:	200b      	movs	r0, #11
  40018a:	47a0      	blx	r4
	pio_set_peripheral(PIOA, PIO_TYPE_PIO_PERIPH_B, PIO_PA0);
  40018c:	480e      	ldr	r0, [pc, #56]	; (4001c8 <timer_init+0x48>)
  40018e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400192:	2201      	movs	r2, #1
  400194:	4b0d      	ldr	r3, [pc, #52]	; (4001cc <timer_init+0x4c>)
  400196:	4798      	blx	r3
	
	tc_init(TC0, 0, TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG | TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC | TC_CMR_ACPA_CLEAR | TC_CMR_ACPC_SET);
  400198:	4c0d      	ldr	r4, [pc, #52]	; (4001d0 <timer_init+0x50>)
  40019a:	4620      	mov	r0, r4
  40019c:	2100      	movs	r1, #0
  40019e:	4a0d      	ldr	r2, [pc, #52]	; (4001d4 <timer_init+0x54>)
  4001a0:	4b0d      	ldr	r3, [pc, #52]	; (4001d8 <timer_init+0x58>)
  4001a2:	4798      	blx	r3
	tc_write_rc(TC0, 0, 50000);
  4001a4:	4620      	mov	r0, r4
  4001a6:	2100      	movs	r1, #0
  4001a8:	f24c 3250 	movw	r2, #50000	; 0xc350
  4001ac:	4b0b      	ldr	r3, [pc, #44]	; (4001dc <timer_init+0x5c>)
  4001ae:	4798      	blx	r3
	tc_write_ra(TC0, 0, 100);
  4001b0:	4620      	mov	r0, r4
  4001b2:	2100      	movs	r1, #0
  4001b4:	2264      	movs	r2, #100	; 0x64
  4001b6:	4b0a      	ldr	r3, [pc, #40]	; (4001e0 <timer_init+0x60>)
  4001b8:	4798      	blx	r3
	tc_start(TC0, 0);
  4001ba:	4620      	mov	r0, r4
  4001bc:	2100      	movs	r1, #0
  4001be:	4b09      	ldr	r3, [pc, #36]	; (4001e4 <timer_init+0x64>)
  4001c0:	4798      	blx	r3
  4001c2:	bd10      	pop	{r4, pc}
  4001c4:	00401281 	.word	0x00401281
  4001c8:	400e0e00 	.word	0x400e0e00
  4001cc:	00401049 	.word	0x00401049
  4001d0:	40010000 	.word	0x40010000
  4001d4:	0006c003 	.word	0x0006c003
  4001d8:	00401341 	.word	0x00401341
  4001dc:	00401375 	.word	0x00401375
  4001e0:	0040136d 	.word	0x0040136d
  4001e4:	0040135d 	.word	0x0040135d

004001e8 <ADC_init>:
}

void ADC_init (void)
{
  4001e8:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
  4001ea:	201d      	movs	r0, #29
  4001ec:	4c1b      	ldr	r4, [pc, #108]	; (40025c <ADC_init+0x74>)
  4001ee:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOA);
  4001f0:	200b      	movs	r0, #11
  4001f2:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  4001f4:	200c      	movs	r0, #12
  4001f6:	47a0      	blx	r4
	
	pio_set_peripheral(PIOA, PIO_TYPE_PIO_PERIPH_D, PIO_PA17 | PIO_PA18 | PIO_PA19 | PIO_PA20);
  4001f8:	4819      	ldr	r0, [pc, #100]	; (400260 <ADC_init+0x78>)
  4001fa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4001fe:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
  400202:	4c18      	ldr	r4, [pc, #96]	; (400264 <ADC_init+0x7c>)
  400204:	47a0      	blx	r4
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB0 | PIO_PB1 | PIO_PB2 | PIO_PB3);
  400206:	4818      	ldr	r0, [pc, #96]	; (400268 <ADC_init+0x80>)
  400208:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40020c:	220f      	movs	r2, #15
  40020e:	47a0      	blx	r4
	
	//set inputs to bi differential!!!
	adc_init(ADC, sysclk_get_main_hz(), ADC_CLK, ADC_STARTUP_TIME_1);
  400210:	4c16      	ldr	r4, [pc, #88]	; (40026c <ADC_init+0x84>)
  400212:	4620      	mov	r0, r4
  400214:	4916      	ldr	r1, [pc, #88]	; (400270 <ADC_init+0x88>)
  400216:	4a17      	ldr	r2, [pc, #92]	; (400274 <ADC_init+0x8c>)
  400218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  40021c:	4d16      	ldr	r5, [pc, #88]	; (400278 <ADC_init+0x90>)
  40021e:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 1, 2);
  400220:	4620      	mov	r0, r4
  400222:	2100      	movs	r1, #0
  400224:	2201      	movs	r2, #1
  400226:	2302      	movs	r3, #2
  400228:	4d14      	ldr	r5, [pc, #80]	; (40027c <ADC_init+0x94>)
  40022a:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
  40022c:	4620      	mov	r0, r4
  40022e:	2100      	movs	r1, #0
  400230:	4b13      	ldr	r3, [pc, #76]	; (400280 <ADC_init+0x98>)
  400232:	4798      	blx	r3
	adc_enable_interrupt(ADC, ADC_ISR_DRDY);
  400234:	4620      	mov	r0, r4
  400236:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  40023a:	4b12      	ldr	r3, [pc, #72]	; (400284 <ADC_init+0x9c>)
  40023c:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_TIO_CH_0, ADC_MR_FREERUN_OFF);
  40023e:	4620      	mov	r0, r4
  400240:	2103      	movs	r1, #3
  400242:	2200      	movs	r2, #0
  400244:	4b10      	ldr	r3, [pc, #64]	; (400288 <ADC_init+0xa0>)
  400246:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_4);
  400248:	4620      	mov	r0, r4
  40024a:	2104      	movs	r1, #4
  40024c:	4b0f      	ldr	r3, [pc, #60]	; (40028c <ADC_init+0xa4>)
  40024e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  400250:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400254:	4b0e      	ldr	r3, [pc, #56]	; (400290 <ADC_init+0xa8>)
  400256:	601a      	str	r2, [r3, #0]
  400258:	bd38      	pop	{r3, r4, r5, pc}
  40025a:	bf00      	nop
  40025c:	00401281 	.word	0x00401281
  400260:	400e0e00 	.word	0x400e0e00
  400264:	00401049 	.word	0x00401049
  400268:	400e1000 	.word	0x400e1000
  40026c:	40038000 	.word	0x40038000
  400270:	07a12000 	.word	0x07a12000
  400274:	000f4240 	.word	0x000f4240
  400278:	00400f45 	.word	0x00400f45
  40027c:	00400f99 	.word	0x00400f99
  400280:	00400f79 	.word	0x00400f79
  400284:	00400fd1 	.word	0x00400fd1
  400288:	00400f89 	.word	0x00400f89
  40028c:	00400fb9 	.word	0x00400fb9
  400290:	e000e100 	.word	0xe000e100

00400294 <ADC_Handler>:
	//Setup adc and start the timer. Everithing else happens in ADC ISR
}


void ADC_Handler (void)
{ 
  400294:	b510      	push	{r4, lr}
	DAQSettingsPtr = get_current_DAQ_settings();
  400296:	4b18      	ldr	r3, [pc, #96]	; (4002f8 <ADC_Handler+0x64>)
  400298:	4798      	blx	r3
  40029a:	4b18      	ldr	r3, [pc, #96]	; (4002fc <ADC_Handler+0x68>)
  40029c:	6018      	str	r0, [r3, #0]

	result = adc_get_latest_value(ADC);
  40029e:	4c18      	ldr	r4, [pc, #96]	; (400300 <ADC_Handler+0x6c>)
  4002a0:	4620      	mov	r0, r4
  4002a2:	4b18      	ldr	r3, [pc, #96]	; (400304 <ADC_Handler+0x70>)
  4002a4:	4798      	blx	r3
  4002a6:	4b18      	ldr	r3, [pc, #96]	; (400308 <ADC_Handler+0x74>)
  4002a8:	6018      	str	r0, [r3, #0]
	//todo: convert and print measured result
	adc_disable_all_channel(ADC);
  4002aa:	4620      	mov	r0, r4
  4002ac:	4b17      	ldr	r3, [pc, #92]	; (40030c <ADC_Handler+0x78>)
  4002ae:	4798      	blx	r3
	if(repetitionCounter)
  4002b0:	4b17      	ldr	r3, [pc, #92]	; (400310 <ADC_Handler+0x7c>)
  4002b2:	681b      	ldr	r3, [r3, #0]
  4002b4:	b1db      	cbz	r3, 4002ee <ADC_Handler+0x5a>
	{
		if(sampleCounter)
  4002b6:	4a17      	ldr	r2, [pc, #92]	; (400314 <ADC_Handler+0x80>)
  4002b8:	6812      	ldr	r2, [r2, #0]
  4002ba:	b11a      	cbz	r2, 4002c4 <ADC_Handler+0x30>
		{
			sampleCounter--;
  4002bc:	3a01      	subs	r2, #1
  4002be:	4b15      	ldr	r3, [pc, #84]	; (400314 <ADC_Handler+0x80>)
  4002c0:	601a      	str	r2, [r3, #0]
  4002c2:	e00a      	b.n	4002da <ADC_Handler+0x46>
		}
		else
		{
			sampleCounter = DAQSettingsPtr->samplesNbr;
  4002c4:	4a0d      	ldr	r2, [pc, #52]	; (4002fc <ADC_Handler+0x68>)
  4002c6:	6812      	ldr	r2, [r2, #0]
  4002c8:	8a11      	ldrh	r1, [r2, #16]
  4002ca:	4a12      	ldr	r2, [pc, #72]	; (400314 <ADC_Handler+0x80>)
  4002cc:	6011      	str	r1, [r2, #0]
			sequencePosition++;
			if(DAQSettingsPtr->sequence[sequencePosition] == 0);
			{
				sequencePosition = 0;
  4002ce:	2100      	movs	r1, #0
  4002d0:	4a11      	ldr	r2, [pc, #68]	; (400318 <ADC_Handler+0x84>)
  4002d2:	6011      	str	r1, [r2, #0]
				repetitionCounter--;
  4002d4:	3b01      	subs	r3, #1
  4002d6:	4a0e      	ldr	r2, [pc, #56]	; (400310 <ADC_Handler+0x7c>)
  4002d8:	6013      	str	r3, [r2, #0]
			}
		}
		adc_enable_channel(ADC, DAQSettingsPtr->sequence[sequencePosition]); // todo: channel maping
  4002da:	4b08      	ldr	r3, [pc, #32]	; (4002fc <ADC_Handler+0x68>)
  4002dc:	681a      	ldr	r2, [r3, #0]
  4002de:	4b0e      	ldr	r3, [pc, #56]	; (400318 <ADC_Handler+0x84>)
  4002e0:	681b      	ldr	r3, [r3, #0]
  4002e2:	4413      	add	r3, r2
  4002e4:	4806      	ldr	r0, [pc, #24]	; (400300 <ADC_Handler+0x6c>)
  4002e6:	7a19      	ldrb	r1, [r3, #8]
  4002e8:	4b0c      	ldr	r3, [pc, #48]	; (40031c <ADC_Handler+0x88>)
  4002ea:	4798      	blx	r3
  4002ec:	bd10      	pop	{r4, pc}
	}
	else
	{
		tc_stop(TC0, 0);
  4002ee:	480c      	ldr	r0, [pc, #48]	; (400320 <ADC_Handler+0x8c>)
  4002f0:	2100      	movs	r1, #0
  4002f2:	4b0c      	ldr	r3, [pc, #48]	; (400324 <ADC_Handler+0x90>)
  4002f4:	4798      	blx	r3
  4002f6:	bd10      	pop	{r4, pc}
  4002f8:	004003a9 	.word	0x004003a9
  4002fc:	20000720 	.word	0x20000720
  400300:	40038000 	.word	0x40038000
  400304:	00400fcd 	.word	0x00400fcd
  400308:	2000071c 	.word	0x2000071c
  40030c:	00400fc5 	.word	0x00400fc5
  400310:	20000718 	.word	0x20000718
  400314:	20000714 	.word	0x20000714
  400318:	20000000 	.word	0x20000000
  40031c:	00400fb9 	.word	0x00400fb9
  400320:	40010000 	.word	0x40010000
  400324:	00401365 	.word	0x00401365

00400328 <dac_init>:
#include "pmc.h"
#include "pio.h"
#include "stdint-gcc.h"

void dac_init (void)
{
  400328:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
  40032a:	201e      	movs	r0, #30
  40032c:	4c15      	ldr	r4, [pc, #84]	; (400384 <dac_init+0x5c>)
  40032e:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  400330:	200c      	movs	r0, #12
  400332:	47a0      	blx	r4
	
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB13);
  400334:	4d14      	ldr	r5, [pc, #80]	; (400388 <dac_init+0x60>)
  400336:	4628      	mov	r0, r5
  400338:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40033c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400340:	4c12      	ldr	r4, [pc, #72]	; (40038c <dac_init+0x64>)
  400342:	47a0      	blx	r4
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB14);
  400344:	4628      	mov	r0, r5
  400346:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40034a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40034e:	47a0      	blx	r4
	dacc_reset(DACC);
  400350:	4c0f      	ldr	r4, [pc, #60]	; (400390 <dac_init+0x68>)
  400352:	4620      	mov	r0, r4
  400354:	4b0f      	ldr	r3, [pc, #60]	; (400394 <dac_init+0x6c>)
  400356:	4798      	blx	r3
	dacc_set_writeprotect(DACC, 0);
  400358:	4620      	mov	r0, r4
  40035a:	2100      	movs	r1, #0
  40035c:	4b0e      	ldr	r3, [pc, #56]	; (400398 <dac_init+0x70>)
  40035e:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);
  400360:	4620      	mov	r0, r4
  400362:	2100      	movs	r1, #0
  400364:	4d0d      	ldr	r5, [pc, #52]	; (40039c <dac_init+0x74>)
  400366:	47a8      	blx	r5
	dacc_enable_channel(DACC, 1);	
  400368:	4620      	mov	r0, r4
  40036a:	2101      	movs	r1, #1
  40036c:	47a8      	blx	r5
	dacc_set_timing(DACC, 1, 0, 15);
  40036e:	4620      	mov	r0, r4
  400370:	2101      	movs	r1, #1
  400372:	2200      	movs	r2, #0
  400374:	230f      	movs	r3, #15
  400376:	4d0a      	ldr	r5, [pc, #40]	; (4003a0 <dac_init+0x78>)
  400378:	47a8      	blx	r5
	dacc_disable_trigger(DACC);
  40037a:	4620      	mov	r0, r4
  40037c:	4b09      	ldr	r3, [pc, #36]	; (4003a4 <dac_init+0x7c>)
  40037e:	4798      	blx	r3
  400380:	bd38      	pop	{r3, r4, r5, pc}
  400382:	bf00      	nop
  400384:	00401281 	.word	0x00401281
  400388:	400e1000 	.word	0x400e1000
  40038c:	00401049 	.word	0x00401049
  400390:	4003c000 	.word	0x4003c000
  400394:	00400fd5 	.word	0x00400fd5
  400398:	00400fe9 	.word	0x00400fe9
  40039c:	00401035 	.word	0x00401035
  4003a0:	00401005 	.word	0x00401005
  4003a4:	00400fdd 	.word	0x00400fdd

004003a8 <get_current_DAQ_settings>:
}


daq_settings_t * get_current_DAQ_settings (void)
{
		daqSettings.sequence[0]= 1;
  4003a8:	4803      	ldr	r0, [pc, #12]	; (4003b8 <get_current_DAQ_settings+0x10>)
  4003aa:	2301      	movs	r3, #1
  4003ac:	7203      	strb	r3, [r0, #8]
		daqSettings.sequence[1]= 2;
  4003ae:	2302      	movs	r3, #2
  4003b0:	7243      	strb	r3, [r0, #9]
		daqSettings.sequence[2]= 3;
  4003b2:	2303      	movs	r3, #3
  4003b4:	7283      	strb	r3, [r0, #10]

	return (&daqSettings);
}
  4003b6:	4770      	bx	lr
  4003b8:	20000724 	.word	0x20000724

004003bc <board_init>:
#include <conf_board.h>
#include "wdt.h"
#include "DAC.h"

void board_init(void)
{
  4003bc:	b570      	push	{r4, r5, r6, lr}
  4003be:	b082      	sub	sp, #8
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	sysclk_init();
  4003c0:	4b0e      	ldr	r3, [pc, #56]	; (4003fc <board_init+0x40>)
  4003c2:	4798      	blx	r3
	wdt_disable(WDT);
  4003c4:	480e      	ldr	r0, [pc, #56]	; (400400 <board_init+0x44>)
  4003c6:	4b0f      	ldr	r3, [pc, #60]	; (400404 <board_init+0x48>)
  4003c8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
  4003ca:	200b      	movs	r0, #11
  4003cc:	4b0e      	ldr	r3, [pc, #56]	; (400408 <board_init+0x4c>)
  4003ce:	4798      	blx	r3
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
  4003d0:	4e0e      	ldr	r6, [pc, #56]	; (40040c <board_init+0x50>)
  4003d2:	2400      	movs	r4, #0
  4003d4:	9400      	str	r4, [sp, #0]
  4003d6:	4630      	mov	r0, r6
  4003d8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4003dc:	4622      	mov	r2, r4
  4003de:	4623      	mov	r3, r4
  4003e0:	4d0b      	ldr	r5, [pc, #44]	; (400410 <board_init+0x54>)
  4003e2:	47a8      	blx	r5
	pio_set_output(PIOA, PIO_PA18, LOW, DISABLE, DISABLE);
  4003e4:	9400      	str	r4, [sp, #0]
  4003e6:	4630      	mov	r0, r6
  4003e8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  4003ec:	4622      	mov	r2, r4
  4003ee:	4623      	mov	r3, r4
  4003f0:	47a8      	blx	r5
	dac_init();
  4003f2:	4b08      	ldr	r3, [pc, #32]	; (400414 <board_init+0x58>)
  4003f4:	4798      	blx	r3
	
}
  4003f6:	b002      	add	sp, #8
  4003f8:	bd70      	pop	{r4, r5, r6, pc}
  4003fa:	bf00      	nop
  4003fc:	00400419 	.word	0x00400419
  400400:	400e1450 	.word	0x400e1450
  400404:	004029d9 	.word	0x004029d9
  400408:	00401281 	.word	0x00401281
  40040c:	400e0e00 	.word	0x400e0e00
  400410:	004010d9 	.word	0x004010d9
  400414:	00400329 	.word	0x00400329

00400418 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400418:	b510      	push	{r4, lr}
	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40041a:	480d      	ldr	r0, [pc, #52]	; (400450 <sysclk_init+0x38>)
  40041c:	4b0d      	ldr	r3, [pc, #52]	; (400454 <sysclk_init+0x3c>)
  40041e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400420:	2000      	movs	r0, #0
  400422:	213e      	movs	r1, #62	; 0x3e
  400424:	4b0c      	ldr	r3, [pc, #48]	; (400458 <sysclk_init+0x40>)
  400426:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400428:	4c0c      	ldr	r4, [pc, #48]	; (40045c <sysclk_init+0x44>)
  40042a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40042c:	2800      	cmp	r0, #0
  40042e:	d0fc      	beq.n	40042a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400430:	4b0b      	ldr	r3, [pc, #44]	; (400460 <sysclk_init+0x48>)
  400432:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400434:	4a0b      	ldr	r2, [pc, #44]	; (400464 <sysclk_init+0x4c>)
  400436:	4b0c      	ldr	r3, [pc, #48]	; (400468 <sysclk_init+0x50>)
  400438:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40043a:	4c0c      	ldr	r4, [pc, #48]	; (40046c <sysclk_init+0x54>)
  40043c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40043e:	2800      	cmp	r0, #0
  400440:	d0fc      	beq.n	40043c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400442:	2010      	movs	r0, #16
  400444:	4b0a      	ldr	r3, [pc, #40]	; (400470 <sysclk_init+0x58>)
  400446:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400448:	4b0a      	ldr	r3, [pc, #40]	; (400474 <sysclk_init+0x5c>)
  40044a:	4798      	blx	r3
  40044c:	bd10      	pop	{r4, pc}
  40044e:	bf00      	nop
  400450:	03d09000 	.word	0x03d09000
  400454:	00402ba9 	.word	0x00402ba9
  400458:	004011fd 	.word	0x004011fd
  40045c:	00401251 	.word	0x00401251
  400460:	00401261 	.word	0x00401261
  400464:	201f3f03 	.word	0x201f3f03
  400468:	400e0400 	.word	0x400e0400
  40046c:	00401271 	.word	0x00401271
  400470:	00401199 	.word	0x00401199
  400474:	00402a95 	.word	0x00402a95

00400478 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400478:	490e      	ldr	r1, [pc, #56]	; (4004b4 <udi_cdc_comm_enable+0x3c>)
  40047a:	2300      	movs	r3, #0
  40047c:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  40047e:	4a0e      	ldr	r2, [pc, #56]	; (4004b8 <udi_cdc_comm_enable+0x40>)
  400480:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400482:	4a0e      	ldr	r2, [pc, #56]	; (4004bc <udi_cdc_comm_enable+0x44>)
  400484:	20a1      	movs	r0, #161	; 0xa1
  400486:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400488:	2020      	movs	r0, #32
  40048a:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  40048c:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40048e:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400490:	2002      	movs	r0, #2
  400492:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400494:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400496:	4a0a      	ldr	r2, [pc, #40]	; (4004c0 <udi_cdc_comm_enable+0x48>)
  400498:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  40049c:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  40049e:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4004a0:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4004a2:	2308      	movs	r3, #8
  4004a4:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  4004a6:	780b      	ldrb	r3, [r1, #0]
  4004a8:	3301      	adds	r3, #1
  4004aa:	b2db      	uxtb	r3, r3
  4004ac:	700b      	strb	r3, [r1, #0]
	return true;
}
  4004ae:	2001      	movs	r0, #1
  4004b0:	4770      	bx	lr
  4004b2:	bf00      	nop
  4004b4:	20000594 	.word	0x20000594
  4004b8:	20000640 	.word	0x20000640
  4004bc:	200005ac 	.word	0x200005ac
  4004c0:	200004fc 	.word	0x200004fc

004004c4 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  4004c4:	4b02      	ldr	r3, [pc, #8]	; (4004d0 <udi_cdc_comm_disable+0xc>)
  4004c6:	781a      	ldrb	r2, [r3, #0]
  4004c8:	3a01      	subs	r2, #1
  4004ca:	b2d2      	uxtb	r2, r2
  4004cc:	701a      	strb	r2, [r3, #0]
  4004ce:	4770      	bx	lr
  4004d0:	20000594 	.word	0x20000594

004004d4 <udi_cdc_data_disable>:
{
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  4004d4:	4b04      	ldr	r3, [pc, #16]	; (4004e8 <udi_cdc_data_disable+0x14>)
  4004d6:	781a      	ldrb	r2, [r3, #0]
  4004d8:	3a01      	subs	r2, #1
  4004da:	b2d2      	uxtb	r2, r2
  4004dc:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  4004de:	781b      	ldrb	r3, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4004e0:	2200      	movs	r2, #0
  4004e2:	4b02      	ldr	r3, [pc, #8]	; (4004ec <udi_cdc_data_disable+0x18>)
  4004e4:	701a      	strb	r2, [r3, #0]
  4004e6:	4770      	bx	lr
  4004e8:	20000504 	.word	0x20000504
  4004ec:	200005a0 	.word	0x200005a0

004004f0 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4004f0:	2000      	movs	r0, #0
  4004f2:	4770      	bx	lr

004004f4 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4004f4:	2000      	movs	r0, #0
  4004f6:	4770      	bx	lr

004004f8 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
  4004f8:	4b1d      	ldr	r3, [pc, #116]	; (400570 <udi_cdc_comm_setup+0x78>)
  4004fa:	781b      	ldrb	r3, [r3, #0]
  4004fc:	f013 0f80 	tst.w	r3, #128	; 0x80
  400500:	d012      	beq.n	400528 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400502:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400506:	2b20      	cmp	r3, #32
  400508:	d128      	bne.n	40055c <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  40050a:	4b19      	ldr	r3, [pc, #100]	; (400570 <udi_cdc_comm_setup+0x78>)
  40050c:	785b      	ldrb	r3, [r3, #1]
  40050e:	2b21      	cmp	r3, #33	; 0x21
  400510:	d126      	bne.n	400560 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  400512:	4b17      	ldr	r3, [pc, #92]	; (400570 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400514:	88db      	ldrh	r3, [r3, #6]
  400516:	2b07      	cmp	r3, #7
  400518:	d124      	bne.n	400564 <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  40051a:	4b15      	ldr	r3, [pc, #84]	; (400570 <udi_cdc_comm_setup+0x78>)
  40051c:	4a15      	ldr	r2, [pc, #84]	; (400574 <udi_cdc_comm_setup+0x7c>)
  40051e:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  400520:	2207      	movs	r2, #7
  400522:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  400524:	2001      	movs	r0, #1
  400526:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400528:	f003 0360 	and.w	r3, r3, #96	; 0x60
  40052c:	2b20      	cmp	r3, #32
  40052e:	d11b      	bne.n	400568 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  400530:	4b0f      	ldr	r3, [pc, #60]	; (400570 <udi_cdc_comm_setup+0x78>)
  400532:	7858      	ldrb	r0, [r3, #1]
  400534:	2820      	cmp	r0, #32
  400536:	d004      	beq.n	400542 <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400538:	2822      	cmp	r0, #34	; 0x22
  40053a:	bf14      	ite	ne
  40053c:	2000      	movne	r0, #0
  40053e:	2001      	moveq	r0, #1
  400540:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  400542:	4b0b      	ldr	r3, [pc, #44]	; (400570 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400544:	88db      	ldrh	r3, [r3, #6]
  400546:	2b07      	cmp	r3, #7
  400548:	d110      	bne.n	40056c <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
  40054a:	4b09      	ldr	r3, [pc, #36]	; (400570 <udi_cdc_comm_setup+0x78>)
  40054c:	4a0a      	ldr	r2, [pc, #40]	; (400578 <udi_cdc_comm_setup+0x80>)
  40054e:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  400550:	4a08      	ldr	r2, [pc, #32]	; (400574 <udi_cdc_comm_setup+0x7c>)
  400552:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  400554:	2207      	movs	r2, #7
  400556:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  400558:	2001      	movs	r0, #1
  40055a:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  40055c:	2000      	movs	r0, #0
  40055e:	4770      	bx	lr
  400560:	2000      	movs	r0, #0
  400562:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  400564:	2000      	movs	r0, #0
  400566:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400568:	2000      	movs	r0, #0
  40056a:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  40056c:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
  40056e:	4770      	bx	lr
  400570:	20000744 	.word	0x20000744
  400574:	200004fc 	.word	0x200004fc
  400578:	0040057d 	.word	0x0040057d

0040057c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  40057c:	4770      	bx	lr
  40057e:	bf00      	nop

00400580 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
  400580:	b530      	push	{r4, r5, lr}
  400582:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400584:	4b42      	ldr	r3, [pc, #264]	; (400690 <udi_cdc_tx_send+0x110>)
  400586:	781b      	ldrb	r3, [r3, #0]
  400588:	f013 0fff 	tst.w	r3, #255	; 0xff
  40058c:	d17e      	bne.n	40068c <udi_cdc_tx_send+0x10c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  40058e:	4b41      	ldr	r3, [pc, #260]	; (400694 <udi_cdc_tx_send+0x114>)
  400590:	4798      	blx	r3
  400592:	b130      	cbz	r0, 4005a2 <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400594:	4b40      	ldr	r3, [pc, #256]	; (400698 <udi_cdc_tx_send+0x118>)
  400596:	881c      	ldrh	r4, [r3, #0]
  400598:	4b40      	ldr	r3, [pc, #256]	; (40069c <udi_cdc_tx_send+0x11c>)
  40059a:	4798      	blx	r3
  40059c:	4284      	cmp	r4, r0
  40059e:	d106      	bne.n	4005ae <udi_cdc_tx_send+0x2e>
  4005a0:	e074      	b.n	40068c <udi_cdc_tx_send+0x10c>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4005a2:	4b3d      	ldr	r3, [pc, #244]	; (400698 <udi_cdc_tx_send+0x118>)
  4005a4:	881c      	ldrh	r4, [r3, #0]
  4005a6:	4b3e      	ldr	r3, [pc, #248]	; (4006a0 <udi_cdc_tx_send+0x120>)
  4005a8:	4798      	blx	r3
  4005aa:	4284      	cmp	r4, r0
  4005ac:	d06e      	beq.n	40068c <udi_cdc_tx_send+0x10c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4005ae:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  4005b2:	f1d3 0501 	rsbs	r5, r3, #1
  4005b6:	bf38      	it	cc
  4005b8:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4005ba:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4005bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4005c0:	2200      	movs	r2, #0
  4005c2:	4b38      	ldr	r3, [pc, #224]	; (4006a4 <udi_cdc_tx_send+0x124>)
  4005c4:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  4005c6:	4b38      	ldr	r3, [pc, #224]	; (4006a8 <udi_cdc_tx_send+0x128>)
  4005c8:	781c      	ldrb	r4, [r3, #0]
  4005ca:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  4005cc:	4b37      	ldr	r3, [pc, #220]	; (4006ac <udi_cdc_tx_send+0x12c>)
  4005ce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4005d2:	b9db      	cbnz	r3, 40060c <udi_cdc_tx_send+0x8c>
		sof_zlp_counter++;
  4005d4:	4b36      	ldr	r3, [pc, #216]	; (4006b0 <udi_cdc_tx_send+0x130>)
  4005d6:	881a      	ldrh	r2, [r3, #0]
  4005d8:	3201      	adds	r2, #1
  4005da:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4005dc:	4b2d      	ldr	r3, [pc, #180]	; (400694 <udi_cdc_tx_send+0x114>)
  4005de:	4798      	blx	r3
  4005e0:	b918      	cbnz	r0, 4005ea <udi_cdc_tx_send+0x6a>
  4005e2:	4b33      	ldr	r3, [pc, #204]	; (4006b0 <udi_cdc_tx_send+0x130>)
  4005e4:	881b      	ldrh	r3, [r3, #0]
  4005e6:	2b63      	cmp	r3, #99	; 0x63
  4005e8:	d907      	bls.n	4005fa <udi_cdc_tx_send+0x7a>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4005ea:	4b2a      	ldr	r3, [pc, #168]	; (400694 <udi_cdc_tx_send+0x114>)
  4005ec:	4798      	blx	r3
  4005ee:	b168      	cbz	r0, 40060c <udi_cdc_tx_send+0x8c>
  4005f0:	4b2f      	ldr	r3, [pc, #188]	; (4006b0 <udi_cdc_tx_send+0x130>)
  4005f2:	881b      	ldrh	r3, [r3, #0]
  4005f4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  4005f8:	d208      	bcs.n	40060c <udi_cdc_tx_send+0x8c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4005fa:	2d00      	cmp	r5, #0
  4005fc:	d046      	beq.n	40068c <udi_cdc_tx_send+0x10c>
		cpu_irq_enable();
  4005fe:	2201      	movs	r2, #1
  400600:	4b28      	ldr	r3, [pc, #160]	; (4006a4 <udi_cdc_tx_send+0x124>)
  400602:	701a      	strb	r2, [r3, #0]
  400604:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400608:	b662      	cpsie	i
  40060a:	e03f      	b.n	40068c <udi_cdc_tx_send+0x10c>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40060c:	2200      	movs	r2, #0
  40060e:	4b28      	ldr	r3, [pc, #160]	; (4006b0 <udi_cdc_tx_send+0x130>)
  400610:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400612:	4b28      	ldr	r3, [pc, #160]	; (4006b4 <udi_cdc_tx_send+0x134>)
  400614:	781b      	ldrb	r3, [r3, #0]
  400616:	f013 0fff 	tst.w	r3, #255	; 0xff
  40061a:	d106      	bne.n	40062a <udi_cdc_tx_send+0xaa>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40061c:	4294      	cmp	r4, r2
  40061e:	bf14      	ite	ne
  400620:	2200      	movne	r2, #0
  400622:	2201      	moveq	r2, #1
  400624:	4b20      	ldr	r3, [pc, #128]	; (4006a8 <udi_cdc_tx_send+0x128>)
  400626:	701a      	strb	r2, [r3, #0]
  400628:	e003      	b.n	400632 <udi_cdc_tx_send+0xb2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  40062a:	f1d4 0401 	rsbs	r4, r4, #1
  40062e:	bf38      	it	cc
  400630:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  400632:	2201      	movs	r2, #1
  400634:	4b16      	ldr	r3, [pc, #88]	; (400690 <udi_cdc_tx_send+0x110>)
  400636:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400638:	b125      	cbz	r5, 400644 <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
  40063a:	4b1a      	ldr	r3, [pc, #104]	; (4006a4 <udi_cdc_tx_send+0x124>)
  40063c:	701a      	strb	r2, [r3, #0]
  40063e:	f3bf 8f5f 	dmb	sy
  400642:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400644:	4625      	mov	r5, r4
  400646:	4b19      	ldr	r3, [pc, #100]	; (4006ac <udi_cdc_tx_send+0x12c>)
  400648:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
  40064c:	3c40      	subs	r4, #64	; 0x40
  40064e:	bf18      	it	ne
  400650:	2401      	movne	r4, #1
	if (b_short_packet) {
  400652:	b164      	cbz	r4, 40066e <udi_cdc_tx_send+0xee>
		if (udd_is_high_speed()) {
  400654:	4b0f      	ldr	r3, [pc, #60]	; (400694 <udi_cdc_tx_send+0x114>)
  400656:	4798      	blx	r3
  400658:	b120      	cbz	r0, 400664 <udi_cdc_tx_send+0xe4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  40065a:	4b10      	ldr	r3, [pc, #64]	; (40069c <udi_cdc_tx_send+0x11c>)
  40065c:	4798      	blx	r3
  40065e:	4b0e      	ldr	r3, [pc, #56]	; (400698 <udi_cdc_tx_send+0x118>)
  400660:	8018      	strh	r0, [r3, #0]
  400662:	e007      	b.n	400674 <udi_cdc_tx_send+0xf4>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400664:	4b0e      	ldr	r3, [pc, #56]	; (4006a0 <udi_cdc_tx_send+0x120>)
  400666:	4798      	blx	r3
  400668:	4b0b      	ldr	r3, [pc, #44]	; (400698 <udi_cdc_tx_send+0x118>)
  40066a:	8018      	strh	r0, [r3, #0]
  40066c:	e002      	b.n	400674 <udi_cdc_tx_send+0xf4>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  40066e:	2200      	movs	r2, #0
  400670:	4b09      	ldr	r3, [pc, #36]	; (400698 <udi_cdc_tx_send+0x118>)
  400672:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400674:	4b0d      	ldr	r3, [pc, #52]	; (4006ac <udi_cdc_tx_send+0x12c>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  400676:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  40067a:	4a0f      	ldr	r2, [pc, #60]	; (4006b8 <udi_cdc_tx_send+0x138>)
  40067c:	9200      	str	r2, [sp, #0]
  40067e:	2081      	movs	r0, #129	; 0x81
  400680:	4621      	mov	r1, r4
  400682:	4a0e      	ldr	r2, [pc, #56]	; (4006bc <udi_cdc_tx_send+0x13c>)
  400684:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  400688:	4c0d      	ldr	r4, [pc, #52]	; (4006c0 <udi_cdc_tx_send+0x140>)
  40068a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  40068c:	b003      	add	sp, #12
  40068e:	bd30      	pop	{r4, r5, pc}
  400690:	200005a8 	.word	0x200005a8
  400694:	00402385 	.word	0x00402385
  400698:	2000059c 	.word	0x2000059c
  40069c:	004023ed 	.word	0x004023ed
  4006a0:	004023dd 	.word	0x004023dd
  4006a4:	200000a4 	.word	0x200000a4
  4006a8:	20000508 	.word	0x20000508
  4006ac:	2000050c 	.word	0x2000050c
  4006b0:	200005a2 	.word	0x200005a2
  4006b4:	2000063c 	.word	0x2000063c
  4006b8:	004006c5 	.word	0x004006c5
  4006bc:	20000510 	.word	0x20000510
  4006c0:	0040273d 	.word	0x0040273d

004006c4 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  4006c4:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  4006c6:	b978      	cbnz	r0, 4006e8 <udi_cdc_data_sent+0x24>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  4006c8:	4b08      	ldr	r3, [pc, #32]	; (4006ec <udi_cdc_data_sent+0x28>)
  4006ca:	781b      	ldrb	r3, [r3, #0]
  4006cc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4006d0:	bf14      	ite	ne
  4006d2:	2200      	movne	r2, #0
  4006d4:	2201      	moveq	r2, #1
  4006d6:	4b06      	ldr	r3, [pc, #24]	; (4006f0 <udi_cdc_data_sent+0x2c>)
  4006d8:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4006dc:	4b05      	ldr	r3, [pc, #20]	; (4006f4 <udi_cdc_data_sent+0x30>)
  4006de:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4006e0:	4b05      	ldr	r3, [pc, #20]	; (4006f8 <udi_cdc_data_sent+0x34>)
  4006e2:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  4006e4:	4b05      	ldr	r3, [pc, #20]	; (4006fc <udi_cdc_data_sent+0x38>)
  4006e6:	4798      	blx	r3
  4006e8:	bd08      	pop	{r3, pc}
  4006ea:	bf00      	nop
  4006ec:	20000508 	.word	0x20000508
  4006f0:	2000050c 	.word	0x2000050c
  4006f4:	2000063c 	.word	0x2000063c
  4006f8:	200005a8 	.word	0x200005a8
  4006fc:	00400581 	.word	0x00400581

00400700 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
  400700:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  400702:	2000      	movs	r0, #0
  400704:	4b01      	ldr	r3, [pc, #4]	; (40070c <udi_cdc_data_sof_notify+0xc>)
  400706:	4798      	blx	r3
  400708:	bd08      	pop	{r3, pc}
  40070a:	bf00      	nop
  40070c:	00400581 	.word	0x00400581

00400710 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400710:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400714:	b672      	cpsid	i
  400716:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40071a:	2100      	movs	r1, #0
  40071c:	4a09      	ldr	r2, [pc, #36]	; (400744 <udi_cdc_multi_get_nb_received_data+0x34>)
  40071e:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400720:	4a09      	ldr	r2, [pc, #36]	; (400748 <udi_cdc_multi_get_nb_received_data+0x38>)
  400722:	8810      	ldrh	r0, [r2, #0]
  400724:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400726:	4a09      	ldr	r2, [pc, #36]	; (40074c <udi_cdc_multi_get_nb_received_data+0x3c>)
  400728:	7811      	ldrb	r1, [r2, #0]
  40072a:	4a09      	ldr	r2, [pc, #36]	; (400750 <udi_cdc_multi_get_nb_received_data+0x40>)
  40072c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  400730:	1a10      	subs	r0, r2, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400732:	b92b      	cbnz	r3, 400740 <udi_cdc_multi_get_nb_received_data+0x30>
		cpu_irq_enable();
  400734:	2201      	movs	r2, #1
  400736:	4b03      	ldr	r3, [pc, #12]	; (400744 <udi_cdc_multi_get_nb_received_data+0x34>)
  400738:	701a      	strb	r2, [r3, #0]
  40073a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40073e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400740:	4770      	bx	lr
  400742:	bf00      	nop
  400744:	200000a4 	.word	0x200000a4
  400748:	20000598 	.word	0x20000598
  40074c:	200005a4 	.word	0x200005a4
  400750:	20000590 	.word	0x20000590

00400754 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400754:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400756:	4b03      	ldr	r3, [pc, #12]	; (400764 <udi_cdc_multi_is_rx_ready+0x10>)
  400758:	4798      	blx	r3
}
  40075a:	3000      	adds	r0, #0
  40075c:	bf18      	it	ne
  40075e:	2001      	movne	r0, #1
  400760:	bd08      	pop	{r3, pc}
  400762:	bf00      	nop
  400764:	00400711 	.word	0x00400711

00400768 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400768:	b510      	push	{r4, lr}
  40076a:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40076c:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400770:	f1d3 0301 	rsbs	r3, r3, #1
  400774:	bf38      	it	cc
  400776:	2300      	movcc	r3, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400778:	b672      	cpsid	i
  40077a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40077e:	2100      	movs	r1, #0
  400780:	4a1e      	ldr	r2, [pc, #120]	; (4007fc <udi_cdc_rx_start+0x94>)
  400782:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400784:	4a1e      	ldr	r2, [pc, #120]	; (400800 <udi_cdc_rx_start+0x98>)
  400786:	7814      	ldrb	r4, [r2, #0]
  400788:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
  40078a:	4a1e      	ldr	r2, [pc, #120]	; (400804 <udi_cdc_rx_start+0x9c>)
  40078c:	7812      	ldrb	r2, [r2, #0]
  40078e:	f012 0fff 	tst.w	r2, #255	; 0xff
  400792:	d107      	bne.n	4007a4 <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400794:	4a1c      	ldr	r2, [pc, #112]	; (400808 <udi_cdc_rx_start+0xa0>)
  400796:	8812      	ldrh	r2, [r2, #0]
  400798:	b292      	uxth	r2, r2
  40079a:	491c      	ldr	r1, [pc, #112]	; (40080c <udi_cdc_rx_start+0xa4>)
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  40079c:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
  4007a0:	4291      	cmp	r1, r2
  4007a2:	d908      	bls.n	4007b6 <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007a4:	b33b      	cbz	r3, 4007f6 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  4007a6:	2201      	movs	r2, #1
  4007a8:	4b14      	ldr	r3, [pc, #80]	; (4007fc <udi_cdc_rx_start+0x94>)
  4007aa:	701a      	strb	r2, [r3, #0]
  4007ac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4007b0:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  4007b2:	2000      	movs	r0, #0
  4007b4:	e020      	b.n	4007f8 <udi_cdc_rx_start+0x90>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  4007b6:	2100      	movs	r1, #0
  4007b8:	4a13      	ldr	r2, [pc, #76]	; (400808 <udi_cdc_rx_start+0xa0>)
  4007ba:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4007bc:	428c      	cmp	r4, r1
  4007be:	bf14      	ite	ne
  4007c0:	2100      	movne	r1, #0
  4007c2:	2101      	moveq	r1, #1
  4007c4:	4a0e      	ldr	r2, [pc, #56]	; (400800 <udi_cdc_rx_start+0x98>)
  4007c6:	7011      	strb	r1, [r2, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  4007c8:	2101      	movs	r1, #1
  4007ca:	4a0e      	ldr	r2, [pc, #56]	; (400804 <udi_cdc_rx_start+0x9c>)
  4007cc:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007ce:	b123      	cbz	r3, 4007da <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  4007d0:	4b0a      	ldr	r3, [pc, #40]	; (4007fc <udi_cdc_rx_start+0x94>)
  4007d2:	7019      	strb	r1, [r3, #0]
  4007d4:	f3bf 8f5f 	dmb	sy
  4007d8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
  4007da:	2000      	movs	r0, #0
  4007dc:	4b0c      	ldr	r3, [pc, #48]	; (400810 <udi_cdc_rx_start+0xa8>)
  4007de:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  4007e0:	4b0c      	ldr	r3, [pc, #48]	; (400814 <udi_cdc_rx_start+0xac>)
  4007e2:	9300      	str	r3, [sp, #0]
  4007e4:	2002      	movs	r0, #2
  4007e6:	2101      	movs	r1, #1
  4007e8:	4a0b      	ldr	r2, [pc, #44]	; (400818 <udi_cdc_rx_start+0xb0>)
  4007ea:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  4007ee:	2340      	movs	r3, #64	; 0x40
  4007f0:	4c0a      	ldr	r4, [pc, #40]	; (40081c <udi_cdc_rx_start+0xb4>)
  4007f2:	47a0      	blx	r4
  4007f4:	e000      	b.n	4007f8 <udi_cdc_rx_start+0x90>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  4007f6:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  4007f8:	b002      	add	sp, #8
  4007fa:	bd10      	pop	{r4, pc}
  4007fc:	200000a4 	.word	0x200000a4
  400800:	200005a4 	.word	0x200005a4
  400804:	20000638 	.word	0x20000638
  400808:	20000598 	.word	0x20000598
  40080c:	20000590 	.word	0x20000590
  400810:	00400755 	.word	0x00400755
  400814:	004008b1 	.word	0x004008b1
  400818:	200005b8 	.word	0x200005b8
  40081c:	0040273d 	.word	0x0040273d

00400820 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
  400820:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
  400822:	2400      	movs	r4, #0
  400824:	4b15      	ldr	r3, [pc, #84]	; (40087c <udi_cdc_data_enable+0x5c>)
  400826:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  400828:	4b15      	ldr	r3, [pc, #84]	; (400880 <udi_cdc_data_enable+0x60>)
  40082a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40082c:	4b15      	ldr	r3, [pc, #84]	; (400884 <udi_cdc_data_enable+0x64>)
  40082e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400830:	4b15      	ldr	r3, [pc, #84]	; (400888 <udi_cdc_data_enable+0x68>)
  400832:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400834:	4b15      	ldr	r3, [pc, #84]	; (40088c <udi_cdc_data_enable+0x6c>)
  400836:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400838:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40083a:	4b15      	ldr	r3, [pc, #84]	; (400890 <udi_cdc_data_enable+0x70>)
  40083c:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  40083e:	4620      	mov	r0, r4
  400840:	4b14      	ldr	r3, [pc, #80]	; (400894 <udi_cdc_data_enable+0x74>)
  400842:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400844:	4b14      	ldr	r3, [pc, #80]	; (400898 <udi_cdc_data_enable+0x78>)
  400846:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400848:	4b14      	ldr	r3, [pc, #80]	; (40089c <udi_cdc_data_enable+0x7c>)
  40084a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  40084c:	4b14      	ldr	r3, [pc, #80]	; (4008a0 <udi_cdc_data_enable+0x80>)
  40084e:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
  400850:	4b14      	ldr	r3, [pc, #80]	; (4008a4 <udi_cdc_data_enable+0x84>)
  400852:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400854:	4620      	mov	r0, r4
  400856:	4b14      	ldr	r3, [pc, #80]	; (4008a8 <udi_cdc_data_enable+0x88>)
  400858:	4798      	blx	r3
  40085a:	4602      	mov	r2, r0
  40085c:	b158      	cbz	r0, 400876 <udi_cdc_data_enable+0x56>
		return false;
	}
	udi_cdc_nb_data_enabled++;
  40085e:	4b07      	ldr	r3, [pc, #28]	; (40087c <udi_cdc_data_enable+0x5c>)
  400860:	7819      	ldrb	r1, [r3, #0]
  400862:	3101      	adds	r1, #1
  400864:	b2c9      	uxtb	r1, r1
  400866:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  400868:	781b      	ldrb	r3, [r3, #0]
  40086a:	b2db      	uxtb	r3, r3
  40086c:	2b01      	cmp	r3, #1
  40086e:	d102      	bne.n	400876 <udi_cdc_data_enable+0x56>
		udi_cdc_data_running = true;
  400870:	2101      	movs	r1, #1
  400872:	4b0e      	ldr	r3, [pc, #56]	; (4008ac <udi_cdc_data_enable+0x8c>)
  400874:	7019      	strb	r1, [r3, #0]
	}
	return true;
}
  400876:	4610      	mov	r0, r2
  400878:	bd10      	pop	{r4, pc}
  40087a:	bf00      	nop
  40087c:	20000504 	.word	0x20000504
  400880:	200005a8 	.word	0x200005a8
  400884:	2000063c 	.word	0x2000063c
  400888:	20000508 	.word	0x20000508
  40088c:	2000050c 	.word	0x2000050c
  400890:	2000059c 	.word	0x2000059c
  400894:	00400581 	.word	0x00400581
  400898:	20000638 	.word	0x20000638
  40089c:	200005a4 	.word	0x200005a4
  4008a0:	20000590 	.word	0x20000590
  4008a4:	20000598 	.word	0x20000598
  4008a8:	00400769 	.word	0x00400769
  4008ac:	200005a0 	.word	0x200005a0

004008b0 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  4008b0:	b510      	push	{r4, lr}
  4008b2:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  4008b4:	b9d0      	cbnz	r0, 4008ec <udi_cdc_data_received+0x3c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  4008b6:	4b0e      	ldr	r3, [pc, #56]	; (4008f0 <udi_cdc_data_received+0x40>)
  4008b8:	781b      	ldrb	r3, [r3, #0]
  4008ba:	f013 0fff 	tst.w	r3, #255	; 0xff
  4008be:	bf14      	ite	ne
  4008c0:	2300      	movne	r3, #0
  4008c2:	2301      	moveq	r3, #1
	if (!n) {
  4008c4:	b951      	cbnz	r1, 4008dc <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
  4008c6:	490b      	ldr	r1, [pc, #44]	; (4008f4 <udi_cdc_data_received+0x44>)
  4008c8:	9100      	str	r1, [sp, #0]
  4008ca:	4610      	mov	r0, r2
  4008cc:	2101      	movs	r1, #1
  4008ce:	4a0a      	ldr	r2, [pc, #40]	; (4008f8 <udi_cdc_data_received+0x48>)
  4008d0:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  4008d4:	2340      	movs	r3, #64	; 0x40
  4008d6:	4c09      	ldr	r4, [pc, #36]	; (4008fc <udi_cdc_data_received+0x4c>)
  4008d8:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  4008da:	e007      	b.n	4008ec <udi_cdc_data_received+0x3c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  4008dc:	4a08      	ldr	r2, [pc, #32]	; (400900 <udi_cdc_data_received+0x50>)
  4008de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  4008e2:	2000      	movs	r0, #0
  4008e4:	4b07      	ldr	r3, [pc, #28]	; (400904 <udi_cdc_data_received+0x54>)
  4008e6:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  4008e8:	4b07      	ldr	r3, [pc, #28]	; (400908 <udi_cdc_data_received+0x58>)
  4008ea:	4798      	blx	r3
}
  4008ec:	b002      	add	sp, #8
  4008ee:	bd10      	pop	{r4, pc}
  4008f0:	200005a4 	.word	0x200005a4
  4008f4:	004008b1 	.word	0x004008b1
  4008f8:	200005b8 	.word	0x200005b8
  4008fc:	0040273d 	.word	0x0040273d
  400900:	20000590 	.word	0x20000590
  400904:	20000638 	.word	0x20000638
  400908:	00400769 	.word	0x00400769

0040090c <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40090c:	4b0f      	ldr	r3, [pc, #60]	; (40094c <udc_next_desc_in_iface+0x40>)
  40090e:	681b      	ldr	r3, [r3, #0]
  400910:	681b      	ldr	r3, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400912:	885a      	ldrh	r2, [r3, #2]
  400914:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400916:	7803      	ldrb	r3, [r0, #0]
  400918:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  40091a:	4290      	cmp	r0, r2
  40091c:	d210      	bcs.n	400940 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40091e:	7843      	ldrb	r3, [r0, #1]
  400920:	2b04      	cmp	r3, #4
  400922:	d00f      	beq.n	400944 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400924:	428b      	cmp	r3, r1
  400926:	d105      	bne.n	400934 <udc_next_desc_in_iface+0x28>
  400928:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40092a:	7843      	ldrb	r3, [r0, #1]
  40092c:	2b04      	cmp	r3, #4
  40092e:	d00b      	beq.n	400948 <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400930:	428b      	cmp	r3, r1
  400932:	d00a      	beq.n	40094a <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400934:	7803      	ldrb	r3, [r0, #0]
  400936:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400938:	4290      	cmp	r0, r2
  40093a:	d3f6      	bcc.n	40092a <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  40093c:	2000      	movs	r0, #0
  40093e:	4770      	bx	lr
  400940:	2000      	movs	r0, #0
  400942:	4770      	bx	lr
  400944:	2000      	movs	r0, #0
  400946:	4770      	bx	lr
  400948:	2000      	movs	r0, #0
}
  40094a:	4770      	bx	lr
  40094c:	20000648 	.word	0x20000648

00400950 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400950:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400952:	4b03      	ldr	r3, [pc, #12]	; (400960 <udc_valid_address+0x10>)
  400954:	7898      	ldrb	r0, [r3, #2]
  400956:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40095a:	4b02      	ldr	r3, [pc, #8]	; (400964 <udc_valid_address+0x14>)
  40095c:	4798      	blx	r3
  40095e:	bd08      	pop	{r3, pc}
  400960:	20000744 	.word	0x20000744
  400964:	00402389 	.word	0x00402389

00400968 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  400968:	b410      	push	{r4}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  40096a:	4b16      	ldr	r3, [pc, #88]	; (4009c4 <udc_update_iface_desc+0x5c>)
  40096c:	781b      	ldrb	r3, [r3, #0]
  40096e:	b303      	cbz	r3, 4009b2 <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400970:	4b15      	ldr	r3, [pc, #84]	; (4009c8 <udc_update_iface_desc+0x60>)
  400972:	681b      	ldr	r3, [r3, #0]
  400974:	681b      	ldr	r3, [r3, #0]
  400976:	791a      	ldrb	r2, [r3, #4]
  400978:	4282      	cmp	r2, r0
  40097a:	d91c      	bls.n	4009b6 <udc_update_iface_desc+0x4e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  40097c:	4a13      	ldr	r2, [pc, #76]	; (4009cc <udc_update_iface_desc+0x64>)
  40097e:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400980:	885c      	ldrh	r4, [r3, #2]
  400982:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400984:	42a3      	cmp	r3, r4
  400986:	d218      	bcs.n	4009ba <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400988:	785a      	ldrb	r2, [r3, #1]
  40098a:	2a04      	cmp	r2, #4
  40098c:	d109      	bne.n	4009a2 <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  40098e:	789a      	ldrb	r2, [r3, #2]
  400990:	4282      	cmp	r2, r0
  400992:	d106      	bne.n	4009a2 <udc_update_iface_desc+0x3a>
  400994:	78da      	ldrb	r2, [r3, #3]
  400996:	428a      	cmp	r2, r1
  400998:	d103      	bne.n	4009a2 <udc_update_iface_desc+0x3a>
  40099a:	4a0c      	ldr	r2, [pc, #48]	; (4009cc <udc_update_iface_desc+0x64>)
  40099c:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  40099e:	2001      	movs	r0, #1
  4009a0:	e00c      	b.n	4009bc <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4009a2:	781a      	ldrb	r2, [r3, #0]
  4009a4:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  4009a6:	42a3      	cmp	r3, r4
  4009a8:	d3ee      	bcc.n	400988 <udc_update_iface_desc+0x20>
  4009aa:	4a08      	ldr	r2, [pc, #32]	; (4009cc <udc_update_iface_desc+0x64>)
  4009ac:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  4009ae:	2000      	movs	r0, #0
  4009b0:	e004      	b.n	4009bc <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  4009b2:	2000      	movs	r0, #0
  4009b4:	e002      	b.n	4009bc <udc_update_iface_desc+0x54>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  4009b6:	2000      	movs	r0, #0
  4009b8:	e000      	b.n	4009bc <udc_update_iface_desc+0x54>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  4009ba:	2000      	movs	r0, #0
}
  4009bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009c0:	4770      	bx	lr
  4009c2:	bf00      	nop
  4009c4:	20000650 	.word	0x20000650
  4009c8:	20000648 	.word	0x20000648
  4009cc:	20000654 	.word	0x20000654

004009d0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  4009d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4009d4:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4009d6:	2100      	movs	r1, #0
  4009d8:	4b12      	ldr	r3, [pc, #72]	; (400a24 <udc_iface_disable+0x54>)
  4009da:	4798      	blx	r3
  4009dc:	4680      	mov	r8, r0
  4009de:	b1e8      	cbz	r0, 400a1c <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4009e0:	4b11      	ldr	r3, [pc, #68]	; (400a28 <udc_iface_disable+0x58>)
  4009e2:	681b      	ldr	r3, [r3, #0]
  4009e4:	685b      	ldr	r3, [r3, #4]
  4009e6:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4009ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4009ee:	4798      	blx	r3
  4009f0:	4601      	mov	r1, r0
  4009f2:	4620      	mov	r0, r4
  4009f4:	4b0b      	ldr	r3, [pc, #44]	; (400a24 <udc_iface_disable+0x54>)
  4009f6:	4798      	blx	r3
  4009f8:	4680      	mov	r8, r0
  4009fa:	b178      	cbz	r0, 400a1c <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4009fc:	4b0b      	ldr	r3, [pc, #44]	; (400a2c <udc_iface_disable+0x5c>)
  4009fe:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400a00:	2605      	movs	r6, #5
  400a02:	4d0b      	ldr	r5, [pc, #44]	; (400a30 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400a04:	4f0b      	ldr	r7, [pc, #44]	; (400a34 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400a06:	4620      	mov	r0, r4
  400a08:	4631      	mov	r1, r6
  400a0a:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  400a0c:	4604      	mov	r4, r0
  400a0e:	b110      	cbz	r0, 400a16 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400a10:	7880      	ldrb	r0, [r0, #2]
  400a12:	47b8      	blx	r7
		}
  400a14:	e7f7      	b.n	400a06 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  400a16:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400a1a:	4798      	blx	r3
	return true;
}
  400a1c:	4640      	mov	r0, r8
  400a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a22:	bf00      	nop
  400a24:	00400969 	.word	0x00400969
  400a28:	20000648 	.word	0x20000648
  400a2c:	20000654 	.word	0x20000654
  400a30:	0040090d 	.word	0x0040090d
  400a34:	00402501 	.word	0x00402501

00400a38 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  400a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a3c:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  400a3e:	4b10      	ldr	r3, [pc, #64]	; (400a80 <udc_iface_enable+0x48>)
  400a40:	4798      	blx	r3
  400a42:	4603      	mov	r3, r0
  400a44:	b1c8      	cbz	r0, 400a7a <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400a46:	4b0f      	ldr	r3, [pc, #60]	; (400a84 <udc_iface_enable+0x4c>)
  400a48:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400a4a:	2605      	movs	r6, #5
  400a4c:	4d0e      	ldr	r5, [pc, #56]	; (400a88 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400a4e:	4f0f      	ldr	r7, [pc, #60]	; (400a8c <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400a50:	4620      	mov	r0, r4
  400a52:	4631      	mov	r1, r6
  400a54:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  400a56:	4604      	mov	r4, r0
  400a58:	b138      	cbz	r0, 400a6a <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400a5a:	7880      	ldrb	r0, [r0, #2]
  400a5c:	78e1      	ldrb	r1, [r4, #3]
  400a5e:	88a2      	ldrh	r2, [r4, #4]
  400a60:	47b8      	blx	r7
  400a62:	4603      	mov	r3, r0
  400a64:	2800      	cmp	r0, #0
  400a66:	d1f3      	bne.n	400a50 <udc_iface_enable+0x18>
  400a68:	e007      	b.n	400a7a <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  400a6a:	4b09      	ldr	r3, [pc, #36]	; (400a90 <udc_iface_enable+0x58>)
  400a6c:	681b      	ldr	r3, [r3, #0]
  400a6e:	685b      	ldr	r3, [r3, #4]
  400a70:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400a74:	681b      	ldr	r3, [r3, #0]
  400a76:	4798      	blx	r3
  400a78:	4603      	mov	r3, r0
}
  400a7a:	4618      	mov	r0, r3
  400a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a80:	00400969 	.word	0x00400969
  400a84:	20000654 	.word	0x20000654
  400a88:	0040090d 	.word	0x0040090d
  400a8c:	004023fd 	.word	0x004023fd
  400a90:	20000648 	.word	0x20000648

00400a94 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  400a94:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400a96:	4b0d      	ldr	r3, [pc, #52]	; (400acc <udc_reset+0x38>)
  400a98:	781b      	ldrb	r3, [r3, #0]
  400a9a:	b183      	cbz	r3, 400abe <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400a9c:	4b0c      	ldr	r3, [pc, #48]	; (400ad0 <udc_reset+0x3c>)
  400a9e:	681b      	ldr	r3, [r3, #0]
  400aa0:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400aa2:	791b      	ldrb	r3, [r3, #4]
  400aa4:	b15b      	cbz	r3, 400abe <udc_reset+0x2a>
  400aa6:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  400aa8:	4e0a      	ldr	r6, [pc, #40]	; (400ad4 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400aaa:	4d09      	ldr	r5, [pc, #36]	; (400ad0 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  400aac:	4620      	mov	r0, r4
  400aae:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400ab0:	3401      	adds	r4, #1
  400ab2:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ab4:	682b      	ldr	r3, [r5, #0]
  400ab6:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400ab8:	791b      	ldrb	r3, [r3, #4]
  400aba:	42a3      	cmp	r3, r4
  400abc:	d8f6      	bhi.n	400aac <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  400abe:	2300      	movs	r3, #0
  400ac0:	4a02      	ldr	r2, [pc, #8]	; (400acc <udc_reset+0x38>)
  400ac2:	7013      	strb	r3, [r2, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  400ac4:	4a04      	ldr	r2, [pc, #16]	; (400ad8 <udc_reset+0x44>)
  400ac6:	8013      	strh	r3, [r2, #0]
  400ac8:	bd70      	pop	{r4, r5, r6, pc}
  400aca:	bf00      	nop
  400acc:	20000650 	.word	0x20000650
  400ad0:	20000648 	.word	0x20000648
  400ad4:	004009d1 	.word	0x004009d1
  400ad8:	2000064e 	.word	0x2000064e

00400adc <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  400adc:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400ade:	4b0c      	ldr	r3, [pc, #48]	; (400b10 <udc_sof_notify+0x34>)
  400ae0:	781b      	ldrb	r3, [r3, #0]
  400ae2:	b19b      	cbz	r3, 400b0c <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ae4:	4b0b      	ldr	r3, [pc, #44]	; (400b14 <udc_sof_notify+0x38>)
  400ae6:	681b      	ldr	r3, [r3, #0]
  400ae8:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400aea:	7912      	ldrb	r2, [r2, #4]
  400aec:	b172      	cbz	r2, 400b0c <udc_sof_notify+0x30>
  400aee:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400af0:	4d08      	ldr	r5, [pc, #32]	; (400b14 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400af2:	685b      	ldr	r3, [r3, #4]
  400af4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400af8:	691b      	ldr	r3, [r3, #16]
  400afa:	b103      	cbz	r3, 400afe <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400afc:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400afe:	3401      	adds	r4, #1
  400b00:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400b02:	682b      	ldr	r3, [r5, #0]
  400b04:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400b06:	7912      	ldrb	r2, [r2, #4]
  400b08:	42a2      	cmp	r2, r4
  400b0a:	d8f2      	bhi.n	400af2 <udc_sof_notify+0x16>
  400b0c:	bd38      	pop	{r3, r4, r5, pc}
  400b0e:	bf00      	nop
  400b10:	20000650 	.word	0x20000650
  400b14:	20000648 	.word	0x20000648

00400b18 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400b1c:	4b77      	ldr	r3, [pc, #476]	; (400cfc <udc_process_setup+0x1e4>)
  400b1e:	2200      	movs	r2, #0
  400b20:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400b22:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400b24:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400b26:	781b      	ldrb	r3, [r3, #0]
  400b28:	f013 0f80 	tst.w	r3, #128	; 0x80
  400b2c:	f000 81e6 	beq.w	400efc <udc_process_setup+0x3e4>
		if (udd_g_ctrlreq.req.wLength == 0) {
  400b30:	4a72      	ldr	r2, [pc, #456]	; (400cfc <udc_process_setup+0x1e4>)
  400b32:	88d2      	ldrh	r2, [r2, #6]
  400b34:	2a00      	cmp	r2, #0
  400b36:	f040 81e5 	bne.w	400f04 <udc_process_setup+0x3ec>
  400b3a:	e1db      	b.n	400ef4 <udc_process_setup+0x3dc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400b3c:	f013 031f 	ands.w	r3, r3, #31
  400b40:	d167      	bne.n	400c12 <udc_process_setup+0xfa>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400b42:	496e      	ldr	r1, [pc, #440]	; (400cfc <udc_process_setup+0x1e4>)
  400b44:	7849      	ldrb	r1, [r1, #1]
  400b46:	2906      	cmp	r1, #6
  400b48:	d00d      	beq.n	400b66 <udc_process_setup+0x4e>
  400b4a:	2908      	cmp	r1, #8
  400b4c:	d057      	beq.n	400bfe <udc_process_setup+0xe6>
  400b4e:	2900      	cmp	r1, #0
  400b50:	d15f      	bne.n	400c12 <udc_process_setup+0xfa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400b52:	2a02      	cmp	r2, #2
  400b54:	d105      	bne.n	400b62 <udc_process_setup+0x4a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400b56:	486a      	ldr	r0, [pc, #424]	; (400d00 <udc_process_setup+0x1e8>)
  400b58:	2102      	movs	r1, #2
  400b5a:	4b6a      	ldr	r3, [pc, #424]	; (400d04 <udc_process_setup+0x1ec>)
  400b5c:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  400b5e:	2401      	movs	r4, #1
  400b60:	e174      	b.n	400e4c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
  400b62:	2400      	movs	r4, #0
  400b64:	e172      	b.n	400e4c <udc_process_setup+0x334>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400b66:	4b65      	ldr	r3, [pc, #404]	; (400cfc <udc_process_setup+0x1e4>)
  400b68:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400b6a:	0a13      	lsrs	r3, r2, #8
  400b6c:	3b01      	subs	r3, #1
  400b6e:	2b0e      	cmp	r3, #14
  400b70:	d83b      	bhi.n	400bea <udc_process_setup+0xd2>
  400b72:	e8df f003 	tbb	[pc, r3]
  400b76:	0f08      	.short	0x0f08
  400b78:	3a3a3a2a 	.word	0x3a3a3a2a
  400b7c:	3a3a3a3a 	.word	0x3a3a3a3a
  400b80:	3a3a3a3a 	.word	0x3a3a3a3a
  400b84:	22          	.byte	0x22
  400b85:	00          	.byte	0x00
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  400b86:	4b60      	ldr	r3, [pc, #384]	; (400d08 <udc_process_setup+0x1f0>)
  400b88:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  400b8a:	4618      	mov	r0, r3
  400b8c:	7819      	ldrb	r1, [r3, #0]
  400b8e:	4b5d      	ldr	r3, [pc, #372]	; (400d04 <udc_process_setup+0x1ec>)
  400b90:	4798      	blx	r3
  400b92:	e021      	b.n	400bd8 <udc_process_setup+0xc0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400b94:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  400b96:	4b5c      	ldr	r3, [pc, #368]	; (400d08 <udc_process_setup+0x1f0>)
  400b98:	681b      	ldr	r3, [r3, #0]
  400b9a:	7c5b      	ldrb	r3, [r3, #17]
  400b9c:	4293      	cmp	r3, r2
  400b9e:	d926      	bls.n	400bee <udc_process_setup+0xd6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  400ba0:	4b59      	ldr	r3, [pc, #356]	; (400d08 <udc_process_setup+0x1f0>)
  400ba2:	685b      	ldr	r3, [r3, #4]
  400ba4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  400ba8:	4618      	mov	r0, r3
  400baa:	8859      	ldrh	r1, [r3, #2]
  400bac:	4b55      	ldr	r3, [pc, #340]	; (400d04 <udc_process_setup+0x1ec>)
  400bae:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400bb0:	4b52      	ldr	r3, [pc, #328]	; (400cfc <udc_process_setup+0x1e4>)
  400bb2:	689b      	ldr	r3, [r3, #8]
  400bb4:	2202      	movs	r2, #2
  400bb6:	705a      	strb	r2, [r3, #1]
  400bb8:	e00e      	b.n	400bd8 <udc_process_setup+0xc0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  400bba:	4b53      	ldr	r3, [pc, #332]	; (400d08 <udc_process_setup+0x1f0>)
  400bbc:	689b      	ldr	r3, [r3, #8]
  400bbe:	b1c3      	cbz	r3, 400bf2 <udc_process_setup+0xda>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  400bc0:	4618      	mov	r0, r3
  400bc2:	8859      	ldrh	r1, [r3, #2]
  400bc4:	4b4f      	ldr	r3, [pc, #316]	; (400d04 <udc_process_setup+0x1ec>)
  400bc6:	4798      	blx	r3
  400bc8:	e006      	b.n	400bd8 <udc_process_setup+0xc0>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  400bca:	f012 0fff 	tst.w	r2, #255	; 0xff
  400bce:	d112      	bne.n	400bf6 <udc_process_setup+0xde>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  400bd0:	484e      	ldr	r0, [pc, #312]	; (400d0c <udc_process_setup+0x1f4>)
  400bd2:	2104      	movs	r1, #4
  400bd4:	4b4b      	ldr	r3, [pc, #300]	; (400d04 <udc_process_setup+0x1ec>)
  400bd6:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  400bd8:	4b48      	ldr	r3, [pc, #288]	; (400cfc <udc_process_setup+0x1e4>)
  400bda:	88da      	ldrh	r2, [r3, #6]
  400bdc:	899b      	ldrh	r3, [r3, #12]
  400bde:	4293      	cmp	r3, r2
  400be0:	d90b      	bls.n	400bfa <udc_process_setup+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  400be2:	4b46      	ldr	r3, [pc, #280]	; (400cfc <udc_process_setup+0x1e4>)
  400be4:	819a      	strh	r2, [r3, #12]
	}
	return true;
  400be6:	2401      	movs	r4, #1
  400be8:	e130      	b.n	400e4c <udc_process_setup+0x334>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  400bea:	2400      	movs	r4, #0
  400bec:	e12e      	b.n	400e4c <udc_process_setup+0x334>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
  400bee:	2400      	movs	r4, #0
  400bf0:	e12c      	b.n	400e4c <udc_process_setup+0x334>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
  400bf2:	2400      	movs	r4, #0
  400bf4:	e12a      	b.n	400e4c <udc_process_setup+0x334>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
  400bf6:	2400      	movs	r4, #0
  400bf8:	e128      	b.n	400e4c <udc_process_setup+0x334>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
  400bfa:	2401      	movs	r4, #1
  400bfc:	e126      	b.n	400e4c <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  400bfe:	2a01      	cmp	r2, #1
  400c00:	d105      	bne.n	400c0e <udc_process_setup+0xf6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  400c02:	4843      	ldr	r0, [pc, #268]	; (400d10 <udc_process_setup+0x1f8>)
  400c04:	2101      	movs	r1, #1
  400c06:	4b3f      	ldr	r3, [pc, #252]	; (400d04 <udc_process_setup+0x1ec>)
  400c08:	4798      	blx	r3
	return true;
  400c0a:	2401      	movs	r4, #1
  400c0c:	e11e      	b.n	400e4c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
  400c0e:	2400      	movs	r4, #0
  400c10:	e11c      	b.n	400e4c <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400c12:	2b01      	cmp	r3, #1
  400c14:	d12a      	bne.n	400c6c <udc_process_setup+0x154>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  400c16:	4939      	ldr	r1, [pc, #228]	; (400cfc <udc_process_setup+0x1e4>)
  400c18:	7849      	ldrb	r1, [r1, #1]
  400c1a:	290a      	cmp	r1, #10
  400c1c:	d126      	bne.n	400c6c <udc_process_setup+0x154>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  400c1e:	2a01      	cmp	r2, #1
  400c20:	d11e      	bne.n	400c60 <udc_process_setup+0x148>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  400c22:	4b3b      	ldr	r3, [pc, #236]	; (400d10 <udc_process_setup+0x1f8>)
  400c24:	781b      	ldrb	r3, [r3, #0]
  400c26:	b1eb      	cbz	r3, 400c64 <udc_process_setup+0x14c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400c28:	4b34      	ldr	r3, [pc, #208]	; (400cfc <udc_process_setup+0x1e4>)
  400c2a:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400c2c:	4b39      	ldr	r3, [pc, #228]	; (400d14 <udc_process_setup+0x1fc>)
  400c2e:	681e      	ldr	r6, [r3, #0]
  400c30:	6833      	ldr	r3, [r6, #0]
  400c32:	791b      	ldrb	r3, [r3, #4]
  400c34:	42ab      	cmp	r3, r5
  400c36:	d917      	bls.n	400c68 <udc_process_setup+0x150>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400c38:	4628      	mov	r0, r5
  400c3a:	2100      	movs	r1, #0
  400c3c:	4b36      	ldr	r3, [pc, #216]	; (400d18 <udc_process_setup+0x200>)
  400c3e:	4798      	blx	r3
  400c40:	4604      	mov	r4, r0
  400c42:	2800      	cmp	r0, #0
  400c44:	f000 8102 	beq.w	400e4c <udc_process_setup+0x334>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400c48:	6873      	ldr	r3, [r6, #4]
	udc_iface_setting = udi_api->getsetting();
  400c4a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  400c4e:	68db      	ldr	r3, [r3, #12]
  400c50:	4798      	blx	r3
  400c52:	4b32      	ldr	r3, [pc, #200]	; (400d1c <udc_process_setup+0x204>)
  400c54:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  400c56:	4618      	mov	r0, r3
  400c58:	2101      	movs	r1, #1
  400c5a:	4b2a      	ldr	r3, [pc, #168]	; (400d04 <udc_process_setup+0x1ec>)
  400c5c:	4798      	blx	r3
  400c5e:	e0f5      	b.n	400e4c <udc_process_setup+0x334>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
  400c60:	2400      	movs	r4, #0
  400c62:	e0f3      	b.n	400e4c <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  400c64:	2400      	movs	r4, #0
  400c66:	e0f1      	b.n	400e4c <udc_process_setup+0x334>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  400c68:	2400      	movs	r4, #0
  400c6a:	e0ef      	b.n	400e4c <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400c6c:	2b02      	cmp	r3, #2
  400c6e:	f040 80ef 	bne.w	400e50 <udc_process_setup+0x338>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  400c72:	4b22      	ldr	r3, [pc, #136]	; (400cfc <udc_process_setup+0x1e4>)
  400c74:	785b      	ldrb	r3, [r3, #1]
  400c76:	2b00      	cmp	r3, #0
  400c78:	f040 80e3 	bne.w	400e42 <udc_process_setup+0x32a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  400c7c:	2a02      	cmp	r2, #2
  400c7e:	d10b      	bne.n	400c98 <udc_process_setup+0x180>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  400c80:	4b1e      	ldr	r3, [pc, #120]	; (400cfc <udc_process_setup+0x1e4>)
  400c82:	7918      	ldrb	r0, [r3, #4]
  400c84:	4b26      	ldr	r3, [pc, #152]	; (400d20 <udc_process_setup+0x208>)
  400c86:	4798      	blx	r3
  400c88:	4b26      	ldr	r3, [pc, #152]	; (400d24 <udc_process_setup+0x20c>)
  400c8a:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  400c8c:	4618      	mov	r0, r3
  400c8e:	2102      	movs	r1, #2
  400c90:	4b1c      	ldr	r3, [pc, #112]	; (400d04 <udc_process_setup+0x1ec>)
  400c92:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  400c94:	2401      	movs	r4, #1
  400c96:	e0d9      	b.n	400e4c <udc_process_setup+0x334>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
  400c98:	2400      	movs	r4, #0
  400c9a:	e0d7      	b.n	400e4c <udc_process_setup+0x334>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400c9c:	f013 031f 	ands.w	r3, r3, #31
  400ca0:	f040 8084 	bne.w	400dac <udc_process_setup+0x294>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400ca4:	4a15      	ldr	r2, [pc, #84]	; (400cfc <udc_process_setup+0x1e4>)
  400ca6:	7852      	ldrb	r2, [r2, #1]
  400ca8:	3a01      	subs	r2, #1
  400caa:	2a08      	cmp	r2, #8
  400cac:	d87e      	bhi.n	400dac <udc_process_setup+0x294>
  400cae:	e8df f012 	tbh	[pc, r2, lsl #1]
  400cb2:	0013      	.short	0x0013
  400cb4:	00ca007d 	.word	0x00ca007d
  400cb8:	0009007d 	.word	0x0009007d
  400cbc:	007d007d 	.word	0x007d007d
  400cc0:	003d007d 	.word	0x003d007d
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400cc4:	4b0d      	ldr	r3, [pc, #52]	; (400cfc <udc_process_setup+0x1e4>)
  400cc6:	88db      	ldrh	r3, [r3, #6]
  400cc8:	b923      	cbnz	r3, 400cd4 <udc_process_setup+0x1bc>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  400cca:	4a17      	ldr	r2, [pc, #92]	; (400d28 <udc_process_setup+0x210>)
  400ccc:	4b0b      	ldr	r3, [pc, #44]	; (400cfc <udc_process_setup+0x1e4>)
  400cce:	611a      	str	r2, [r3, #16]
	return true;
  400cd0:	2401      	movs	r4, #1
  400cd2:	e0bb      	b.n	400e4c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400cd4:	2400      	movs	r4, #0
  400cd6:	e0b9      	b.n	400e4c <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400cd8:	4b08      	ldr	r3, [pc, #32]	; (400cfc <udc_process_setup+0x1e4>)
  400cda:	88db      	ldrh	r3, [r3, #6]
  400cdc:	b953      	cbnz	r3, 400cf4 <udc_process_setup+0x1dc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  400cde:	4b07      	ldr	r3, [pc, #28]	; (400cfc <udc_process_setup+0x1e4>)
  400ce0:	885b      	ldrh	r3, [r3, #2]
  400ce2:	2b01      	cmp	r3, #1
  400ce4:	d108      	bne.n	400cf8 <udc_process_setup+0x1e0>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  400ce6:	4b06      	ldr	r3, [pc, #24]	; (400d00 <udc_process_setup+0x1e8>)
  400ce8:	881a      	ldrh	r2, [r3, #0]
  400cea:	f022 0202 	bic.w	r2, r2, #2
  400cee:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  400cf0:	2401      	movs	r4, #1
  400cf2:	e0ab      	b.n	400e4c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400cf4:	2400      	movs	r4, #0
  400cf6:	e0a9      	b.n	400e4c <udc_process_setup+0x334>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
  400cf8:	2400      	movs	r4, #0
  400cfa:	e0a7      	b.n	400e4c <udc_process_setup+0x334>
  400cfc:	20000744 	.word	0x20000744
  400d00:	2000064e 	.word	0x2000064e
  400d04:	004023f1 	.word	0x004023f1
  400d08:	2000002c 	.word	0x2000002c
  400d0c:	200000a0 	.word	0x200000a0
  400d10:	20000650 	.word	0x20000650
  400d14:	20000648 	.word	0x20000648
  400d18:	00400969 	.word	0x00400969
  400d1c:	20000644 	.word	0x20000644
  400d20:	00402539 	.word	0x00402539
  400d24:	2000064c 	.word	0x2000064c
  400d28:	00400951 	.word	0x00400951
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  400d2c:	4b79      	ldr	r3, [pc, #484]	; (400f14 <udc_process_setup+0x3fc>)
  400d2e:	88db      	ldrh	r3, [r3, #6]
  400d30:	2b00      	cmp	r3, #0
  400d32:	d131      	bne.n	400d98 <udc_process_setup+0x280>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  400d34:	4b78      	ldr	r3, [pc, #480]	; (400f18 <udc_process_setup+0x400>)
  400d36:	4798      	blx	r3
  400d38:	2800      	cmp	r0, #0
  400d3a:	d02f      	beq.n	400d9c <udc_process_setup+0x284>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400d3c:	4b75      	ldr	r3, [pc, #468]	; (400f14 <udc_process_setup+0x3fc>)
  400d3e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  400d40:	4b76      	ldr	r3, [pc, #472]	; (400f1c <udc_process_setup+0x404>)
  400d42:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  400d44:	7c5b      	ldrb	r3, [r3, #17]
  400d46:	429a      	cmp	r2, r3
  400d48:	dc2a      	bgt.n	400da0 <udc_process_setup+0x288>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  400d4a:	4b75      	ldr	r3, [pc, #468]	; (400f20 <udc_process_setup+0x408>)
  400d4c:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  400d4e:	4b71      	ldr	r3, [pc, #452]	; (400f14 <udc_process_setup+0x3fc>)
  400d50:	789b      	ldrb	r3, [r3, #2]
  400d52:	4a74      	ldr	r2, [pc, #464]	; (400f24 <udc_process_setup+0x40c>)
  400d54:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  400d56:	b32b      	cbz	r3, 400da4 <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  400d58:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  400d5c:	3b01      	subs	r3, #1
  400d5e:	4a6f      	ldr	r2, [pc, #444]	; (400f1c <udc_process_setup+0x404>)
  400d60:	6852      	ldr	r2, [r2, #4]
  400d62:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  400d66:	4970      	ldr	r1, [pc, #448]	; (400f28 <udc_process_setup+0x410>)
  400d68:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400d6a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  400d6e:	791b      	ldrb	r3, [r3, #4]
  400d70:	b1d3      	cbz	r3, 400da8 <udc_process_setup+0x290>
  400d72:	2500      	movs	r5, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400d74:	462f      	mov	r7, r5
  400d76:	4e6d      	ldr	r6, [pc, #436]	; (400f2c <udc_process_setup+0x414>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400d78:	4688      	mov	r8, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  400d7a:	4628      	mov	r0, r5
  400d7c:	4639      	mov	r1, r7
  400d7e:	47b0      	blx	r6
  400d80:	4604      	mov	r4, r0
  400d82:	2800      	cmp	r0, #0
  400d84:	d062      	beq.n	400e4c <udc_process_setup+0x334>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  400d86:	3501      	adds	r5, #1
  400d88:	b2ed      	uxtb	r5, r5
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400d8a:	f8d8 3000 	ldr.w	r3, [r8]
  400d8e:	681b      	ldr	r3, [r3, #0]
  400d90:	791b      	ldrb	r3, [r3, #4]
  400d92:	42ab      	cmp	r3, r5
  400d94:	d8f1      	bhi.n	400d7a <udc_process_setup+0x262>
  400d96:	e059      	b.n	400e4c <udc_process_setup+0x334>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400d98:	2400      	movs	r4, #0
  400d9a:	e057      	b.n	400e4c <udc_process_setup+0x334>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
  400d9c:	2400      	movs	r4, #0
  400d9e:	e055      	b.n	400e4c <udc_process_setup+0x334>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  400da0:	2400      	movs	r4, #0
  400da2:	e053      	b.n	400e4c <udc_process_setup+0x334>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
  400da4:	2401      	movs	r4, #1
  400da6:	e051      	b.n	400e4c <udc_process_setup+0x334>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  400da8:	2401      	movs	r4, #1
  400daa:	e04f      	b.n	400e4c <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  400dac:	2b01      	cmp	r3, #1
  400dae:	d11c      	bne.n	400dea <udc_process_setup+0x2d2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  400db0:	4a58      	ldr	r2, [pc, #352]	; (400f14 <udc_process_setup+0x3fc>)
  400db2:	7852      	ldrb	r2, [r2, #1]
  400db4:	2a0b      	cmp	r2, #11
  400db6:	d118      	bne.n	400dea <udc_process_setup+0x2d2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  400db8:	4b56      	ldr	r3, [pc, #344]	; (400f14 <udc_process_setup+0x3fc>)
  400dba:	88db      	ldrh	r3, [r3, #6]
  400dbc:	b98b      	cbnz	r3, 400de2 <udc_process_setup+0x2ca>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  400dbe:	4b59      	ldr	r3, [pc, #356]	; (400f24 <udc_process_setup+0x40c>)
  400dc0:	781b      	ldrb	r3, [r3, #0]
  400dc2:	b183      	cbz	r3, 400de6 <udc_process_setup+0x2ce>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400dc4:	4b53      	ldr	r3, [pc, #332]	; (400f14 <udc_process_setup+0x3fc>)
  400dc6:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  400dc8:	885e      	ldrh	r6, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  400dca:	4628      	mov	r0, r5
  400dcc:	4b58      	ldr	r3, [pc, #352]	; (400f30 <udc_process_setup+0x418>)
  400dce:	4798      	blx	r3
  400dd0:	4604      	mov	r4, r0
  400dd2:	2800      	cmp	r0, #0
  400dd4:	d03a      	beq.n	400e4c <udc_process_setup+0x334>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  400dd6:	4628      	mov	r0, r5
  400dd8:	b2f1      	uxtb	r1, r6
  400dda:	4b54      	ldr	r3, [pc, #336]	; (400f2c <udc_process_setup+0x414>)
  400ddc:	4798      	blx	r3
  400dde:	4604      	mov	r4, r0
  400de0:	e034      	b.n	400e4c <udc_process_setup+0x334>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
  400de2:	2400      	movs	r4, #0
  400de4:	e032      	b.n	400e4c <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  400de6:	2400      	movs	r4, #0
  400de8:	e030      	b.n	400e4c <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  400dea:	2b02      	cmp	r3, #2
  400dec:	d130      	bne.n	400e50 <udc_process_setup+0x338>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  400dee:	4b49      	ldr	r3, [pc, #292]	; (400f14 <udc_process_setup+0x3fc>)
  400df0:	785b      	ldrb	r3, [r3, #1]
  400df2:	2b01      	cmp	r3, #1
  400df4:	d002      	beq.n	400dfc <udc_process_setup+0x2e4>
  400df6:	2b03      	cmp	r3, #3
  400df8:	d010      	beq.n	400e1c <udc_process_setup+0x304>
  400dfa:	e026      	b.n	400e4a <udc_process_setup+0x332>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400dfc:	4b45      	ldr	r3, [pc, #276]	; (400f14 <udc_process_setup+0x3fc>)
  400dfe:	88db      	ldrh	r3, [r3, #6]
  400e00:	b943      	cbnz	r3, 400e14 <udc_process_setup+0x2fc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400e02:	4b44      	ldr	r3, [pc, #272]	; (400f14 <udc_process_setup+0x3fc>)
  400e04:	885b      	ldrh	r3, [r3, #2]
  400e06:	b93b      	cbnz	r3, 400e18 <udc_process_setup+0x300>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400e08:	4b42      	ldr	r3, [pc, #264]	; (400f14 <udc_process_setup+0x3fc>)
  400e0a:	7918      	ldrb	r0, [r3, #4]
  400e0c:	4b49      	ldr	r3, [pc, #292]	; (400f34 <udc_process_setup+0x41c>)
  400e0e:	4798      	blx	r3
  400e10:	4604      	mov	r4, r0
  400e12:	e01b      	b.n	400e4c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400e14:	2400      	movs	r4, #0
  400e16:	e019      	b.n	400e4c <udc_process_setup+0x334>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  400e18:	2400      	movs	r4, #0
  400e1a:	e017      	b.n	400e4c <udc_process_setup+0x334>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  400e1c:	4b3d      	ldr	r3, [pc, #244]	; (400f14 <udc_process_setup+0x3fc>)
  400e1e:	88db      	ldrh	r3, [r3, #6]
  400e20:	b95b      	cbnz	r3, 400e3a <udc_process_setup+0x322>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  400e22:	4b3c      	ldr	r3, [pc, #240]	; (400f14 <udc_process_setup+0x3fc>)
  400e24:	885b      	ldrh	r3, [r3, #2]
  400e26:	b953      	cbnz	r3, 400e3e <udc_process_setup+0x326>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  400e28:	4c3a      	ldr	r4, [pc, #232]	; (400f14 <udc_process_setup+0x3fc>)
  400e2a:	7920      	ldrb	r0, [r4, #4]
  400e2c:	4b42      	ldr	r3, [pc, #264]	; (400f38 <udc_process_setup+0x420>)
  400e2e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  400e30:	7920      	ldrb	r0, [r4, #4]
  400e32:	4b42      	ldr	r3, [pc, #264]	; (400f3c <udc_process_setup+0x424>)
  400e34:	4798      	blx	r3
  400e36:	4604      	mov	r4, r0
  400e38:	e008      	b.n	400e4c <udc_process_setup+0x334>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  400e3a:	2400      	movs	r4, #0
  400e3c:	e006      	b.n	400e4c <udc_process_setup+0x334>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  400e3e:	2400      	movs	r4, #0
  400e40:	e004      	b.n	400e4c <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  400e42:	2400      	movs	r4, #0
  400e44:	e002      	b.n	400e4c <udc_process_setup+0x334>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  400e46:	2400      	movs	r4, #0
  400e48:	e000      	b.n	400e4c <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  400e4a:	2400      	movs	r4, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  400e4c:	2c00      	cmp	r4, #0
  400e4e:	d15d      	bne.n	400f0c <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  400e50:	4b30      	ldr	r3, [pc, #192]	; (400f14 <udc_process_setup+0x3fc>)
  400e52:	781b      	ldrb	r3, [r3, #0]
  400e54:	f003 031f 	and.w	r3, r3, #31
  400e58:	2b01      	cmp	r3, #1
  400e5a:	d11e      	bne.n	400e9a <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  400e5c:	4b31      	ldr	r3, [pc, #196]	; (400f24 <udc_process_setup+0x40c>)
  400e5e:	781b      	ldrb	r3, [r3, #0]
  400e60:	b1db      	cbz	r3, 400e9a <udc_process_setup+0x382>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  400e62:	4b2c      	ldr	r3, [pc, #176]	; (400f14 <udc_process_setup+0x3fc>)
  400e64:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400e66:	4b30      	ldr	r3, [pc, #192]	; (400f28 <udc_process_setup+0x410>)
  400e68:	681d      	ldr	r5, [r3, #0]
  400e6a:	682b      	ldr	r3, [r5, #0]
  400e6c:	791b      	ldrb	r3, [r3, #4]
  400e6e:	42a3      	cmp	r3, r4
  400e70:	d913      	bls.n	400e9a <udc_process_setup+0x382>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400e72:	4620      	mov	r0, r4
  400e74:	2100      	movs	r1, #0
  400e76:	4b32      	ldr	r3, [pc, #200]	; (400f40 <udc_process_setup+0x428>)
  400e78:	4798      	blx	r3
  400e7a:	b170      	cbz	r0, 400e9a <udc_process_setup+0x382>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400e7c:	686b      	ldr	r3, [r5, #4]
  400e7e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400e82:	68eb      	ldr	r3, [r5, #12]
  400e84:	4798      	blx	r3
  400e86:	4601      	mov	r1, r0
  400e88:	4620      	mov	r0, r4
  400e8a:	4b2d      	ldr	r3, [pc, #180]	; (400f40 <udc_process_setup+0x428>)
  400e8c:	4798      	blx	r3
  400e8e:	b120      	cbz	r0, 400e9a <udc_process_setup+0x382>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  400e90:	68ab      	ldr	r3, [r5, #8]
  400e92:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  400e94:	4604      	mov	r4, r0
  400e96:	2800      	cmp	r0, #0
  400e98:	d138      	bne.n	400f0c <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  400e9a:	4b1e      	ldr	r3, [pc, #120]	; (400f14 <udc_process_setup+0x3fc>)
  400e9c:	781b      	ldrb	r3, [r3, #0]
  400e9e:	f003 031f 	and.w	r3, r3, #31
  400ea2:	2b02      	cmp	r3, #2
  400ea4:	d128      	bne.n	400ef8 <udc_process_setup+0x3e0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  400ea6:	4b1f      	ldr	r3, [pc, #124]	; (400f24 <udc_process_setup+0x40c>)
  400ea8:	781b      	ldrb	r3, [r3, #0]
  400eaa:	b1fb      	cbz	r3, 400eec <udc_process_setup+0x3d4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400eac:	4b1e      	ldr	r3, [pc, #120]	; (400f28 <udc_process_setup+0x410>)
  400eae:	681b      	ldr	r3, [r3, #0]
  400eb0:	681a      	ldr	r2, [r3, #0]
  400eb2:	7912      	ldrb	r2, [r2, #4]
  400eb4:	b1e2      	cbz	r2, 400ef0 <udc_process_setup+0x3d8>
  400eb6:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400eb8:	4f21      	ldr	r7, [pc, #132]	; (400f40 <udc_process_setup+0x428>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400eba:	f8df 806c 	ldr.w	r8, [pc, #108]	; 400f28 <udc_process_setup+0x410>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  400ebe:	685b      	ldr	r3, [r3, #4]
  400ec0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400ec4:	68f3      	ldr	r3, [r6, #12]
  400ec6:	4798      	blx	r3
  400ec8:	4601      	mov	r1, r0
  400eca:	4628      	mov	r0, r5
  400ecc:	47b8      	blx	r7
  400ece:	4604      	mov	r4, r0
  400ed0:	b1e0      	cbz	r0, 400f0c <udc_process_setup+0x3f4>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  400ed2:	68b3      	ldr	r3, [r6, #8]
  400ed4:	4798      	blx	r3
  400ed6:	4604      	mov	r4, r0
  400ed8:	b9c0      	cbnz	r0, 400f0c <udc_process_setup+0x3f4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  400eda:	3501      	adds	r5, #1
  400edc:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ede:	f8d8 3000 	ldr.w	r3, [r8]
  400ee2:	681a      	ldr	r2, [r3, #0]
  400ee4:	7912      	ldrb	r2, [r2, #4]
  400ee6:	42aa      	cmp	r2, r5
  400ee8:	d8e9      	bhi.n	400ebe <udc_process_setup+0x3a6>
  400eea:	e00f      	b.n	400f0c <udc_process_setup+0x3f4>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  400eec:	2400      	movs	r4, #0
  400eee:	e00d      	b.n	400f0c <udc_process_setup+0x3f4>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  400ef0:	2400      	movs	r4, #0
  400ef2:	e00b      	b.n	400f0c <udc_process_setup+0x3f4>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  400ef4:	2400      	movs	r4, #0
  400ef6:	e009      	b.n	400f0c <udc_process_setup+0x3f4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  400ef8:	2400      	movs	r4, #0
  400efa:	e007      	b.n	400f0c <udc_process_setup+0x3f4>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  400efc:	f013 0f60 	tst.w	r3, #96	; 0x60
  400f00:	d1a6      	bne.n	400e50 <udc_process_setup+0x338>
  400f02:	e6cb      	b.n	400c9c <udc_process_setup+0x184>
  400f04:	f013 0f60 	tst.w	r3, #96	; 0x60
  400f08:	d1a2      	bne.n	400e50 <udc_process_setup+0x338>
  400f0a:	e617      	b.n	400b3c <udc_process_setup+0x24>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  400f0c:	4620      	mov	r0, r4
  400f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f12:	bf00      	nop
  400f14:	20000744 	.word	0x20000744
  400f18:	004023c1 	.word	0x004023c1
  400f1c:	2000002c 	.word	0x2000002c
  400f20:	00400a95 	.word	0x00400a95
  400f24:	20000650 	.word	0x20000650
  400f28:	20000648 	.word	0x20000648
  400f2c:	00400a39 	.word	0x00400a39
  400f30:	004009d1 	.word	0x004009d1
  400f34:	00402665 	.word	0x00402665
  400f38:	00402891 	.word	0x00402891
  400f3c:	00402579 	.word	0x00402579
  400f40:	00400969 	.word	0x00400969

00400f44 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400f44:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  400f46:	2401      	movs	r4, #1
  400f48:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  400f4a:	2400      	movs	r4, #0
  400f4c:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400f4e:	f240 2502 	movw	r5, #514	; 0x202
  400f52:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  400f56:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  400f5a:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400f5e:	6845      	ldr	r5, [r0, #4]
  400f60:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  400f62:	0052      	lsls	r2, r2, #1
  400f64:	fbb1 f1f2 	udiv	r1, r1, r2
  400f68:	1e4d      	subs	r5, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400f6a:	022d      	lsls	r5, r5, #8
  400f6c:	b2ad      	uxth	r5, r5
  400f6e:	432b      	orrs	r3, r5
  400f70:	6043      	str	r3, [r0, #4]
	return 0;
}
  400f72:	4620      	mov	r0, r4
  400f74:	bc30      	pop	{r4, r5}
  400f76:	4770      	bx	lr

00400f78 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
  400f78:	6843      	ldr	r3, [r0, #4]
  400f7a:	f023 0310 	bic.w	r3, r3, #16
  400f7e:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
  400f80:	6843      	ldr	r3, [r0, #4]
  400f82:	4319      	orrs	r1, r3
  400f84:	6041      	str	r1, [r0, #4]
  400f86:	4770      	bx	lr

00400f88 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  400f88:	6843      	ldr	r3, [r0, #4]
  400f8a:	4319      	orrs	r1, r3
  400f8c:	01d2      	lsls	r2, r2, #7
  400f8e:	b2d3      	uxtb	r3, r2
  400f90:	4319      	orrs	r1, r3
  400f92:	6041      	str	r1, [r0, #4]
  400f94:	4770      	bx	lr
  400f96:	bf00      	nop

00400f98 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  400f98:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400f9a:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  400f9c:	4322      	orrs	r2, r4
  400f9e:	0609      	lsls	r1, r1, #24
  400fa0:	f001 6470 	and.w	r4, r1, #251658240	; 0xf000000
  400fa4:	4322      	orrs	r2, r4
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400fa6:	071b      	lsls	r3, r3, #28
  400fa8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  400fac:	431a      	orrs	r2, r3
  400fae:	6042      	str	r2, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
  400fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fb4:	4770      	bx	lr
  400fb6:	bf00      	nop

00400fb8 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  400fb8:	2301      	movs	r3, #1
  400fba:	fa03 f101 	lsl.w	r1, r3, r1
  400fbe:	6101      	str	r1, [r0, #16]
  400fc0:	4770      	bx	lr
  400fc2:	bf00      	nop

00400fc4 <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
  400fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400fc8:	6143      	str	r3, [r0, #20]
  400fca:	4770      	bx	lr

00400fcc <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
  400fcc:	6a00      	ldr	r0, [r0, #32]
}
  400fce:	4770      	bx	lr

00400fd0 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  400fd0:	6241      	str	r1, [r0, #36]	; 0x24
  400fd2:	4770      	bx	lr

00400fd4 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  400fd4:	2301      	movs	r3, #1
  400fd6:	6003      	str	r3, [r0, #0]
  400fd8:	4770      	bx	lr
  400fda:	bf00      	nop

00400fdc <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  400fdc:	6843      	ldr	r3, [r0, #4]
  400fde:	f023 0301 	bic.w	r3, r3, #1
  400fe2:	6043      	str	r3, [r0, #4]
  400fe4:	4770      	bx	lr
  400fe6:	bf00      	nop

00400fe8 <dacc_set_writeprotect>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_enable 1 to enable, 0 to disable.
 */
void dacc_set_writeprotect(Dacc *p_dacc, uint32_t ul_enable)
{
	if (ul_enable) {
  400fe8:	b119      	cbz	r1, 400ff2 <dacc_set_writeprotect+0xa>
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY)
  400fea:	4b04      	ldr	r3, [pc, #16]	; (400ffc <dacc_set_writeprotect+0x14>)
  400fec:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  400ff0:	4770      	bx	lr
			          | DACC_WPMR_WPEN;
	} else {
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY);
  400ff2:	4b03      	ldr	r3, [pc, #12]	; (401000 <dacc_set_writeprotect+0x18>)
  400ff4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  400ff8:	4770      	bx	lr
  400ffa:	bf00      	nop
  400ffc:	44414301 	.word	0x44414301
  401000:	44414300 	.word	0x44414300

00401004 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
  401004:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
  401006:	6844      	ldr	r4, [r0, #4]
  401008:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
  40100c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
  401010:	0209      	lsls	r1, r1, #8
  401012:	b289      	uxth	r1, r1
  401014:	430c      	orrs	r4, r1
	if (ul_maxs) {
  401016:	b112      	cbz	r2, 40101e <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
  401018:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  40101c:	e001      	b.n	401022 <dacc_set_timing+0x1e>
	} else {
		mr &= ~DACC_MR_MAXS;
  40101e:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  401022:	061b      	lsls	r3, r3, #24
  401024:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  401028:	431c      	orrs	r4, r3
	p_dacc->DACC_MR = mr;
  40102a:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
  40102c:	2000      	movs	r0, #0
  40102e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401032:	4770      	bx	lr

00401034 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  401034:	2901      	cmp	r1, #1
  401036:	d805      	bhi.n	401044 <dacc_enable_channel+0x10>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  401038:	2301      	movs	r3, #1
  40103a:	fa03 f101 	lsl.w	r1, r3, r1
  40103e:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  401040:	2000      	movs	r0, #0
  401042:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  401044:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  401046:	4770      	bx	lr

00401048 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401048:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40104a:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  40104c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401050:	d02e      	beq.n	4010b0 <pio_set_peripheral+0x68>
  401052:	d808      	bhi.n	401066 <pio_set_peripheral+0x1e>
  401054:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401058:	d014      	beq.n	401084 <pio_set_peripheral+0x3c>
  40105a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40105e:	d01d      	beq.n	40109c <pio_set_peripheral+0x54>
  401060:	2900      	cmp	r1, #0
  401062:	d135      	bne.n	4010d0 <pio_set_peripheral+0x88>
  401064:	e035      	b.n	4010d2 <pio_set_peripheral+0x8a>
  401066:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40106a:	d032      	beq.n	4010d2 <pio_set_peripheral+0x8a>
  40106c:	d803      	bhi.n	401076 <pio_set_peripheral+0x2e>
  40106e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401072:	d027      	beq.n	4010c4 <pio_set_peripheral+0x7c>
  401074:	e02c      	b.n	4010d0 <pio_set_peripheral+0x88>
  401076:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40107a:	d02a      	beq.n	4010d2 <pio_set_peripheral+0x8a>
  40107c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401080:	d027      	beq.n	4010d2 <pio_set_peripheral+0x8a>
  401082:	e025      	b.n	4010d0 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401084:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401086:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401088:	43d3      	mvns	r3, r2
  40108a:	4021      	ands	r1, r4
  40108c:	4019      	ands	r1, r3
  40108e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401090:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401092:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401094:	4021      	ands	r1, r4
  401096:	400b      	ands	r3, r1
  401098:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40109a:	e019      	b.n	4010d0 <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40109c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40109e:	4313      	orrs	r3, r2
  4010a0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4010a2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4010a4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4010a6:	400b      	ands	r3, r1
  4010a8:	ea23 0302 	bic.w	r3, r3, r2
  4010ac:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4010ae:	e00f      	b.n	4010d0 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4010b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4010b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4010b4:	400b      	ands	r3, r1
  4010b6:	ea23 0302 	bic.w	r3, r3, r2
  4010ba:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4010bc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4010be:	4313      	orrs	r3, r2
  4010c0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4010c2:	e005      	b.n	4010d0 <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4010c4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4010c6:	4313      	orrs	r3, r2
  4010c8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4010ca:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4010cc:	4313      	orrs	r3, r2
  4010ce:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4010d0:	6042      	str	r2, [r0, #4]
}
  4010d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010d6:	4770      	bx	lr

004010d8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4010d8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4010da:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4010dc:	9c01      	ldr	r4, [sp, #4]
  4010de:	b10c      	cbz	r4, 4010e4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4010e0:	6641      	str	r1, [r0, #100]	; 0x64
  4010e2:	e000      	b.n	4010e6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4010e4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4010e6:	b10b      	cbz	r3, 4010ec <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4010e8:	6501      	str	r1, [r0, #80]	; 0x50
  4010ea:	e000      	b.n	4010ee <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4010ec:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4010ee:	b10a      	cbz	r2, 4010f4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4010f0:	6301      	str	r1, [r0, #48]	; 0x30
  4010f2:	e000      	b.n	4010f6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4010f4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4010f6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4010f8:	6001      	str	r1, [r0, #0]
}
  4010fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010fe:	4770      	bx	lr

00401100 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401100:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401102:	4770      	bx	lr

00401104 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401104:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401106:	4770      	bx	lr

00401108 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40110c:	4680      	mov	r8, r0
  40110e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401110:	4b12      	ldr	r3, [pc, #72]	; (40115c <pio_handler_process+0x54>)
  401112:	4798      	blx	r3
  401114:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401116:	4640      	mov	r0, r8
  401118:	4b11      	ldr	r3, [pc, #68]	; (401160 <pio_handler_process+0x58>)
  40111a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40111c:	4005      	ands	r5, r0
  40111e:	d012      	beq.n	401146 <pio_handler_process+0x3e>
  401120:	4c10      	ldr	r4, [pc, #64]	; (401164 <pio_handler_process+0x5c>)
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401122:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  401126:	42b3      	cmp	r3, r6
  401128:	d10a      	bne.n	401140 <pio_handler_process+0x38>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40112a:	f854 1c08 	ldr.w	r1, [r4, #-8]
  40112e:	4229      	tst	r1, r5
  401130:	d006      	beq.n	401140 <pio_handler_process+0x38>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401132:	6823      	ldr	r3, [r4, #0]
  401134:	4630      	mov	r0, r6
  401136:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401138:	f854 3c08 	ldr.w	r3, [r4, #-8]
  40113c:	ea25 0503 	bic.w	r5, r5, r3
  401140:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401142:	2d00      	cmp	r5, #0
  401144:	d1ed      	bne.n	401122 <pio_handler_process+0x1a>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401146:	4b08      	ldr	r3, [pc, #32]	; (401168 <pio_handler_process+0x60>)
  401148:	681b      	ldr	r3, [r3, #0]
  40114a:	b123      	cbz	r3, 401156 <pio_handler_process+0x4e>
		if (pio_capture_handler) {
  40114c:	4b07      	ldr	r3, [pc, #28]	; (40116c <pio_handler_process+0x64>)
  40114e:	681b      	ldr	r3, [r3, #0]
  401150:	b10b      	cbz	r3, 401156 <pio_handler_process+0x4e>
			pio_capture_handler(p_pio);
  401152:	4640      	mov	r0, r8
  401154:	4798      	blx	r3
  401156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40115a:	bf00      	nop
  40115c:	00401101 	.word	0x00401101
  401160:	00401105 	.word	0x00401105
  401164:	20000668 	.word	0x20000668
  401168:	20000740 	.word	0x20000740
  40116c:	20000658 	.word	0x20000658

00401170 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401170:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401172:	4802      	ldr	r0, [pc, #8]	; (40117c <PIOA_Handler+0xc>)
  401174:	210b      	movs	r1, #11
  401176:	4b02      	ldr	r3, [pc, #8]	; (401180 <PIOA_Handler+0x10>)
  401178:	4798      	blx	r3
  40117a:	bd08      	pop	{r3, pc}
  40117c:	400e0e00 	.word	0x400e0e00
  401180:	00401109 	.word	0x00401109

00401184 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401184:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401186:	4802      	ldr	r0, [pc, #8]	; (401190 <PIOB_Handler+0xc>)
  401188:	210c      	movs	r1, #12
  40118a:	4b02      	ldr	r3, [pc, #8]	; (401194 <PIOB_Handler+0x10>)
  40118c:	4798      	blx	r3
  40118e:	bd08      	pop	{r3, pc}
  401190:	400e1000 	.word	0x400e1000
  401194:	00401109 	.word	0x00401109

00401198 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401198:	4b17      	ldr	r3, [pc, #92]	; (4011f8 <pmc_switch_mck_to_pllack+0x60>)
  40119a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40119c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  4011a0:	4310      	orrs	r0, r2
  4011a2:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4011a6:	f013 0f08 	tst.w	r3, #8
  4011aa:	d109      	bne.n	4011c0 <pmc_switch_mck_to_pllack+0x28>
  4011ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011b0:	4911      	ldr	r1, [pc, #68]	; (4011f8 <pmc_switch_mck_to_pllack+0x60>)
  4011b2:	e001      	b.n	4011b8 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011b4:	3b01      	subs	r3, #1
  4011b6:	d019      	beq.n	4011ec <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011b8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011ba:	f012 0f08 	tst.w	r2, #8
  4011be:	d0f9      	beq.n	4011b4 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011c0:	4b0d      	ldr	r3, [pc, #52]	; (4011f8 <pmc_switch_mck_to_pllack+0x60>)
  4011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4011c4:	f022 0203 	bic.w	r2, r2, #3
  4011c8:	f042 0202 	orr.w	r2, r2, #2
  4011cc:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4011d0:	f010 0008 	ands.w	r0, r0, #8
  4011d4:	d10c      	bne.n	4011f0 <pmc_switch_mck_to_pllack+0x58>
  4011d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011da:	4907      	ldr	r1, [pc, #28]	; (4011f8 <pmc_switch_mck_to_pllack+0x60>)
  4011dc:	e001      	b.n	4011e2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011de:	3b01      	subs	r3, #1
  4011e0:	d008      	beq.n	4011f4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011e4:	f012 0f08 	tst.w	r2, #8
  4011e8:	d0f9      	beq.n	4011de <pmc_switch_mck_to_pllack+0x46>
  4011ea:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4011ec:	2001      	movs	r0, #1
  4011ee:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4011f0:	2000      	movs	r0, #0
  4011f2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4011f4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4011f6:	4770      	bx	lr
  4011f8:	400e0400 	.word	0x400e0400

004011fc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4011fc:	b138      	cbz	r0, 40120e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4011fe:	4911      	ldr	r1, [pc, #68]	; (401244 <pmc_switch_mainck_to_xtal+0x48>)
  401200:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401202:	4a11      	ldr	r2, [pc, #68]	; (401248 <pmc_switch_mainck_to_xtal+0x4c>)
  401204:	401a      	ands	r2, r3
  401206:	4b11      	ldr	r3, [pc, #68]	; (40124c <pmc_switch_mainck_to_xtal+0x50>)
  401208:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40120a:	620b      	str	r3, [r1, #32]
  40120c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40120e:	4a0d      	ldr	r2, [pc, #52]	; (401244 <pmc_switch_mainck_to_xtal+0x48>)
  401210:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401212:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401216:	f023 0303 	bic.w	r3, r3, #3
  40121a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40121e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401222:	0209      	lsls	r1, r1, #8
  401224:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401226:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401228:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40122a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40122c:	f013 0f01 	tst.w	r3, #1
  401230:	d0fb      	beq.n	40122a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401232:	4a04      	ldr	r2, [pc, #16]	; (401244 <pmc_switch_mainck_to_xtal+0x48>)
  401234:	6a13      	ldr	r3, [r2, #32]
  401236:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40123a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40123e:	6213      	str	r3, [r2, #32]
  401240:	4770      	bx	lr
  401242:	bf00      	nop
  401244:	400e0400 	.word	0x400e0400
  401248:	fec8fffc 	.word	0xfec8fffc
  40124c:	01370002 	.word	0x01370002

00401250 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401250:	4b02      	ldr	r3, [pc, #8]	; (40125c <pmc_osc_is_ready_mainck+0xc>)
  401252:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401254:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401258:	4770      	bx	lr
  40125a:	bf00      	nop
  40125c:	400e0400 	.word	0x400e0400

00401260 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401260:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401264:	4b01      	ldr	r3, [pc, #4]	; (40126c <pmc_disable_pllack+0xc>)
  401266:	629a      	str	r2, [r3, #40]	; 0x28
  401268:	4770      	bx	lr
  40126a:	bf00      	nop
  40126c:	400e0400 	.word	0x400e0400

00401270 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401270:	4b02      	ldr	r3, [pc, #8]	; (40127c <pmc_is_locked_pllack+0xc>)
  401272:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401274:	f000 0002 	and.w	r0, r0, #2
  401278:	4770      	bx	lr
  40127a:	bf00      	nop
  40127c:	400e0400 	.word	0x400e0400

00401280 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401280:	2822      	cmp	r0, #34	; 0x22
  401282:	d820      	bhi.n	4012c6 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  401284:	281f      	cmp	r0, #31
  401286:	d80d      	bhi.n	4012a4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401288:	4b12      	ldr	r3, [pc, #72]	; (4012d4 <pmc_enable_periph_clk+0x54>)
  40128a:	699a      	ldr	r2, [r3, #24]
  40128c:	2301      	movs	r3, #1
  40128e:	4083      	lsls	r3, r0
  401290:	401a      	ands	r2, r3
  401292:	4293      	cmp	r3, r2
  401294:	d019      	beq.n	4012ca <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  401296:	2301      	movs	r3, #1
  401298:	fa03 f000 	lsl.w	r0, r3, r0
  40129c:	4b0d      	ldr	r3, [pc, #52]	; (4012d4 <pmc_enable_periph_clk+0x54>)
  40129e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4012a0:	2000      	movs	r0, #0
  4012a2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4012a4:	4b0b      	ldr	r3, [pc, #44]	; (4012d4 <pmc_enable_periph_clk+0x54>)
  4012a6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  4012aa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4012ac:	2301      	movs	r3, #1
  4012ae:	4083      	lsls	r3, r0
  4012b0:	401a      	ands	r2, r3
  4012b2:	4293      	cmp	r3, r2
  4012b4:	d00b      	beq.n	4012ce <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  4012b6:	2301      	movs	r3, #1
  4012b8:	fa03 f000 	lsl.w	r0, r3, r0
  4012bc:	4b05      	ldr	r3, [pc, #20]	; (4012d4 <pmc_enable_periph_clk+0x54>)
  4012be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4012c2:	2000      	movs	r0, #0
  4012c4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4012c6:	2001      	movs	r0, #1
  4012c8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4012ca:	2000      	movs	r0, #0
  4012cc:	4770      	bx	lr
  4012ce:	2000      	movs	r0, #0
}
  4012d0:	4770      	bx	lr
  4012d2:	bf00      	nop
  4012d4:	400e0400 	.word	0x400e0400

004012d8 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4012d8:	2822      	cmp	r0, #34	; 0x22
  4012da:	d820      	bhi.n	40131e <pmc_disable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  4012dc:	281f      	cmp	r0, #31
  4012de:	d80d      	bhi.n	4012fc <pmc_disable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  4012e0:	4b12      	ldr	r3, [pc, #72]	; (40132c <pmc_disable_periph_clk+0x54>)
  4012e2:	699a      	ldr	r2, [r3, #24]
  4012e4:	2301      	movs	r3, #1
  4012e6:	4083      	lsls	r3, r0
  4012e8:	401a      	ands	r2, r3
  4012ea:	4293      	cmp	r3, r2
  4012ec:	d119      	bne.n	401322 <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR0 = 1 << ul_id;
  4012ee:	2301      	movs	r3, #1
  4012f0:	fa03 f000 	lsl.w	r0, r3, r0
  4012f4:	4b0d      	ldr	r3, [pc, #52]	; (40132c <pmc_disable_periph_clk+0x54>)
  4012f6:	6158      	str	r0, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  4012f8:	2000      	movs	r0, #0
  4012fa:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4012fc:	4b0b      	ldr	r3, [pc, #44]	; (40132c <pmc_disable_periph_clk+0x54>)
  4012fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  401302:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  401304:	2301      	movs	r3, #1
  401306:	4083      	lsls	r3, r0
  401308:	401a      	ands	r2, r3
  40130a:	4293      	cmp	r3, r2
  40130c:	d10b      	bne.n	401326 <pmc_disable_periph_clk+0x4e>
			PMC->PMC_PCDR1 = 1 << ul_id;
  40130e:	2301      	movs	r3, #1
  401310:	fa03 f000 	lsl.w	r0, r3, r0
  401314:	4b05      	ldr	r3, [pc, #20]	; (40132c <pmc_disable_periph_clk+0x54>)
  401316:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  40131a:	2000      	movs	r0, #0
  40131c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40131e:	2001      	movs	r0, #1
  401320:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  401322:	2000      	movs	r0, #0
  401324:	4770      	bx	lr
  401326:	2000      	movs	r0, #0
}
  401328:	4770      	bx	lr
  40132a:	bf00      	nop
  40132c:	400e0400 	.word	0x400e0400

00401330 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  401330:	4b02      	ldr	r3, [pc, #8]	; (40133c <pmc_is_wakeup_clocks_restored+0xc>)
  401332:	7818      	ldrb	r0, [r3, #0]
}
  401334:	f080 0001 	eor.w	r0, r0, #1
  401338:	4770      	bx	lr
  40133a:	bf00      	nop
  40133c:	200006cc 	.word	0x200006cc

00401340 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
  401340:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401342:	0189      	lsls	r1, r1, #6
  401344:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  401346:	2402      	movs	r4, #2
  401348:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40134a:	f04f 31ff 	mov.w	r1, #4294967295
  40134e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  401350:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401352:	605a      	str	r2, [r3, #4]
}
  401354:	f85d 4b04 	ldr.w	r4, [sp], #4
  401358:	4770      	bx	lr
  40135a:	bf00      	nop

0040135c <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40135c:	0189      	lsls	r1, r1, #6
  40135e:	2305      	movs	r3, #5
  401360:	5043      	str	r3, [r0, r1]
  401362:	4770      	bx	lr

00401364 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  401364:	0189      	lsls	r1, r1, #6
  401366:	2302      	movs	r3, #2
  401368:	5043      	str	r3, [r0, r1]
  40136a:	4770      	bx	lr

0040136c <tc_write_ra>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
  40136c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401370:	614a      	str	r2, [r1, #20]
  401372:	4770      	bx	lr

00401374 <tc_write_rc>:
		uint32_t ul_value)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401374:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401378:	61ca      	str	r2, [r1, #28]
  40137a:	4770      	bx	lr

0040137c <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
  40137c:	4603      	mov	r3, r0
  40137e:	bb58      	cbnz	r0, 4013d8 <udd_sleep_mode+0x5c>
  401380:	4a18      	ldr	r2, [pc, #96]	; (4013e4 <udd_sleep_mode+0x68>)
  401382:	7812      	ldrb	r2, [r2, #0]
  401384:	b32a      	cbz	r2, 4013d2 <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401386:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40138a:	b672      	cpsid	i
  40138c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401390:	4a15      	ldr	r2, [pc, #84]	; (4013e8 <udd_sleep_mode+0x6c>)
  401392:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  401394:	4a15      	ldr	r2, [pc, #84]	; (4013ec <udd_sleep_mode+0x70>)
  401396:	7890      	ldrb	r0, [r2, #2]
  401398:	3801      	subs	r0, #1
  40139a:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40139c:	b9c9      	cbnz	r1, 4013d2 <udd_sleep_mode+0x56>
		cpu_irq_enable();
  40139e:	2101      	movs	r1, #1
  4013a0:	4a11      	ldr	r2, [pc, #68]	; (4013e8 <udd_sleep_mode+0x6c>)
  4013a2:	7011      	strb	r1, [r2, #0]
  4013a4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4013a8:	b662      	cpsie	i
  4013aa:	e012      	b.n	4013d2 <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4013ac:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4013b0:	b672      	cpsid	i
  4013b2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4013b6:	2000      	movs	r0, #0
  4013b8:	4a0b      	ldr	r2, [pc, #44]	; (4013e8 <udd_sleep_mode+0x6c>)
  4013ba:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4013bc:	4a0b      	ldr	r2, [pc, #44]	; (4013ec <udd_sleep_mode+0x70>)
  4013be:	7890      	ldrb	r0, [r2, #2]
  4013c0:	3001      	adds	r0, #1
  4013c2:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4013c4:	b929      	cbnz	r1, 4013d2 <udd_sleep_mode+0x56>
		cpu_irq_enable();
  4013c6:	2101      	movs	r1, #1
  4013c8:	4a07      	ldr	r2, [pc, #28]	; (4013e8 <udd_sleep_mode+0x6c>)
  4013ca:	7011      	strb	r1, [r2, #0]
  4013cc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4013d0:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4013d2:	4a04      	ldr	r2, [pc, #16]	; (4013e4 <udd_sleep_mode+0x68>)
  4013d4:	7013      	strb	r3, [r2, #0]
  4013d6:	4770      	bx	lr
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  4013d8:	4a02      	ldr	r2, [pc, #8]	; (4013e4 <udd_sleep_mode+0x68>)
  4013da:	7812      	ldrb	r2, [r2, #0]
  4013dc:	2a00      	cmp	r2, #0
  4013de:	d0e5      	beq.n	4013ac <udd_sleep_mode+0x30>
  4013e0:	e7f7      	b.n	4013d2 <udd_sleep_mode+0x56>
  4013e2:	bf00      	nop
  4013e4:	2000070c 	.word	0x2000070c
  4013e8:	200000a4 	.word	0x200000a4
  4013ec:	20000738 	.word	0x20000738

004013f0 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  4013f0:	4a03      	ldr	r2, [pc, #12]	; (401400 <udd_ctrl_init+0x10>)
  4013f2:	2300      	movs	r3, #0
  4013f4:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4013f6:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4013f8:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4013fa:	4a02      	ldr	r2, [pc, #8]	; (401404 <udd_ctrl_init+0x14>)
  4013fc:	7013      	strb	r3, [r2, #0]
  4013fe:	4770      	bx	lr
  401400:	20000744 	.word	0x20000744
  401404:	20000711 	.word	0x20000711

00401408 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  401408:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  40140a:	2205      	movs	r2, #5
  40140c:	4b0e      	ldr	r3, [pc, #56]	; (401448 <udd_ctrl_stall_data+0x40>)
  40140e:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401410:	4b0e      	ldr	r3, [pc, #56]	; (40144c <udd_ctrl_stall_data+0x44>)
  401412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401414:	9200      	str	r2, [sp, #0]
  401416:	9a00      	ldr	r2, [sp, #0]
  401418:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40141c:	9200      	str	r2, [sp, #0]
  40141e:	9a00      	ldr	r2, [sp, #0]
  401420:	f042 0220 	orr.w	r2, r2, #32
  401424:	9200      	str	r2, [sp, #0]
  401426:	9a00      	ldr	r2, [sp, #0]
  401428:	631a      	str	r2, [r3, #48]	; 0x30
  40142a:	2300      	movs	r3, #0
  40142c:	9301      	str	r3, [sp, #4]
  40142e:	9b01      	ldr	r3, [sp, #4]
  401430:	2b13      	cmp	r3, #19
  401432:	d806      	bhi.n	401442 <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401434:	bf00      	nop
  401436:	9b01      	ldr	r3, [sp, #4]
  401438:	3301      	adds	r3, #1
  40143a:	9301      	str	r3, [sp, #4]
  40143c:	9b01      	ldr	r3, [sp, #4]
  40143e:	2b13      	cmp	r3, #19
  401440:	d9f8      	bls.n	401434 <udd_ctrl_stall_data+0x2c>
}
  401442:	b002      	add	sp, #8
  401444:	4770      	bx	lr
  401446:	bf00      	nop
  401448:	20000711 	.word	0x20000711
  40144c:	40034000 	.word	0x40034000

00401450 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  401450:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  401452:	2203      	movs	r2, #3
  401454:	4b0e      	ldr	r3, [pc, #56]	; (401490 <udd_ctrl_send_zlp_in+0x40>)
  401456:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  401458:	4b0e      	ldr	r3, [pc, #56]	; (401494 <udd_ctrl_send_zlp_in+0x44>)
  40145a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40145c:	9200      	str	r2, [sp, #0]
  40145e:	9a00      	ldr	r2, [sp, #0]
  401460:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401464:	9200      	str	r2, [sp, #0]
  401466:	9a00      	ldr	r2, [sp, #0]
  401468:	f042 0210 	orr.w	r2, r2, #16
  40146c:	9200      	str	r2, [sp, #0]
  40146e:	9a00      	ldr	r2, [sp, #0]
  401470:	631a      	str	r2, [r3, #48]	; 0x30
  401472:	2300      	movs	r3, #0
  401474:	9301      	str	r3, [sp, #4]
  401476:	9b01      	ldr	r3, [sp, #4]
  401478:	2b13      	cmp	r3, #19
  40147a:	d806      	bhi.n	40148a <udd_ctrl_send_zlp_in+0x3a>
  40147c:	bf00      	nop
  40147e:	9b01      	ldr	r3, [sp, #4]
  401480:	3301      	adds	r3, #1
  401482:	9301      	str	r3, [sp, #4]
  401484:	9b01      	ldr	r3, [sp, #4]
  401486:	2b13      	cmp	r3, #19
  401488:	d9f8      	bls.n	40147c <udd_ctrl_send_zlp_in+0x2c>
}
  40148a:	b002      	add	sp, #8
  40148c:	4770      	bx	lr
  40148e:	bf00      	nop
  401490:	20000711 	.word	0x20000711
  401494:	40034000 	.word	0x40034000

00401498 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401498:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  40149a:	4b02      	ldr	r3, [pc, #8]	; (4014a4 <udd_ctrl_endofrequest+0xc>)
  40149c:	691b      	ldr	r3, [r3, #16]
  40149e:	b103      	cbz	r3, 4014a2 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  4014a0:	4798      	blx	r3
  4014a2:	bd08      	pop	{r3, pc}
  4014a4:	20000744 	.word	0x20000744

004014a8 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  4014a8:	b570      	push	{r4, r5, r6, lr}
  4014aa:	b08a      	sub	sp, #40	; 0x28
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  4014ac:	4b75      	ldr	r3, [pc, #468]	; (401684 <udd_ctrl_in_sent+0x1dc>)
  4014ae:	781b      	ldrb	r3, [r3, #0]
  4014b0:	2b03      	cmp	r3, #3
  4014b2:	d11d      	bne.n	4014f0 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  4014b4:	4b74      	ldr	r3, [pc, #464]	; (401688 <udd_ctrl_in_sent+0x1e0>)
  4014b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4014b8:	9200      	str	r2, [sp, #0]
  4014ba:	9a00      	ldr	r2, [sp, #0]
  4014bc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4014c0:	9200      	str	r2, [sp, #0]
  4014c2:	9a00      	ldr	r2, [sp, #0]
  4014c4:	f022 0201 	bic.w	r2, r2, #1
  4014c8:	9200      	str	r2, [sp, #0]
  4014ca:	9a00      	ldr	r2, [sp, #0]
  4014cc:	631a      	str	r2, [r3, #48]	; 0x30
  4014ce:	2300      	movs	r3, #0
  4014d0:	9301      	str	r3, [sp, #4]
  4014d2:	9b01      	ldr	r3, [sp, #4]
  4014d4:	2b13      	cmp	r3, #19
  4014d6:	d806      	bhi.n	4014e6 <udd_ctrl_in_sent+0x3e>
  4014d8:	bf00      	nop
  4014da:	9b01      	ldr	r3, [sp, #4]
  4014dc:	3301      	adds	r3, #1
  4014de:	9301      	str	r3, [sp, #4]
  4014e0:	9b01      	ldr	r3, [sp, #4]
  4014e2:	2b13      	cmp	r3, #19
  4014e4:	d9f8      	bls.n	4014d8 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  4014e6:	4b69      	ldr	r3, [pc, #420]	; (40168c <udd_ctrl_in_sent+0x1e4>)
  4014e8:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4014ea:	4b69      	ldr	r3, [pc, #420]	; (401690 <udd_ctrl_in_sent+0x1e8>)
  4014ec:	4798      	blx	r3
		return;
  4014ee:	e0c6      	b.n	40167e <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  4014f0:	4b68      	ldr	r3, [pc, #416]	; (401694 <udd_ctrl_in_sent+0x1ec>)
  4014f2:	881b      	ldrh	r3, [r3, #0]
  4014f4:	4a68      	ldr	r2, [pc, #416]	; (401698 <udd_ctrl_in_sent+0x1f0>)
  4014f6:	8994      	ldrh	r4, [r2, #12]
  4014f8:	1ae4      	subs	r4, r4, r3
  4014fa:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  4014fc:	2c00      	cmp	r4, #0
  4014fe:	d133      	bne.n	401568 <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401500:	4a66      	ldr	r2, [pc, #408]	; (40169c <udd_ctrl_in_sent+0x1f4>)
  401502:	8811      	ldrh	r1, [r2, #0]
  401504:	440b      	add	r3, r1
  401506:	b29b      	uxth	r3, r3
  401508:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  40150a:	4a63      	ldr	r2, [pc, #396]	; (401698 <udd_ctrl_in_sent+0x1f0>)
  40150c:	88d2      	ldrh	r2, [r2, #6]
  40150e:	429a      	cmp	r2, r3
  401510:	d002      	beq.n	401518 <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  401512:	4b63      	ldr	r3, [pc, #396]	; (4016a0 <udd_ctrl_in_sent+0x1f8>)
  401514:	781b      	ldrb	r3, [r3, #0]
  401516:	b1eb      	cbz	r3, 401554 <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401518:	2204      	movs	r2, #4
  40151a:	4b5a      	ldr	r3, [pc, #360]	; (401684 <udd_ctrl_in_sent+0x1dc>)
  40151c:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  40151e:	4b5a      	ldr	r3, [pc, #360]	; (401688 <udd_ctrl_in_sent+0x1e0>)
  401520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401522:	9202      	str	r2, [sp, #8]
  401524:	9a02      	ldr	r2, [sp, #8]
  401526:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40152a:	9202      	str	r2, [sp, #8]
  40152c:	9a02      	ldr	r2, [sp, #8]
  40152e:	f022 0201 	bic.w	r2, r2, #1
  401532:	9202      	str	r2, [sp, #8]
  401534:	9a02      	ldr	r2, [sp, #8]
  401536:	631a      	str	r2, [r3, #48]	; 0x30
  401538:	2300      	movs	r3, #0
  40153a:	9303      	str	r3, [sp, #12]
  40153c:	9b03      	ldr	r3, [sp, #12]
  40153e:	2b13      	cmp	r3, #19
  401540:	f200 809d 	bhi.w	40167e <udd_ctrl_in_sent+0x1d6>
  401544:	bf00      	nop
  401546:	9b03      	ldr	r3, [sp, #12]
  401548:	3301      	adds	r3, #1
  40154a:	9303      	str	r3, [sp, #12]
  40154c:	9b03      	ldr	r3, [sp, #12]
  40154e:	2b13      	cmp	r3, #19
  401550:	d9f8      	bls.n	401544 <udd_ctrl_in_sent+0x9c>
  401552:	e094      	b.n	40167e <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  401554:	4b50      	ldr	r3, [pc, #320]	; (401698 <udd_ctrl_in_sent+0x1f0>)
  401556:	695b      	ldr	r3, [r3, #20]
  401558:	b16b      	cbz	r3, 401576 <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  40155a:	4798      	blx	r3
  40155c:	b158      	cbz	r0, 401576 <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  40155e:	2200      	movs	r2, #0
  401560:	4b4c      	ldr	r3, [pc, #304]	; (401694 <udd_ctrl_in_sent+0x1ec>)
  401562:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401564:	4b4c      	ldr	r3, [pc, #304]	; (401698 <udd_ctrl_in_sent+0x1f0>)
  401566:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401568:	2c3f      	cmp	r4, #63	; 0x3f
  40156a:	d904      	bls.n	401576 <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  40156c:	2200      	movs	r2, #0
  40156e:	4b4c      	ldr	r3, [pc, #304]	; (4016a0 <udd_ctrl_in_sent+0x1f8>)
  401570:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401572:	2440      	movs	r4, #64	; 0x40
  401574:	e002      	b.n	40157c <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  401576:	2201      	movs	r2, #1
  401578:	4b49      	ldr	r3, [pc, #292]	; (4016a0 <udd_ctrl_in_sent+0x1f8>)
  40157a:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40157c:	4b46      	ldr	r3, [pc, #280]	; (401698 <udd_ctrl_in_sent+0x1f0>)
  40157e:	6899      	ldr	r1, [r3, #8]
  401580:	4b44      	ldr	r3, [pc, #272]	; (401694 <udd_ctrl_in_sent+0x1ec>)
  401582:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401584:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401588:	f1d0 0001 	rsbs	r0, r0, #1
  40158c:	bf38      	it	cc
  40158e:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401590:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401592:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401596:	2200      	movs	r2, #0
  401598:	4b42      	ldr	r3, [pc, #264]	; (4016a4 <udd_ctrl_in_sent+0x1fc>)
  40159a:	701a      	strb	r2, [r3, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  40159c:	4b3a      	ldr	r3, [pc, #232]	; (401688 <udd_ctrl_in_sent+0x1e0>)
  40159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015a0:	f013 0f02 	tst.w	r3, #2
  4015a4:	d101      	bne.n	4015aa <udd_ctrl_in_sent+0x102>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  4015a6:	bb24      	cbnz	r4, 4015f2 <udd_ctrl_in_sent+0x14a>
  4015a8:	e02d      	b.n	401606 <udd_ctrl_in_sent+0x15e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4015aa:	b128      	cbz	r0, 4015b8 <udd_ctrl_in_sent+0x110>
		cpu_irq_enable();
  4015ac:	2201      	movs	r2, #1
  4015ae:	4b3d      	ldr	r3, [pc, #244]	; (4016a4 <udd_ctrl_in_sent+0x1fc>)
  4015b0:	701a      	strb	r2, [r3, #0]
  4015b2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4015b6:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4015b8:	2204      	movs	r2, #4
  4015ba:	4b32      	ldr	r3, [pc, #200]	; (401684 <udd_ctrl_in_sent+0x1dc>)
  4015bc:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  4015be:	4b32      	ldr	r3, [pc, #200]	; (401688 <udd_ctrl_in_sent+0x1e0>)
  4015c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4015c2:	9204      	str	r2, [sp, #16]
  4015c4:	9a04      	ldr	r2, [sp, #16]
  4015c6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4015ca:	9204      	str	r2, [sp, #16]
  4015cc:	9a04      	ldr	r2, [sp, #16]
  4015ce:	f022 0201 	bic.w	r2, r2, #1
  4015d2:	9204      	str	r2, [sp, #16]
  4015d4:	9a04      	ldr	r2, [sp, #16]
  4015d6:	631a      	str	r2, [r3, #48]	; 0x30
  4015d8:	2300      	movs	r3, #0
  4015da:	9305      	str	r3, [sp, #20]
  4015dc:	9b05      	ldr	r3, [sp, #20]
  4015de:	2b13      	cmp	r3, #19
  4015e0:	d84d      	bhi.n	40167e <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4015e2:	bf00      	nop
  4015e4:	9b05      	ldr	r3, [sp, #20]
  4015e6:	3301      	adds	r3, #1
  4015e8:	9305      	str	r3, [sp, #20]
  4015ea:	9b05      	ldr	r3, [sp, #20]
  4015ec:	2b13      	cmp	r3, #19
  4015ee:	d9f8      	bls.n	4015e2 <udd_ctrl_in_sent+0x13a>
  4015f0:	e045      	b.n	40167e <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4015f2:	4431      	add	r1, r6
  4015f4:	460b      	mov	r3, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  4015f6:	4d24      	ldr	r5, [pc, #144]	; (401688 <udd_ctrl_in_sent+0x1e0>)
  4015f8:	f813 2b01 	ldrb.w	r2, [r3], #1
  4015fc:	652a      	str	r2, [r5, #80]	; 0x50
  4015fe:	1a5a      	subs	r2, r3, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401600:	b2d2      	uxtb	r2, r2
  401602:	42a2      	cmp	r2, r4
  401604:	d3f8      	bcc.n	4015f8 <udd_ctrl_in_sent+0x150>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  401606:	4434      	add	r4, r6
  401608:	4b22      	ldr	r3, [pc, #136]	; (401694 <udd_ctrl_in_sent+0x1ec>)
  40160a:	801c      	strh	r4, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  40160c:	4b1e      	ldr	r3, [pc, #120]	; (401688 <udd_ctrl_in_sent+0x1e0>)
  40160e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401610:	9206      	str	r2, [sp, #24]
  401612:	9a06      	ldr	r2, [sp, #24]
  401614:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401618:	9206      	str	r2, [sp, #24]
  40161a:	9a06      	ldr	r2, [sp, #24]
  40161c:	f042 0210 	orr.w	r2, r2, #16
  401620:	9206      	str	r2, [sp, #24]
  401622:	9a06      	ldr	r2, [sp, #24]
  401624:	631a      	str	r2, [r3, #48]	; 0x30
  401626:	2300      	movs	r3, #0
  401628:	9307      	str	r3, [sp, #28]
  40162a:	9b07      	ldr	r3, [sp, #28]
  40162c:	2b13      	cmp	r3, #19
  40162e:	d806      	bhi.n	40163e <udd_ctrl_in_sent+0x196>
  401630:	bf00      	nop
  401632:	9b07      	ldr	r3, [sp, #28]
  401634:	3301      	adds	r3, #1
  401636:	9307      	str	r3, [sp, #28]
  401638:	9b07      	ldr	r3, [sp, #28]
  40163a:	2b13      	cmp	r3, #19
  40163c:	d9f8      	bls.n	401630 <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  40163e:	4b12      	ldr	r3, [pc, #72]	; (401688 <udd_ctrl_in_sent+0x1e0>)
  401640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401642:	9208      	str	r2, [sp, #32]
  401644:	9a08      	ldr	r2, [sp, #32]
  401646:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40164a:	9208      	str	r2, [sp, #32]
  40164c:	9a08      	ldr	r2, [sp, #32]
  40164e:	f022 0201 	bic.w	r2, r2, #1
  401652:	9208      	str	r2, [sp, #32]
  401654:	9a08      	ldr	r2, [sp, #32]
  401656:	631a      	str	r2, [r3, #48]	; 0x30
  401658:	2300      	movs	r3, #0
  40165a:	9309      	str	r3, [sp, #36]	; 0x24
  40165c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40165e:	2b13      	cmp	r3, #19
  401660:	d806      	bhi.n	401670 <udd_ctrl_in_sent+0x1c8>
  401662:	bf00      	nop
  401664:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401666:	3301      	adds	r3, #1
  401668:	9309      	str	r3, [sp, #36]	; 0x24
  40166a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40166c:	2b13      	cmp	r3, #19
  40166e:	d9f8      	bls.n	401662 <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401670:	b128      	cbz	r0, 40167e <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  401672:	2201      	movs	r2, #1
  401674:	4b0b      	ldr	r3, [pc, #44]	; (4016a4 <udd_ctrl_in_sent+0x1fc>)
  401676:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401678:	f3bf 8f5f 	dmb	sy
  40167c:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  40167e:	b00a      	add	sp, #40	; 0x28
  401680:	bd70      	pop	{r4, r5, r6, pc}
  401682:	bf00      	nop
  401684:	20000711 	.word	0x20000711
  401688:	40034000 	.word	0x40034000
  40168c:	00401499 	.word	0x00401499
  401690:	004013f1 	.word	0x004013f1
  401694:	2000070e 	.word	0x2000070e
  401698:	20000744 	.word	0x20000744
  40169c:	200006ce 	.word	0x200006ce
  4016a0:	20000710 	.word	0x20000710
  4016a4:	200000a4 	.word	0x200000a4

004016a8 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  4016a8:	b538      	push	{r3, r4, r5, lr}
  4016aa:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  4016ac:	7c44      	ldrb	r4, [r0, #17]
  4016ae:	f014 0f10 	tst.w	r4, #16
  4016b2:	d015      	beq.n	4016e0 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  4016b4:	7c44      	ldrb	r4, [r0, #17]
  4016b6:	f36f 1404 	bfc	r4, #4, #1
  4016ba:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  4016bc:	6804      	ldr	r4, [r0, #0]
  4016be:	b17c      	cbz	r4, 4016e0 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  4016c0:	f102 050c 	add.w	r5, r2, #12
  4016c4:	4807      	ldr	r0, [pc, #28]	; (4016e4 <udd_ep_finish_job+0x3c>)
  4016c6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  4016ca:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  4016ce:	bf18      	it	ne
  4016d0:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  4016d4:	2901      	cmp	r1, #1
  4016d6:	bf14      	ite	ne
  4016d8:	2000      	movne	r0, #0
  4016da:	2001      	moveq	r0, #1
  4016dc:	6899      	ldr	r1, [r3, #8]
  4016de:	47a0      	blx	r4
  4016e0:	bd38      	pop	{r3, r4, r5, pc}
  4016e2:	bf00      	nop
  4016e4:	40034000 	.word	0x40034000

004016e8 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  4016e8:	b084      	sub	sp, #16
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4016ea:	1e42      	subs	r2, r0, #1
  4016ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4016f0:	4b2f      	ldr	r3, [pc, #188]	; (4017b0 <udd_ep_ack_out_received+0xc8>)
  4016f2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4016f6:	0083      	lsls	r3, r0, #2
  4016f8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4016fc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_all_banks_received(ep)) {
  401700:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401702:	f001 0142 	and.w	r1, r1, #66	; 0x42
  401706:	2942      	cmp	r1, #66	; 0x42
  401708:	d00e      	beq.n	401728 <udd_ep_ack_out_received+0x40>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  40170a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40170c:	f011 0f02 	tst.w	r1, #2
  401710:	d004      	beq.n	40171c <udd_ep_ack_out_received+0x34>
		// Must be bank0
		ptr_job->bank = 0;
  401712:	7c51      	ldrb	r1, [r2, #17]
  401714:	f36f 0183 	bfc	r1, #2, #2
  401718:	7451      	strb	r1, [r2, #17]
  40171a:	e009      	b.n	401730 <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  40171c:	7c51      	ldrb	r1, [r2, #17]
  40171e:	2001      	movs	r0, #1
  401720:	f360 0183 	bfi	r1, r0, #2, #2
  401724:	7451      	strb	r1, [r2, #17]
  401726:	e024      	b.n	401772 <udd_ep_ack_out_received+0x8a>
	}
	if (ptr_job->bank == 0) {
  401728:	7c51      	ldrb	r1, [r2, #17]
  40172a:	f011 0f0c 	tst.w	r1, #12
  40172e:	d120      	bne.n	401772 <udd_ep_ack_out_received+0x8a>
		udd_ack_bank0_received(ep);
  401730:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401732:	9100      	str	r1, [sp, #0]
  401734:	9900      	ldr	r1, [sp, #0]
  401736:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  40173a:	9100      	str	r1, [sp, #0]
  40173c:	9900      	ldr	r1, [sp, #0]
  40173e:	f021 0102 	bic.w	r1, r1, #2
  401742:	9100      	str	r1, [sp, #0]
  401744:	9900      	ldr	r1, [sp, #0]
  401746:	6319      	str	r1, [r3, #48]	; 0x30
  401748:	2300      	movs	r3, #0
  40174a:	9301      	str	r3, [sp, #4]
  40174c:	9b01      	ldr	r3, [sp, #4]
  40174e:	2b13      	cmp	r3, #19
  401750:	d806      	bhi.n	401760 <udd_ep_ack_out_received+0x78>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401752:	bf00      	nop
  401754:	9b01      	ldr	r3, [sp, #4]
  401756:	3301      	adds	r3, #1
  401758:	9301      	str	r3, [sp, #4]
  40175a:	9b01      	ldr	r3, [sp, #4]
  40175c:	2b13      	cmp	r3, #19
  40175e:	d9f8      	bls.n	401752 <udd_ep_ack_out_received+0x6a>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401760:	b318      	cbz	r0, 4017aa <udd_ep_ack_out_received+0xc2>
  401762:	2803      	cmp	r0, #3
  401764:	d021      	beq.n	4017aa <udd_ep_ack_out_received+0xc2>
			ptr_job->bank = 1;
  401766:	7c53      	ldrb	r3, [r2, #17]
  401768:	2101      	movs	r1, #1
  40176a:	f361 0383 	bfi	r3, r1, #2, #2
  40176e:	7453      	strb	r3, [r2, #17]
  401770:	e01b      	b.n	4017aa <udd_ep_ack_out_received+0xc2>
		}
	} else {
		udd_ack_bank1_received(ep);
  401772:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401774:	9102      	str	r1, [sp, #8]
  401776:	9902      	ldr	r1, [sp, #8]
  401778:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  40177c:	9102      	str	r1, [sp, #8]
  40177e:	9902      	ldr	r1, [sp, #8]
  401780:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  401784:	9102      	str	r1, [sp, #8]
  401786:	9902      	ldr	r1, [sp, #8]
  401788:	6319      	str	r1, [r3, #48]	; 0x30
  40178a:	2300      	movs	r3, #0
  40178c:	9303      	str	r3, [sp, #12]
  40178e:	9b03      	ldr	r3, [sp, #12]
  401790:	2b13      	cmp	r3, #19
  401792:	d806      	bhi.n	4017a2 <udd_ep_ack_out_received+0xba>
  401794:	bf00      	nop
  401796:	9b03      	ldr	r3, [sp, #12]
  401798:	3301      	adds	r3, #1
  40179a:	9303      	str	r3, [sp, #12]
  40179c:	9b03      	ldr	r3, [sp, #12]
  40179e:	2b13      	cmp	r3, #19
  4017a0:	d9f8      	bls.n	401794 <udd_ep_ack_out_received+0xac>
		ptr_job->bank = 0;
  4017a2:	7c53      	ldrb	r3, [r2, #17]
  4017a4:	f36f 0383 	bfc	r3, #2, #2
  4017a8:	7453      	strb	r3, [r2, #17]
	}
}
  4017aa:	b004      	add	sp, #16
  4017ac:	4770      	bx	lr
  4017ae:	bf00      	nop
  4017b0:	200006d0 	.word	0x200006d0

004017b4 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  4017b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  4017b8:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  4017ba:	4607      	mov	r7, r0
  4017bc:	1e46      	subs	r6, r0, #1
  4017be:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4017c2:	4b52      	ldr	r3, [pc, #328]	; (40190c <udd_ep_in_sent+0x158>)
  4017c4:	eb03 0686 	add.w	r6, r3, r6, lsl #2

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  4017c8:	7c73      	ldrb	r3, [r6, #17]
  4017ca:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4017ce:	b120      	cbz	r0, 4017da <udd_ep_in_sent+0x26>
  4017d0:	2803      	cmp	r0, #3
  4017d2:	bf14      	ite	ne
  4017d4:	2202      	movne	r2, #2
  4017d6:	2201      	moveq	r2, #1
  4017d8:	e000      	b.n	4017dc <udd_ep_in_sent+0x28>
  4017da:	2201      	movs	r2, #1
  4017dc:	429a      	cmp	r2, r3
  4017de:	f340 8089 	ble.w	4018f4 <udd_ep_in_sent+0x140>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  4017e2:	68f3      	ldr	r3, [r6, #12]
  4017e4:	68b2      	ldr	r2, [r6, #8]
  4017e6:	4293      	cmp	r3, r2
  4017e8:	d304      	bcc.n	4017f4 <udd_ep_in_sent+0x40>
  4017ea:	7c74      	ldrb	r4, [r6, #17]
  4017ec:	f014 0f40 	tst.w	r4, #64	; 0x40
  4017f0:	f000 8082 	beq.w	4018f8 <udd_ep_in_sent+0x144>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  4017f4:	6874      	ldr	r4, [r6, #4]
  4017f6:	441c      	add	r4, r3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4017f8:	ebc3 0902 	rsb	r9, r3, r2
	uint32_t pkt_size = ptr_job->size;
  4017fc:	8a32      	ldrh	r2, [r6, #16]
  4017fe:	f3c2 0209 	ubfx	r2, r2, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  401802:	4591      	cmp	r9, r2
static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
  401804:	bf26      	itte	cs
  401806:	4691      	movcs	r9, r2
	bool is_short_pkt = false;
  401808:	f04f 0800 	movcs.w	r8, #0

	// Packet size
	if (nb_remain < pkt_size) {
		pkt_size = nb_remain;
		is_short_pkt = true;
  40180c:	f04f 0801 	movcc.w	r8, #1
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  401810:	444b      	add	r3, r9
  401812:	60f3      	str	r3, [r6, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401814:	f1b9 0f07 	cmp.w	r9, #7
  401818:	d926      	bls.n	401868 <udd_ep_in_sent+0xb4>
  40181a:	4623      	mov	r3, r4
  40181c:	f1a9 0a08 	sub.w	sl, r9, #8
  401820:	ea4f 0ada 	mov.w	sl, sl, lsr #3
  401824:	f104 0c08 	add.w	ip, r4, #8
  401828:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40182c:	0082      	lsls	r2, r0, #2
  40182e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401832:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401836:	781d      	ldrb	r5, [r3, #0]
  401838:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40183a:	785d      	ldrb	r5, [r3, #1]
  40183c:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40183e:	789d      	ldrb	r5, [r3, #2]
  401840:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401842:	78dd      	ldrb	r5, [r3, #3]
  401844:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401846:	791d      	ldrb	r5, [r3, #4]
  401848:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40184a:	795d      	ldrb	r5, [r3, #5]
  40184c:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  40184e:	799d      	ldrb	r5, [r3, #6]
  401850:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401852:	79dd      	ldrb	r5, [r3, #7]
  401854:	6515      	str	r5, [r2, #80]	; 0x50
  401856:	3308      	adds	r3, #8

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401858:	4563      	cmp	r3, ip
  40185a:	d1ec      	bne.n	401836 <udd_ep_in_sent+0x82>
  40185c:	f10a 0a01 	add.w	sl, sl, #1
  401860:	eb04 04ca 	add.w	r4, r4, sl, lsl #3
  401864:	f009 0907 	and.w	r9, r9, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401868:	f1b9 0f00 	cmp.w	r9, #0
  40186c:	d009      	beq.n	401882 <udd_ep_in_sent+0xce>
  40186e:	44a1      	add	r9, r4
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401870:	4d27      	ldr	r5, [pc, #156]	; (401910 <udd_ep_in_sent+0x15c>)
  401872:	f814 2b01 	ldrb.w	r2, [r4], #1
  401876:	f107 0314 	add.w	r3, r7, #20
  40187a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  40187e:	454c      	cmp	r4, r9
  401880:	d1f7      	bne.n	401872 <udd_ep_in_sent+0xbe>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  401882:	7c73      	ldrb	r3, [r6, #17]
  401884:	f3c3 0281 	ubfx	r2, r3, #2, #2
  401888:	3201      	adds	r2, #1
  40188a:	f362 0383 	bfi	r3, r2, #2, #2
  40188e:	7473      	strb	r3, [r6, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401890:	b1e1      	cbz	r1, 4018cc <udd_ep_in_sent+0x118>
  401892:	0080      	lsls	r0, r0, #2
  401894:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  401898:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  40189c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40189e:	9300      	str	r3, [sp, #0]
  4018a0:	9b00      	ldr	r3, [sp, #0]
  4018a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4018a6:	9300      	str	r3, [sp, #0]
  4018a8:	9b00      	ldr	r3, [sp, #0]
  4018aa:	f043 0310 	orr.w	r3, r3, #16
  4018ae:	9300      	str	r3, [sp, #0]
  4018b0:	9b00      	ldr	r3, [sp, #0]
  4018b2:	6303      	str	r3, [r0, #48]	; 0x30
  4018b4:	2300      	movs	r3, #0
  4018b6:	9301      	str	r3, [sp, #4]
  4018b8:	9b01      	ldr	r3, [sp, #4]
  4018ba:	2b13      	cmp	r3, #19
  4018bc:	d806      	bhi.n	4018cc <udd_ep_in_sent+0x118>
  4018be:	bf00      	nop
  4018c0:	9b01      	ldr	r3, [sp, #4]
  4018c2:	3301      	adds	r3, #1
  4018c4:	9301      	str	r3, [sp, #4]
  4018c6:	9b01      	ldr	r3, [sp, #4]
  4018c8:	2b13      	cmp	r3, #19
  4018ca:	d9f8      	bls.n	4018be <udd_ep_in_sent+0x10a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  4018cc:	f1b8 0f00 	cmp.w	r8, #0
  4018d0:	d003      	beq.n	4018da <udd_ep_in_sent+0x126>
		ptr_job->b_shortpacket = false;
  4018d2:	7c73      	ldrb	r3, [r6, #17]
  4018d4:	f36f 1386 	bfc	r3, #6, #1
  4018d8:	7473      	strb	r3, [r6, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  4018da:	68f2      	ldr	r2, [r6, #12]
  4018dc:	68b3      	ldr	r3, [r6, #8]
  4018de:	429a      	cmp	r2, r3
  4018e0:	d30c      	bcc.n	4018fc <udd_ep_in_sent+0x148>
			&& (!ptr_job->b_shortpacket)) {
  4018e2:	7c73      	ldrb	r3, [r6, #17]
  4018e4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4018e8:	d10a      	bne.n	401900 <udd_ep_in_sent+0x14c>
		ptr_job->b_buf_end = true;
  4018ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4018ee:	7473      	strb	r3, [r6, #17]
		return false;
  4018f0:	2000      	movs	r0, #0
  4018f2:	e006      	b.n	401902 <udd_ep_in_sent+0x14e>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  4018f4:	2001      	movs	r0, #1
  4018f6:	e004      	b.n	401902 <udd_ep_in_sent+0x14e>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  4018f8:	2000      	movs	r0, #0
  4018fa:	e002      	b.n	401902 <udd_ep_in_sent+0x14e>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  4018fc:	2001      	movs	r0, #1
  4018fe:	e000      	b.n	401902 <udd_ep_in_sent+0x14e>
  401900:	2001      	movs	r0, #1
}
  401902:	b003      	add	sp, #12
  401904:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  401908:	4770      	bx	lr
  40190a:	bf00      	nop
  40190c:	200006d0 	.word	0x200006d0
  401910:	40034000 	.word	0x40034000

00401914 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401918:	b0b0      	sub	sp, #192	; 0xc0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  40191a:	4b94      	ldr	r3, [pc, #592]	; (401b6c <UDP_Handler+0x258>)
  40191c:	4798      	blx	r3
  40191e:	b960      	cbnz	r0, 40193a <UDP_Handler+0x26>
  401920:	4b93      	ldr	r3, [pc, #588]	; (401b70 <UDP_Handler+0x25c>)
  401922:	69db      	ldr	r3, [r3, #28]
  401924:	f413 7f80 	tst.w	r3, #256	; 0x100
  401928:	d107      	bne.n	40193a <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40192a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40192c:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401930:	2200      	movs	r2, #0
  401932:	4b90      	ldr	r3, [pc, #576]	; (401b74 <UDP_Handler+0x260>)
  401934:	701a      	strb	r2, [r3, #0]
		return;
  401936:	f000 bd15 	b.w	402364 <UDP_Handler+0xa50>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  40193a:	2022      	movs	r0, #34	; 0x22
  40193c:	4b8e      	ldr	r3, [pc, #568]	; (401b78 <UDP_Handler+0x264>)
  40193e:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401940:	4b8b      	ldr	r3, [pc, #556]	; (401b70 <UDP_Handler+0x25c>)
  401942:	699b      	ldr	r3, [r3, #24]
  401944:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401948:	d00c      	beq.n	401964 <UDP_Handler+0x50>
  40194a:	4b89      	ldr	r3, [pc, #548]	; (401b70 <UDP_Handler+0x25c>)
  40194c:	69db      	ldr	r3, [r3, #28]
  40194e:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401952:	d007      	beq.n	401964 <UDP_Handler+0x50>
		udd_ack_sof();
  401954:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401958:	4b85      	ldr	r3, [pc, #532]	; (401b70 <UDP_Handler+0x25c>)
  40195a:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  40195c:	4b87      	ldr	r3, [pc, #540]	; (401b7c <UDP_Handler+0x268>)
  40195e:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401960:	f000 bd00 	b.w	402364 <UDP_Handler+0xa50>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  401964:	4b82      	ldr	r3, [pc, #520]	; (401b70 <UDP_Handler+0x25c>)
  401966:	69db      	ldr	r3, [r3, #28]
  401968:	f013 0f01 	tst.w	r3, #1
  40196c:	f000 81f1 	beq.w	401d52 <UDP_Handler+0x43e>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  401970:	4b7f      	ldr	r3, [pc, #508]	; (401b70 <UDP_Handler+0x25c>)
  401972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401974:	f013 0f04 	tst.w	r3, #4
  401978:	f000 80c0 	beq.w	401afc <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40197c:	4b80      	ldr	r3, [pc, #512]	; (401b80 <UDP_Handler+0x26c>)
  40197e:	781b      	ldrb	r3, [r3, #0]
  401980:	b11b      	cbz	r3, 40198a <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  401982:	4b80      	ldr	r3, [pc, #512]	; (401b84 <UDP_Handler+0x270>)
  401984:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  401986:	4b80      	ldr	r3, [pc, #512]	; (401b88 <UDP_Handler+0x274>)
  401988:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  40198a:	4b79      	ldr	r3, [pc, #484]	; (401b70 <UDP_Handler+0x25c>)
  40198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40198e:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401992:	2b08      	cmp	r3, #8
  401994:	d01c      	beq.n	4019d0 <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  401996:	4b76      	ldr	r3, [pc, #472]	; (401b70 <UDP_Handler+0x25c>)
  401998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40199a:	9202      	str	r2, [sp, #8]
  40199c:	9a02      	ldr	r2, [sp, #8]
  40199e:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4019a2:	9202      	str	r2, [sp, #8]
  4019a4:	9a02      	ldr	r2, [sp, #8]
  4019a6:	f022 0204 	bic.w	r2, r2, #4
  4019aa:	9202      	str	r2, [sp, #8]
  4019ac:	9a02      	ldr	r2, [sp, #8]
  4019ae:	631a      	str	r2, [r3, #48]	; 0x30
  4019b0:	2300      	movs	r3, #0
  4019b2:	9303      	str	r3, [sp, #12]
  4019b4:	9b03      	ldr	r3, [sp, #12]
  4019b6:	2b13      	cmp	r3, #19
  4019b8:	d806      	bhi.n	4019c8 <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4019ba:	bf00      	nop
  4019bc:	9b03      	ldr	r3, [sp, #12]
  4019be:	3301      	adds	r3, #1
  4019c0:	9303      	str	r3, [sp, #12]
  4019c2:	9b03      	ldr	r3, [sp, #12]
  4019c4:	2b13      	cmp	r3, #19
  4019c6:	d9f8      	bls.n	4019ba <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  4019c8:	4b70      	ldr	r3, [pc, #448]	; (401b8c <UDP_Handler+0x278>)
  4019ca:	4798      	blx	r3
  4019cc:	f000 bcca 	b.w	402364 <UDP_Handler+0xa50>
  4019d0:	4b6f      	ldr	r3, [pc, #444]	; (401b90 <UDP_Handler+0x27c>)
  4019d2:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  4019d6:	4966      	ldr	r1, [pc, #408]	; (401b70 <UDP_Handler+0x25c>)
  4019d8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4019da:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  4019de:	4283      	cmp	r3, r0
  4019e0:	d1fa      	bne.n	4019d8 <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  4019e2:	4b6c      	ldr	r3, [pc, #432]	; (401b94 <UDP_Handler+0x280>)
  4019e4:	4798      	blx	r3
  4019e6:	b9e0      	cbnz	r0, 401a22 <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  4019e8:	4b61      	ldr	r3, [pc, #388]	; (401b70 <UDP_Handler+0x25c>)
  4019ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019ec:	9204      	str	r2, [sp, #16]
  4019ee:	9a04      	ldr	r2, [sp, #16]
  4019f0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4019f4:	9204      	str	r2, [sp, #16]
  4019f6:	9a04      	ldr	r2, [sp, #16]
  4019f8:	f022 0204 	bic.w	r2, r2, #4
  4019fc:	9204      	str	r2, [sp, #16]
  4019fe:	9a04      	ldr	r2, [sp, #16]
  401a00:	631a      	str	r2, [r3, #48]	; 0x30
  401a02:	2300      	movs	r3, #0
  401a04:	9305      	str	r3, [sp, #20]
  401a06:	9b05      	ldr	r3, [sp, #20]
  401a08:	2b13      	cmp	r3, #19
  401a0a:	d806      	bhi.n	401a1a <UDP_Handler+0x106>
  401a0c:	bf00      	nop
  401a0e:	9b05      	ldr	r3, [sp, #20]
  401a10:	3301      	adds	r3, #1
  401a12:	9305      	str	r3, [sp, #20]
  401a14:	9b05      	ldr	r3, [sp, #20]
  401a16:	2b13      	cmp	r3, #19
  401a18:	d9f8      	bls.n	401a0c <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  401a1a:	4b5c      	ldr	r3, [pc, #368]	; (401b8c <UDP_Handler+0x278>)
  401a1c:	4798      	blx	r3
  401a1e:	f000 bca1 	b.w	402364 <UDP_Handler+0xa50>
		return;
	}

	if (Udd_setup_is_in()) {
  401a22:	4b5d      	ldr	r3, [pc, #372]	; (401b98 <UDP_Handler+0x284>)
  401a24:	f993 3000 	ldrsb.w	r3, [r3]
  401a28:	2b00      	cmp	r3, #0
  401a2a:	da3d      	bge.n	401aa8 <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  401a2c:	4b50      	ldr	r3, [pc, #320]	; (401b70 <UDP_Handler+0x25c>)
  401a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a30:	9206      	str	r2, [sp, #24]
  401a32:	9a06      	ldr	r2, [sp, #24]
  401a34:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a38:	9206      	str	r2, [sp, #24]
  401a3a:	9a06      	ldr	r2, [sp, #24]
  401a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  401a40:	9206      	str	r2, [sp, #24]
  401a42:	9a06      	ldr	r2, [sp, #24]
  401a44:	631a      	str	r2, [r3, #48]	; 0x30
  401a46:	2300      	movs	r3, #0
  401a48:	9307      	str	r3, [sp, #28]
  401a4a:	9b07      	ldr	r3, [sp, #28]
  401a4c:	2b13      	cmp	r3, #19
  401a4e:	d806      	bhi.n	401a5e <UDP_Handler+0x14a>
  401a50:	bf00      	nop
  401a52:	9b07      	ldr	r3, [sp, #28]
  401a54:	3301      	adds	r3, #1
  401a56:	9307      	str	r3, [sp, #28]
  401a58:	9b07      	ldr	r3, [sp, #28]
  401a5a:	2b13      	cmp	r3, #19
  401a5c:	d9f8      	bls.n	401a50 <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  401a5e:	4b44      	ldr	r3, [pc, #272]	; (401b70 <UDP_Handler+0x25c>)
  401a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a62:	9208      	str	r2, [sp, #32]
  401a64:	9a08      	ldr	r2, [sp, #32]
  401a66:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a6a:	9208      	str	r2, [sp, #32]
  401a6c:	9a08      	ldr	r2, [sp, #32]
  401a6e:	f022 0204 	bic.w	r2, r2, #4
  401a72:	9208      	str	r2, [sp, #32]
  401a74:	9a08      	ldr	r2, [sp, #32]
  401a76:	631a      	str	r2, [r3, #48]	; 0x30
  401a78:	2300      	movs	r3, #0
  401a7a:	9309      	str	r3, [sp, #36]	; 0x24
  401a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a7e:	2b13      	cmp	r3, #19
  401a80:	d806      	bhi.n	401a90 <UDP_Handler+0x17c>
  401a82:	bf00      	nop
  401a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a86:	3301      	adds	r3, #1
  401a88:	9309      	str	r3, [sp, #36]	; 0x24
  401a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a8c:	2b13      	cmp	r3, #19
  401a8e:	d9f8      	bls.n	401a82 <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  401a90:	2300      	movs	r3, #0
  401a92:	4a42      	ldr	r2, [pc, #264]	; (401b9c <UDP_Handler+0x288>)
  401a94:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401a96:	4a42      	ldr	r2, [pc, #264]	; (401ba0 <UDP_Handler+0x28c>)
  401a98:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401a9a:	2202      	movs	r2, #2
  401a9c:	4b38      	ldr	r3, [pc, #224]	; (401b80 <UDP_Handler+0x26c>)
  401a9e:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401aa0:	4b40      	ldr	r3, [pc, #256]	; (401ba4 <UDP_Handler+0x290>)
  401aa2:	4798      	blx	r3
  401aa4:	f000 bc5e 	b.w	402364 <UDP_Handler+0xa50>
	} else {
		udd_ack_setup_received(0);
  401aa8:	4b31      	ldr	r3, [pc, #196]	; (401b70 <UDP_Handler+0x25c>)
  401aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401aac:	920a      	str	r2, [sp, #40]	; 0x28
  401aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401ab0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ab4:	920a      	str	r2, [sp, #40]	; 0x28
  401ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401ab8:	f022 0204 	bic.w	r2, r2, #4
  401abc:	920a      	str	r2, [sp, #40]	; 0x28
  401abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401ac0:	631a      	str	r2, [r3, #48]	; 0x30
  401ac2:	2300      	movs	r3, #0
  401ac4:	930b      	str	r3, [sp, #44]	; 0x2c
  401ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401ac8:	2b13      	cmp	r3, #19
  401aca:	d806      	bhi.n	401ada <UDP_Handler+0x1c6>
  401acc:	bf00      	nop
  401ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401ad0:	3301      	adds	r3, #1
  401ad2:	930b      	str	r3, [sp, #44]	; 0x2c
  401ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401ad6:	2b13      	cmp	r3, #19
  401ad8:	d9f8      	bls.n	401acc <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  401ada:	4b2f      	ldr	r3, [pc, #188]	; (401b98 <UDP_Handler+0x284>)
  401adc:	88db      	ldrh	r3, [r3, #6]
  401ade:	b91b      	cbnz	r3, 401ae8 <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  401ae0:	4b31      	ldr	r3, [pc, #196]	; (401ba8 <UDP_Handler+0x294>)
  401ae2:	4798      	blx	r3
  401ae4:	f000 bc3e 	b.w	402364 <UDP_Handler+0xa50>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  401ae8:	2300      	movs	r3, #0
  401aea:	4a2c      	ldr	r2, [pc, #176]	; (401b9c <UDP_Handler+0x288>)
  401aec:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401aee:	4a2c      	ldr	r2, [pc, #176]	; (401ba0 <UDP_Handler+0x28c>)
  401af0:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401af2:	2201      	movs	r2, #1
  401af4:	4b22      	ldr	r3, [pc, #136]	; (401b80 <UDP_Handler+0x26c>)
  401af6:	701a      	strb	r2, [r3, #0]
  401af8:	f000 bc34 	b.w	402364 <UDP_Handler+0xa50>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  401afc:	4b1c      	ldr	r3, [pc, #112]	; (401b70 <UDP_Handler+0x25c>)
  401afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b00:	f013 0f01 	tst.w	r3, #1
  401b04:	d003      	beq.n	401b0e <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  401b06:	4b27      	ldr	r3, [pc, #156]	; (401ba4 <UDP_Handler+0x290>)
  401b08:	4798      	blx	r3
  401b0a:	f000 bc2b 	b.w	402364 <UDP_Handler+0xa50>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  401b0e:	4b18      	ldr	r3, [pc, #96]	; (401b70 <UDP_Handler+0x25c>)
  401b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b12:	f013 0f02 	tst.w	r3, #2
  401b16:	f000 8117 	beq.w	401d48 <UDP_Handler+0x434>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  401b1a:	4b19      	ldr	r3, [pc, #100]	; (401b80 <UDP_Handler+0x26c>)
  401b1c:	781b      	ldrb	r3, [r3, #0]
  401b1e:	2b01      	cmp	r3, #1
  401b20:	d044      	beq.n	401bac <UDP_Handler+0x298>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401b22:	2b02      	cmp	r3, #2
  401b24:	d001      	beq.n	401b2a <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401b26:	2b04      	cmp	r3, #4
  401b28:	d102      	bne.n	401b30 <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  401b2a:	4b16      	ldr	r3, [pc, #88]	; (401b84 <UDP_Handler+0x270>)
  401b2c:	4798      	blx	r3
  401b2e:	e001      	b.n	401b34 <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  401b30:	4b16      	ldr	r3, [pc, #88]	; (401b8c <UDP_Handler+0x278>)
  401b32:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  401b34:	4b0e      	ldr	r3, [pc, #56]	; (401b70 <UDP_Handler+0x25c>)
  401b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401b38:	920c      	str	r2, [sp, #48]	; 0x30
  401b3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401b3c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401b40:	920c      	str	r2, [sp, #48]	; 0x30
  401b42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401b44:	f022 0202 	bic.w	r2, r2, #2
  401b48:	920c      	str	r2, [sp, #48]	; 0x30
  401b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401b4c:	631a      	str	r2, [r3, #48]	; 0x30
  401b4e:	2300      	movs	r3, #0
  401b50:	930d      	str	r3, [sp, #52]	; 0x34
  401b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401b54:	2b13      	cmp	r3, #19
  401b56:	d806      	bhi.n	401b66 <UDP_Handler+0x252>
  401b58:	bf00      	nop
  401b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401b5c:	3301      	adds	r3, #1
  401b5e:	930d      	str	r3, [sp, #52]	; 0x34
  401b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401b62:	2b13      	cmp	r3, #19
  401b64:	d9f8      	bls.n	401b58 <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  401b66:	4b08      	ldr	r3, [pc, #32]	; (401b88 <UDP_Handler+0x274>)
  401b68:	4798      	blx	r3
  401b6a:	e3fb      	b.n	402364 <UDP_Handler+0xa50>
  401b6c:	00401331 	.word	0x00401331
  401b70:	40034000 	.word	0x40034000
  401b74:	200000a4 	.word	0x200000a4
  401b78:	00401281 	.word	0x00401281
  401b7c:	00400add 	.word	0x00400add
  401b80:	20000711 	.word	0x20000711
  401b84:	00401499 	.word	0x00401499
  401b88:	004013f1 	.word	0x004013f1
  401b8c:	00401409 	.word	0x00401409
  401b90:	20000743 	.word	0x20000743
  401b94:	00400b19 	.word	0x00400b19
  401b98:	20000744 	.word	0x20000744
  401b9c:	200006ce 	.word	0x200006ce
  401ba0:	2000070e 	.word	0x2000070e
  401ba4:	004014a9 	.word	0x004014a9
  401ba8:	00401451 	.word	0x00401451
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401bac:	4b90      	ldr	r3, [pc, #576]	; (401df0 <UDP_Handler+0x4dc>)
  401bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401bb0:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401bb4:	4b8f      	ldr	r3, [pc, #572]	; (401df4 <UDP_Handler+0x4e0>)
  401bb6:	899b      	ldrh	r3, [r3, #12]
  401bb8:	4a8f      	ldr	r2, [pc, #572]	; (401df8 <UDP_Handler+0x4e4>)
  401bba:	8815      	ldrh	r5, [r2, #0]
  401bbc:	186a      	adds	r2, r5, r1
  401bbe:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401bc0:	bfae      	itee	ge
  401bc2:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  401bc4:	ebc5 0303 	rsblt	r3, r5, r3
  401bc8:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401bca:	4b8a      	ldr	r3, [pc, #552]	; (401df4 <UDP_Handler+0x4e0>)
  401bcc:	6898      	ldr	r0, [r3, #8]
  401bce:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401bd0:	b1a9      	cbz	r1, 401bfe <UDP_Handler+0x2ea>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401bd2:	4603      	mov	r3, r0
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401bd4:	4c86      	ldr	r4, [pc, #536]	; (401df0 <UDP_Handler+0x4dc>)
  401bd6:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401bd8:	f803 2b01 	strb.w	r2, [r3], #1
  401bdc:	1a1a      	subs	r2, r3, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  401bde:	b2d2      	uxtb	r2, r2
  401be0:	428a      	cmp	r2, r1
  401be2:	d3f8      	bcc.n	401bd6 <UDP_Handler+0x2c2>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  401be4:	440d      	add	r5, r1
  401be6:	b2ad      	uxth	r5, r5
  401be8:	4b83      	ldr	r3, [pc, #524]	; (401df8 <UDP_Handler+0x4e4>)
  401bea:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401bec:	2940      	cmp	r1, #64	; 0x40
  401bee:	d106      	bne.n	401bfe <UDP_Handler+0x2ea>
			|| (udd_g_ctrlreq.req.wLength <=
  401bf0:	4b80      	ldr	r3, [pc, #512]	; (401df4 <UDP_Handler+0x4e0>)
  401bf2:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401bf4:	4b81      	ldr	r3, [pc, #516]	; (401dfc <UDP_Handler+0x4e8>)
  401bf6:	881b      	ldrh	r3, [r3, #0]
  401bf8:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  401bfa:	429a      	cmp	r2, r3
  401bfc:	dc3e      	bgt.n	401c7c <UDP_Handler+0x368>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401bfe:	4b7d      	ldr	r3, [pc, #500]	; (401df4 <UDP_Handler+0x4e0>)
  401c00:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401c02:	695b      	ldr	r3, [r3, #20]
  401c04:	b1f3      	cbz	r3, 401c44 <UDP_Handler+0x330>
			if (!udd_g_ctrlreq.over_under_run()) {
  401c06:	4798      	blx	r3
  401c08:	b9e0      	cbnz	r0, 401c44 <UDP_Handler+0x330>
				// Stall ZLP
				udd_ctrl_stall_data();
  401c0a:	4b7d      	ldr	r3, [pc, #500]	; (401e00 <UDP_Handler+0x4ec>)
  401c0c:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  401c0e:	4b78      	ldr	r3, [pc, #480]	; (401df0 <UDP_Handler+0x4dc>)
  401c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401c12:	920e      	str	r2, [sp, #56]	; 0x38
  401c14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401c16:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c1a:	920e      	str	r2, [sp, #56]	; 0x38
  401c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401c1e:	f022 0202 	bic.w	r2, r2, #2
  401c22:	920e      	str	r2, [sp, #56]	; 0x38
  401c24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  401c26:	631a      	str	r2, [r3, #48]	; 0x30
  401c28:	2300      	movs	r3, #0
  401c2a:	930f      	str	r3, [sp, #60]	; 0x3c
  401c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c2e:	2b13      	cmp	r3, #19
  401c30:	f200 8398 	bhi.w	402364 <UDP_Handler+0xa50>
  401c34:	bf00      	nop
  401c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c38:	3301      	adds	r3, #1
  401c3a:	930f      	str	r3, [sp, #60]	; 0x3c
  401c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  401c3e:	2b13      	cmp	r3, #19
  401c40:	d9f8      	bls.n	401c34 <UDP_Handler+0x320>
  401c42:	e38f      	b.n	402364 <UDP_Handler+0xa50>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  401c44:	4b6a      	ldr	r3, [pc, #424]	; (401df0 <UDP_Handler+0x4dc>)
  401c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401c48:	9210      	str	r2, [sp, #64]	; 0x40
  401c4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401c4c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c50:	9210      	str	r2, [sp, #64]	; 0x40
  401c52:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401c54:	f022 0202 	bic.w	r2, r2, #2
  401c58:	9210      	str	r2, [sp, #64]	; 0x40
  401c5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401c5c:	631a      	str	r2, [r3, #48]	; 0x30
  401c5e:	2300      	movs	r3, #0
  401c60:	9311      	str	r3, [sp, #68]	; 0x44
  401c62:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401c64:	2b13      	cmp	r3, #19
  401c66:	d806      	bhi.n	401c76 <UDP_Handler+0x362>
  401c68:	bf00      	nop
  401c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401c6c:	3301      	adds	r3, #1
  401c6e:	9311      	str	r3, [sp, #68]	; 0x44
  401c70:	9b11      	ldr	r3, [sp, #68]	; 0x44
  401c72:	2b13      	cmp	r3, #19
  401c74:	d9f8      	bls.n	401c68 <UDP_Handler+0x354>
		udd_ctrl_send_zlp_in();
  401c76:	4b63      	ldr	r3, [pc, #396]	; (401e04 <UDP_Handler+0x4f0>)
  401c78:	4798      	blx	r3
  401c7a:	e373      	b.n	402364 <UDP_Handler+0xa50>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  401c7c:	4b5d      	ldr	r3, [pc, #372]	; (401df4 <UDP_Handler+0x4e0>)
  401c7e:	899b      	ldrh	r3, [r3, #12]
  401c80:	42ab      	cmp	r3, r5
  401c82:	d146      	bne.n	401d12 <UDP_Handler+0x3fe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  401c84:	4b5b      	ldr	r3, [pc, #364]	; (401df4 <UDP_Handler+0x4e0>)
  401c86:	695b      	ldr	r3, [r3, #20]
  401c88:	b9e3      	cbnz	r3, 401cc4 <UDP_Handler+0x3b0>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  401c8a:	4b5d      	ldr	r3, [pc, #372]	; (401e00 <UDP_Handler+0x4ec>)
  401c8c:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  401c8e:	4b58      	ldr	r3, [pc, #352]	; (401df0 <UDP_Handler+0x4dc>)
  401c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401c92:	9212      	str	r2, [sp, #72]	; 0x48
  401c94:	9a12      	ldr	r2, [sp, #72]	; 0x48
  401c96:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c9a:	9212      	str	r2, [sp, #72]	; 0x48
  401c9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  401c9e:	f022 0202 	bic.w	r2, r2, #2
  401ca2:	9212      	str	r2, [sp, #72]	; 0x48
  401ca4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  401ca6:	631a      	str	r2, [r3, #48]	; 0x30
  401ca8:	2300      	movs	r3, #0
  401caa:	9313      	str	r3, [sp, #76]	; 0x4c
  401cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401cae:	2b13      	cmp	r3, #19
  401cb0:	f200 8358 	bhi.w	402364 <UDP_Handler+0xa50>
  401cb4:	bf00      	nop
  401cb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401cb8:	3301      	adds	r3, #1
  401cba:	9313      	str	r3, [sp, #76]	; 0x4c
  401cbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  401cbe:	2b13      	cmp	r3, #19
  401cc0:	d9f8      	bls.n	401cb4 <UDP_Handler+0x3a0>
  401cc2:	e34f      	b.n	402364 <UDP_Handler+0xa50>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  401cc4:	4798      	blx	r3
  401cc6:	b9e0      	cbnz	r0, 401d02 <UDP_Handler+0x3ee>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  401cc8:	4b4d      	ldr	r3, [pc, #308]	; (401e00 <UDP_Handler+0x4ec>)
  401cca:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  401ccc:	4b48      	ldr	r3, [pc, #288]	; (401df0 <UDP_Handler+0x4dc>)
  401cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401cd0:	9214      	str	r2, [sp, #80]	; 0x50
  401cd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401cd4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401cd8:	9214      	str	r2, [sp, #80]	; 0x50
  401cda:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401cdc:	f022 0202 	bic.w	r2, r2, #2
  401ce0:	9214      	str	r2, [sp, #80]	; 0x50
  401ce2:	9a14      	ldr	r2, [sp, #80]	; 0x50
  401ce4:	631a      	str	r2, [r3, #48]	; 0x30
  401ce6:	2300      	movs	r3, #0
  401ce8:	9315      	str	r3, [sp, #84]	; 0x54
  401cea:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401cec:	2b13      	cmp	r3, #19
  401cee:	f200 8339 	bhi.w	402364 <UDP_Handler+0xa50>
  401cf2:	bf00      	nop
  401cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401cf6:	3301      	adds	r3, #1
  401cf8:	9315      	str	r3, [sp, #84]	; 0x54
  401cfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
  401cfc:	2b13      	cmp	r3, #19
  401cfe:	d9f8      	bls.n	401cf2 <UDP_Handler+0x3de>
  401d00:	e330      	b.n	402364 <UDP_Handler+0xa50>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401d02:	4a3e      	ldr	r2, [pc, #248]	; (401dfc <UDP_Handler+0x4e8>)
  401d04:	4b3c      	ldr	r3, [pc, #240]	; (401df8 <UDP_Handler+0x4e4>)
  401d06:	8818      	ldrh	r0, [r3, #0]
  401d08:	8811      	ldrh	r1, [r2, #0]
  401d0a:	4401      	add	r1, r0
  401d0c:	8011      	strh	r1, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  401d0e:	2200      	movs	r2, #0
  401d10:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  401d12:	4b37      	ldr	r3, [pc, #220]	; (401df0 <UDP_Handler+0x4dc>)
  401d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d16:	9216      	str	r2, [sp, #88]	; 0x58
  401d18:	9a16      	ldr	r2, [sp, #88]	; 0x58
  401d1a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401d1e:	9216      	str	r2, [sp, #88]	; 0x58
  401d20:	9a16      	ldr	r2, [sp, #88]	; 0x58
  401d22:	f022 0202 	bic.w	r2, r2, #2
  401d26:	9216      	str	r2, [sp, #88]	; 0x58
  401d28:	9a16      	ldr	r2, [sp, #88]	; 0x58
  401d2a:	631a      	str	r2, [r3, #48]	; 0x30
  401d2c:	2300      	movs	r3, #0
  401d2e:	9317      	str	r3, [sp, #92]	; 0x5c
  401d30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401d32:	2b13      	cmp	r3, #19
  401d34:	f200 8316 	bhi.w	402364 <UDP_Handler+0xa50>
  401d38:	bf00      	nop
  401d3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401d3c:	3301      	adds	r3, #1
  401d3e:	9317      	str	r3, [sp, #92]	; 0x5c
  401d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  401d42:	2b13      	cmp	r3, #19
  401d44:	d9f8      	bls.n	401d38 <UDP_Handler+0x424>
  401d46:	e30d      	b.n	402364 <UDP_Handler+0xa50>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  401d48:	4b29      	ldr	r3, [pc, #164]	; (401df0 <UDP_Handler+0x4dc>)
  401d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d4c:	f013 0f08 	tst.w	r3, #8
  401d50:	d106      	bne.n	401d60 <UDP_Handler+0x44c>
  401d52:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 401e08 <UDP_Handler+0x4f4>
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  401d56:	4664      	mov	r4, ip
  401d58:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401d5a:	4a25      	ldr	r2, [pc, #148]	; (401df0 <UDP_Handler+0x4dc>)
  401d5c:	461e      	mov	r6, r3
  401d5e:	e01a      	b.n	401d96 <UDP_Handler+0x482>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  401d60:	4b23      	ldr	r3, [pc, #140]	; (401df0 <UDP_Handler+0x4dc>)
  401d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d64:	9200      	str	r2, [sp, #0]
  401d66:	9a00      	ldr	r2, [sp, #0]
  401d68:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401d6c:	9200      	str	r2, [sp, #0]
  401d6e:	9a00      	ldr	r2, [sp, #0]
  401d70:	f022 0208 	bic.w	r2, r2, #8
  401d74:	9200      	str	r2, [sp, #0]
  401d76:	9a00      	ldr	r2, [sp, #0]
  401d78:	631a      	str	r2, [r3, #48]	; 0x30
  401d7a:	2300      	movs	r3, #0
  401d7c:	9301      	str	r3, [sp, #4]
  401d7e:	9b01      	ldr	r3, [sp, #4]
  401d80:	2b13      	cmp	r3, #19
  401d82:	f200 82ef 	bhi.w	402364 <UDP_Handler+0xa50>
  401d86:	bf00      	nop
  401d88:	9b01      	ldr	r3, [sp, #4]
  401d8a:	3301      	adds	r3, #1
  401d8c:	9301      	str	r3, [sp, #4]
  401d8e:	9b01      	ldr	r3, [sp, #4]
  401d90:	2b13      	cmp	r3, #19
  401d92:	d9f8      	bls.n	401d86 <UDP_Handler+0x472>
  401d94:	e2e6      	b.n	402364 <UDP_Handler+0xa50>
  401d96:	fa5f f883 	uxtb.w	r8, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  401d9a:	6991      	ldr	r1, [r2, #24]
  401d9c:	461f      	mov	r7, r3
  401d9e:	fa06 f503 	lsl.w	r5, r6, r3
  401da2:	420d      	tst	r5, r1
  401da4:	f000 81f1 	beq.w	40218a <UDP_Handler+0x876>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  401da8:	46a1      	mov	r9, r4
  401daa:	0099      	lsls	r1, r3, #2
  401dac:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  401db0:	f501 3140 	add.w	r1, r1, #196608	; 0x30000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  401db4:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401db6:	f010 0f42 	tst.w	r0, #66	; 0x42
  401dba:	d044      	beq.n	401e46 <UDP_Handler+0x532>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401dbc:	68a2      	ldr	r2, [r4, #8]
  401dbe:	68e3      	ldr	r3, [r4, #12]
	uint32_t pkt_size = ptr_job->size;
  401dc0:	f8b4 a010 	ldrh.w	sl, [r4, #16]
  401dc4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  401dc8:	6860      	ldr	r0, [r4, #4]
  401dca:	4418      	add	r0, r3
  401dcc:	460c      	mov	r4, r1
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  401dce:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  401dd0:	f3c6 460a 	ubfx	r6, r6, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  401dd4:	2e00      	cmp	r6, #0
  401dd6:	f000 82b6 	beq.w	402346 <UDP_Handler+0xa32>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401dda:	1ad1      	subs	r1, r2, r3
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  401ddc:	42b1      	cmp	r1, r6
  401dde:	f200 82a9 	bhi.w	402334 <UDP_Handler+0xa20>
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  401de2:	f8c9 200c 	str.w	r2, [r9, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  401de6:	2900      	cmp	r1, #0
  401de8:	f040 82aa 	bne.w	402340 <UDP_Handler+0xa2c>
  401dec:	e2b6      	b.n	40235c <UDP_Handler+0xa48>
  401dee:	bf00      	nop
  401df0:	40034000 	.word	0x40034000
  401df4:	20000744 	.word	0x20000744
  401df8:	2000070e 	.word	0x2000070e
  401dfc:	200006ce 	.word	0x200006ce
  401e00:	00401409 	.word	0x00401409
  401e04:	00401451 	.word	0x00401451
  401e08:	200006d0 	.word	0x200006d0
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  401e0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401e0e:	54c2      	strb	r2, [r0, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  401e10:	3301      	adds	r3, #1
  401e12:	428b      	cmp	r3, r1
  401e14:	d3fa      	bcc.n	401e0c <UDP_Handler+0x4f8>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  401e16:	4640      	mov	r0, r8
  401e18:	4b95      	ldr	r3, [pc, #596]	; (402070 <UDP_Handler+0x75c>)
  401e1a:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  401e1c:	b917      	cbnz	r7, 401e24 <UDP_Handler+0x510>
  401e1e:	45b2      	cmp	sl, r6
  401e20:	f240 82a0 	bls.w	402364 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
  401e24:	6b23      	ldr	r3, [r4, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  401e26:	f013 0f20 	tst.w	r3, #32
  401e2a:	f040 829b 	bne.w	402364 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  401e2e:	4b91      	ldr	r3, [pc, #580]	; (402074 <UDP_Handler+0x760>)
  401e30:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401e32:	f8d9 300c 	ldr.w	r3, [r9, #12]
  401e36:	f8c9 3008 	str.w	r3, [r9, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401e3a:	4648      	mov	r0, r9
  401e3c:	2100      	movs	r1, #0
  401e3e:	4642      	mov	r2, r8
  401e40:	4b8d      	ldr	r3, [pc, #564]	; (402078 <UDP_Handler+0x764>)
  401e42:	4798      	blx	r3
  401e44:	e28e      	b.n	402364 <UDP_Handler+0xa50>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  401e46:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401e48:	f010 0f01 	tst.w	r0, #1
  401e4c:	f000 8173 	beq.w	402136 <UDP_Handler+0x822>

			ptr_job->bank--;
  401e50:	7c63      	ldrb	r3, [r4, #17]
  401e52:	f3c3 0281 	ubfx	r2, r3, #2, #2
  401e56:	3203      	adds	r2, #3
  401e58:	f002 0203 	and.w	r2, r2, #3
  401e5c:	f362 0383 	bfi	r3, r2, #2, #2
  401e60:	7463      	strb	r3, [r4, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  401e62:	f013 0f20 	tst.w	r3, #32
  401e66:	d074      	beq.n	401f52 <UDP_Handler+0x63e>
				if (ptr_job->bank) {
  401e68:	2a00      	cmp	r2, #0
  401e6a:	d036      	beq.n	401eda <UDP_Handler+0x5c6>
  401e6c:	00ba      	lsls	r2, r7, #2
  401e6e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401e72:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
					// Send remaining
					udd_set_transmit_ready(ep);
  401e76:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e78:	9318      	str	r3, [sp, #96]	; 0x60
  401e7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401e7c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e80:	9318      	str	r3, [sp, #96]	; 0x60
  401e82:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401e84:	f043 0310 	orr.w	r3, r3, #16
  401e88:	9318      	str	r3, [sp, #96]	; 0x60
  401e8a:	9b18      	ldr	r3, [sp, #96]	; 0x60
  401e8c:	6313      	str	r3, [r2, #48]	; 0x30
  401e8e:	2300      	movs	r3, #0
  401e90:	9319      	str	r3, [sp, #100]	; 0x64
  401e92:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401e94:	2b13      	cmp	r3, #19
  401e96:	d806      	bhi.n	401ea6 <UDP_Handler+0x592>
  401e98:	bf00      	nop
  401e9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401e9c:	3301      	adds	r3, #1
  401e9e:	9319      	str	r3, [sp, #100]	; 0x64
  401ea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  401ea2:	2b13      	cmp	r3, #19
  401ea4:	d9f8      	bls.n	401e98 <UDP_Handler+0x584>
					udd_ack_in_sent(ep);
  401ea6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ea8:	931a      	str	r3, [sp, #104]	; 0x68
  401eaa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401eac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401eb0:	931a      	str	r3, [sp, #104]	; 0x68
  401eb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401eb4:	f023 0301 	bic.w	r3, r3, #1
  401eb8:	931a      	str	r3, [sp, #104]	; 0x68
  401eba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  401ebc:	6313      	str	r3, [r2, #48]	; 0x30
  401ebe:	2300      	movs	r3, #0
  401ec0:	931b      	str	r3, [sp, #108]	; 0x6c
  401ec2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401ec4:	2b13      	cmp	r3, #19
  401ec6:	f200 824d 	bhi.w	402364 <UDP_Handler+0xa50>
  401eca:	bf00      	nop
  401ecc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401ece:	3301      	adds	r3, #1
  401ed0:	931b      	str	r3, [sp, #108]	; 0x6c
  401ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  401ed4:	2b13      	cmp	r3, #19
  401ed6:	d9f8      	bls.n	401eca <UDP_Handler+0x5b6>
  401ed8:	e244      	b.n	402364 <UDP_Handler+0xa50>
  401eda:	00ba      	lsls	r2, r7, #2
  401edc:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401ee0:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  401ee4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ee6:	931c      	str	r3, [sp, #112]	; 0x70
  401ee8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401eea:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401eee:	931c      	str	r3, [sp, #112]	; 0x70
  401ef0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401ef2:	f023 0301 	bic.w	r3, r3, #1
  401ef6:	931c      	str	r3, [sp, #112]	; 0x70
  401ef8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  401efa:	6313      	str	r3, [r2, #48]	; 0x30
  401efc:	2300      	movs	r3, #0
  401efe:	931d      	str	r3, [sp, #116]	; 0x74
  401f00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401f02:	2b13      	cmp	r3, #19
  401f04:	d806      	bhi.n	401f14 <UDP_Handler+0x600>
  401f06:	bf00      	nop
  401f08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401f0a:	3301      	adds	r3, #1
  401f0c:	931d      	str	r3, [sp, #116]	; 0x74
  401f0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  401f10:	2b13      	cmp	r3, #19
  401f12:	d9f8      	bls.n	401f06 <UDP_Handler+0x5f2>
					// Enable stall
					udd_enable_stall_handshake(ep);
  401f14:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f16:	931e      	str	r3, [sp, #120]	; 0x78
  401f18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401f1a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f1e:	931e      	str	r3, [sp, #120]	; 0x78
  401f20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401f22:	f043 0320 	orr.w	r3, r3, #32
  401f26:	931e      	str	r3, [sp, #120]	; 0x78
  401f28:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  401f2a:	6313      	str	r3, [r2, #48]	; 0x30
  401f2c:	2300      	movs	r3, #0
  401f2e:	931f      	str	r3, [sp, #124]	; 0x7c
  401f30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401f32:	2b13      	cmp	r3, #19
  401f34:	d806      	bhi.n	401f44 <UDP_Handler+0x630>
  401f36:	bf00      	nop
  401f38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401f3a:	3301      	adds	r3, #1
  401f3c:	931f      	str	r3, [sp, #124]	; 0x7c
  401f3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  401f40:	2b13      	cmp	r3, #19
  401f42:	d9f8      	bls.n	401f36 <UDP_Handler+0x622>
					// Halt executed
					ptr_job->b_stall_requested = false;
  401f44:	f899 3011 	ldrb.w	r3, [r9, #17]
  401f48:	f36f 1345 	bfc	r3, #5, #1
  401f4c:	f889 3011 	strb.w	r3, [r9, #17]
  401f50:	e208      	b.n	402364 <UDP_Handler+0xa50>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  401f52:	7c63      	ldrb	r3, [r4, #17]
  401f54:	09db      	lsrs	r3, r3, #7
  401f56:	d00a      	beq.n	401f6e <UDP_Handler+0x65a>
				ptr_job->b_buf_end = false;
  401f58:	7c63      	ldrb	r3, [r4, #17]
  401f5a:	f36f 13c7 	bfc	r3, #7, #1
  401f5e:	7463      	strb	r3, [r4, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  401f60:	68e3      	ldr	r3, [r4, #12]
  401f62:	60a3      	str	r3, [r4, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  401f64:	4620      	mov	r0, r4
  401f66:	2100      	movs	r1, #0
  401f68:	4642      	mov	r2, r8
  401f6a:	4b43      	ldr	r3, [pc, #268]	; (402078 <UDP_Handler+0x764>)
  401f6c:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  401f6e:	f8d9 200c 	ldr.w	r2, [r9, #12]
  401f72:	f8d9 3008 	ldr.w	r3, [r9, #8]
  401f76:	429a      	cmp	r2, r3
  401f78:	d334      	bcc.n	401fe4 <UDP_Handler+0x6d0>
					!ptr_job->b_shortpacket &&
  401f7a:	f899 3011 	ldrb.w	r3, [r9, #17]
  401f7e:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  401f82:	d12f      	bne.n	401fe4 <UDP_Handler+0x6d0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401f84:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401f88:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401f8a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401f8e:	2100      	movs	r1, #0
  401f90:	4a3a      	ldr	r2, [pc, #232]	; (40207c <UDP_Handler+0x768>)
  401f92:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  401f94:	4a37      	ldr	r2, [pc, #220]	; (402074 <UDP_Handler+0x760>)
  401f96:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401f98:	b92b      	cbnz	r3, 401fa6 <UDP_Handler+0x692>
		cpu_irq_enable();
  401f9a:	2201      	movs	r2, #1
  401f9c:	4b37      	ldr	r3, [pc, #220]	; (40207c <UDP_Handler+0x768>)
  401f9e:	701a      	strb	r2, [r3, #0]
  401fa0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401fa4:	b662      	cpsie	i
  401fa6:	00bb      	lsls	r3, r7, #2
  401fa8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401fac:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  401fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fb2:	9220      	str	r2, [sp, #128]	; 0x80
  401fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401fb6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401fba:	9220      	str	r2, [sp, #128]	; 0x80
  401fbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401fbe:	f022 0201 	bic.w	r2, r2, #1
  401fc2:	9220      	str	r2, [sp, #128]	; 0x80
  401fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
  401fc6:	631a      	str	r2, [r3, #48]	; 0x30
  401fc8:	2300      	movs	r3, #0
  401fca:	9321      	str	r3, [sp, #132]	; 0x84
  401fcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401fce:	2b13      	cmp	r3, #19
  401fd0:	f200 81c8 	bhi.w	402364 <UDP_Handler+0xa50>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401fd4:	bf00      	nop
  401fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401fd8:	3301      	adds	r3, #1
  401fda:	9321      	str	r3, [sp, #132]	; 0x84
  401fdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
  401fde:	2b13      	cmp	r3, #19
  401fe0:	d9f8      	bls.n	401fd4 <UDP_Handler+0x6c0>
  401fe2:	e1bf      	b.n	402364 <UDP_Handler+0xa50>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  401fe4:	f1b8 0f00 	cmp.w	r8, #0
  401fe8:	f000 8082 	beq.w	4020f0 <UDP_Handler+0x7dc>
  401fec:	f1b8 0f03 	cmp.w	r8, #3
  401ff0:	d07e      	beq.n	4020f0 <UDP_Handler+0x7dc>
					&& ptr_job->bank > 0) {
  401ff2:	f899 3011 	ldrb.w	r3, [r9, #17]
  401ff6:	f013 0f0c 	tst.w	r3, #12
  401ffa:	d043      	beq.n	402084 <UDP_Handler+0x770>
  401ffc:	00ba      	lsls	r2, r7, #2
  401ffe:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402002:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  402006:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402008:	9322      	str	r3, [sp, #136]	; 0x88
  40200a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40200c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402010:	9322      	str	r3, [sp, #136]	; 0x88
  402012:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402014:	f043 0310 	orr.w	r3, r3, #16
  402018:	9322      	str	r3, [sp, #136]	; 0x88
  40201a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40201c:	6313      	str	r3, [r2, #48]	; 0x30
  40201e:	2300      	movs	r3, #0
  402020:	9323      	str	r3, [sp, #140]	; 0x8c
  402022:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402024:	2b13      	cmp	r3, #19
  402026:	d806      	bhi.n	402036 <UDP_Handler+0x722>
  402028:	bf00      	nop
  40202a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40202c:	3301      	adds	r3, #1
  40202e:	9323      	str	r3, [sp, #140]	; 0x8c
  402030:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402032:	2b13      	cmp	r3, #19
  402034:	d9f8      	bls.n	402028 <UDP_Handler+0x714>
				udd_ack_in_sent(ep);
  402036:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402038:	9324      	str	r3, [sp, #144]	; 0x90
  40203a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40203c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402040:	9324      	str	r3, [sp, #144]	; 0x90
  402042:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402044:	f023 0301 	bic.w	r3, r3, #1
  402048:	9324      	str	r3, [sp, #144]	; 0x90
  40204a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40204c:	6313      	str	r3, [r2, #48]	; 0x30
  40204e:	2300      	movs	r3, #0
  402050:	9325      	str	r3, [sp, #148]	; 0x94
  402052:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402054:	2b13      	cmp	r3, #19
  402056:	d806      	bhi.n	402066 <UDP_Handler+0x752>
  402058:	bf00      	nop
  40205a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40205c:	3301      	adds	r3, #1
  40205e:	9325      	str	r3, [sp, #148]	; 0x94
  402060:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402062:	2b13      	cmp	r3, #19
  402064:	d9f8      	bls.n	402058 <UDP_Handler+0x744>
				udd_ep_in_sent(ep, false);
  402066:	4640      	mov	r0, r8
  402068:	2100      	movs	r1, #0
  40206a:	4b05      	ldr	r3, [pc, #20]	; (402080 <UDP_Handler+0x76c>)
  40206c:	4798      	blx	r3
  40206e:	e179      	b.n	402364 <UDP_Handler+0xa50>
  402070:	004016e9 	.word	0x004016e9
  402074:	40034000 	.word	0x40034000
  402078:	004016a9 	.word	0x004016a9
  40207c:	200000a4 	.word	0x200000a4
  402080:	004017b5 	.word	0x004017b5
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  402084:	4640      	mov	r0, r8
  402086:	2101      	movs	r1, #1
  402088:	4b67      	ldr	r3, [pc, #412]	; (402228 <UDP_Handler+0x914>)
  40208a:	4798      	blx	r3
  40208c:	b970      	cbnz	r0, 4020ac <UDP_Handler+0x798>
					ptr_job->b_buf_end = false;
  40208e:	f899 3011 	ldrb.w	r3, [r9, #17]
  402092:	f36f 13c7 	bfc	r3, #7, #1
  402096:	f889 3011 	strb.w	r3, [r9, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40209a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40209e:	f8c9 3008 	str.w	r3, [r9, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4020a2:	4648      	mov	r0, r9
  4020a4:	2100      	movs	r1, #0
  4020a6:	4642      	mov	r2, r8
  4020a8:	4b60      	ldr	r3, [pc, #384]	; (40222c <UDP_Handler+0x918>)
  4020aa:	4798      	blx	r3
  4020ac:	00bb      	lsls	r3, r7, #2
  4020ae:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4020b2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				}
				udd_ack_in_sent(ep);
  4020b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020b8:	9226      	str	r2, [sp, #152]	; 0x98
  4020ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4020bc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020c0:	9226      	str	r2, [sp, #152]	; 0x98
  4020c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4020c4:	f022 0201 	bic.w	r2, r2, #1
  4020c8:	9226      	str	r2, [sp, #152]	; 0x98
  4020ca:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4020cc:	631a      	str	r2, [r3, #48]	; 0x30
  4020ce:	2300      	movs	r3, #0
  4020d0:	9327      	str	r3, [sp, #156]	; 0x9c
  4020d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4020d4:	2b13      	cmp	r3, #19
  4020d6:	d806      	bhi.n	4020e6 <UDP_Handler+0x7d2>
  4020d8:	bf00      	nop
  4020da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4020dc:	3301      	adds	r3, #1
  4020de:	9327      	str	r3, [sp, #156]	; 0x9c
  4020e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4020e2:	2b13      	cmp	r3, #19
  4020e4:	d9f8      	bls.n	4020d8 <UDP_Handler+0x7c4>
				udd_ep_in_sent(ep, false);
  4020e6:	4640      	mov	r0, r8
  4020e8:	2100      	movs	r1, #0
  4020ea:	4b4f      	ldr	r3, [pc, #316]	; (402228 <UDP_Handler+0x914>)
  4020ec:	4798      	blx	r3
  4020ee:	e139      	b.n	402364 <UDP_Handler+0xa50>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  4020f0:	4640      	mov	r0, r8
  4020f2:	2101      	movs	r1, #1
  4020f4:	4b4c      	ldr	r3, [pc, #304]	; (402228 <UDP_Handler+0x914>)
  4020f6:	4798      	blx	r3
  4020f8:	00bb      	lsls	r3, r7, #2
  4020fa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4020fe:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  402102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402104:	9228      	str	r2, [sp, #160]	; 0xa0
  402106:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402108:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40210c:	9228      	str	r2, [sp, #160]	; 0xa0
  40210e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402110:	f022 0201 	bic.w	r2, r2, #1
  402114:	9228      	str	r2, [sp, #160]	; 0xa0
  402116:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402118:	631a      	str	r2, [r3, #48]	; 0x30
  40211a:	2300      	movs	r3, #0
  40211c:	9329      	str	r3, [sp, #164]	; 0xa4
  40211e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402120:	2b13      	cmp	r3, #19
  402122:	f200 811f 	bhi.w	402364 <UDP_Handler+0xa50>
  402126:	bf00      	nop
  402128:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40212a:	3301      	adds	r3, #1
  40212c:	9329      	str	r3, [sp, #164]	; 0xa4
  40212e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402130:	2b13      	cmp	r3, #19
  402132:	d9f8      	bls.n	402126 <UDP_Handler+0x812>
  402134:	e116      	b.n	402364 <UDP_Handler+0xa50>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  402136:	6b09      	ldr	r1, [r1, #48]	; 0x30
  402138:	f011 0f08 	tst.w	r1, #8
  40213c:	d025      	beq.n	40218a <UDP_Handler+0x876>
  40213e:	009a      	lsls	r2, r3, #2
  402140:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402144:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
			udd_ack_stall(ep);
  402148:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40214a:	932a      	str	r3, [sp, #168]	; 0xa8
  40214c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  40214e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402152:	932a      	str	r3, [sp, #168]	; 0xa8
  402154:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  402156:	f023 0308 	bic.w	r3, r3, #8
  40215a:	932a      	str	r3, [sp, #168]	; 0xa8
  40215c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  40215e:	6313      	str	r3, [r2, #48]	; 0x30
  402160:	2300      	movs	r3, #0
  402162:	932b      	str	r3, [sp, #172]	; 0xac
  402164:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  402166:	2b13      	cmp	r3, #19
  402168:	d806      	bhi.n	402178 <UDP_Handler+0x864>
  40216a:	bf00      	nop
  40216c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  40216e:	3301      	adds	r3, #1
  402170:	932b      	str	r3, [sp, #172]	; 0xac
  402172:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  402174:	2b13      	cmp	r3, #19
  402176:	d9f8      	bls.n	40216a <UDP_Handler+0x856>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  402178:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40217a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40217e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402182:	f000 80ef 	beq.w	402364 <UDP_Handler+0xa50>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  402186:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402188:	e0ec      	b.n	402364 <UDP_Handler+0xa50>
  40218a:	3301      	adds	r3, #1
  40218c:	3414      	adds	r4, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40218e:	2b04      	cmp	r3, #4
  402190:	f47f ae01 	bne.w	401d96 <UDP_Handler+0x482>
  402194:	e0db      	b.n	40234e <UDP_Handler+0xa3a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402196:	4b26      	ldr	r3, [pc, #152]	; (402230 <UDP_Handler+0x91c>)
  402198:	69db      	ldr	r3, [r3, #28]
  40219a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40219e:	d113      	bne.n	4021c8 <UDP_Handler+0x8b4>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4021a0:	4b23      	ldr	r3, [pc, #140]	; (402230 <UDP_Handler+0x91c>)
  4021a2:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4021a4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4021a8:	d004      	beq.n	4021b4 <UDP_Handler+0x8a0>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4021aa:	4b21      	ldr	r3, [pc, #132]	; (402230 <UDP_Handler+0x91c>)
  4021ac:	69db      	ldr	r3, [r3, #28]
  4021ae:	f413 7f00 	tst.w	r3, #512	; 0x200
  4021b2:	d109      	bne.n	4021c8 <UDP_Handler+0x8b4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4021b4:	4b1e      	ldr	r3, [pc, #120]	; (402230 <UDP_Handler+0x91c>)
  4021b6:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4021b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4021bc:	d014      	beq.n	4021e8 <UDP_Handler+0x8d4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4021be:	4b1c      	ldr	r3, [pc, #112]	; (402230 <UDP_Handler+0x91c>)
  4021c0:	69db      	ldr	r3, [r3, #28]
  4021c2:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4021c6:	d00f      	beq.n	4021e8 <UDP_Handler+0x8d4>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  4021c8:	4c19      	ldr	r4, [pc, #100]	; (402230 <UDP_Handler+0x91c>)
  4021ca:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  4021ce:	6223      	str	r3, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  4021d0:	6163      	str	r3, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  4021d2:	2001      	movs	r0, #1
  4021d4:	4b17      	ldr	r3, [pc, #92]	; (402234 <UDP_Handler+0x920>)
  4021d6:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  4021d8:	f44f 7380 	mov.w	r3, #256	; 0x100
  4021dc:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  4021de:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  4021e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4021e4:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  4021e6:	e0bd      	b.n	402364 <UDP_Handler+0xa50>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  4021e8:	4b11      	ldr	r3, [pc, #68]	; (402230 <UDP_Handler+0x91c>)
  4021ea:	699b      	ldr	r3, [r3, #24]
  4021ec:	f413 7f80 	tst.w	r3, #256	; 0x100
  4021f0:	d024      	beq.n	40223c <UDP_Handler+0x928>
  4021f2:	4b0f      	ldr	r3, [pc, #60]	; (402230 <UDP_Handler+0x91c>)
  4021f4:	69db      	ldr	r3, [r3, #28]
  4021f6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4021fa:	d01f      	beq.n	40223c <UDP_Handler+0x928>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  4021fc:	4b0c      	ldr	r3, [pc, #48]	; (402230 <UDP_Handler+0x91c>)
  4021fe:	f44f 7280 	mov.w	r2, #256	; 0x100
  402202:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  402204:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  402206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40220a:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  40220c:	f44f 7200 	mov.w	r2, #512	; 0x200
  402210:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  402212:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402216:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  402218:	2022      	movs	r0, #34	; 0x22
  40221a:	4b07      	ldr	r3, [pc, #28]	; (402238 <UDP_Handler+0x924>)
  40221c:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  40221e:	2000      	movs	r0, #0
  402220:	4b04      	ldr	r3, [pc, #16]	; (402234 <UDP_Handler+0x920>)
  402222:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  402224:	e09e      	b.n	402364 <UDP_Handler+0xa50>
  402226:	bf00      	nop
  402228:	004017b5 	.word	0x004017b5
  40222c:	004016a9 	.word	0x004016a9
  402230:	40034000 	.word	0x40034000
  402234:	0040137d 	.word	0x0040137d
  402238:	004012d9 	.word	0x004012d9
	}
	if (Is_udd_reset()) {
  40223c:	4b4b      	ldr	r3, [pc, #300]	; (40236c <UDP_Handler+0xa58>)
  40223e:	69db      	ldr	r3, [r3, #28]
  402240:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  402244:	f000 808e 	beq.w	402364 <UDP_Handler+0xa50>
		// USB bus reset detection
		udd_ack_reset();
  402248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40224c:	4b47      	ldr	r3, [pc, #284]	; (40236c <UDP_Handler+0xa58>)
  40224e:	621a      	str	r2, [r3, #32]
  402250:	4665      	mov	r5, ip
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402252:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  402254:	2701      	movs	r7, #1
  402256:	4e46      	ldr	r6, [pc, #280]	; (402370 <UDP_Handler+0xa5c>)
  402258:	3401      	adds	r4, #1
  40225a:	b2e4      	uxtb	r4, r4
  40225c:	4628      	mov	r0, r5
  40225e:	4639      	mov	r1, r7
  402260:	4622      	mov	r2, r4
  402262:	47b0      	blx	r6
  402264:	3514      	adds	r5, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402266:	2c03      	cmp	r4, #3
  402268:	d1f6      	bne.n	402258 <UDP_Handler+0x944>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  40226a:	4b42      	ldr	r3, [pc, #264]	; (402374 <UDP_Handler+0xa60>)
  40226c:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  40226e:	4b3f      	ldr	r3, [pc, #252]	; (40236c <UDP_Handler+0xa58>)
  402270:	685a      	ldr	r2, [r3, #4]
  402272:	f022 0201 	bic.w	r2, r2, #1
  402276:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  402278:	685a      	ldr	r2, [r3, #4]
  40227a:	f022 0202 	bic.w	r2, r2, #2
  40227e:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  402280:	689a      	ldr	r2, [r3, #8]
  402282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402286:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  402288:	689a      	ldr	r2, [r3, #8]
  40228a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40228e:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  402290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402292:	922c      	str	r2, [sp, #176]	; 0xb0
  402294:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402296:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40229a:	922c      	str	r2, [sp, #176]	; 0xb0
  40229c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40229e:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  4022a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4022a6:	922c      	str	r2, [sp, #176]	; 0xb0
  4022a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4022aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4022ae:	922c      	str	r2, [sp, #176]	; 0xb0
  4022b0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4022b2:	631a      	str	r2, [r3, #48]	; 0x30
  4022b4:	2300      	movs	r3, #0
  4022b6:	932d      	str	r3, [sp, #180]	; 0xb4
  4022b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4022ba:	2b13      	cmp	r3, #19
  4022bc:	d806      	bhi.n	4022cc <UDP_Handler+0x9b8>
  4022be:	bf00      	nop
  4022c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4022c2:	3301      	adds	r3, #1
  4022c4:	932d      	str	r3, [sp, #180]	; 0xb4
  4022c6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4022c8:	2b13      	cmp	r3, #19
  4022ca:	d9f8      	bls.n	4022be <UDP_Handler+0x9aa>
	udd_enable_endpoint(0);
  4022cc:	4b27      	ldr	r3, [pc, #156]	; (40236c <UDP_Handler+0xa58>)
  4022ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022d0:	922e      	str	r2, [sp, #184]	; 0xb8
  4022d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  4022d4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022d8:	922e      	str	r2, [sp, #184]	; 0xb8
  4022da:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  4022dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4022e0:	922e      	str	r2, [sp, #184]	; 0xb8
  4022e2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  4022e4:	631a      	str	r2, [r3, #48]	; 0x30
  4022e6:	2300      	movs	r3, #0
  4022e8:	932f      	str	r3, [sp, #188]	; 0xbc
  4022ea:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4022ec:	2b13      	cmp	r3, #19
  4022ee:	d806      	bhi.n	4022fe <UDP_Handler+0x9ea>
  4022f0:	bf00      	nop
  4022f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4022f4:	3301      	adds	r3, #1
  4022f6:	932f      	str	r3, [sp, #188]	; 0xbc
  4022f8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4022fa:	2b13      	cmp	r3, #19
  4022fc:	d9f8      	bls.n	4022f0 <UDP_Handler+0x9dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4022fe:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402302:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402304:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402308:	2100      	movs	r1, #0
  40230a:	4a1b      	ldr	r2, [pc, #108]	; (402378 <UDP_Handler+0xa64>)
  40230c:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  40230e:	2101      	movs	r1, #1
  402310:	4a16      	ldr	r2, [pc, #88]	; (40236c <UDP_Handler+0xa58>)
  402312:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402314:	b923      	cbnz	r3, 402320 <UDP_Handler+0xa0c>
		cpu_irq_enable();
  402316:	4b18      	ldr	r3, [pc, #96]	; (402378 <UDP_Handler+0xa64>)
  402318:	7019      	strb	r1, [r3, #0]
  40231a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40231e:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  402320:	4b16      	ldr	r3, [pc, #88]	; (40237c <UDP_Handler+0xa68>)
  402322:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  402324:	4b11      	ldr	r3, [pc, #68]	; (40236c <UDP_Handler+0xa58>)
  402326:	f44f 7280 	mov.w	r2, #256	; 0x100
  40232a:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  40232c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402330:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  402332:	e017      	b.n	402364 <UDP_Handler+0xa50>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  402334:	4433      	add	r3, r6
  402336:	f8c9 300c 	str.w	r3, [r9, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  40233a:	4631      	mov	r1, r6
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  40233c:	2700      	movs	r7, #0
  40233e:	e000      	b.n	402342 <UDP_Handler+0xa2e>

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
  402340:	2701      	movs	r7, #1
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  402342:	2300      	movs	r3, #0
  402344:	e562      	b.n	401e0c <UDP_Handler+0x4f8>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402346:	4640      	mov	r0, r8
  402348:	4b0d      	ldr	r3, [pc, #52]	; (402380 <UDP_Handler+0xa6c>)
  40234a:	4798      	blx	r3
  40234c:	e567      	b.n	401e1e <UDP_Handler+0x50a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40234e:	4b07      	ldr	r3, [pc, #28]	; (40236c <UDP_Handler+0xa58>)
  402350:	699b      	ldr	r3, [r3, #24]
  402352:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402356:	f47f af1e 	bne.w	402196 <UDP_Handler+0x882>
  40235a:	e721      	b.n	4021a0 <UDP_Handler+0x88c>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  40235c:	4640      	mov	r0, r8
  40235e:	4b08      	ldr	r3, [pc, #32]	; (402380 <UDP_Handler+0xa6c>)
  402360:	4798      	blx	r3
  402362:	e55f      	b.n	401e24 <UDP_Handler+0x510>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  402364:	b030      	add	sp, #192	; 0xc0
  402366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40236a:	bf00      	nop
  40236c:	40034000 	.word	0x40034000
  402370:	004016a9 	.word	0x004016a9
  402374:	00400a95 	.word	0x00400a95
  402378:	200000a4 	.word	0x200000a4
  40237c:	004013f1 	.word	0x004013f1
  402380:	004016e9 	.word	0x004016e9

00402384 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
	return false;
}
  402384:	2000      	movs	r0, #0
  402386:	4770      	bx	lr

00402388 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  402388:	4b0c      	ldr	r3, [pc, #48]	; (4023bc <udd_set_address+0x34>)
  40238a:	685a      	ldr	r2, [r3, #4]
  40238c:	f022 0201 	bic.w	r2, r2, #1
  402390:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402392:	689a      	ldr	r2, [r3, #8]
  402394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402398:	609a      	str	r2, [r3, #8]
	if (address) {
  40239a:	b170      	cbz	r0, 4023ba <udd_set_address+0x32>
		udd_configure_address(address);
  40239c:	6899      	ldr	r1, [r3, #8]
  40239e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  4023a2:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
  4023a6:	430a      	orrs	r2, r1
  4023a8:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  4023aa:	689a      	ldr	r2, [r3, #8]
  4023ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4023b0:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  4023b2:	685a      	ldr	r2, [r3, #4]
  4023b4:	f042 0201 	orr.w	r2, r2, #1
  4023b8:	605a      	str	r2, [r3, #4]
  4023ba:	4770      	bx	lr
  4023bc:	40034000 	.word	0x40034000

004023c0 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  4023c0:	4b05      	ldr	r3, [pc, #20]	; (4023d8 <udd_getaddress+0x18>)
  4023c2:	685b      	ldr	r3, [r3, #4]
  4023c4:	f013 0f01 	tst.w	r3, #1
  4023c8:	d004      	beq.n	4023d4 <udd_getaddress+0x14>
		return udd_get_configured_address();
  4023ca:	4b03      	ldr	r3, [pc, #12]	; (4023d8 <udd_getaddress+0x18>)
  4023cc:	6898      	ldr	r0, [r3, #8]
  4023ce:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4023d2:	4770      	bx	lr
	return 0;
  4023d4:	2000      	movs	r0, #0
}
  4023d6:	4770      	bx	lr
  4023d8:	40034000 	.word	0x40034000

004023dc <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
  4023dc:	4b02      	ldr	r3, [pc, #8]	; (4023e8 <udd_get_frame_number+0xc>)
  4023de:	6818      	ldr	r0, [r3, #0]
}
  4023e0:	f3c0 000a 	ubfx	r0, r0, #0, #11
  4023e4:	4770      	bx	lr
  4023e6:	bf00      	nop
  4023e8:	40034000 	.word	0x40034000

004023ec <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
  4023ec:	2000      	movs	r0, #0
  4023ee:	4770      	bx	lr

004023f0 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  4023f0:	4b01      	ldr	r3, [pc, #4]	; (4023f8 <udd_set_setup_payload+0x8>)
  4023f2:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  4023f4:	8199      	strh	r1, [r3, #12]
  4023f6:	4770      	bx	lr
  4023f8:	20000744 	.word	0x20000744

004023fc <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  4023fc:	b470      	push	{r4, r5, r6}
  4023fe:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  402400:	f000 030f 	and.w	r3, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  402404:	2b03      	cmp	r3, #3
  402406:	d866      	bhi.n	4024d6 <udd_ep_alloc+0xda>
  402408:	009c      	lsls	r4, r3, #2
  40240a:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  40240e:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  402412:	6b25      	ldr	r5, [r4, #48]	; 0x30
  402414:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402418:	d15f      	bne.n	4024da <udd_ep_alloc+0xde>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40241a:	f001 0503 	and.w	r5, r1, #3
  40241e:	2d01      	cmp	r5, #1
  402420:	d103      	bne.n	40242a <udd_ep_alloc+0x2e>
  402422:	2b00      	cmp	r3, #0
  402424:	d05b      	beq.n	4024de <udd_ep_alloc+0xe2>
  402426:	2b03      	cmp	r3, #3
  402428:	d05b      	beq.n	4024e2 <udd_ep_alloc+0xe6>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  40242a:	1f1d      	subs	r5, r3, #4
  40242c:	b2ed      	uxtb	r5, r5
  40242e:	2d01      	cmp	r5, #1
  402430:	bf8c      	ite	hi
  402432:	2540      	movhi	r5, #64	; 0x40
  402434:	f44f 7500 	movls.w	r5, #512	; 0x200
  402438:	4295      	cmp	r5, r2
  40243a:	db54      	blt.n	4024e6 <udd_ep_alloc+0xea>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  40243c:	1e5d      	subs	r5, r3, #1
  40243e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402442:	4e2d      	ldr	r6, [pc, #180]	; (4024f8 <udd_ep_alloc+0xfc>)
  402444:	eb06 0585 	add.w	r5, r6, r5, lsl #2

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  402448:	8a2e      	ldrh	r6, [r5, #16]
  40244a:	f362 0609 	bfi	r6, r2, #0, #10
  40244e:	822e      	strh	r6, [r5, #16]
	ptr_job->b_buf_end = false;
  402450:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  402452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402456:	f36f 1245 	bfc	r2, #5, #1
  40245a:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  40245c:	09c0      	lsrs	r0, r0, #7
  40245e:	d003      	beq.n	402468 <udd_ep_alloc+0x6c>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  402460:	b2d2      	uxtb	r2, r2
  402462:	f36f 0283 	bfc	r2, #2, #2
  402466:	746a      	strb	r2, [r5, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  402468:	4a24      	ldr	r2, [pc, #144]	; (4024fc <udd_ep_alloc+0x100>)
  40246a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  40246c:	2601      	movs	r6, #1
  40246e:	fa06 f303 	lsl.w	r3, r6, r3
  402472:	431d      	orrs	r5, r3
  402474:	6295      	str	r5, [r2, #40]	; 0x28
  402476:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402478:	ea25 0303 	bic.w	r3, r5, r3
  40247c:	6293      	str	r3, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  40247e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402480:	9300      	str	r3, [sp, #0]
  402482:	9b00      	ldr	r3, [sp, #0]
  402484:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402488:	9300      	str	r3, [sp, #0]
  40248a:	9b00      	ldr	r3, [sp, #0]
  40248c:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  402490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402494:	9300      	str	r3, [sp, #0]
  402496:	b138      	cbz	r0, 4024a8 <udd_ep_alloc+0xac>
  402498:	f041 0204 	orr.w	r2, r1, #4
  40249c:	0212      	lsls	r2, r2, #8
  40249e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4024a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4024a6:	e004      	b.n	4024b2 <udd_ep_alloc+0xb6>
  4024a8:	020a      	lsls	r2, r1, #8
  4024aa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4024ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4024b2:	9b00      	ldr	r3, [sp, #0]
  4024b4:	4313      	orrs	r3, r2
  4024b6:	9300      	str	r3, [sp, #0]
  4024b8:	9b00      	ldr	r3, [sp, #0]
  4024ba:	6323      	str	r3, [r4, #48]	; 0x30
  4024bc:	2300      	movs	r3, #0
  4024be:	9301      	str	r3, [sp, #4]
  4024c0:	9b01      	ldr	r3, [sp, #4]
  4024c2:	2b13      	cmp	r3, #19
  4024c4:	d811      	bhi.n	4024ea <udd_ep_alloc+0xee>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4024c6:	bf00      	nop
  4024c8:	9b01      	ldr	r3, [sp, #4]
  4024ca:	3301      	adds	r3, #1
  4024cc:	9301      	str	r3, [sp, #4]
  4024ce:	9b01      	ldr	r3, [sp, #4]
  4024d0:	2b13      	cmp	r3, #19
  4024d2:	d9f8      	bls.n	4024c6 <udd_ep_alloc+0xca>
  4024d4:	e00b      	b.n	4024ee <udd_ep_alloc+0xf2>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  4024d6:	2000      	movs	r0, #0
  4024d8:	e00a      	b.n	4024f0 <udd_ep_alloc+0xf4>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  4024da:	2000      	movs	r0, #0
  4024dc:	e008      	b.n	4024f0 <udd_ep_alloc+0xf4>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  4024de:	2000      	movs	r0, #0
  4024e0:	e006      	b.n	4024f0 <udd_ep_alloc+0xf4>
  4024e2:	2000      	movs	r0, #0
  4024e4:	e004      	b.n	4024f0 <udd_ep_alloc+0xf4>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  4024e6:	2000      	movs	r0, #0
  4024e8:	e002      	b.n	4024f0 <udd_ep_alloc+0xf4>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  4024ea:	2001      	movs	r0, #1
  4024ec:	e000      	b.n	4024f0 <udd_ep_alloc+0xf4>
  4024ee:	2001      	movs	r0, #1
}
  4024f0:	b003      	add	sp, #12
  4024f2:	bc70      	pop	{r4, r5, r6}
  4024f4:	4770      	bx	lr
  4024f6:	bf00      	nop
  4024f8:	200006d0 	.word	0x200006d0
  4024fc:	40034000 	.word	0x40034000

00402500 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  402500:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402502:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402506:	2a03      	cmp	r2, #3
  402508:	d811      	bhi.n	40252e <udd_ep_free+0x2e>
  40250a:	0093      	lsls	r3, r2, #2
  40250c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402510:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		return;
	}
	udd_disable_endpoint(ep_index);
  402514:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402516:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  40251a:	6319      	str	r1, [r3, #48]	; 0x30
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  40251c:	1e50      	subs	r0, r2, #1
  40251e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402522:	4b03      	ldr	r3, [pc, #12]	; (402530 <udd_ep_free+0x30>)
  402524:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402528:	2101      	movs	r1, #1
  40252a:	4b02      	ldr	r3, [pc, #8]	; (402534 <udd_ep_free+0x34>)
  40252c:	4798      	blx	r3
  40252e:	bd08      	pop	{r3, pc}
  402530:	200006d0 	.word	0x200006d0
  402534:	004016a9 	.word	0x004016a9

00402538 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402538:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  40253c:	2803      	cmp	r0, #3
  40253e:	d815      	bhi.n	40256c <udd_ep_is_halted+0x34>


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402540:	1e43      	subs	r3, r0, #1
  402542:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402546:	4a0a      	ldr	r2, [pc, #40]	; (402570 <udd_ep_is_halted+0x38>)
  402548:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40254c:	7c5b      	ldrb	r3, [r3, #17]
  40254e:	f013 0f20 	tst.w	r3, #32
  402552:	d109      	bne.n	402568 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402554:	300c      	adds	r0, #12
  402556:	4b07      	ldr	r3, [pc, #28]	; (402574 <udd_ep_is_halted+0x3c>)
  402558:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  40255c:	f013 0f28 	tst.w	r3, #40	; 0x28
  402560:	bf0c      	ite	eq
  402562:	2000      	moveq	r0, #0
  402564:	2001      	movne	r0, #1
  402566:	4770      	bx	lr
  402568:	2001      	movs	r0, #1
  40256a:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  40256c:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  40256e:	4770      	bx	lr
  402570:	200006d0 	.word	0x200006d0
  402574:	40034000 	.word	0x40034000

00402578 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  402578:	b410      	push	{r4}
  40257a:	b083      	sub	sp, #12
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  40257c:	f000 020f 	and.w	r2, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  402580:	2a03      	cmp	r2, #3
  402582:	d85f      	bhi.n	402644 <udd_ep_set_halt+0xcc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402584:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402588:	f1d1 0101 	rsbs	r1, r1, #1
  40258c:	bf38      	it	cc
  40258e:	2100      	movcc	r1, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402590:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402592:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402596:	2400      	movs	r4, #0
  402598:	4b2f      	ldr	r3, [pc, #188]	; (402658 <udd_ep_set_halt+0xe0>)
  40259a:	701c      	strb	r4, [r3, #0]
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  40259c:	f010 0f80 	tst.w	r0, #128	; 0x80
  4025a0:	d025      	beq.n	4025ee <udd_ep_set_halt+0x76>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4025a2:	1e53      	subs	r3, r2, #1
  4025a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4025a8:	482c      	ldr	r0, [pc, #176]	; (40265c <udd_ep_set_halt+0xe4>)
  4025aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4025ae:	f102 040c 	add.w	r4, r2, #12
  4025b2:	482b      	ldr	r0, [pc, #172]	; (402660 <udd_ep_set_halt+0xe8>)
  4025b4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  4025b8:	f010 0f10 	tst.w	r0, #16
  4025bc:	d104      	bne.n	4025c8 <udd_ep_set_halt+0x50>
				|| ptr_job->bank > 1)) {
  4025be:	7c58      	ldrb	r0, [r3, #17]
  4025c0:	f3c0 0081 	ubfx	r0, r0, #2, #2
  4025c4:	2801      	cmp	r0, #1
  4025c6:	dd12      	ble.n	4025ee <udd_ep_set_halt+0x76>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  4025c8:	7c58      	ldrb	r0, [r3, #17]
  4025ca:	f040 0020 	orr.w	r0, r0, #32
  4025ce:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4025d0:	2301      	movs	r3, #1
  4025d2:	fa03 f202 	lsl.w	r2, r3, r2
  4025d6:	4b22      	ldr	r3, [pc, #136]	; (402660 <udd_ep_set_halt+0xe8>)
  4025d8:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4025da:	2900      	cmp	r1, #0
  4025dc:	d034      	beq.n	402648 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  4025de:	2201      	movs	r2, #1
  4025e0:	4b1d      	ldr	r3, [pc, #116]	; (402658 <udd_ep_set_halt+0xe0>)
  4025e2:	701a      	strb	r2, [r3, #0]
  4025e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4025e8:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return true;
  4025ea:	2001      	movs	r0, #1
  4025ec:	e02f      	b.n	40264e <udd_ep_set_halt+0xd6>
  4025ee:	0093      	lsls	r3, r2, #2
  4025f0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4025f4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  4025f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
  4025fa:	9000      	str	r0, [sp, #0]
  4025fc:	9800      	ldr	r0, [sp, #0]
  4025fe:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  402602:	9000      	str	r0, [sp, #0]
  402604:	9800      	ldr	r0, [sp, #0]
  402606:	f040 0020 	orr.w	r0, r0, #32
  40260a:	9000      	str	r0, [sp, #0]
  40260c:	9800      	ldr	r0, [sp, #0]
  40260e:	6318      	str	r0, [r3, #48]	; 0x30
  402610:	2300      	movs	r3, #0
  402612:	9301      	str	r3, [sp, #4]
  402614:	9b01      	ldr	r3, [sp, #4]
  402616:	2b13      	cmp	r3, #19
  402618:	d806      	bhi.n	402628 <udd_ep_set_halt+0xb0>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40261a:	bf00      	nop
  40261c:	9b01      	ldr	r3, [sp, #4]
  40261e:	3301      	adds	r3, #1
  402620:	9301      	str	r3, [sp, #4]
  402622:	9b01      	ldr	r3, [sp, #4]
  402624:	2b13      	cmp	r3, #19
  402626:	d9f8      	bls.n	40261a <udd_ep_set_halt+0xa2>
		udd_enable_endpoint_interrupt(ep_index);
  402628:	2301      	movs	r3, #1
  40262a:	fa03 f202 	lsl.w	r2, r3, r2
  40262e:	4b0c      	ldr	r3, [pc, #48]	; (402660 <udd_ep_set_halt+0xe8>)
  402630:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402632:	b159      	cbz	r1, 40264c <udd_ep_set_halt+0xd4>
		cpu_irq_enable();
  402634:	2201      	movs	r2, #1
  402636:	4b08      	ldr	r3, [pc, #32]	; (402658 <udd_ep_set_halt+0xe0>)
  402638:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40263a:	f3bf 8f5f 	dmb	sy
  40263e:	b662      	cpsie	i
		cpu_irq_restore(flags);
	}
	return true;
  402640:	2001      	movs	r0, #1
  402642:	e004      	b.n	40264e <udd_ep_set_halt+0xd6>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402644:	2000      	movs	r0, #0
  402646:	e002      	b.n	40264e <udd_ep_set_halt+0xd6>
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  402648:	2001      	movs	r0, #1
  40264a:	e000      	b.n	40264e <udd_ep_set_halt+0xd6>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  40264c:	2001      	movs	r0, #1
}
  40264e:	b003      	add	sp, #12
  402650:	f85d 4b04 	ldr.w	r4, [sp], #4
  402654:	4770      	bx	lr
  402656:	bf00      	nop
  402658:	200000a4 	.word	0x200000a4
  40265c:	200006d0 	.word	0x200006d0
  402660:	40034000 	.word	0x40034000

00402664 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402664:	b5f0      	push	{r4, r5, r6, r7, lr}
  402666:	b085      	sub	sp, #20
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402668:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  40266c:	2803      	cmp	r0, #3
  40266e:	d859      	bhi.n	402724 <udd_ep_clear_halt+0xc0>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  402670:	4c30      	ldr	r4, [pc, #192]	; (402734 <udd_ep_clear_halt+0xd0>)
  402672:	1e43      	subs	r3, r0, #1
  402674:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402678:	009d      	lsls	r5, r3, #2
  40267a:	1961      	adds	r1, r4, r5

	ptr_job->b_stall_requested = false;
  40267c:	7c4b      	ldrb	r3, [r1, #17]
  40267e:	f36f 1345 	bfc	r3, #5, #1
  402682:	744b      	strb	r3, [r1, #17]
  402684:	0082      	lsls	r2, r0, #2
  402686:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40268a:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  40268e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402690:	f013 0f20 	tst.w	r3, #32
  402694:	d048      	beq.n	402728 <udd_ep_clear_halt+0xc4>
		// Remove stall
		udd_disable_stall_handshake(ep);
  402696:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402698:	9300      	str	r3, [sp, #0]
  40269a:	9b00      	ldr	r3, [sp, #0]
  40269c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026a0:	9300      	str	r3, [sp, #0]
  4026a2:	9b00      	ldr	r3, [sp, #0]
  4026a4:	f023 0320 	bic.w	r3, r3, #32
  4026a8:	9300      	str	r3, [sp, #0]
  4026aa:	9b00      	ldr	r3, [sp, #0]
  4026ac:	6313      	str	r3, [r2, #48]	; 0x30
  4026ae:	2300      	movs	r3, #0
  4026b0:	9301      	str	r3, [sp, #4]
  4026b2:	9b01      	ldr	r3, [sp, #4]
  4026b4:	2b13      	cmp	r3, #19
  4026b6:	d806      	bhi.n	4026c6 <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4026b8:	bf00      	nop
  4026ba:	9b01      	ldr	r3, [sp, #4]
  4026bc:	3301      	adds	r3, #1
  4026be:	9301      	str	r3, [sp, #4]
  4026c0:	9b01      	ldr	r3, [sp, #4]
  4026c2:	2b13      	cmp	r3, #19
  4026c4:	d9f8      	bls.n	4026b8 <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  4026c6:	4b1c      	ldr	r3, [pc, #112]	; (402738 <udd_ep_clear_halt+0xd4>)
  4026c8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  4026ca:	2701      	movs	r7, #1
  4026cc:	fa07 f000 	lsl.w	r0, r7, r0
  4026d0:	4306      	orrs	r6, r0
  4026d2:	629e      	str	r6, [r3, #40]	; 0x28
  4026d4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  4026d6:	ea26 0000 	bic.w	r0, r6, r0
  4026da:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  4026dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026de:	9302      	str	r3, [sp, #8]
  4026e0:	9b02      	ldr	r3, [sp, #8]
  4026e2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026e6:	9302      	str	r3, [sp, #8]
  4026e8:	9b02      	ldr	r3, [sp, #8]
  4026ea:	f023 0308 	bic.w	r3, r3, #8
  4026ee:	9302      	str	r3, [sp, #8]
  4026f0:	9b02      	ldr	r3, [sp, #8]
  4026f2:	6313      	str	r3, [r2, #48]	; 0x30
  4026f4:	2300      	movs	r3, #0
  4026f6:	9303      	str	r3, [sp, #12]
  4026f8:	9b03      	ldr	r3, [sp, #12]
  4026fa:	2b13      	cmp	r3, #19
  4026fc:	d806      	bhi.n	40270c <udd_ep_clear_halt+0xa8>
  4026fe:	bf00      	nop
  402700:	9b03      	ldr	r3, [sp, #12]
  402702:	3301      	adds	r3, #1
  402704:	9303      	str	r3, [sp, #12]
  402706:	9b03      	ldr	r3, [sp, #12]
  402708:	2b13      	cmp	r3, #19
  40270a:	d9f8      	bls.n	4026fe <udd_ep_clear_halt+0x9a>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  40270c:	7c4b      	ldrb	r3, [r1, #17]
  40270e:	f013 0f10 	tst.w	r3, #16
  402712:	d00b      	beq.n	40272c <udd_ep_clear_halt+0xc8>
			ptr_job->busy = false;
  402714:	7c4b      	ldrb	r3, [r1, #17]
  402716:	f36f 1304 	bfc	r3, #4, #1
  40271a:	744b      	strb	r3, [r1, #17]
			ptr_job->call_nohalt();
  40271c:	5963      	ldr	r3, [r4, r5]
  40271e:	4798      	blx	r3
		}
	}
	return true;
  402720:	2001      	movs	r0, #1
  402722:	e004      	b.n	40272e <udd_ep_clear_halt+0xca>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  402724:	2000      	movs	r0, #0
  402726:	e002      	b.n	40272e <udd_ep_clear_halt+0xca>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  402728:	2001      	movs	r0, #1
  40272a:	e000      	b.n	40272e <udd_ep_clear_halt+0xca>
  40272c:	2001      	movs	r0, #1
}
  40272e:	b005      	add	sp, #20
  402730:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402732:	bf00      	nop
  402734:	200006d0 	.word	0x200006d0
  402738:	40034000 	.word	0x40034000

0040273c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  40273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  402740:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402744:	2c03      	cmp	r4, #3
  402746:	f200 8089 	bhi.w	40285c <udd_ep_run+0x120>
  40274a:	00a5      	lsls	r5, r4, #2
  40274c:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402750:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  402754:	6b2e      	ldr	r6, [r5, #48]	; 0x30
  402756:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  40275a:	f000 8082 	beq.w	402862 <udd_ep_run+0x126>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  40275e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 40288c <udd_ep_run+0x150>
  402762:	1e66      	subs	r6, r4, #1
  402764:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402768:	00b7      	lsls	r7, r6, #2
  40276a:	eb0c 0607 	add.w	r6, ip, r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  40276e:	f896 8011 	ldrb.w	r8, [r6, #17]
  402772:	f018 0f20 	tst.w	r8, #32
  402776:	d177      	bne.n	402868 <udd_ep_run+0x12c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402778:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
  40277c:	f018 0f20 	tst.w	r8, #32
  402780:	d175      	bne.n	40286e <udd_ep_run+0x132>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402782:	f3ef 8810 	mrs	r8, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402786:	f1d8 0a01 	rsbs	sl, r8, #1
  40278a:	bf38      	it	cc
  40278c:	f04f 0a00 	movcc.w	sl, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402790:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402792:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402796:	f04f 0900 	mov.w	r9, #0
  40279a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 402880 <udd_ep_run+0x144>
  40279e:	f888 9000 	strb.w	r9, [r8]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  4027a2:	f896 8011 	ldrb.w	r8, [r6, #17]
  4027a6:	f018 0f10 	tst.w	r8, #16
  4027aa:	d00b      	beq.n	4027c4 <udd_ep_run+0x88>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4027ac:	f1ba 0f00 	cmp.w	sl, #0
  4027b0:	d060      	beq.n	402874 <udd_ep_run+0x138>
		cpu_irq_enable();
  4027b2:	2201      	movs	r2, #1
  4027b4:	4b32      	ldr	r3, [pc, #200]	; (402880 <udd_ep_run+0x144>)
  4027b6:	701a      	strb	r2, [r3, #0]
  4027b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4027bc:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  4027be:	2000      	movs	r0, #0
  4027c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	ptr_job->busy = true;
  4027c4:	f896 8011 	ldrb.w	r8, [r6, #17]
  4027c8:	f048 0810 	orr.w	r8, r8, #16
  4027cc:	f886 8011 	strb.w	r8, [r6, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4027d0:	f1ba 0f00 	cmp.w	sl, #0
  4027d4:	d008      	beq.n	4027e8 <udd_ep_run+0xac>
		cpu_irq_enable();
  4027d6:	f04f 0901 	mov.w	r9, #1
  4027da:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 402880 <udd_ep_run+0x144>
  4027de:	f888 9000 	strb.w	r9, [r8]
  4027e2:	f3bf 8f5f 	dmb	sy
  4027e6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  4027e8:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
  4027ea:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
  4027ec:	2200      	movs	r2, #0
  4027ee:	60f2      	str	r2, [r6, #12]
	ptr_job->call_trans = callback;
  4027f0:	9a08      	ldr	r2, [sp, #32]
  4027f2:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  4027f6:	b921      	cbnz	r1, 402802 <udd_ep_run+0xc6>
  4027f8:	f1d3 0201 	rsbs	r2, r3, #1
  4027fc:	bf38      	it	cc
  4027fe:	2200      	movcc	r2, #0
  402800:	e000      	b.n	402804 <udd_ep_run+0xc8>
  402802:	2201      	movs	r2, #1
  402804:	7c73      	ldrb	r3, [r6, #17]
  402806:	f362 1386 	bfi	r3, r2, #6, #1
	ptr_job->b_buf_end = false;
  40280a:	f36f 13c7 	bfc	r3, #7, #1
  40280e:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402810:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402814:	b672      	cpsid	i
  402816:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40281a:	2200      	movs	r2, #0
  40281c:	4b18      	ldr	r3, [pc, #96]	; (402880 <udd_ep_run+0x144>)
  40281e:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  402820:	2201      	movs	r2, #1
  402822:	40a2      	lsls	r2, r4
  402824:	4b17      	ldr	r3, [pc, #92]	; (402884 <udd_ep_run+0x148>)
  402826:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  402828:	f010 0f80 	tst.w	r0, #128	; 0x80
  40282c:	d00c      	beq.n	402848 <udd_ep_run+0x10c>
		if (Is_udd_in_pending(ep)) {
  40282e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402830:	f013 0f11 	tst.w	r3, #17
  402834:	d108      	bne.n	402848 <udd_ep_run+0x10c>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  402836:	4620      	mov	r0, r4
  402838:	2101      	movs	r1, #1
  40283a:	4b13      	ldr	r3, [pc, #76]	; (402888 <udd_ep_run+0x14c>)
  40283c:	4798      	blx	r3
  40283e:	b118      	cbz	r0, 402848 <udd_ep_run+0x10c>
				// Over one bank
				udd_ep_in_sent(ep, false);
  402840:	4620      	mov	r0, r4
  402842:	2100      	movs	r1, #0
  402844:	4b10      	ldr	r3, [pc, #64]	; (402888 <udd_ep_run+0x14c>)
  402846:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402848:	b9be      	cbnz	r6, 40287a <udd_ep_run+0x13e>
		cpu_irq_enable();
  40284a:	2201      	movs	r2, #1
  40284c:	4b0c      	ldr	r3, [pc, #48]	; (402880 <udd_ep_run+0x144>)
  40284e:	701a      	strb	r2, [r3, #0]
  402850:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402854:	b662      	cpsie	i
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402856:	2001      	movs	r0, #1
  402858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  40285c:	2000      	movs	r0, #0
  40285e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  402862:	2000      	movs	r0, #0
  402864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402868:	2000      	movs	r0, #0
  40286a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40286e:	2000      	movs	r0, #0
  402870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  402874:	2000      	movs	r0, #0
  402876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  40287a:	2001      	movs	r0, #1
}
  40287c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402880:	200000a4 	.word	0x200000a4
  402884:	40034000 	.word	0x40034000
  402888:	004017b5 	.word	0x004017b5
  40288c:	200006d0 	.word	0x200006d0

00402890 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  402890:	b5f0      	push	{r4, r5, r6, r7, lr}
  402892:	b085      	sub	sp, #20
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  402894:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402898:	2c03      	cmp	r4, #3
  40289a:	f200 8090 	bhi.w	4029be <udd_ep_abort+0x12e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40289e:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4028a2:	b672      	cpsid	i
  4028a4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4028a8:	2100      	movs	r1, #0
  4028aa:	4a46      	ldr	r2, [pc, #280]	; (4029c4 <udd_ep_abort+0x134>)
  4028ac:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  4028ae:	2601      	movs	r6, #1
  4028b0:	40a6      	lsls	r6, r4
  4028b2:	4a45      	ldr	r2, [pc, #276]	; (4029c8 <udd_ep_abort+0x138>)
  4028b4:	6156      	str	r6, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4028b6:	b92b      	cbnz	r3, 4028c4 <udd_ep_abort+0x34>
		cpu_irq_enable();
  4028b8:	2201      	movs	r2, #1
  4028ba:	4b42      	ldr	r3, [pc, #264]	; (4029c4 <udd_ep_abort+0x134>)
  4028bc:	701a      	strb	r2, [r3, #0]
  4028be:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4028c2:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  4028c4:	f010 0f80 	tst.w	r0, #128	; 0x80
  4028c8:	d109      	bne.n	4028de <udd_ep_abort+0x4e>
  4028ca:	00a5      	lsls	r5, r4, #2
  4028cc:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  4028d0:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  4028d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4028d6:	f013 0f42 	tst.w	r3, #66	; 0x42
  4028da:	d157      	bne.n	40298c <udd_ep_abort+0xfc>
  4028dc:	e05d      	b.n	40299a <udd_ep_abort+0x10a>
  4028de:	00a3      	lsls	r3, r4, #2
  4028e0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4028e4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  4028e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4028ea:	f012 0f10 	tst.w	r2, #16
  4028ee:	d02a      	beq.n	402946 <udd_ep_abort+0xb6>
			udd_kill_data_in_fifo(ep,
  4028f0:	b18c      	cbz	r4, 402916 <udd_ep_abort+0x86>
  4028f2:	2c03      	cmp	r4, #3
  4028f4:	d00f      	beq.n	402916 <udd_ep_abort+0x86>
  4028f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4028f8:	f022 0210 	bic.w	r2, r2, #16
  4028fc:	631a      	str	r2, [r3, #48]	; 0x30
  4028fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402900:	f012 0f10 	tst.w	r2, #16
  402904:	d1fb      	bne.n	4028fe <udd_ep_abort+0x6e>
  402906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402908:	f042 0210 	orr.w	r2, r2, #16
  40290c:	631a      	str	r2, [r3, #48]	; 0x30
  40290e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402910:	f012 0f10 	tst.w	r2, #16
  402914:	d0fb      	beq.n	40290e <udd_ep_abort+0x7e>
  402916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402918:	9200      	str	r2, [sp, #0]
  40291a:	9a00      	ldr	r2, [sp, #0]
  40291c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402920:	9200      	str	r2, [sp, #0]
  402922:	9a00      	ldr	r2, [sp, #0]
  402924:	f022 0210 	bic.w	r2, r2, #16
  402928:	9200      	str	r2, [sp, #0]
  40292a:	9a00      	ldr	r2, [sp, #0]
  40292c:	631a      	str	r2, [r3, #48]	; 0x30
  40292e:	2200      	movs	r2, #0
  402930:	9201      	str	r2, [sp, #4]
  402932:	9a01      	ldr	r2, [sp, #4]
  402934:	2a13      	cmp	r2, #19
  402936:	d806      	bhi.n	402946 <udd_ep_abort+0xb6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402938:	bf00      	nop
  40293a:	9a01      	ldr	r2, [sp, #4]
  40293c:	3201      	adds	r2, #1
  40293e:	9201      	str	r2, [sp, #4]
  402940:	9a01      	ldr	r2, [sp, #4]
  402942:	2a13      	cmp	r2, #19
  402944:	d9f8      	bls.n	402938 <udd_ep_abort+0xa8>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  402946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402948:	9202      	str	r2, [sp, #8]
  40294a:	9a02      	ldr	r2, [sp, #8]
  40294c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402950:	9202      	str	r2, [sp, #8]
  402952:	9a02      	ldr	r2, [sp, #8]
  402954:	f022 0201 	bic.w	r2, r2, #1
  402958:	9202      	str	r2, [sp, #8]
  40295a:	9a02      	ldr	r2, [sp, #8]
  40295c:	631a      	str	r2, [r3, #48]	; 0x30
  40295e:	2300      	movs	r3, #0
  402960:	9303      	str	r3, [sp, #12]
  402962:	9b03      	ldr	r3, [sp, #12]
  402964:	2b13      	cmp	r3, #19
  402966:	d806      	bhi.n	402976 <udd_ep_abort+0xe6>
  402968:	bf00      	nop
  40296a:	9b03      	ldr	r3, [sp, #12]
  40296c:	3301      	adds	r3, #1
  40296e:	9303      	str	r3, [sp, #12]
  402970:	9b03      	ldr	r3, [sp, #12]
  402972:	2b13      	cmp	r3, #19
  402974:	d9f8      	bls.n	402968 <udd_ep_abort+0xd8>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  402976:	1e63      	subs	r3, r4, #1
  402978:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40297c:	4a13      	ldr	r2, [pc, #76]	; (4029cc <udd_ep_abort+0x13c>)
  40297e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402982:	7c5a      	ldrb	r2, [r3, #17]
  402984:	f36f 0283 	bfc	r2, #2, #2
  402988:	745a      	strb	r2, [r3, #17]
  40298a:	e006      	b.n	40299a <udd_ep_abort+0x10a>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  40298c:	4f10      	ldr	r7, [pc, #64]	; (4029d0 <udd_ep_abort+0x140>)
  40298e:	4620      	mov	r0, r4
  402990:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402992:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402994:	f013 0f42 	tst.w	r3, #66	; 0x42
  402998:	d1f9      	bne.n	40298e <udd_ep_abort+0xfe>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  40299a:	4b0b      	ldr	r3, [pc, #44]	; (4029c8 <udd_ep_abort+0x138>)
  40299c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40299e:	4332      	orrs	r2, r6
  4029a0:	629a      	str	r2, [r3, #40]	; 0x28
  4029a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4029a4:	ea22 0606 	bic.w	r6, r2, r6
  4029a8:	629e      	str	r6, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4029aa:	1e60      	subs	r0, r4, #1
  4029ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4029b0:	4b06      	ldr	r3, [pc, #24]	; (4029cc <udd_ep_abort+0x13c>)
  4029b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4029b6:	2101      	movs	r1, #1
  4029b8:	4622      	mov	r2, r4
  4029ba:	4b06      	ldr	r3, [pc, #24]	; (4029d4 <udd_ep_abort+0x144>)
  4029bc:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  4029be:	b005      	add	sp, #20
  4029c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4029c2:	bf00      	nop
  4029c4:	200000a4 	.word	0x200000a4
  4029c8:	40034000 	.word	0x40034000
  4029cc:	200006d0 	.word	0x200006d0
  4029d0:	004016e9 	.word	0x004016e9
  4029d4:	004016a9 	.word	0x004016a9

004029d8 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4029d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4029dc:	6043      	str	r3, [r0, #4]
  4029de:	4770      	bx	lr

004029e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4029e0:	e7fe      	b.n	4029e0 <Dummy_Handler>
  4029e2:	bf00      	nop

004029e4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4029e4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4029e6:	4b1e      	ldr	r3, [pc, #120]	; (402a60 <Reset_Handler+0x7c>)
  4029e8:	4a1e      	ldr	r2, [pc, #120]	; (402a64 <Reset_Handler+0x80>)
  4029ea:	429a      	cmp	r2, r3
  4029ec:	d003      	beq.n	4029f6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  4029ee:	4b1e      	ldr	r3, [pc, #120]	; (402a68 <Reset_Handler+0x84>)
  4029f0:	4a1b      	ldr	r2, [pc, #108]	; (402a60 <Reset_Handler+0x7c>)
  4029f2:	429a      	cmp	r2, r3
  4029f4:	d304      	bcc.n	402a00 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4029f6:	4b1d      	ldr	r3, [pc, #116]	; (402a6c <Reset_Handler+0x88>)
  4029f8:	4a1d      	ldr	r2, [pc, #116]	; (402a70 <Reset_Handler+0x8c>)
  4029fa:	429a      	cmp	r2, r3
  4029fc:	d30f      	bcc.n	402a1e <Reset_Handler+0x3a>
  4029fe:	e01a      	b.n	402a36 <Reset_Handler+0x52>
  402a00:	4b1c      	ldr	r3, [pc, #112]	; (402a74 <Reset_Handler+0x90>)
  402a02:	4c1d      	ldr	r4, [pc, #116]	; (402a78 <Reset_Handler+0x94>)
  402a04:	1ae4      	subs	r4, r4, r3
  402a06:	f024 0403 	bic.w	r4, r4, #3
  402a0a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  402a0c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  402a0e:	4814      	ldr	r0, [pc, #80]	; (402a60 <Reset_Handler+0x7c>)
  402a10:	4914      	ldr	r1, [pc, #80]	; (402a64 <Reset_Handler+0x80>)
  402a12:	585a      	ldr	r2, [r3, r1]
  402a14:	501a      	str	r2, [r3, r0]
  402a16:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  402a18:	42a3      	cmp	r3, r4
  402a1a:	d1fa      	bne.n	402a12 <Reset_Handler+0x2e>
  402a1c:	e7eb      	b.n	4029f6 <Reset_Handler+0x12>
  402a1e:	4b17      	ldr	r3, [pc, #92]	; (402a7c <Reset_Handler+0x98>)
  402a20:	4917      	ldr	r1, [pc, #92]	; (402a80 <Reset_Handler+0x9c>)
  402a22:	1ac9      	subs	r1, r1, r3
  402a24:	f021 0103 	bic.w	r1, r1, #3
  402a28:	1d1a      	adds	r2, r3, #4
  402a2a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  402a2c:	2200      	movs	r2, #0
  402a2e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402a32:	428b      	cmp	r3, r1
  402a34:	d1fb      	bne.n	402a2e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402a36:	4a13      	ldr	r2, [pc, #76]	; (402a84 <Reset_Handler+0xa0>)
  402a38:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
  402a3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402a40:	4911      	ldr	r1, [pc, #68]	; (402a88 <Reset_Handler+0xa4>)
  402a42:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  402a44:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  402a48:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
  402a4c:	d203      	bcs.n	402a56 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  402a4e:	688a      	ldr	r2, [r1, #8]
  402a50:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  402a54:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  402a56:	4b0d      	ldr	r3, [pc, #52]	; (402a8c <Reset_Handler+0xa8>)
  402a58:	4798      	blx	r3

	/* Branch to main function */
	main();
  402a5a:	4b0d      	ldr	r3, [pc, #52]	; (402a90 <Reset_Handler+0xac>)
  402a5c:	4798      	blx	r3
  402a5e:	e7fe      	b.n	402a5e <Reset_Handler+0x7a>
  402a60:	20000000 	.word	0x20000000
  402a64:	00402d88 	.word	0x00402d88
  402a68:	200004e0 	.word	0x200004e0
  402a6c:	2000075c 	.word	0x2000075c
  402a70:	200004e0 	.word	0x200004e0
  402a74:	20000004 	.word	0x20000004
  402a78:	200004e3 	.word	0x200004e3
  402a7c:	200004dc 	.word	0x200004dc
  402a80:	20000757 	.word	0x20000757
  402a84:	00400000 	.word	0x00400000
  402a88:	e000ed00 	.word	0xe000ed00
  402a8c:	00402c2d 	.word	0x00402c2d
  402a90:	00402bed 	.word	0x00402bed

00402a94 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  402a94:	4b3d      	ldr	r3, [pc, #244]	; (402b8c <SystemCoreClockUpdate+0xf8>)
  402a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a98:	f003 0303 	and.w	r3, r3, #3
  402a9c:	2b03      	cmp	r3, #3
  402a9e:	d85d      	bhi.n	402b5c <SystemCoreClockUpdate+0xc8>
  402aa0:	e8df f003 	tbb	[pc, r3]
  402aa4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  402aa8:	4b39      	ldr	r3, [pc, #228]	; (402b90 <SystemCoreClockUpdate+0xfc>)
  402aaa:	695b      	ldr	r3, [r3, #20]
  402aac:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402ab0:	bf14      	ite	ne
  402ab2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402ab6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402aba:	4b36      	ldr	r3, [pc, #216]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402abc:	601a      	str	r2, [r3, #0]
  402abe:	e04d      	b.n	402b5c <SystemCoreClockUpdate+0xc8>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  402ac0:	4b32      	ldr	r3, [pc, #200]	; (402b8c <SystemCoreClockUpdate+0xf8>)
  402ac2:	6a1b      	ldr	r3, [r3, #32]
  402ac4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402ac8:	d003      	beq.n	402ad2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402aca:	4a33      	ldr	r2, [pc, #204]	; (402b98 <SystemCoreClockUpdate+0x104>)
  402acc:	4b31      	ldr	r3, [pc, #196]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402ace:	601a      	str	r2, [r3, #0]
  402ad0:	e044      	b.n	402b5c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402ad2:	4a32      	ldr	r2, [pc, #200]	; (402b9c <SystemCoreClockUpdate+0x108>)
  402ad4:	4b2f      	ldr	r3, [pc, #188]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402ad6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  402ad8:	4b2c      	ldr	r3, [pc, #176]	; (402b8c <SystemCoreClockUpdate+0xf8>)
  402ada:	6a1b      	ldr	r3, [r3, #32]
  402adc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402ae0:	2b10      	cmp	r3, #16
  402ae2:	d002      	beq.n	402aea <SystemCoreClockUpdate+0x56>
  402ae4:	2b20      	cmp	r3, #32
  402ae6:	d004      	beq.n	402af2 <SystemCoreClockUpdate+0x5e>
  402ae8:	e038      	b.n	402b5c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  402aea:	4a2d      	ldr	r2, [pc, #180]	; (402ba0 <SystemCoreClockUpdate+0x10c>)
  402aec:	4b29      	ldr	r3, [pc, #164]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402aee:	601a      	str	r2, [r3, #0]
				break;
  402af0:	e034      	b.n	402b5c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  402af2:	4a29      	ldr	r2, [pc, #164]	; (402b98 <SystemCoreClockUpdate+0x104>)
  402af4:	4b27      	ldr	r3, [pc, #156]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402af6:	601a      	str	r2, [r3, #0]
				break;
  402af8:	e030      	b.n	402b5c <SystemCoreClockUpdate+0xc8>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  402afa:	4b24      	ldr	r3, [pc, #144]	; (402b8c <SystemCoreClockUpdate+0xf8>)
  402afc:	6a1b      	ldr	r3, [r3, #32]
  402afe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402b02:	d003      	beq.n	402b0c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402b04:	4a24      	ldr	r2, [pc, #144]	; (402b98 <SystemCoreClockUpdate+0x104>)
  402b06:	4b23      	ldr	r3, [pc, #140]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402b08:	601a      	str	r2, [r3, #0]
  402b0a:	e012      	b.n	402b32 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402b0c:	4a23      	ldr	r2, [pc, #140]	; (402b9c <SystemCoreClockUpdate+0x108>)
  402b0e:	4b21      	ldr	r3, [pc, #132]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402b10:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  402b12:	4b1e      	ldr	r3, [pc, #120]	; (402b8c <SystemCoreClockUpdate+0xf8>)
  402b14:	6a1b      	ldr	r3, [r3, #32]
  402b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b1a:	2b10      	cmp	r3, #16
  402b1c:	d002      	beq.n	402b24 <SystemCoreClockUpdate+0x90>
  402b1e:	2b20      	cmp	r3, #32
  402b20:	d004      	beq.n	402b2c <SystemCoreClockUpdate+0x98>
  402b22:	e006      	b.n	402b32 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  402b24:	4a1e      	ldr	r2, [pc, #120]	; (402ba0 <SystemCoreClockUpdate+0x10c>)
  402b26:	4b1b      	ldr	r3, [pc, #108]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402b28:	601a      	str	r2, [r3, #0]
				break;
  402b2a:	e002      	b.n	402b32 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  402b2c:	4a1a      	ldr	r2, [pc, #104]	; (402b98 <SystemCoreClockUpdate+0x104>)
  402b2e:	4b19      	ldr	r3, [pc, #100]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402b30:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  402b32:	4b16      	ldr	r3, [pc, #88]	; (402b8c <SystemCoreClockUpdate+0xf8>)
  402b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b36:	f003 0303 	and.w	r3, r3, #3
  402b3a:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  402b3c:	4b13      	ldr	r3, [pc, #76]	; (402b8c <SystemCoreClockUpdate+0xf8>)
  402b3e:	bf07      	ittee	eq
  402b40:	6a98      	ldreq	r0, [r3, #40]	; 0x28
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  402b42:	6a99      	ldreq	r1, [r3, #40]	; 0x28
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  402b44:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  402b46:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  402b48:	4b12      	ldr	r3, [pc, #72]	; (402b94 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  402b4a:	f3c0 400a 	ubfx	r0, r0, #16, #11
  402b4e:	681a      	ldr	r2, [r3, #0]
  402b50:	fb00 2202 	mla	r2, r0, r2, r2
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  402b54:	b2c9      	uxtb	r1, r1
  402b56:	fbb2 f2f1 	udiv	r2, r2, r1
  402b5a:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  402b5c:	4b0b      	ldr	r3, [pc, #44]	; (402b8c <SystemCoreClockUpdate+0xf8>)
  402b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b64:	2b70      	cmp	r3, #112	; 0x70
  402b66:	d107      	bne.n	402b78 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  402b68:	4b0a      	ldr	r3, [pc, #40]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402b6a:	681a      	ldr	r2, [r3, #0]
  402b6c:	490d      	ldr	r1, [pc, #52]	; (402ba4 <SystemCoreClockUpdate+0x110>)
  402b6e:	fba1 0202 	umull	r0, r2, r1, r2
  402b72:	0852      	lsrs	r2, r2, #1
  402b74:	601a      	str	r2, [r3, #0]
  402b76:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402b78:	4b04      	ldr	r3, [pc, #16]	; (402b8c <SystemCoreClockUpdate+0xf8>)
  402b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402b7c:	4b05      	ldr	r3, [pc, #20]	; (402b94 <SystemCoreClockUpdate+0x100>)
  402b7e:	f3c1 1102 	ubfx	r1, r1, #4, #3
  402b82:	681a      	ldr	r2, [r3, #0]
  402b84:	40ca      	lsrs	r2, r1
  402b86:	601a      	str	r2, [r3, #0]
  402b88:	4770      	bx	lr
  402b8a:	bf00      	nop
  402b8c:	400e0400 	.word	0x400e0400
  402b90:	400e1410 	.word	0x400e1410
  402b94:	200000a8 	.word	0x200000a8
  402b98:	00b71b00 	.word	0x00b71b00
  402b9c:	003d0900 	.word	0x003d0900
  402ba0:	007a1200 	.word	0x007a1200
  402ba4:	aaaaaaab 	.word	0xaaaaaaab

00402ba8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  402ba8:	4b0c      	ldr	r3, [pc, #48]	; (402bdc <system_init_flash+0x34>)
  402baa:	4298      	cmp	r0, r3
  402bac:	d803      	bhi.n	402bb6 <system_init_flash+0xe>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
  402bae:	2200      	movs	r2, #0
  402bb0:	4b0b      	ldr	r3, [pc, #44]	; (402be0 <system_init_flash+0x38>)
  402bb2:	601a      	str	r2, [r3, #0]
  402bb4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  402bb6:	4b0b      	ldr	r3, [pc, #44]	; (402be4 <system_init_flash+0x3c>)
  402bb8:	4298      	cmp	r0, r3
  402bba:	d804      	bhi.n	402bc6 <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
  402bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
  402bc0:	4b07      	ldr	r3, [pc, #28]	; (402be0 <system_init_flash+0x38>)
  402bc2:	601a      	str	r2, [r3, #0]
  402bc4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  402bc6:	4b08      	ldr	r3, [pc, #32]	; (402be8 <system_init_flash+0x40>)
  402bc8:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
  402bca:	bf94      	ite	ls
  402bcc:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
  402bd0:	f44f 7240 	movhi.w	r2, #768	; 0x300
  402bd4:	4b02      	ldr	r3, [pc, #8]	; (402be0 <system_init_flash+0x38>)
  402bd6:	601a      	str	r2, [r3, #0]
  402bd8:	4770      	bx	lr
  402bda:	bf00      	nop
  402bdc:	0103663f 	.word	0x0103663f
  402be0:	400e0a00 	.word	0x400e0a00
  402be4:	01c9c37f 	.word	0x01c9c37f
  402be8:	0337f97f 	.word	0x0337f97f

00402bec <main>:


uint16_t angle;

int main (void)
{
  402bec:	b500      	push	{lr}
  402bee:	b083      	sub	sp, #12
	// Insert system clock initialization code here (sysclk_init()).
	

	board_init();
  402bf0:	4b08      	ldr	r3, [pc, #32]	; (402c14 <main+0x28>)
  402bf2:	4798      	blx	r3
	sysclk_init();
  402bf4:	4b08      	ldr	r3, [pc, #32]	; (402c18 <main+0x2c>)
  402bf6:	4798      	blx	r3
	
	ADC_init();
  402bf8:	4b08      	ldr	r3, [pc, #32]	; (402c1c <main+0x30>)
  402bfa:	4798      	blx	r3
	timer_init();
  402bfc:	4b08      	ldr	r3, [pc, #32]	; (402c20 <main+0x34>)
  402bfe:	4798      	blx	r3
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
  402c00:	2300      	movs	r3, #0
  402c02:	9300      	str	r3, [sp, #0]
  402c04:	4807      	ldr	r0, [pc, #28]	; (402c24 <main+0x38>)
  402c06:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402c0a:	461a      	mov	r2, r3
  402c0c:	4c06      	ldr	r4, [pc, #24]	; (402c28 <main+0x3c>)
  402c0e:	47a0      	blx	r4
  402c10:	e7fe      	b.n	402c10 <main+0x24>
  402c12:	bf00      	nop
  402c14:	004003bd 	.word	0x004003bd
  402c18:	00400419 	.word	0x00400419
  402c1c:	004001e9 	.word	0x004001e9
  402c20:	00400181 	.word	0x00400181
  402c24:	400e0e00 	.word	0x400e0e00
  402c28:	004010d9 	.word	0x004010d9

00402c2c <__libc_init_array>:
  402c2c:	b570      	push	{r4, r5, r6, lr}
  402c2e:	4b0e      	ldr	r3, [pc, #56]	; (402c68 <__libc_init_array+0x3c>)
  402c30:	4d0e      	ldr	r5, [pc, #56]	; (402c6c <__libc_init_array+0x40>)
  402c32:	2400      	movs	r4, #0
  402c34:	1aed      	subs	r5, r5, r3
  402c36:	10ad      	asrs	r5, r5, #2
  402c38:	461e      	mov	r6, r3
  402c3a:	42ac      	cmp	r4, r5
  402c3c:	d004      	beq.n	402c48 <__libc_init_array+0x1c>
  402c3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  402c42:	4790      	blx	r2
  402c44:	3401      	adds	r4, #1
  402c46:	e7f8      	b.n	402c3a <__libc_init_array+0xe>
  402c48:	f000 f88c 	bl	402d64 <_init>
  402c4c:	4d08      	ldr	r5, [pc, #32]	; (402c70 <__libc_init_array+0x44>)
  402c4e:	4b09      	ldr	r3, [pc, #36]	; (402c74 <__libc_init_array+0x48>)
  402c50:	2400      	movs	r4, #0
  402c52:	1aed      	subs	r5, r5, r3
  402c54:	10ad      	asrs	r5, r5, #2
  402c56:	461e      	mov	r6, r3
  402c58:	42ac      	cmp	r4, r5
  402c5a:	d004      	beq.n	402c66 <__libc_init_array+0x3a>
  402c5c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  402c60:	4790      	blx	r2
  402c62:	3401      	adds	r4, #1
  402c64:	e7f8      	b.n	402c58 <__libc_init_array+0x2c>
  402c66:	bd70      	pop	{r4, r5, r6, pc}
  402c68:	00402d70 	.word	0x00402d70
  402c6c:	00402d70 	.word	0x00402d70
  402c70:	00402d78 	.word	0x00402d78
  402c74:	00402d70 	.word	0x00402d70

00402c78 <register_fini>:
  402c78:	4b02      	ldr	r3, [pc, #8]	; (402c84 <register_fini+0xc>)
  402c7a:	b113      	cbz	r3, 402c82 <register_fini+0xa>
  402c7c:	4802      	ldr	r0, [pc, #8]	; (402c88 <register_fini+0x10>)
  402c7e:	f000 b805 	b.w	402c8c <atexit>
  402c82:	4770      	bx	lr
  402c84:	00000000 	.word	0x00000000
  402c88:	00402c99 	.word	0x00402c99

00402c8c <atexit>:
  402c8c:	4601      	mov	r1, r0
  402c8e:	2000      	movs	r0, #0
  402c90:	4602      	mov	r2, r0
  402c92:	4603      	mov	r3, r0
  402c94:	f000 b816 	b.w	402cc4 <__register_exitproc>

00402c98 <__libc_fini_array>:
  402c98:	b538      	push	{r3, r4, r5, lr}
  402c9a:	4d08      	ldr	r5, [pc, #32]	; (402cbc <__libc_fini_array+0x24>)
  402c9c:	4c08      	ldr	r4, [pc, #32]	; (402cc0 <__libc_fini_array+0x28>)
  402c9e:	1b64      	subs	r4, r4, r5
  402ca0:	10a4      	asrs	r4, r4, #2
  402ca2:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  402ca6:	b124      	cbz	r4, 402cb2 <__libc_fini_array+0x1a>
  402ca8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402cac:	3c01      	subs	r4, #1
  402cae:	4798      	blx	r3
  402cb0:	e7f9      	b.n	402ca6 <__libc_fini_array+0xe>
  402cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402cb6:	f000 b85f 	b.w	402d78 <_fini>
  402cba:	bf00      	nop
  402cbc:	00402d84 	.word	0x00402d84
  402cc0:	00402d88 	.word	0x00402d88

00402cc4 <__register_exitproc>:
  402cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402cc8:	4698      	mov	r8, r3
  402cca:	4b22      	ldr	r3, [pc, #136]	; (402d54 <__register_exitproc+0x90>)
  402ccc:	4606      	mov	r6, r0
  402cce:	681c      	ldr	r4, [r3, #0]
  402cd0:	460f      	mov	r7, r1
  402cd2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  402cd6:	4691      	mov	r9, r2
  402cd8:	b918      	cbnz	r0, 402ce2 <__register_exitproc+0x1e>
  402cda:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  402cde:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402ce2:	6843      	ldr	r3, [r0, #4]
  402ce4:	2b1f      	cmp	r3, #31
  402ce6:	dd16      	ble.n	402d16 <__register_exitproc+0x52>
  402ce8:	4b1b      	ldr	r3, [pc, #108]	; (402d58 <__register_exitproc+0x94>)
  402cea:	b91b      	cbnz	r3, 402cf4 <__register_exitproc+0x30>
  402cec:	f04f 30ff 	mov.w	r0, #4294967295
  402cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402cf4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402cf8:	f3af 8000 	nop.w
  402cfc:	2800      	cmp	r0, #0
  402cfe:	d0f5      	beq.n	402cec <__register_exitproc+0x28>
  402d00:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  402d04:	2500      	movs	r5, #0
  402d06:	6045      	str	r5, [r0, #4]
  402d08:	6001      	str	r1, [r0, #0]
  402d0a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  402d0e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  402d12:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  402d16:	6844      	ldr	r4, [r0, #4]
  402d18:	b1a6      	cbz	r6, 402d44 <__register_exitproc+0x80>
  402d1a:	2201      	movs	r2, #1
  402d1c:	40a2      	lsls	r2, r4
  402d1e:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  402d22:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  402d26:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  402d2a:	2e02      	cmp	r6, #2
  402d2c:	ea41 0102 	orr.w	r1, r1, r2
  402d30:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402d34:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
  402d38:	d104      	bne.n	402d44 <__register_exitproc+0x80>
  402d3a:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  402d3e:	431a      	orrs	r2, r3
  402d40:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  402d44:	1c63      	adds	r3, r4, #1
  402d46:	3402      	adds	r4, #2
  402d48:	6043      	str	r3, [r0, #4]
  402d4a:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
  402d4e:	2000      	movs	r0, #0
  402d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402d54:	00402d5c 	.word	0x00402d5c
  402d58:	00000000 	.word	0x00000000

00402d5c <_global_impure_ptr>:
  402d5c:	200000b8 00000043                       ... C...

00402d64 <_init>:
  402d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d66:	bf00      	nop
  402d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402d6a:	bc08      	pop	{r3}
  402d6c:	469e      	mov	lr, r3
  402d6e:	4770      	bx	lr

00402d70 <__init_array_start>:
  402d70:	00402c79 	.word	0x00402c79

00402d74 <__frame_dummy_init_array_entry>:
  402d74:	00400149                                I.@.

00402d78 <_fini>:
  402d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402d7a:	bf00      	nop
  402d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402d7e:	bc08      	pop	{r3}
  402d80:	469e      	mov	lr, r3
  402d82:	4770      	bx	lr

00402d84 <__fini_array_start>:
  402d84:	00400121 	.word	0x00400121
