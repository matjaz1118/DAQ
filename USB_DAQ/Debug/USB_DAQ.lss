
USB_DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000814c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040814c  0040814c  0001014c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000978  20000000  00408154  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002e0  20000978  00408acc  00018978  2**2
                  ALLOC
  4 .stack        00002000  20000c58  00408dac  00018978  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018978  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000189a1  2**0
                  CONTENTS, READONLY
  7 .debug_info   00020875  00000000  00000000  00018a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005c32  00000000  00000000  00039287  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f001  00000000  00000000  0003eeb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001068  00000000  00000000  0004dec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cc8  00000000  00000000  0004ef28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000155df  00000000  00000000  0004fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016ed8  00000000  00000000  000651cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051c8a  00000000  00000000  0007c0a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023b4  00000000  00000000  000cdd34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20002c58 	.word	0x20002c58
  400004:	0040315d 	.word	0x0040315d
  400008:	00403159 	.word	0x00403159
  40000c:	00403159 	.word	0x00403159
  400010:	00403159 	.word	0x00403159
  400014:	00403159 	.word	0x00403159
  400018:	00403159 	.word	0x00403159
	...
  40002c:	00403159 	.word	0x00403159
  400030:	00403159 	.word	0x00403159
  400034:	00000000 	.word	0x00000000
  400038:	00403159 	.word	0x00403159
  40003c:	00403159 	.word	0x00403159
  400040:	00403159 	.word	0x00403159
  400044:	00403159 	.word	0x00403159
  400048:	00403159 	.word	0x00403159
  40004c:	00403159 	.word	0x00403159
  400050:	00403159 	.word	0x00403159
  400054:	00403159 	.word	0x00403159
  400058:	00403159 	.word	0x00403159
  40005c:	00403159 	.word	0x00403159
  400060:	00403159 	.word	0x00403159
  400064:	00403159 	.word	0x00403159
  400068:	00403159 	.word	0x00403159
  40006c:	004017a5 	.word	0x004017a5
  400070:	004017b9 	.word	0x004017b9
  400074:	00403159 	.word	0x00403159
  400078:	00403159 	.word	0x00403159
  40007c:	00403159 	.word	0x00403159
  400080:	00403159 	.word	0x00403159
  400084:	00403159 	.word	0x00403159
  400088:	00403159 	.word	0x00403159
  40008c:	00403159 	.word	0x00403159
  400090:	00403159 	.word	0x00403159
  400094:	00403159 	.word	0x00403159
  400098:	00403159 	.word	0x00403159
  40009c:	00403159 	.word	0x00403159
  4000a0:	00403159 	.word	0x00403159
  4000a4:	00403159 	.word	0x00403159
  4000a8:	00403159 	.word	0x00403159
  4000ac:	00403159 	.word	0x00403159
  4000b0:	00403159 	.word	0x00403159
  4000b4:	00400181 	.word	0x00400181
  4000b8:	00403159 	.word	0x00403159
  4000bc:	00403159 	.word	0x00403159
  4000c0:	00403159 	.word	0x00403159
  4000c4:	00403159 	.word	0x00403159
  4000c8:	00401f65 	.word	0x00401f65
  4000cc:	00403159 	.word	0x00403159

004000d0 <deregister_tm_clones>:
  4000d0:	b508      	push	{r3, lr}
  4000d2:	4805      	ldr	r0, [pc, #20]	; (4000e8 <deregister_tm_clones+0x18>)
  4000d4:	4b05      	ldr	r3, [pc, #20]	; (4000ec <deregister_tm_clones+0x1c>)
  4000d6:	1a1b      	subs	r3, r3, r0
  4000d8:	2b06      	cmp	r3, #6
  4000da:	d800      	bhi.n	4000de <deregister_tm_clones+0xe>
  4000dc:	bd08      	pop	{r3, pc}
  4000de:	4b04      	ldr	r3, [pc, #16]	; (4000f0 <deregister_tm_clones+0x20>)
  4000e0:	2b00      	cmp	r3, #0
  4000e2:	d0fb      	beq.n	4000dc <deregister_tm_clones+0xc>
  4000e4:	4798      	blx	r3
  4000e6:	e7f9      	b.n	4000dc <deregister_tm_clones+0xc>
  4000e8:	00408154 	.word	0x00408154
  4000ec:	00408157 	.word	0x00408157
  4000f0:	00000000 	.word	0x00000000

004000f4 <register_tm_clones>:
  4000f4:	b508      	push	{r3, lr}
  4000f6:	4807      	ldr	r0, [pc, #28]	; (400114 <register_tm_clones+0x20>)
  4000f8:	4b07      	ldr	r3, [pc, #28]	; (400118 <register_tm_clones+0x24>)
  4000fa:	1a1b      	subs	r3, r3, r0
  4000fc:	109b      	asrs	r3, r3, #2
  4000fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  400102:	1059      	asrs	r1, r3, #1
  400104:	d100      	bne.n	400108 <register_tm_clones+0x14>
  400106:	bd08      	pop	{r3, pc}
  400108:	4a04      	ldr	r2, [pc, #16]	; (40011c <register_tm_clones+0x28>)
  40010a:	2a00      	cmp	r2, #0
  40010c:	d0fb      	beq.n	400106 <register_tm_clones+0x12>
  40010e:	4790      	blx	r2
  400110:	e7f9      	b.n	400106 <register_tm_clones+0x12>
  400112:	bf00      	nop
  400114:	00408154 	.word	0x00408154
  400118:	00408154 	.word	0x00408154
  40011c:	00000000 	.word	0x00000000

00400120 <__do_global_dtors_aux>:
  400120:	b510      	push	{r4, lr}
  400122:	4c06      	ldr	r4, [pc, #24]	; (40013c <__do_global_dtors_aux+0x1c>)
  400124:	7823      	ldrb	r3, [r4, #0]
  400126:	b943      	cbnz	r3, 40013a <__do_global_dtors_aux+0x1a>
  400128:	f7ff ffd2 	bl	4000d0 <deregister_tm_clones>
  40012c:	4b04      	ldr	r3, [pc, #16]	; (400140 <__do_global_dtors_aux+0x20>)
  40012e:	b113      	cbz	r3, 400136 <__do_global_dtors_aux+0x16>
  400130:	4804      	ldr	r0, [pc, #16]	; (400144 <__do_global_dtors_aux+0x24>)
  400132:	f3af 8000 	nop.w
  400136:	2301      	movs	r3, #1
  400138:	7023      	strb	r3, [r4, #0]
  40013a:	bd10      	pop	{r4, pc}
  40013c:	20000978 	.word	0x20000978
  400140:	00000000 	.word	0x00000000
  400144:	00408154 	.word	0x00408154

00400148 <frame_dummy>:
  400148:	b508      	push	{r3, lr}
  40014a:	4b08      	ldr	r3, [pc, #32]	; (40016c <frame_dummy+0x24>)
  40014c:	b11b      	cbz	r3, 400156 <frame_dummy+0xe>
  40014e:	4808      	ldr	r0, [pc, #32]	; (400170 <frame_dummy+0x28>)
  400150:	4908      	ldr	r1, [pc, #32]	; (400174 <frame_dummy+0x2c>)
  400152:	f3af 8000 	nop.w
  400156:	4808      	ldr	r0, [pc, #32]	; (400178 <frame_dummy+0x30>)
  400158:	6803      	ldr	r3, [r0, #0]
  40015a:	b113      	cbz	r3, 400162 <frame_dummy+0x1a>
  40015c:	4b07      	ldr	r3, [pc, #28]	; (40017c <frame_dummy+0x34>)
  40015e:	b103      	cbz	r3, 400162 <frame_dummy+0x1a>
  400160:	4798      	blx	r3
  400162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400166:	f7ff bfc5 	b.w	4000f4 <register_tm_clones>
  40016a:	bf00      	nop
  40016c:	00000000 	.word	0x00000000
  400170:	00408154 	.word	0x00408154
  400174:	2000097c 	.word	0x2000097c
  400178:	00408154 	.word	0x00408154
  40017c:	00000000 	.word	0x00000000

00400180 <ADC_Handler>:
	//Setup adc and start the timer. Everithing else happens in ADC ISR
}


void ADC_Handler (void)
{ 
  400180:	b510      	push	{r4, lr}
	DAQSettingsPtr = get_current_DAQ_settings();
  400182:	4b18      	ldr	r3, [pc, #96]	; (4001e4 <ADC_Handler+0x64>)
  400184:	4798      	blx	r3
  400186:	4b18      	ldr	r3, [pc, #96]	; (4001e8 <ADC_Handler+0x68>)
  400188:	6018      	str	r0, [r3, #0]

	result = adc_get_latest_value(ADC);
  40018a:	4c18      	ldr	r4, [pc, #96]	; (4001ec <ADC_Handler+0x6c>)
  40018c:	4620      	mov	r0, r4
  40018e:	4b18      	ldr	r3, [pc, #96]	; (4001f0 <ADC_Handler+0x70>)
  400190:	4798      	blx	r3
  400192:	4b18      	ldr	r3, [pc, #96]	; (4001f4 <ADC_Handler+0x74>)
  400194:	6018      	str	r0, [r3, #0]
	//todo: convert and print measured result
	adc_disable_all_channel(ADC);
  400196:	4620      	mov	r0, r4
  400198:	4b17      	ldr	r3, [pc, #92]	; (4001f8 <ADC_Handler+0x78>)
  40019a:	4798      	blx	r3
	if(repetitionCounter)
  40019c:	4b17      	ldr	r3, [pc, #92]	; (4001fc <ADC_Handler+0x7c>)
  40019e:	681b      	ldr	r3, [r3, #0]
  4001a0:	b1db      	cbz	r3, 4001da <ADC_Handler+0x5a>
	{
		if(sampleCounter)
  4001a2:	4a17      	ldr	r2, [pc, #92]	; (400200 <ADC_Handler+0x80>)
  4001a4:	6812      	ldr	r2, [r2, #0]
  4001a6:	b11a      	cbz	r2, 4001b0 <ADC_Handler+0x30>
		{
			sampleCounter--;
  4001a8:	3a01      	subs	r2, #1
  4001aa:	4b15      	ldr	r3, [pc, #84]	; (400200 <ADC_Handler+0x80>)
  4001ac:	601a      	str	r2, [r3, #0]
  4001ae:	e00a      	b.n	4001c6 <ADC_Handler+0x46>
		}
		else
		{
			sampleCounter = DAQSettingsPtr->samplesNbr;
  4001b0:	4a0d      	ldr	r2, [pc, #52]	; (4001e8 <ADC_Handler+0x68>)
  4001b2:	6812      	ldr	r2, [r2, #0]
  4001b4:	8a11      	ldrh	r1, [r2, #16]
  4001b6:	4a12      	ldr	r2, [pc, #72]	; (400200 <ADC_Handler+0x80>)
  4001b8:	6011      	str	r1, [r2, #0]
			sequencePosition++;
			if(DAQSettingsPtr->sequence[sequencePosition] == 0);
			{
				sequencePosition = 0;
  4001ba:	2100      	movs	r1, #0
  4001bc:	4a11      	ldr	r2, [pc, #68]	; (400204 <ADC_Handler+0x84>)
  4001be:	6011      	str	r1, [r2, #0]
				repetitionCounter--;
  4001c0:	3b01      	subs	r3, #1
  4001c2:	4a0e      	ldr	r2, [pc, #56]	; (4001fc <ADC_Handler+0x7c>)
  4001c4:	6013      	str	r3, [r2, #0]
			}
		}
		adc_enable_channel(ADC, DAQSettingsPtr->sequence[sequencePosition]); // todo: channel maping
  4001c6:	4b08      	ldr	r3, [pc, #32]	; (4001e8 <ADC_Handler+0x68>)
  4001c8:	681a      	ldr	r2, [r3, #0]
  4001ca:	4b0e      	ldr	r3, [pc, #56]	; (400204 <ADC_Handler+0x84>)
  4001cc:	681b      	ldr	r3, [r3, #0]
  4001ce:	4413      	add	r3, r2
  4001d0:	4806      	ldr	r0, [pc, #24]	; (4001ec <ADC_Handler+0x6c>)
  4001d2:	7a19      	ldrb	r1, [r3, #8]
  4001d4:	4b0c      	ldr	r3, [pc, #48]	; (400208 <ADC_Handler+0x88>)
  4001d6:	4798      	blx	r3
  4001d8:	bd10      	pop	{r4, pc}
	}
	else
	{
		tc_stop(TC0, 0);
  4001da:	480c      	ldr	r0, [pc, #48]	; (40020c <ADC_Handler+0x8c>)
  4001dc:	2100      	movs	r1, #0
  4001de:	4b0c      	ldr	r3, [pc, #48]	; (400210 <ADC_Handler+0x90>)
  4001e0:	4798      	blx	r3
  4001e2:	bd10      	pop	{r4, pc}
  4001e4:	00400721 	.word	0x00400721
  4001e8:	20000c14 	.word	0x20000c14
  4001ec:	40038000 	.word	0x40038000
  4001f0:	004015e9 	.word	0x004015e9
  4001f4:	20000c10 	.word	0x20000c10
  4001f8:	004015e1 	.word	0x004015e1
  4001fc:	20000c0c 	.word	0x20000c0c
  400200:	20000c08 	.word	0x20000c08
  400204:	2000000c 	.word	0x2000000c
  400208:	004015d5 	.word	0x004015d5
  40020c:	40010000 	.word	0x40010000
  400210:	004019c5 	.word	0x004019c5

00400214 <dac_init>:
#include "pmc.h"
#include "pio.h"
#include "stdint-gcc.h"

void dac_init (void)
{
  400214:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
  400216:	201e      	movs	r0, #30
  400218:	4c15      	ldr	r4, [pc, #84]	; (400270 <dac_init+0x5c>)
  40021a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40021c:	200c      	movs	r0, #12
  40021e:	47a0      	blx	r4
	
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB13);
  400220:	4d14      	ldr	r5, [pc, #80]	; (400274 <dac_init+0x60>)
  400222:	4628      	mov	r0, r5
  400224:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40022c:	4c12      	ldr	r4, [pc, #72]	; (400278 <dac_init+0x64>)
  40022e:	47a0      	blx	r4
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB14);
  400230:	4628      	mov	r0, r5
  400232:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40023a:	47a0      	blx	r4
	dacc_reset(DACC);
  40023c:	4c0f      	ldr	r4, [pc, #60]	; (40027c <dac_init+0x68>)
  40023e:	4620      	mov	r0, r4
  400240:	4b0f      	ldr	r3, [pc, #60]	; (400280 <dac_init+0x6c>)
  400242:	4798      	blx	r3
	dacc_set_writeprotect(DACC, 0);
  400244:	4620      	mov	r0, r4
  400246:	2100      	movs	r1, #0
  400248:	4b0e      	ldr	r3, [pc, #56]	; (400284 <dac_init+0x70>)
  40024a:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);
  40024c:	4620      	mov	r0, r4
  40024e:	2100      	movs	r1, #0
  400250:	4d0d      	ldr	r5, [pc, #52]	; (400288 <dac_init+0x74>)
  400252:	47a8      	blx	r5
	dacc_enable_channel(DACC, 1);	
  400254:	4620      	mov	r0, r4
  400256:	2101      	movs	r1, #1
  400258:	47a8      	blx	r5
	dacc_set_timing(DACC, 1, 0, 15);
  40025a:	4620      	mov	r0, r4
  40025c:	2101      	movs	r1, #1
  40025e:	2200      	movs	r2, #0
  400260:	230f      	movs	r3, #15
  400262:	4d0a      	ldr	r5, [pc, #40]	; (40028c <dac_init+0x78>)
  400264:	47a8      	blx	r5
	dacc_disable_trigger(DACC);
  400266:	4620      	mov	r0, r4
  400268:	4b09      	ldr	r3, [pc, #36]	; (400290 <dac_init+0x7c>)
  40026a:	4798      	blx	r3
  40026c:	bd38      	pop	{r3, r4, r5, pc}
  40026e:	bf00      	nop
  400270:	004018d1 	.word	0x004018d1
  400274:	400e1000 	.word	0x400e1000
  400278:	0040167d 	.word	0x0040167d
  40027c:	4003c000 	.word	0x4003c000
  400280:	004015ed 	.word	0x004015ed
  400284:	00401605 	.word	0x00401605
  400288:	00401669 	.word	0x00401669
  40028c:	00401639 	.word	0x00401639
  400290:	004015f5 	.word	0x004015f5

00400294 <dac_set>:
}

/* Sets DAC value iv mV */

void dac_set (uint32_t ch, uint32_t val)
{
  400294:	b538      	push	{r3, r4, r5, lr}
  400296:	460c      	mov	r4, r1
	if(ch)
  400298:	b148      	cbz	r0, 4002ae <dac_set+0x1a>
	{
		dacc_set_channel_selection(DACC, 1);
  40029a:	4d0a      	ldr	r5, [pc, #40]	; (4002c4 <dac_set+0x30>)
  40029c:	4628      	mov	r0, r5
  40029e:	2101      	movs	r1, #1
  4002a0:	4b09      	ldr	r3, [pc, #36]	; (4002c8 <dac_set+0x34>)
  4002a2:	4798      	blx	r3
		dacc_write_conversion_data(DACC, val);
  4002a4:	4628      	mov	r0, r5
  4002a6:	4621      	mov	r1, r4
  4002a8:	4b08      	ldr	r3, [pc, #32]	; (4002cc <dac_set+0x38>)
  4002aa:	4798      	blx	r3
  4002ac:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		dacc_set_channel_selection(DACC, 0);
  4002ae:	4d05      	ldr	r5, [pc, #20]	; (4002c4 <dac_set+0x30>)
  4002b0:	4628      	mov	r0, r5
  4002b2:	2100      	movs	r1, #0
  4002b4:	4b04      	ldr	r3, [pc, #16]	; (4002c8 <dac_set+0x34>)
  4002b6:	4798      	blx	r3
		dacc_write_conversion_data(DACC, val);
  4002b8:	4628      	mov	r0, r5
  4002ba:	4621      	mov	r1, r4
  4002bc:	4b03      	ldr	r3, [pc, #12]	; (4002cc <dac_set+0x38>)
  4002be:	4798      	blx	r3
  4002c0:	bd38      	pop	{r3, r4, r5, pc}
  4002c2:	bf00      	nop
  4002c4:	4003c000 	.word	0x4003c000
  4002c8:	00401621 	.word	0x00401621
  4002cc:	00401601 	.word	0x00401601

004002d0 <print_formating_error>:
	}
}


void print_formating_error(void)
{
  4002d0:	b530      	push	{r4, r5, lr}
  4002d2:	b087      	sub	sp, #28
	uint32_t charsPrinted;
	uint8_t printBuffer[20];
	
	charsPrinted = sprintf(printBuffer, "Comand format error!\n\r");
  4002d4:	ac01      	add	r4, sp, #4
  4002d6:	4d08      	ldr	r5, [pc, #32]	; (4002f8 <print_formating_error+0x28>)
  4002d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4002da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4002dc:	e895 0003 	ldmia.w	r5, {r0, r1}
  4002e0:	f844 0b04 	str.w	r0, [r4], #4
  4002e4:	f824 1b02 	strh.w	r1, [r4], #2
  4002e8:	0c09      	lsrs	r1, r1, #16
  4002ea:	7021      	strb	r1, [r4, #0]
	udi_cdc_write_buf(printBuffer, charsPrinted);
  4002ec:	a801      	add	r0, sp, #4
  4002ee:	2116      	movs	r1, #22
  4002f0:	4b02      	ldr	r3, [pc, #8]	; (4002fc <print_formating_error+0x2c>)
  4002f2:	4798      	blx	r3
}
  4002f4:	b007      	add	sp, #28
  4002f6:	bd30      	pop	{r4, r5, pc}
  4002f8:	00407d4c 	.word	0x00407d4c
  4002fc:	00400f7d 	.word	0x00400f7d

00400300 <parse_comands>:

void parse_comands (void)
{
  400300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400304:	b090      	sub	sp, #64	; 0x40
	static uint8_t holdingBuffer[HOLDING_BUFFER_SIZE];
	static uint8_t tempBuffer[10];
	uint8_t *startOfData;
	uint8_t printBuffer [50];
	uint32_t charsPrinted, entryCounter;
	volatile int32_t a, dacCh = 0;
  400306:	2300      	movs	r3, #0
  400308:	9301      	str	r3, [sp, #4]
	
	if(udi_cdc_is_rx_ready())
  40030a:	4b8e      	ldr	r3, [pc, #568]	; (400544 <parse_comands+0x244>)
  40030c:	4798      	blx	r3
  40030e:	2800      	cmp	r0, #0
  400310:	f000 81e0 	beq.w	4006d4 <parse_comands+0x3d4>
	{
		temp = udi_cdc_getc();
  400314:	4b8c      	ldr	r3, [pc, #560]	; (400548 <parse_comands+0x248>)
  400316:	4798      	blx	r3
  400318:	b2c4      	uxtb	r4, r0
		udi_cdc_putc(temp);
  40031a:	4620      	mov	r0, r4
  40031c:	4b8b      	ldr	r3, [pc, #556]	; (40054c <parse_comands+0x24c>)
  40031e:	4798      	blx	r3
		
		if(temp == 127) // 127 = backspace in ASCII?? (sholud be DELITE)
  400320:	2c7f      	cmp	r4, #127	; 0x7f
  400322:	d108      	bne.n	400336 <parse_comands+0x36>
		{
			if(insertPointer)
  400324:	4b8a      	ldr	r3, [pc, #552]	; (400550 <parse_comands+0x250>)
  400326:	781b      	ldrb	r3, [r3, #0]
  400328:	2b00      	cmp	r3, #0
  40032a:	f000 81d3 	beq.w	4006d4 <parse_comands+0x3d4>
			{
				insertPointer--;
  40032e:	3b01      	subs	r3, #1
  400330:	4a87      	ldr	r2, [pc, #540]	; (400550 <parse_comands+0x250>)
  400332:	7013      	strb	r3, [r2, #0]
  400334:	e1ce      	b.n	4006d4 <parse_comands+0x3d4>
			}
		}
		else if(insertPointer < (HOLDING_BUFFER_SIZE - 2))
  400336:	4b86      	ldr	r3, [pc, #536]	; (400550 <parse_comands+0x250>)
  400338:	781b      	ldrb	r3, [r3, #0]
  40033a:	2b11      	cmp	r3, #17
  40033c:	d804      	bhi.n	400348 <parse_comands+0x48>
		{
			holdingBuffer[insertPointer] = temp;
  40033e:	4a85      	ldr	r2, [pc, #532]	; (400554 <parse_comands+0x254>)
  400340:	54d4      	strb	r4, [r2, r3]
			insertPointer++;
  400342:	3301      	adds	r3, #1
  400344:	4a82      	ldr	r2, [pc, #520]	; (400550 <parse_comands+0x250>)
  400346:	7013      	strb	r3, [r2, #0]
		}	
		
		if(temp == '\r')
  400348:	2c0d      	cmp	r4, #13
  40034a:	f040 81c3 	bne.w	4006d4 <parse_comands+0x3d4>
		{
			udi_cdc_putc('\n');
  40034e:	200a      	movs	r0, #10
  400350:	4c7e      	ldr	r4, [pc, #504]	; (40054c <parse_comands+0x24c>)
  400352:	47a0      	blx	r4
			udi_cdc_putc('\r');
  400354:	200d      	movs	r0, #13
  400356:	47a0      	blx	r4
			
			holdingBuffer[insertPointer] = 0;
  400358:	487e      	ldr	r0, [pc, #504]	; (400554 <parse_comands+0x254>)
  40035a:	4b7d      	ldr	r3, [pc, #500]	; (400550 <parse_comands+0x250>)
  40035c:	781b      	ldrb	r3, [r3, #0]
  40035e:	2200      	movs	r2, #0
  400360:	54c2      	strb	r2, [r0, r3]
			startOfData = strpbrk(holdingBuffer, LIST_OF_KNOWN_COMANDS);
  400362:	497d      	ldr	r1, [pc, #500]	; (400558 <parse_comands+0x258>)
  400364:	4b7d      	ldr	r3, [pc, #500]	; (40055c <parse_comands+0x25c>)
  400366:	4798      	blx	r3
			//after this executes startOfData should point to first know character in string
			switch (*(startOfData))
  400368:	7804      	ldrb	r4, [r0, #0]
  40036a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  40036e:	2b13      	cmp	r3, #19
  400370:	f200 81a3 	bhi.w	4006ba <parse_comands+0x3ba>
  400374:	e8df f013 	tbh	[pc, r3, lsl #1]
  400378:	01a10036 	.word	0x01a10036
  40037c:	013901a1 	.word	0x013901a1
  400380:	003600b5 	.word	0x003600b5
  400384:	01a101a1 	.word	0x01a101a1
  400388:	01a101a1 	.word	0x01a101a1
  40038c:	01a101a1 	.word	0x01a101a1
  400390:	01a101a1 	.word	0x01a101a1
  400394:	01a101a1 	.word	0x01a101a1
  400398:	003601a1 	.word	0x003601a1
  40039c:	00250014 	.word	0x00250014
			{
				case COMAND_START_ACQ:
					daqSettings.startAcq = 1;
  4003a0:	2201      	movs	r2, #1
  4003a2:	4b6f      	ldr	r3, [pc, #444]	; (400560 <parse_comands+0x260>)
  4003a4:	751a      	strb	r2, [r3, #20]
					charsPrinted = sprintf(printBuffer, "Acquisition started\n\r");
  4003a6:	ac03      	add	r4, sp, #12
  4003a8:	4d6e      	ldr	r5, [pc, #440]	; (400564 <parse_comands+0x264>)
  4003aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4003ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4003ae:	e895 0003 	ldmia.w	r5, {r0, r1}
  4003b2:	f844 0b04 	str.w	r0, [r4], #4
  4003b6:	8021      	strh	r1, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  4003b8:	a803      	add	r0, sp, #12
  4003ba:	2115      	movs	r1, #21
  4003bc:	4b6a      	ldr	r3, [pc, #424]	; (400568 <parse_comands+0x268>)
  4003be:	4798      	blx	r3
					break;
  4003c0:	e185      	b.n	4006ce <parse_comands+0x3ce>
				
				case COMAND_STOP_ACQ:
					daqSettings.stopAcq = 1;
  4003c2:	2201      	movs	r2, #1
  4003c4:	4b66      	ldr	r3, [pc, #408]	; (400560 <parse_comands+0x260>)
  4003c6:	755a      	strb	r2, [r3, #21]
					charsPrinted = sprintf(printBuffer, "Acquisition stoped\n\r");
  4003c8:	ac03      	add	r4, sp, #12
  4003ca:	4d68      	ldr	r5, [pc, #416]	; (40056c <parse_comands+0x26c>)
  4003cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4003ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4003d0:	e895 0003 	ldmia.w	r5, {r0, r1}
  4003d4:	f844 0b04 	str.w	r0, [r4], #4
  4003d8:	7021      	strb	r1, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  4003da:	a803      	add	r0, sp, #12
  4003dc:	2114      	movs	r1, #20
  4003de:	4b62      	ldr	r3, [pc, #392]	; (400568 <parse_comands+0x268>)
  4003e0:	4798      	blx	r3
					break;
  4003e2:	e174      	b.n	4006ce <parse_comands+0x3ce>
					
				case COMAND_SET_SAMPLE_PERIOD:
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
  4003e4:	4b62      	ldr	r3, [pc, #392]	; (400570 <parse_comands+0x270>)
  4003e6:	701c      	strb	r4, [r3, #0]
					//skip_blank_chars(startOfData);
					startOfData++;
  4003e8:	1c42      	adds	r2, r0, #1
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  4003ea:	7843      	ldrb	r3, [r0, #1]
  4003ec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  4003f0:	b2c9      	uxtb	r1, r1
  4003f2:	2909      	cmp	r1, #9
  4003f4:	d814      	bhi.n	400420 <parse_comands+0x120>
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  4003f6:	495f      	ldr	r1, [pc, #380]	; (400574 <parse_comands+0x274>)
  4003f8:	428a      	cmp	r2, r1
  4003fa:	d813      	bhi.n	400424 <parse_comands+0x124>
  4003fc:	1c4e      	adds	r6, r1, #1
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
  4003fe:	2100      	movs	r1, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
  400400:	4d5d      	ldr	r5, [pc, #372]	; (400578 <parse_comands+0x278>)
  400402:	e002      	b.n	40040a <parse_comands+0x10a>
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  400404:	42b2      	cmp	r2, r6
  400406:	d00e      	beq.n	400426 <parse_comands+0x126>
						tempBuffer[n++] = *startOfData++;
  400408:	4601      	mov	r1, r0
  40040a:	1c48      	adds	r0, r1, #1
  40040c:	b2c0      	uxtb	r0, r0
  40040e:	546b      	strb	r3, [r5, r1]
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  400410:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  400414:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  400418:	b2c9      	uxtb	r1, r1
  40041a:	2909      	cmp	r1, #9
  40041c:	d9f2      	bls.n	400404 <parse_comands+0x104>
  40041e:	e002      	b.n	400426 <parse_comands+0x126>
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
  400420:	2000      	movs	r0, #0
  400422:	e000      	b.n	400426 <parse_comands+0x126>
  400424:	2000      	movs	r0, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
					}
					if(comandByte == COMAND_SET_SAMPLE_PERIOD)
  400426:	2c52      	cmp	r4, #82	; 0x52
  400428:	d126      	bne.n	400478 <parse_comands+0x178>
					{
						if(*startOfData == '\r')
  40042a:	2b0d      	cmp	r3, #13
  40042c:	d121      	bne.n	400472 <parse_comands+0x172>
						{
							tempBuffer[n] = 0;
  40042e:	4b52      	ldr	r3, [pc, #328]	; (400578 <parse_comands+0x278>)
  400430:	2200      	movs	r2, #0
  400432:	541a      	strb	r2, [r3, r0]
							a = atoi(tempBuffer);
  400434:	4618      	mov	r0, r3
  400436:	4b51      	ldr	r3, [pc, #324]	; (40057c <parse_comands+0x27c>)
  400438:	4798      	blx	r3
  40043a:	9002      	str	r0, [sp, #8]
							if(a < 2) a = 0;
  40043c:	9b02      	ldr	r3, [sp, #8]
  40043e:	2b01      	cmp	r3, #1
  400440:	bfdc      	itt	le
  400442:	2300      	movle	r3, #0
  400444:	9302      	strle	r3, [sp, #8]
							if(a > 50000) a = 50000;
  400446:	9a02      	ldr	r2, [sp, #8]
  400448:	f24c 3350 	movw	r3, #50000	; 0xc350
  40044c:	429a      	cmp	r2, r3
  40044e:	bfc8      	it	gt
  400450:	9302      	strgt	r3, [sp, #8]
							daqSettings.timerBase = a / 2;
  400452:	9a02      	ldr	r2, [sp, #8]
  400454:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
  400458:	1052      	asrs	r2, r2, #1
  40045a:	4b41      	ldr	r3, [pc, #260]	; (400560 <parse_comands+0x260>)
  40045c:	605a      	str	r2, [r3, #4]
							charsPrinted = sprintf(printBuffer, "Sample period set to %u uS\n\r", daqSettings.timerBase * 2);
  40045e:	a803      	add	r0, sp, #12
  400460:	4947      	ldr	r1, [pc, #284]	; (400580 <parse_comands+0x280>)
  400462:	0052      	lsls	r2, r2, #1
  400464:	4b47      	ldr	r3, [pc, #284]	; (400584 <parse_comands+0x284>)
  400466:	4798      	blx	r3
  400468:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  40046a:	a803      	add	r0, sp, #12
  40046c:	4b3e      	ldr	r3, [pc, #248]	; (400568 <parse_comands+0x268>)
  40046e:	4798      	blx	r3
  400470:	e12d      	b.n	4006ce <parse_comands+0x3ce>
						}
						else
						{
							print_formating_error();
  400472:	4b45      	ldr	r3, [pc, #276]	; (400588 <parse_comands+0x288>)
  400474:	4798      	blx	r3
  400476:	e12a      	b.n	4006ce <parse_comands+0x3ce>
						}	
					}
					else if(comandByte == COMAND_SET_AVERAGE_COUNT)
  400478:	2c41      	cmp	r4, #65	; 0x41
  40047a:	d117      	bne.n	4004ac <parse_comands+0x1ac>
					{
						if(*startOfData == '\r')
  40047c:	2b0d      	cmp	r3, #13
  40047e:	d112      	bne.n	4004a6 <parse_comands+0x1a6>
						{
							tempBuffer[n] = 0;
  400480:	4b3d      	ldr	r3, [pc, #244]	; (400578 <parse_comands+0x278>)
  400482:	2200      	movs	r2, #0
  400484:	541a      	strb	r2, [r3, r0]
							daqSettings.samplesNbr = atoi(tempBuffer);
  400486:	4618      	mov	r0, r3
  400488:	4b3c      	ldr	r3, [pc, #240]	; (40057c <parse_comands+0x27c>)
  40048a:	4798      	blx	r3
  40048c:	4602      	mov	r2, r0
  40048e:	4b34      	ldr	r3, [pc, #208]	; (400560 <parse_comands+0x260>)
  400490:	8218      	strh	r0, [r3, #16]
							charsPrinted = sprintf(printBuffer, "DAQ will atempt to take %u samples per channel\n\r", daqSettings.samplesNbr);
  400492:	a803      	add	r0, sp, #12
  400494:	493d      	ldr	r1, [pc, #244]	; (40058c <parse_comands+0x28c>)
  400496:	b292      	uxth	r2, r2
  400498:	4b3a      	ldr	r3, [pc, #232]	; (400584 <parse_comands+0x284>)
  40049a:	4798      	blx	r3
  40049c:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  40049e:	a803      	add	r0, sp, #12
  4004a0:	4b31      	ldr	r3, [pc, #196]	; (400568 <parse_comands+0x268>)
  4004a2:	4798      	blx	r3
  4004a4:	e113      	b.n	4006ce <parse_comands+0x3ce>
							//todo: limit samples per channel
						}
						else
						{
							print_formating_error();
  4004a6:	4b38      	ldr	r3, [pc, #224]	; (400588 <parse_comands+0x288>)
  4004a8:	4798      	blx	r3
  4004aa:	e110      	b.n	4006ce <parse_comands+0x3ce>
						}
					}
					else if(comandByte == COMAND_SET_MEASURMENT_NBR_COUNT)
  4004ac:	2c46      	cmp	r4, #70	; 0x46
  4004ae:	f040 810e 	bne.w	4006ce <parse_comands+0x3ce>
					{
						if(*startOfData == '\r')
  4004b2:	2b0d      	cmp	r3, #13
  4004b4:	d112      	bne.n	4004dc <parse_comands+0x1dc>
						{
							tempBuffer[n] = 0;
  4004b6:	4b30      	ldr	r3, [pc, #192]	; (400578 <parse_comands+0x278>)
  4004b8:	2200      	movs	r2, #0
  4004ba:	541a      	strb	r2, [r3, r0]
							daqSettings.cycles = atoi(tempBuffer);
  4004bc:	4618      	mov	r0, r3
  4004be:	4b2f      	ldr	r3, [pc, #188]	; (40057c <parse_comands+0x27c>)
  4004c0:	4798      	blx	r3
  4004c2:	4602      	mov	r2, r0
  4004c4:	4b26      	ldr	r3, [pc, #152]	; (400560 <parse_comands+0x260>)
  4004c6:	8258      	strh	r0, [r3, #18]
							charsPrinted = sprintf(printBuffer, "DAQ will sample all enebled channels %u times\n\r", daqSettings.cycles);
  4004c8:	a803      	add	r0, sp, #12
  4004ca:	4931      	ldr	r1, [pc, #196]	; (400590 <parse_comands+0x290>)
  4004cc:	b292      	uxth	r2, r2
  4004ce:	4b2d      	ldr	r3, [pc, #180]	; (400584 <parse_comands+0x284>)
  4004d0:	4798      	blx	r3
  4004d2:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  4004d4:	a803      	add	r0, sp, #12
  4004d6:	4b24      	ldr	r3, [pc, #144]	; (400568 <parse_comands+0x268>)
  4004d8:	4798      	blx	r3
  4004da:	e0f8      	b.n	4006ce <parse_comands+0x3ce>
							//todo: limit samples per channel
						}
						else
						{
							print_formating_error();
  4004dc:	4b2a      	ldr	r3, [pc, #168]	; (400588 <parse_comands+0x288>)
  4004de:	4798      	blx	r3
  4004e0:	e0f5      	b.n	4006ce <parse_comands+0x3ce>
					}
					break;
				
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
  4004e2:	1c43      	adds	r3, r0, #1
					entryCounter = 0;
  4004e4:	2600      	movs	r6, #0
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  4004e6:	4d24      	ldr	r5, [pc, #144]	; (400578 <parse_comands+0x278>)
  4004e8:	46a8      	mov	r8, r5
							if(*startOfData == '\r') break;
						}
						tempBuffer[n]  = 0;
						a = atoi(tempBuffer);
  4004ea:	4f24      	ldr	r7, [pc, #144]	; (40057c <parse_comands+0x27c>)
  4004ec:	e008      	b.n	400500 <parse_comands+0x200>
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  4004ee:	1c50      	adds	r0, r2, #1
  4004f0:	b2c0      	uxtb	r0, r0
  4004f2:	461c      	mov	r4, r3
  4004f4:	54a9      	strb	r1, [r5, r2]
							if(*startOfData == '\r') break;
  4004f6:	781a      	ldrb	r2, [r3, #0]
  4004f8:	2a0d      	cmp	r2, #13
  4004fa:	d008      	beq.n	40050e <parse_comands+0x20e>
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  4004fc:	4602      	mov	r2, r0
  4004fe:	e000      	b.n	400502 <parse_comands+0x202>
					break;
				
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
					entryCounter = 0;
  400500:	2200      	movs	r2, #0
  400502:	461c      	mov	r4, r3
					n = 0;
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
  400504:	f813 1b01 	ldrb.w	r1, [r3], #1
  400508:	292c      	cmp	r1, #44	; 0x2c
  40050a:	d1f0      	bne.n	4004ee <parse_comands+0x1ee>
  40050c:	e000      	b.n	400510 <parse_comands+0x210>
						{
							tempBuffer[n++] = *startOfData++;
  40050e:	4602      	mov	r2, r0
							if(*startOfData == '\r') break;
						}
						tempBuffer[n]  = 0;
  400510:	2300      	movs	r3, #0
  400512:	54ab      	strb	r3, [r5, r2]
						a = atoi(tempBuffer);
  400514:	4640      	mov	r0, r8
  400516:	47b8      	blx	r7
  400518:	9002      	str	r0, [sp, #8]
						if(a)
  40051a:	9b02      	ldr	r3, [sp, #8]
  40051c:	b163      	cbz	r3, 400538 <parse_comands+0x238>
						{
							if(a > 4) {a = 4;} // we only have 4 channels
  40051e:	9b02      	ldr	r3, [sp, #8]
  400520:	2b04      	cmp	r3, #4
  400522:	bfc4      	itt	gt
  400524:	2304      	movgt	r3, #4
  400526:	9302      	strgt	r3, [sp, #8]
							daqSettings.sequence[entryCounter] = a;
  400528:	9a02      	ldr	r2, [sp, #8]
  40052a:	4b0d      	ldr	r3, [pc, #52]	; (400560 <parse_comands+0x260>)
  40052c:	4433      	add	r3, r6
  40052e:	721a      	strb	r2, [r3, #8]
						else
						{
							daqSettings.sequence[entryCounter] = 0;
							break;
						}
						if(*startOfData == '\r') break;
  400530:	7823      	ldrb	r3, [r4, #0]
  400532:	2b0d      	cmp	r3, #13
  400534:	d12e      	bne.n	400594 <parse_comands+0x294>
  400536:	e031      	b.n	40059c <parse_comands+0x29c>
							if(a > 4) {a = 4;} // we only have 4 channels
							daqSettings.sequence[entryCounter] = a;
						}
						else
						{
							daqSettings.sequence[entryCounter] = 0;
  400538:	4b09      	ldr	r3, [pc, #36]	; (400560 <parse_comands+0x260>)
  40053a:	4433      	add	r3, r6
  40053c:	2200      	movs	r2, #0
  40053e:	721a      	strb	r2, [r3, #8]
							break;
  400540:	e02c      	b.n	40059c <parse_comands+0x29c>
  400542:	bf00      	nop
  400544:	00400cd5 	.word	0x00400cd5
  400548:	00400d91 	.word	0x00400d91
  40054c:	00400ec5 	.word	0x00400ec5
  400550:	200009b5 	.word	0x200009b5
  400554:	20000994 	.word	0x20000994
  400558:	00407d64 	.word	0x00407d64
  40055c:	004034e5 	.word	0x004034e5
  400560:	20000c18 	.word	0x20000c18
  400564:	00407d6c 	.word	0x00407d6c
  400568:	00400f7d 	.word	0x00400f7d
  40056c:	00407d84 	.word	0x00407d84
  400570:	200009b4 	.word	0x200009b4
  400574:	200009a7 	.word	0x200009a7
  400578:	200009a8 	.word	0x200009a8
  40057c:	004033cd 	.word	0x004033cd
  400580:	00407d9c 	.word	0x00407d9c
  400584:	0040348d 	.word	0x0040348d
  400588:	004002d1 	.word	0x004002d1
  40058c:	00407dbc 	.word	0x00407dbc
  400590:	00407df0 	.word	0x00407df0
						}
						if(*startOfData == '\r') break;
						entryCounter++;
  400594:	3601      	adds	r6, #1
						startOfData++;
  400596:	1c63      	adds	r3, r4, #1
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
					entryCounter = 0;
					n = 0;
					while(entryCounter < 8)
  400598:	2e08      	cmp	r6, #8
  40059a:	d1b1      	bne.n	400500 <parse_comands+0x200>
						if(*startOfData == '\r') break;
						entryCounter++;
						startOfData++;
					}
					entryCounter++;
					daqSettings.sequence[entryCounter] = 0;
  40059c:	4f4f      	ldr	r7, [pc, #316]	; (4006dc <parse_comands+0x3dc>)
  40059e:	443e      	add	r6, r7
  4005a0:	2300      	movs	r3, #0
  4005a2:	7273      	strb	r3, [r6, #9]
					charsPrinted = sprintf(printBuffer, "Sequence set to: ");
  4005a4:	ac03      	add	r4, sp, #12
  4005a6:	4d4e      	ldr	r5, [pc, #312]	; (4006e0 <parse_comands+0x3e0>)
  4005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4005ac:	682b      	ldr	r3, [r5, #0]
  4005ae:	8023      	strh	r3, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  4005b0:	a803      	add	r0, sp, #12
  4005b2:	2111      	movs	r1, #17
  4005b4:	4b4b      	ldr	r3, [pc, #300]	; (4006e4 <parse_comands+0x3e4>)
  4005b6:	4798      	blx	r3
  4005b8:	f107 0408 	add.w	r4, r7, #8
  4005bc:	f107 0810 	add.w	r8, r7, #16
					for(n = 0; n < 8; n++)
					{
						charsPrinted = sprintf(printBuffer, "%u ", daqSettings.sequence[n]);
  4005c0:	4f49      	ldr	r7, [pc, #292]	; (4006e8 <parse_comands+0x3e8>)
  4005c2:	4e4a      	ldr	r6, [pc, #296]	; (4006ec <parse_comands+0x3ec>)
						udi_cdc_write_buf(printBuffer, charsPrinted);
  4005c4:	4d47      	ldr	r5, [pc, #284]	; (4006e4 <parse_comands+0x3e4>)
					daqSettings.sequence[entryCounter] = 0;
					charsPrinted = sprintf(printBuffer, "Sequence set to: ");
					udi_cdc_write_buf(printBuffer, charsPrinted);
					for(n = 0; n < 8; n++)
					{
						charsPrinted = sprintf(printBuffer, "%u ", daqSettings.sequence[n]);
  4005c6:	a803      	add	r0, sp, #12
  4005c8:	4639      	mov	r1, r7
  4005ca:	7822      	ldrb	r2, [r4, #0]
  4005cc:	47b0      	blx	r6
  4005ce:	4601      	mov	r1, r0
						udi_cdc_write_buf(printBuffer, charsPrinted);
  4005d0:	a803      	add	r0, sp, #12
  4005d2:	47a8      	blx	r5
						if(daqSettings.sequence[n] == 0) break;	
  4005d4:	f814 3b01 	ldrb.w	r3, [r4], #1
  4005d8:	b10b      	cbz	r3, 4005de <parse_comands+0x2de>
					}
					entryCounter++;
					daqSettings.sequence[entryCounter] = 0;
					charsPrinted = sprintf(printBuffer, "Sequence set to: ");
					udi_cdc_write_buf(printBuffer, charsPrinted);
					for(n = 0; n < 8; n++)
  4005da:	4544      	cmp	r4, r8
  4005dc:	d1f3      	bne.n	4005c6 <parse_comands+0x2c6>
					{
						charsPrinted = sprintf(printBuffer, "%u ", daqSettings.sequence[n]);
						udi_cdc_write_buf(printBuffer, charsPrinted);
						if(daqSettings.sequence[n] == 0) break;	
					}
					udi_cdc_putc('\n');
  4005de:	200a      	movs	r0, #10
  4005e0:	4c43      	ldr	r4, [pc, #268]	; (4006f0 <parse_comands+0x3f0>)
  4005e2:	47a0      	blx	r4
					udi_cdc_putc('\r');
  4005e4:	200d      	movs	r0, #13
  4005e6:	47a0      	blx	r4
					
					break;
  4005e8:	e071      	b.n	4006ce <parse_comands+0x3ce>
					
				case COMAND_SET_DAC_VALUE:
					n = 0;
					startOfData++;
					if(*startOfData == '0') {dacCh = 0;}
  4005ea:	7843      	ldrb	r3, [r0, #1]
  4005ec:	2b30      	cmp	r3, #48	; 0x30
  4005ee:	d102      	bne.n	4005f6 <parse_comands+0x2f6>
  4005f0:	2300      	movs	r3, #0
  4005f2:	9301      	str	r3, [sp, #4]
  4005f4:	e004      	b.n	400600 <parse_comands+0x300>
					else if(*startOfData == '1') {dacCh = 1;}
  4005f6:	2b31      	cmp	r3, #49	; 0x31
  4005f8:	bf0c      	ite	eq
  4005fa:	2301      	moveq	r3, #1
					else {dacCh = 0;}
  4005fc:	2300      	movne	r3, #0
  4005fe:	9301      	str	r3, [sp, #4]
					startOfData++;
					if(*startOfData != ',') 
  400600:	7883      	ldrb	r3, [r0, #2]
  400602:	2b2c      	cmp	r3, #44	; 0x2c
  400604:	d002      	beq.n	40060c <parse_comands+0x30c>
					{
						print_formating_error();
  400606:	4b3b      	ldr	r3, [pc, #236]	; (4006f4 <parse_comands+0x3f4>)
  400608:	4798      	blx	r3
						break;
  40060a:	e060      	b.n	4006ce <parse_comands+0x3ce>
					}

					startOfData++;
  40060c:	3003      	adds	r0, #3
  40060e:	4603      	mov	r3, r0
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9' || *startOfData == '-')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  400610:	4d39      	ldr	r5, [pc, #228]	; (4006f8 <parse_comands+0x3f8>)
						tempBuffer[n++] = *startOfData++;
  400612:	4e3a      	ldr	r6, [pc, #232]	; (4006fc <parse_comands+0x3fc>)
						break;
					}

					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9' || *startOfData == '-')
  400614:	e003      	b.n	40061e <parse_comands+0x31e>
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  400616:	42ab      	cmp	r3, r5
  400618:	d80b      	bhi.n	400632 <parse_comands+0x332>
						tempBuffer[n++] = *startOfData++;
  40061a:	3301      	adds	r3, #1
  40061c:	5472      	strb	r2, [r6, r1]
  40061e:	1a19      	subs	r1, r3, r0
  400620:	b2c9      	uxtb	r1, r1
						break;
					}

					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9' || *startOfData == '-')
  400622:	781a      	ldrb	r2, [r3, #0]
  400624:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
  400628:	b2e4      	uxtb	r4, r4
  40062a:	2c09      	cmp	r4, #9
  40062c:	d9f3      	bls.n	400616 <parse_comands+0x316>
  40062e:	2a2d      	cmp	r2, #45	; 0x2d
  400630:	d0f1      	beq.n	400616 <parse_comands+0x316>
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
					}
					tempBuffer[n] = 0;
  400632:	2000      	movs	r0, #0
  400634:	4a31      	ldr	r2, [pc, #196]	; (4006fc <parse_comands+0x3fc>)
  400636:	5450      	strb	r0, [r2, r1]
					if(*startOfData == '\r')
  400638:	781b      	ldrb	r3, [r3, #0]
  40063a:	2b0d      	cmp	r3, #13
  40063c:	d13a      	bne.n	4006b4 <parse_comands+0x3b4>
					{
						a = atoi(tempBuffer);
  40063e:	4610      	mov	r0, r2
  400640:	4b2f      	ldr	r3, [pc, #188]	; (400700 <parse_comands+0x400>)
  400642:	4798      	blx	r3
  400644:	9002      	str	r0, [sp, #8]
						if(a < -10000) a = -10000;
  400646:	9a02      	ldr	r2, [sp, #8]
  400648:	4b2e      	ldr	r3, [pc, #184]	; (400704 <parse_comands+0x404>)
  40064a:	429a      	cmp	r2, r3
  40064c:	bfb8      	it	lt
  40064e:	9302      	strlt	r3, [sp, #8]
						if(a > 10000) a = 10000;
  400650:	9a02      	ldr	r2, [sp, #8]
  400652:	f242 7310 	movw	r3, #10000	; 0x2710
  400656:	429a      	cmp	r2, r3
  400658:	bfc8      	it	gt
  40065a:	9302      	strgt	r3, [sp, #8]
						a = (a * 1000) / DAC_GAIN;
  40065c:	9b02      	ldr	r3, [sp, #8]
  40065e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400662:	fb02 f303 	mul.w	r3, r2, r3
  400666:	4a28      	ldr	r2, [pc, #160]	; (400708 <parse_comands+0x408>)
  400668:	fb82 0203 	smull	r0, r2, r2, r3
  40066c:	17db      	asrs	r3, r3, #31
  40066e:	ebc3 23e2 	rsb	r3, r3, r2, asr #11
  400672:	9302      	str	r3, [sp, #8]
						a += 2048;
  400674:	9b02      	ldr	r3, [sp, #8]
  400676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
  40067a:	9302      	str	r3, [sp, #8]
						dac_set(dacCh, a);
  40067c:	9801      	ldr	r0, [sp, #4]
  40067e:	9902      	ldr	r1, [sp, #8]
  400680:	4b22      	ldr	r3, [pc, #136]	; (40070c <parse_comands+0x40c>)
  400682:	4798      	blx	r3
						charsPrinted = sprintf(printBuffer, "DAC channel %u set to %d mV\n\r", dacCh, ((a * DAC_GAIN) / 1000) - 10000);
  400684:	9a01      	ldr	r2, [sp, #4]
  400686:	9b02      	ldr	r3, [sp, #8]
  400688:	f241 3113 	movw	r1, #4883	; 0x1313
  40068c:	fb01 f303 	mul.w	r3, r1, r3
  400690:	491f      	ldr	r1, [pc, #124]	; (400710 <parse_comands+0x410>)
  400692:	fb81 0103 	smull	r0, r1, r1, r3
  400696:	17db      	asrs	r3, r3, #31
  400698:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
  40069c:	a803      	add	r0, sp, #12
  40069e:	491d      	ldr	r1, [pc, #116]	; (400714 <parse_comands+0x414>)
  4006a0:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
  4006a4:	3b10      	subs	r3, #16
  4006a6:	4c11      	ldr	r4, [pc, #68]	; (4006ec <parse_comands+0x3ec>)
  4006a8:	47a0      	blx	r4
  4006aa:	4601      	mov	r1, r0
						udi_cdc_write_buf(printBuffer, charsPrinted);
  4006ac:	a803      	add	r0, sp, #12
  4006ae:	4b0d      	ldr	r3, [pc, #52]	; (4006e4 <parse_comands+0x3e4>)
  4006b0:	4798      	blx	r3
					else
					{
						print_formating_error();
						break;
					}
					break;
  4006b2:	e00c      	b.n	4006ce <parse_comands+0x3ce>
						udi_cdc_write_buf(printBuffer, charsPrinted);
						
					}
					else
					{
						print_formating_error();
  4006b4:	4b0f      	ldr	r3, [pc, #60]	; (4006f4 <parse_comands+0x3f4>)
  4006b6:	4798      	blx	r3
						break;
  4006b8:	e009      	b.n	4006ce <parse_comands+0x3ce>
					}
					break;
					
				default:
					charsPrinted = sprintf(printBuffer, "Unknown comand!\n\r");
  4006ba:	ac03      	add	r4, sp, #12
  4006bc:	4d16      	ldr	r5, [pc, #88]	; (400718 <parse_comands+0x418>)
  4006be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4006c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4006c2:	682b      	ldr	r3, [r5, #0]
  4006c4:	8023      	strh	r3, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  4006c6:	a803      	add	r0, sp, #12
  4006c8:	2111      	movs	r1, #17
  4006ca:	4b06      	ldr	r3, [pc, #24]	; (4006e4 <parse_comands+0x3e4>)
  4006cc:	4798      	blx	r3
					
					
			}
			
			insertPointer = 0;
  4006ce:	2200      	movs	r2, #0
  4006d0:	4b12      	ldr	r3, [pc, #72]	; (40071c <parse_comands+0x41c>)
  4006d2:	701a      	strb	r2, [r3, #0]
		}
	
	}
}
  4006d4:	b010      	add	sp, #64	; 0x40
  4006d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4006da:	bf00      	nop
  4006dc:	20000c18 	.word	0x20000c18
  4006e0:	00407e20 	.word	0x00407e20
  4006e4:	00400f7d 	.word	0x00400f7d
  4006e8:	00407e34 	.word	0x00407e34
  4006ec:	0040348d 	.word	0x0040348d
  4006f0:	00400ec5 	.word	0x00400ec5
  4006f4:	004002d1 	.word	0x004002d1
  4006f8:	200009a7 	.word	0x200009a7
  4006fc:	200009a8 	.word	0x200009a8
  400700:	004033cd 	.word	0x004033cd
  400704:	ffffd8f0 	.word	0xffffd8f0
  400708:	6b5ebc37 	.word	0x6b5ebc37
  40070c:	00400295 	.word	0x00400295
  400710:	10624dd3 	.word	0x10624dd3
  400714:	00407e38 	.word	0x00407e38
  400718:	00407e58 	.word	0x00407e58
  40071c:	200009b5 	.word	0x200009b5

00400720 <get_current_DAQ_settings>:



daq_settings_t * get_current_DAQ_settings (void)
{
		daqSettings.sequence[0]= 1;
  400720:	4803      	ldr	r0, [pc, #12]	; (400730 <get_current_DAQ_settings+0x10>)
  400722:	2301      	movs	r3, #1
  400724:	7203      	strb	r3, [r0, #8]
		daqSettings.sequence[1]= 2;
  400726:	2302      	movs	r3, #2
  400728:	7243      	strb	r3, [r0, #9]
		daqSettings.sequence[2]= 3;
  40072a:	2303      	movs	r3, #3
  40072c:	7283      	strb	r3, [r0, #10]

	return (&daqSettings);
}
  40072e:	4770      	bx	lr
  400730:	20000c18 	.word	0x20000c18

00400734 <board_init>:
#include <conf_board.h>
#include "wdt.h"
#include "DAC.h"

void board_init(void)
{
  400734:	b570      	push	{r4, r5, r6, lr}
  400736:	b082      	sub	sp, #8
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	sysclk_init();
  400738:	4b0e      	ldr	r3, [pc, #56]	; (400774 <board_init+0x40>)
  40073a:	4798      	blx	r3
	wdt_disable(WDT);
  40073c:	480e      	ldr	r0, [pc, #56]	; (400778 <board_init+0x44>)
  40073e:	4b0f      	ldr	r3, [pc, #60]	; (40077c <board_init+0x48>)
  400740:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
  400742:	200b      	movs	r0, #11
  400744:	4b0e      	ldr	r3, [pc, #56]	; (400780 <board_init+0x4c>)
  400746:	4798      	blx	r3
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
  400748:	4e0e      	ldr	r6, [pc, #56]	; (400784 <board_init+0x50>)
  40074a:	2400      	movs	r4, #0
  40074c:	9400      	str	r4, [sp, #0]
  40074e:	4630      	mov	r0, r6
  400750:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400754:	4622      	mov	r2, r4
  400756:	4623      	mov	r3, r4
  400758:	4d0b      	ldr	r5, [pc, #44]	; (400788 <board_init+0x54>)
  40075a:	47a8      	blx	r5
	pio_set_output(PIOA, PIO_PA18, LOW, DISABLE, DISABLE);
  40075c:	9400      	str	r4, [sp, #0]
  40075e:	4630      	mov	r0, r6
  400760:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400764:	4622      	mov	r2, r4
  400766:	4623      	mov	r3, r4
  400768:	47a8      	blx	r5
	dac_init();
  40076a:	4b08      	ldr	r3, [pc, #32]	; (40078c <board_init+0x58>)
  40076c:	4798      	blx	r3
	
}
  40076e:	b002      	add	sp, #8
  400770:	bd70      	pop	{r4, r5, r6, pc}
  400772:	bf00      	nop
  400774:	004007e1 	.word	0x004007e1
  400778:	400e1450 	.word	0x400e1450
  40077c:	00403151 	.word	0x00403151
  400780:	004018d1 	.word	0x004018d1
  400784:	400e0e00 	.word	0x400e0e00
  400788:	0040170d 	.word	0x0040170d
  40078c:	00400215 	.word	0x00400215

00400790 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  400790:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400792:	2000      	movs	r0, #0
  400794:	213e      	movs	r1, #62	; 0x3e
  400796:	4b0a      	ldr	r3, [pc, #40]	; (4007c0 <sysclk_enable_usb+0x30>)
  400798:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40079a:	4c0a      	ldr	r4, [pc, #40]	; (4007c4 <sysclk_enable_usb+0x34>)
  40079c:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40079e:	2800      	cmp	r0, #0
  4007a0:	d0fc      	beq.n	40079c <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4007a2:	4b09      	ldr	r3, [pc, #36]	; (4007c8 <sysclk_enable_usb+0x38>)
  4007a4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4007a6:	4a09      	ldr	r2, [pc, #36]	; (4007cc <sysclk_enable_usb+0x3c>)
  4007a8:	4b09      	ldr	r3, [pc, #36]	; (4007d0 <sysclk_enable_usb+0x40>)
  4007aa:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  4007ac:	4c09      	ldr	r4, [pc, #36]	; (4007d4 <sysclk_enable_usb+0x44>)
  4007ae:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4007b0:	2800      	cmp	r0, #0
  4007b2:	d0fc      	beq.n	4007ae <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  4007b4:	2001      	movs	r0, #1
  4007b6:	4b08      	ldr	r3, [pc, #32]	; (4007d8 <sysclk_enable_usb+0x48>)
  4007b8:	4798      	blx	r3
		pmc_enable_udpck();
  4007ba:	4b08      	ldr	r3, [pc, #32]	; (4007dc <sysclk_enable_usb+0x4c>)
  4007bc:	4798      	blx	r3
  4007be:	bd10      	pop	{r4, pc}
  4007c0:	00401831 	.word	0x00401831
  4007c4:	00401885 	.word	0x00401885
  4007c8:	004018b5 	.word	0x004018b5
  4007cc:	000f3f02 	.word	0x000f3f02
  4007d0:	400e0400 	.word	0x400e0400
  4007d4:	004018c1 	.word	0x004018c1
  4007d8:	00401981 	.word	0x00401981
  4007dc:	00401995 	.word	0x00401995

004007e0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4007e0:	b510      	push	{r4, lr}
	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4007e2:	480d      	ldr	r0, [pc, #52]	; (400818 <sysclk_init+0x38>)
  4007e4:	4b0d      	ldr	r3, [pc, #52]	; (40081c <sysclk_init+0x3c>)
  4007e6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4007e8:	2000      	movs	r0, #0
  4007ea:	213e      	movs	r1, #62	; 0x3e
  4007ec:	4b0c      	ldr	r3, [pc, #48]	; (400820 <sysclk_init+0x40>)
  4007ee:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4007f0:	4c0c      	ldr	r4, [pc, #48]	; (400824 <sysclk_init+0x44>)
  4007f2:	47a0      	blx	r4
  4007f4:	2800      	cmp	r0, #0
  4007f6:	d0fc      	beq.n	4007f2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4007f8:	4b0b      	ldr	r3, [pc, #44]	; (400828 <sysclk_init+0x48>)
  4007fa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4007fc:	4a0b      	ldr	r2, [pc, #44]	; (40082c <sysclk_init+0x4c>)
  4007fe:	4b0c      	ldr	r3, [pc, #48]	; (400830 <sysclk_init+0x50>)
  400800:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400802:	4c0c      	ldr	r4, [pc, #48]	; (400834 <sysclk_init+0x54>)
  400804:	47a0      	blx	r4
  400806:	2800      	cmp	r0, #0
  400808:	d0fc      	beq.n	400804 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40080a:	2010      	movs	r0, #16
  40080c:	4b0a      	ldr	r3, [pc, #40]	; (400838 <sysclk_init+0x58>)
  40080e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400810:	4b0a      	ldr	r3, [pc, #40]	; (40083c <sysclk_init+0x5c>)
  400812:	4798      	blx	r3
  400814:	bd10      	pop	{r4, pc}
  400816:	bf00      	nop
  400818:	03d09000 	.word	0x03d09000
  40081c:	00403321 	.word	0x00403321
  400820:	00401831 	.word	0x00401831
  400824:	00401885 	.word	0x00401885
  400828:	00401895 	.word	0x00401895
  40082c:	201f3f03 	.word	0x201f3f03
  400830:	400e0400 	.word	0x400e0400
  400834:	004018a5 	.word	0x004018a5
  400838:	004017cd 	.word	0x004017cd
  40083c:	0040320d 	.word	0x0040320d

00400840 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400840:	490e      	ldr	r1, [pc, #56]	; (40087c <udi_cdc_comm_enable+0x3c>)
  400842:	2300      	movs	r3, #0
  400844:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  400846:	4a0e      	ldr	r2, [pc, #56]	; (400880 <udi_cdc_comm_enable+0x40>)
  400848:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  40084a:	4a0e      	ldr	r2, [pc, #56]	; (400884 <udi_cdc_comm_enable+0x44>)
  40084c:	20a1      	movs	r0, #161	; 0xa1
  40084e:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400850:	2020      	movs	r0, #32
  400852:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400854:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400856:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400858:	2002      	movs	r0, #2
  40085a:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  40085c:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  40085e:	4a0a      	ldr	r2, [pc, #40]	; (400888 <udi_cdc_comm_enable+0x48>)
  400860:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  400864:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  400866:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400868:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  40086a:	2308      	movs	r3, #8
  40086c:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  40086e:	780b      	ldrb	r3, [r1, #0]
  400870:	3301      	adds	r3, #1
  400872:	b2db      	uxtb	r3, r3
  400874:	700b      	strb	r3, [r1, #0]
	return true;
}
  400876:	2001      	movs	r0, #1
  400878:	4770      	bx	lr
  40087a:	bf00      	nop
  40087c:	20000a50 	.word	0x20000a50
  400880:	20000afc 	.word	0x20000afc
  400884:	20000a68 	.word	0x20000a68
  400888:	200009b8 	.word	0x200009b8

0040088c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  40088c:	4b02      	ldr	r3, [pc, #8]	; (400898 <udi_cdc_comm_disable+0xc>)
  40088e:	781a      	ldrb	r2, [r3, #0]
  400890:	3a01      	subs	r2, #1
  400892:	b2d2      	uxtb	r2, r2
  400894:	701a      	strb	r2, [r3, #0]
  400896:	4770      	bx	lr
  400898:	20000a50 	.word	0x20000a50

0040089c <udi_cdc_data_disable>:
{
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  40089c:	4b04      	ldr	r3, [pc, #16]	; (4008b0 <udi_cdc_data_disable+0x14>)
  40089e:	781a      	ldrb	r2, [r3, #0]
  4008a0:	3a01      	subs	r2, #1
  4008a2:	b2d2      	uxtb	r2, r2
  4008a4:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  4008a6:	781b      	ldrb	r3, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4008a8:	2200      	movs	r2, #0
  4008aa:	4b02      	ldr	r3, [pc, #8]	; (4008b4 <udi_cdc_data_disable+0x18>)
  4008ac:	701a      	strb	r2, [r3, #0]
  4008ae:	4770      	bx	lr
  4008b0:	200009c0 	.word	0x200009c0
  4008b4:	20000a5c 	.word	0x20000a5c

004008b8 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4008b8:	2000      	movs	r0, #0
  4008ba:	4770      	bx	lr

004008bc <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4008bc:	2000      	movs	r0, #0
  4008be:	4770      	bx	lr

004008c0 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
  4008c0:	4b1d      	ldr	r3, [pc, #116]	; (400938 <udi_cdc_comm_setup+0x78>)
  4008c2:	781b      	ldrb	r3, [r3, #0]
  4008c4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4008c8:	d012      	beq.n	4008f0 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4008ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4008ce:	2b20      	cmp	r3, #32
  4008d0:	d128      	bne.n	400924 <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  4008d2:	4b19      	ldr	r3, [pc, #100]	; (400938 <udi_cdc_comm_setup+0x78>)
  4008d4:	785b      	ldrb	r3, [r3, #1]
  4008d6:	2b21      	cmp	r3, #33	; 0x21
  4008d8:	d126      	bne.n	400928 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  4008da:	4b17      	ldr	r3, [pc, #92]	; (400938 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  4008dc:	88db      	ldrh	r3, [r3, #6]
  4008de:	2b07      	cmp	r3, #7
  4008e0:	d124      	bne.n	40092c <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  4008e2:	4b15      	ldr	r3, [pc, #84]	; (400938 <udi_cdc_comm_setup+0x78>)
  4008e4:	4a15      	ldr	r2, [pc, #84]	; (40093c <udi_cdc_comm_setup+0x7c>)
  4008e6:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4008e8:	2207      	movs	r2, #7
  4008ea:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4008ec:	2001      	movs	r0, #1
  4008ee:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4008f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4008f4:	2b20      	cmp	r3, #32
  4008f6:	d11b      	bne.n	400930 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  4008f8:	4b0f      	ldr	r3, [pc, #60]	; (400938 <udi_cdc_comm_setup+0x78>)
  4008fa:	7858      	ldrb	r0, [r3, #1]
  4008fc:	2820      	cmp	r0, #32
  4008fe:	d004      	beq.n	40090a <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400900:	2822      	cmp	r0, #34	; 0x22
  400902:	bf14      	ite	ne
  400904:	2000      	movne	r0, #0
  400906:	2001      	moveq	r0, #1
  400908:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40090a:	4b0b      	ldr	r3, [pc, #44]	; (400938 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  40090c:	88db      	ldrh	r3, [r3, #6]
  40090e:	2b07      	cmp	r3, #7
  400910:	d110      	bne.n	400934 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
  400912:	4b09      	ldr	r3, [pc, #36]	; (400938 <udi_cdc_comm_setup+0x78>)
  400914:	4a0a      	ldr	r2, [pc, #40]	; (400940 <udi_cdc_comm_setup+0x80>)
  400916:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  400918:	4a08      	ldr	r2, [pc, #32]	; (40093c <udi_cdc_comm_setup+0x7c>)
  40091a:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  40091c:	2207      	movs	r2, #7
  40091e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  400920:	2001      	movs	r0, #1
  400922:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400924:	2000      	movs	r0, #0
  400926:	4770      	bx	lr
  400928:	2000      	movs	r0, #0
  40092a:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  40092c:	2000      	movs	r0, #0
  40092e:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400930:	2000      	movs	r0, #0
  400932:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  400934:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
  400936:	4770      	bx	lr
  400938:	20000c3c 	.word	0x20000c3c
  40093c:	200009b8 	.word	0x200009b8
  400940:	00400945 	.word	0x00400945

00400944 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  400944:	4770      	bx	lr
  400946:	bf00      	nop

00400948 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
  400948:	b530      	push	{r4, r5, lr}
  40094a:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  40094c:	4b42      	ldr	r3, [pc, #264]	; (400a58 <udi_cdc_tx_send+0x110>)
  40094e:	781b      	ldrb	r3, [r3, #0]
  400950:	f013 0fff 	tst.w	r3, #255	; 0xff
  400954:	d17e      	bne.n	400a54 <udi_cdc_tx_send+0x10c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  400956:	4b41      	ldr	r3, [pc, #260]	; (400a5c <udi_cdc_tx_send+0x114>)
  400958:	4798      	blx	r3
  40095a:	b130      	cbz	r0, 40096a <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  40095c:	4b40      	ldr	r3, [pc, #256]	; (400a60 <udi_cdc_tx_send+0x118>)
  40095e:	881c      	ldrh	r4, [r3, #0]
  400960:	4b40      	ldr	r3, [pc, #256]	; (400a64 <udi_cdc_tx_send+0x11c>)
  400962:	4798      	blx	r3
  400964:	4284      	cmp	r4, r0
  400966:	d106      	bne.n	400976 <udi_cdc_tx_send+0x2e>
  400968:	e074      	b.n	400a54 <udi_cdc_tx_send+0x10c>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  40096a:	4b3d      	ldr	r3, [pc, #244]	; (400a60 <udi_cdc_tx_send+0x118>)
  40096c:	881c      	ldrh	r4, [r3, #0]
  40096e:	4b3e      	ldr	r3, [pc, #248]	; (400a68 <udi_cdc_tx_send+0x120>)
  400970:	4798      	blx	r3
  400972:	4284      	cmp	r4, r0
  400974:	d06e      	beq.n	400a54 <udi_cdc_tx_send+0x10c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400976:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  40097a:	f1d3 0501 	rsbs	r5, r3, #1
  40097e:	bf38      	it	cc
  400980:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400982:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400984:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400988:	2200      	movs	r2, #0
  40098a:	4b38      	ldr	r3, [pc, #224]	; (400a6c <udi_cdc_tx_send+0x124>)
  40098c:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40098e:	4b38      	ldr	r3, [pc, #224]	; (400a70 <udi_cdc_tx_send+0x128>)
  400990:	781c      	ldrb	r4, [r3, #0]
  400992:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400994:	4b37      	ldr	r3, [pc, #220]	; (400a74 <udi_cdc_tx_send+0x12c>)
  400996:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  40099a:	b9db      	cbnz	r3, 4009d4 <udi_cdc_tx_send+0x8c>
		sof_zlp_counter++;
  40099c:	4b36      	ldr	r3, [pc, #216]	; (400a78 <udi_cdc_tx_send+0x130>)
  40099e:	881a      	ldrh	r2, [r3, #0]
  4009a0:	3201      	adds	r2, #1
  4009a2:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4009a4:	4b2d      	ldr	r3, [pc, #180]	; (400a5c <udi_cdc_tx_send+0x114>)
  4009a6:	4798      	blx	r3
  4009a8:	b918      	cbnz	r0, 4009b2 <udi_cdc_tx_send+0x6a>
  4009aa:	4b33      	ldr	r3, [pc, #204]	; (400a78 <udi_cdc_tx_send+0x130>)
  4009ac:	881b      	ldrh	r3, [r3, #0]
  4009ae:	2b63      	cmp	r3, #99	; 0x63
  4009b0:	d907      	bls.n	4009c2 <udi_cdc_tx_send+0x7a>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4009b2:	4b2a      	ldr	r3, [pc, #168]	; (400a5c <udi_cdc_tx_send+0x114>)
  4009b4:	4798      	blx	r3
  4009b6:	b168      	cbz	r0, 4009d4 <udi_cdc_tx_send+0x8c>
  4009b8:	4b2f      	ldr	r3, [pc, #188]	; (400a78 <udi_cdc_tx_send+0x130>)
  4009ba:	881b      	ldrh	r3, [r3, #0]
  4009bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  4009c0:	d208      	bcs.n	4009d4 <udi_cdc_tx_send+0x8c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4009c2:	2d00      	cmp	r5, #0
  4009c4:	d046      	beq.n	400a54 <udi_cdc_tx_send+0x10c>
		cpu_irq_enable();
  4009c6:	2201      	movs	r2, #1
  4009c8:	4b28      	ldr	r3, [pc, #160]	; (400a6c <udi_cdc_tx_send+0x124>)
  4009ca:	701a      	strb	r2, [r3, #0]
  4009cc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4009d0:	b662      	cpsie	i
  4009d2:	e03f      	b.n	400a54 <udi_cdc_tx_send+0x10c>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  4009d4:	2200      	movs	r2, #0
  4009d6:	4b28      	ldr	r3, [pc, #160]	; (400a78 <udi_cdc_tx_send+0x130>)
  4009d8:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  4009da:	4b28      	ldr	r3, [pc, #160]	; (400a7c <udi_cdc_tx_send+0x134>)
  4009dc:	781b      	ldrb	r3, [r3, #0]
  4009de:	f013 0fff 	tst.w	r3, #255	; 0xff
  4009e2:	d106      	bne.n	4009f2 <udi_cdc_tx_send+0xaa>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  4009e4:	4294      	cmp	r4, r2
  4009e6:	bf14      	ite	ne
  4009e8:	2200      	movne	r2, #0
  4009ea:	2201      	moveq	r2, #1
  4009ec:	4b20      	ldr	r3, [pc, #128]	; (400a70 <udi_cdc_tx_send+0x128>)
  4009ee:	701a      	strb	r2, [r3, #0]
  4009f0:	e003      	b.n	4009fa <udi_cdc_tx_send+0xb2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  4009f2:	f1d4 0401 	rsbs	r4, r4, #1
  4009f6:	bf38      	it	cc
  4009f8:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4009fa:	2201      	movs	r2, #1
  4009fc:	4b16      	ldr	r3, [pc, #88]	; (400a58 <udi_cdc_tx_send+0x110>)
  4009fe:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400a00:	b125      	cbz	r5, 400a0c <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
  400a02:	4b1a      	ldr	r3, [pc, #104]	; (400a6c <udi_cdc_tx_send+0x124>)
  400a04:	701a      	strb	r2, [r3, #0]
  400a06:	f3bf 8f5f 	dmb	sy
  400a0a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400a0c:	4625      	mov	r5, r4
  400a0e:	4b19      	ldr	r3, [pc, #100]	; (400a74 <udi_cdc_tx_send+0x12c>)
  400a10:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
  400a14:	3c40      	subs	r4, #64	; 0x40
  400a16:	bf18      	it	ne
  400a18:	2401      	movne	r4, #1
	if (b_short_packet) {
  400a1a:	b164      	cbz	r4, 400a36 <udi_cdc_tx_send+0xee>
		if (udd_is_high_speed()) {
  400a1c:	4b0f      	ldr	r3, [pc, #60]	; (400a5c <udi_cdc_tx_send+0x114>)
  400a1e:	4798      	blx	r3
  400a20:	b120      	cbz	r0, 400a2c <udi_cdc_tx_send+0xe4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400a22:	4b10      	ldr	r3, [pc, #64]	; (400a64 <udi_cdc_tx_send+0x11c>)
  400a24:	4798      	blx	r3
  400a26:	4b0e      	ldr	r3, [pc, #56]	; (400a60 <udi_cdc_tx_send+0x118>)
  400a28:	8018      	strh	r0, [r3, #0]
  400a2a:	e007      	b.n	400a3c <udi_cdc_tx_send+0xf4>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400a2c:	4b0e      	ldr	r3, [pc, #56]	; (400a68 <udi_cdc_tx_send+0x120>)
  400a2e:	4798      	blx	r3
  400a30:	4b0b      	ldr	r3, [pc, #44]	; (400a60 <udi_cdc_tx_send+0x118>)
  400a32:	8018      	strh	r0, [r3, #0]
  400a34:	e002      	b.n	400a3c <udi_cdc_tx_send+0xf4>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400a36:	2200      	movs	r2, #0
  400a38:	4b09      	ldr	r3, [pc, #36]	; (400a60 <udi_cdc_tx_send+0x118>)
  400a3a:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400a3c:	4b0d      	ldr	r3, [pc, #52]	; (400a74 <udi_cdc_tx_send+0x12c>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  400a3e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  400a42:	4a0f      	ldr	r2, [pc, #60]	; (400a80 <udi_cdc_tx_send+0x138>)
  400a44:	9200      	str	r2, [sp, #0]
  400a46:	2081      	movs	r0, #129	; 0x81
  400a48:	4621      	mov	r1, r4
  400a4a:	4a0e      	ldr	r2, [pc, #56]	; (400a84 <udi_cdc_tx_send+0x13c>)
  400a4c:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  400a50:	4c0d      	ldr	r4, [pc, #52]	; (400a88 <udi_cdc_tx_send+0x140>)
  400a52:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  400a54:	b003      	add	sp, #12
  400a56:	bd30      	pop	{r4, r5, pc}
  400a58:	20000a64 	.word	0x20000a64
  400a5c:	00402afd 	.word	0x00402afd
  400a60:	20000a58 	.word	0x20000a58
  400a64:	00402b65 	.word	0x00402b65
  400a68:	00402b55 	.word	0x00402b55
  400a6c:	200000b0 	.word	0x200000b0
  400a70:	200009c4 	.word	0x200009c4
  400a74:	200009c8 	.word	0x200009c8
  400a78:	20000a5e 	.word	0x20000a5e
  400a7c:	20000af8 	.word	0x20000af8
  400a80:	00400a8d 	.word	0x00400a8d
  400a84:	200009cc 	.word	0x200009cc
  400a88:	00402eb5 	.word	0x00402eb5

00400a8c <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400a8c:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400a8e:	b978      	cbnz	r0, 400ab0 <udi_cdc_data_sent+0x24>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400a90:	4b08      	ldr	r3, [pc, #32]	; (400ab4 <udi_cdc_data_sent+0x28>)
  400a92:	781b      	ldrb	r3, [r3, #0]
  400a94:	f013 0fff 	tst.w	r3, #255	; 0xff
  400a98:	bf14      	ite	ne
  400a9a:	2200      	movne	r2, #0
  400a9c:	2201      	moveq	r2, #1
  400a9e:	4b06      	ldr	r3, [pc, #24]	; (400ab8 <udi_cdc_data_sent+0x2c>)
  400aa0:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400aa4:	4b05      	ldr	r3, [pc, #20]	; (400abc <udi_cdc_data_sent+0x30>)
  400aa6:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400aa8:	4b05      	ldr	r3, [pc, #20]	; (400ac0 <udi_cdc_data_sent+0x34>)
  400aaa:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  400aac:	4b05      	ldr	r3, [pc, #20]	; (400ac4 <udi_cdc_data_sent+0x38>)
  400aae:	4798      	blx	r3
  400ab0:	bd08      	pop	{r3, pc}
  400ab2:	bf00      	nop
  400ab4:	200009c4 	.word	0x200009c4
  400ab8:	200009c8 	.word	0x200009c8
  400abc:	20000af8 	.word	0x20000af8
  400ac0:	20000a64 	.word	0x20000a64
  400ac4:	00400949 	.word	0x00400949

00400ac8 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
  400ac8:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  400aca:	2000      	movs	r0, #0
  400acc:	4b01      	ldr	r3, [pc, #4]	; (400ad4 <udi_cdc_data_sof_notify+0xc>)
  400ace:	4798      	blx	r3
  400ad0:	bd08      	pop	{r3, pc}
  400ad2:	bf00      	nop
  400ad4:	00400949 	.word	0x00400949

00400ad8 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ad8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400adc:	b672      	cpsid	i
  400ade:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400ae2:	2100      	movs	r1, #0
  400ae4:	4a09      	ldr	r2, [pc, #36]	; (400b0c <udi_cdc_multi_get_nb_received_data+0x34>)
  400ae6:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400ae8:	4a09      	ldr	r2, [pc, #36]	; (400b10 <udi_cdc_multi_get_nb_received_data+0x38>)
  400aea:	8810      	ldrh	r0, [r2, #0]
  400aec:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400aee:	4a09      	ldr	r2, [pc, #36]	; (400b14 <udi_cdc_multi_get_nb_received_data+0x3c>)
  400af0:	7811      	ldrb	r1, [r2, #0]
  400af2:	4a09      	ldr	r2, [pc, #36]	; (400b18 <udi_cdc_multi_get_nb_received_data+0x40>)
  400af4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  400af8:	1a10      	subs	r0, r2, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400afa:	b92b      	cbnz	r3, 400b08 <udi_cdc_multi_get_nb_received_data+0x30>
		cpu_irq_enable();
  400afc:	2201      	movs	r2, #1
  400afe:	4b03      	ldr	r3, [pc, #12]	; (400b0c <udi_cdc_multi_get_nb_received_data+0x34>)
  400b00:	701a      	strb	r2, [r3, #0]
  400b02:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400b06:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400b08:	4770      	bx	lr
  400b0a:	bf00      	nop
  400b0c:	200000b0 	.word	0x200000b0
  400b10:	20000a54 	.word	0x20000a54
  400b14:	20000a60 	.word	0x20000a60
  400b18:	20000a4c 	.word	0x20000a4c

00400b1c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400b1c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400b1e:	4b03      	ldr	r3, [pc, #12]	; (400b2c <udi_cdc_multi_is_rx_ready+0x10>)
  400b20:	4798      	blx	r3
}
  400b22:	3000      	adds	r0, #0
  400b24:	bf18      	it	ne
  400b26:	2001      	movne	r0, #1
  400b28:	bd08      	pop	{r3, pc}
  400b2a:	bf00      	nop
  400b2c:	00400ad9 	.word	0x00400ad9

00400b30 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400b30:	b510      	push	{r4, lr}
  400b32:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b34:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400b38:	f1d3 0301 	rsbs	r3, r3, #1
  400b3c:	bf38      	it	cc
  400b3e:	2300      	movcc	r3, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400b40:	b672      	cpsid	i
  400b42:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b46:	2100      	movs	r1, #0
  400b48:	4a1e      	ldr	r2, [pc, #120]	; (400bc4 <udi_cdc_rx_start+0x94>)
  400b4a:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400b4c:	4a1e      	ldr	r2, [pc, #120]	; (400bc8 <udi_cdc_rx_start+0x98>)
  400b4e:	7814      	ldrb	r4, [r2, #0]
  400b50:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
  400b52:	4a1e      	ldr	r2, [pc, #120]	; (400bcc <udi_cdc_rx_start+0x9c>)
  400b54:	7812      	ldrb	r2, [r2, #0]
  400b56:	f012 0fff 	tst.w	r2, #255	; 0xff
  400b5a:	d107      	bne.n	400b6c <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400b5c:	4a1c      	ldr	r2, [pc, #112]	; (400bd0 <udi_cdc_rx_start+0xa0>)
  400b5e:	8812      	ldrh	r2, [r2, #0]
  400b60:	b292      	uxth	r2, r2
  400b62:	491c      	ldr	r1, [pc, #112]	; (400bd4 <udi_cdc_rx_start+0xa4>)
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  400b64:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
  400b68:	4291      	cmp	r1, r2
  400b6a:	d908      	bls.n	400b7e <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b6c:	b33b      	cbz	r3, 400bbe <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400b6e:	2201      	movs	r2, #1
  400b70:	4b14      	ldr	r3, [pc, #80]	; (400bc4 <udi_cdc_rx_start+0x94>)
  400b72:	701a      	strb	r2, [r3, #0]
  400b74:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400b78:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400b7a:	2000      	movs	r0, #0
  400b7c:	e020      	b.n	400bc0 <udi_cdc_rx_start+0x90>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  400b7e:	2100      	movs	r1, #0
  400b80:	4a13      	ldr	r2, [pc, #76]	; (400bd0 <udi_cdc_rx_start+0xa0>)
  400b82:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400b84:	428c      	cmp	r4, r1
  400b86:	bf14      	ite	ne
  400b88:	2100      	movne	r1, #0
  400b8a:	2101      	moveq	r1, #1
  400b8c:	4a0e      	ldr	r2, [pc, #56]	; (400bc8 <udi_cdc_rx_start+0x98>)
  400b8e:	7011      	strb	r1, [r2, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  400b90:	2101      	movs	r1, #1
  400b92:	4a0e      	ldr	r2, [pc, #56]	; (400bcc <udi_cdc_rx_start+0x9c>)
  400b94:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b96:	b123      	cbz	r3, 400ba2 <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  400b98:	4b0a      	ldr	r3, [pc, #40]	; (400bc4 <udi_cdc_rx_start+0x94>)
  400b9a:	7019      	strb	r1, [r3, #0]
  400b9c:	f3bf 8f5f 	dmb	sy
  400ba0:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
  400ba2:	2000      	movs	r0, #0
  400ba4:	4b0c      	ldr	r3, [pc, #48]	; (400bd8 <udi_cdc_rx_start+0xa8>)
  400ba6:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  400ba8:	4b0c      	ldr	r3, [pc, #48]	; (400bdc <udi_cdc_rx_start+0xac>)
  400baa:	9300      	str	r3, [sp, #0]
  400bac:	2002      	movs	r0, #2
  400bae:	2101      	movs	r1, #1
  400bb0:	4a0b      	ldr	r2, [pc, #44]	; (400be0 <udi_cdc_rx_start+0xb0>)
  400bb2:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400bb6:	2340      	movs	r3, #64	; 0x40
  400bb8:	4c0a      	ldr	r4, [pc, #40]	; (400be4 <udi_cdc_rx_start+0xb4>)
  400bba:	47a0      	blx	r4
  400bbc:	e000      	b.n	400bc0 <udi_cdc_rx_start+0x90>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400bbe:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  400bc0:	b002      	add	sp, #8
  400bc2:	bd10      	pop	{r4, pc}
  400bc4:	200000b0 	.word	0x200000b0
  400bc8:	20000a60 	.word	0x20000a60
  400bcc:	20000af4 	.word	0x20000af4
  400bd0:	20000a54 	.word	0x20000a54
  400bd4:	20000a4c 	.word	0x20000a4c
  400bd8:	00400b1d 	.word	0x00400b1d
  400bdc:	00400c79 	.word	0x00400c79
  400be0:	20000a74 	.word	0x20000a74
  400be4:	00402eb5 	.word	0x00402eb5

00400be8 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
  400be8:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
  400bea:	2400      	movs	r4, #0
  400bec:	4b15      	ldr	r3, [pc, #84]	; (400c44 <udi_cdc_data_enable+0x5c>)
  400bee:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  400bf0:	4b15      	ldr	r3, [pc, #84]	; (400c48 <udi_cdc_data_enable+0x60>)
  400bf2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400bf4:	4b15      	ldr	r3, [pc, #84]	; (400c4c <udi_cdc_data_enable+0x64>)
  400bf6:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400bf8:	4b15      	ldr	r3, [pc, #84]	; (400c50 <udi_cdc_data_enable+0x68>)
  400bfa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400bfc:	4b15      	ldr	r3, [pc, #84]	; (400c54 <udi_cdc_data_enable+0x6c>)
  400bfe:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400c00:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400c02:	4b15      	ldr	r3, [pc, #84]	; (400c58 <udi_cdc_data_enable+0x70>)
  400c04:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  400c06:	4620      	mov	r0, r4
  400c08:	4b14      	ldr	r3, [pc, #80]	; (400c5c <udi_cdc_data_enable+0x74>)
  400c0a:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400c0c:	4b14      	ldr	r3, [pc, #80]	; (400c60 <udi_cdc_data_enable+0x78>)
  400c0e:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400c10:	4b14      	ldr	r3, [pc, #80]	; (400c64 <udi_cdc_data_enable+0x7c>)
  400c12:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400c14:	4b14      	ldr	r3, [pc, #80]	; (400c68 <udi_cdc_data_enable+0x80>)
  400c16:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
  400c18:	4b14      	ldr	r3, [pc, #80]	; (400c6c <udi_cdc_data_enable+0x84>)
  400c1a:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400c1c:	4620      	mov	r0, r4
  400c1e:	4b14      	ldr	r3, [pc, #80]	; (400c70 <udi_cdc_data_enable+0x88>)
  400c20:	4798      	blx	r3
  400c22:	4602      	mov	r2, r0
  400c24:	b158      	cbz	r0, 400c3e <udi_cdc_data_enable+0x56>
		return false;
	}
	udi_cdc_nb_data_enabled++;
  400c26:	4b07      	ldr	r3, [pc, #28]	; (400c44 <udi_cdc_data_enable+0x5c>)
  400c28:	7819      	ldrb	r1, [r3, #0]
  400c2a:	3101      	adds	r1, #1
  400c2c:	b2c9      	uxtb	r1, r1
  400c2e:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  400c30:	781b      	ldrb	r3, [r3, #0]
  400c32:	b2db      	uxtb	r3, r3
  400c34:	2b01      	cmp	r3, #1
  400c36:	d102      	bne.n	400c3e <udi_cdc_data_enable+0x56>
		udi_cdc_data_running = true;
  400c38:	2101      	movs	r1, #1
  400c3a:	4b0e      	ldr	r3, [pc, #56]	; (400c74 <udi_cdc_data_enable+0x8c>)
  400c3c:	7019      	strb	r1, [r3, #0]
	}
	return true;
}
  400c3e:	4610      	mov	r0, r2
  400c40:	bd10      	pop	{r4, pc}
  400c42:	bf00      	nop
  400c44:	200009c0 	.word	0x200009c0
  400c48:	20000a64 	.word	0x20000a64
  400c4c:	20000af8 	.word	0x20000af8
  400c50:	200009c4 	.word	0x200009c4
  400c54:	200009c8 	.word	0x200009c8
  400c58:	20000a58 	.word	0x20000a58
  400c5c:	00400949 	.word	0x00400949
  400c60:	20000af4 	.word	0x20000af4
  400c64:	20000a60 	.word	0x20000a60
  400c68:	20000a4c 	.word	0x20000a4c
  400c6c:	20000a54 	.word	0x20000a54
  400c70:	00400b31 	.word	0x00400b31
  400c74:	20000a5c 	.word	0x20000a5c

00400c78 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400c78:	b510      	push	{r4, lr}
  400c7a:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400c7c:	b9d0      	cbnz	r0, 400cb4 <udi_cdc_data_received+0x3c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400c7e:	4b0e      	ldr	r3, [pc, #56]	; (400cb8 <udi_cdc_data_received+0x40>)
  400c80:	781b      	ldrb	r3, [r3, #0]
  400c82:	f013 0fff 	tst.w	r3, #255	; 0xff
  400c86:	bf14      	ite	ne
  400c88:	2300      	movne	r3, #0
  400c8a:	2301      	moveq	r3, #1
	if (!n) {
  400c8c:	b951      	cbnz	r1, 400ca4 <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
  400c8e:	490b      	ldr	r1, [pc, #44]	; (400cbc <udi_cdc_data_received+0x44>)
  400c90:	9100      	str	r1, [sp, #0]
  400c92:	4610      	mov	r0, r2
  400c94:	2101      	movs	r1, #1
  400c96:	4a0a      	ldr	r2, [pc, #40]	; (400cc0 <udi_cdc_data_received+0x48>)
  400c98:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  400c9c:	2340      	movs	r3, #64	; 0x40
  400c9e:	4c09      	ldr	r4, [pc, #36]	; (400cc4 <udi_cdc_data_received+0x4c>)
  400ca0:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  400ca2:	e007      	b.n	400cb4 <udi_cdc_data_received+0x3c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400ca4:	4a08      	ldr	r2, [pc, #32]	; (400cc8 <udi_cdc_data_received+0x50>)
  400ca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  400caa:	2000      	movs	r0, #0
  400cac:	4b07      	ldr	r3, [pc, #28]	; (400ccc <udi_cdc_data_received+0x54>)
  400cae:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  400cb0:	4b07      	ldr	r3, [pc, #28]	; (400cd0 <udi_cdc_data_received+0x58>)
  400cb2:	4798      	blx	r3
}
  400cb4:	b002      	add	sp, #8
  400cb6:	bd10      	pop	{r4, pc}
  400cb8:	20000a60 	.word	0x20000a60
  400cbc:	00400c79 	.word	0x00400c79
  400cc0:	20000a74 	.word	0x20000a74
  400cc4:	00402eb5 	.word	0x00402eb5
  400cc8:	20000a4c 	.word	0x20000a4c
  400ccc:	20000af4 	.word	0x20000af4
  400cd0:	00400b31 	.word	0x00400b31

00400cd4 <udi_cdc_is_rx_ready>:
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
  400cd4:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
  400cd6:	2000      	movs	r0, #0
  400cd8:	4b01      	ldr	r3, [pc, #4]	; (400ce0 <udi_cdc_is_rx_ready+0xc>)
  400cda:	4798      	blx	r3
}
  400cdc:	bd08      	pop	{r3, pc}
  400cde:	bf00      	nop
  400ce0:	00400b1d 	.word	0x00400b1d

00400ce4 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  400ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400ce8:	4b21      	ldr	r3, [pc, #132]	; (400d70 <udi_cdc_multi_getc+0x8c>)
  400cea:	f893 9006 	ldrb.w	r9, [r3, #6]
  400cee:	f1b9 0f09 	cmp.w	r9, #9
  400cf2:	bf14      	ite	ne
  400cf4:	f04f 0900 	movne.w	r9, #0
  400cf8:	f04f 0901 	moveq.w	r9, #1
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
  400cfc:	2000      	movs	r0, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400cfe:	4c1d      	ldr	r4, [pc, #116]	; (400d74 <udi_cdc_multi_getc+0x90>)
  400d00:	4680      	mov	r8, r0
  400d02:	4607      	mov	r7, r0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400d04:	4d1c      	ldr	r5, [pc, #112]	; (400d78 <udi_cdc_multi_getc+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  400d06:	4e1d      	ldr	r6, [pc, #116]	; (400d7c <udi_cdc_multi_getc+0x98>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400d08:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400d0c:	b672      	cpsid	i
  400d0e:	f3bf 8f5f 	dmb	sy
  400d12:	7027      	strb	r7, [r4, #0]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400d14:	882b      	ldrh	r3, [r5, #0]
  400d16:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400d18:	7832      	ldrb	r2, [r6, #0]
  400d1a:	b2d2      	uxtb	r2, r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400d1c:	b921      	cbnz	r1, 400d28 <udi_cdc_multi_getc+0x44>
		cpu_irq_enable();
  400d1e:	2101      	movs	r1, #1
  400d20:	7021      	strb	r1, [r4, #0]
  400d22:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400d26:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
  400d28:	4915      	ldr	r1, [pc, #84]	; (400d80 <udi_cdc_multi_getc+0x9c>)
  400d2a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  400d2e:	4299      	cmp	r1, r3
  400d30:	d807      	bhi.n	400d42 <udi_cdc_multi_getc+0x5e>
		if (!udi_cdc_data_running) {
  400d32:	4b14      	ldr	r3, [pc, #80]	; (400d84 <udi_cdc_multi_getc+0xa0>)
  400d34:	781b      	ldrb	r3, [r3, #0]
  400d36:	f013 0fff 	tst.w	r3, #255	; 0xff
  400d3a:	d1e5      	bne.n	400d08 <udi_cdc_multi_getc+0x24>
			return 0;
  400d3c:	2000      	movs	r0, #0
  400d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400d42:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  400d46:	4910      	ldr	r1, [pc, #64]	; (400d88 <udi_cdc_multi_getc+0xa4>)
  400d48:	f811 a002 	ldrb.w	sl, [r1, r2]
  400d4c:	ea40 0a0a 	orr.w	sl, r0, sl
	udi_cdc_rx_pos[port] = pos+1;
  400d50:	3301      	adds	r3, #1
  400d52:	b29b      	uxth	r3, r3
  400d54:	802b      	strh	r3, [r5, #0]

	udi_cdc_rx_start(port);
  400d56:	4640      	mov	r0, r8
  400d58:	4b0c      	ldr	r3, [pc, #48]	; (400d8c <udi_cdc_multi_getc+0xa8>)
  400d5a:	4798      	blx	r3

	if (b_databit_9) {
  400d5c:	f1b9 0f00 	cmp.w	r9, #0
  400d60:	d003      	beq.n	400d6a <udi_cdc_multi_getc+0x86>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
  400d62:	ea4f 200a 	mov.w	r0, sl, lsl #8

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
  400d66:	46c1      	mov	r9, r8
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
  400d68:	e7ce      	b.n	400d08 <udi_cdc_multi_getc+0x24>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400d6a:	4650      	mov	r0, sl
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  400d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400d70:	200009b8 	.word	0x200009b8
  400d74:	200000b0 	.word	0x200000b0
  400d78:	20000a54 	.word	0x20000a54
  400d7c:	20000a60 	.word	0x20000a60
  400d80:	20000a4c 	.word	0x20000a4c
  400d84:	20000a5c 	.word	0x20000a5c
  400d88:	20000a74 	.word	0x20000a74
  400d8c:	00400b31 	.word	0x00400b31

00400d90 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400d90:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  400d92:	2000      	movs	r0, #0
  400d94:	4b01      	ldr	r3, [pc, #4]	; (400d9c <udi_cdc_getc+0xc>)
  400d96:	4798      	blx	r3
}
  400d98:	bd08      	pop	{r3, pc}
  400d9a:	bf00      	nop
  400d9c:	00400ce5 	.word	0x00400ce5

00400da0 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400da0:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400da2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400da6:	b672      	cpsid	i
  400da8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400dac:	2200      	movs	r2, #0
  400dae:	4b17      	ldr	r3, [pc, #92]	; (400e0c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400db0:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400db2:	4b17      	ldr	r3, [pc, #92]	; (400e10 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400db4:	7819      	ldrb	r1, [r3, #0]
  400db6:	b2c9      	uxtb	r1, r1
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400db8:	4a16      	ldr	r2, [pc, #88]	; (400e14 <udi_cdc_multi_get_free_tx_buffer+0x74>)
  400dba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
  400dbe:	f1d1 0101 	rsbs	r1, r1, #1
  400dc2:	bf38      	it	cc
  400dc4:	2100      	movcc	r1, #0
  400dc6:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400dca:	2b40      	cmp	r3, #64	; 0x40
  400dcc:	d110      	bne.n	400df0 <udi_cdc_multi_get_free_tx_buffer+0x50>
		if ((!udi_cdc_tx_trans_ongoing[port])
  400dce:	4a12      	ldr	r2, [pc, #72]	; (400e18 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400dd0:	7812      	ldrb	r2, [r2, #0]
  400dd2:	f012 0fff 	tst.w	r2, #255	; 0xff
  400dd6:	d10b      	bne.n	400df0 <udi_cdc_multi_get_free_tx_buffer+0x50>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400dd8:	4a10      	ldr	r2, [pc, #64]	; (400e1c <udi_cdc_multi_get_free_tx_buffer+0x7c>)
  400dda:	7812      	ldrb	r2, [r2, #0]
  400ddc:	f012 0fff 	tst.w	r2, #255	; 0xff
  400de0:	d106      	bne.n	400df0 <udi_cdc_multi_get_free_tx_buffer+0x50>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  400de2:	2201      	movs	r2, #1
  400de4:	4b0d      	ldr	r3, [pc, #52]	; (400e1c <udi_cdc_multi_get_free_tx_buffer+0x7c>)
  400de6:	701a      	strb	r2, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400de8:	4b09      	ldr	r3, [pc, #36]	; (400e10 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400dea:	7019      	strb	r1, [r3, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
  400dec:	2040      	movs	r0, #64	; 0x40
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
  400dee:	2300      	movs	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400df0:	b92c      	cbnz	r4, 400dfe <udi_cdc_multi_get_free_tx_buffer+0x5e>
		cpu_irq_enable();
  400df2:	2101      	movs	r1, #1
  400df4:	4a05      	ldr	r2, [pc, #20]	; (400e0c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400df6:	7011      	strb	r1, [r2, #0]
  400df8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400dfc:	b662      	cpsie	i
  400dfe:	4418      	add	r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
  400e00:	f1c0 0080 	rsb	r0, r0, #128	; 0x80
  400e04:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e08:	4770      	bx	lr
  400e0a:	bf00      	nop
  400e0c:	200000b0 	.word	0x200000b0
  400e10:	200009c4 	.word	0x200009c4
  400e14:	200009c8 	.word	0x200009c8
  400e18:	20000a64 	.word	0x20000a64
  400e1c:	20000af8 	.word	0x20000af8

00400e20 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400e20:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  400e22:	4b03      	ldr	r3, [pc, #12]	; (400e30 <udi_cdc_multi_is_tx_ready+0x10>)
  400e24:	4798      	blx	r3
}
  400e26:	3000      	adds	r0, #0
  400e28:	bf18      	it	ne
  400e2a:	2001      	movne	r0, #1
  400e2c:	bd08      	pop	{r3, pc}
  400e2e:	bf00      	nop
  400e30:	00400da1 	.word	0x00400da1

00400e34 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e38:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400e3a:	4b1b      	ldr	r3, [pc, #108]	; (400ea8 <udi_cdc_multi_putc+0x74>)
  400e3c:	799e      	ldrb	r6, [r3, #6]
  400e3e:	2e09      	cmp	r6, #9
  400e40:	bf14      	ite	ne
  400e42:	2600      	movne	r6, #0
  400e44:	2601      	moveq	r6, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400e46:	4d19      	ldr	r5, [pc, #100]	; (400eac <udi_cdc_multi_putc+0x78>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400e48:	4f19      	ldr	r7, [pc, #100]	; (400eb0 <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400e4a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 400ec0 <udi_cdc_multi_putc+0x8c>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400e4e:	2000      	movs	r0, #0
  400e50:	47a8      	blx	r5
  400e52:	b930      	cbnz	r0, 400e62 <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
  400e54:	4b17      	ldr	r3, [pc, #92]	; (400eb4 <udi_cdc_multi_putc+0x80>)
  400e56:	781b      	ldrb	r3, [r3, #0]
  400e58:	f013 0fff 	tst.w	r3, #255	; 0xff
  400e5c:	d1f7      	bne.n	400e4e <udi_cdc_multi_putc+0x1a>
  400e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e62:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400e66:	b672      	cpsid	i
  400e68:	f3bf 8f5f 	dmb	sy
  400e6c:	2300      	movs	r3, #0
  400e6e:	703b      	strb	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400e70:	f898 3000 	ldrb.w	r3, [r8]
  400e74:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400e76:	4810      	ldr	r0, [pc, #64]	; (400eb8 <udi_cdc_multi_putc+0x84>)
  400e78:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
  400e7c:	f102 0c01 	add.w	ip, r2, #1
  400e80:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
  400e84:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  400e88:	4a0c      	ldr	r2, [pc, #48]	; (400ebc <udi_cdc_multi_putc+0x88>)
  400e8a:	54d4      	strb	r4, [r2, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400e8c:	b921      	cbnz	r1, 400e98 <udi_cdc_multi_putc+0x64>
		cpu_irq_enable();
  400e8e:	2301      	movs	r3, #1
  400e90:	703b      	strb	r3, [r7, #0]
  400e92:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400e96:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  400e98:	b116      	cbz	r6, 400ea0 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  400e9a:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
  400e9c:	2600      	movs	r6, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
  400e9e:	e7d6      	b.n	400e4e <udi_cdc_multi_putc+0x1a>
	}
	return true;
  400ea0:	2001      	movs	r0, #1
}
  400ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ea6:	bf00      	nop
  400ea8:	200009b8 	.word	0x200009b8
  400eac:	00400e21 	.word	0x00400e21
  400eb0:	200000b0 	.word	0x200000b0
  400eb4:	20000a5c 	.word	0x20000a5c
  400eb8:	200009c8 	.word	0x200009c8
  400ebc:	200009cc 	.word	0x200009cc
  400ec0:	200009c4 	.word	0x200009c4

00400ec4 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400ec4:	b508      	push	{r3, lr}
  400ec6:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
  400ec8:	2000      	movs	r0, #0
  400eca:	4b01      	ldr	r3, [pc, #4]	; (400ed0 <udi_cdc_putc+0xc>)
  400ecc:	4798      	blx	r3
}
  400ece:	bd08      	pop	{r3, pc}
  400ed0:	00400e35 	.word	0x00400e35

00400ed4 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  400ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ed8:	4688      	mov	r8, r1
  400eda:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  400edc:	4b1f      	ldr	r3, [pc, #124]	; (400f5c <udi_cdc_multi_write_buf+0x88>)
  400ede:	799b      	ldrb	r3, [r3, #6]
  400ee0:	2b09      	cmp	r3, #9
		size *=2;
  400ee2:	bf08      	it	eq
  400ee4:	0055      	lsleq	r5, r2, #1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400ee6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 400f74 <udi_cdc_multi_write_buf+0xa0>
  400eea:	2000      	movs	r0, #0
  400eec:	47d0      	blx	sl
  400eee:	b938      	cbnz	r0, 400f00 <udi_cdc_multi_write_buf+0x2c>
		if (!udi_cdc_data_running) {
  400ef0:	4b1b      	ldr	r3, [pc, #108]	; (400f60 <udi_cdc_multi_write_buf+0x8c>)
  400ef2:	781b      	ldrb	r3, [r3, #0]
  400ef4:	f013 0fff 	tst.w	r3, #255	; 0xff
  400ef8:	d1f7      	bne.n	400eea <udi_cdc_multi_write_buf+0x16>
  400efa:	4628      	mov	r0, r5
  400efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400f00:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400f04:	b672      	cpsid	i
  400f06:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400f0a:	2300      	movs	r3, #0
  400f0c:	4a15      	ldr	r2, [pc, #84]	; (400f64 <udi_cdc_multi_write_buf+0x90>)
  400f0e:	7013      	strb	r3, [r2, #0]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400f10:	4b15      	ldr	r3, [pc, #84]	; (400f68 <udi_cdc_multi_write_buf+0x94>)
  400f12:	781e      	ldrb	r6, [r3, #0]
  400f14:	b2f6      	uxtb	r6, r6
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400f16:	f8df 9060 	ldr.w	r9, [pc, #96]	; 400f78 <udi_cdc_multi_write_buf+0xa4>
  400f1a:	f839 7016 	ldrh.w	r7, [r9, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  400f1e:	f1c7 0440 	rsb	r4, r7, #64	; 0x40
  400f22:	42a5      	cmp	r5, r4
  400f24:	bf38      	it	cc
  400f26:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  400f28:	eb07 1386 	add.w	r3, r7, r6, lsl #6
  400f2c:	480f      	ldr	r0, [pc, #60]	; (400f6c <udi_cdc_multi_write_buf+0x98>)
  400f2e:	4418      	add	r0, r3
  400f30:	4641      	mov	r1, r8
  400f32:	4622      	mov	r2, r4
  400f34:	4b0e      	ldr	r3, [pc, #56]	; (400f70 <udi_cdc_multi_write_buf+0x9c>)
  400f36:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  400f38:	4427      	add	r7, r4
  400f3a:	f829 7016 	strh.w	r7, [r9, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400f3e:	465b      	mov	r3, fp
  400f40:	b92b      	cbnz	r3, 400f4e <udi_cdc_multi_write_buf+0x7a>
		cpu_irq_enable();
  400f42:	2301      	movs	r3, #1
  400f44:	4a07      	ldr	r2, [pc, #28]	; (400f64 <udi_cdc_multi_write_buf+0x90>)
  400f46:	7013      	strb	r3, [r2, #0]
  400f48:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400f4c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  400f4e:	44a0      	add	r8, r4
	size -= copy_nb;

	if (size) {
  400f50:	1b2d      	subs	r5, r5, r4
  400f52:	d1ca      	bne.n	400eea <udi_cdc_multi_write_buf+0x16>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
  400f54:	2000      	movs	r0, #0
}
  400f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400f5a:	bf00      	nop
  400f5c:	200009b8 	.word	0x200009b8
  400f60:	20000a5c 	.word	0x20000a5c
  400f64:	200000b0 	.word	0x200000b0
  400f68:	200009c4 	.word	0x200009c4
  400f6c:	200009cc 	.word	0x200009cc
  400f70:	00403429 	.word	0x00403429
  400f74:	00400e21 	.word	0x00400e21
  400f78:	200009c8 	.word	0x200009c8

00400f7c <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  400f7c:	b508      	push	{r3, lr}
  400f7e:	4603      	mov	r3, r0
  400f80:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
  400f82:	2000      	movs	r0, #0
  400f84:	4619      	mov	r1, r3
  400f86:	4b01      	ldr	r3, [pc, #4]	; (400f8c <udi_cdc_write_buf+0x10>)
  400f88:	4798      	blx	r3
}
  400f8a:	bd08      	pop	{r3, pc}
  400f8c:	00400ed5 	.word	0x00400ed5

00400f90 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400f90:	4b0f      	ldr	r3, [pc, #60]	; (400fd0 <udc_next_desc_in_iface+0x40>)
  400f92:	681b      	ldr	r3, [r3, #0]
  400f94:	681b      	ldr	r3, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400f96:	885a      	ldrh	r2, [r3, #2]
  400f98:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400f9a:	7803      	ldrb	r3, [r0, #0]
  400f9c:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400f9e:	4290      	cmp	r0, r2
  400fa0:	d210      	bcs.n	400fc4 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400fa2:	7843      	ldrb	r3, [r0, #1]
  400fa4:	2b04      	cmp	r3, #4
  400fa6:	d00f      	beq.n	400fc8 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400fa8:	428b      	cmp	r3, r1
  400faa:	d105      	bne.n	400fb8 <udc_next_desc_in_iface+0x28>
  400fac:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400fae:	7843      	ldrb	r3, [r0, #1]
  400fb0:	2b04      	cmp	r3, #4
  400fb2:	d00b      	beq.n	400fcc <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400fb4:	428b      	cmp	r3, r1
  400fb6:	d00a      	beq.n	400fce <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400fb8:	7803      	ldrb	r3, [r0, #0]
  400fba:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400fbc:	4290      	cmp	r0, r2
  400fbe:	d3f6      	bcc.n	400fae <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  400fc0:	2000      	movs	r0, #0
  400fc2:	4770      	bx	lr
  400fc4:	2000      	movs	r0, #0
  400fc6:	4770      	bx	lr
  400fc8:	2000      	movs	r0, #0
  400fca:	4770      	bx	lr
  400fcc:	2000      	movs	r0, #0
}
  400fce:	4770      	bx	lr
  400fd0:	20000b04 	.word	0x20000b04

00400fd4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400fd4:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400fd6:	4b03      	ldr	r3, [pc, #12]	; (400fe4 <udc_valid_address+0x10>)
  400fd8:	7898      	ldrb	r0, [r3, #2]
  400fda:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400fde:	4b02      	ldr	r3, [pc, #8]	; (400fe8 <udc_valid_address+0x14>)
  400fe0:	4798      	blx	r3
  400fe2:	bd08      	pop	{r3, pc}
  400fe4:	20000c3c 	.word	0x20000c3c
  400fe8:	00402b01 	.word	0x00402b01

00400fec <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  400fec:	b410      	push	{r4}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  400fee:	4b16      	ldr	r3, [pc, #88]	; (401048 <udc_update_iface_desc+0x5c>)
  400ff0:	781b      	ldrb	r3, [r3, #0]
  400ff2:	b303      	cbz	r3, 401036 <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400ff4:	4b15      	ldr	r3, [pc, #84]	; (40104c <udc_update_iface_desc+0x60>)
  400ff6:	681b      	ldr	r3, [r3, #0]
  400ff8:	681b      	ldr	r3, [r3, #0]
  400ffa:	791a      	ldrb	r2, [r3, #4]
  400ffc:	4282      	cmp	r2, r0
  400ffe:	d91c      	bls.n	40103a <udc_update_iface_desc+0x4e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  401000:	4a13      	ldr	r2, [pc, #76]	; (401050 <udc_update_iface_desc+0x64>)
  401002:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  401004:	885c      	ldrh	r4, [r3, #2]
  401006:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  401008:	42a3      	cmp	r3, r4
  40100a:	d218      	bcs.n	40103e <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  40100c:	785a      	ldrb	r2, [r3, #1]
  40100e:	2a04      	cmp	r2, #4
  401010:	d109      	bne.n	401026 <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  401012:	789a      	ldrb	r2, [r3, #2]
  401014:	4282      	cmp	r2, r0
  401016:	d106      	bne.n	401026 <udc_update_iface_desc+0x3a>
  401018:	78da      	ldrb	r2, [r3, #3]
  40101a:	428a      	cmp	r2, r1
  40101c:	d103      	bne.n	401026 <udc_update_iface_desc+0x3a>
  40101e:	4a0c      	ldr	r2, [pc, #48]	; (401050 <udc_update_iface_desc+0x64>)
  401020:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  401022:	2001      	movs	r0, #1
  401024:	e00c      	b.n	401040 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  401026:	781a      	ldrb	r2, [r3, #0]
  401028:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  40102a:	42a3      	cmp	r3, r4
  40102c:	d3ee      	bcc.n	40100c <udc_update_iface_desc+0x20>
  40102e:	4a08      	ldr	r2, [pc, #32]	; (401050 <udc_update_iface_desc+0x64>)
  401030:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  401032:	2000      	movs	r0, #0
  401034:	e004      	b.n	401040 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  401036:	2000      	movs	r0, #0
  401038:	e002      	b.n	401040 <udc_update_iface_desc+0x54>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  40103a:	2000      	movs	r0, #0
  40103c:	e000      	b.n	401040 <udc_update_iface_desc+0x54>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  40103e:	2000      	movs	r0, #0
}
  401040:	f85d 4b04 	ldr.w	r4, [sp], #4
  401044:	4770      	bx	lr
  401046:	bf00      	nop
  401048:	20000b0c 	.word	0x20000b0c
  40104c:	20000b04 	.word	0x20000b04
  401050:	20000b10 	.word	0x20000b10

00401054 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  401054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401058:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  40105a:	2100      	movs	r1, #0
  40105c:	4b12      	ldr	r3, [pc, #72]	; (4010a8 <udc_iface_disable+0x54>)
  40105e:	4798      	blx	r3
  401060:	4680      	mov	r8, r0
  401062:	b1e8      	cbz	r0, 4010a0 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401064:	4b11      	ldr	r3, [pc, #68]	; (4010ac <udc_iface_disable+0x58>)
  401066:	681b      	ldr	r3, [r3, #0]
  401068:	685b      	ldr	r3, [r3, #4]
  40106a:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40106e:	f8d9 300c 	ldr.w	r3, [r9, #12]
  401072:	4798      	blx	r3
  401074:	4601      	mov	r1, r0
  401076:	4620      	mov	r0, r4
  401078:	4b0b      	ldr	r3, [pc, #44]	; (4010a8 <udc_iface_disable+0x54>)
  40107a:	4798      	blx	r3
  40107c:	4680      	mov	r8, r0
  40107e:	b178      	cbz	r0, 4010a0 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401080:	4b0b      	ldr	r3, [pc, #44]	; (4010b0 <udc_iface_disable+0x5c>)
  401082:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401084:	2605      	movs	r6, #5
  401086:	4d0b      	ldr	r5, [pc, #44]	; (4010b4 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  401088:	4f0b      	ldr	r7, [pc, #44]	; (4010b8 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40108a:	4620      	mov	r0, r4
  40108c:	4631      	mov	r1, r6
  40108e:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  401090:	4604      	mov	r4, r0
  401092:	b110      	cbz	r0, 40109a <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  401094:	7880      	ldrb	r0, [r0, #2]
  401096:	47b8      	blx	r7
		}
  401098:	e7f7      	b.n	40108a <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  40109a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40109e:	4798      	blx	r3
	return true;
}
  4010a0:	4640      	mov	r0, r8
  4010a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4010a6:	bf00      	nop
  4010a8:	00400fed 	.word	0x00400fed
  4010ac:	20000b04 	.word	0x20000b04
  4010b0:	20000b10 	.word	0x20000b10
  4010b4:	00400f91 	.word	0x00400f91
  4010b8:	00402c79 	.word	0x00402c79

004010bc <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  4010bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4010c0:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4010c2:	4b10      	ldr	r3, [pc, #64]	; (401104 <udc_iface_enable+0x48>)
  4010c4:	4798      	blx	r3
  4010c6:	4603      	mov	r3, r0
  4010c8:	b1c8      	cbz	r0, 4010fe <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4010ca:	4b0f      	ldr	r3, [pc, #60]	; (401108 <udc_iface_enable+0x4c>)
  4010cc:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4010ce:	2605      	movs	r6, #5
  4010d0:	4d0e      	ldr	r5, [pc, #56]	; (40110c <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4010d2:	4f0f      	ldr	r7, [pc, #60]	; (401110 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4010d4:	4620      	mov	r0, r4
  4010d6:	4631      	mov	r1, r6
  4010d8:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  4010da:	4604      	mov	r4, r0
  4010dc:	b138      	cbz	r0, 4010ee <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4010de:	7880      	ldrb	r0, [r0, #2]
  4010e0:	78e1      	ldrb	r1, [r4, #3]
  4010e2:	88a2      	ldrh	r2, [r4, #4]
  4010e4:	47b8      	blx	r7
  4010e6:	4603      	mov	r3, r0
  4010e8:	2800      	cmp	r0, #0
  4010ea:	d1f3      	bne.n	4010d4 <udc_iface_enable+0x18>
  4010ec:	e007      	b.n	4010fe <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  4010ee:	4b09      	ldr	r3, [pc, #36]	; (401114 <udc_iface_enable+0x58>)
  4010f0:	681b      	ldr	r3, [r3, #0]
  4010f2:	685b      	ldr	r3, [r3, #4]
  4010f4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  4010f8:	681b      	ldr	r3, [r3, #0]
  4010fa:	4798      	blx	r3
  4010fc:	4603      	mov	r3, r0
}
  4010fe:	4618      	mov	r0, r3
  401100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401104:	00400fed 	.word	0x00400fed
  401108:	20000b10 	.word	0x20000b10
  40110c:	00400f91 	.word	0x00400f91
  401110:	00402b75 	.word	0x00402b75
  401114:	20000b04 	.word	0x20000b04

00401118 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  401118:	b508      	push	{r3, lr}
	udd_enable();
  40111a:	4b01      	ldr	r3, [pc, #4]	; (401120 <udc_start+0x8>)
  40111c:	4798      	blx	r3
  40111e:	bd08      	pop	{r3, pc}
  401120:	00402a45 	.word	0x00402a45

00401124 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  401124:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  401126:	4b0d      	ldr	r3, [pc, #52]	; (40115c <udc_reset+0x38>)
  401128:	781b      	ldrb	r3, [r3, #0]
  40112a:	b183      	cbz	r3, 40114e <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40112c:	4b0c      	ldr	r3, [pc, #48]	; (401160 <udc_reset+0x3c>)
  40112e:	681b      	ldr	r3, [r3, #0]
  401130:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401132:	791b      	ldrb	r3, [r3, #4]
  401134:	b15b      	cbz	r3, 40114e <udc_reset+0x2a>
  401136:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  401138:	4e0a      	ldr	r6, [pc, #40]	; (401164 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40113a:	4d09      	ldr	r5, [pc, #36]	; (401160 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  40113c:	4620      	mov	r0, r4
  40113e:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  401140:	3401      	adds	r4, #1
  401142:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401144:	682b      	ldr	r3, [r5, #0]
  401146:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401148:	791b      	ldrb	r3, [r3, #4]
  40114a:	42a3      	cmp	r3, r4
  40114c:	d8f6      	bhi.n	40113c <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  40114e:	2300      	movs	r3, #0
  401150:	4a02      	ldr	r2, [pc, #8]	; (40115c <udc_reset+0x38>)
  401152:	7013      	strb	r3, [r2, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  401154:	4a04      	ldr	r2, [pc, #16]	; (401168 <udc_reset+0x44>)
  401156:	8013      	strh	r3, [r2, #0]
  401158:	bd70      	pop	{r4, r5, r6, pc}
  40115a:	bf00      	nop
  40115c:	20000b0c 	.word	0x20000b0c
  401160:	20000b04 	.word	0x20000b04
  401164:	00401055 	.word	0x00401055
  401168:	20000b0a 	.word	0x20000b0a

0040116c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  40116c:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  40116e:	4b0c      	ldr	r3, [pc, #48]	; (4011a0 <udc_sof_notify+0x34>)
  401170:	781b      	ldrb	r3, [r3, #0]
  401172:	b19b      	cbz	r3, 40119c <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401174:	4b0b      	ldr	r3, [pc, #44]	; (4011a4 <udc_sof_notify+0x38>)
  401176:	681b      	ldr	r3, [r3, #0]
  401178:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  40117a:	7912      	ldrb	r2, [r2, #4]
  40117c:	b172      	cbz	r2, 40119c <udc_sof_notify+0x30>
  40117e:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401180:	4d08      	ldr	r5, [pc, #32]	; (4011a4 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  401182:	685b      	ldr	r3, [r3, #4]
  401184:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  401188:	691b      	ldr	r3, [r3, #16]
  40118a:	b103      	cbz	r3, 40118e <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  40118c:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  40118e:	3401      	adds	r4, #1
  401190:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401192:	682b      	ldr	r3, [r5, #0]
  401194:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401196:	7912      	ldrb	r2, [r2, #4]
  401198:	42a2      	cmp	r2, r4
  40119a:	d8f2      	bhi.n	401182 <udc_sof_notify+0x16>
  40119c:	bd38      	pop	{r3, r4, r5, pc}
  40119e:	bf00      	nop
  4011a0:	20000b0c 	.word	0x20000b0c
  4011a4:	20000b04 	.word	0x20000b04

004011a8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  4011a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  4011ac:	4b77      	ldr	r3, [pc, #476]	; (40138c <udc_process_setup+0x1e4>)
  4011ae:	2200      	movs	r2, #0
  4011b0:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  4011b2:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4011b4:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  4011b6:	781b      	ldrb	r3, [r3, #0]
  4011b8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4011bc:	f000 81e6 	beq.w	40158c <udc_process_setup+0x3e4>
		if (udd_g_ctrlreq.req.wLength == 0) {
  4011c0:	4a72      	ldr	r2, [pc, #456]	; (40138c <udc_process_setup+0x1e4>)
  4011c2:	88d2      	ldrh	r2, [r2, #6]
  4011c4:	2a00      	cmp	r2, #0
  4011c6:	f040 81e5 	bne.w	401594 <udc_process_setup+0x3ec>
  4011ca:	e1db      	b.n	401584 <udc_process_setup+0x3dc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4011cc:	f013 031f 	ands.w	r3, r3, #31
  4011d0:	d167      	bne.n	4012a2 <udc_process_setup+0xfa>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4011d2:	496e      	ldr	r1, [pc, #440]	; (40138c <udc_process_setup+0x1e4>)
  4011d4:	7849      	ldrb	r1, [r1, #1]
  4011d6:	2906      	cmp	r1, #6
  4011d8:	d00d      	beq.n	4011f6 <udc_process_setup+0x4e>
  4011da:	2908      	cmp	r1, #8
  4011dc:	d057      	beq.n	40128e <udc_process_setup+0xe6>
  4011de:	2900      	cmp	r1, #0
  4011e0:	d15f      	bne.n	4012a2 <udc_process_setup+0xfa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  4011e2:	2a02      	cmp	r2, #2
  4011e4:	d105      	bne.n	4011f2 <udc_process_setup+0x4a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  4011e6:	486a      	ldr	r0, [pc, #424]	; (401390 <udc_process_setup+0x1e8>)
  4011e8:	2102      	movs	r1, #2
  4011ea:	4b6a      	ldr	r3, [pc, #424]	; (401394 <udc_process_setup+0x1ec>)
  4011ec:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  4011ee:	2401      	movs	r4, #1
  4011f0:	e174      	b.n	4014dc <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
  4011f2:	2400      	movs	r4, #0
  4011f4:	e172      	b.n	4014dc <udc_process_setup+0x334>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4011f6:	4b65      	ldr	r3, [pc, #404]	; (40138c <udc_process_setup+0x1e4>)
  4011f8:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4011fa:	0a13      	lsrs	r3, r2, #8
  4011fc:	3b01      	subs	r3, #1
  4011fe:	2b0e      	cmp	r3, #14
  401200:	d83b      	bhi.n	40127a <udc_process_setup+0xd2>
  401202:	e8df f003 	tbb	[pc, r3]
  401206:	0f08      	.short	0x0f08
  401208:	3a3a3a2a 	.word	0x3a3a3a2a
  40120c:	3a3a3a3a 	.word	0x3a3a3a3a
  401210:	3a3a3a3a 	.word	0x3a3a3a3a
  401214:	22          	.byte	0x22
  401215:	00          	.byte	0x00
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  401216:	4b60      	ldr	r3, [pc, #384]	; (401398 <udc_process_setup+0x1f0>)
  401218:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  40121a:	4618      	mov	r0, r3
  40121c:	7819      	ldrb	r1, [r3, #0]
  40121e:	4b5d      	ldr	r3, [pc, #372]	; (401394 <udc_process_setup+0x1ec>)
  401220:	4798      	blx	r3
  401222:	e021      	b.n	401268 <udc_process_setup+0xc0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401224:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  401226:	4b5c      	ldr	r3, [pc, #368]	; (401398 <udc_process_setup+0x1f0>)
  401228:	681b      	ldr	r3, [r3, #0]
  40122a:	7c5b      	ldrb	r3, [r3, #17]
  40122c:	4293      	cmp	r3, r2
  40122e:	d926      	bls.n	40127e <udc_process_setup+0xd6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  401230:	4b59      	ldr	r3, [pc, #356]	; (401398 <udc_process_setup+0x1f0>)
  401232:	685b      	ldr	r3, [r3, #4]
  401234:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  401238:	4618      	mov	r0, r3
  40123a:	8859      	ldrh	r1, [r3, #2]
  40123c:	4b55      	ldr	r3, [pc, #340]	; (401394 <udc_process_setup+0x1ec>)
  40123e:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401240:	4b52      	ldr	r3, [pc, #328]	; (40138c <udc_process_setup+0x1e4>)
  401242:	689b      	ldr	r3, [r3, #8]
  401244:	2202      	movs	r2, #2
  401246:	705a      	strb	r2, [r3, #1]
  401248:	e00e      	b.n	401268 <udc_process_setup+0xc0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  40124a:	4b53      	ldr	r3, [pc, #332]	; (401398 <udc_process_setup+0x1f0>)
  40124c:	689b      	ldr	r3, [r3, #8]
  40124e:	b1c3      	cbz	r3, 401282 <udc_process_setup+0xda>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401250:	4618      	mov	r0, r3
  401252:	8859      	ldrh	r1, [r3, #2]
  401254:	4b4f      	ldr	r3, [pc, #316]	; (401394 <udc_process_setup+0x1ec>)
  401256:	4798      	blx	r3
  401258:	e006      	b.n	401268 <udc_process_setup+0xc0>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  40125a:	f012 0fff 	tst.w	r2, #255	; 0xff
  40125e:	d112      	bne.n	401286 <udc_process_setup+0xde>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  401260:	484e      	ldr	r0, [pc, #312]	; (40139c <udc_process_setup+0x1f4>)
  401262:	2104      	movs	r1, #4
  401264:	4b4b      	ldr	r3, [pc, #300]	; (401394 <udc_process_setup+0x1ec>)
  401266:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  401268:	4b48      	ldr	r3, [pc, #288]	; (40138c <udc_process_setup+0x1e4>)
  40126a:	88da      	ldrh	r2, [r3, #6]
  40126c:	899b      	ldrh	r3, [r3, #12]
  40126e:	4293      	cmp	r3, r2
  401270:	d90b      	bls.n	40128a <udc_process_setup+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  401272:	4b46      	ldr	r3, [pc, #280]	; (40138c <udc_process_setup+0x1e4>)
  401274:	819a      	strh	r2, [r3, #12]
	}
	return true;
  401276:	2401      	movs	r4, #1
  401278:	e130      	b.n	4014dc <udc_process_setup+0x334>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  40127a:	2400      	movs	r4, #0
  40127c:	e12e      	b.n	4014dc <udc_process_setup+0x334>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
  40127e:	2400      	movs	r4, #0
  401280:	e12c      	b.n	4014dc <udc_process_setup+0x334>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
  401282:	2400      	movs	r4, #0
  401284:	e12a      	b.n	4014dc <udc_process_setup+0x334>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
  401286:	2400      	movs	r4, #0
  401288:	e128      	b.n	4014dc <udc_process_setup+0x334>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
  40128a:	2401      	movs	r4, #1
  40128c:	e126      	b.n	4014dc <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  40128e:	2a01      	cmp	r2, #1
  401290:	d105      	bne.n	40129e <udc_process_setup+0xf6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  401292:	4843      	ldr	r0, [pc, #268]	; (4013a0 <udc_process_setup+0x1f8>)
  401294:	2101      	movs	r1, #1
  401296:	4b3f      	ldr	r3, [pc, #252]	; (401394 <udc_process_setup+0x1ec>)
  401298:	4798      	blx	r3
	return true;
  40129a:	2401      	movs	r4, #1
  40129c:	e11e      	b.n	4014dc <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
  40129e:	2400      	movs	r4, #0
  4012a0:	e11c      	b.n	4014dc <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4012a2:	2b01      	cmp	r3, #1
  4012a4:	d12a      	bne.n	4012fc <udc_process_setup+0x154>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4012a6:	4939      	ldr	r1, [pc, #228]	; (40138c <udc_process_setup+0x1e4>)
  4012a8:	7849      	ldrb	r1, [r1, #1]
  4012aa:	290a      	cmp	r1, #10
  4012ac:	d126      	bne.n	4012fc <udc_process_setup+0x154>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  4012ae:	2a01      	cmp	r2, #1
  4012b0:	d11e      	bne.n	4012f0 <udc_process_setup+0x148>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  4012b2:	4b3b      	ldr	r3, [pc, #236]	; (4013a0 <udc_process_setup+0x1f8>)
  4012b4:	781b      	ldrb	r3, [r3, #0]
  4012b6:	b1eb      	cbz	r3, 4012f4 <udc_process_setup+0x14c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4012b8:	4b34      	ldr	r3, [pc, #208]	; (40138c <udc_process_setup+0x1e4>)
  4012ba:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4012bc:	4b39      	ldr	r3, [pc, #228]	; (4013a4 <udc_process_setup+0x1fc>)
  4012be:	681e      	ldr	r6, [r3, #0]
  4012c0:	6833      	ldr	r3, [r6, #0]
  4012c2:	791b      	ldrb	r3, [r3, #4]
  4012c4:	42ab      	cmp	r3, r5
  4012c6:	d917      	bls.n	4012f8 <udc_process_setup+0x150>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4012c8:	4628      	mov	r0, r5
  4012ca:	2100      	movs	r1, #0
  4012cc:	4b36      	ldr	r3, [pc, #216]	; (4013a8 <udc_process_setup+0x200>)
  4012ce:	4798      	blx	r3
  4012d0:	4604      	mov	r4, r0
  4012d2:	2800      	cmp	r0, #0
  4012d4:	f000 8102 	beq.w	4014dc <udc_process_setup+0x334>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4012d8:	6873      	ldr	r3, [r6, #4]
	udc_iface_setting = udi_api->getsetting();
  4012da:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  4012de:	68db      	ldr	r3, [r3, #12]
  4012e0:	4798      	blx	r3
  4012e2:	4b32      	ldr	r3, [pc, #200]	; (4013ac <udc_process_setup+0x204>)
  4012e4:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  4012e6:	4618      	mov	r0, r3
  4012e8:	2101      	movs	r1, #1
  4012ea:	4b2a      	ldr	r3, [pc, #168]	; (401394 <udc_process_setup+0x1ec>)
  4012ec:	4798      	blx	r3
  4012ee:	e0f5      	b.n	4014dc <udc_process_setup+0x334>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
  4012f0:	2400      	movs	r4, #0
  4012f2:	e0f3      	b.n	4014dc <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  4012f4:	2400      	movs	r4, #0
  4012f6:	e0f1      	b.n	4014dc <udc_process_setup+0x334>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  4012f8:	2400      	movs	r4, #0
  4012fa:	e0ef      	b.n	4014dc <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4012fc:	2b02      	cmp	r3, #2
  4012fe:	f040 80ef 	bne.w	4014e0 <udc_process_setup+0x338>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  401302:	4b22      	ldr	r3, [pc, #136]	; (40138c <udc_process_setup+0x1e4>)
  401304:	785b      	ldrb	r3, [r3, #1]
  401306:	2b00      	cmp	r3, #0
  401308:	f040 80e3 	bne.w	4014d2 <udc_process_setup+0x32a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  40130c:	2a02      	cmp	r2, #2
  40130e:	d10b      	bne.n	401328 <udc_process_setup+0x180>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401310:	4b1e      	ldr	r3, [pc, #120]	; (40138c <udc_process_setup+0x1e4>)
  401312:	7918      	ldrb	r0, [r3, #4]
  401314:	4b26      	ldr	r3, [pc, #152]	; (4013b0 <udc_process_setup+0x208>)
  401316:	4798      	blx	r3
  401318:	4b26      	ldr	r3, [pc, #152]	; (4013b4 <udc_process_setup+0x20c>)
  40131a:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  40131c:	4618      	mov	r0, r3
  40131e:	2102      	movs	r1, #2
  401320:	4b1c      	ldr	r3, [pc, #112]	; (401394 <udc_process_setup+0x1ec>)
  401322:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  401324:	2401      	movs	r4, #1
  401326:	e0d9      	b.n	4014dc <udc_process_setup+0x334>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
  401328:	2400      	movs	r4, #0
  40132a:	e0d7      	b.n	4014dc <udc_process_setup+0x334>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40132c:	f013 031f 	ands.w	r3, r3, #31
  401330:	f040 8084 	bne.w	40143c <udc_process_setup+0x294>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  401334:	4a15      	ldr	r2, [pc, #84]	; (40138c <udc_process_setup+0x1e4>)
  401336:	7852      	ldrb	r2, [r2, #1]
  401338:	3a01      	subs	r2, #1
  40133a:	2a08      	cmp	r2, #8
  40133c:	d87e      	bhi.n	40143c <udc_process_setup+0x294>
  40133e:	e8df f012 	tbh	[pc, r2, lsl #1]
  401342:	0013      	.short	0x0013
  401344:	00ca007d 	.word	0x00ca007d
  401348:	0009007d 	.word	0x0009007d
  40134c:	007d007d 	.word	0x007d007d
  401350:	003d007d 	.word	0x003d007d
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401354:	4b0d      	ldr	r3, [pc, #52]	; (40138c <udc_process_setup+0x1e4>)
  401356:	88db      	ldrh	r3, [r3, #6]
  401358:	b923      	cbnz	r3, 401364 <udc_process_setup+0x1bc>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  40135a:	4a17      	ldr	r2, [pc, #92]	; (4013b8 <udc_process_setup+0x210>)
  40135c:	4b0b      	ldr	r3, [pc, #44]	; (40138c <udc_process_setup+0x1e4>)
  40135e:	611a      	str	r2, [r3, #16]
	return true;
  401360:	2401      	movs	r4, #1
  401362:	e0bb      	b.n	4014dc <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401364:	2400      	movs	r4, #0
  401366:	e0b9      	b.n	4014dc <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401368:	4b08      	ldr	r3, [pc, #32]	; (40138c <udc_process_setup+0x1e4>)
  40136a:	88db      	ldrh	r3, [r3, #6]
  40136c:	b953      	cbnz	r3, 401384 <udc_process_setup+0x1dc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  40136e:	4b07      	ldr	r3, [pc, #28]	; (40138c <udc_process_setup+0x1e4>)
  401370:	885b      	ldrh	r3, [r3, #2]
  401372:	2b01      	cmp	r3, #1
  401374:	d108      	bne.n	401388 <udc_process_setup+0x1e0>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  401376:	4b06      	ldr	r3, [pc, #24]	; (401390 <udc_process_setup+0x1e8>)
  401378:	881a      	ldrh	r2, [r3, #0]
  40137a:	f022 0202 	bic.w	r2, r2, #2
  40137e:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  401380:	2401      	movs	r4, #1
  401382:	e0ab      	b.n	4014dc <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401384:	2400      	movs	r4, #0
  401386:	e0a9      	b.n	4014dc <udc_process_setup+0x334>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
  401388:	2400      	movs	r4, #0
  40138a:	e0a7      	b.n	4014dc <udc_process_setup+0x334>
  40138c:	20000c3c 	.word	0x20000c3c
  401390:	20000b0a 	.word	0x20000b0a
  401394:	00402b69 	.word	0x00402b69
  401398:	20000038 	.word	0x20000038
  40139c:	200000ac 	.word	0x200000ac
  4013a0:	20000b0c 	.word	0x20000b0c
  4013a4:	20000b04 	.word	0x20000b04
  4013a8:	00400fed 	.word	0x00400fed
  4013ac:	20000b00 	.word	0x20000b00
  4013b0:	00402cb1 	.word	0x00402cb1
  4013b4:	20000b08 	.word	0x20000b08
  4013b8:	00400fd5 	.word	0x00400fd5
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  4013bc:	4b79      	ldr	r3, [pc, #484]	; (4015a4 <udc_process_setup+0x3fc>)
  4013be:	88db      	ldrh	r3, [r3, #6]
  4013c0:	2b00      	cmp	r3, #0
  4013c2:	d131      	bne.n	401428 <udc_process_setup+0x280>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  4013c4:	4b78      	ldr	r3, [pc, #480]	; (4015a8 <udc_process_setup+0x400>)
  4013c6:	4798      	blx	r3
  4013c8:	2800      	cmp	r0, #0
  4013ca:	d02f      	beq.n	40142c <udc_process_setup+0x284>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4013cc:	4b75      	ldr	r3, [pc, #468]	; (4015a4 <udc_process_setup+0x3fc>)
  4013ce:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  4013d0:	4b76      	ldr	r3, [pc, #472]	; (4015ac <udc_process_setup+0x404>)
  4013d2:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  4013d4:	7c5b      	ldrb	r3, [r3, #17]
  4013d6:	429a      	cmp	r2, r3
  4013d8:	dc2a      	bgt.n	401430 <udc_process_setup+0x288>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  4013da:	4b75      	ldr	r3, [pc, #468]	; (4015b0 <udc_process_setup+0x408>)
  4013dc:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  4013de:	4b71      	ldr	r3, [pc, #452]	; (4015a4 <udc_process_setup+0x3fc>)
  4013e0:	789b      	ldrb	r3, [r3, #2]
  4013e2:	4a74      	ldr	r2, [pc, #464]	; (4015b4 <udc_process_setup+0x40c>)
  4013e4:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  4013e6:	b32b      	cbz	r3, 401434 <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  4013e8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  4013ec:	3b01      	subs	r3, #1
  4013ee:	4a6f      	ldr	r2, [pc, #444]	; (4015ac <udc_process_setup+0x404>)
  4013f0:	6852      	ldr	r2, [r2, #4]
  4013f2:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  4013f6:	4970      	ldr	r1, [pc, #448]	; (4015b8 <udc_process_setup+0x410>)
  4013f8:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4013fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4013fe:	791b      	ldrb	r3, [r3, #4]
  401400:	b1d3      	cbz	r3, 401438 <udc_process_setup+0x290>
  401402:	2500      	movs	r5, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  401404:	462f      	mov	r7, r5
  401406:	4e6d      	ldr	r6, [pc, #436]	; (4015bc <udc_process_setup+0x414>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401408:	4688      	mov	r8, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  40140a:	4628      	mov	r0, r5
  40140c:	4639      	mov	r1, r7
  40140e:	47b0      	blx	r6
  401410:	4604      	mov	r4, r0
  401412:	2800      	cmp	r0, #0
  401414:	d062      	beq.n	4014dc <udc_process_setup+0x334>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401416:	3501      	adds	r5, #1
  401418:	b2ed      	uxtb	r5, r5
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40141a:	f8d8 3000 	ldr.w	r3, [r8]
  40141e:	681b      	ldr	r3, [r3, #0]
  401420:	791b      	ldrb	r3, [r3, #4]
  401422:	42ab      	cmp	r3, r5
  401424:	d8f1      	bhi.n	40140a <udc_process_setup+0x262>
  401426:	e059      	b.n	4014dc <udc_process_setup+0x334>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401428:	2400      	movs	r4, #0
  40142a:	e057      	b.n	4014dc <udc_process_setup+0x334>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
  40142c:	2400      	movs	r4, #0
  40142e:	e055      	b.n	4014dc <udc_process_setup+0x334>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  401430:	2400      	movs	r4, #0
  401432:	e053      	b.n	4014dc <udc_process_setup+0x334>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
  401434:	2401      	movs	r4, #1
  401436:	e051      	b.n	4014dc <udc_process_setup+0x334>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  401438:	2401      	movs	r4, #1
  40143a:	e04f      	b.n	4014dc <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40143c:	2b01      	cmp	r3, #1
  40143e:	d11c      	bne.n	40147a <udc_process_setup+0x2d2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401440:	4a58      	ldr	r2, [pc, #352]	; (4015a4 <udc_process_setup+0x3fc>)
  401442:	7852      	ldrb	r2, [r2, #1]
  401444:	2a0b      	cmp	r2, #11
  401446:	d118      	bne.n	40147a <udc_process_setup+0x2d2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  401448:	4b56      	ldr	r3, [pc, #344]	; (4015a4 <udc_process_setup+0x3fc>)
  40144a:	88db      	ldrh	r3, [r3, #6]
  40144c:	b98b      	cbnz	r3, 401472 <udc_process_setup+0x2ca>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  40144e:	4b59      	ldr	r3, [pc, #356]	; (4015b4 <udc_process_setup+0x40c>)
  401450:	781b      	ldrb	r3, [r3, #0]
  401452:	b183      	cbz	r3, 401476 <udc_process_setup+0x2ce>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401454:	4b53      	ldr	r3, [pc, #332]	; (4015a4 <udc_process_setup+0x3fc>)
  401456:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401458:	885e      	ldrh	r6, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  40145a:	4628      	mov	r0, r5
  40145c:	4b58      	ldr	r3, [pc, #352]	; (4015c0 <udc_process_setup+0x418>)
  40145e:	4798      	blx	r3
  401460:	4604      	mov	r4, r0
  401462:	2800      	cmp	r0, #0
  401464:	d03a      	beq.n	4014dc <udc_process_setup+0x334>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  401466:	4628      	mov	r0, r5
  401468:	b2f1      	uxtb	r1, r6
  40146a:	4b54      	ldr	r3, [pc, #336]	; (4015bc <udc_process_setup+0x414>)
  40146c:	4798      	blx	r3
  40146e:	4604      	mov	r4, r0
  401470:	e034      	b.n	4014dc <udc_process_setup+0x334>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
  401472:	2400      	movs	r4, #0
  401474:	e032      	b.n	4014dc <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  401476:	2400      	movs	r4, #0
  401478:	e030      	b.n	4014dc <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40147a:	2b02      	cmp	r3, #2
  40147c:	d130      	bne.n	4014e0 <udc_process_setup+0x338>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  40147e:	4b49      	ldr	r3, [pc, #292]	; (4015a4 <udc_process_setup+0x3fc>)
  401480:	785b      	ldrb	r3, [r3, #1]
  401482:	2b01      	cmp	r3, #1
  401484:	d002      	beq.n	40148c <udc_process_setup+0x2e4>
  401486:	2b03      	cmp	r3, #3
  401488:	d010      	beq.n	4014ac <udc_process_setup+0x304>
  40148a:	e026      	b.n	4014da <udc_process_setup+0x332>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  40148c:	4b45      	ldr	r3, [pc, #276]	; (4015a4 <udc_process_setup+0x3fc>)
  40148e:	88db      	ldrh	r3, [r3, #6]
  401490:	b943      	cbnz	r3, 4014a4 <udc_process_setup+0x2fc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401492:	4b44      	ldr	r3, [pc, #272]	; (4015a4 <udc_process_setup+0x3fc>)
  401494:	885b      	ldrh	r3, [r3, #2]
  401496:	b93b      	cbnz	r3, 4014a8 <udc_process_setup+0x300>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401498:	4b42      	ldr	r3, [pc, #264]	; (4015a4 <udc_process_setup+0x3fc>)
  40149a:	7918      	ldrb	r0, [r3, #4]
  40149c:	4b49      	ldr	r3, [pc, #292]	; (4015c4 <udc_process_setup+0x41c>)
  40149e:	4798      	blx	r3
  4014a0:	4604      	mov	r4, r0
  4014a2:	e01b      	b.n	4014dc <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  4014a4:	2400      	movs	r4, #0
  4014a6:	e019      	b.n	4014dc <udc_process_setup+0x334>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  4014a8:	2400      	movs	r4, #0
  4014aa:	e017      	b.n	4014dc <udc_process_setup+0x334>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4014ac:	4b3d      	ldr	r3, [pc, #244]	; (4015a4 <udc_process_setup+0x3fc>)
  4014ae:	88db      	ldrh	r3, [r3, #6]
  4014b0:	b95b      	cbnz	r3, 4014ca <udc_process_setup+0x322>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4014b2:	4b3c      	ldr	r3, [pc, #240]	; (4015a4 <udc_process_setup+0x3fc>)
  4014b4:	885b      	ldrh	r3, [r3, #2]
  4014b6:	b953      	cbnz	r3, 4014ce <udc_process_setup+0x326>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4014b8:	4c3a      	ldr	r4, [pc, #232]	; (4015a4 <udc_process_setup+0x3fc>)
  4014ba:	7920      	ldrb	r0, [r4, #4]
  4014bc:	4b42      	ldr	r3, [pc, #264]	; (4015c8 <udc_process_setup+0x420>)
  4014be:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4014c0:	7920      	ldrb	r0, [r4, #4]
  4014c2:	4b42      	ldr	r3, [pc, #264]	; (4015cc <udc_process_setup+0x424>)
  4014c4:	4798      	blx	r3
  4014c6:	4604      	mov	r4, r0
  4014c8:	e008      	b.n	4014dc <udc_process_setup+0x334>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  4014ca:	2400      	movs	r4, #0
  4014cc:	e006      	b.n	4014dc <udc_process_setup+0x334>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  4014ce:	2400      	movs	r4, #0
  4014d0:	e004      	b.n	4014dc <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  4014d2:	2400      	movs	r4, #0
  4014d4:	e002      	b.n	4014dc <udc_process_setup+0x334>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  4014d6:	2400      	movs	r4, #0
  4014d8:	e000      	b.n	4014dc <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  4014da:	2400      	movs	r4, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  4014dc:	2c00      	cmp	r4, #0
  4014de:	d15d      	bne.n	40159c <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  4014e0:	4b30      	ldr	r3, [pc, #192]	; (4015a4 <udc_process_setup+0x3fc>)
  4014e2:	781b      	ldrb	r3, [r3, #0]
  4014e4:	f003 031f 	and.w	r3, r3, #31
  4014e8:	2b01      	cmp	r3, #1
  4014ea:	d11e      	bne.n	40152a <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4014ec:	4b31      	ldr	r3, [pc, #196]	; (4015b4 <udc_process_setup+0x40c>)
  4014ee:	781b      	ldrb	r3, [r3, #0]
  4014f0:	b1db      	cbz	r3, 40152a <udc_process_setup+0x382>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4014f2:	4b2c      	ldr	r3, [pc, #176]	; (4015a4 <udc_process_setup+0x3fc>)
  4014f4:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4014f6:	4b30      	ldr	r3, [pc, #192]	; (4015b8 <udc_process_setup+0x410>)
  4014f8:	681d      	ldr	r5, [r3, #0]
  4014fa:	682b      	ldr	r3, [r5, #0]
  4014fc:	791b      	ldrb	r3, [r3, #4]
  4014fe:	42a3      	cmp	r3, r4
  401500:	d913      	bls.n	40152a <udc_process_setup+0x382>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401502:	4620      	mov	r0, r4
  401504:	2100      	movs	r1, #0
  401506:	4b32      	ldr	r3, [pc, #200]	; (4015d0 <udc_process_setup+0x428>)
  401508:	4798      	blx	r3
  40150a:	b170      	cbz	r0, 40152a <udc_process_setup+0x382>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  40150c:	686b      	ldr	r3, [r5, #4]
  40150e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401512:	68eb      	ldr	r3, [r5, #12]
  401514:	4798      	blx	r3
  401516:	4601      	mov	r1, r0
  401518:	4620      	mov	r0, r4
  40151a:	4b2d      	ldr	r3, [pc, #180]	; (4015d0 <udc_process_setup+0x428>)
  40151c:	4798      	blx	r3
  40151e:	b120      	cbz	r0, 40152a <udc_process_setup+0x382>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  401520:	68ab      	ldr	r3, [r5, #8]
  401522:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  401524:	4604      	mov	r4, r0
  401526:	2800      	cmp	r0, #0
  401528:	d138      	bne.n	40159c <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  40152a:	4b1e      	ldr	r3, [pc, #120]	; (4015a4 <udc_process_setup+0x3fc>)
  40152c:	781b      	ldrb	r3, [r3, #0]
  40152e:	f003 031f 	and.w	r3, r3, #31
  401532:	2b02      	cmp	r3, #2
  401534:	d128      	bne.n	401588 <udc_process_setup+0x3e0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401536:	4b1f      	ldr	r3, [pc, #124]	; (4015b4 <udc_process_setup+0x40c>)
  401538:	781b      	ldrb	r3, [r3, #0]
  40153a:	b1fb      	cbz	r3, 40157c <udc_process_setup+0x3d4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40153c:	4b1e      	ldr	r3, [pc, #120]	; (4015b8 <udc_process_setup+0x410>)
  40153e:	681b      	ldr	r3, [r3, #0]
  401540:	681a      	ldr	r2, [r3, #0]
  401542:	7912      	ldrb	r2, [r2, #4]
  401544:	b1e2      	cbz	r2, 401580 <udc_process_setup+0x3d8>
  401546:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401548:	4f21      	ldr	r7, [pc, #132]	; (4015d0 <udc_process_setup+0x428>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40154a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4015b8 <udc_process_setup+0x410>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  40154e:	685b      	ldr	r3, [r3, #4]
  401550:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401554:	68f3      	ldr	r3, [r6, #12]
  401556:	4798      	blx	r3
  401558:	4601      	mov	r1, r0
  40155a:	4628      	mov	r0, r5
  40155c:	47b8      	blx	r7
  40155e:	4604      	mov	r4, r0
  401560:	b1e0      	cbz	r0, 40159c <udc_process_setup+0x3f4>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  401562:	68b3      	ldr	r3, [r6, #8]
  401564:	4798      	blx	r3
  401566:	4604      	mov	r4, r0
  401568:	b9c0      	cbnz	r0, 40159c <udc_process_setup+0x3f4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  40156a:	3501      	adds	r5, #1
  40156c:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40156e:	f8d8 3000 	ldr.w	r3, [r8]
  401572:	681a      	ldr	r2, [r3, #0]
  401574:	7912      	ldrb	r2, [r2, #4]
  401576:	42aa      	cmp	r2, r5
  401578:	d8e9      	bhi.n	40154e <udc_process_setup+0x3a6>
  40157a:	e00f      	b.n	40159c <udc_process_setup+0x3f4>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  40157c:	2400      	movs	r4, #0
  40157e:	e00d      	b.n	40159c <udc_process_setup+0x3f4>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  401580:	2400      	movs	r4, #0
  401582:	e00b      	b.n	40159c <udc_process_setup+0x3f4>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  401584:	2400      	movs	r4, #0
  401586:	e009      	b.n	40159c <udc_process_setup+0x3f4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401588:	2400      	movs	r4, #0
  40158a:	e007      	b.n	40159c <udc_process_setup+0x3f4>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  40158c:	f013 0f60 	tst.w	r3, #96	; 0x60
  401590:	d1a6      	bne.n	4014e0 <udc_process_setup+0x338>
  401592:	e6cb      	b.n	40132c <udc_process_setup+0x184>
  401594:	f013 0f60 	tst.w	r3, #96	; 0x60
  401598:	d1a2      	bne.n	4014e0 <udc_process_setup+0x338>
  40159a:	e617      	b.n	4011cc <udc_process_setup+0x24>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  40159c:	4620      	mov	r0, r4
  40159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015a2:	bf00      	nop
  4015a4:	20000c3c 	.word	0x20000c3c
  4015a8:	00402b39 	.word	0x00402b39
  4015ac:	20000038 	.word	0x20000038
  4015b0:	00401125 	.word	0x00401125
  4015b4:	20000b0c 	.word	0x20000b0c
  4015b8:	20000b04 	.word	0x20000b04
  4015bc:	004010bd 	.word	0x004010bd
  4015c0:	00401055 	.word	0x00401055
  4015c4:	00402ddd 	.word	0x00402ddd
  4015c8:	00403009 	.word	0x00403009
  4015cc:	00402cf1 	.word	0x00402cf1
  4015d0:	00400fed 	.word	0x00400fed

004015d4 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  4015d4:	2301      	movs	r3, #1
  4015d6:	fa03 f101 	lsl.w	r1, r3, r1
  4015da:	6101      	str	r1, [r0, #16]
  4015dc:	4770      	bx	lr
  4015de:	bf00      	nop

004015e0 <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
  4015e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4015e4:	6143      	str	r3, [r0, #20]
  4015e6:	4770      	bx	lr

004015e8 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
  4015e8:	6a00      	ldr	r0, [r0, #32]
}
  4015ea:	4770      	bx	lr

004015ec <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4015ec:	2301      	movs	r3, #1
  4015ee:	6003      	str	r3, [r0, #0]
  4015f0:	4770      	bx	lr
  4015f2:	bf00      	nop

004015f4 <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  4015f4:	6843      	ldr	r3, [r0, #4]
  4015f6:	f023 0301 	bic.w	r3, r3, #1
  4015fa:	6043      	str	r3, [r0, #4]
  4015fc:	4770      	bx	lr
  4015fe:	bf00      	nop

00401600 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  401600:	6201      	str	r1, [r0, #32]
  401602:	4770      	bx	lr

00401604 <dacc_set_writeprotect>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_enable 1 to enable, 0 to disable.
 */
void dacc_set_writeprotect(Dacc *p_dacc, uint32_t ul_enable)
{
	if (ul_enable) {
  401604:	b119      	cbz	r1, 40160e <dacc_set_writeprotect+0xa>
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY)
  401606:	4b04      	ldr	r3, [pc, #16]	; (401618 <dacc_set_writeprotect+0x14>)
  401608:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  40160c:	4770      	bx	lr
			          | DACC_WPMR_WPEN;
	} else {
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY);
  40160e:	4b03      	ldr	r3, [pc, #12]	; (40161c <dacc_set_writeprotect+0x18>)
  401610:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  401614:	4770      	bx	lr
  401616:	bf00      	nop
  401618:	44414301 	.word	0x44414301
  40161c:	44414300 	.word	0x44414300

00401620 <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  401620:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  401622:	2901      	cmp	r1, #1
  401624:	d806      	bhi.n	401634 <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
  401626:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  40162a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  40162e:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  401630:	2000      	movs	r0, #0
  401632:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
  401634:	2001      	movs	r0, #1
	}
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;
	return DACC_RC_OK;
}
  401636:	4770      	bx	lr

00401638 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
  401638:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
  40163a:	6844      	ldr	r4, [r0, #4]
  40163c:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
  401640:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
  401644:	0209      	lsls	r1, r1, #8
  401646:	b289      	uxth	r1, r1
  401648:	430c      	orrs	r4, r1
	if (ul_maxs) {
  40164a:	b112      	cbz	r2, 401652 <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
  40164c:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  401650:	e001      	b.n	401656 <dacc_set_timing+0x1e>
	} else {
		mr &= ~DACC_MR_MAXS;
  401652:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  401656:	061b      	lsls	r3, r3, #24
  401658:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  40165c:	431c      	orrs	r4, r3
	p_dacc->DACC_MR = mr;
  40165e:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
  401660:	2000      	movs	r0, #0
  401662:	f85d 4b04 	ldr.w	r4, [sp], #4
  401666:	4770      	bx	lr

00401668 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  401668:	2901      	cmp	r1, #1
  40166a:	d805      	bhi.n	401678 <dacc_enable_channel+0x10>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  40166c:	2301      	movs	r3, #1
  40166e:	fa03 f101 	lsl.w	r1, r3, r1
  401672:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  401674:	2000      	movs	r0, #0
  401676:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  401678:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40167a:	4770      	bx	lr

0040167c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40167c:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40167e:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  401680:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401684:	d02e      	beq.n	4016e4 <pio_set_peripheral+0x68>
  401686:	d808      	bhi.n	40169a <pio_set_peripheral+0x1e>
  401688:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40168c:	d014      	beq.n	4016b8 <pio_set_peripheral+0x3c>
  40168e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401692:	d01d      	beq.n	4016d0 <pio_set_peripheral+0x54>
  401694:	2900      	cmp	r1, #0
  401696:	d135      	bne.n	401704 <pio_set_peripheral+0x88>
  401698:	e035      	b.n	401706 <pio_set_peripheral+0x8a>
  40169a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40169e:	d032      	beq.n	401706 <pio_set_peripheral+0x8a>
  4016a0:	d803      	bhi.n	4016aa <pio_set_peripheral+0x2e>
  4016a2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4016a6:	d027      	beq.n	4016f8 <pio_set_peripheral+0x7c>
  4016a8:	e02c      	b.n	401704 <pio_set_peripheral+0x88>
  4016aa:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4016ae:	d02a      	beq.n	401706 <pio_set_peripheral+0x8a>
  4016b0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4016b4:	d027      	beq.n	401706 <pio_set_peripheral+0x8a>
  4016b6:	e025      	b.n	401704 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016b8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4016ba:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4016bc:	43d3      	mvns	r3, r2
  4016be:	4021      	ands	r1, r4
  4016c0:	4019      	ands	r1, r3
  4016c2:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016c4:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4016c6:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4016c8:	4021      	ands	r1, r4
  4016ca:	400b      	ands	r3, r1
  4016cc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016ce:	e019      	b.n	401704 <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016d0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4016d2:	4313      	orrs	r3, r2
  4016d4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016d6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4016d8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4016da:	400b      	ands	r3, r1
  4016dc:	ea23 0302 	bic.w	r3, r3, r2
  4016e0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016e2:	e00f      	b.n	401704 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4016e6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4016e8:	400b      	ands	r3, r1
  4016ea:	ea23 0302 	bic.w	r3, r3, r2
  4016ee:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016f0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4016f2:	4313      	orrs	r3, r2
  4016f4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016f6:	e005      	b.n	401704 <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016f8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4016fa:	4313      	orrs	r3, r2
  4016fc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4016fe:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401700:	4313      	orrs	r3, r2
  401702:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401704:	6042      	str	r2, [r0, #4]
}
  401706:	f85d 4b04 	ldr.w	r4, [sp], #4
  40170a:	4770      	bx	lr

0040170c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  40170c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40170e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401710:	9c01      	ldr	r4, [sp, #4]
  401712:	b10c      	cbz	r4, 401718 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401714:	6641      	str	r1, [r0, #100]	; 0x64
  401716:	e000      	b.n	40171a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401718:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40171a:	b10b      	cbz	r3, 401720 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  40171c:	6501      	str	r1, [r0, #80]	; 0x50
  40171e:	e000      	b.n	401722 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401720:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401722:	b10a      	cbz	r2, 401728 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401724:	6301      	str	r1, [r0, #48]	; 0x30
  401726:	e000      	b.n	40172a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401728:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40172a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40172c:	6001      	str	r1, [r0, #0]
}
  40172e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401732:	4770      	bx	lr

00401734 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401734:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401736:	4770      	bx	lr

00401738 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401738:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40173a:	4770      	bx	lr

0040173c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40173c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401740:	4680      	mov	r8, r0
  401742:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401744:	4b12      	ldr	r3, [pc, #72]	; (401790 <pio_handler_process+0x54>)
  401746:	4798      	blx	r3
  401748:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40174a:	4640      	mov	r0, r8
  40174c:	4b11      	ldr	r3, [pc, #68]	; (401794 <pio_handler_process+0x58>)
  40174e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401750:	4005      	ands	r5, r0
  401752:	d012      	beq.n	40177a <pio_handler_process+0x3e>
  401754:	4c10      	ldr	r4, [pc, #64]	; (401798 <pio_handler_process+0x5c>)
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401756:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  40175a:	42b3      	cmp	r3, r6
  40175c:	d10a      	bne.n	401774 <pio_handler_process+0x38>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40175e:	f854 1c08 	ldr.w	r1, [r4, #-8]
  401762:	4229      	tst	r1, r5
  401764:	d006      	beq.n	401774 <pio_handler_process+0x38>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401766:	6823      	ldr	r3, [r4, #0]
  401768:	4630      	mov	r0, r6
  40176a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40176c:	f854 3c08 	ldr.w	r3, [r4, #-8]
  401770:	ea25 0503 	bic.w	r5, r5, r3
  401774:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401776:	2d00      	cmp	r5, #0
  401778:	d1ed      	bne.n	401756 <pio_handler_process+0x1a>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40177a:	4b08      	ldr	r3, [pc, #32]	; (40179c <pio_handler_process+0x60>)
  40177c:	681b      	ldr	r3, [r3, #0]
  40177e:	b123      	cbz	r3, 40178a <pio_handler_process+0x4e>
		if (pio_capture_handler) {
  401780:	4b07      	ldr	r3, [pc, #28]	; (4017a0 <pio_handler_process+0x64>)
  401782:	681b      	ldr	r3, [r3, #0]
  401784:	b10b      	cbz	r3, 40178a <pio_handler_process+0x4e>
			pio_capture_handler(p_pio);
  401786:	4640      	mov	r0, r8
  401788:	4798      	blx	r3
  40178a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40178e:	bf00      	nop
  401790:	00401735 	.word	0x00401735
  401794:	00401739 	.word	0x00401739
  401798:	20000b24 	.word	0x20000b24
  40179c:	20000c38 	.word	0x20000c38
  4017a0:	20000b14 	.word	0x20000b14

004017a4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4017a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4017a6:	4802      	ldr	r0, [pc, #8]	; (4017b0 <PIOA_Handler+0xc>)
  4017a8:	210b      	movs	r1, #11
  4017aa:	4b02      	ldr	r3, [pc, #8]	; (4017b4 <PIOA_Handler+0x10>)
  4017ac:	4798      	blx	r3
  4017ae:	bd08      	pop	{r3, pc}
  4017b0:	400e0e00 	.word	0x400e0e00
  4017b4:	0040173d 	.word	0x0040173d

004017b8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4017b8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4017ba:	4802      	ldr	r0, [pc, #8]	; (4017c4 <PIOB_Handler+0xc>)
  4017bc:	210c      	movs	r1, #12
  4017be:	4b02      	ldr	r3, [pc, #8]	; (4017c8 <PIOB_Handler+0x10>)
  4017c0:	4798      	blx	r3
  4017c2:	bd08      	pop	{r3, pc}
  4017c4:	400e1000 	.word	0x400e1000
  4017c8:	0040173d 	.word	0x0040173d

004017cc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4017cc:	4b17      	ldr	r3, [pc, #92]	; (40182c <pmc_switch_mck_to_pllack+0x60>)
  4017ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4017d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  4017d4:	4310      	orrs	r0, r2
  4017d6:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017da:	f013 0f08 	tst.w	r3, #8
  4017de:	d109      	bne.n	4017f4 <pmc_switch_mck_to_pllack+0x28>
  4017e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4017e4:	4911      	ldr	r1, [pc, #68]	; (40182c <pmc_switch_mck_to_pllack+0x60>)
  4017e6:	e001      	b.n	4017ec <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4017e8:	3b01      	subs	r3, #1
  4017ea:	d019      	beq.n	401820 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017ec:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4017ee:	f012 0f08 	tst.w	r2, #8
  4017f2:	d0f9      	beq.n	4017e8 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4017f4:	4b0d      	ldr	r3, [pc, #52]	; (40182c <pmc_switch_mck_to_pllack+0x60>)
  4017f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4017f8:	f022 0203 	bic.w	r2, r2, #3
  4017fc:	f042 0202 	orr.w	r2, r2, #2
  401800:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401802:	6e98      	ldr	r0, [r3, #104]	; 0x68
  401804:	f010 0008 	ands.w	r0, r0, #8
  401808:	d10c      	bne.n	401824 <pmc_switch_mck_to_pllack+0x58>
  40180a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40180e:	4907      	ldr	r1, [pc, #28]	; (40182c <pmc_switch_mck_to_pllack+0x60>)
  401810:	e001      	b.n	401816 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401812:	3b01      	subs	r3, #1
  401814:	d008      	beq.n	401828 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401816:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401818:	f012 0f08 	tst.w	r2, #8
  40181c:	d0f9      	beq.n	401812 <pmc_switch_mck_to_pllack+0x46>
  40181e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401820:	2001      	movs	r0, #1
  401822:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401824:	2000      	movs	r0, #0
  401826:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401828:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40182a:	4770      	bx	lr
  40182c:	400e0400 	.word	0x400e0400

00401830 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401830:	b138      	cbz	r0, 401842 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401832:	4911      	ldr	r1, [pc, #68]	; (401878 <pmc_switch_mainck_to_xtal+0x48>)
  401834:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401836:	4a11      	ldr	r2, [pc, #68]	; (40187c <pmc_switch_mainck_to_xtal+0x4c>)
  401838:	401a      	ands	r2, r3
  40183a:	4b11      	ldr	r3, [pc, #68]	; (401880 <pmc_switch_mainck_to_xtal+0x50>)
  40183c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40183e:	620b      	str	r3, [r1, #32]
  401840:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401842:	4a0d      	ldr	r2, [pc, #52]	; (401878 <pmc_switch_mainck_to_xtal+0x48>)
  401844:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401846:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40184a:	f023 0303 	bic.w	r3, r3, #3
  40184e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401852:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401856:	0209      	lsls	r1, r1, #8
  401858:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40185a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40185c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40185e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401860:	f013 0f01 	tst.w	r3, #1
  401864:	d0fb      	beq.n	40185e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401866:	4a04      	ldr	r2, [pc, #16]	; (401878 <pmc_switch_mainck_to_xtal+0x48>)
  401868:	6a13      	ldr	r3, [r2, #32]
  40186a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401872:	6213      	str	r3, [r2, #32]
  401874:	4770      	bx	lr
  401876:	bf00      	nop
  401878:	400e0400 	.word	0x400e0400
  40187c:	fec8fffc 	.word	0xfec8fffc
  401880:	01370002 	.word	0x01370002

00401884 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401884:	4b02      	ldr	r3, [pc, #8]	; (401890 <pmc_osc_is_ready_mainck+0xc>)
  401886:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401888:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40188c:	4770      	bx	lr
  40188e:	bf00      	nop
  401890:	400e0400 	.word	0x400e0400

00401894 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401894:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401898:	4b01      	ldr	r3, [pc, #4]	; (4018a0 <pmc_disable_pllack+0xc>)
  40189a:	629a      	str	r2, [r3, #40]	; 0x28
  40189c:	4770      	bx	lr
  40189e:	bf00      	nop
  4018a0:	400e0400 	.word	0x400e0400

004018a4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4018a4:	4b02      	ldr	r3, [pc, #8]	; (4018b0 <pmc_is_locked_pllack+0xc>)
  4018a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4018a8:	f000 0002 	and.w	r0, r0, #2
  4018ac:	4770      	bx	lr
  4018ae:	bf00      	nop
  4018b0:	400e0400 	.word	0x400e0400

004018b4 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4018b4:	2200      	movs	r2, #0
  4018b6:	4b01      	ldr	r3, [pc, #4]	; (4018bc <pmc_disable_pllbck+0x8>)
  4018b8:	62da      	str	r2, [r3, #44]	; 0x2c
  4018ba:	4770      	bx	lr
  4018bc:	400e0400 	.word	0x400e0400

004018c0 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4018c0:	4b02      	ldr	r3, [pc, #8]	; (4018cc <pmc_is_locked_pllbck+0xc>)
  4018c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4018c4:	f000 0004 	and.w	r0, r0, #4
  4018c8:	4770      	bx	lr
  4018ca:	bf00      	nop
  4018cc:	400e0400 	.word	0x400e0400

004018d0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4018d0:	2822      	cmp	r0, #34	; 0x22
  4018d2:	d820      	bhi.n	401916 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  4018d4:	281f      	cmp	r0, #31
  4018d6:	d80d      	bhi.n	4018f4 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4018d8:	4b12      	ldr	r3, [pc, #72]	; (401924 <pmc_enable_periph_clk+0x54>)
  4018da:	699a      	ldr	r2, [r3, #24]
  4018dc:	2301      	movs	r3, #1
  4018de:	4083      	lsls	r3, r0
  4018e0:	401a      	ands	r2, r3
  4018e2:	4293      	cmp	r3, r2
  4018e4:	d019      	beq.n	40191a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  4018e6:	2301      	movs	r3, #1
  4018e8:	fa03 f000 	lsl.w	r0, r3, r0
  4018ec:	4b0d      	ldr	r3, [pc, #52]	; (401924 <pmc_enable_periph_clk+0x54>)
  4018ee:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4018f0:	2000      	movs	r0, #0
  4018f2:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4018f4:	4b0b      	ldr	r3, [pc, #44]	; (401924 <pmc_enable_periph_clk+0x54>)
  4018f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  4018fa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4018fc:	2301      	movs	r3, #1
  4018fe:	4083      	lsls	r3, r0
  401900:	401a      	ands	r2, r3
  401902:	4293      	cmp	r3, r2
  401904:	d00b      	beq.n	40191e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  401906:	2301      	movs	r3, #1
  401908:	fa03 f000 	lsl.w	r0, r3, r0
  40190c:	4b05      	ldr	r3, [pc, #20]	; (401924 <pmc_enable_periph_clk+0x54>)
  40190e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401912:	2000      	movs	r0, #0
  401914:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401916:	2001      	movs	r0, #1
  401918:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40191a:	2000      	movs	r0, #0
  40191c:	4770      	bx	lr
  40191e:	2000      	movs	r0, #0
}
  401920:	4770      	bx	lr
  401922:	bf00      	nop
  401924:	400e0400 	.word	0x400e0400

00401928 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401928:	2822      	cmp	r0, #34	; 0x22
  40192a:	d820      	bhi.n	40196e <pmc_disable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  40192c:	281f      	cmp	r0, #31
  40192e:	d80d      	bhi.n	40194c <pmc_disable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  401930:	4b12      	ldr	r3, [pc, #72]	; (40197c <pmc_disable_periph_clk+0x54>)
  401932:	699a      	ldr	r2, [r3, #24]
  401934:	2301      	movs	r3, #1
  401936:	4083      	lsls	r3, r0
  401938:	401a      	ands	r2, r3
  40193a:	4293      	cmp	r3, r2
  40193c:	d119      	bne.n	401972 <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR0 = 1 << ul_id;
  40193e:	2301      	movs	r3, #1
  401940:	fa03 f000 	lsl.w	r0, r3, r0
  401944:	4b0d      	ldr	r3, [pc, #52]	; (40197c <pmc_disable_periph_clk+0x54>)
  401946:	6158      	str	r0, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  401948:	2000      	movs	r0, #0
  40194a:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  40194c:	4b0b      	ldr	r3, [pc, #44]	; (40197c <pmc_disable_periph_clk+0x54>)
  40194e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  401952:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  401954:	2301      	movs	r3, #1
  401956:	4083      	lsls	r3, r0
  401958:	401a      	ands	r2, r3
  40195a:	4293      	cmp	r3, r2
  40195c:	d10b      	bne.n	401976 <pmc_disable_periph_clk+0x4e>
			PMC->PMC_PCDR1 = 1 << ul_id;
  40195e:	2301      	movs	r3, #1
  401960:	fa03 f000 	lsl.w	r0, r3, r0
  401964:	4b05      	ldr	r3, [pc, #20]	; (40197c <pmc_disable_periph_clk+0x54>)
  401966:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  40196a:	2000      	movs	r0, #0
  40196c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40196e:	2001      	movs	r0, #1
  401970:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  401972:	2000      	movs	r0, #0
  401974:	4770      	bx	lr
  401976:	2000      	movs	r0, #0
}
  401978:	4770      	bx	lr
  40197a:	bf00      	nop
  40197c:	400e0400 	.word	0x400e0400

00401980 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  401980:	0200      	lsls	r0, r0, #8
  401982:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
  401986:	f042 0201 	orr.w	r2, r2, #1
  40198a:	4b01      	ldr	r3, [pc, #4]	; (401990 <pmc_switch_udpck_to_pllbck+0x10>)
  40198c:	639a      	str	r2, [r3, #56]	; 0x38
  40198e:	4770      	bx	lr
  401990:	400e0400 	.word	0x400e0400

00401994 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
  401994:	2280      	movs	r2, #128	; 0x80
  401996:	4b01      	ldr	r3, [pc, #4]	; (40199c <pmc_enable_udpck+0x8>)
  401998:	601a      	str	r2, [r3, #0]
  40199a:	4770      	bx	lr
  40199c:	400e0400 	.word	0x400e0400

004019a0 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4019a0:	4b03      	ldr	r3, [pc, #12]	; (4019b0 <pmc_set_fast_startup_input+0x10>)
  4019a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4019a4:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4019a8:	4302      	orrs	r2, r0
  4019aa:	671a      	str	r2, [r3, #112]	; 0x70
  4019ac:	4770      	bx	lr
  4019ae:	bf00      	nop
  4019b0:	400e0400 	.word	0x400e0400

004019b4 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4019b4:	4b02      	ldr	r3, [pc, #8]	; (4019c0 <pmc_is_wakeup_clocks_restored+0xc>)
  4019b6:	7818      	ldrb	r0, [r3, #0]
}
  4019b8:	f080 0001 	eor.w	r0, r0, #1
  4019bc:	4770      	bx	lr
  4019be:	bf00      	nop
  4019c0:	20000b88 	.word	0x20000b88

004019c4 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  4019c4:	0189      	lsls	r1, r1, #6
  4019c6:	2302      	movs	r3, #2
  4019c8:	5043      	str	r3, [r0, r1]
  4019ca:	4770      	bx	lr

004019cc <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
  4019cc:	4603      	mov	r3, r0
  4019ce:	bb58      	cbnz	r0, 401a28 <udd_sleep_mode+0x5c>
  4019d0:	4a18      	ldr	r2, [pc, #96]	; (401a34 <udd_sleep_mode+0x68>)
  4019d2:	7812      	ldrb	r2, [r2, #0]
  4019d4:	b32a      	cbz	r2, 401a22 <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4019d6:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4019da:	b672      	cpsid	i
  4019dc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4019e0:	4a15      	ldr	r2, [pc, #84]	; (401a38 <udd_sleep_mode+0x6c>)
  4019e2:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  4019e4:	4a15      	ldr	r2, [pc, #84]	; (401a3c <udd_sleep_mode+0x70>)
  4019e6:	7890      	ldrb	r0, [r2, #2]
  4019e8:	3801      	subs	r0, #1
  4019ea:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4019ec:	b9c9      	cbnz	r1, 401a22 <udd_sleep_mode+0x56>
		cpu_irq_enable();
  4019ee:	2101      	movs	r1, #1
  4019f0:	4a11      	ldr	r2, [pc, #68]	; (401a38 <udd_sleep_mode+0x6c>)
  4019f2:	7011      	strb	r1, [r2, #0]
  4019f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4019f8:	b662      	cpsie	i
  4019fa:	e012      	b.n	401a22 <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4019fc:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401a00:	b672      	cpsid	i
  401a02:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401a06:	2000      	movs	r0, #0
  401a08:	4a0b      	ldr	r2, [pc, #44]	; (401a38 <udd_sleep_mode+0x6c>)
  401a0a:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401a0c:	4a0b      	ldr	r2, [pc, #44]	; (401a3c <udd_sleep_mode+0x70>)
  401a0e:	7890      	ldrb	r0, [r2, #2]
  401a10:	3001      	adds	r0, #1
  401a12:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401a14:	b929      	cbnz	r1, 401a22 <udd_sleep_mode+0x56>
		cpu_irq_enable();
  401a16:	2101      	movs	r1, #1
  401a18:	4a07      	ldr	r2, [pc, #28]	; (401a38 <udd_sleep_mode+0x6c>)
  401a1a:	7011      	strb	r1, [r2, #0]
  401a1c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401a20:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401a22:	4a04      	ldr	r2, [pc, #16]	; (401a34 <udd_sleep_mode+0x68>)
  401a24:	7013      	strb	r3, [r2, #0]
  401a26:	4770      	bx	lr
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  401a28:	4a02      	ldr	r2, [pc, #8]	; (401a34 <udd_sleep_mode+0x68>)
  401a2a:	7812      	ldrb	r2, [r2, #0]
  401a2c:	2a00      	cmp	r2, #0
  401a2e:	d0e5      	beq.n	4019fc <udd_sleep_mode+0x30>
  401a30:	e7f7      	b.n	401a22 <udd_sleep_mode+0x56>
  401a32:	bf00      	nop
  401a34:	20000bc8 	.word	0x20000bc8
  401a38:	200000b0 	.word	0x200000b0
  401a3c:	20000c30 	.word	0x20000c30

00401a40 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401a40:	4a03      	ldr	r2, [pc, #12]	; (401a50 <udd_ctrl_init+0x10>)
  401a42:	2300      	movs	r3, #0
  401a44:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401a46:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  401a48:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401a4a:	4a02      	ldr	r2, [pc, #8]	; (401a54 <udd_ctrl_init+0x14>)
  401a4c:	7013      	strb	r3, [r2, #0]
  401a4e:	4770      	bx	lr
  401a50:	20000c3c 	.word	0x20000c3c
  401a54:	20000bcd 	.word	0x20000bcd

00401a58 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  401a58:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401a5a:	2205      	movs	r2, #5
  401a5c:	4b0e      	ldr	r3, [pc, #56]	; (401a98 <udd_ctrl_stall_data+0x40>)
  401a5e:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401a60:	4b0e      	ldr	r3, [pc, #56]	; (401a9c <udd_ctrl_stall_data+0x44>)
  401a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a64:	9200      	str	r2, [sp, #0]
  401a66:	9a00      	ldr	r2, [sp, #0]
  401a68:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a6c:	9200      	str	r2, [sp, #0]
  401a6e:	9a00      	ldr	r2, [sp, #0]
  401a70:	f042 0220 	orr.w	r2, r2, #32
  401a74:	9200      	str	r2, [sp, #0]
  401a76:	9a00      	ldr	r2, [sp, #0]
  401a78:	631a      	str	r2, [r3, #48]	; 0x30
  401a7a:	2300      	movs	r3, #0
  401a7c:	9301      	str	r3, [sp, #4]
  401a7e:	9b01      	ldr	r3, [sp, #4]
  401a80:	2b13      	cmp	r3, #19
  401a82:	d806      	bhi.n	401a92 <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401a84:	bf00      	nop
  401a86:	9b01      	ldr	r3, [sp, #4]
  401a88:	3301      	adds	r3, #1
  401a8a:	9301      	str	r3, [sp, #4]
  401a8c:	9b01      	ldr	r3, [sp, #4]
  401a8e:	2b13      	cmp	r3, #19
  401a90:	d9f8      	bls.n	401a84 <udd_ctrl_stall_data+0x2c>
}
  401a92:	b002      	add	sp, #8
  401a94:	4770      	bx	lr
  401a96:	bf00      	nop
  401a98:	20000bcd 	.word	0x20000bcd
  401a9c:	40034000 	.word	0x40034000

00401aa0 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  401aa0:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  401aa2:	2203      	movs	r2, #3
  401aa4:	4b0e      	ldr	r3, [pc, #56]	; (401ae0 <udd_ctrl_send_zlp_in+0x40>)
  401aa6:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  401aa8:	4b0e      	ldr	r3, [pc, #56]	; (401ae4 <udd_ctrl_send_zlp_in+0x44>)
  401aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401aac:	9200      	str	r2, [sp, #0]
  401aae:	9a00      	ldr	r2, [sp, #0]
  401ab0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ab4:	9200      	str	r2, [sp, #0]
  401ab6:	9a00      	ldr	r2, [sp, #0]
  401ab8:	f042 0210 	orr.w	r2, r2, #16
  401abc:	9200      	str	r2, [sp, #0]
  401abe:	9a00      	ldr	r2, [sp, #0]
  401ac0:	631a      	str	r2, [r3, #48]	; 0x30
  401ac2:	2300      	movs	r3, #0
  401ac4:	9301      	str	r3, [sp, #4]
  401ac6:	9b01      	ldr	r3, [sp, #4]
  401ac8:	2b13      	cmp	r3, #19
  401aca:	d806      	bhi.n	401ada <udd_ctrl_send_zlp_in+0x3a>
  401acc:	bf00      	nop
  401ace:	9b01      	ldr	r3, [sp, #4]
  401ad0:	3301      	adds	r3, #1
  401ad2:	9301      	str	r3, [sp, #4]
  401ad4:	9b01      	ldr	r3, [sp, #4]
  401ad6:	2b13      	cmp	r3, #19
  401ad8:	d9f8      	bls.n	401acc <udd_ctrl_send_zlp_in+0x2c>
}
  401ada:	b002      	add	sp, #8
  401adc:	4770      	bx	lr
  401ade:	bf00      	nop
  401ae0:	20000bcd 	.word	0x20000bcd
  401ae4:	40034000 	.word	0x40034000

00401ae8 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401ae8:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401aea:	4b02      	ldr	r3, [pc, #8]	; (401af4 <udd_ctrl_endofrequest+0xc>)
  401aec:	691b      	ldr	r3, [r3, #16]
  401aee:	b103      	cbz	r3, 401af2 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401af0:	4798      	blx	r3
  401af2:	bd08      	pop	{r3, pc}
  401af4:	20000c3c 	.word	0x20000c3c

00401af8 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  401af8:	b570      	push	{r4, r5, r6, lr}
  401afa:	b08a      	sub	sp, #40	; 0x28
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401afc:	4b75      	ldr	r3, [pc, #468]	; (401cd4 <udd_ctrl_in_sent+0x1dc>)
  401afe:	781b      	ldrb	r3, [r3, #0]
  401b00:	2b03      	cmp	r3, #3
  401b02:	d11d      	bne.n	401b40 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  401b04:	4b74      	ldr	r3, [pc, #464]	; (401cd8 <udd_ctrl_in_sent+0x1e0>)
  401b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401b08:	9200      	str	r2, [sp, #0]
  401b0a:	9a00      	ldr	r2, [sp, #0]
  401b0c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401b10:	9200      	str	r2, [sp, #0]
  401b12:	9a00      	ldr	r2, [sp, #0]
  401b14:	f022 0201 	bic.w	r2, r2, #1
  401b18:	9200      	str	r2, [sp, #0]
  401b1a:	9a00      	ldr	r2, [sp, #0]
  401b1c:	631a      	str	r2, [r3, #48]	; 0x30
  401b1e:	2300      	movs	r3, #0
  401b20:	9301      	str	r3, [sp, #4]
  401b22:	9b01      	ldr	r3, [sp, #4]
  401b24:	2b13      	cmp	r3, #19
  401b26:	d806      	bhi.n	401b36 <udd_ctrl_in_sent+0x3e>
  401b28:	bf00      	nop
  401b2a:	9b01      	ldr	r3, [sp, #4]
  401b2c:	3301      	adds	r3, #1
  401b2e:	9301      	str	r3, [sp, #4]
  401b30:	9b01      	ldr	r3, [sp, #4]
  401b32:	2b13      	cmp	r3, #19
  401b34:	d9f8      	bls.n	401b28 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  401b36:	4b69      	ldr	r3, [pc, #420]	; (401cdc <udd_ctrl_in_sent+0x1e4>)
  401b38:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  401b3a:	4b69      	ldr	r3, [pc, #420]	; (401ce0 <udd_ctrl_in_sent+0x1e8>)
  401b3c:	4798      	blx	r3
		return;
  401b3e:	e0c6      	b.n	401cce <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  401b40:	4b68      	ldr	r3, [pc, #416]	; (401ce4 <udd_ctrl_in_sent+0x1ec>)
  401b42:	881b      	ldrh	r3, [r3, #0]
  401b44:	4a68      	ldr	r2, [pc, #416]	; (401ce8 <udd_ctrl_in_sent+0x1f0>)
  401b46:	8994      	ldrh	r4, [r2, #12]
  401b48:	1ae4      	subs	r4, r4, r3
  401b4a:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401b4c:	2c00      	cmp	r4, #0
  401b4e:	d133      	bne.n	401bb8 <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401b50:	4a66      	ldr	r2, [pc, #408]	; (401cec <udd_ctrl_in_sent+0x1f4>)
  401b52:	8811      	ldrh	r1, [r2, #0]
  401b54:	440b      	add	r3, r1
  401b56:	b29b      	uxth	r3, r3
  401b58:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  401b5a:	4a63      	ldr	r2, [pc, #396]	; (401ce8 <udd_ctrl_in_sent+0x1f0>)
  401b5c:	88d2      	ldrh	r2, [r2, #6]
  401b5e:	429a      	cmp	r2, r3
  401b60:	d002      	beq.n	401b68 <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  401b62:	4b63      	ldr	r3, [pc, #396]	; (401cf0 <udd_ctrl_in_sent+0x1f8>)
  401b64:	781b      	ldrb	r3, [r3, #0]
  401b66:	b1eb      	cbz	r3, 401ba4 <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401b68:	2204      	movs	r2, #4
  401b6a:	4b5a      	ldr	r3, [pc, #360]	; (401cd4 <udd_ctrl_in_sent+0x1dc>)
  401b6c:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  401b6e:	4b5a      	ldr	r3, [pc, #360]	; (401cd8 <udd_ctrl_in_sent+0x1e0>)
  401b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401b72:	9202      	str	r2, [sp, #8]
  401b74:	9a02      	ldr	r2, [sp, #8]
  401b76:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401b7a:	9202      	str	r2, [sp, #8]
  401b7c:	9a02      	ldr	r2, [sp, #8]
  401b7e:	f022 0201 	bic.w	r2, r2, #1
  401b82:	9202      	str	r2, [sp, #8]
  401b84:	9a02      	ldr	r2, [sp, #8]
  401b86:	631a      	str	r2, [r3, #48]	; 0x30
  401b88:	2300      	movs	r3, #0
  401b8a:	9303      	str	r3, [sp, #12]
  401b8c:	9b03      	ldr	r3, [sp, #12]
  401b8e:	2b13      	cmp	r3, #19
  401b90:	f200 809d 	bhi.w	401cce <udd_ctrl_in_sent+0x1d6>
  401b94:	bf00      	nop
  401b96:	9b03      	ldr	r3, [sp, #12]
  401b98:	3301      	adds	r3, #1
  401b9a:	9303      	str	r3, [sp, #12]
  401b9c:	9b03      	ldr	r3, [sp, #12]
  401b9e:	2b13      	cmp	r3, #19
  401ba0:	d9f8      	bls.n	401b94 <udd_ctrl_in_sent+0x9c>
  401ba2:	e094      	b.n	401cce <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  401ba4:	4b50      	ldr	r3, [pc, #320]	; (401ce8 <udd_ctrl_in_sent+0x1f0>)
  401ba6:	695b      	ldr	r3, [r3, #20]
  401ba8:	b16b      	cbz	r3, 401bc6 <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  401baa:	4798      	blx	r3
  401bac:	b158      	cbz	r0, 401bc6 <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  401bae:	2200      	movs	r2, #0
  401bb0:	4b4c      	ldr	r3, [pc, #304]	; (401ce4 <udd_ctrl_in_sent+0x1ec>)
  401bb2:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401bb4:	4b4c      	ldr	r3, [pc, #304]	; (401ce8 <udd_ctrl_in_sent+0x1f0>)
  401bb6:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401bb8:	2c3f      	cmp	r4, #63	; 0x3f
  401bba:	d904      	bls.n	401bc6 <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  401bbc:	2200      	movs	r2, #0
  401bbe:	4b4c      	ldr	r3, [pc, #304]	; (401cf0 <udd_ctrl_in_sent+0x1f8>)
  401bc0:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401bc2:	2440      	movs	r4, #64	; 0x40
  401bc4:	e002      	b.n	401bcc <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  401bc6:	2201      	movs	r2, #1
  401bc8:	4b49      	ldr	r3, [pc, #292]	; (401cf0 <udd_ctrl_in_sent+0x1f8>)
  401bca:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401bcc:	4b46      	ldr	r3, [pc, #280]	; (401ce8 <udd_ctrl_in_sent+0x1f0>)
  401bce:	6899      	ldr	r1, [r3, #8]
  401bd0:	4b44      	ldr	r3, [pc, #272]	; (401ce4 <udd_ctrl_in_sent+0x1ec>)
  401bd2:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401bd4:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401bd8:	f1d0 0001 	rsbs	r0, r0, #1
  401bdc:	bf38      	it	cc
  401bde:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401be0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401be2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401be6:	2200      	movs	r2, #0
  401be8:	4b42      	ldr	r3, [pc, #264]	; (401cf4 <udd_ctrl_in_sent+0x1fc>)
  401bea:	701a      	strb	r2, [r3, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  401bec:	4b3a      	ldr	r3, [pc, #232]	; (401cd8 <udd_ctrl_in_sent+0x1e0>)
  401bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bf0:	f013 0f02 	tst.w	r3, #2
  401bf4:	d101      	bne.n	401bfa <udd_ctrl_in_sent+0x102>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401bf6:	bb24      	cbnz	r4, 401c42 <udd_ctrl_in_sent+0x14a>
  401bf8:	e02d      	b.n	401c56 <udd_ctrl_in_sent+0x15e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401bfa:	b128      	cbz	r0, 401c08 <udd_ctrl_in_sent+0x110>
		cpu_irq_enable();
  401bfc:	2201      	movs	r2, #1
  401bfe:	4b3d      	ldr	r3, [pc, #244]	; (401cf4 <udd_ctrl_in_sent+0x1fc>)
  401c00:	701a      	strb	r2, [r3, #0]
  401c02:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401c06:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401c08:	2204      	movs	r2, #4
  401c0a:	4b32      	ldr	r3, [pc, #200]	; (401cd4 <udd_ctrl_in_sent+0x1dc>)
  401c0c:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  401c0e:	4b32      	ldr	r3, [pc, #200]	; (401cd8 <udd_ctrl_in_sent+0x1e0>)
  401c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401c12:	9204      	str	r2, [sp, #16]
  401c14:	9a04      	ldr	r2, [sp, #16]
  401c16:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c1a:	9204      	str	r2, [sp, #16]
  401c1c:	9a04      	ldr	r2, [sp, #16]
  401c1e:	f022 0201 	bic.w	r2, r2, #1
  401c22:	9204      	str	r2, [sp, #16]
  401c24:	9a04      	ldr	r2, [sp, #16]
  401c26:	631a      	str	r2, [r3, #48]	; 0x30
  401c28:	2300      	movs	r3, #0
  401c2a:	9305      	str	r3, [sp, #20]
  401c2c:	9b05      	ldr	r3, [sp, #20]
  401c2e:	2b13      	cmp	r3, #19
  401c30:	d84d      	bhi.n	401cce <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401c32:	bf00      	nop
  401c34:	9b05      	ldr	r3, [sp, #20]
  401c36:	3301      	adds	r3, #1
  401c38:	9305      	str	r3, [sp, #20]
  401c3a:	9b05      	ldr	r3, [sp, #20]
  401c3c:	2b13      	cmp	r3, #19
  401c3e:	d9f8      	bls.n	401c32 <udd_ctrl_in_sent+0x13a>
  401c40:	e045      	b.n	401cce <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401c42:	4431      	add	r1, r6
  401c44:	460b      	mov	r3, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  401c46:	4d24      	ldr	r5, [pc, #144]	; (401cd8 <udd_ctrl_in_sent+0x1e0>)
  401c48:	f813 2b01 	ldrb.w	r2, [r3], #1
  401c4c:	652a      	str	r2, [r5, #80]	; 0x50
  401c4e:	1a5a      	subs	r2, r3, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401c50:	b2d2      	uxtb	r2, r2
  401c52:	42a2      	cmp	r2, r4
  401c54:	d3f8      	bcc.n	401c48 <udd_ctrl_in_sent+0x150>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  401c56:	4434      	add	r4, r6
  401c58:	4b22      	ldr	r3, [pc, #136]	; (401ce4 <udd_ctrl_in_sent+0x1ec>)
  401c5a:	801c      	strh	r4, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  401c5c:	4b1e      	ldr	r3, [pc, #120]	; (401cd8 <udd_ctrl_in_sent+0x1e0>)
  401c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401c60:	9206      	str	r2, [sp, #24]
  401c62:	9a06      	ldr	r2, [sp, #24]
  401c64:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c68:	9206      	str	r2, [sp, #24]
  401c6a:	9a06      	ldr	r2, [sp, #24]
  401c6c:	f042 0210 	orr.w	r2, r2, #16
  401c70:	9206      	str	r2, [sp, #24]
  401c72:	9a06      	ldr	r2, [sp, #24]
  401c74:	631a      	str	r2, [r3, #48]	; 0x30
  401c76:	2300      	movs	r3, #0
  401c78:	9307      	str	r3, [sp, #28]
  401c7a:	9b07      	ldr	r3, [sp, #28]
  401c7c:	2b13      	cmp	r3, #19
  401c7e:	d806      	bhi.n	401c8e <udd_ctrl_in_sent+0x196>
  401c80:	bf00      	nop
  401c82:	9b07      	ldr	r3, [sp, #28]
  401c84:	3301      	adds	r3, #1
  401c86:	9307      	str	r3, [sp, #28]
  401c88:	9b07      	ldr	r3, [sp, #28]
  401c8a:	2b13      	cmp	r3, #19
  401c8c:	d9f8      	bls.n	401c80 <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  401c8e:	4b12      	ldr	r3, [pc, #72]	; (401cd8 <udd_ctrl_in_sent+0x1e0>)
  401c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401c92:	9208      	str	r2, [sp, #32]
  401c94:	9a08      	ldr	r2, [sp, #32]
  401c96:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c9a:	9208      	str	r2, [sp, #32]
  401c9c:	9a08      	ldr	r2, [sp, #32]
  401c9e:	f022 0201 	bic.w	r2, r2, #1
  401ca2:	9208      	str	r2, [sp, #32]
  401ca4:	9a08      	ldr	r2, [sp, #32]
  401ca6:	631a      	str	r2, [r3, #48]	; 0x30
  401ca8:	2300      	movs	r3, #0
  401caa:	9309      	str	r3, [sp, #36]	; 0x24
  401cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401cae:	2b13      	cmp	r3, #19
  401cb0:	d806      	bhi.n	401cc0 <udd_ctrl_in_sent+0x1c8>
  401cb2:	bf00      	nop
  401cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401cb6:	3301      	adds	r3, #1
  401cb8:	9309      	str	r3, [sp, #36]	; 0x24
  401cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401cbc:	2b13      	cmp	r3, #19
  401cbe:	d9f8      	bls.n	401cb2 <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401cc0:	b128      	cbz	r0, 401cce <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  401cc2:	2201      	movs	r2, #1
  401cc4:	4b0b      	ldr	r3, [pc, #44]	; (401cf4 <udd_ctrl_in_sent+0x1fc>)
  401cc6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401cc8:	f3bf 8f5f 	dmb	sy
  401ccc:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  401cce:	b00a      	add	sp, #40	; 0x28
  401cd0:	bd70      	pop	{r4, r5, r6, pc}
  401cd2:	bf00      	nop
  401cd4:	20000bcd 	.word	0x20000bcd
  401cd8:	40034000 	.word	0x40034000
  401cdc:	00401ae9 	.word	0x00401ae9
  401ce0:	00401a41 	.word	0x00401a41
  401ce4:	20000bca 	.word	0x20000bca
  401ce8:	20000c3c 	.word	0x20000c3c
  401cec:	20000b8a 	.word	0x20000b8a
  401cf0:	20000bcc 	.word	0x20000bcc
  401cf4:	200000b0 	.word	0x200000b0

00401cf8 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401cf8:	b538      	push	{r3, r4, r5, lr}
  401cfa:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  401cfc:	7c44      	ldrb	r4, [r0, #17]
  401cfe:	f014 0f10 	tst.w	r4, #16
  401d02:	d015      	beq.n	401d30 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  401d04:	7c44      	ldrb	r4, [r0, #17]
  401d06:	f36f 1404 	bfc	r4, #4, #1
  401d0a:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401d0c:	6804      	ldr	r4, [r0, #0]
  401d0e:	b17c      	cbz	r4, 401d30 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401d10:	f102 050c 	add.w	r5, r2, #12
  401d14:	4807      	ldr	r0, [pc, #28]	; (401d34 <udd_ep_finish_job+0x3c>)
  401d16:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  401d1a:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401d1e:	bf18      	it	ne
  401d20:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401d24:	2901      	cmp	r1, #1
  401d26:	bf14      	ite	ne
  401d28:	2000      	movne	r0, #0
  401d2a:	2001      	moveq	r0, #1
  401d2c:	6899      	ldr	r1, [r3, #8]
  401d2e:	47a0      	blx	r4
  401d30:	bd38      	pop	{r3, r4, r5, pc}
  401d32:	bf00      	nop
  401d34:	40034000 	.word	0x40034000

00401d38 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401d38:	b084      	sub	sp, #16
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401d3a:	1e42      	subs	r2, r0, #1
  401d3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401d40:	4b2f      	ldr	r3, [pc, #188]	; (401e00 <udd_ep_ack_out_received+0xc8>)
  401d42:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401d46:	0083      	lsls	r3, r0, #2
  401d48:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401d4c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_all_banks_received(ep)) {
  401d50:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401d52:	f001 0142 	and.w	r1, r1, #66	; 0x42
  401d56:	2942      	cmp	r1, #66	; 0x42
  401d58:	d00e      	beq.n	401d78 <udd_ep_ack_out_received+0x40>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  401d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401d5c:	f011 0f02 	tst.w	r1, #2
  401d60:	d004      	beq.n	401d6c <udd_ep_ack_out_received+0x34>
		// Must be bank0
		ptr_job->bank = 0;
  401d62:	7c51      	ldrb	r1, [r2, #17]
  401d64:	f36f 0183 	bfc	r1, #2, #2
  401d68:	7451      	strb	r1, [r2, #17]
  401d6a:	e009      	b.n	401d80 <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  401d6c:	7c51      	ldrb	r1, [r2, #17]
  401d6e:	2001      	movs	r0, #1
  401d70:	f360 0183 	bfi	r1, r0, #2, #2
  401d74:	7451      	strb	r1, [r2, #17]
  401d76:	e024      	b.n	401dc2 <udd_ep_ack_out_received+0x8a>
	}
	if (ptr_job->bank == 0) {
  401d78:	7c51      	ldrb	r1, [r2, #17]
  401d7a:	f011 0f0c 	tst.w	r1, #12
  401d7e:	d120      	bne.n	401dc2 <udd_ep_ack_out_received+0x8a>
		udd_ack_bank0_received(ep);
  401d80:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401d82:	9100      	str	r1, [sp, #0]
  401d84:	9900      	ldr	r1, [sp, #0]
  401d86:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401d8a:	9100      	str	r1, [sp, #0]
  401d8c:	9900      	ldr	r1, [sp, #0]
  401d8e:	f021 0102 	bic.w	r1, r1, #2
  401d92:	9100      	str	r1, [sp, #0]
  401d94:	9900      	ldr	r1, [sp, #0]
  401d96:	6319      	str	r1, [r3, #48]	; 0x30
  401d98:	2300      	movs	r3, #0
  401d9a:	9301      	str	r3, [sp, #4]
  401d9c:	9b01      	ldr	r3, [sp, #4]
  401d9e:	2b13      	cmp	r3, #19
  401da0:	d806      	bhi.n	401db0 <udd_ep_ack_out_received+0x78>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401da2:	bf00      	nop
  401da4:	9b01      	ldr	r3, [sp, #4]
  401da6:	3301      	adds	r3, #1
  401da8:	9301      	str	r3, [sp, #4]
  401daa:	9b01      	ldr	r3, [sp, #4]
  401dac:	2b13      	cmp	r3, #19
  401dae:	d9f8      	bls.n	401da2 <udd_ep_ack_out_received+0x6a>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401db0:	b318      	cbz	r0, 401dfa <udd_ep_ack_out_received+0xc2>
  401db2:	2803      	cmp	r0, #3
  401db4:	d021      	beq.n	401dfa <udd_ep_ack_out_received+0xc2>
			ptr_job->bank = 1;
  401db6:	7c53      	ldrb	r3, [r2, #17]
  401db8:	2101      	movs	r1, #1
  401dba:	f361 0383 	bfi	r3, r1, #2, #2
  401dbe:	7453      	strb	r3, [r2, #17]
  401dc0:	e01b      	b.n	401dfa <udd_ep_ack_out_received+0xc2>
		}
	} else {
		udd_ack_bank1_received(ep);
  401dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401dc4:	9102      	str	r1, [sp, #8]
  401dc6:	9902      	ldr	r1, [sp, #8]
  401dc8:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401dcc:	9102      	str	r1, [sp, #8]
  401dce:	9902      	ldr	r1, [sp, #8]
  401dd0:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  401dd4:	9102      	str	r1, [sp, #8]
  401dd6:	9902      	ldr	r1, [sp, #8]
  401dd8:	6319      	str	r1, [r3, #48]	; 0x30
  401dda:	2300      	movs	r3, #0
  401ddc:	9303      	str	r3, [sp, #12]
  401dde:	9b03      	ldr	r3, [sp, #12]
  401de0:	2b13      	cmp	r3, #19
  401de2:	d806      	bhi.n	401df2 <udd_ep_ack_out_received+0xba>
  401de4:	bf00      	nop
  401de6:	9b03      	ldr	r3, [sp, #12]
  401de8:	3301      	adds	r3, #1
  401dea:	9303      	str	r3, [sp, #12]
  401dec:	9b03      	ldr	r3, [sp, #12]
  401dee:	2b13      	cmp	r3, #19
  401df0:	d9f8      	bls.n	401de4 <udd_ep_ack_out_received+0xac>
		ptr_job->bank = 0;
  401df2:	7c53      	ldrb	r3, [r2, #17]
  401df4:	f36f 0383 	bfc	r3, #2, #2
  401df8:	7453      	strb	r3, [r2, #17]
	}
}
  401dfa:	b004      	add	sp, #16
  401dfc:	4770      	bx	lr
  401dfe:	bf00      	nop
  401e00:	20000b8c 	.word	0x20000b8c

00401e04 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401e04:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  401e08:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401e0a:	4607      	mov	r7, r0
  401e0c:	1e46      	subs	r6, r0, #1
  401e0e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401e12:	4b52      	ldr	r3, [pc, #328]	; (401f5c <udd_ep_in_sent+0x158>)
  401e14:	eb03 0686 	add.w	r6, r3, r6, lsl #2

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401e18:	7c73      	ldrb	r3, [r6, #17]
  401e1a:	f3c3 0381 	ubfx	r3, r3, #2, #2
  401e1e:	b120      	cbz	r0, 401e2a <udd_ep_in_sent+0x26>
  401e20:	2803      	cmp	r0, #3
  401e22:	bf14      	ite	ne
  401e24:	2202      	movne	r2, #2
  401e26:	2201      	moveq	r2, #1
  401e28:	e000      	b.n	401e2c <udd_ep_in_sent+0x28>
  401e2a:	2201      	movs	r2, #1
  401e2c:	429a      	cmp	r2, r3
  401e2e:	f340 8089 	ble.w	401f44 <udd_ep_in_sent+0x140>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  401e32:	68f3      	ldr	r3, [r6, #12]
  401e34:	68b2      	ldr	r2, [r6, #8]
  401e36:	4293      	cmp	r3, r2
  401e38:	d304      	bcc.n	401e44 <udd_ep_in_sent+0x40>
  401e3a:	7c74      	ldrb	r4, [r6, #17]
  401e3c:	f014 0f40 	tst.w	r4, #64	; 0x40
  401e40:	f000 8082 	beq.w	401f48 <udd_ep_in_sent+0x144>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401e44:	6874      	ldr	r4, [r6, #4]
  401e46:	441c      	add	r4, r3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401e48:	ebc3 0902 	rsb	r9, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401e4c:	8a32      	ldrh	r2, [r6, #16]
  401e4e:	f3c2 0209 	ubfx	r2, r2, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  401e52:	4591      	cmp	r9, r2
static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
  401e54:	bf26      	itte	cs
  401e56:	4691      	movcs	r9, r2
	bool is_short_pkt = false;
  401e58:	f04f 0800 	movcs.w	r8, #0

	// Packet size
	if (nb_remain < pkt_size) {
		pkt_size = nb_remain;
		is_short_pkt = true;
  401e5c:	f04f 0801 	movcc.w	r8, #1
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  401e60:	444b      	add	r3, r9
  401e62:	60f3      	str	r3, [r6, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401e64:	f1b9 0f07 	cmp.w	r9, #7
  401e68:	d926      	bls.n	401eb8 <udd_ep_in_sent+0xb4>
  401e6a:	4623      	mov	r3, r4
  401e6c:	f1a9 0a08 	sub.w	sl, r9, #8
  401e70:	ea4f 0ada 	mov.w	sl, sl, lsr #3
  401e74:	f104 0c08 	add.w	ip, r4, #8
  401e78:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  401e7c:	0082      	lsls	r2, r0, #2
  401e7e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401e82:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e86:	781d      	ldrb	r5, [r3, #0]
  401e88:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e8a:	785d      	ldrb	r5, [r3, #1]
  401e8c:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e8e:	789d      	ldrb	r5, [r3, #2]
  401e90:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e92:	78dd      	ldrb	r5, [r3, #3]
  401e94:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e96:	791d      	ldrb	r5, [r3, #4]
  401e98:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e9a:	795d      	ldrb	r5, [r3, #5]
  401e9c:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e9e:	799d      	ldrb	r5, [r3, #6]
  401ea0:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401ea2:	79dd      	ldrb	r5, [r3, #7]
  401ea4:	6515      	str	r5, [r2, #80]	; 0x50
  401ea6:	3308      	adds	r3, #8

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401ea8:	4563      	cmp	r3, ip
  401eaa:	d1ec      	bne.n	401e86 <udd_ep_in_sent+0x82>
  401eac:	f10a 0a01 	add.w	sl, sl, #1
  401eb0:	eb04 04ca 	add.w	r4, r4, sl, lsl #3
  401eb4:	f009 0907 	and.w	r9, r9, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401eb8:	f1b9 0f00 	cmp.w	r9, #0
  401ebc:	d009      	beq.n	401ed2 <udd_ep_in_sent+0xce>
  401ebe:	44a1      	add	r9, r4
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401ec0:	4d27      	ldr	r5, [pc, #156]	; (401f60 <udd_ep_in_sent+0x15c>)
  401ec2:	f814 2b01 	ldrb.w	r2, [r4], #1
  401ec6:	f107 0314 	add.w	r3, r7, #20
  401eca:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401ece:	454c      	cmp	r4, r9
  401ed0:	d1f7      	bne.n	401ec2 <udd_ep_in_sent+0xbe>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  401ed2:	7c73      	ldrb	r3, [r6, #17]
  401ed4:	f3c3 0281 	ubfx	r2, r3, #2, #2
  401ed8:	3201      	adds	r2, #1
  401eda:	f362 0383 	bfi	r3, r2, #2, #2
  401ede:	7473      	strb	r3, [r6, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401ee0:	b1e1      	cbz	r1, 401f1c <udd_ep_in_sent+0x118>
  401ee2:	0080      	lsls	r0, r0, #2
  401ee4:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  401ee8:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  401eec:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401eee:	9300      	str	r3, [sp, #0]
  401ef0:	9b00      	ldr	r3, [sp, #0]
  401ef2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ef6:	9300      	str	r3, [sp, #0]
  401ef8:	9b00      	ldr	r3, [sp, #0]
  401efa:	f043 0310 	orr.w	r3, r3, #16
  401efe:	9300      	str	r3, [sp, #0]
  401f00:	9b00      	ldr	r3, [sp, #0]
  401f02:	6303      	str	r3, [r0, #48]	; 0x30
  401f04:	2300      	movs	r3, #0
  401f06:	9301      	str	r3, [sp, #4]
  401f08:	9b01      	ldr	r3, [sp, #4]
  401f0a:	2b13      	cmp	r3, #19
  401f0c:	d806      	bhi.n	401f1c <udd_ep_in_sent+0x118>
  401f0e:	bf00      	nop
  401f10:	9b01      	ldr	r3, [sp, #4]
  401f12:	3301      	adds	r3, #1
  401f14:	9301      	str	r3, [sp, #4]
  401f16:	9b01      	ldr	r3, [sp, #4]
  401f18:	2b13      	cmp	r3, #19
  401f1a:	d9f8      	bls.n	401f0e <udd_ep_in_sent+0x10a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  401f1c:	f1b8 0f00 	cmp.w	r8, #0
  401f20:	d003      	beq.n	401f2a <udd_ep_in_sent+0x126>
		ptr_job->b_shortpacket = false;
  401f22:	7c73      	ldrb	r3, [r6, #17]
  401f24:	f36f 1386 	bfc	r3, #6, #1
  401f28:	7473      	strb	r3, [r6, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401f2a:	68f2      	ldr	r2, [r6, #12]
  401f2c:	68b3      	ldr	r3, [r6, #8]
  401f2e:	429a      	cmp	r2, r3
  401f30:	d30c      	bcc.n	401f4c <udd_ep_in_sent+0x148>
			&& (!ptr_job->b_shortpacket)) {
  401f32:	7c73      	ldrb	r3, [r6, #17]
  401f34:	f013 0f40 	tst.w	r3, #64	; 0x40
  401f38:	d10a      	bne.n	401f50 <udd_ep_in_sent+0x14c>
		ptr_job->b_buf_end = true;
  401f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401f3e:	7473      	strb	r3, [r6, #17]
		return false;
  401f40:	2000      	movs	r0, #0
  401f42:	e006      	b.n	401f52 <udd_ep_in_sent+0x14e>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  401f44:	2001      	movs	r0, #1
  401f46:	e004      	b.n	401f52 <udd_ep_in_sent+0x14e>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  401f48:	2000      	movs	r0, #0
  401f4a:	e002      	b.n	401f52 <udd_ep_in_sent+0x14e>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  401f4c:	2001      	movs	r0, #1
  401f4e:	e000      	b.n	401f52 <udd_ep_in_sent+0x14e>
  401f50:	2001      	movs	r0, #1
}
  401f52:	b003      	add	sp, #12
  401f54:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  401f58:	4770      	bx	lr
  401f5a:	bf00      	nop
  401f5c:	20000b8c 	.word	0x20000b8c
  401f60:	40034000 	.word	0x40034000

00401f64 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f68:	b0b0      	sub	sp, #192	; 0xc0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401f6a:	4b94      	ldr	r3, [pc, #592]	; (4021bc <UDP_Handler+0x258>)
  401f6c:	4798      	blx	r3
  401f6e:	b960      	cbnz	r0, 401f8a <UDP_Handler+0x26>
  401f70:	4b93      	ldr	r3, [pc, #588]	; (4021c0 <UDP_Handler+0x25c>)
  401f72:	69db      	ldr	r3, [r3, #28]
  401f74:	f413 7f80 	tst.w	r3, #256	; 0x100
  401f78:	d107      	bne.n	401f8a <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401f7a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401f7c:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401f80:	2200      	movs	r2, #0
  401f82:	4b90      	ldr	r3, [pc, #576]	; (4021c4 <UDP_Handler+0x260>)
  401f84:	701a      	strb	r2, [r3, #0]
		return;
  401f86:	f000 bd15 	b.w	4029b4 <UDP_Handler+0xa50>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  401f8a:	2022      	movs	r0, #34	; 0x22
  401f8c:	4b8e      	ldr	r3, [pc, #568]	; (4021c8 <UDP_Handler+0x264>)
  401f8e:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401f90:	4b8b      	ldr	r3, [pc, #556]	; (4021c0 <UDP_Handler+0x25c>)
  401f92:	699b      	ldr	r3, [r3, #24]
  401f94:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401f98:	d00c      	beq.n	401fb4 <UDP_Handler+0x50>
  401f9a:	4b89      	ldr	r3, [pc, #548]	; (4021c0 <UDP_Handler+0x25c>)
  401f9c:	69db      	ldr	r3, [r3, #28]
  401f9e:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401fa2:	d007      	beq.n	401fb4 <UDP_Handler+0x50>
		udd_ack_sof();
  401fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401fa8:	4b85      	ldr	r3, [pc, #532]	; (4021c0 <UDP_Handler+0x25c>)
  401faa:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401fac:	4b87      	ldr	r3, [pc, #540]	; (4021cc <UDP_Handler+0x268>)
  401fae:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401fb0:	f000 bd00 	b.w	4029b4 <UDP_Handler+0xa50>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  401fb4:	4b82      	ldr	r3, [pc, #520]	; (4021c0 <UDP_Handler+0x25c>)
  401fb6:	69db      	ldr	r3, [r3, #28]
  401fb8:	f013 0f01 	tst.w	r3, #1
  401fbc:	f000 81f1 	beq.w	4023a2 <UDP_Handler+0x43e>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  401fc0:	4b7f      	ldr	r3, [pc, #508]	; (4021c0 <UDP_Handler+0x25c>)
  401fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fc4:	f013 0f04 	tst.w	r3, #4
  401fc8:	f000 80c0 	beq.w	40214c <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401fcc:	4b80      	ldr	r3, [pc, #512]	; (4021d0 <UDP_Handler+0x26c>)
  401fce:	781b      	ldrb	r3, [r3, #0]
  401fd0:	b11b      	cbz	r3, 401fda <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  401fd2:	4b80      	ldr	r3, [pc, #512]	; (4021d4 <UDP_Handler+0x270>)
  401fd4:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  401fd6:	4b80      	ldr	r3, [pc, #512]	; (4021d8 <UDP_Handler+0x274>)
  401fd8:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  401fda:	4b79      	ldr	r3, [pc, #484]	; (4021c0 <UDP_Handler+0x25c>)
  401fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401fde:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401fe2:	2b08      	cmp	r3, #8
  401fe4:	d01c      	beq.n	402020 <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  401fe6:	4b76      	ldr	r3, [pc, #472]	; (4021c0 <UDP_Handler+0x25c>)
  401fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fea:	9202      	str	r2, [sp, #8]
  401fec:	9a02      	ldr	r2, [sp, #8]
  401fee:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ff2:	9202      	str	r2, [sp, #8]
  401ff4:	9a02      	ldr	r2, [sp, #8]
  401ff6:	f022 0204 	bic.w	r2, r2, #4
  401ffa:	9202      	str	r2, [sp, #8]
  401ffc:	9a02      	ldr	r2, [sp, #8]
  401ffe:	631a      	str	r2, [r3, #48]	; 0x30
  402000:	2300      	movs	r3, #0
  402002:	9303      	str	r3, [sp, #12]
  402004:	9b03      	ldr	r3, [sp, #12]
  402006:	2b13      	cmp	r3, #19
  402008:	d806      	bhi.n	402018 <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40200a:	bf00      	nop
  40200c:	9b03      	ldr	r3, [sp, #12]
  40200e:	3301      	adds	r3, #1
  402010:	9303      	str	r3, [sp, #12]
  402012:	9b03      	ldr	r3, [sp, #12]
  402014:	2b13      	cmp	r3, #19
  402016:	d9f8      	bls.n	40200a <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  402018:	4b70      	ldr	r3, [pc, #448]	; (4021dc <UDP_Handler+0x278>)
  40201a:	4798      	blx	r3
  40201c:	f000 bcca 	b.w	4029b4 <UDP_Handler+0xa50>
  402020:	4b6f      	ldr	r3, [pc, #444]	; (4021e0 <UDP_Handler+0x27c>)
  402022:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  402026:	4966      	ldr	r1, [pc, #408]	; (4021c0 <UDP_Handler+0x25c>)
  402028:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  40202a:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  40202e:	4283      	cmp	r3, r0
  402030:	d1fa      	bne.n	402028 <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  402032:	4b6c      	ldr	r3, [pc, #432]	; (4021e4 <UDP_Handler+0x280>)
  402034:	4798      	blx	r3
  402036:	b9e0      	cbnz	r0, 402072 <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  402038:	4b61      	ldr	r3, [pc, #388]	; (4021c0 <UDP_Handler+0x25c>)
  40203a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40203c:	9204      	str	r2, [sp, #16]
  40203e:	9a04      	ldr	r2, [sp, #16]
  402040:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402044:	9204      	str	r2, [sp, #16]
  402046:	9a04      	ldr	r2, [sp, #16]
  402048:	f022 0204 	bic.w	r2, r2, #4
  40204c:	9204      	str	r2, [sp, #16]
  40204e:	9a04      	ldr	r2, [sp, #16]
  402050:	631a      	str	r2, [r3, #48]	; 0x30
  402052:	2300      	movs	r3, #0
  402054:	9305      	str	r3, [sp, #20]
  402056:	9b05      	ldr	r3, [sp, #20]
  402058:	2b13      	cmp	r3, #19
  40205a:	d806      	bhi.n	40206a <UDP_Handler+0x106>
  40205c:	bf00      	nop
  40205e:	9b05      	ldr	r3, [sp, #20]
  402060:	3301      	adds	r3, #1
  402062:	9305      	str	r3, [sp, #20]
  402064:	9b05      	ldr	r3, [sp, #20]
  402066:	2b13      	cmp	r3, #19
  402068:	d9f8      	bls.n	40205c <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  40206a:	4b5c      	ldr	r3, [pc, #368]	; (4021dc <UDP_Handler+0x278>)
  40206c:	4798      	blx	r3
  40206e:	f000 bca1 	b.w	4029b4 <UDP_Handler+0xa50>
		return;
	}

	if (Udd_setup_is_in()) {
  402072:	4b5d      	ldr	r3, [pc, #372]	; (4021e8 <UDP_Handler+0x284>)
  402074:	f993 3000 	ldrsb.w	r3, [r3]
  402078:	2b00      	cmp	r3, #0
  40207a:	da3d      	bge.n	4020f8 <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  40207c:	4b50      	ldr	r3, [pc, #320]	; (4021c0 <UDP_Handler+0x25c>)
  40207e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402080:	9206      	str	r2, [sp, #24]
  402082:	9a06      	ldr	r2, [sp, #24]
  402084:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402088:	9206      	str	r2, [sp, #24]
  40208a:	9a06      	ldr	r2, [sp, #24]
  40208c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  402090:	9206      	str	r2, [sp, #24]
  402092:	9a06      	ldr	r2, [sp, #24]
  402094:	631a      	str	r2, [r3, #48]	; 0x30
  402096:	2300      	movs	r3, #0
  402098:	9307      	str	r3, [sp, #28]
  40209a:	9b07      	ldr	r3, [sp, #28]
  40209c:	2b13      	cmp	r3, #19
  40209e:	d806      	bhi.n	4020ae <UDP_Handler+0x14a>
  4020a0:	bf00      	nop
  4020a2:	9b07      	ldr	r3, [sp, #28]
  4020a4:	3301      	adds	r3, #1
  4020a6:	9307      	str	r3, [sp, #28]
  4020a8:	9b07      	ldr	r3, [sp, #28]
  4020aa:	2b13      	cmp	r3, #19
  4020ac:	d9f8      	bls.n	4020a0 <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  4020ae:	4b44      	ldr	r3, [pc, #272]	; (4021c0 <UDP_Handler+0x25c>)
  4020b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020b2:	9208      	str	r2, [sp, #32]
  4020b4:	9a08      	ldr	r2, [sp, #32]
  4020b6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020ba:	9208      	str	r2, [sp, #32]
  4020bc:	9a08      	ldr	r2, [sp, #32]
  4020be:	f022 0204 	bic.w	r2, r2, #4
  4020c2:	9208      	str	r2, [sp, #32]
  4020c4:	9a08      	ldr	r2, [sp, #32]
  4020c6:	631a      	str	r2, [r3, #48]	; 0x30
  4020c8:	2300      	movs	r3, #0
  4020ca:	9309      	str	r3, [sp, #36]	; 0x24
  4020cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4020ce:	2b13      	cmp	r3, #19
  4020d0:	d806      	bhi.n	4020e0 <UDP_Handler+0x17c>
  4020d2:	bf00      	nop
  4020d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4020d6:	3301      	adds	r3, #1
  4020d8:	9309      	str	r3, [sp, #36]	; 0x24
  4020da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4020dc:	2b13      	cmp	r3, #19
  4020de:	d9f8      	bls.n	4020d2 <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4020e0:	2300      	movs	r3, #0
  4020e2:	4a42      	ldr	r2, [pc, #264]	; (4021ec <UDP_Handler+0x288>)
  4020e4:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4020e6:	4a42      	ldr	r2, [pc, #264]	; (4021f0 <UDP_Handler+0x28c>)
  4020e8:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4020ea:	2202      	movs	r2, #2
  4020ec:	4b38      	ldr	r3, [pc, #224]	; (4021d0 <UDP_Handler+0x26c>)
  4020ee:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  4020f0:	4b40      	ldr	r3, [pc, #256]	; (4021f4 <UDP_Handler+0x290>)
  4020f2:	4798      	blx	r3
  4020f4:	f000 bc5e 	b.w	4029b4 <UDP_Handler+0xa50>
	} else {
		udd_ack_setup_received(0);
  4020f8:	4b31      	ldr	r3, [pc, #196]	; (4021c0 <UDP_Handler+0x25c>)
  4020fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020fc:	920a      	str	r2, [sp, #40]	; 0x28
  4020fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402100:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402104:	920a      	str	r2, [sp, #40]	; 0x28
  402106:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402108:	f022 0204 	bic.w	r2, r2, #4
  40210c:	920a      	str	r2, [sp, #40]	; 0x28
  40210e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402110:	631a      	str	r2, [r3, #48]	; 0x30
  402112:	2300      	movs	r3, #0
  402114:	930b      	str	r3, [sp, #44]	; 0x2c
  402116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402118:	2b13      	cmp	r3, #19
  40211a:	d806      	bhi.n	40212a <UDP_Handler+0x1c6>
  40211c:	bf00      	nop
  40211e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402120:	3301      	adds	r3, #1
  402122:	930b      	str	r3, [sp, #44]	; 0x2c
  402124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402126:	2b13      	cmp	r3, #19
  402128:	d9f8      	bls.n	40211c <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  40212a:	4b2f      	ldr	r3, [pc, #188]	; (4021e8 <UDP_Handler+0x284>)
  40212c:	88db      	ldrh	r3, [r3, #6]
  40212e:	b91b      	cbnz	r3, 402138 <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  402130:	4b31      	ldr	r3, [pc, #196]	; (4021f8 <UDP_Handler+0x294>)
  402132:	4798      	blx	r3
  402134:	f000 bc3e 	b.w	4029b4 <UDP_Handler+0xa50>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402138:	2300      	movs	r3, #0
  40213a:	4a2c      	ldr	r2, [pc, #176]	; (4021ec <UDP_Handler+0x288>)
  40213c:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  40213e:	4a2c      	ldr	r2, [pc, #176]	; (4021f0 <UDP_Handler+0x28c>)
  402140:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  402142:	2201      	movs	r2, #1
  402144:	4b22      	ldr	r3, [pc, #136]	; (4021d0 <UDP_Handler+0x26c>)
  402146:	701a      	strb	r2, [r3, #0]
  402148:	f000 bc34 	b.w	4029b4 <UDP_Handler+0xa50>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  40214c:	4b1c      	ldr	r3, [pc, #112]	; (4021c0 <UDP_Handler+0x25c>)
  40214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402150:	f013 0f01 	tst.w	r3, #1
  402154:	d003      	beq.n	40215e <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  402156:	4b27      	ldr	r3, [pc, #156]	; (4021f4 <UDP_Handler+0x290>)
  402158:	4798      	blx	r3
  40215a:	f000 bc2b 	b.w	4029b4 <UDP_Handler+0xa50>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  40215e:	4b18      	ldr	r3, [pc, #96]	; (4021c0 <UDP_Handler+0x25c>)
  402160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402162:	f013 0f02 	tst.w	r3, #2
  402166:	f000 8117 	beq.w	402398 <UDP_Handler+0x434>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40216a:	4b19      	ldr	r3, [pc, #100]	; (4021d0 <UDP_Handler+0x26c>)
  40216c:	781b      	ldrb	r3, [r3, #0]
  40216e:	2b01      	cmp	r3, #1
  402170:	d044      	beq.n	4021fc <UDP_Handler+0x298>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  402172:	2b02      	cmp	r3, #2
  402174:	d001      	beq.n	40217a <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  402176:	2b04      	cmp	r3, #4
  402178:	d102      	bne.n	402180 <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  40217a:	4b16      	ldr	r3, [pc, #88]	; (4021d4 <UDP_Handler+0x270>)
  40217c:	4798      	blx	r3
  40217e:	e001      	b.n	402184 <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  402180:	4b16      	ldr	r3, [pc, #88]	; (4021dc <UDP_Handler+0x278>)
  402182:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  402184:	4b0e      	ldr	r3, [pc, #56]	; (4021c0 <UDP_Handler+0x25c>)
  402186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402188:	920c      	str	r2, [sp, #48]	; 0x30
  40218a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40218c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402190:	920c      	str	r2, [sp, #48]	; 0x30
  402192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  402194:	f022 0202 	bic.w	r2, r2, #2
  402198:	920c      	str	r2, [sp, #48]	; 0x30
  40219a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40219c:	631a      	str	r2, [r3, #48]	; 0x30
  40219e:	2300      	movs	r3, #0
  4021a0:	930d      	str	r3, [sp, #52]	; 0x34
  4021a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4021a4:	2b13      	cmp	r3, #19
  4021a6:	d806      	bhi.n	4021b6 <UDP_Handler+0x252>
  4021a8:	bf00      	nop
  4021aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4021ac:	3301      	adds	r3, #1
  4021ae:	930d      	str	r3, [sp, #52]	; 0x34
  4021b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4021b2:	2b13      	cmp	r3, #19
  4021b4:	d9f8      	bls.n	4021a8 <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4021b6:	4b08      	ldr	r3, [pc, #32]	; (4021d8 <UDP_Handler+0x274>)
  4021b8:	4798      	blx	r3
  4021ba:	e3fb      	b.n	4029b4 <UDP_Handler+0xa50>
  4021bc:	004019b5 	.word	0x004019b5
  4021c0:	40034000 	.word	0x40034000
  4021c4:	200000b0 	.word	0x200000b0
  4021c8:	004018d1 	.word	0x004018d1
  4021cc:	0040116d 	.word	0x0040116d
  4021d0:	20000bcd 	.word	0x20000bcd
  4021d4:	00401ae9 	.word	0x00401ae9
  4021d8:	00401a41 	.word	0x00401a41
  4021dc:	00401a59 	.word	0x00401a59
  4021e0:	20000c3b 	.word	0x20000c3b
  4021e4:	004011a9 	.word	0x004011a9
  4021e8:	20000c3c 	.word	0x20000c3c
  4021ec:	20000b8a 	.word	0x20000b8a
  4021f0:	20000bca 	.word	0x20000bca
  4021f4:	00401af9 	.word	0x00401af9
  4021f8:	00401aa1 	.word	0x00401aa1
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  4021fc:	4b90      	ldr	r3, [pc, #576]	; (402440 <UDP_Handler+0x4dc>)
  4021fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402200:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  402204:	4b8f      	ldr	r3, [pc, #572]	; (402444 <UDP_Handler+0x4e0>)
  402206:	899b      	ldrh	r3, [r3, #12]
  402208:	4a8f      	ldr	r2, [pc, #572]	; (402448 <UDP_Handler+0x4e4>)
  40220a:	8815      	ldrh	r5, [r2, #0]
  40220c:	186a      	adds	r2, r5, r1
  40220e:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  402210:	bfae      	itee	ge
  402212:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  402214:	ebc5 0303 	rsblt	r3, r5, r3
  402218:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40221a:	4b8a      	ldr	r3, [pc, #552]	; (402444 <UDP_Handler+0x4e0>)
  40221c:	6898      	ldr	r0, [r3, #8]
  40221e:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  402220:	b1a9      	cbz	r1, 40224e <UDP_Handler+0x2ea>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402222:	4603      	mov	r3, r0
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  402224:	4c86      	ldr	r4, [pc, #536]	; (402440 <UDP_Handler+0x4dc>)
  402226:	6d22      	ldr	r2, [r4, #80]	; 0x50
  402228:	f803 2b01 	strb.w	r2, [r3], #1
  40222c:	1a1a      	subs	r2, r3, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  40222e:	b2d2      	uxtb	r2, r2
  402230:	428a      	cmp	r2, r1
  402232:	d3f8      	bcc.n	402226 <UDP_Handler+0x2c2>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  402234:	440d      	add	r5, r1
  402236:	b2ad      	uxth	r5, r5
  402238:	4b83      	ldr	r3, [pc, #524]	; (402448 <UDP_Handler+0x4e4>)
  40223a:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  40223c:	2940      	cmp	r1, #64	; 0x40
  40223e:	d106      	bne.n	40224e <UDP_Handler+0x2ea>
			|| (udd_g_ctrlreq.req.wLength <=
  402240:	4b80      	ldr	r3, [pc, #512]	; (402444 <UDP_Handler+0x4e0>)
  402242:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  402244:	4b81      	ldr	r3, [pc, #516]	; (40244c <UDP_Handler+0x4e8>)
  402246:	881b      	ldrh	r3, [r3, #0]
  402248:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  40224a:	429a      	cmp	r2, r3
  40224c:	dc3e      	bgt.n	4022cc <UDP_Handler+0x368>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  40224e:	4b7d      	ldr	r3, [pc, #500]	; (402444 <UDP_Handler+0x4e0>)
  402250:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  402252:	695b      	ldr	r3, [r3, #20]
  402254:	b1f3      	cbz	r3, 402294 <UDP_Handler+0x330>
			if (!udd_g_ctrlreq.over_under_run()) {
  402256:	4798      	blx	r3
  402258:	b9e0      	cbnz	r0, 402294 <UDP_Handler+0x330>
				// Stall ZLP
				udd_ctrl_stall_data();
  40225a:	4b7d      	ldr	r3, [pc, #500]	; (402450 <UDP_Handler+0x4ec>)
  40225c:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  40225e:	4b78      	ldr	r3, [pc, #480]	; (402440 <UDP_Handler+0x4dc>)
  402260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402262:	920e      	str	r2, [sp, #56]	; 0x38
  402264:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402266:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40226a:	920e      	str	r2, [sp, #56]	; 0x38
  40226c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40226e:	f022 0202 	bic.w	r2, r2, #2
  402272:	920e      	str	r2, [sp, #56]	; 0x38
  402274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402276:	631a      	str	r2, [r3, #48]	; 0x30
  402278:	2300      	movs	r3, #0
  40227a:	930f      	str	r3, [sp, #60]	; 0x3c
  40227c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40227e:	2b13      	cmp	r3, #19
  402280:	f200 8398 	bhi.w	4029b4 <UDP_Handler+0xa50>
  402284:	bf00      	nop
  402286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402288:	3301      	adds	r3, #1
  40228a:	930f      	str	r3, [sp, #60]	; 0x3c
  40228c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40228e:	2b13      	cmp	r3, #19
  402290:	d9f8      	bls.n	402284 <UDP_Handler+0x320>
  402292:	e38f      	b.n	4029b4 <UDP_Handler+0xa50>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  402294:	4b6a      	ldr	r3, [pc, #424]	; (402440 <UDP_Handler+0x4dc>)
  402296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402298:	9210      	str	r2, [sp, #64]	; 0x40
  40229a:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40229c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022a0:	9210      	str	r2, [sp, #64]	; 0x40
  4022a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4022a4:	f022 0202 	bic.w	r2, r2, #2
  4022a8:	9210      	str	r2, [sp, #64]	; 0x40
  4022aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4022ac:	631a      	str	r2, [r3, #48]	; 0x30
  4022ae:	2300      	movs	r3, #0
  4022b0:	9311      	str	r3, [sp, #68]	; 0x44
  4022b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4022b4:	2b13      	cmp	r3, #19
  4022b6:	d806      	bhi.n	4022c6 <UDP_Handler+0x362>
  4022b8:	bf00      	nop
  4022ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4022bc:	3301      	adds	r3, #1
  4022be:	9311      	str	r3, [sp, #68]	; 0x44
  4022c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4022c2:	2b13      	cmp	r3, #19
  4022c4:	d9f8      	bls.n	4022b8 <UDP_Handler+0x354>
		udd_ctrl_send_zlp_in();
  4022c6:	4b63      	ldr	r3, [pc, #396]	; (402454 <UDP_Handler+0x4f0>)
  4022c8:	4798      	blx	r3
  4022ca:	e373      	b.n	4029b4 <UDP_Handler+0xa50>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  4022cc:	4b5d      	ldr	r3, [pc, #372]	; (402444 <UDP_Handler+0x4e0>)
  4022ce:	899b      	ldrh	r3, [r3, #12]
  4022d0:	42ab      	cmp	r3, r5
  4022d2:	d146      	bne.n	402362 <UDP_Handler+0x3fe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  4022d4:	4b5b      	ldr	r3, [pc, #364]	; (402444 <UDP_Handler+0x4e0>)
  4022d6:	695b      	ldr	r3, [r3, #20]
  4022d8:	b9e3      	cbnz	r3, 402314 <UDP_Handler+0x3b0>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  4022da:	4b5d      	ldr	r3, [pc, #372]	; (402450 <UDP_Handler+0x4ec>)
  4022dc:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4022de:	4b58      	ldr	r3, [pc, #352]	; (402440 <UDP_Handler+0x4dc>)
  4022e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022e2:	9212      	str	r2, [sp, #72]	; 0x48
  4022e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4022e6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022ea:	9212      	str	r2, [sp, #72]	; 0x48
  4022ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4022ee:	f022 0202 	bic.w	r2, r2, #2
  4022f2:	9212      	str	r2, [sp, #72]	; 0x48
  4022f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4022f6:	631a      	str	r2, [r3, #48]	; 0x30
  4022f8:	2300      	movs	r3, #0
  4022fa:	9313      	str	r3, [sp, #76]	; 0x4c
  4022fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4022fe:	2b13      	cmp	r3, #19
  402300:	f200 8358 	bhi.w	4029b4 <UDP_Handler+0xa50>
  402304:	bf00      	nop
  402306:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402308:	3301      	adds	r3, #1
  40230a:	9313      	str	r3, [sp, #76]	; 0x4c
  40230c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40230e:	2b13      	cmp	r3, #19
  402310:	d9f8      	bls.n	402304 <UDP_Handler+0x3a0>
  402312:	e34f      	b.n	4029b4 <UDP_Handler+0xa50>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  402314:	4798      	blx	r3
  402316:	b9e0      	cbnz	r0, 402352 <UDP_Handler+0x3ee>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  402318:	4b4d      	ldr	r3, [pc, #308]	; (402450 <UDP_Handler+0x4ec>)
  40231a:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  40231c:	4b48      	ldr	r3, [pc, #288]	; (402440 <UDP_Handler+0x4dc>)
  40231e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402320:	9214      	str	r2, [sp, #80]	; 0x50
  402322:	9a14      	ldr	r2, [sp, #80]	; 0x50
  402324:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402328:	9214      	str	r2, [sp, #80]	; 0x50
  40232a:	9a14      	ldr	r2, [sp, #80]	; 0x50
  40232c:	f022 0202 	bic.w	r2, r2, #2
  402330:	9214      	str	r2, [sp, #80]	; 0x50
  402332:	9a14      	ldr	r2, [sp, #80]	; 0x50
  402334:	631a      	str	r2, [r3, #48]	; 0x30
  402336:	2300      	movs	r3, #0
  402338:	9315      	str	r3, [sp, #84]	; 0x54
  40233a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40233c:	2b13      	cmp	r3, #19
  40233e:	f200 8339 	bhi.w	4029b4 <UDP_Handler+0xa50>
  402342:	bf00      	nop
  402344:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402346:	3301      	adds	r3, #1
  402348:	9315      	str	r3, [sp, #84]	; 0x54
  40234a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40234c:	2b13      	cmp	r3, #19
  40234e:	d9f8      	bls.n	402342 <UDP_Handler+0x3de>
  402350:	e330      	b.n	4029b4 <UDP_Handler+0xa50>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402352:	4a3e      	ldr	r2, [pc, #248]	; (40244c <UDP_Handler+0x4e8>)
  402354:	4b3c      	ldr	r3, [pc, #240]	; (402448 <UDP_Handler+0x4e4>)
  402356:	8818      	ldrh	r0, [r3, #0]
  402358:	8811      	ldrh	r1, [r2, #0]
  40235a:	4401      	add	r1, r0
  40235c:	8011      	strh	r1, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  40235e:	2200      	movs	r2, #0
  402360:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  402362:	4b37      	ldr	r3, [pc, #220]	; (402440 <UDP_Handler+0x4dc>)
  402364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402366:	9216      	str	r2, [sp, #88]	; 0x58
  402368:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40236a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40236e:	9216      	str	r2, [sp, #88]	; 0x58
  402370:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402372:	f022 0202 	bic.w	r2, r2, #2
  402376:	9216      	str	r2, [sp, #88]	; 0x58
  402378:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40237a:	631a      	str	r2, [r3, #48]	; 0x30
  40237c:	2300      	movs	r3, #0
  40237e:	9317      	str	r3, [sp, #92]	; 0x5c
  402380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402382:	2b13      	cmp	r3, #19
  402384:	f200 8316 	bhi.w	4029b4 <UDP_Handler+0xa50>
  402388:	bf00      	nop
  40238a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40238c:	3301      	adds	r3, #1
  40238e:	9317      	str	r3, [sp, #92]	; 0x5c
  402390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402392:	2b13      	cmp	r3, #19
  402394:	d9f8      	bls.n	402388 <UDP_Handler+0x424>
  402396:	e30d      	b.n	4029b4 <UDP_Handler+0xa50>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  402398:	4b29      	ldr	r3, [pc, #164]	; (402440 <UDP_Handler+0x4dc>)
  40239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40239c:	f013 0f08 	tst.w	r3, #8
  4023a0:	d106      	bne.n	4023b0 <UDP_Handler+0x44c>
  4023a2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 402458 <UDP_Handler+0x4f4>
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  4023a6:	4664      	mov	r4, ip
  4023a8:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4023aa:	4a25      	ldr	r2, [pc, #148]	; (402440 <UDP_Handler+0x4dc>)
  4023ac:	461e      	mov	r6, r3
  4023ae:	e01a      	b.n	4023e6 <UDP_Handler+0x482>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  4023b0:	4b23      	ldr	r3, [pc, #140]	; (402440 <UDP_Handler+0x4dc>)
  4023b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023b4:	9200      	str	r2, [sp, #0]
  4023b6:	9a00      	ldr	r2, [sp, #0]
  4023b8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4023bc:	9200      	str	r2, [sp, #0]
  4023be:	9a00      	ldr	r2, [sp, #0]
  4023c0:	f022 0208 	bic.w	r2, r2, #8
  4023c4:	9200      	str	r2, [sp, #0]
  4023c6:	9a00      	ldr	r2, [sp, #0]
  4023c8:	631a      	str	r2, [r3, #48]	; 0x30
  4023ca:	2300      	movs	r3, #0
  4023cc:	9301      	str	r3, [sp, #4]
  4023ce:	9b01      	ldr	r3, [sp, #4]
  4023d0:	2b13      	cmp	r3, #19
  4023d2:	f200 82ef 	bhi.w	4029b4 <UDP_Handler+0xa50>
  4023d6:	bf00      	nop
  4023d8:	9b01      	ldr	r3, [sp, #4]
  4023da:	3301      	adds	r3, #1
  4023dc:	9301      	str	r3, [sp, #4]
  4023de:	9b01      	ldr	r3, [sp, #4]
  4023e0:	2b13      	cmp	r3, #19
  4023e2:	d9f8      	bls.n	4023d6 <UDP_Handler+0x472>
  4023e4:	e2e6      	b.n	4029b4 <UDP_Handler+0xa50>
  4023e6:	fa5f f883 	uxtb.w	r8, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4023ea:	6991      	ldr	r1, [r2, #24]
  4023ec:	461f      	mov	r7, r3
  4023ee:	fa06 f503 	lsl.w	r5, r6, r3
  4023f2:	420d      	tst	r5, r1
  4023f4:	f000 81f1 	beq.w	4027da <UDP_Handler+0x876>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  4023f8:	46a1      	mov	r9, r4
  4023fa:	0099      	lsls	r1, r3, #2
  4023fc:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  402400:	f501 3140 	add.w	r1, r1, #196608	; 0x30000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  402404:	6b08      	ldr	r0, [r1, #48]	; 0x30
  402406:	f010 0f42 	tst.w	r0, #66	; 0x42
  40240a:	d044      	beq.n	402496 <UDP_Handler+0x532>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40240c:	68a2      	ldr	r2, [r4, #8]
  40240e:	68e3      	ldr	r3, [r4, #12]
	uint32_t pkt_size = ptr_job->size;
  402410:	f8b4 a010 	ldrh.w	sl, [r4, #16]
  402414:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  402418:	6860      	ldr	r0, [r4, #4]
  40241a:	4418      	add	r0, r3
  40241c:	460c      	mov	r4, r1
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  40241e:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  402420:	f3c6 460a 	ubfx	r6, r6, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  402424:	2e00      	cmp	r6, #0
  402426:	f000 82b6 	beq.w	402996 <UDP_Handler+0xa32>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40242a:	1ad1      	subs	r1, r2, r3
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  40242c:	42b1      	cmp	r1, r6
  40242e:	f200 82a9 	bhi.w	402984 <UDP_Handler+0xa20>
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  402432:	f8c9 200c 	str.w	r2, [r9, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  402436:	2900      	cmp	r1, #0
  402438:	f040 82aa 	bne.w	402990 <UDP_Handler+0xa2c>
  40243c:	e2b6      	b.n	4029ac <UDP_Handler+0xa48>
  40243e:	bf00      	nop
  402440:	40034000 	.word	0x40034000
  402444:	20000c3c 	.word	0x20000c3c
  402448:	20000bca 	.word	0x20000bca
  40244c:	20000b8a 	.word	0x20000b8a
  402450:	00401a59 	.word	0x00401a59
  402454:	00401aa1 	.word	0x00401aa1
  402458:	20000b8c 	.word	0x20000b8c
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  40245c:	6d22      	ldr	r2, [r4, #80]	; 0x50
  40245e:	54c2      	strb	r2, [r0, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  402460:	3301      	adds	r3, #1
  402462:	428b      	cmp	r3, r1
  402464:	d3fa      	bcc.n	40245c <UDP_Handler+0x4f8>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402466:	4640      	mov	r0, r8
  402468:	4b95      	ldr	r3, [pc, #596]	; (4026c0 <UDP_Handler+0x75c>)
  40246a:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  40246c:	b917      	cbnz	r7, 402474 <UDP_Handler+0x510>
  40246e:	45b2      	cmp	sl, r6
  402470:	f240 82a0 	bls.w	4029b4 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
  402474:	6b23      	ldr	r3, [r4, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  402476:	f013 0f20 	tst.w	r3, #32
  40247a:	f040 829b 	bne.w	4029b4 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  40247e:	4b91      	ldr	r3, [pc, #580]	; (4026c4 <UDP_Handler+0x760>)
  402480:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402482:	f8d9 300c 	ldr.w	r3, [r9, #12]
  402486:	f8c9 3008 	str.w	r3, [r9, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40248a:	4648      	mov	r0, r9
  40248c:	2100      	movs	r1, #0
  40248e:	4642      	mov	r2, r8
  402490:	4b8d      	ldr	r3, [pc, #564]	; (4026c8 <UDP_Handler+0x764>)
  402492:	4798      	blx	r3
  402494:	e28e      	b.n	4029b4 <UDP_Handler+0xa50>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  402496:	6b08      	ldr	r0, [r1, #48]	; 0x30
  402498:	f010 0f01 	tst.w	r0, #1
  40249c:	f000 8173 	beq.w	402786 <UDP_Handler+0x822>

			ptr_job->bank--;
  4024a0:	7c63      	ldrb	r3, [r4, #17]
  4024a2:	f3c3 0281 	ubfx	r2, r3, #2, #2
  4024a6:	3203      	adds	r2, #3
  4024a8:	f002 0203 	and.w	r2, r2, #3
  4024ac:	f362 0383 	bfi	r3, r2, #2, #2
  4024b0:	7463      	strb	r3, [r4, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4024b2:	f013 0f20 	tst.w	r3, #32
  4024b6:	d074      	beq.n	4025a2 <UDP_Handler+0x63e>
				if (ptr_job->bank) {
  4024b8:	2a00      	cmp	r2, #0
  4024ba:	d036      	beq.n	40252a <UDP_Handler+0x5c6>
  4024bc:	00ba      	lsls	r2, r7, #2
  4024be:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4024c2:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
					// Send remaining
					udd_set_transmit_ready(ep);
  4024c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024c8:	9318      	str	r3, [sp, #96]	; 0x60
  4024ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4024cc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024d0:	9318      	str	r3, [sp, #96]	; 0x60
  4024d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4024d4:	f043 0310 	orr.w	r3, r3, #16
  4024d8:	9318      	str	r3, [sp, #96]	; 0x60
  4024da:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4024dc:	6313      	str	r3, [r2, #48]	; 0x30
  4024de:	2300      	movs	r3, #0
  4024e0:	9319      	str	r3, [sp, #100]	; 0x64
  4024e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4024e4:	2b13      	cmp	r3, #19
  4024e6:	d806      	bhi.n	4024f6 <UDP_Handler+0x592>
  4024e8:	bf00      	nop
  4024ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4024ec:	3301      	adds	r3, #1
  4024ee:	9319      	str	r3, [sp, #100]	; 0x64
  4024f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4024f2:	2b13      	cmp	r3, #19
  4024f4:	d9f8      	bls.n	4024e8 <UDP_Handler+0x584>
					udd_ack_in_sent(ep);
  4024f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024f8:	931a      	str	r3, [sp, #104]	; 0x68
  4024fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4024fc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402500:	931a      	str	r3, [sp, #104]	; 0x68
  402502:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402504:	f023 0301 	bic.w	r3, r3, #1
  402508:	931a      	str	r3, [sp, #104]	; 0x68
  40250a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40250c:	6313      	str	r3, [r2, #48]	; 0x30
  40250e:	2300      	movs	r3, #0
  402510:	931b      	str	r3, [sp, #108]	; 0x6c
  402512:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402514:	2b13      	cmp	r3, #19
  402516:	f200 824d 	bhi.w	4029b4 <UDP_Handler+0xa50>
  40251a:	bf00      	nop
  40251c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40251e:	3301      	adds	r3, #1
  402520:	931b      	str	r3, [sp, #108]	; 0x6c
  402522:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402524:	2b13      	cmp	r3, #19
  402526:	d9f8      	bls.n	40251a <UDP_Handler+0x5b6>
  402528:	e244      	b.n	4029b4 <UDP_Handler+0xa50>
  40252a:	00ba      	lsls	r2, r7, #2
  40252c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402530:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  402534:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402536:	931c      	str	r3, [sp, #112]	; 0x70
  402538:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40253a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40253e:	931c      	str	r3, [sp, #112]	; 0x70
  402540:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  402542:	f023 0301 	bic.w	r3, r3, #1
  402546:	931c      	str	r3, [sp, #112]	; 0x70
  402548:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40254a:	6313      	str	r3, [r2, #48]	; 0x30
  40254c:	2300      	movs	r3, #0
  40254e:	931d      	str	r3, [sp, #116]	; 0x74
  402550:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402552:	2b13      	cmp	r3, #19
  402554:	d806      	bhi.n	402564 <UDP_Handler+0x600>
  402556:	bf00      	nop
  402558:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40255a:	3301      	adds	r3, #1
  40255c:	931d      	str	r3, [sp, #116]	; 0x74
  40255e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402560:	2b13      	cmp	r3, #19
  402562:	d9f8      	bls.n	402556 <UDP_Handler+0x5f2>
					// Enable stall
					udd_enable_stall_handshake(ep);
  402564:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402566:	931e      	str	r3, [sp, #120]	; 0x78
  402568:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40256a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40256e:	931e      	str	r3, [sp, #120]	; 0x78
  402570:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402572:	f043 0320 	orr.w	r3, r3, #32
  402576:	931e      	str	r3, [sp, #120]	; 0x78
  402578:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40257a:	6313      	str	r3, [r2, #48]	; 0x30
  40257c:	2300      	movs	r3, #0
  40257e:	931f      	str	r3, [sp, #124]	; 0x7c
  402580:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402582:	2b13      	cmp	r3, #19
  402584:	d806      	bhi.n	402594 <UDP_Handler+0x630>
  402586:	bf00      	nop
  402588:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40258a:	3301      	adds	r3, #1
  40258c:	931f      	str	r3, [sp, #124]	; 0x7c
  40258e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402590:	2b13      	cmp	r3, #19
  402592:	d9f8      	bls.n	402586 <UDP_Handler+0x622>
					// Halt executed
					ptr_job->b_stall_requested = false;
  402594:	f899 3011 	ldrb.w	r3, [r9, #17]
  402598:	f36f 1345 	bfc	r3, #5, #1
  40259c:	f889 3011 	strb.w	r3, [r9, #17]
  4025a0:	e208      	b.n	4029b4 <UDP_Handler+0xa50>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  4025a2:	7c63      	ldrb	r3, [r4, #17]
  4025a4:	09db      	lsrs	r3, r3, #7
  4025a6:	d00a      	beq.n	4025be <UDP_Handler+0x65a>
				ptr_job->b_buf_end = false;
  4025a8:	7c63      	ldrb	r3, [r4, #17]
  4025aa:	f36f 13c7 	bfc	r3, #7, #1
  4025ae:	7463      	strb	r3, [r4, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4025b0:	68e3      	ldr	r3, [r4, #12]
  4025b2:	60a3      	str	r3, [r4, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4025b4:	4620      	mov	r0, r4
  4025b6:	2100      	movs	r1, #0
  4025b8:	4642      	mov	r2, r8
  4025ba:	4b43      	ldr	r3, [pc, #268]	; (4026c8 <UDP_Handler+0x764>)
  4025bc:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  4025be:	f8d9 200c 	ldr.w	r2, [r9, #12]
  4025c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4025c6:	429a      	cmp	r2, r3
  4025c8:	d334      	bcc.n	402634 <UDP_Handler+0x6d0>
					!ptr_job->b_shortpacket &&
  4025ca:	f899 3011 	ldrb.w	r3, [r9, #17]
  4025ce:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  4025d2:	d12f      	bne.n	402634 <UDP_Handler+0x6d0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4025d4:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4025d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4025da:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4025de:	2100      	movs	r1, #0
  4025e0:	4a3a      	ldr	r2, [pc, #232]	; (4026cc <UDP_Handler+0x768>)
  4025e2:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  4025e4:	4a37      	ldr	r2, [pc, #220]	; (4026c4 <UDP_Handler+0x760>)
  4025e6:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4025e8:	b92b      	cbnz	r3, 4025f6 <UDP_Handler+0x692>
		cpu_irq_enable();
  4025ea:	2201      	movs	r2, #1
  4025ec:	4b37      	ldr	r3, [pc, #220]	; (4026cc <UDP_Handler+0x768>)
  4025ee:	701a      	strb	r2, [r3, #0]
  4025f0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4025f4:	b662      	cpsie	i
  4025f6:	00bb      	lsls	r3, r7, #2
  4025f8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4025fc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  402600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402602:	9220      	str	r2, [sp, #128]	; 0x80
  402604:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402606:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40260a:	9220      	str	r2, [sp, #128]	; 0x80
  40260c:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40260e:	f022 0201 	bic.w	r2, r2, #1
  402612:	9220      	str	r2, [sp, #128]	; 0x80
  402614:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402616:	631a      	str	r2, [r3, #48]	; 0x30
  402618:	2300      	movs	r3, #0
  40261a:	9321      	str	r3, [sp, #132]	; 0x84
  40261c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40261e:	2b13      	cmp	r3, #19
  402620:	f200 81c8 	bhi.w	4029b4 <UDP_Handler+0xa50>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402624:	bf00      	nop
  402626:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402628:	3301      	adds	r3, #1
  40262a:	9321      	str	r3, [sp, #132]	; 0x84
  40262c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40262e:	2b13      	cmp	r3, #19
  402630:	d9f8      	bls.n	402624 <UDP_Handler+0x6c0>
  402632:	e1bf      	b.n	4029b4 <UDP_Handler+0xa50>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  402634:	f1b8 0f00 	cmp.w	r8, #0
  402638:	f000 8082 	beq.w	402740 <UDP_Handler+0x7dc>
  40263c:	f1b8 0f03 	cmp.w	r8, #3
  402640:	d07e      	beq.n	402740 <UDP_Handler+0x7dc>
					&& ptr_job->bank > 0) {
  402642:	f899 3011 	ldrb.w	r3, [r9, #17]
  402646:	f013 0f0c 	tst.w	r3, #12
  40264a:	d043      	beq.n	4026d4 <UDP_Handler+0x770>
  40264c:	00ba      	lsls	r2, r7, #2
  40264e:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402652:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  402656:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402658:	9322      	str	r3, [sp, #136]	; 0x88
  40265a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40265c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402660:	9322      	str	r3, [sp, #136]	; 0x88
  402662:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402664:	f043 0310 	orr.w	r3, r3, #16
  402668:	9322      	str	r3, [sp, #136]	; 0x88
  40266a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40266c:	6313      	str	r3, [r2, #48]	; 0x30
  40266e:	2300      	movs	r3, #0
  402670:	9323      	str	r3, [sp, #140]	; 0x8c
  402672:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402674:	2b13      	cmp	r3, #19
  402676:	d806      	bhi.n	402686 <UDP_Handler+0x722>
  402678:	bf00      	nop
  40267a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40267c:	3301      	adds	r3, #1
  40267e:	9323      	str	r3, [sp, #140]	; 0x8c
  402680:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402682:	2b13      	cmp	r3, #19
  402684:	d9f8      	bls.n	402678 <UDP_Handler+0x714>
				udd_ack_in_sent(ep);
  402686:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402688:	9324      	str	r3, [sp, #144]	; 0x90
  40268a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40268c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402690:	9324      	str	r3, [sp, #144]	; 0x90
  402692:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402694:	f023 0301 	bic.w	r3, r3, #1
  402698:	9324      	str	r3, [sp, #144]	; 0x90
  40269a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40269c:	6313      	str	r3, [r2, #48]	; 0x30
  40269e:	2300      	movs	r3, #0
  4026a0:	9325      	str	r3, [sp, #148]	; 0x94
  4026a2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4026a4:	2b13      	cmp	r3, #19
  4026a6:	d806      	bhi.n	4026b6 <UDP_Handler+0x752>
  4026a8:	bf00      	nop
  4026aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4026ac:	3301      	adds	r3, #1
  4026ae:	9325      	str	r3, [sp, #148]	; 0x94
  4026b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4026b2:	2b13      	cmp	r3, #19
  4026b4:	d9f8      	bls.n	4026a8 <UDP_Handler+0x744>
				udd_ep_in_sent(ep, false);
  4026b6:	4640      	mov	r0, r8
  4026b8:	2100      	movs	r1, #0
  4026ba:	4b05      	ldr	r3, [pc, #20]	; (4026d0 <UDP_Handler+0x76c>)
  4026bc:	4798      	blx	r3
  4026be:	e179      	b.n	4029b4 <UDP_Handler+0xa50>
  4026c0:	00401d39 	.word	0x00401d39
  4026c4:	40034000 	.word	0x40034000
  4026c8:	00401cf9 	.word	0x00401cf9
  4026cc:	200000b0 	.word	0x200000b0
  4026d0:	00401e05 	.word	0x00401e05
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  4026d4:	4640      	mov	r0, r8
  4026d6:	2101      	movs	r1, #1
  4026d8:	4b67      	ldr	r3, [pc, #412]	; (402878 <UDP_Handler+0x914>)
  4026da:	4798      	blx	r3
  4026dc:	b970      	cbnz	r0, 4026fc <UDP_Handler+0x798>
					ptr_job->b_buf_end = false;
  4026de:	f899 3011 	ldrb.w	r3, [r9, #17]
  4026e2:	f36f 13c7 	bfc	r3, #7, #1
  4026e6:	f889 3011 	strb.w	r3, [r9, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4026ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4026ee:	f8c9 3008 	str.w	r3, [r9, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4026f2:	4648      	mov	r0, r9
  4026f4:	2100      	movs	r1, #0
  4026f6:	4642      	mov	r2, r8
  4026f8:	4b60      	ldr	r3, [pc, #384]	; (40287c <UDP_Handler+0x918>)
  4026fa:	4798      	blx	r3
  4026fc:	00bb      	lsls	r3, r7, #2
  4026fe:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402702:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				}
				udd_ack_in_sent(ep);
  402706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402708:	9226      	str	r2, [sp, #152]	; 0x98
  40270a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40270c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402710:	9226      	str	r2, [sp, #152]	; 0x98
  402712:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402714:	f022 0201 	bic.w	r2, r2, #1
  402718:	9226      	str	r2, [sp, #152]	; 0x98
  40271a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40271c:	631a      	str	r2, [r3, #48]	; 0x30
  40271e:	2300      	movs	r3, #0
  402720:	9327      	str	r3, [sp, #156]	; 0x9c
  402722:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402724:	2b13      	cmp	r3, #19
  402726:	d806      	bhi.n	402736 <UDP_Handler+0x7d2>
  402728:	bf00      	nop
  40272a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40272c:	3301      	adds	r3, #1
  40272e:	9327      	str	r3, [sp, #156]	; 0x9c
  402730:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402732:	2b13      	cmp	r3, #19
  402734:	d9f8      	bls.n	402728 <UDP_Handler+0x7c4>
				udd_ep_in_sent(ep, false);
  402736:	4640      	mov	r0, r8
  402738:	2100      	movs	r1, #0
  40273a:	4b4f      	ldr	r3, [pc, #316]	; (402878 <UDP_Handler+0x914>)
  40273c:	4798      	blx	r3
  40273e:	e139      	b.n	4029b4 <UDP_Handler+0xa50>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  402740:	4640      	mov	r0, r8
  402742:	2101      	movs	r1, #1
  402744:	4b4c      	ldr	r3, [pc, #304]	; (402878 <UDP_Handler+0x914>)
  402746:	4798      	blx	r3
  402748:	00bb      	lsls	r3, r7, #2
  40274a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40274e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  402752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402754:	9228      	str	r2, [sp, #160]	; 0xa0
  402756:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402758:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40275c:	9228      	str	r2, [sp, #160]	; 0xa0
  40275e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402760:	f022 0201 	bic.w	r2, r2, #1
  402764:	9228      	str	r2, [sp, #160]	; 0xa0
  402766:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402768:	631a      	str	r2, [r3, #48]	; 0x30
  40276a:	2300      	movs	r3, #0
  40276c:	9329      	str	r3, [sp, #164]	; 0xa4
  40276e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402770:	2b13      	cmp	r3, #19
  402772:	f200 811f 	bhi.w	4029b4 <UDP_Handler+0xa50>
  402776:	bf00      	nop
  402778:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40277a:	3301      	adds	r3, #1
  40277c:	9329      	str	r3, [sp, #164]	; 0xa4
  40277e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402780:	2b13      	cmp	r3, #19
  402782:	d9f8      	bls.n	402776 <UDP_Handler+0x812>
  402784:	e116      	b.n	4029b4 <UDP_Handler+0xa50>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  402786:	6b09      	ldr	r1, [r1, #48]	; 0x30
  402788:	f011 0f08 	tst.w	r1, #8
  40278c:	d025      	beq.n	4027da <UDP_Handler+0x876>
  40278e:	009a      	lsls	r2, r3, #2
  402790:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402794:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
			udd_ack_stall(ep);
  402798:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40279a:	932a      	str	r3, [sp, #168]	; 0xa8
  40279c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  40279e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4027a2:	932a      	str	r3, [sp, #168]	; 0xa8
  4027a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  4027a6:	f023 0308 	bic.w	r3, r3, #8
  4027aa:	932a      	str	r3, [sp, #168]	; 0xa8
  4027ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  4027ae:	6313      	str	r3, [r2, #48]	; 0x30
  4027b0:	2300      	movs	r3, #0
  4027b2:	932b      	str	r3, [sp, #172]	; 0xac
  4027b4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  4027b6:	2b13      	cmp	r3, #19
  4027b8:	d806      	bhi.n	4027c8 <UDP_Handler+0x864>
  4027ba:	bf00      	nop
  4027bc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  4027be:	3301      	adds	r3, #1
  4027c0:	932b      	str	r3, [sp, #172]	; 0xac
  4027c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  4027c4:	2b13      	cmp	r3, #19
  4027c6:	d9f8      	bls.n	4027ba <UDP_Handler+0x856>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  4027c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4027ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4027ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4027d2:	f000 80ef 	beq.w	4029b4 <UDP_Handler+0xa50>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  4027d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4027d8:	e0ec      	b.n	4029b4 <UDP_Handler+0xa50>
  4027da:	3301      	adds	r3, #1
  4027dc:	3414      	adds	r4, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  4027de:	2b04      	cmp	r3, #4
  4027e0:	f47f ae01 	bne.w	4023e6 <UDP_Handler+0x482>
  4027e4:	e0db      	b.n	40299e <UDP_Handler+0xa3a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4027e6:	4b26      	ldr	r3, [pc, #152]	; (402880 <UDP_Handler+0x91c>)
  4027e8:	69db      	ldr	r3, [r3, #28]
  4027ea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4027ee:	d113      	bne.n	402818 <UDP_Handler+0x8b4>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4027f0:	4b23      	ldr	r3, [pc, #140]	; (402880 <UDP_Handler+0x91c>)
  4027f2:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4027f4:	f413 7f00 	tst.w	r3, #512	; 0x200
  4027f8:	d004      	beq.n	402804 <UDP_Handler+0x8a0>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4027fa:	4b21      	ldr	r3, [pc, #132]	; (402880 <UDP_Handler+0x91c>)
  4027fc:	69db      	ldr	r3, [r3, #28]
  4027fe:	f413 7f00 	tst.w	r3, #512	; 0x200
  402802:	d109      	bne.n	402818 <UDP_Handler+0x8b4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402804:	4b1e      	ldr	r3, [pc, #120]	; (402880 <UDP_Handler+0x91c>)
  402806:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402808:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40280c:	d014      	beq.n	402838 <UDP_Handler+0x8d4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  40280e:	4b1c      	ldr	r3, [pc, #112]	; (402880 <UDP_Handler+0x91c>)
  402810:	69db      	ldr	r3, [r3, #28]
  402812:	f413 6f80 	tst.w	r3, #1024	; 0x400
  402816:	d00f      	beq.n	402838 <UDP_Handler+0x8d4>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  402818:	4c19      	ldr	r4, [pc, #100]	; (402880 <UDP_Handler+0x91c>)
  40281a:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  40281e:	6223      	str	r3, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  402820:	6163      	str	r3, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  402822:	2001      	movs	r0, #1
  402824:	4b17      	ldr	r3, [pc, #92]	; (402884 <UDP_Handler+0x920>)
  402826:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  402828:	f44f 7380 	mov.w	r3, #256	; 0x100
  40282c:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  40282e:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  402830:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402834:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  402836:	e0bd      	b.n	4029b4 <UDP_Handler+0xa50>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  402838:	4b11      	ldr	r3, [pc, #68]	; (402880 <UDP_Handler+0x91c>)
  40283a:	699b      	ldr	r3, [r3, #24]
  40283c:	f413 7f80 	tst.w	r3, #256	; 0x100
  402840:	d024      	beq.n	40288c <UDP_Handler+0x928>
  402842:	4b0f      	ldr	r3, [pc, #60]	; (402880 <UDP_Handler+0x91c>)
  402844:	69db      	ldr	r3, [r3, #28]
  402846:	f413 7f80 	tst.w	r3, #256	; 0x100
  40284a:	d01f      	beq.n	40288c <UDP_Handler+0x928>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  40284c:	4b0c      	ldr	r3, [pc, #48]	; (402880 <UDP_Handler+0x91c>)
  40284e:	f44f 7280 	mov.w	r2, #256	; 0x100
  402852:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  402854:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  402856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40285a:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  40285c:	f44f 7200 	mov.w	r2, #512	; 0x200
  402860:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  402862:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402866:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  402868:	2022      	movs	r0, #34	; 0x22
  40286a:	4b07      	ldr	r3, [pc, #28]	; (402888 <UDP_Handler+0x924>)
  40286c:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  40286e:	2000      	movs	r0, #0
  402870:	4b04      	ldr	r3, [pc, #16]	; (402884 <UDP_Handler+0x920>)
  402872:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  402874:	e09e      	b.n	4029b4 <UDP_Handler+0xa50>
  402876:	bf00      	nop
  402878:	00401e05 	.word	0x00401e05
  40287c:	00401cf9 	.word	0x00401cf9
  402880:	40034000 	.word	0x40034000
  402884:	004019cd 	.word	0x004019cd
  402888:	00401929 	.word	0x00401929
	}
	if (Is_udd_reset()) {
  40288c:	4b4b      	ldr	r3, [pc, #300]	; (4029bc <UDP_Handler+0xa58>)
  40288e:	69db      	ldr	r3, [r3, #28]
  402890:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  402894:	f000 808e 	beq.w	4029b4 <UDP_Handler+0xa50>
		// USB bus reset detection
		udd_ack_reset();
  402898:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40289c:	4b47      	ldr	r3, [pc, #284]	; (4029bc <UDP_Handler+0xa58>)
  40289e:	621a      	str	r2, [r3, #32]
  4028a0:	4665      	mov	r5, ip
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4028a2:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  4028a4:	2701      	movs	r7, #1
  4028a6:	4e46      	ldr	r6, [pc, #280]	; (4029c0 <UDP_Handler+0xa5c>)
  4028a8:	3401      	adds	r4, #1
  4028aa:	b2e4      	uxtb	r4, r4
  4028ac:	4628      	mov	r0, r5
  4028ae:	4639      	mov	r1, r7
  4028b0:	4622      	mov	r2, r4
  4028b2:	47b0      	blx	r6
  4028b4:	3514      	adds	r5, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4028b6:	2c03      	cmp	r4, #3
  4028b8:	d1f6      	bne.n	4028a8 <UDP_Handler+0x944>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  4028ba:	4b42      	ldr	r3, [pc, #264]	; (4029c4 <UDP_Handler+0xa60>)
  4028bc:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  4028be:	4b3f      	ldr	r3, [pc, #252]	; (4029bc <UDP_Handler+0xa58>)
  4028c0:	685a      	ldr	r2, [r3, #4]
  4028c2:	f022 0201 	bic.w	r2, r2, #1
  4028c6:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  4028c8:	685a      	ldr	r2, [r3, #4]
  4028ca:	f022 0202 	bic.w	r2, r2, #2
  4028ce:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  4028d0:	689a      	ldr	r2, [r3, #8]
  4028d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4028d6:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  4028d8:	689a      	ldr	r2, [r3, #8]
  4028da:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  4028de:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  4028e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4028e2:	922c      	str	r2, [sp, #176]	; 0xb0
  4028e4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4028e6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4028ea:	922c      	str	r2, [sp, #176]	; 0xb0
  4028ec:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4028ee:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  4028f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4028f6:	922c      	str	r2, [sp, #176]	; 0xb0
  4028f8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4028fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4028fe:	922c      	str	r2, [sp, #176]	; 0xb0
  402900:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402902:	631a      	str	r2, [r3, #48]	; 0x30
  402904:	2300      	movs	r3, #0
  402906:	932d      	str	r3, [sp, #180]	; 0xb4
  402908:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40290a:	2b13      	cmp	r3, #19
  40290c:	d806      	bhi.n	40291c <UDP_Handler+0x9b8>
  40290e:	bf00      	nop
  402910:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402912:	3301      	adds	r3, #1
  402914:	932d      	str	r3, [sp, #180]	; 0xb4
  402916:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402918:	2b13      	cmp	r3, #19
  40291a:	d9f8      	bls.n	40290e <UDP_Handler+0x9aa>
	udd_enable_endpoint(0);
  40291c:	4b27      	ldr	r3, [pc, #156]	; (4029bc <UDP_Handler+0xa58>)
  40291e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402920:	922e      	str	r2, [sp, #184]	; 0xb8
  402922:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  402924:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402928:	922e      	str	r2, [sp, #184]	; 0xb8
  40292a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  40292c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402930:	922e      	str	r2, [sp, #184]	; 0xb8
  402932:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  402934:	631a      	str	r2, [r3, #48]	; 0x30
  402936:	2300      	movs	r3, #0
  402938:	932f      	str	r3, [sp, #188]	; 0xbc
  40293a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40293c:	2b13      	cmp	r3, #19
  40293e:	d806      	bhi.n	40294e <UDP_Handler+0x9ea>
  402940:	bf00      	nop
  402942:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402944:	3301      	adds	r3, #1
  402946:	932f      	str	r3, [sp, #188]	; 0xbc
  402948:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40294a:	2b13      	cmp	r3, #19
  40294c:	d9f8      	bls.n	402940 <UDP_Handler+0x9dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40294e:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402952:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402954:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402958:	2100      	movs	r1, #0
  40295a:	4a1b      	ldr	r2, [pc, #108]	; (4029c8 <UDP_Handler+0xa64>)
  40295c:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  40295e:	2101      	movs	r1, #1
  402960:	4a16      	ldr	r2, [pc, #88]	; (4029bc <UDP_Handler+0xa58>)
  402962:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402964:	b923      	cbnz	r3, 402970 <UDP_Handler+0xa0c>
		cpu_irq_enable();
  402966:	4b18      	ldr	r3, [pc, #96]	; (4029c8 <UDP_Handler+0xa64>)
  402968:	7019      	strb	r1, [r3, #0]
  40296a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40296e:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  402970:	4b16      	ldr	r3, [pc, #88]	; (4029cc <UDP_Handler+0xa68>)
  402972:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  402974:	4b11      	ldr	r3, [pc, #68]	; (4029bc <UDP_Handler+0xa58>)
  402976:	f44f 7280 	mov.w	r2, #256	; 0x100
  40297a:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  40297c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402980:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  402982:	e017      	b.n	4029b4 <UDP_Handler+0xa50>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  402984:	4433      	add	r3, r6
  402986:	f8c9 300c 	str.w	r3, [r9, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  40298a:	4631      	mov	r1, r6
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  40298c:	2700      	movs	r7, #0
  40298e:	e000      	b.n	402992 <UDP_Handler+0xa2e>

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
  402990:	2701      	movs	r7, #1
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  402992:	2300      	movs	r3, #0
  402994:	e562      	b.n	40245c <UDP_Handler+0x4f8>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402996:	4640      	mov	r0, r8
  402998:	4b0d      	ldr	r3, [pc, #52]	; (4029d0 <UDP_Handler+0xa6c>)
  40299a:	4798      	blx	r3
  40299c:	e567      	b.n	40246e <UDP_Handler+0x50a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40299e:	4b07      	ldr	r3, [pc, #28]	; (4029bc <UDP_Handler+0xa58>)
  4029a0:	699b      	ldr	r3, [r3, #24]
  4029a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4029a6:	f47f af1e 	bne.w	4027e6 <UDP_Handler+0x882>
  4029aa:	e721      	b.n	4027f0 <UDP_Handler+0x88c>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  4029ac:	4640      	mov	r0, r8
  4029ae:	4b08      	ldr	r3, [pc, #32]	; (4029d0 <UDP_Handler+0xa6c>)
  4029b0:	4798      	blx	r3
  4029b2:	e55f      	b.n	402474 <UDP_Handler+0x510>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  4029b4:	b030      	add	sp, #192	; 0xc0
  4029b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4029ba:	bf00      	nop
  4029bc:	40034000 	.word	0x40034000
  4029c0:	00401cf9 	.word	0x00401cf9
  4029c4:	00401125 	.word	0x00401125
  4029c8:	200000b0 	.word	0x200000b0
  4029cc:	00401a41 	.word	0x00401a41
  4029d0:	00401d39 	.word	0x00401d39

004029d4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  4029d4:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4029d6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4029da:	b672      	cpsid	i
  4029dc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4029e0:	2200      	movs	r2, #0
  4029e2:	4b14      	ldr	r3, [pc, #80]	; (402a34 <udd_attach+0x60>)
  4029e4:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  4029e6:	2001      	movs	r0, #1
  4029e8:	4b13      	ldr	r3, [pc, #76]	; (402a38 <udd_attach+0x64>)
  4029ea:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  4029ec:	2022      	movs	r0, #34	; 0x22
  4029ee:	4b13      	ldr	r3, [pc, #76]	; (402a3c <udd_attach+0x68>)
  4029f0:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  4029f2:	4b13      	ldr	r3, [pc, #76]	; (402a40 <udd_attach+0x6c>)
  4029f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4029f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4029fa:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  4029fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  402a02:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  402a04:	f44f 7280 	mov.w	r2, #256	; 0x100
  402a08:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  402a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402a0e:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  402a10:	f44f 7200 	mov.w	r2, #512	; 0x200
  402a14:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  402a16:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402a1a:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  402a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402a20:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402a22:	b92c      	cbnz	r4, 402a30 <udd_attach+0x5c>
		cpu_irq_enable();
  402a24:	2201      	movs	r2, #1
  402a26:	4b03      	ldr	r3, [pc, #12]	; (402a34 <udd_attach+0x60>)
  402a28:	701a      	strb	r2, [r3, #0]
  402a2a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402a2e:	b662      	cpsie	i
  402a30:	bd10      	pop	{r4, pc}
  402a32:	bf00      	nop
  402a34:	200000b0 	.word	0x200000b0
  402a38:	004019cd 	.word	0x004019cd
  402a3c:	004018d1 	.word	0x004018d1
  402a40:	40034000 	.word	0x40034000

00402a44 <udd_enable>:
#endif
}


void udd_enable(void)
{
  402a44:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402a46:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402a4a:	b672      	cpsid	i
  402a4c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402a50:	2500      	movs	r5, #0
  402a52:	4b21      	ldr	r3, [pc, #132]	; (402ad8 <udd_enable+0x94>)
  402a54:	701d      	strb	r5, [r3, #0]
	irqflags_t flags;

	flags = cpu_irq_save();

	// Enable USB hardware
	udd_enable_periph_ck();
  402a56:	2022      	movs	r0, #34	; 0x22
  402a58:	4b20      	ldr	r3, [pc, #128]	; (402adc <udd_enable+0x98>)
  402a5a:	4798      	blx	r3
	sysclk_enable_usb();
  402a5c:	4b20      	ldr	r3, [pc, #128]	; (402ae0 <udd_enable+0x9c>)
  402a5e:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402a60:	4b20      	ldr	r3, [pc, #128]	; (402ae4 <udd_enable+0xa0>)
  402a62:	2250      	movs	r2, #80	; 0x50
  402a64:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  402a68:	2204      	movs	r2, #4
  402a6a:	605a      	str	r2, [r3, #4]
  402a6c:	462b      	mov	r3, r5

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].bank = 0;
  402a6e:	481e      	ldr	r0, [pc, #120]	; (402ae8 <udd_enable+0xa4>)
  402a70:	0099      	lsls	r1, r3, #2
  402a72:	18ca      	adds	r2, r1, r3
  402a74:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402a78:	7c52      	ldrb	r2, [r2, #17]
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
  402a7a:	4419      	add	r1, r3
  402a7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  402a80:	f002 0283 	and.w	r2, r2, #131	; 0x83
  402a84:	f36f 12c7 	bfc	r2, #7, #1
  402a88:	744a      	strb	r2, [r1, #17]
  402a8a:	3301      	adds	r3, #1
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402a8c:	2b03      	cmp	r3, #3
  402a8e:	d1ef      	bne.n	402a70 <udd_enable+0x2c>
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  402a90:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402a94:	4b15      	ldr	r3, [pc, #84]	; (402aec <udd_enable+0xa8>)
  402a96:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  402a98:	2200      	movs	r2, #0
  402a9a:	4b15      	ldr	r3, [pc, #84]	; (402af0 <udd_enable+0xac>)
  402a9c:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402a9e:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402aa2:	b672      	cpsid	i
  402aa4:	f3bf 8f5f 	dmb	sy
  402aa8:	2100      	movs	r1, #0
  402aaa:	4b0b      	ldr	r3, [pc, #44]	; (402ad8 <udd_enable+0x94>)
  402aac:	7019      	strb	r1, [r3, #0]
  402aae:	4b11      	ldr	r3, [pc, #68]	; (402af4 <udd_enable+0xb0>)
  402ab0:	78d9      	ldrb	r1, [r3, #3]
  402ab2:	3101      	adds	r1, #1
  402ab4:	70d9      	strb	r1, [r3, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402ab6:	b92a      	cbnz	r2, 402ac4 <udd_enable+0x80>
		cpu_irq_enable();
  402ab8:	2201      	movs	r2, #1
  402aba:	4b07      	ldr	r3, [pc, #28]	; (402ad8 <udd_enable+0x94>)
  402abc:	701a      	strb	r2, [r3, #0]
  402abe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402ac2:	b662      	cpsie	i
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  402ac4:	4b0c      	ldr	r3, [pc, #48]	; (402af8 <udd_enable+0xb4>)
  402ac6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402ac8:	b92c      	cbnz	r4, 402ad6 <udd_enable+0x92>
		cpu_irq_enable();
  402aca:	2201      	movs	r2, #1
  402acc:	4b02      	ldr	r3, [pc, #8]	; (402ad8 <udd_enable+0x94>)
  402ace:	701a      	strb	r2, [r3, #0]
  402ad0:	f3bf 8f5f 	dmb	sy
  402ad4:	b662      	cpsie	i
  402ad6:	bd38      	pop	{r3, r4, r5, pc}
  402ad8:	200000b0 	.word	0x200000b0
  402adc:	004018d1 	.word	0x004018d1
  402ae0:	00400791 	.word	0x00400791
  402ae4:	e000e100 	.word	0xe000e100
  402ae8:	20000b8c 	.word	0x20000b8c
  402aec:	004019a1 	.word	0x004019a1
  402af0:	20000bc8 	.word	0x20000bc8
  402af4:	20000c30 	.word	0x20000c30
  402af8:	004029d5 	.word	0x004029d5

00402afc <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
	return false;
}
  402afc:	2000      	movs	r0, #0
  402afe:	4770      	bx	lr

00402b00 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  402b00:	4b0c      	ldr	r3, [pc, #48]	; (402b34 <udd_set_address+0x34>)
  402b02:	685a      	ldr	r2, [r3, #4]
  402b04:	f022 0201 	bic.w	r2, r2, #1
  402b08:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402b0a:	689a      	ldr	r2, [r3, #8]
  402b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402b10:	609a      	str	r2, [r3, #8]
	if (address) {
  402b12:	b170      	cbz	r0, 402b32 <udd_set_address+0x32>
		udd_configure_address(address);
  402b14:	6899      	ldr	r1, [r3, #8]
  402b16:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  402b1a:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
  402b1e:	430a      	orrs	r2, r1
  402b20:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  402b22:	689a      	ldr	r2, [r3, #8]
  402b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402b28:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402b2a:	685a      	ldr	r2, [r3, #4]
  402b2c:	f042 0201 	orr.w	r2, r2, #1
  402b30:	605a      	str	r2, [r3, #4]
  402b32:	4770      	bx	lr
  402b34:	40034000 	.word	0x40034000

00402b38 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  402b38:	4b05      	ldr	r3, [pc, #20]	; (402b50 <udd_getaddress+0x18>)
  402b3a:	685b      	ldr	r3, [r3, #4]
  402b3c:	f013 0f01 	tst.w	r3, #1
  402b40:	d004      	beq.n	402b4c <udd_getaddress+0x14>
		return udd_get_configured_address();
  402b42:	4b03      	ldr	r3, [pc, #12]	; (402b50 <udd_getaddress+0x18>)
  402b44:	6898      	ldr	r0, [r3, #8]
  402b46:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  402b4a:	4770      	bx	lr
	return 0;
  402b4c:	2000      	movs	r0, #0
}
  402b4e:	4770      	bx	lr
  402b50:	40034000 	.word	0x40034000

00402b54 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
  402b54:	4b02      	ldr	r3, [pc, #8]	; (402b60 <udd_get_frame_number+0xc>)
  402b56:	6818      	ldr	r0, [r3, #0]
}
  402b58:	f3c0 000a 	ubfx	r0, r0, #0, #11
  402b5c:	4770      	bx	lr
  402b5e:	bf00      	nop
  402b60:	40034000 	.word	0x40034000

00402b64 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
  402b64:	2000      	movs	r0, #0
  402b66:	4770      	bx	lr

00402b68 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  402b68:	4b01      	ldr	r3, [pc, #4]	; (402b70 <udd_set_setup_payload+0x8>)
  402b6a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402b6c:	8199      	strh	r1, [r3, #12]
  402b6e:	4770      	bx	lr
  402b70:	20000c3c 	.word	0x20000c3c

00402b74 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402b74:	b470      	push	{r4, r5, r6}
  402b76:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  402b78:	f000 030f 	and.w	r3, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  402b7c:	2b03      	cmp	r3, #3
  402b7e:	d866      	bhi.n	402c4e <udd_ep_alloc+0xda>
  402b80:	009c      	lsls	r4, r3, #2
  402b82:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402b86:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  402b8a:	6b25      	ldr	r5, [r4, #48]	; 0x30
  402b8c:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402b90:	d15f      	bne.n	402c52 <udd_ep_alloc+0xde>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402b92:	f001 0503 	and.w	r5, r1, #3
  402b96:	2d01      	cmp	r5, #1
  402b98:	d103      	bne.n	402ba2 <udd_ep_alloc+0x2e>
  402b9a:	2b00      	cmp	r3, #0
  402b9c:	d05b      	beq.n	402c56 <udd_ep_alloc+0xe2>
  402b9e:	2b03      	cmp	r3, #3
  402ba0:	d05b      	beq.n	402c5a <udd_ep_alloc+0xe6>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  402ba2:	1f1d      	subs	r5, r3, #4
  402ba4:	b2ed      	uxtb	r5, r5
  402ba6:	2d01      	cmp	r5, #1
  402ba8:	bf8c      	ite	hi
  402baa:	2540      	movhi	r5, #64	; 0x40
  402bac:	f44f 7500 	movls.w	r5, #512	; 0x200
  402bb0:	4295      	cmp	r5, r2
  402bb2:	db54      	blt.n	402c5e <udd_ep_alloc+0xea>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  402bb4:	1e5d      	subs	r5, r3, #1
  402bb6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402bba:	4e2d      	ldr	r6, [pc, #180]	; (402c70 <udd_ep_alloc+0xfc>)
  402bbc:	eb06 0585 	add.w	r5, r6, r5, lsl #2

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  402bc0:	8a2e      	ldrh	r6, [r5, #16]
  402bc2:	f362 0609 	bfi	r6, r2, #0, #10
  402bc6:	822e      	strh	r6, [r5, #16]
	ptr_job->b_buf_end = false;
  402bc8:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  402bca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402bce:	f36f 1245 	bfc	r2, #5, #1
  402bd2:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  402bd4:	09c0      	lsrs	r0, r0, #7
  402bd6:	d003      	beq.n	402be0 <udd_ep_alloc+0x6c>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  402bd8:	b2d2      	uxtb	r2, r2
  402bda:	f36f 0283 	bfc	r2, #2, #2
  402bde:	746a      	strb	r2, [r5, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  402be0:	4a24      	ldr	r2, [pc, #144]	; (402c74 <udd_ep_alloc+0x100>)
  402be2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402be4:	2601      	movs	r6, #1
  402be6:	fa06 f303 	lsl.w	r3, r6, r3
  402bea:	431d      	orrs	r5, r3
  402bec:	6295      	str	r5, [r2, #40]	; 0x28
  402bee:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402bf0:	ea25 0303 	bic.w	r3, r5, r3
  402bf4:	6293      	str	r3, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  402bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402bf8:	9300      	str	r3, [sp, #0]
  402bfa:	9b00      	ldr	r3, [sp, #0]
  402bfc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402c00:	9300      	str	r3, [sp, #0]
  402c02:	9b00      	ldr	r3, [sp, #0]
  402c04:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  402c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402c0c:	9300      	str	r3, [sp, #0]
  402c0e:	b138      	cbz	r0, 402c20 <udd_ep_alloc+0xac>
  402c10:	f041 0204 	orr.w	r2, r1, #4
  402c14:	0212      	lsls	r2, r2, #8
  402c16:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  402c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402c1e:	e004      	b.n	402c2a <udd_ep_alloc+0xb6>
  402c20:	020a      	lsls	r2, r1, #8
  402c22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  402c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402c2a:	9b00      	ldr	r3, [sp, #0]
  402c2c:	4313      	orrs	r3, r2
  402c2e:	9300      	str	r3, [sp, #0]
  402c30:	9b00      	ldr	r3, [sp, #0]
  402c32:	6323      	str	r3, [r4, #48]	; 0x30
  402c34:	2300      	movs	r3, #0
  402c36:	9301      	str	r3, [sp, #4]
  402c38:	9b01      	ldr	r3, [sp, #4]
  402c3a:	2b13      	cmp	r3, #19
  402c3c:	d811      	bhi.n	402c62 <udd_ep_alloc+0xee>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402c3e:	bf00      	nop
  402c40:	9b01      	ldr	r3, [sp, #4]
  402c42:	3301      	adds	r3, #1
  402c44:	9301      	str	r3, [sp, #4]
  402c46:	9b01      	ldr	r3, [sp, #4]
  402c48:	2b13      	cmp	r3, #19
  402c4a:	d9f8      	bls.n	402c3e <udd_ep_alloc+0xca>
  402c4c:	e00b      	b.n	402c66 <udd_ep_alloc+0xf2>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  402c4e:	2000      	movs	r0, #0
  402c50:	e00a      	b.n	402c68 <udd_ep_alloc+0xf4>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  402c52:	2000      	movs	r0, #0
  402c54:	e008      	b.n	402c68 <udd_ep_alloc+0xf4>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  402c56:	2000      	movs	r0, #0
  402c58:	e006      	b.n	402c68 <udd_ep_alloc+0xf4>
  402c5a:	2000      	movs	r0, #0
  402c5c:	e004      	b.n	402c68 <udd_ep_alloc+0xf4>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  402c5e:	2000      	movs	r0, #0
  402c60:	e002      	b.n	402c68 <udd_ep_alloc+0xf4>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  402c62:	2001      	movs	r0, #1
  402c64:	e000      	b.n	402c68 <udd_ep_alloc+0xf4>
  402c66:	2001      	movs	r0, #1
}
  402c68:	b003      	add	sp, #12
  402c6a:	bc70      	pop	{r4, r5, r6}
  402c6c:	4770      	bx	lr
  402c6e:	bf00      	nop
  402c70:	20000b8c 	.word	0x20000b8c
  402c74:	40034000 	.word	0x40034000

00402c78 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  402c78:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402c7a:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402c7e:	2a03      	cmp	r2, #3
  402c80:	d811      	bhi.n	402ca6 <udd_ep_free+0x2e>
  402c82:	0093      	lsls	r3, r2, #2
  402c84:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402c88:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		return;
	}
	udd_disable_endpoint(ep_index);
  402c8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402c8e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  402c92:	6319      	str	r1, [r3, #48]	; 0x30
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402c94:	1e50      	subs	r0, r2, #1
  402c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c9a:	4b03      	ldr	r3, [pc, #12]	; (402ca8 <udd_ep_free+0x30>)
  402c9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ca0:	2101      	movs	r1, #1
  402ca2:	4b02      	ldr	r3, [pc, #8]	; (402cac <udd_ep_free+0x34>)
  402ca4:	4798      	blx	r3
  402ca6:	bd08      	pop	{r3, pc}
  402ca8:	20000b8c 	.word	0x20000b8c
  402cac:	00401cf9 	.word	0x00401cf9

00402cb0 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402cb0:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  402cb4:	2803      	cmp	r0, #3
  402cb6:	d815      	bhi.n	402ce4 <udd_ep_is_halted+0x34>


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402cb8:	1e43      	subs	r3, r0, #1
  402cba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402cbe:	4a0a      	ldr	r2, [pc, #40]	; (402ce8 <udd_ep_is_halted+0x38>)
  402cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402cc4:	7c5b      	ldrb	r3, [r3, #17]
  402cc6:	f013 0f20 	tst.w	r3, #32
  402cca:	d109      	bne.n	402ce0 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402ccc:	300c      	adds	r0, #12
  402cce:	4b07      	ldr	r3, [pc, #28]	; (402cec <udd_ep_is_halted+0x3c>)
  402cd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402cd4:	f013 0f28 	tst.w	r3, #40	; 0x28
  402cd8:	bf0c      	ite	eq
  402cda:	2000      	moveq	r0, #0
  402cdc:	2001      	movne	r0, #1
  402cde:	4770      	bx	lr
  402ce0:	2001      	movs	r0, #1
  402ce2:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402ce4:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  402ce6:	4770      	bx	lr
  402ce8:	20000b8c 	.word	0x20000b8c
  402cec:	40034000 	.word	0x40034000

00402cf0 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  402cf0:	b410      	push	{r4}
  402cf2:	b083      	sub	sp, #12
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402cf4:	f000 020f 	and.w	r2, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  402cf8:	2a03      	cmp	r2, #3
  402cfa:	d85f      	bhi.n	402dbc <udd_ep_set_halt+0xcc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402cfc:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402d00:	f1d1 0101 	rsbs	r1, r1, #1
  402d04:	bf38      	it	cc
  402d06:	2100      	movcc	r1, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402d08:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402d0a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402d0e:	2400      	movs	r4, #0
  402d10:	4b2f      	ldr	r3, [pc, #188]	; (402dd0 <udd_ep_set_halt+0xe0>)
  402d12:	701c      	strb	r4, [r3, #0]
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402d14:	f010 0f80 	tst.w	r0, #128	; 0x80
  402d18:	d025      	beq.n	402d66 <udd_ep_set_halt+0x76>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402d1a:	1e53      	subs	r3, r2, #1
  402d1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402d20:	482c      	ldr	r0, [pc, #176]	; (402dd4 <udd_ep_set_halt+0xe4>)
  402d22:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402d26:	f102 040c 	add.w	r4, r2, #12
  402d2a:	482b      	ldr	r0, [pc, #172]	; (402dd8 <udd_ep_set_halt+0xe8>)
  402d2c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  402d30:	f010 0f10 	tst.w	r0, #16
  402d34:	d104      	bne.n	402d40 <udd_ep_set_halt+0x50>
				|| ptr_job->bank > 1)) {
  402d36:	7c58      	ldrb	r0, [r3, #17]
  402d38:	f3c0 0081 	ubfx	r0, r0, #2, #2
  402d3c:	2801      	cmp	r0, #1
  402d3e:	dd12      	ble.n	402d66 <udd_ep_set_halt+0x76>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  402d40:	7c58      	ldrb	r0, [r3, #17]
  402d42:	f040 0020 	orr.w	r0, r0, #32
  402d46:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402d48:	2301      	movs	r3, #1
  402d4a:	fa03 f202 	lsl.w	r2, r3, r2
  402d4e:	4b22      	ldr	r3, [pc, #136]	; (402dd8 <udd_ep_set_halt+0xe8>)
  402d50:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402d52:	2900      	cmp	r1, #0
  402d54:	d034      	beq.n	402dc0 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  402d56:	2201      	movs	r2, #1
  402d58:	4b1d      	ldr	r3, [pc, #116]	; (402dd0 <udd_ep_set_halt+0xe0>)
  402d5a:	701a      	strb	r2, [r3, #0]
  402d5c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402d60:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return true;
  402d62:	2001      	movs	r0, #1
  402d64:	e02f      	b.n	402dc6 <udd_ep_set_halt+0xd6>
  402d66:	0093      	lsls	r3, r2, #2
  402d68:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402d6c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  402d70:	6b18      	ldr	r0, [r3, #48]	; 0x30
  402d72:	9000      	str	r0, [sp, #0]
  402d74:	9800      	ldr	r0, [sp, #0]
  402d76:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  402d7a:	9000      	str	r0, [sp, #0]
  402d7c:	9800      	ldr	r0, [sp, #0]
  402d7e:	f040 0020 	orr.w	r0, r0, #32
  402d82:	9000      	str	r0, [sp, #0]
  402d84:	9800      	ldr	r0, [sp, #0]
  402d86:	6318      	str	r0, [r3, #48]	; 0x30
  402d88:	2300      	movs	r3, #0
  402d8a:	9301      	str	r3, [sp, #4]
  402d8c:	9b01      	ldr	r3, [sp, #4]
  402d8e:	2b13      	cmp	r3, #19
  402d90:	d806      	bhi.n	402da0 <udd_ep_set_halt+0xb0>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402d92:	bf00      	nop
  402d94:	9b01      	ldr	r3, [sp, #4]
  402d96:	3301      	adds	r3, #1
  402d98:	9301      	str	r3, [sp, #4]
  402d9a:	9b01      	ldr	r3, [sp, #4]
  402d9c:	2b13      	cmp	r3, #19
  402d9e:	d9f8      	bls.n	402d92 <udd_ep_set_halt+0xa2>
		udd_enable_endpoint_interrupt(ep_index);
  402da0:	2301      	movs	r3, #1
  402da2:	fa03 f202 	lsl.w	r2, r3, r2
  402da6:	4b0c      	ldr	r3, [pc, #48]	; (402dd8 <udd_ep_set_halt+0xe8>)
  402da8:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402daa:	b159      	cbz	r1, 402dc4 <udd_ep_set_halt+0xd4>
		cpu_irq_enable();
  402dac:	2201      	movs	r2, #1
  402dae:	4b08      	ldr	r3, [pc, #32]	; (402dd0 <udd_ep_set_halt+0xe0>)
  402db0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402db2:	f3bf 8f5f 	dmb	sy
  402db6:	b662      	cpsie	i
		cpu_irq_restore(flags);
	}
	return true;
  402db8:	2001      	movs	r0, #1
  402dba:	e004      	b.n	402dc6 <udd_ep_set_halt+0xd6>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402dbc:	2000      	movs	r0, #0
  402dbe:	e002      	b.n	402dc6 <udd_ep_set_halt+0xd6>
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  402dc0:	2001      	movs	r0, #1
  402dc2:	e000      	b.n	402dc6 <udd_ep_set_halt+0xd6>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  402dc4:	2001      	movs	r0, #1
}
  402dc6:	b003      	add	sp, #12
  402dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
  402dcc:	4770      	bx	lr
  402dce:	bf00      	nop
  402dd0:	200000b0 	.word	0x200000b0
  402dd4:	20000b8c 	.word	0x20000b8c
  402dd8:	40034000 	.word	0x40034000

00402ddc <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
  402dde:	b085      	sub	sp, #20
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402de0:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402de4:	2803      	cmp	r0, #3
  402de6:	d859      	bhi.n	402e9c <udd_ep_clear_halt+0xc0>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  402de8:	4c30      	ldr	r4, [pc, #192]	; (402eac <udd_ep_clear_halt+0xd0>)
  402dea:	1e43      	subs	r3, r0, #1
  402dec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402df0:	009d      	lsls	r5, r3, #2
  402df2:	1961      	adds	r1, r4, r5

	ptr_job->b_stall_requested = false;
  402df4:	7c4b      	ldrb	r3, [r1, #17]
  402df6:	f36f 1345 	bfc	r3, #5, #1
  402dfa:	744b      	strb	r3, [r1, #17]
  402dfc:	0082      	lsls	r2, r0, #2
  402dfe:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402e02:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402e06:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e08:	f013 0f20 	tst.w	r3, #32
  402e0c:	d048      	beq.n	402ea0 <udd_ep_clear_halt+0xc4>
		// Remove stall
		udd_disable_stall_handshake(ep);
  402e0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e10:	9300      	str	r3, [sp, #0]
  402e12:	9b00      	ldr	r3, [sp, #0]
  402e14:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e18:	9300      	str	r3, [sp, #0]
  402e1a:	9b00      	ldr	r3, [sp, #0]
  402e1c:	f023 0320 	bic.w	r3, r3, #32
  402e20:	9300      	str	r3, [sp, #0]
  402e22:	9b00      	ldr	r3, [sp, #0]
  402e24:	6313      	str	r3, [r2, #48]	; 0x30
  402e26:	2300      	movs	r3, #0
  402e28:	9301      	str	r3, [sp, #4]
  402e2a:	9b01      	ldr	r3, [sp, #4]
  402e2c:	2b13      	cmp	r3, #19
  402e2e:	d806      	bhi.n	402e3e <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402e30:	bf00      	nop
  402e32:	9b01      	ldr	r3, [sp, #4]
  402e34:	3301      	adds	r3, #1
  402e36:	9301      	str	r3, [sp, #4]
  402e38:	9b01      	ldr	r3, [sp, #4]
  402e3a:	2b13      	cmp	r3, #19
  402e3c:	d9f8      	bls.n	402e30 <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  402e3e:	4b1c      	ldr	r3, [pc, #112]	; (402eb0 <udd_ep_clear_halt+0xd4>)
  402e40:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  402e42:	2701      	movs	r7, #1
  402e44:	fa07 f000 	lsl.w	r0, r7, r0
  402e48:	4306      	orrs	r6, r0
  402e4a:	629e      	str	r6, [r3, #40]	; 0x28
  402e4c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  402e4e:	ea26 0000 	bic.w	r0, r6, r0
  402e52:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  402e54:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402e56:	9302      	str	r3, [sp, #8]
  402e58:	9b02      	ldr	r3, [sp, #8]
  402e5a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402e5e:	9302      	str	r3, [sp, #8]
  402e60:	9b02      	ldr	r3, [sp, #8]
  402e62:	f023 0308 	bic.w	r3, r3, #8
  402e66:	9302      	str	r3, [sp, #8]
  402e68:	9b02      	ldr	r3, [sp, #8]
  402e6a:	6313      	str	r3, [r2, #48]	; 0x30
  402e6c:	2300      	movs	r3, #0
  402e6e:	9303      	str	r3, [sp, #12]
  402e70:	9b03      	ldr	r3, [sp, #12]
  402e72:	2b13      	cmp	r3, #19
  402e74:	d806      	bhi.n	402e84 <udd_ep_clear_halt+0xa8>
  402e76:	bf00      	nop
  402e78:	9b03      	ldr	r3, [sp, #12]
  402e7a:	3301      	adds	r3, #1
  402e7c:	9303      	str	r3, [sp, #12]
  402e7e:	9b03      	ldr	r3, [sp, #12]
  402e80:	2b13      	cmp	r3, #19
  402e82:	d9f8      	bls.n	402e76 <udd_ep_clear_halt+0x9a>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  402e84:	7c4b      	ldrb	r3, [r1, #17]
  402e86:	f013 0f10 	tst.w	r3, #16
  402e8a:	d00b      	beq.n	402ea4 <udd_ep_clear_halt+0xc8>
			ptr_job->busy = false;
  402e8c:	7c4b      	ldrb	r3, [r1, #17]
  402e8e:	f36f 1304 	bfc	r3, #4, #1
  402e92:	744b      	strb	r3, [r1, #17]
			ptr_job->call_nohalt();
  402e94:	5963      	ldr	r3, [r4, r5]
  402e96:	4798      	blx	r3
		}
	}
	return true;
  402e98:	2001      	movs	r0, #1
  402e9a:	e004      	b.n	402ea6 <udd_ep_clear_halt+0xca>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  402e9c:	2000      	movs	r0, #0
  402e9e:	e002      	b.n	402ea6 <udd_ep_clear_halt+0xca>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  402ea0:	2001      	movs	r0, #1
  402ea2:	e000      	b.n	402ea6 <udd_ep_clear_halt+0xca>
  402ea4:	2001      	movs	r0, #1
}
  402ea6:	b005      	add	sp, #20
  402ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402eaa:	bf00      	nop
  402eac:	20000b8c 	.word	0x20000b8c
  402eb0:	40034000 	.word	0x40034000

00402eb4 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  402eb8:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402ebc:	2c03      	cmp	r4, #3
  402ebe:	f200 8089 	bhi.w	402fd4 <udd_ep_run+0x120>
  402ec2:	00a5      	lsls	r5, r4, #2
  402ec4:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402ec8:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  402ecc:	6b2e      	ldr	r6, [r5, #48]	; 0x30
  402ece:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  402ed2:	f000 8082 	beq.w	402fda <udd_ep_run+0x126>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  402ed6:	f8df c12c 	ldr.w	ip, [pc, #300]	; 403004 <udd_ep_run+0x150>
  402eda:	1e66      	subs	r6, r4, #1
  402edc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402ee0:	00b7      	lsls	r7, r6, #2
  402ee2:	eb0c 0607 	add.w	r6, ip, r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  402ee6:	f896 8011 	ldrb.w	r8, [r6, #17]
  402eea:	f018 0f20 	tst.w	r8, #32
  402eee:	d177      	bne.n	402fe0 <udd_ep_run+0x12c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402ef0:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
  402ef4:	f018 0f20 	tst.w	r8, #32
  402ef8:	d175      	bne.n	402fe6 <udd_ep_run+0x132>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402efa:	f3ef 8810 	mrs	r8, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402efe:	f1d8 0a01 	rsbs	sl, r8, #1
  402f02:	bf38      	it	cc
  402f04:	f04f 0a00 	movcc.w	sl, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402f08:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402f0a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402f0e:	f04f 0900 	mov.w	r9, #0
  402f12:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 402ff8 <udd_ep_run+0x144>
  402f16:	f888 9000 	strb.w	r9, [r8]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  402f1a:	f896 8011 	ldrb.w	r8, [r6, #17]
  402f1e:	f018 0f10 	tst.w	r8, #16
  402f22:	d00b      	beq.n	402f3c <udd_ep_run+0x88>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f24:	f1ba 0f00 	cmp.w	sl, #0
  402f28:	d060      	beq.n	402fec <udd_ep_run+0x138>
		cpu_irq_enable();
  402f2a:	2201      	movs	r2, #1
  402f2c:	4b32      	ldr	r3, [pc, #200]	; (402ff8 <udd_ep_run+0x144>)
  402f2e:	701a      	strb	r2, [r3, #0]
  402f30:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402f34:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  402f36:	2000      	movs	r0, #0
  402f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	ptr_job->busy = true;
  402f3c:	f896 8011 	ldrb.w	r8, [r6, #17]
  402f40:	f048 0810 	orr.w	r8, r8, #16
  402f44:	f886 8011 	strb.w	r8, [r6, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f48:	f1ba 0f00 	cmp.w	sl, #0
  402f4c:	d008      	beq.n	402f60 <udd_ep_run+0xac>
		cpu_irq_enable();
  402f4e:	f04f 0901 	mov.w	r9, #1
  402f52:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 402ff8 <udd_ep_run+0x144>
  402f56:	f888 9000 	strb.w	r9, [r8]
  402f5a:	f3bf 8f5f 	dmb	sy
  402f5e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  402f60:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
  402f62:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
  402f64:	2200      	movs	r2, #0
  402f66:	60f2      	str	r2, [r6, #12]
	ptr_job->call_trans = callback;
  402f68:	9a08      	ldr	r2, [sp, #32]
  402f6a:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402f6e:	b921      	cbnz	r1, 402f7a <udd_ep_run+0xc6>
  402f70:	f1d3 0201 	rsbs	r2, r3, #1
  402f74:	bf38      	it	cc
  402f76:	2200      	movcc	r2, #0
  402f78:	e000      	b.n	402f7c <udd_ep_run+0xc8>
  402f7a:	2201      	movs	r2, #1
  402f7c:	7c73      	ldrb	r3, [r6, #17]
  402f7e:	f362 1386 	bfi	r3, r2, #6, #1
	ptr_job->b_buf_end = false;
  402f82:	f36f 13c7 	bfc	r3, #7, #1
  402f86:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402f88:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402f8c:	b672      	cpsid	i
  402f8e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402f92:	2200      	movs	r2, #0
  402f94:	4b18      	ldr	r3, [pc, #96]	; (402ff8 <udd_ep_run+0x144>)
  402f96:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  402f98:	2201      	movs	r2, #1
  402f9a:	40a2      	lsls	r2, r4
  402f9c:	4b17      	ldr	r3, [pc, #92]	; (402ffc <udd_ep_run+0x148>)
  402f9e:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  402fa0:	f010 0f80 	tst.w	r0, #128	; 0x80
  402fa4:	d00c      	beq.n	402fc0 <udd_ep_run+0x10c>
		if (Is_udd_in_pending(ep)) {
  402fa6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402fa8:	f013 0f11 	tst.w	r3, #17
  402fac:	d108      	bne.n	402fc0 <udd_ep_run+0x10c>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  402fae:	4620      	mov	r0, r4
  402fb0:	2101      	movs	r1, #1
  402fb2:	4b13      	ldr	r3, [pc, #76]	; (403000 <udd_ep_run+0x14c>)
  402fb4:	4798      	blx	r3
  402fb6:	b118      	cbz	r0, 402fc0 <udd_ep_run+0x10c>
				// Over one bank
				udd_ep_in_sent(ep, false);
  402fb8:	4620      	mov	r0, r4
  402fba:	2100      	movs	r1, #0
  402fbc:	4b10      	ldr	r3, [pc, #64]	; (403000 <udd_ep_run+0x14c>)
  402fbe:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402fc0:	b9be      	cbnz	r6, 402ff2 <udd_ep_run+0x13e>
		cpu_irq_enable();
  402fc2:	2201      	movs	r2, #1
  402fc4:	4b0c      	ldr	r3, [pc, #48]	; (402ff8 <udd_ep_run+0x144>)
  402fc6:	701a      	strb	r2, [r3, #0]
  402fc8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402fcc:	b662      	cpsie	i
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402fce:	2001      	movs	r0, #1
  402fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  402fd4:	2000      	movs	r0, #0
  402fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  402fda:	2000      	movs	r0, #0
  402fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402fe0:	2000      	movs	r0, #0
  402fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402fe6:	2000      	movs	r0, #0
  402fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  402fec:	2000      	movs	r0, #0
  402fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402ff2:	2001      	movs	r0, #1
}
  402ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402ff8:	200000b0 	.word	0x200000b0
  402ffc:	40034000 	.word	0x40034000
  403000:	00401e05 	.word	0x00401e05
  403004:	20000b8c 	.word	0x20000b8c

00403008 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  403008:	b5f0      	push	{r4, r5, r6, r7, lr}
  40300a:	b085      	sub	sp, #20
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  40300c:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  403010:	2c03      	cmp	r4, #3
  403012:	f200 8090 	bhi.w	403136 <udd_ep_abort+0x12e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403016:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40301a:	b672      	cpsid	i
  40301c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  403020:	2100      	movs	r1, #0
  403022:	4a46      	ldr	r2, [pc, #280]	; (40313c <udd_ep_abort+0x134>)
  403024:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  403026:	2601      	movs	r6, #1
  403028:	40a6      	lsls	r6, r4
  40302a:	4a45      	ldr	r2, [pc, #276]	; (403140 <udd_ep_abort+0x138>)
  40302c:	6156      	str	r6, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40302e:	b92b      	cbnz	r3, 40303c <udd_ep_abort+0x34>
		cpu_irq_enable();
  403030:	2201      	movs	r2, #1
  403032:	4b42      	ldr	r3, [pc, #264]	; (40313c <udd_ep_abort+0x134>)
  403034:	701a      	strb	r2, [r3, #0]
  403036:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40303a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  40303c:	f010 0f80 	tst.w	r0, #128	; 0x80
  403040:	d109      	bne.n	403056 <udd_ep_abort+0x4e>
  403042:	00a5      	lsls	r5, r4, #2
  403044:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  403048:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40304c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40304e:	f013 0f42 	tst.w	r3, #66	; 0x42
  403052:	d157      	bne.n	403104 <udd_ep_abort+0xfc>
  403054:	e05d      	b.n	403112 <udd_ep_abort+0x10a>
  403056:	00a3      	lsls	r3, r4, #2
  403058:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40305c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  403060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403062:	f012 0f10 	tst.w	r2, #16
  403066:	d02a      	beq.n	4030be <udd_ep_abort+0xb6>
			udd_kill_data_in_fifo(ep,
  403068:	b18c      	cbz	r4, 40308e <udd_ep_abort+0x86>
  40306a:	2c03      	cmp	r4, #3
  40306c:	d00f      	beq.n	40308e <udd_ep_abort+0x86>
  40306e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403070:	f022 0210 	bic.w	r2, r2, #16
  403074:	631a      	str	r2, [r3, #48]	; 0x30
  403076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403078:	f012 0f10 	tst.w	r2, #16
  40307c:	d1fb      	bne.n	403076 <udd_ep_abort+0x6e>
  40307e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403080:	f042 0210 	orr.w	r2, r2, #16
  403084:	631a      	str	r2, [r3, #48]	; 0x30
  403086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403088:	f012 0f10 	tst.w	r2, #16
  40308c:	d0fb      	beq.n	403086 <udd_ep_abort+0x7e>
  40308e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403090:	9200      	str	r2, [sp, #0]
  403092:	9a00      	ldr	r2, [sp, #0]
  403094:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403098:	9200      	str	r2, [sp, #0]
  40309a:	9a00      	ldr	r2, [sp, #0]
  40309c:	f022 0210 	bic.w	r2, r2, #16
  4030a0:	9200      	str	r2, [sp, #0]
  4030a2:	9a00      	ldr	r2, [sp, #0]
  4030a4:	631a      	str	r2, [r3, #48]	; 0x30
  4030a6:	2200      	movs	r2, #0
  4030a8:	9201      	str	r2, [sp, #4]
  4030aa:	9a01      	ldr	r2, [sp, #4]
  4030ac:	2a13      	cmp	r2, #19
  4030ae:	d806      	bhi.n	4030be <udd_ep_abort+0xb6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4030b0:	bf00      	nop
  4030b2:	9a01      	ldr	r2, [sp, #4]
  4030b4:	3201      	adds	r2, #1
  4030b6:	9201      	str	r2, [sp, #4]
  4030b8:	9a01      	ldr	r2, [sp, #4]
  4030ba:	2a13      	cmp	r2, #19
  4030bc:	d9f8      	bls.n	4030b0 <udd_ep_abort+0xa8>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  4030be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4030c0:	9202      	str	r2, [sp, #8]
  4030c2:	9a02      	ldr	r2, [sp, #8]
  4030c4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4030c8:	9202      	str	r2, [sp, #8]
  4030ca:	9a02      	ldr	r2, [sp, #8]
  4030cc:	f022 0201 	bic.w	r2, r2, #1
  4030d0:	9202      	str	r2, [sp, #8]
  4030d2:	9a02      	ldr	r2, [sp, #8]
  4030d4:	631a      	str	r2, [r3, #48]	; 0x30
  4030d6:	2300      	movs	r3, #0
  4030d8:	9303      	str	r3, [sp, #12]
  4030da:	9b03      	ldr	r3, [sp, #12]
  4030dc:	2b13      	cmp	r3, #19
  4030de:	d806      	bhi.n	4030ee <udd_ep_abort+0xe6>
  4030e0:	bf00      	nop
  4030e2:	9b03      	ldr	r3, [sp, #12]
  4030e4:	3301      	adds	r3, #1
  4030e6:	9303      	str	r3, [sp, #12]
  4030e8:	9b03      	ldr	r3, [sp, #12]
  4030ea:	2b13      	cmp	r3, #19
  4030ec:	d9f8      	bls.n	4030e0 <udd_ep_abort+0xd8>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  4030ee:	1e63      	subs	r3, r4, #1
  4030f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4030f4:	4a13      	ldr	r2, [pc, #76]	; (403144 <udd_ep_abort+0x13c>)
  4030f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4030fa:	7c5a      	ldrb	r2, [r3, #17]
  4030fc:	f36f 0283 	bfc	r2, #2, #2
  403100:	745a      	strb	r2, [r3, #17]
  403102:	e006      	b.n	403112 <udd_ep_abort+0x10a>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  403104:	4f10      	ldr	r7, [pc, #64]	; (403148 <udd_ep_abort+0x140>)
  403106:	4620      	mov	r0, r4
  403108:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40310a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40310c:	f013 0f42 	tst.w	r3, #66	; 0x42
  403110:	d1f9      	bne.n	403106 <udd_ep_abort+0xfe>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  403112:	4b0b      	ldr	r3, [pc, #44]	; (403140 <udd_ep_abort+0x138>)
  403114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403116:	4332      	orrs	r2, r6
  403118:	629a      	str	r2, [r3, #40]	; 0x28
  40311a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40311c:	ea22 0606 	bic.w	r6, r2, r6
  403120:	629e      	str	r6, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  403122:	1e60      	subs	r0, r4, #1
  403124:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403128:	4b06      	ldr	r3, [pc, #24]	; (403144 <udd_ep_abort+0x13c>)
  40312a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40312e:	2101      	movs	r1, #1
  403130:	4622      	mov	r2, r4
  403132:	4b06      	ldr	r3, [pc, #24]	; (40314c <udd_ep_abort+0x144>)
  403134:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  403136:	b005      	add	sp, #20
  403138:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40313a:	bf00      	nop
  40313c:	200000b0 	.word	0x200000b0
  403140:	40034000 	.word	0x40034000
  403144:	20000b8c 	.word	0x20000b8c
  403148:	00401d39 	.word	0x00401d39
  40314c:	00401cf9 	.word	0x00401cf9

00403150 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  403150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403154:	6043      	str	r3, [r0, #4]
  403156:	4770      	bx	lr

00403158 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403158:	e7fe      	b.n	403158 <Dummy_Handler>
  40315a:	bf00      	nop

0040315c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40315c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40315e:	4b1e      	ldr	r3, [pc, #120]	; (4031d8 <Reset_Handler+0x7c>)
  403160:	4a1e      	ldr	r2, [pc, #120]	; (4031dc <Reset_Handler+0x80>)
  403162:	429a      	cmp	r2, r3
  403164:	d003      	beq.n	40316e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  403166:	4b1e      	ldr	r3, [pc, #120]	; (4031e0 <Reset_Handler+0x84>)
  403168:	4a1b      	ldr	r2, [pc, #108]	; (4031d8 <Reset_Handler+0x7c>)
  40316a:	429a      	cmp	r2, r3
  40316c:	d304      	bcc.n	403178 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40316e:	4b1d      	ldr	r3, [pc, #116]	; (4031e4 <Reset_Handler+0x88>)
  403170:	4a1d      	ldr	r2, [pc, #116]	; (4031e8 <Reset_Handler+0x8c>)
  403172:	429a      	cmp	r2, r3
  403174:	d30f      	bcc.n	403196 <Reset_Handler+0x3a>
  403176:	e01a      	b.n	4031ae <Reset_Handler+0x52>
  403178:	4b1c      	ldr	r3, [pc, #112]	; (4031ec <Reset_Handler+0x90>)
  40317a:	4c1d      	ldr	r4, [pc, #116]	; (4031f0 <Reset_Handler+0x94>)
  40317c:	1ae4      	subs	r4, r4, r3
  40317e:	f024 0403 	bic.w	r4, r4, #3
  403182:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  403184:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  403186:	4814      	ldr	r0, [pc, #80]	; (4031d8 <Reset_Handler+0x7c>)
  403188:	4914      	ldr	r1, [pc, #80]	; (4031dc <Reset_Handler+0x80>)
  40318a:	585a      	ldr	r2, [r3, r1]
  40318c:	501a      	str	r2, [r3, r0]
  40318e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  403190:	42a3      	cmp	r3, r4
  403192:	d1fa      	bne.n	40318a <Reset_Handler+0x2e>
  403194:	e7eb      	b.n	40316e <Reset_Handler+0x12>
  403196:	4b17      	ldr	r3, [pc, #92]	; (4031f4 <Reset_Handler+0x98>)
  403198:	4917      	ldr	r1, [pc, #92]	; (4031f8 <Reset_Handler+0x9c>)
  40319a:	1ac9      	subs	r1, r1, r3
  40319c:	f021 0103 	bic.w	r1, r1, #3
  4031a0:	1d1a      	adds	r2, r3, #4
  4031a2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  4031a4:	2200      	movs	r2, #0
  4031a6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4031aa:	428b      	cmp	r3, r1
  4031ac:	d1fb      	bne.n	4031a6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4031ae:	4a13      	ldr	r2, [pc, #76]	; (4031fc <Reset_Handler+0xa0>)
  4031b0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
  4031b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4031b8:	4911      	ldr	r1, [pc, #68]	; (403200 <Reset_Handler+0xa4>)
  4031ba:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4031bc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  4031c0:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
  4031c4:	d203      	bcs.n	4031ce <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  4031c6:	688a      	ldr	r2, [r1, #8]
  4031c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4031cc:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  4031ce:	4b0d      	ldr	r3, [pc, #52]	; (403204 <Reset_Handler+0xa8>)
  4031d0:	4798      	blx	r3

	/* Branch to main function */
	main();
  4031d2:	4b0d      	ldr	r3, [pc, #52]	; (403208 <Reset_Handler+0xac>)
  4031d4:	4798      	blx	r3
  4031d6:	e7fe      	b.n	4031d6 <Reset_Handler+0x7a>
  4031d8:	20000000 	.word	0x20000000
  4031dc:	00408154 	.word	0x00408154
  4031e0:	20000978 	.word	0x20000978
  4031e4:	20000c58 	.word	0x20000c58
  4031e8:	20000978 	.word	0x20000978
  4031ec:	20000004 	.word	0x20000004
  4031f0:	2000097b 	.word	0x2000097b
  4031f4:	20000974 	.word	0x20000974
  4031f8:	20000c53 	.word	0x20000c53
  4031fc:	00400000 	.word	0x00400000
  403200:	e000ed00 	.word	0xe000ed00
  403204:	004033dd 	.word	0x004033dd
  403208:	00403399 	.word	0x00403399

0040320c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  40320c:	4b3d      	ldr	r3, [pc, #244]	; (403304 <SystemCoreClockUpdate+0xf8>)
  40320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403210:	f003 0303 	and.w	r3, r3, #3
  403214:	2b03      	cmp	r3, #3
  403216:	d85d      	bhi.n	4032d4 <SystemCoreClockUpdate+0xc8>
  403218:	e8df f003 	tbb	[pc, r3]
  40321c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  403220:	4b39      	ldr	r3, [pc, #228]	; (403308 <SystemCoreClockUpdate+0xfc>)
  403222:	695b      	ldr	r3, [r3, #20]
  403224:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403228:	bf14      	ite	ne
  40322a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40322e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403232:	4b36      	ldr	r3, [pc, #216]	; (40330c <SystemCoreClockUpdate+0x100>)
  403234:	601a      	str	r2, [r3, #0]
  403236:	e04d      	b.n	4032d4 <SystemCoreClockUpdate+0xc8>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  403238:	4b32      	ldr	r3, [pc, #200]	; (403304 <SystemCoreClockUpdate+0xf8>)
  40323a:	6a1b      	ldr	r3, [r3, #32]
  40323c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403240:	d003      	beq.n	40324a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403242:	4a33      	ldr	r2, [pc, #204]	; (403310 <SystemCoreClockUpdate+0x104>)
  403244:	4b31      	ldr	r3, [pc, #196]	; (40330c <SystemCoreClockUpdate+0x100>)
  403246:	601a      	str	r2, [r3, #0]
  403248:	e044      	b.n	4032d4 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40324a:	4a32      	ldr	r2, [pc, #200]	; (403314 <SystemCoreClockUpdate+0x108>)
  40324c:	4b2f      	ldr	r3, [pc, #188]	; (40330c <SystemCoreClockUpdate+0x100>)
  40324e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  403250:	4b2c      	ldr	r3, [pc, #176]	; (403304 <SystemCoreClockUpdate+0xf8>)
  403252:	6a1b      	ldr	r3, [r3, #32]
  403254:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403258:	2b10      	cmp	r3, #16
  40325a:	d002      	beq.n	403262 <SystemCoreClockUpdate+0x56>
  40325c:	2b20      	cmp	r3, #32
  40325e:	d004      	beq.n	40326a <SystemCoreClockUpdate+0x5e>
  403260:	e038      	b.n	4032d4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  403262:	4a2d      	ldr	r2, [pc, #180]	; (403318 <SystemCoreClockUpdate+0x10c>)
  403264:	4b29      	ldr	r3, [pc, #164]	; (40330c <SystemCoreClockUpdate+0x100>)
  403266:	601a      	str	r2, [r3, #0]
				break;
  403268:	e034      	b.n	4032d4 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  40326a:	4a29      	ldr	r2, [pc, #164]	; (403310 <SystemCoreClockUpdate+0x104>)
  40326c:	4b27      	ldr	r3, [pc, #156]	; (40330c <SystemCoreClockUpdate+0x100>)
  40326e:	601a      	str	r2, [r3, #0]
				break;
  403270:	e030      	b.n	4032d4 <SystemCoreClockUpdate+0xc8>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  403272:	4b24      	ldr	r3, [pc, #144]	; (403304 <SystemCoreClockUpdate+0xf8>)
  403274:	6a1b      	ldr	r3, [r3, #32]
  403276:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40327a:	d003      	beq.n	403284 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40327c:	4a24      	ldr	r2, [pc, #144]	; (403310 <SystemCoreClockUpdate+0x104>)
  40327e:	4b23      	ldr	r3, [pc, #140]	; (40330c <SystemCoreClockUpdate+0x100>)
  403280:	601a      	str	r2, [r3, #0]
  403282:	e012      	b.n	4032aa <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403284:	4a23      	ldr	r2, [pc, #140]	; (403314 <SystemCoreClockUpdate+0x108>)
  403286:	4b21      	ldr	r3, [pc, #132]	; (40330c <SystemCoreClockUpdate+0x100>)
  403288:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40328a:	4b1e      	ldr	r3, [pc, #120]	; (403304 <SystemCoreClockUpdate+0xf8>)
  40328c:	6a1b      	ldr	r3, [r3, #32]
  40328e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403292:	2b10      	cmp	r3, #16
  403294:	d002      	beq.n	40329c <SystemCoreClockUpdate+0x90>
  403296:	2b20      	cmp	r3, #32
  403298:	d004      	beq.n	4032a4 <SystemCoreClockUpdate+0x98>
  40329a:	e006      	b.n	4032aa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40329c:	4a1e      	ldr	r2, [pc, #120]	; (403318 <SystemCoreClockUpdate+0x10c>)
  40329e:	4b1b      	ldr	r3, [pc, #108]	; (40330c <SystemCoreClockUpdate+0x100>)
  4032a0:	601a      	str	r2, [r3, #0]
				break;
  4032a2:	e002      	b.n	4032aa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4032a4:	4a1a      	ldr	r2, [pc, #104]	; (403310 <SystemCoreClockUpdate+0x104>)
  4032a6:	4b19      	ldr	r3, [pc, #100]	; (40330c <SystemCoreClockUpdate+0x100>)
  4032a8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  4032aa:	4b16      	ldr	r3, [pc, #88]	; (403304 <SystemCoreClockUpdate+0xf8>)
  4032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032ae:	f003 0303 	and.w	r3, r3, #3
  4032b2:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  4032b4:	4b13      	ldr	r3, [pc, #76]	; (403304 <SystemCoreClockUpdate+0xf8>)
  4032b6:	bf07      	ittee	eq
  4032b8:	6a98      	ldreq	r0, [r3, #40]	; 0x28
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  4032ba:	6a99      	ldreq	r1, [r3, #40]	; 0x28
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  4032bc:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  4032be:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  4032c0:	4b12      	ldr	r3, [pc, #72]	; (40330c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  4032c2:	f3c0 400a 	ubfx	r0, r0, #16, #11
  4032c6:	681a      	ldr	r2, [r3, #0]
  4032c8:	fb00 2202 	mla	r2, r0, r2, r2
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  4032cc:	b2c9      	uxtb	r1, r1
  4032ce:	fbb2 f2f1 	udiv	r2, r2, r1
  4032d2:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4032d4:	4b0b      	ldr	r3, [pc, #44]	; (403304 <SystemCoreClockUpdate+0xf8>)
  4032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4032dc:	2b70      	cmp	r3, #112	; 0x70
  4032de:	d107      	bne.n	4032f0 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4032e0:	4b0a      	ldr	r3, [pc, #40]	; (40330c <SystemCoreClockUpdate+0x100>)
  4032e2:	681a      	ldr	r2, [r3, #0]
  4032e4:	490d      	ldr	r1, [pc, #52]	; (40331c <SystemCoreClockUpdate+0x110>)
  4032e6:	fba1 0202 	umull	r0, r2, r1, r2
  4032ea:	0852      	lsrs	r2, r2, #1
  4032ec:	601a      	str	r2, [r3, #0]
  4032ee:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4032f0:	4b04      	ldr	r3, [pc, #16]	; (403304 <SystemCoreClockUpdate+0xf8>)
  4032f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4032f4:	4b05      	ldr	r3, [pc, #20]	; (40330c <SystemCoreClockUpdate+0x100>)
  4032f6:	f3c1 1102 	ubfx	r1, r1, #4, #3
  4032fa:	681a      	ldr	r2, [r3, #0]
  4032fc:	40ca      	lsrs	r2, r1
  4032fe:	601a      	str	r2, [r3, #0]
  403300:	4770      	bx	lr
  403302:	bf00      	nop
  403304:	400e0400 	.word	0x400e0400
  403308:	400e1410 	.word	0x400e1410
  40330c:	200000b4 	.word	0x200000b4
  403310:	00b71b00 	.word	0x00b71b00
  403314:	003d0900 	.word	0x003d0900
  403318:	007a1200 	.word	0x007a1200
  40331c:	aaaaaaab 	.word	0xaaaaaaab

00403320 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  403320:	4b0c      	ldr	r3, [pc, #48]	; (403354 <system_init_flash+0x34>)
  403322:	4298      	cmp	r0, r3
  403324:	d803      	bhi.n	40332e <system_init_flash+0xe>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
  403326:	2200      	movs	r2, #0
  403328:	4b0b      	ldr	r3, [pc, #44]	; (403358 <system_init_flash+0x38>)
  40332a:	601a      	str	r2, [r3, #0]
  40332c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  40332e:	4b0b      	ldr	r3, [pc, #44]	; (40335c <system_init_flash+0x3c>)
  403330:	4298      	cmp	r0, r3
  403332:	d804      	bhi.n	40333e <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
  403334:	f44f 7280 	mov.w	r2, #256	; 0x100
  403338:	4b07      	ldr	r3, [pc, #28]	; (403358 <system_init_flash+0x38>)
  40333a:	601a      	str	r2, [r3, #0]
  40333c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  40333e:	4b08      	ldr	r3, [pc, #32]	; (403360 <system_init_flash+0x40>)
  403340:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
  403342:	bf94      	ite	ls
  403344:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
  403348:	f44f 7240 	movhi.w	r2, #768	; 0x300
  40334c:	4b02      	ldr	r3, [pc, #8]	; (403358 <system_init_flash+0x38>)
  40334e:	601a      	str	r2, [r3, #0]
  403350:	4770      	bx	lr
  403352:	bf00      	nop
  403354:	0103663f 	.word	0x0103663f
  403358:	400e0a00 	.word	0x400e0a00
  40335c:	01c9c37f 	.word	0x01c9c37f
  403360:	0337f97f 	.word	0x0337f97f

00403364 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403364:	4b09      	ldr	r3, [pc, #36]	; (40338c <_sbrk+0x28>)
  403366:	681b      	ldr	r3, [r3, #0]
  403368:	b913      	cbnz	r3, 403370 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40336a:	4a09      	ldr	r2, [pc, #36]	; (403390 <_sbrk+0x2c>)
  40336c:	4b07      	ldr	r3, [pc, #28]	; (40338c <_sbrk+0x28>)
  40336e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403370:	4b06      	ldr	r3, [pc, #24]	; (40338c <_sbrk+0x28>)
  403372:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403374:	181a      	adds	r2, r3, r0
  403376:	4907      	ldr	r1, [pc, #28]	; (403394 <_sbrk+0x30>)
  403378:	4291      	cmp	r1, r2
  40337a:	db04      	blt.n	403386 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  40337c:	4610      	mov	r0, r2
  40337e:	4a03      	ldr	r2, [pc, #12]	; (40338c <_sbrk+0x28>)
  403380:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403382:	4618      	mov	r0, r3
  403384:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403386:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  40338a:	4770      	bx	lr
  40338c:	20000bd0 	.word	0x20000bd0
  403390:	20002c58 	.word	0x20002c58
  403394:	2000bffc 	.word	0x2000bffc

00403398 <main>:


uint16_t angle;

int main (void)
{
  403398:	b508      	push	{r3, lr}
	// Insert system clock initialization code here (sysclk_init()).
	

	board_init();
  40339a:	4b07      	ldr	r3, [pc, #28]	; (4033b8 <main+0x20>)
  40339c:	4798      	blx	r3
	sysclk_init();
  40339e:	4b07      	ldr	r3, [pc, #28]	; (4033bc <main+0x24>)
  4033a0:	4798      	blx	r3
	/*
	ADC_init();
	timer_init();
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
	*/
	udc_start();
  4033a2:	4b07      	ldr	r3, [pc, #28]	; (4033c0 <main+0x28>)
  4033a4:	4798      	blx	r3
	
	
	while(1)
	{
		parse_comands();
  4033a6:	4e07      	ldr	r6, [pc, #28]	; (4033c4 <main+0x2c>)
		delay_ms(10);
  4033a8:	f24b 2593 	movw	r5, #45715	; 0xb293
  4033ac:	4c06      	ldr	r4, [pc, #24]	; (4033c8 <main+0x30>)
	udc_start();
	
	
	while(1)
	{
		parse_comands();
  4033ae:	47b0      	blx	r6
		delay_ms(10);
  4033b0:	4628      	mov	r0, r5
  4033b2:	47a0      	blx	r4
  4033b4:	e7fb      	b.n	4033ae <main+0x16>
  4033b6:	bf00      	nop
  4033b8:	00400735 	.word	0x00400735
  4033bc:	004007e1 	.word	0x004007e1
  4033c0:	00401119 	.word	0x00401119
  4033c4:	00400301 	.word	0x00400301
  4033c8:	20000001 	.word	0x20000001

004033cc <atoi>:
  4033cc:	2100      	movs	r1, #0
  4033ce:	220a      	movs	r2, #10
  4033d0:	f000 b922 	b.w	403618 <strtol>

004033d4 <_atoi_r>:
  4033d4:	2200      	movs	r2, #0
  4033d6:	230a      	movs	r3, #10
  4033d8:	f000 b89c 	b.w	403514 <_strtol_r>

004033dc <__libc_init_array>:
  4033dc:	b570      	push	{r4, r5, r6, lr}
  4033de:	4b0e      	ldr	r3, [pc, #56]	; (403418 <__libc_init_array+0x3c>)
  4033e0:	4d0e      	ldr	r5, [pc, #56]	; (40341c <__libc_init_array+0x40>)
  4033e2:	2400      	movs	r4, #0
  4033e4:	1aed      	subs	r5, r5, r3
  4033e6:	10ad      	asrs	r5, r5, #2
  4033e8:	461e      	mov	r6, r3
  4033ea:	42ac      	cmp	r4, r5
  4033ec:	d004      	beq.n	4033f8 <__libc_init_array+0x1c>
  4033ee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  4033f2:	4790      	blx	r2
  4033f4:	3401      	adds	r4, #1
  4033f6:	e7f8      	b.n	4033ea <__libc_init_array+0xe>
  4033f8:	f004 fe96 	bl	408128 <_init>
  4033fc:	4d08      	ldr	r5, [pc, #32]	; (403420 <__libc_init_array+0x44>)
  4033fe:	4b09      	ldr	r3, [pc, #36]	; (403424 <__libc_init_array+0x48>)
  403400:	2400      	movs	r4, #0
  403402:	1aed      	subs	r5, r5, r3
  403404:	10ad      	asrs	r5, r5, #2
  403406:	461e      	mov	r6, r3
  403408:	42ac      	cmp	r4, r5
  40340a:	d004      	beq.n	403416 <__libc_init_array+0x3a>
  40340c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403410:	4790      	blx	r2
  403412:	3401      	adds	r4, #1
  403414:	e7f8      	b.n	403408 <__libc_init_array+0x2c>
  403416:	bd70      	pop	{r4, r5, r6, pc}
  403418:	00408134 	.word	0x00408134
  40341c:	00408134 	.word	0x00408134
  403420:	0040813c 	.word	0x0040813c
  403424:	00408134 	.word	0x00408134

00403428 <memcpy>:
  403428:	b510      	push	{r4, lr}
  40342a:	2300      	movs	r3, #0
  40342c:	4293      	cmp	r3, r2
  40342e:	d003      	beq.n	403438 <memcpy+0x10>
  403430:	5ccc      	ldrb	r4, [r1, r3]
  403432:	54c4      	strb	r4, [r0, r3]
  403434:	3301      	adds	r3, #1
  403436:	e7f9      	b.n	40342c <memcpy+0x4>
  403438:	bd10      	pop	{r4, pc}

0040343a <memset>:
  40343a:	4402      	add	r2, r0
  40343c:	4603      	mov	r3, r0
  40343e:	4293      	cmp	r3, r2
  403440:	d002      	beq.n	403448 <memset+0xe>
  403442:	f803 1b01 	strb.w	r1, [r3], #1
  403446:	e7fa      	b.n	40343e <memset+0x4>
  403448:	4770      	bx	lr
	...

0040344c <_sprintf_r>:
  40344c:	b40c      	push	{r2, r3}
  40344e:	b510      	push	{r4, lr}
  403450:	b09c      	sub	sp, #112	; 0x70
  403452:	ab1e      	add	r3, sp, #120	; 0x78
  403454:	9102      	str	r1, [sp, #8]
  403456:	9106      	str	r1, [sp, #24]
  403458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40345c:	f853 2b04 	ldr.w	r2, [r3], #4
  403460:	9104      	str	r1, [sp, #16]
  403462:	9107      	str	r1, [sp, #28]
  403464:	f64f 71ff 	movw	r1, #65535	; 0xffff
  403468:	f8ad 1016 	strh.w	r1, [sp, #22]
  40346c:	f44f 7402 	mov.w	r4, #520	; 0x208
  403470:	a902      	add	r1, sp, #8
  403472:	9301      	str	r3, [sp, #4]
  403474:	f8ad 4014 	strh.w	r4, [sp, #20]
  403478:	f000 f8dc 	bl	403634 <_svfprintf_r>
  40347c:	9b02      	ldr	r3, [sp, #8]
  40347e:	2200      	movs	r2, #0
  403480:	701a      	strb	r2, [r3, #0]
  403482:	b01c      	add	sp, #112	; 0x70
  403484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403488:	b002      	add	sp, #8
  40348a:	4770      	bx	lr

0040348c <sprintf>:
  40348c:	b40e      	push	{r1, r2, r3}
  40348e:	b500      	push	{lr}
  403490:	f44f 7102 	mov.w	r1, #520	; 0x208
  403494:	b09c      	sub	sp, #112	; 0x70
  403496:	f8ad 1014 	strh.w	r1, [sp, #20]
  40349a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40349e:	9104      	str	r1, [sp, #16]
  4034a0:	9107      	str	r1, [sp, #28]
  4034a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4034a6:	ab1d      	add	r3, sp, #116	; 0x74
  4034a8:	f8ad 1016 	strh.w	r1, [sp, #22]
  4034ac:	4908      	ldr	r1, [pc, #32]	; (4034d0 <sprintf+0x44>)
  4034ae:	f853 2b04 	ldr.w	r2, [r3], #4
  4034b2:	9002      	str	r0, [sp, #8]
  4034b4:	9006      	str	r0, [sp, #24]
  4034b6:	6808      	ldr	r0, [r1, #0]
  4034b8:	a902      	add	r1, sp, #8
  4034ba:	9301      	str	r3, [sp, #4]
  4034bc:	f000 f8ba 	bl	403634 <_svfprintf_r>
  4034c0:	9b02      	ldr	r3, [sp, #8]
  4034c2:	2200      	movs	r2, #0
  4034c4:	701a      	strb	r2, [r3, #0]
  4034c6:	b01c      	add	sp, #112	; 0x70
  4034c8:	f85d eb04 	ldr.w	lr, [sp], #4
  4034cc:	b003      	add	sp, #12
  4034ce:	4770      	bx	lr
  4034d0:	200000b8 	.word	0x200000b8

004034d4 <strlen>:
  4034d4:	4603      	mov	r3, r0
  4034d6:	f813 2b01 	ldrb.w	r2, [r3], #1
  4034da:	2a00      	cmp	r2, #0
  4034dc:	d1fb      	bne.n	4034d6 <strlen+0x2>
  4034de:	1a18      	subs	r0, r3, r0
  4034e0:	3801      	subs	r0, #1
  4034e2:	4770      	bx	lr

004034e4 <strpbrk>:
  4034e4:	b570      	push	{r4, r5, r6, lr}
  4034e6:	7803      	ldrb	r3, [r0, #0]
  4034e8:	460a      	mov	r2, r1
  4034ea:	b18b      	cbz	r3, 403510 <strpbrk+0x2c>
  4034ec:	4606      	mov	r6, r0
  4034ee:	f810 4b01 	ldrb.w	r4, [r0], #1
  4034f2:	b13c      	cbz	r4, 403504 <strpbrk+0x20>
  4034f4:	460b      	mov	r3, r1
  4034f6:	461a      	mov	r2, r3
  4034f8:	f813 5b01 	ldrb.w	r5, [r3], #1
  4034fc:	2d00      	cmp	r5, #0
  4034fe:	d0f5      	beq.n	4034ec <strpbrk+0x8>
  403500:	42ac      	cmp	r4, r5
  403502:	d1f8      	bne.n	4034f6 <strpbrk+0x12>
  403504:	7813      	ldrb	r3, [r2, #0]
  403506:	2b00      	cmp	r3, #0
  403508:	bf14      	ite	ne
  40350a:	4630      	movne	r0, r6
  40350c:	2000      	moveq	r0, #0
  40350e:	bd70      	pop	{r4, r5, r6, pc}
  403510:	4618      	mov	r0, r3
  403512:	bd70      	pop	{r4, r5, r6, pc}

00403514 <_strtol_r>:
  403514:	4684      	mov	ip, r0
  403516:	483f      	ldr	r0, [pc, #252]	; (403614 <_strtol_r+0x100>)
  403518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40351c:	f8d0 8000 	ldr.w	r8, [r0]
  403520:	460e      	mov	r6, r1
  403522:	4634      	mov	r4, r6
  403524:	f814 5b01 	ldrb.w	r5, [r4], #1
  403528:	eb08 0005 	add.w	r0, r8, r5
  40352c:	7840      	ldrb	r0, [r0, #1]
  40352e:	f000 0008 	and.w	r0, r0, #8
  403532:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  403536:	b108      	cbz	r0, 40353c <_strtol_r+0x28>
  403538:	4626      	mov	r6, r4
  40353a:	e7f2      	b.n	403522 <_strtol_r+0xe>
  40353c:	2d2d      	cmp	r5, #45	; 0x2d
  40353e:	d103      	bne.n	403548 <_strtol_r+0x34>
  403540:	1cb4      	adds	r4, r6, #2
  403542:	7875      	ldrb	r5, [r6, #1]
  403544:	2701      	movs	r7, #1
  403546:	e003      	b.n	403550 <_strtol_r+0x3c>
  403548:	2d2b      	cmp	r5, #43	; 0x2b
  40354a:	bf04      	itt	eq
  40354c:	7875      	ldrbeq	r5, [r6, #1]
  40354e:	1cb4      	addeq	r4, r6, #2
  403550:	f033 0010 	bics.w	r0, r3, #16
  403554:	d10d      	bne.n	403572 <_strtol_r+0x5e>
  403556:	2d30      	cmp	r5, #48	; 0x30
  403558:	d108      	bne.n	40356c <_strtol_r+0x58>
  40355a:	7820      	ldrb	r0, [r4, #0]
  40355c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  403560:	2858      	cmp	r0, #88	; 0x58
  403562:	d151      	bne.n	403608 <_strtol_r+0xf4>
  403564:	7865      	ldrb	r5, [r4, #1]
  403566:	2310      	movs	r3, #16
  403568:	3402      	adds	r4, #2
  40356a:	e002      	b.n	403572 <_strtol_r+0x5e>
  40356c:	2b00      	cmp	r3, #0
  40356e:	bf08      	it	eq
  403570:	230a      	moveq	r3, #10
  403572:	2f00      	cmp	r7, #0
  403574:	bf0c      	ite	eq
  403576:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
  40357a:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
  40357e:	fbba f9f3 	udiv	r9, sl, r3
  403582:	fb03 aa19 	mls	sl, r3, r9, sl
  403586:	2600      	movs	r6, #0
  403588:	4630      	mov	r0, r6
  40358a:	eb08 0b05 	add.w	fp, r8, r5
  40358e:	f89b b001 	ldrb.w	fp, [fp, #1]
  403592:	f01b 0f04 	tst.w	fp, #4
  403596:	d001      	beq.n	40359c <_strtol_r+0x88>
  403598:	3d30      	subs	r5, #48	; 0x30
  40359a:	e00b      	b.n	4035b4 <_strtol_r+0xa0>
  40359c:	f01b 0b03 	ands.w	fp, fp, #3
  4035a0:	d01b      	beq.n	4035da <_strtol_r+0xc6>
  4035a2:	f1bb 0f01 	cmp.w	fp, #1
  4035a6:	bf14      	ite	ne
  4035a8:	f04f 0b57 	movne.w	fp, #87	; 0x57
  4035ac:	f04f 0b37 	moveq.w	fp, #55	; 0x37
  4035b0:	ebcb 0505 	rsb	r5, fp, r5
  4035b4:	429d      	cmp	r5, r3
  4035b6:	da10      	bge.n	4035da <_strtol_r+0xc6>
  4035b8:	f1b6 3fff 	cmp.w	r6, #4294967295
  4035bc:	d00a      	beq.n	4035d4 <_strtol_r+0xc0>
  4035be:	4548      	cmp	r0, r9
  4035c0:	d806      	bhi.n	4035d0 <_strtol_r+0xbc>
  4035c2:	d101      	bne.n	4035c8 <_strtol_r+0xb4>
  4035c4:	4555      	cmp	r5, sl
  4035c6:	dc03      	bgt.n	4035d0 <_strtol_r+0xbc>
  4035c8:	fb03 5000 	mla	r0, r3, r0, r5
  4035cc:	2601      	movs	r6, #1
  4035ce:	e001      	b.n	4035d4 <_strtol_r+0xc0>
  4035d0:	f04f 36ff 	mov.w	r6, #4294967295
  4035d4:	f814 5b01 	ldrb.w	r5, [r4], #1
  4035d8:	e7d7      	b.n	40358a <_strtol_r+0x76>
  4035da:	1c73      	adds	r3, r6, #1
  4035dc:	d10c      	bne.n	4035f8 <_strtol_r+0xe4>
  4035de:	2f00      	cmp	r7, #0
  4035e0:	f04f 0322 	mov.w	r3, #34	; 0x22
  4035e4:	bf0c      	ite	eq
  4035e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4035ea:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  4035ee:	f8cc 3000 	str.w	r3, [ip]
  4035f2:	b92a      	cbnz	r2, 403600 <_strtol_r+0xec>
  4035f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035f8:	b107      	cbz	r7, 4035fc <_strtol_r+0xe8>
  4035fa:	4240      	negs	r0, r0
  4035fc:	b142      	cbz	r2, 403610 <_strtol_r+0xfc>
  4035fe:	b106      	cbz	r6, 403602 <_strtol_r+0xee>
  403600:	1e61      	subs	r1, r4, #1
  403602:	6011      	str	r1, [r2, #0]
  403604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403608:	2b00      	cmp	r3, #0
  40360a:	bf08      	it	eq
  40360c:	2308      	moveq	r3, #8
  40360e:	e7b0      	b.n	403572 <_strtol_r+0x5e>
  403610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403614:	200004e8 	.word	0x200004e8

00403618 <strtol>:
  403618:	b530      	push	{r4, r5, lr}
  40361a:	4613      	mov	r3, r2
  40361c:	4a04      	ldr	r2, [pc, #16]	; (403630 <strtol+0x18>)
  40361e:	4605      	mov	r5, r0
  403620:	460c      	mov	r4, r1
  403622:	6810      	ldr	r0, [r2, #0]
  403624:	4629      	mov	r1, r5
  403626:	4622      	mov	r2, r4
  403628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  40362c:	f7ff bf72 	b.w	403514 <_strtol_r>
  403630:	200000b8 	.word	0x200000b8

00403634 <_svfprintf_r>:
  403634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403638:	b0c3      	sub	sp, #268	; 0x10c
  40363a:	468b      	mov	fp, r1
  40363c:	4698      	mov	r8, r3
  40363e:	920b      	str	r2, [sp, #44]	; 0x2c
  403640:	4682      	mov	sl, r0
  403642:	f001 ff2d 	bl	4054a0 <_localeconv_r>
  403646:	6800      	ldr	r0, [r0, #0]
  403648:	9018      	str	r0, [sp, #96]	; 0x60
  40364a:	f7ff ff43 	bl	4034d4 <strlen>
  40364e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403652:	9010      	str	r0, [sp, #64]	; 0x40
  403654:	0619      	lsls	r1, r3, #24
  403656:	d515      	bpl.n	403684 <_svfprintf_r+0x50>
  403658:	f8db 3010 	ldr.w	r3, [fp, #16]
  40365c:	b993      	cbnz	r3, 403684 <_svfprintf_r+0x50>
  40365e:	4650      	mov	r0, sl
  403660:	2140      	movs	r1, #64	; 0x40
  403662:	f001 ff2f 	bl	4054c4 <_malloc_r>
  403666:	f8cb 0000 	str.w	r0, [fp]
  40366a:	f8cb 0010 	str.w	r0, [fp, #16]
  40366e:	b930      	cbnz	r0, 40367e <_svfprintf_r+0x4a>
  403670:	230c      	movs	r3, #12
  403672:	f8ca 3000 	str.w	r3, [sl]
  403676:	f04f 30ff 	mov.w	r0, #4294967295
  40367a:	f000 bf6e 	b.w	40455a <_svfprintf_r+0xf26>
  40367e:	2340      	movs	r3, #64	; 0x40
  403680:	f8cb 3014 	str.w	r3, [fp, #20]
  403684:	2400      	movs	r4, #0
  403686:	2500      	movs	r5, #0
  403688:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  40368c:	2300      	movs	r3, #0
  40368e:	ae32      	add	r6, sp, #200	; 0xc8
  403690:	9625      	str	r6, [sp, #148]	; 0x94
  403692:	9327      	str	r3, [sp, #156]	; 0x9c
  403694:	9326      	str	r3, [sp, #152]	; 0x98
  403696:	9309      	str	r3, [sp, #36]	; 0x24
  403698:	931b      	str	r3, [sp, #108]	; 0x6c
  40369a:	931a      	str	r3, [sp, #104]	; 0x68
  40369c:	930f      	str	r3, [sp, #60]	; 0x3c
  40369e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4036a0:	461c      	mov	r4, r3
  4036a2:	f813 2b01 	ldrb.w	r2, [r3], #1
  4036a6:	b91a      	cbnz	r2, 4036b0 <_svfprintf_r+0x7c>
  4036a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4036aa:	1a25      	subs	r5, r4, r0
  4036ac:	d103      	bne.n	4036b6 <_svfprintf_r+0x82>
  4036ae:	e01b      	b.n	4036e8 <_svfprintf_r+0xb4>
  4036b0:	2a25      	cmp	r2, #37	; 0x25
  4036b2:	d1f5      	bne.n	4036a0 <_svfprintf_r+0x6c>
  4036b4:	e7f8      	b.n	4036a8 <_svfprintf_r+0x74>
  4036b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4036b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4036ba:	442b      	add	r3, r5
  4036bc:	9327      	str	r3, [sp, #156]	; 0x9c
  4036be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4036c0:	e886 0022 	stmia.w	r6, {r1, r5}
  4036c4:	3301      	adds	r3, #1
  4036c6:	2b07      	cmp	r3, #7
  4036c8:	9326      	str	r3, [sp, #152]	; 0x98
  4036ca:	dc01      	bgt.n	4036d0 <_svfprintf_r+0x9c>
  4036cc:	3608      	adds	r6, #8
  4036ce:	e008      	b.n	4036e2 <_svfprintf_r+0xae>
  4036d0:	4650      	mov	r0, sl
  4036d2:	4659      	mov	r1, fp
  4036d4:	aa25      	add	r2, sp, #148	; 0x94
  4036d6:	f002 fef9 	bl	4064cc <__ssprint_r>
  4036da:	2800      	cmp	r0, #0
  4036dc:	f040 8735 	bne.w	40454a <_svfprintf_r+0xf16>
  4036e0:	ae32      	add	r6, sp, #200	; 0xc8
  4036e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4036e4:	442a      	add	r2, r5
  4036e6:	920f      	str	r2, [sp, #60]	; 0x3c
  4036e8:	7823      	ldrb	r3, [r4, #0]
  4036ea:	2b00      	cmp	r3, #0
  4036ec:	f000 8726 	beq.w	40453c <_svfprintf_r+0xf08>
  4036f0:	2300      	movs	r3, #0
  4036f2:	3401      	adds	r4, #1
  4036f4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4036f8:	f04f 39ff 	mov.w	r9, #4294967295
  4036fc:	930e      	str	r3, [sp, #56]	; 0x38
  4036fe:	461f      	mov	r7, r3
  403700:	1c65      	adds	r5, r4, #1
  403702:	7824      	ldrb	r4, [r4, #0]
  403704:	950b      	str	r5, [sp, #44]	; 0x2c
  403706:	9408      	str	r4, [sp, #32]
  403708:	9c08      	ldr	r4, [sp, #32]
  40370a:	f1a4 0220 	sub.w	r2, r4, #32
  40370e:	2a58      	cmp	r2, #88	; 0x58
  403710:	f200 8385 	bhi.w	403e1e <_svfprintf_r+0x7ea>
  403714:	e8df f012 	tbh	[pc, r2, lsl #1]
  403718:	0383006d 	.word	0x0383006d
  40371c:	00710383 	.word	0x00710383
  403720:	03830383 	.word	0x03830383
  403724:	03830383 	.word	0x03830383
  403728:	03830383 	.word	0x03830383
  40372c:	0059005b 	.word	0x0059005b
  403730:	00770383 	.word	0x00770383
  403734:	0383007a 	.word	0x0383007a
  403738:	00a2009f 	.word	0x00a2009f
  40373c:	00a200a2 	.word	0x00a200a2
  403740:	00a200a2 	.word	0x00a200a2
  403744:	00a200a2 	.word	0x00a200a2
  403748:	00a200a2 	.word	0x00a200a2
  40374c:	03830383 	.word	0x03830383
  403750:	03830383 	.word	0x03830383
  403754:	03830383 	.word	0x03830383
  403758:	03830383 	.word	0x03830383
  40375c:	03830383 	.word	0x03830383
  403760:	00fe00d3 	.word	0x00fe00d3
  403764:	00fe0383 	.word	0x00fe0383
  403768:	03830383 	.word	0x03830383
  40376c:	03830383 	.word	0x03830383
  403770:	038300b6 	.word	0x038300b6
  403774:	026b0383 	.word	0x026b0383
  403778:	03830383 	.word	0x03830383
  40377c:	03830383 	.word	0x03830383
  403780:	02bb0383 	.word	0x02bb0383
  403784:	03830383 	.word	0x03830383
  403788:	03830068 	.word	0x03830068
  40378c:	03830383 	.word	0x03830383
  403790:	03830383 	.word	0x03830383
  403794:	03830383 	.word	0x03830383
  403798:	03830383 	.word	0x03830383
  40379c:	00c90383 	.word	0x00c90383
  4037a0:	00fe0065 	.word	0x00fe0065
  4037a4:	00fe00fe 	.word	0x00fe00fe
  4037a8:	006500b9 	.word	0x006500b9
  4037ac:	03830383 	.word	0x03830383
  4037b0:	038300bc 	.word	0x038300bc
  4037b4:	026d024c 	.word	0x026d024c
  4037b8:	00c6028c 	.word	0x00c6028c
  4037bc:	029e0383 	.word	0x029e0383
  4037c0:	02bd0383 	.word	0x02bd0383
  4037c4:	03830383 	.word	0x03830383
  4037c8:	02d8      	.short	0x02d8
  4037ca:	232b      	movs	r3, #43	; 0x2b
  4037cc:	e007      	b.n	4037de <_svfprintf_r+0x1aa>
  4037ce:	f8d8 5000 	ldr.w	r5, [r8]
  4037d2:	f108 0204 	add.w	r2, r8, #4
  4037d6:	2d00      	cmp	r5, #0
  4037d8:	950e      	str	r5, [sp, #56]	; 0x38
  4037da:	db11      	blt.n	403800 <_svfprintf_r+0x1cc>
  4037dc:	4690      	mov	r8, r2
  4037de:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4037e0:	e78e      	b.n	403700 <_svfprintf_r+0xcc>
  4037e2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4037e6:	e06e      	b.n	4038c6 <_svfprintf_r+0x292>
  4037e8:	4cab      	ldr	r4, [pc, #684]	; (403a98 <_svfprintf_r+0x464>)
  4037ea:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4037ee:	941b      	str	r4, [sp, #108]	; 0x6c
  4037f0:	e26e      	b.n	403cd0 <_svfprintf_r+0x69c>
  4037f2:	2b00      	cmp	r3, #0
  4037f4:	bf08      	it	eq
  4037f6:	2320      	moveq	r3, #32
  4037f8:	e7f1      	b.n	4037de <_svfprintf_r+0x1aa>
  4037fa:	f047 0701 	orr.w	r7, r7, #1
  4037fe:	e7ee      	b.n	4037de <_svfprintf_r+0x1aa>
  403800:	426d      	negs	r5, r5
  403802:	950e      	str	r5, [sp, #56]	; 0x38
  403804:	4690      	mov	r8, r2
  403806:	f047 0704 	orr.w	r7, r7, #4
  40380a:	e7e8      	b.n	4037de <_svfprintf_r+0x1aa>
  40380c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40380e:	7825      	ldrb	r5, [r4, #0]
  403810:	1c62      	adds	r2, r4, #1
  403812:	2d2a      	cmp	r5, #42	; 0x2a
  403814:	9508      	str	r5, [sp, #32]
  403816:	d002      	beq.n	40381e <_svfprintf_r+0x1ea>
  403818:	f04f 0900 	mov.w	r9, #0
  40381c:	e00b      	b.n	403836 <_svfprintf_r+0x202>
  40381e:	f8d8 9000 	ldr.w	r9, [r8]
  403822:	f108 0104 	add.w	r1, r8, #4
  403826:	f1b9 0f00 	cmp.w	r9, #0
  40382a:	4688      	mov	r8, r1
  40382c:	920b      	str	r2, [sp, #44]	; 0x2c
  40382e:	dad6      	bge.n	4037de <_svfprintf_r+0x1aa>
  403830:	f04f 39ff 	mov.w	r9, #4294967295
  403834:	e7d3      	b.n	4037de <_svfprintf_r+0x1aa>
  403836:	9d08      	ldr	r5, [sp, #32]
  403838:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  40383c:	2909      	cmp	r1, #9
  40383e:	d806      	bhi.n	40384e <_svfprintf_r+0x21a>
  403840:	f812 4b01 	ldrb.w	r4, [r2], #1
  403844:	200a      	movs	r0, #10
  403846:	fb00 1909 	mla	r9, r0, r9, r1
  40384a:	9408      	str	r4, [sp, #32]
  40384c:	e7f3      	b.n	403836 <_svfprintf_r+0x202>
  40384e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
  403852:	920b      	str	r2, [sp, #44]	; 0x2c
  403854:	e758      	b.n	403708 <_svfprintf_r+0xd4>
  403856:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  40385a:	e7c0      	b.n	4037de <_svfprintf_r+0x1aa>
  40385c:	2400      	movs	r4, #0
  40385e:	940e      	str	r4, [sp, #56]	; 0x38
  403860:	9d08      	ldr	r5, [sp, #32]
  403862:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403864:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
  403868:	210a      	movs	r1, #10
  40386a:	fb01 2404 	mla	r4, r1, r4, r2
  40386e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403870:	940e      	str	r4, [sp, #56]	; 0x38
  403872:	f812 5b01 	ldrb.w	r5, [r2], #1
  403876:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  40387a:	2909      	cmp	r1, #9
  40387c:	9508      	str	r5, [sp, #32]
  40387e:	d8e8      	bhi.n	403852 <_svfprintf_r+0x21e>
  403880:	920b      	str	r2, [sp, #44]	; 0x2c
  403882:	e7ed      	b.n	403860 <_svfprintf_r+0x22c>
  403884:	f047 0708 	orr.w	r7, r7, #8
  403888:	e7a9      	b.n	4037de <_svfprintf_r+0x1aa>
  40388a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40388e:	e7a6      	b.n	4037de <_svfprintf_r+0x1aa>
  403890:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403892:	7822      	ldrb	r2, [r4, #0]
  403894:	2a6c      	cmp	r2, #108	; 0x6c
  403896:	d102      	bne.n	40389e <_svfprintf_r+0x26a>
  403898:	3401      	adds	r4, #1
  40389a:	940b      	str	r4, [sp, #44]	; 0x2c
  40389c:	e002      	b.n	4038a4 <_svfprintf_r+0x270>
  40389e:	f047 0710 	orr.w	r7, r7, #16
  4038a2:	e79c      	b.n	4037de <_svfprintf_r+0x1aa>
  4038a4:	f047 0720 	orr.w	r7, r7, #32
  4038a8:	e799      	b.n	4037de <_svfprintf_r+0x1aa>
  4038aa:	f8d8 3000 	ldr.w	r3, [r8]
  4038ae:	2500      	movs	r5, #0
  4038b0:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  4038b4:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  4038b8:	f108 0804 	add.w	r8, r8, #4
  4038bc:	e2ba      	b.n	403e34 <_svfprintf_r+0x800>
  4038be:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4038c2:	f047 0710 	orr.w	r7, r7, #16
  4038c6:	06ba      	lsls	r2, r7, #26
  4038c8:	d508      	bpl.n	4038dc <_svfprintf_r+0x2a8>
  4038ca:	f108 0807 	add.w	r8, r8, #7
  4038ce:	f028 0307 	bic.w	r3, r8, #7
  4038d2:	f103 0808 	add.w	r8, r3, #8
  4038d6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4038da:	e00f      	b.n	4038fc <_svfprintf_r+0x2c8>
  4038dc:	f017 0f10 	tst.w	r7, #16
  4038e0:	f108 0304 	add.w	r3, r8, #4
  4038e4:	d002      	beq.n	4038ec <_svfprintf_r+0x2b8>
  4038e6:	f8d8 4000 	ldr.w	r4, [r8]
  4038ea:	e005      	b.n	4038f8 <_svfprintf_r+0x2c4>
  4038ec:	f8d8 4000 	ldr.w	r4, [r8]
  4038f0:	f017 0f40 	tst.w	r7, #64	; 0x40
  4038f4:	bf18      	it	ne
  4038f6:	b224      	sxthne	r4, r4
  4038f8:	17e5      	asrs	r5, r4, #31
  4038fa:	4698      	mov	r8, r3
  4038fc:	2c00      	cmp	r4, #0
  4038fe:	f175 0100 	sbcs.w	r1, r5, #0
  403902:	f280 8210 	bge.w	403d26 <_svfprintf_r+0x6f2>
  403906:	232d      	movs	r3, #45	; 0x2d
  403908:	4264      	negs	r4, r4
  40390a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  40390e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403912:	e208      	b.n	403d26 <_svfprintf_r+0x6f2>
  403914:	9c08      	ldr	r4, [sp, #32]
  403916:	f108 0807 	add.w	r8, r8, #7
  40391a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40391e:	970a      	str	r7, [sp, #40]	; 0x28
  403920:	f028 0307 	bic.w	r3, r8, #7
  403924:	9411      	str	r4, [sp, #68]	; 0x44
  403926:	e9d3 4500 	ldrd	r4, r5, [r3]
  40392a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  40392e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403932:	f103 0808 	add.w	r8, r3, #8
  403936:	f002 fd8d 	bl	406454 <__fpclassifyd>
  40393a:	2801      	cmp	r0, #1
  40393c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403940:	d114      	bne.n	40396c <_svfprintf_r+0x338>
  403942:	2200      	movs	r2, #0
  403944:	2300      	movs	r3, #0
  403946:	f003 fed1 	bl	4076ec <__aeabi_dcmplt>
  40394a:	b110      	cbz	r0, 403952 <_svfprintf_r+0x31e>
  40394c:	232d      	movs	r3, #45	; 0x2d
  40394e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403952:	9d08      	ldr	r5, [sp, #32]
  403954:	4b51      	ldr	r3, [pc, #324]	; (403a9c <_svfprintf_r+0x468>)
  403956:	4a52      	ldr	r2, [pc, #328]	; (403aa0 <_svfprintf_r+0x46c>)
  403958:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40395c:	2d47      	cmp	r5, #71	; 0x47
  40395e:	bfd8      	it	le
  403960:	461a      	movle	r2, r3
  403962:	9207      	str	r2, [sp, #28]
  403964:	f04f 0903 	mov.w	r9, #3
  403968:	2500      	movs	r5, #0
  40396a:	e26a      	b.n	403e42 <_svfprintf_r+0x80e>
  40396c:	f002 fd72 	bl	406454 <__fpclassifyd>
  403970:	b958      	cbnz	r0, 40398a <_svfprintf_r+0x356>
  403972:	4b4c      	ldr	r3, [pc, #304]	; (403aa4 <_svfprintf_r+0x470>)
  403974:	4a4c      	ldr	r2, [pc, #304]	; (403aa8 <_svfprintf_r+0x474>)
  403976:	9c08      	ldr	r4, [sp, #32]
  403978:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  40397c:	2c47      	cmp	r4, #71	; 0x47
  40397e:	bfd8      	it	le
  403980:	461a      	movle	r2, r3
  403982:	9207      	str	r2, [sp, #28]
  403984:	f04f 0903 	mov.w	r9, #3
  403988:	e25a      	b.n	403e40 <_svfprintf_r+0x80c>
  40398a:	f1b9 3fff 	cmp.w	r9, #4294967295
  40398e:	d00a      	beq.n	4039a6 <_svfprintf_r+0x372>
  403990:	9d08      	ldr	r5, [sp, #32]
  403992:	f025 0320 	bic.w	r3, r5, #32
  403996:	2b47      	cmp	r3, #71	; 0x47
  403998:	d107      	bne.n	4039aa <_svfprintf_r+0x376>
  40399a:	f1b9 0f00 	cmp.w	r9, #0
  40399e:	bf08      	it	eq
  4039a0:	f04f 0901 	moveq.w	r9, #1
  4039a4:	e001      	b.n	4039aa <_svfprintf_r+0x376>
  4039a6:	f04f 0906 	mov.w	r9, #6
  4039aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4039ae:	2b00      	cmp	r3, #0
  4039b0:	f447 7780 	orr.w	r7, r7, #256	; 0x100
  4039b4:	da08      	bge.n	4039c8 <_svfprintf_r+0x394>
  4039b6:	990d      	ldr	r1, [sp, #52]	; 0x34
  4039b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4039ba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4039be:	242d      	movs	r4, #45	; 0x2d
  4039c0:	9012      	str	r0, [sp, #72]	; 0x48
  4039c2:	9113      	str	r1, [sp, #76]	; 0x4c
  4039c4:	9419      	str	r4, [sp, #100]	; 0x64
  4039c6:	e005      	b.n	4039d4 <_svfprintf_r+0x3a0>
  4039c8:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  4039cc:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  4039d0:	2500      	movs	r5, #0
  4039d2:	9519      	str	r5, [sp, #100]	; 0x64
  4039d4:	9d08      	ldr	r5, [sp, #32]
  4039d6:	f025 0420 	bic.w	r4, r5, #32
  4039da:	2c46      	cmp	r4, #70	; 0x46
  4039dc:	d004      	beq.n	4039e8 <_svfprintf_r+0x3b4>
  4039de:	2c45      	cmp	r4, #69	; 0x45
  4039e0:	d105      	bne.n	4039ee <_svfprintf_r+0x3ba>
  4039e2:	f109 0501 	add.w	r5, r9, #1
  4039e6:	e003      	b.n	4039f0 <_svfprintf_r+0x3bc>
  4039e8:	464d      	mov	r5, r9
  4039ea:	2303      	movs	r3, #3
  4039ec:	e001      	b.n	4039f2 <_svfprintf_r+0x3be>
  4039ee:	464d      	mov	r5, r9
  4039f0:	2302      	movs	r3, #2
  4039f2:	e88d 0028 	stmia.w	sp, {r3, r5}
  4039f6:	ab1f      	add	r3, sp, #124	; 0x7c
  4039f8:	9302      	str	r3, [sp, #8]
  4039fa:	ab20      	add	r3, sp, #128	; 0x80
  4039fc:	9303      	str	r3, [sp, #12]
  4039fe:	ab23      	add	r3, sp, #140	; 0x8c
  403a00:	9304      	str	r3, [sp, #16]
  403a02:	4650      	mov	r0, sl
  403a04:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  403a08:	f000 fe4d 	bl	4046a6 <_dtoa_r>
  403a0c:	2c47      	cmp	r4, #71	; 0x47
  403a0e:	9007      	str	r0, [sp, #28]
  403a10:	d10a      	bne.n	403a28 <_svfprintf_r+0x3f4>
  403a12:	980a      	ldr	r0, [sp, #40]	; 0x28
  403a14:	07c3      	lsls	r3, r0, #31
  403a16:	d407      	bmi.n	403a28 <_svfprintf_r+0x3f4>
  403a18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403a1a:	9d07      	ldr	r5, [sp, #28]
  403a1c:	2c47      	cmp	r4, #71	; 0x47
  403a1e:	ebc5 0303 	rsb	r3, r5, r3
  403a22:	9309      	str	r3, [sp, #36]	; 0x24
  403a24:	d142      	bne.n	403aac <_svfprintf_r+0x478>
  403a26:	e02d      	b.n	403a84 <_svfprintf_r+0x450>
  403a28:	f8dd c01c 	ldr.w	ip, [sp, #28]
  403a2c:	2c46      	cmp	r4, #70	; 0x46
  403a2e:	44ac      	add	ip, r5
  403a30:	d113      	bne.n	403a5a <_svfprintf_r+0x426>
  403a32:	9807      	ldr	r0, [sp, #28]
  403a34:	7803      	ldrb	r3, [r0, #0]
  403a36:	2b30      	cmp	r3, #48	; 0x30
  403a38:	d10d      	bne.n	403a56 <_svfprintf_r+0x422>
  403a3a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403a3e:	2200      	movs	r2, #0
  403a40:	2300      	movs	r3, #0
  403a42:	f8cd c018 	str.w	ip, [sp, #24]
  403a46:	f003 fe47 	bl	4076d8 <__aeabi_dcmpeq>
  403a4a:	f8dd c018 	ldr.w	ip, [sp, #24]
  403a4e:	b910      	cbnz	r0, 403a56 <_svfprintf_r+0x422>
  403a50:	f1c5 0501 	rsb	r5, r5, #1
  403a54:	951f      	str	r5, [sp, #124]	; 0x7c
  403a56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403a58:	449c      	add	ip, r3
  403a5a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403a5e:	2200      	movs	r2, #0
  403a60:	2300      	movs	r3, #0
  403a62:	f8cd c018 	str.w	ip, [sp, #24]
  403a66:	f003 fe37 	bl	4076d8 <__aeabi_dcmpeq>
  403a6a:	f8dd c018 	ldr.w	ip, [sp, #24]
  403a6e:	b108      	cbz	r0, 403a74 <_svfprintf_r+0x440>
  403a70:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
  403a74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403a76:	4563      	cmp	r3, ip
  403a78:	d2ce      	bcs.n	403a18 <_svfprintf_r+0x3e4>
  403a7a:	1c5a      	adds	r2, r3, #1
  403a7c:	9223      	str	r2, [sp, #140]	; 0x8c
  403a7e:	2230      	movs	r2, #48	; 0x30
  403a80:	701a      	strb	r2, [r3, #0]
  403a82:	e7f7      	b.n	403a74 <_svfprintf_r+0x440>
  403a84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403a86:	1cdc      	adds	r4, r3, #3
  403a88:	db01      	blt.n	403a8e <_svfprintf_r+0x45a>
  403a8a:	454b      	cmp	r3, r9
  403a8c:	dd6e      	ble.n	403b6c <_svfprintf_r+0x538>
  403a8e:	9c08      	ldr	r4, [sp, #32]
  403a90:	3c02      	subs	r4, #2
  403a92:	9408      	str	r4, [sp, #32]
  403a94:	e00d      	b.n	403ab2 <_svfprintf_r+0x47e>
  403a96:	bf00      	nop
  403a98:	00407ea2 	.word	0x00407ea2
  403a9c:	00407e92 	.word	0x00407e92
  403aa0:	00407e96 	.word	0x00407e96
  403aa4:	00407e9a 	.word	0x00407e9a
  403aa8:	00407e9e 	.word	0x00407e9e
  403aac:	9d08      	ldr	r5, [sp, #32]
  403aae:	2d65      	cmp	r5, #101	; 0x65
  403ab0:	dc43      	bgt.n	403b3a <_svfprintf_r+0x506>
  403ab2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403ab4:	9c08      	ldr	r4, [sp, #32]
  403ab6:	3b01      	subs	r3, #1
  403ab8:	2b00      	cmp	r3, #0
  403aba:	931f      	str	r3, [sp, #124]	; 0x7c
  403abc:	bfba      	itte	lt
  403abe:	425b      	neglt	r3, r3
  403ac0:	222d      	movlt	r2, #45	; 0x2d
  403ac2:	222b      	movge	r2, #43	; 0x2b
  403ac4:	2b09      	cmp	r3, #9
  403ac6:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  403aca:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  403ace:	dd1d      	ble.n	403b0c <_svfprintf_r+0x4d8>
  403ad0:	f10d 0292 	add.w	r2, sp, #146	; 0x92
  403ad4:	200a      	movs	r0, #10
  403ad6:	fb93 f1f0 	sdiv	r1, r3, r0
  403ada:	fb00 3311 	mls	r3, r0, r1, r3
  403ade:	2909      	cmp	r1, #9
  403ae0:	f103 0330 	add.w	r3, r3, #48	; 0x30
  403ae4:	4614      	mov	r4, r2
  403ae6:	f802 3901 	strb.w	r3, [r2], #-1
  403aea:	460b      	mov	r3, r1
  403aec:	dcf2      	bgt.n	403ad4 <_svfprintf_r+0x4a0>
  403aee:	f101 0330 	add.w	r3, r1, #48	; 0x30
  403af2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  403af6:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403afa:	f10d 0293 	add.w	r2, sp, #147	; 0x93
  403afe:	4294      	cmp	r4, r2
  403b00:	d20b      	bcs.n	403b1a <_svfprintf_r+0x4e6>
  403b02:	f814 2b01 	ldrb.w	r2, [r4], #1
  403b06:	f803 2b01 	strb.w	r2, [r3], #1
  403b0a:	e7f6      	b.n	403afa <_svfprintf_r+0x4c6>
  403b0c:	2230      	movs	r2, #48	; 0x30
  403b0e:	4413      	add	r3, r2
  403b10:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  403b14:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  403b18:	ab22      	add	r3, sp, #136	; 0x88
  403b1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403b1c:	aa21      	add	r2, sp, #132	; 0x84
  403b1e:	1a9a      	subs	r2, r3, r2
  403b20:	4691      	mov	r9, r2
  403b22:	2d01      	cmp	r5, #1
  403b24:	921a      	str	r2, [sp, #104]	; 0x68
  403b26:	44a9      	add	r9, r5
  403b28:	dc03      	bgt.n	403b32 <_svfprintf_r+0x4fe>
  403b2a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403b2c:	f015 0401 	ands.w	r4, r5, #1
  403b30:	d037      	beq.n	403ba2 <_svfprintf_r+0x56e>
  403b32:	f109 0901 	add.w	r9, r9, #1
  403b36:	2400      	movs	r4, #0
  403b38:	e033      	b.n	403ba2 <_svfprintf_r+0x56e>
  403b3a:	9c08      	ldr	r4, [sp, #32]
  403b3c:	2c66      	cmp	r4, #102	; 0x66
  403b3e:	d115      	bne.n	403b6c <_svfprintf_r+0x538>
  403b40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403b42:	2b00      	cmp	r3, #0
  403b44:	dd09      	ble.n	403b5a <_svfprintf_r+0x526>
  403b46:	f1b9 0f00 	cmp.w	r9, #0
  403b4a:	d102      	bne.n	403b52 <_svfprintf_r+0x51e>
  403b4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403b4e:	07e8      	lsls	r0, r5, #31
  403b50:	d523      	bpl.n	403b9a <_svfprintf_r+0x566>
  403b52:	f109 0901 	add.w	r9, r9, #1
  403b56:	444b      	add	r3, r9
  403b58:	e01f      	b.n	403b9a <_svfprintf_r+0x566>
  403b5a:	f1b9 0f00 	cmp.w	r9, #0
  403b5e:	d102      	bne.n	403b66 <_svfprintf_r+0x532>
  403b60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403b62:	07e1      	lsls	r1, r4, #31
  403b64:	d515      	bpl.n	403b92 <_svfprintf_r+0x55e>
  403b66:	f109 0302 	add.w	r3, r9, #2
  403b6a:	e016      	b.n	403b9a <_svfprintf_r+0x566>
  403b6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403b6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403b70:	42ab      	cmp	r3, r5
  403b72:	db04      	blt.n	403b7e <_svfprintf_r+0x54a>
  403b74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403b76:	07e2      	lsls	r2, r4, #31
  403b78:	d50d      	bpl.n	403b96 <_svfprintf_r+0x562>
  403b7a:	3301      	adds	r3, #1
  403b7c:	e006      	b.n	403b8c <_svfprintf_r+0x558>
  403b7e:	2b00      	cmp	r3, #0
  403b80:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403b82:	bfd4      	ite	le
  403b84:	f1c3 0302 	rsble	r3, r3, #2
  403b88:	2301      	movgt	r3, #1
  403b8a:	4423      	add	r3, r4
  403b8c:	2567      	movs	r5, #103	; 0x67
  403b8e:	9511      	str	r5, [sp, #68]	; 0x44
  403b90:	e003      	b.n	403b9a <_svfprintf_r+0x566>
  403b92:	2301      	movs	r3, #1
  403b94:	e001      	b.n	403b9a <_svfprintf_r+0x566>
  403b96:	2467      	movs	r4, #103	; 0x67
  403b98:	9411      	str	r4, [sp, #68]	; 0x44
  403b9a:	9d11      	ldr	r5, [sp, #68]	; 0x44
  403b9c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  403b9e:	9508      	str	r5, [sp, #32]
  403ba0:	4699      	mov	r9, r3
  403ba2:	9d19      	ldr	r5, [sp, #100]	; 0x64
  403ba4:	b115      	cbz	r5, 403bac <_svfprintf_r+0x578>
  403ba6:	232d      	movs	r3, #45	; 0x2d
  403ba8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403bac:	2500      	movs	r5, #0
  403bae:	e149      	b.n	403e44 <_svfprintf_r+0x810>
  403bb0:	f017 0f20 	tst.w	r7, #32
  403bb4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403bb8:	f108 0104 	add.w	r1, r8, #4
  403bbc:	d008      	beq.n	403bd0 <_svfprintf_r+0x59c>
  403bbe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403bc0:	f8d8 0000 	ldr.w	r0, [r8]
  403bc4:	17e5      	asrs	r5, r4, #31
  403bc6:	4622      	mov	r2, r4
  403bc8:	462b      	mov	r3, r5
  403bca:	e9c0 2300 	strd	r2, r3, [r0]
  403bce:	e00c      	b.n	403bea <_svfprintf_r+0x5b6>
  403bd0:	06fb      	lsls	r3, r7, #27
  403bd2:	d406      	bmi.n	403be2 <_svfprintf_r+0x5ae>
  403bd4:	067d      	lsls	r5, r7, #25
  403bd6:	d504      	bpl.n	403be2 <_svfprintf_r+0x5ae>
  403bd8:	f8d8 3000 	ldr.w	r3, [r8]
  403bdc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403bde:	801c      	strh	r4, [r3, #0]
  403be0:	e003      	b.n	403bea <_svfprintf_r+0x5b6>
  403be2:	f8d8 3000 	ldr.w	r3, [r8]
  403be6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403be8:	601d      	str	r5, [r3, #0]
  403bea:	4688      	mov	r8, r1
  403bec:	e557      	b.n	40369e <_svfprintf_r+0x6a>
  403bee:	f047 0710 	orr.w	r7, r7, #16
  403bf2:	f017 0320 	ands.w	r3, r7, #32
  403bf6:	d009      	beq.n	403c0c <_svfprintf_r+0x5d8>
  403bf8:	f108 0807 	add.w	r8, r8, #7
  403bfc:	f028 0307 	bic.w	r3, r8, #7
  403c00:	f103 0808 	add.w	r8, r3, #8
  403c04:	e9d3 4500 	ldrd	r4, r5, [r3]
  403c08:	2300      	movs	r3, #0
  403c0a:	e088      	b.n	403d1e <_svfprintf_r+0x6ea>
  403c0c:	f017 0110 	ands.w	r1, r7, #16
  403c10:	f108 0204 	add.w	r2, r8, #4
  403c14:	d107      	bne.n	403c26 <_svfprintf_r+0x5f2>
  403c16:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  403c1a:	d004      	beq.n	403c26 <_svfprintf_r+0x5f2>
  403c1c:	f8b8 4000 	ldrh.w	r4, [r8]
  403c20:	2500      	movs	r5, #0
  403c22:	4690      	mov	r8, r2
  403c24:	e7f0      	b.n	403c08 <_svfprintf_r+0x5d4>
  403c26:	f8d8 4000 	ldr.w	r4, [r8]
  403c2a:	2500      	movs	r5, #0
  403c2c:	4690      	mov	r8, r2
  403c2e:	e076      	b.n	403d1e <_svfprintf_r+0x6ea>
  403c30:	48a9      	ldr	r0, [pc, #676]	; (403ed8 <_svfprintf_r+0x8a4>)
  403c32:	2330      	movs	r3, #48	; 0x30
  403c34:	2278      	movs	r2, #120	; 0x78
  403c36:	f8d8 4000 	ldr.w	r4, [r8]
  403c3a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403c3e:	2500      	movs	r5, #0
  403c40:	f047 0702 	orr.w	r7, r7, #2
  403c44:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403c48:	f108 0804 	add.w	r8, r8, #4
  403c4c:	901b      	str	r0, [sp, #108]	; 0x6c
  403c4e:	2302      	movs	r3, #2
  403c50:	9208      	str	r2, [sp, #32]
  403c52:	e064      	b.n	403d1e <_svfprintf_r+0x6ea>
  403c54:	4643      	mov	r3, r8
  403c56:	2500      	movs	r5, #0
  403c58:	681b      	ldr	r3, [r3, #0]
  403c5a:	45a9      	cmp	r9, r5
  403c5c:	9307      	str	r3, [sp, #28]
  403c5e:	f108 0804 	add.w	r8, r8, #4
  403c62:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  403c66:	db0d      	blt.n	403c84 <_svfprintf_r+0x650>
  403c68:	4618      	mov	r0, r3
  403c6a:	4629      	mov	r1, r5
  403c6c:	464a      	mov	r2, r9
  403c6e:	f001 fe31 	bl	4058d4 <memchr>
  403c72:	2800      	cmp	r0, #0
  403c74:	f000 80e4 	beq.w	403e40 <_svfprintf_r+0x80c>
  403c78:	9c07      	ldr	r4, [sp, #28]
  403c7a:	1b00      	subs	r0, r0, r4
  403c7c:	4548      	cmp	r0, r9
  403c7e:	bfb8      	it	lt
  403c80:	4681      	movlt	r9, r0
  403c82:	e0de      	b.n	403e42 <_svfprintf_r+0x80e>
  403c84:	9807      	ldr	r0, [sp, #28]
  403c86:	f7ff fc25 	bl	4034d4 <strlen>
  403c8a:	4681      	mov	r9, r0
  403c8c:	e0d9      	b.n	403e42 <_svfprintf_r+0x80e>
  403c8e:	f047 0710 	orr.w	r7, r7, #16
  403c92:	06bc      	lsls	r4, r7, #26
  403c94:	d508      	bpl.n	403ca8 <_svfprintf_r+0x674>
  403c96:	f108 0807 	add.w	r8, r8, #7
  403c9a:	f028 0307 	bic.w	r3, r8, #7
  403c9e:	f103 0808 	add.w	r8, r3, #8
  403ca2:	e9d3 4500 	ldrd	r4, r5, [r3]
  403ca6:	e00d      	b.n	403cc4 <_svfprintf_r+0x690>
  403ca8:	f017 0f10 	tst.w	r7, #16
  403cac:	f108 0304 	add.w	r3, r8, #4
  403cb0:	d104      	bne.n	403cbc <_svfprintf_r+0x688>
  403cb2:	0678      	lsls	r0, r7, #25
  403cb4:	d502      	bpl.n	403cbc <_svfprintf_r+0x688>
  403cb6:	f8b8 4000 	ldrh.w	r4, [r8]
  403cba:	e001      	b.n	403cc0 <_svfprintf_r+0x68c>
  403cbc:	f8d8 4000 	ldr.w	r4, [r8]
  403cc0:	2500      	movs	r5, #0
  403cc2:	4698      	mov	r8, r3
  403cc4:	2301      	movs	r3, #1
  403cc6:	e02a      	b.n	403d1e <_svfprintf_r+0x6ea>
  403cc8:	4d83      	ldr	r5, [pc, #524]	; (403ed8 <_svfprintf_r+0x8a4>)
  403cca:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403cce:	951b      	str	r5, [sp, #108]	; 0x6c
  403cd0:	06b9      	lsls	r1, r7, #26
  403cd2:	d508      	bpl.n	403ce6 <_svfprintf_r+0x6b2>
  403cd4:	f108 0807 	add.w	r8, r8, #7
  403cd8:	f028 0307 	bic.w	r3, r8, #7
  403cdc:	f103 0808 	add.w	r8, r3, #8
  403ce0:	e9d3 4500 	ldrd	r4, r5, [r3]
  403ce4:	e00d      	b.n	403d02 <_svfprintf_r+0x6ce>
  403ce6:	f017 0f10 	tst.w	r7, #16
  403cea:	f108 0304 	add.w	r3, r8, #4
  403cee:	d104      	bne.n	403cfa <_svfprintf_r+0x6c6>
  403cf0:	067a      	lsls	r2, r7, #25
  403cf2:	d502      	bpl.n	403cfa <_svfprintf_r+0x6c6>
  403cf4:	f8b8 4000 	ldrh.w	r4, [r8]
  403cf8:	e001      	b.n	403cfe <_svfprintf_r+0x6ca>
  403cfa:	f8d8 4000 	ldr.w	r4, [r8]
  403cfe:	2500      	movs	r5, #0
  403d00:	4698      	mov	r8, r3
  403d02:	07fb      	lsls	r3, r7, #31
  403d04:	d50a      	bpl.n	403d1c <_svfprintf_r+0x6e8>
  403d06:	ea54 0005 	orrs.w	r0, r4, r5
  403d0a:	d007      	beq.n	403d1c <_svfprintf_r+0x6e8>
  403d0c:	9908      	ldr	r1, [sp, #32]
  403d0e:	2330      	movs	r3, #48	; 0x30
  403d10:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403d14:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
  403d18:	f047 0702 	orr.w	r7, r7, #2
  403d1c:	2302      	movs	r3, #2
  403d1e:	2200      	movs	r2, #0
  403d20:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  403d24:	e000      	b.n	403d28 <_svfprintf_r+0x6f4>
  403d26:	2301      	movs	r3, #1
  403d28:	f1b9 0f00 	cmp.w	r9, #0
  403d2c:	bfa8      	it	ge
  403d2e:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  403d32:	ea54 0205 	orrs.w	r2, r4, r5
  403d36:	d102      	bne.n	403d3e <_svfprintf_r+0x70a>
  403d38:	f1b9 0f00 	cmp.w	r9, #0
  403d3c:	d05a      	beq.n	403df4 <_svfprintf_r+0x7c0>
  403d3e:	2b01      	cmp	r3, #1
  403d40:	d01f      	beq.n	403d82 <_svfprintf_r+0x74e>
  403d42:	2b02      	cmp	r3, #2
  403d44:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
  403d48:	d041      	beq.n	403dce <_svfprintf_r+0x79a>
  403d4a:	08e1      	lsrs	r1, r4, #3
  403d4c:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
  403d50:	08e9      	lsrs	r1, r5, #3
  403d52:	f004 0207 	and.w	r2, r4, #7
  403d56:	9014      	str	r0, [sp, #80]	; 0x50
  403d58:	9115      	str	r1, [sp, #84]	; 0x54
  403d5a:	3230      	adds	r2, #48	; 0x30
  403d5c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  403d60:	ea54 0005 	orrs.w	r0, r4, r5
  403d64:	9307      	str	r3, [sp, #28]
  403d66:	701a      	strb	r2, [r3, #0]
  403d68:	f103 33ff 	add.w	r3, r3, #4294967295
  403d6c:	d1ed      	bne.n	403d4a <_svfprintf_r+0x716>
  403d6e:	07f8      	lsls	r0, r7, #31
  403d70:	9907      	ldr	r1, [sp, #28]
  403d72:	d54c      	bpl.n	403e0e <_svfprintf_r+0x7da>
  403d74:	2a30      	cmp	r2, #48	; 0x30
  403d76:	d04a      	beq.n	403e0e <_svfprintf_r+0x7da>
  403d78:	9307      	str	r3, [sp, #28]
  403d7a:	2330      	movs	r3, #48	; 0x30
  403d7c:	f801 3c01 	strb.w	r3, [r1, #-1]
  403d80:	e045      	b.n	403e0e <_svfprintf_r+0x7da>
  403d82:	2d00      	cmp	r5, #0
  403d84:	bf08      	it	eq
  403d86:	2c0a      	cmpeq	r4, #10
  403d88:	d205      	bcs.n	403d96 <_svfprintf_r+0x762>
  403d8a:	3430      	adds	r4, #48	; 0x30
  403d8c:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
  403d90:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
  403d94:	e03a      	b.n	403e0c <_svfprintf_r+0x7d8>
  403d96:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
  403d9a:	900a      	str	r0, [sp, #40]	; 0x28
  403d9c:	990a      	ldr	r1, [sp, #40]	; 0x28
  403d9e:	4620      	mov	r0, r4
  403da0:	9107      	str	r1, [sp, #28]
  403da2:	220a      	movs	r2, #10
  403da4:	4629      	mov	r1, r5
  403da6:	2300      	movs	r3, #0
  403da8:	f003 fcf0 	bl	40778c <__aeabi_uldivmod>
  403dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403dae:	3230      	adds	r2, #48	; 0x30
  403db0:	f803 2901 	strb.w	r2, [r3], #-1
  403db4:	930a      	str	r3, [sp, #40]	; 0x28
  403db6:	4620      	mov	r0, r4
  403db8:	4629      	mov	r1, r5
  403dba:	220a      	movs	r2, #10
  403dbc:	2300      	movs	r3, #0
  403dbe:	f003 fce5 	bl	40778c <__aeabi_uldivmod>
  403dc2:	4604      	mov	r4, r0
  403dc4:	460d      	mov	r5, r1
  403dc6:	ea54 0005 	orrs.w	r0, r4, r5
  403dca:	d1e7      	bne.n	403d9c <_svfprintf_r+0x768>
  403dcc:	e01f      	b.n	403e0e <_svfprintf_r+0x7da>
  403dce:	991b      	ldr	r1, [sp, #108]	; 0x6c
  403dd0:	f004 020f 	and.w	r2, r4, #15
  403dd4:	5c8a      	ldrb	r2, [r1, r2]
  403dd6:	9307      	str	r3, [sp, #28]
  403dd8:	f803 2901 	strb.w	r2, [r3], #-1
  403ddc:	0922      	lsrs	r2, r4, #4
  403dde:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  403de2:	0929      	lsrs	r1, r5, #4
  403de4:	9016      	str	r0, [sp, #88]	; 0x58
  403de6:	9117      	str	r1, [sp, #92]	; 0x5c
  403de8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  403dec:	ea54 0205 	orrs.w	r2, r4, r5
  403df0:	d1ed      	bne.n	403dce <_svfprintf_r+0x79a>
  403df2:	e00c      	b.n	403e0e <_svfprintf_r+0x7da>
  403df4:	b933      	cbnz	r3, 403e04 <_svfprintf_r+0x7d0>
  403df6:	07fb      	lsls	r3, r7, #31
  403df8:	d507      	bpl.n	403e0a <_svfprintf_r+0x7d6>
  403dfa:	ac42      	add	r4, sp, #264	; 0x108
  403dfc:	2330      	movs	r3, #48	; 0x30
  403dfe:	f804 3d41 	strb.w	r3, [r4, #-65]!
  403e02:	e003      	b.n	403e0c <_svfprintf_r+0x7d8>
  403e04:	ad32      	add	r5, sp, #200	; 0xc8
  403e06:	9507      	str	r5, [sp, #28]
  403e08:	e001      	b.n	403e0e <_svfprintf_r+0x7da>
  403e0a:	ac32      	add	r4, sp, #200	; 0xc8
  403e0c:	9407      	str	r4, [sp, #28]
  403e0e:	9c07      	ldr	r4, [sp, #28]
  403e10:	464d      	mov	r5, r9
  403e12:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403e16:	ebc4 0909 	rsb	r9, r4, r9
  403e1a:	2400      	movs	r4, #0
  403e1c:	e012      	b.n	403e44 <_svfprintf_r+0x810>
  403e1e:	9d08      	ldr	r5, [sp, #32]
  403e20:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403e24:	2d00      	cmp	r5, #0
  403e26:	f000 8389 	beq.w	40453c <_svfprintf_r+0xf08>
  403e2a:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
  403e2e:	2500      	movs	r5, #0
  403e30:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  403e34:	a828      	add	r0, sp, #160	; 0xa0
  403e36:	f04f 0901 	mov.w	r9, #1
  403e3a:	462c      	mov	r4, r5
  403e3c:	9007      	str	r0, [sp, #28]
  403e3e:	e001      	b.n	403e44 <_svfprintf_r+0x810>
  403e40:	4605      	mov	r5, r0
  403e42:	462c      	mov	r4, r5
  403e44:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  403e48:	45a9      	cmp	r9, r5
  403e4a:	bfac      	ite	ge
  403e4c:	4649      	movge	r1, r9
  403e4e:	4629      	movlt	r1, r5
  403e50:	910a      	str	r1, [sp, #40]	; 0x28
  403e52:	b10b      	cbz	r3, 403e58 <_svfprintf_r+0x824>
  403e54:	3101      	adds	r1, #1
  403e56:	910a      	str	r1, [sp, #40]	; 0x28
  403e58:	f017 0302 	ands.w	r3, r7, #2
  403e5c:	9311      	str	r3, [sp, #68]	; 0x44
  403e5e:	d002      	beq.n	403e66 <_svfprintf_r+0x832>
  403e60:	980a      	ldr	r0, [sp, #40]	; 0x28
  403e62:	3002      	adds	r0, #2
  403e64:	900a      	str	r0, [sp, #40]	; 0x28
  403e66:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  403e6a:	9319      	str	r3, [sp, #100]	; 0x64
  403e6c:	d141      	bne.n	403ef2 <_svfprintf_r+0x8be>
  403e6e:	980e      	ldr	r0, [sp, #56]	; 0x38
  403e70:	990a      	ldr	r1, [sp, #40]	; 0x28
  403e72:	ebc1 0c00 	rsb	ip, r1, r0
  403e76:	f1bc 0f00 	cmp.w	ip, #0
  403e7a:	dd3a      	ble.n	403ef2 <_svfprintf_r+0x8be>
  403e7c:	4b17      	ldr	r3, [pc, #92]	; (403edc <_svfprintf_r+0x8a8>)
  403e7e:	f1bc 0f10 	cmp.w	ip, #16
  403e82:	6033      	str	r3, [r6, #0]
  403e84:	dd1b      	ble.n	403ebe <_svfprintf_r+0x88a>
  403e86:	2310      	movs	r3, #16
  403e88:	6073      	str	r3, [r6, #4]
  403e8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403e8c:	3310      	adds	r3, #16
  403e8e:	9327      	str	r3, [sp, #156]	; 0x9c
  403e90:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e92:	3301      	adds	r3, #1
  403e94:	2b07      	cmp	r3, #7
  403e96:	9326      	str	r3, [sp, #152]	; 0x98
  403e98:	dc01      	bgt.n	403e9e <_svfprintf_r+0x86a>
  403e9a:	3608      	adds	r6, #8
  403e9c:	e00c      	b.n	403eb8 <_svfprintf_r+0x884>
  403e9e:	4650      	mov	r0, sl
  403ea0:	4659      	mov	r1, fp
  403ea2:	aa25      	add	r2, sp, #148	; 0x94
  403ea4:	f8cd c018 	str.w	ip, [sp, #24]
  403ea8:	f002 fb10 	bl	4064cc <__ssprint_r>
  403eac:	f8dd c018 	ldr.w	ip, [sp, #24]
  403eb0:	2800      	cmp	r0, #0
  403eb2:	f040 834a 	bne.w	40454a <_svfprintf_r+0xf16>
  403eb6:	ae32      	add	r6, sp, #200	; 0xc8
  403eb8:	f1ac 0c10 	sub.w	ip, ip, #16
  403ebc:	e7de      	b.n	403e7c <_svfprintf_r+0x848>
  403ebe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403ec0:	f8c6 c004 	str.w	ip, [r6, #4]
  403ec4:	4463      	add	r3, ip
  403ec6:	9327      	str	r3, [sp, #156]	; 0x9c
  403ec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403eca:	3301      	adds	r3, #1
  403ecc:	2b07      	cmp	r3, #7
  403ece:	9326      	str	r3, [sp, #152]	; 0x98
  403ed0:	dc06      	bgt.n	403ee0 <_svfprintf_r+0x8ac>
  403ed2:	3608      	adds	r6, #8
  403ed4:	e00d      	b.n	403ef2 <_svfprintf_r+0x8be>
  403ed6:	bf00      	nop
  403ed8:	00407eb3 	.word	0x00407eb3
  403edc:	00407e72 	.word	0x00407e72
  403ee0:	4650      	mov	r0, sl
  403ee2:	4659      	mov	r1, fp
  403ee4:	aa25      	add	r2, sp, #148	; 0x94
  403ee6:	f002 faf1 	bl	4064cc <__ssprint_r>
  403eea:	2800      	cmp	r0, #0
  403eec:	f040 832d 	bne.w	40454a <_svfprintf_r+0xf16>
  403ef0:	ae32      	add	r6, sp, #200	; 0xc8
  403ef2:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  403ef6:	b1bb      	cbz	r3, 403f28 <_svfprintf_r+0x8f4>
  403ef8:	f10d 0377 	add.w	r3, sp, #119	; 0x77
  403efc:	6033      	str	r3, [r6, #0]
  403efe:	2301      	movs	r3, #1
  403f00:	6073      	str	r3, [r6, #4]
  403f02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403f04:	3301      	adds	r3, #1
  403f06:	9327      	str	r3, [sp, #156]	; 0x9c
  403f08:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f0a:	3301      	adds	r3, #1
  403f0c:	2b07      	cmp	r3, #7
  403f0e:	9326      	str	r3, [sp, #152]	; 0x98
  403f10:	dc01      	bgt.n	403f16 <_svfprintf_r+0x8e2>
  403f12:	3608      	adds	r6, #8
  403f14:	e008      	b.n	403f28 <_svfprintf_r+0x8f4>
  403f16:	4650      	mov	r0, sl
  403f18:	4659      	mov	r1, fp
  403f1a:	aa25      	add	r2, sp, #148	; 0x94
  403f1c:	f002 fad6 	bl	4064cc <__ssprint_r>
  403f20:	2800      	cmp	r0, #0
  403f22:	f040 8312 	bne.w	40454a <_svfprintf_r+0xf16>
  403f26:	ae32      	add	r6, sp, #200	; 0xc8
  403f28:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403f2a:	b1b3      	cbz	r3, 403f5a <_svfprintf_r+0x926>
  403f2c:	ab1e      	add	r3, sp, #120	; 0x78
  403f2e:	6033      	str	r3, [r6, #0]
  403f30:	2302      	movs	r3, #2
  403f32:	6073      	str	r3, [r6, #4]
  403f34:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403f36:	3302      	adds	r3, #2
  403f38:	9327      	str	r3, [sp, #156]	; 0x9c
  403f3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f3c:	3301      	adds	r3, #1
  403f3e:	2b07      	cmp	r3, #7
  403f40:	9326      	str	r3, [sp, #152]	; 0x98
  403f42:	dc01      	bgt.n	403f48 <_svfprintf_r+0x914>
  403f44:	3608      	adds	r6, #8
  403f46:	e008      	b.n	403f5a <_svfprintf_r+0x926>
  403f48:	4650      	mov	r0, sl
  403f4a:	4659      	mov	r1, fp
  403f4c:	aa25      	add	r2, sp, #148	; 0x94
  403f4e:	f002 fabd 	bl	4064cc <__ssprint_r>
  403f52:	2800      	cmp	r0, #0
  403f54:	f040 82f9 	bne.w	40454a <_svfprintf_r+0xf16>
  403f58:	ae32      	add	r6, sp, #200	; 0xc8
  403f5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403f5c:	2b80      	cmp	r3, #128	; 0x80
  403f5e:	d13c      	bne.n	403fda <_svfprintf_r+0x9a6>
  403f60:	980e      	ldr	r0, [sp, #56]	; 0x38
  403f62:	990a      	ldr	r1, [sp, #40]	; 0x28
  403f64:	ebc1 0c00 	rsb	ip, r1, r0
  403f68:	f1bc 0f00 	cmp.w	ip, #0
  403f6c:	dd35      	ble.n	403fda <_svfprintf_r+0x9a6>
  403f6e:	4b9c      	ldr	r3, [pc, #624]	; (4041e0 <_svfprintf_r+0xbac>)
  403f70:	f1bc 0f10 	cmp.w	ip, #16
  403f74:	6033      	str	r3, [r6, #0]
  403f76:	dd1b      	ble.n	403fb0 <_svfprintf_r+0x97c>
  403f78:	2310      	movs	r3, #16
  403f7a:	6073      	str	r3, [r6, #4]
  403f7c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403f7e:	3310      	adds	r3, #16
  403f80:	9327      	str	r3, [sp, #156]	; 0x9c
  403f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f84:	3301      	adds	r3, #1
  403f86:	2b07      	cmp	r3, #7
  403f88:	9326      	str	r3, [sp, #152]	; 0x98
  403f8a:	dc01      	bgt.n	403f90 <_svfprintf_r+0x95c>
  403f8c:	3608      	adds	r6, #8
  403f8e:	e00c      	b.n	403faa <_svfprintf_r+0x976>
  403f90:	4650      	mov	r0, sl
  403f92:	4659      	mov	r1, fp
  403f94:	aa25      	add	r2, sp, #148	; 0x94
  403f96:	f8cd c018 	str.w	ip, [sp, #24]
  403f9a:	f002 fa97 	bl	4064cc <__ssprint_r>
  403f9e:	f8dd c018 	ldr.w	ip, [sp, #24]
  403fa2:	2800      	cmp	r0, #0
  403fa4:	f040 82d1 	bne.w	40454a <_svfprintf_r+0xf16>
  403fa8:	ae32      	add	r6, sp, #200	; 0xc8
  403faa:	f1ac 0c10 	sub.w	ip, ip, #16
  403fae:	e7de      	b.n	403f6e <_svfprintf_r+0x93a>
  403fb0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403fb2:	f8c6 c004 	str.w	ip, [r6, #4]
  403fb6:	4463      	add	r3, ip
  403fb8:	9327      	str	r3, [sp, #156]	; 0x9c
  403fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fbc:	3301      	adds	r3, #1
  403fbe:	2b07      	cmp	r3, #7
  403fc0:	9326      	str	r3, [sp, #152]	; 0x98
  403fc2:	dc01      	bgt.n	403fc8 <_svfprintf_r+0x994>
  403fc4:	3608      	adds	r6, #8
  403fc6:	e008      	b.n	403fda <_svfprintf_r+0x9a6>
  403fc8:	4650      	mov	r0, sl
  403fca:	4659      	mov	r1, fp
  403fcc:	aa25      	add	r2, sp, #148	; 0x94
  403fce:	f002 fa7d 	bl	4064cc <__ssprint_r>
  403fd2:	2800      	cmp	r0, #0
  403fd4:	f040 82b9 	bne.w	40454a <_svfprintf_r+0xf16>
  403fd8:	ae32      	add	r6, sp, #200	; 0xc8
  403fda:	ebc9 0505 	rsb	r5, r9, r5
  403fde:	2d00      	cmp	r5, #0
  403fe0:	dd2e      	ble.n	404040 <_svfprintf_r+0xa0c>
  403fe2:	4b7f      	ldr	r3, [pc, #508]	; (4041e0 <_svfprintf_r+0xbac>)
  403fe4:	2d10      	cmp	r5, #16
  403fe6:	6033      	str	r3, [r6, #0]
  403fe8:	dd16      	ble.n	404018 <_svfprintf_r+0x9e4>
  403fea:	2310      	movs	r3, #16
  403fec:	6073      	str	r3, [r6, #4]
  403fee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403ff0:	3310      	adds	r3, #16
  403ff2:	9327      	str	r3, [sp, #156]	; 0x9c
  403ff4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ff6:	3301      	adds	r3, #1
  403ff8:	2b07      	cmp	r3, #7
  403ffa:	9326      	str	r3, [sp, #152]	; 0x98
  403ffc:	dc01      	bgt.n	404002 <_svfprintf_r+0x9ce>
  403ffe:	3608      	adds	r6, #8
  404000:	e008      	b.n	404014 <_svfprintf_r+0x9e0>
  404002:	4650      	mov	r0, sl
  404004:	4659      	mov	r1, fp
  404006:	aa25      	add	r2, sp, #148	; 0x94
  404008:	f002 fa60 	bl	4064cc <__ssprint_r>
  40400c:	2800      	cmp	r0, #0
  40400e:	f040 829c 	bne.w	40454a <_svfprintf_r+0xf16>
  404012:	ae32      	add	r6, sp, #200	; 0xc8
  404014:	3d10      	subs	r5, #16
  404016:	e7e4      	b.n	403fe2 <_svfprintf_r+0x9ae>
  404018:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40401a:	6075      	str	r5, [r6, #4]
  40401c:	441d      	add	r5, r3
  40401e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404020:	9527      	str	r5, [sp, #156]	; 0x9c
  404022:	3301      	adds	r3, #1
  404024:	2b07      	cmp	r3, #7
  404026:	9326      	str	r3, [sp, #152]	; 0x98
  404028:	dc01      	bgt.n	40402e <_svfprintf_r+0x9fa>
  40402a:	3608      	adds	r6, #8
  40402c:	e008      	b.n	404040 <_svfprintf_r+0xa0c>
  40402e:	4650      	mov	r0, sl
  404030:	4659      	mov	r1, fp
  404032:	aa25      	add	r2, sp, #148	; 0x94
  404034:	f002 fa4a 	bl	4064cc <__ssprint_r>
  404038:	2800      	cmp	r0, #0
  40403a:	f040 8286 	bne.w	40454a <_svfprintf_r+0xf16>
  40403e:	ae32      	add	r6, sp, #200	; 0xc8
  404040:	05fd      	lsls	r5, r7, #23
  404042:	d405      	bmi.n	404050 <_svfprintf_r+0xa1c>
  404044:	9c07      	ldr	r4, [sp, #28]
  404046:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404048:	e886 0210 	stmia.w	r6, {r4, r9}
  40404c:	444b      	add	r3, r9
  40404e:	e0da      	b.n	404206 <_svfprintf_r+0xbd2>
  404050:	9d08      	ldr	r5, [sp, #32]
  404052:	2d65      	cmp	r5, #101	; 0x65
  404054:	f340 81a7 	ble.w	4043a6 <_svfprintf_r+0xd72>
  404058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40405c:	2200      	movs	r2, #0
  40405e:	2300      	movs	r3, #0
  404060:	f003 fb3a 	bl	4076d8 <__aeabi_dcmpeq>
  404064:	2800      	cmp	r0, #0
  404066:	d059      	beq.n	40411c <_svfprintf_r+0xae8>
  404068:	4b5e      	ldr	r3, [pc, #376]	; (4041e4 <_svfprintf_r+0xbb0>)
  40406a:	6033      	str	r3, [r6, #0]
  40406c:	2301      	movs	r3, #1
  40406e:	6073      	str	r3, [r6, #4]
  404070:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404072:	3301      	adds	r3, #1
  404074:	9327      	str	r3, [sp, #156]	; 0x9c
  404076:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404078:	3301      	adds	r3, #1
  40407a:	2b07      	cmp	r3, #7
  40407c:	9326      	str	r3, [sp, #152]	; 0x98
  40407e:	dc01      	bgt.n	404084 <_svfprintf_r+0xa50>
  404080:	3608      	adds	r6, #8
  404082:	e008      	b.n	404096 <_svfprintf_r+0xa62>
  404084:	4650      	mov	r0, sl
  404086:	4659      	mov	r1, fp
  404088:	aa25      	add	r2, sp, #148	; 0x94
  40408a:	f002 fa1f 	bl	4064cc <__ssprint_r>
  40408e:	2800      	cmp	r0, #0
  404090:	f040 825b 	bne.w	40454a <_svfprintf_r+0xf16>
  404094:	ae32      	add	r6, sp, #200	; 0xc8
  404096:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404098:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40409a:	42a3      	cmp	r3, r4
  40409c:	db02      	blt.n	4040a4 <_svfprintf_r+0xa70>
  40409e:	07fc      	lsls	r4, r7, #31
  4040a0:	f140 8202 	bpl.w	4044a8 <_svfprintf_r+0xe74>
  4040a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4040a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4040a8:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4040aa:	4423      	add	r3, r4
  4040ac:	9327      	str	r3, [sp, #156]	; 0x9c
  4040ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040b0:	6035      	str	r5, [r6, #0]
  4040b2:	3301      	adds	r3, #1
  4040b4:	2b07      	cmp	r3, #7
  4040b6:	6074      	str	r4, [r6, #4]
  4040b8:	9326      	str	r3, [sp, #152]	; 0x98
  4040ba:	dc01      	bgt.n	4040c0 <_svfprintf_r+0xa8c>
  4040bc:	3608      	adds	r6, #8
  4040be:	e008      	b.n	4040d2 <_svfprintf_r+0xa9e>
  4040c0:	4650      	mov	r0, sl
  4040c2:	4659      	mov	r1, fp
  4040c4:	aa25      	add	r2, sp, #148	; 0x94
  4040c6:	f002 fa01 	bl	4064cc <__ssprint_r>
  4040ca:	2800      	cmp	r0, #0
  4040cc:	f040 823d 	bne.w	40454a <_svfprintf_r+0xf16>
  4040d0:	ae32      	add	r6, sp, #200	; 0xc8
  4040d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4040d4:	1e6c      	subs	r4, r5, #1
  4040d6:	2c00      	cmp	r4, #0
  4040d8:	f340 81e6 	ble.w	4044a8 <_svfprintf_r+0xe74>
  4040dc:	4b40      	ldr	r3, [pc, #256]	; (4041e0 <_svfprintf_r+0xbac>)
  4040de:	2c10      	cmp	r4, #16
  4040e0:	6033      	str	r3, [r6, #0]
  4040e2:	dd16      	ble.n	404112 <_svfprintf_r+0xade>
  4040e4:	2310      	movs	r3, #16
  4040e6:	6073      	str	r3, [r6, #4]
  4040e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4040ea:	3310      	adds	r3, #16
  4040ec:	9327      	str	r3, [sp, #156]	; 0x9c
  4040ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040f0:	3301      	adds	r3, #1
  4040f2:	2b07      	cmp	r3, #7
  4040f4:	9326      	str	r3, [sp, #152]	; 0x98
  4040f6:	dc01      	bgt.n	4040fc <_svfprintf_r+0xac8>
  4040f8:	3608      	adds	r6, #8
  4040fa:	e008      	b.n	40410e <_svfprintf_r+0xada>
  4040fc:	4650      	mov	r0, sl
  4040fe:	4659      	mov	r1, fp
  404100:	aa25      	add	r2, sp, #148	; 0x94
  404102:	f002 f9e3 	bl	4064cc <__ssprint_r>
  404106:	2800      	cmp	r0, #0
  404108:	f040 821f 	bne.w	40454a <_svfprintf_r+0xf16>
  40410c:	ae32      	add	r6, sp, #200	; 0xc8
  40410e:	3c10      	subs	r4, #16
  404110:	e7e4      	b.n	4040dc <_svfprintf_r+0xaa8>
  404112:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404114:	6074      	str	r4, [r6, #4]
  404116:	441c      	add	r4, r3
  404118:	9427      	str	r4, [sp, #156]	; 0x9c
  40411a:	e134      	b.n	404386 <_svfprintf_r+0xd52>
  40411c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40411e:	2b00      	cmp	r3, #0
  404120:	dc73      	bgt.n	40420a <_svfprintf_r+0xbd6>
  404122:	4b30      	ldr	r3, [pc, #192]	; (4041e4 <_svfprintf_r+0xbb0>)
  404124:	6033      	str	r3, [r6, #0]
  404126:	2301      	movs	r3, #1
  404128:	6073      	str	r3, [r6, #4]
  40412a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40412c:	3301      	adds	r3, #1
  40412e:	9327      	str	r3, [sp, #156]	; 0x9c
  404130:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404132:	3301      	adds	r3, #1
  404134:	2b07      	cmp	r3, #7
  404136:	9326      	str	r3, [sp, #152]	; 0x98
  404138:	dc01      	bgt.n	40413e <_svfprintf_r+0xb0a>
  40413a:	3608      	adds	r6, #8
  40413c:	e008      	b.n	404150 <_svfprintf_r+0xb1c>
  40413e:	4650      	mov	r0, sl
  404140:	4659      	mov	r1, fp
  404142:	aa25      	add	r2, sp, #148	; 0x94
  404144:	f002 f9c2 	bl	4064cc <__ssprint_r>
  404148:	2800      	cmp	r0, #0
  40414a:	f040 81fe 	bne.w	40454a <_svfprintf_r+0xf16>
  40414e:	ae32      	add	r6, sp, #200	; 0xc8
  404150:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404152:	b923      	cbnz	r3, 40415e <_svfprintf_r+0xb2a>
  404154:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404156:	b914      	cbnz	r4, 40415e <_svfprintf_r+0xb2a>
  404158:	07f8      	lsls	r0, r7, #31
  40415a:	f140 81a5 	bpl.w	4044a8 <_svfprintf_r+0xe74>
  40415e:	9c10      	ldr	r4, [sp, #64]	; 0x40
  404160:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404162:	9d18      	ldr	r5, [sp, #96]	; 0x60
  404164:	4423      	add	r3, r4
  404166:	9327      	str	r3, [sp, #156]	; 0x9c
  404168:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40416a:	6035      	str	r5, [r6, #0]
  40416c:	3301      	adds	r3, #1
  40416e:	2b07      	cmp	r3, #7
  404170:	6074      	str	r4, [r6, #4]
  404172:	9326      	str	r3, [sp, #152]	; 0x98
  404174:	dc01      	bgt.n	40417a <_svfprintf_r+0xb46>
  404176:	3608      	adds	r6, #8
  404178:	e008      	b.n	40418c <_svfprintf_r+0xb58>
  40417a:	4650      	mov	r0, sl
  40417c:	4659      	mov	r1, fp
  40417e:	aa25      	add	r2, sp, #148	; 0x94
  404180:	f002 f9a4 	bl	4064cc <__ssprint_r>
  404184:	2800      	cmp	r0, #0
  404186:	f040 81e0 	bne.w	40454a <_svfprintf_r+0xf16>
  40418a:	ae32      	add	r6, sp, #200	; 0xc8
  40418c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  40418e:	4264      	negs	r4, r4
  404190:	2c00      	cmp	r4, #0
  404192:	dd32      	ble.n	4041fa <_svfprintf_r+0xbc6>
  404194:	4b12      	ldr	r3, [pc, #72]	; (4041e0 <_svfprintf_r+0xbac>)
  404196:	2c10      	cmp	r4, #16
  404198:	6033      	str	r3, [r6, #0]
  40419a:	dd16      	ble.n	4041ca <_svfprintf_r+0xb96>
  40419c:	2310      	movs	r3, #16
  40419e:	6073      	str	r3, [r6, #4]
  4041a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4041a2:	3310      	adds	r3, #16
  4041a4:	9327      	str	r3, [sp, #156]	; 0x9c
  4041a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041a8:	3301      	adds	r3, #1
  4041aa:	2b07      	cmp	r3, #7
  4041ac:	9326      	str	r3, [sp, #152]	; 0x98
  4041ae:	dc01      	bgt.n	4041b4 <_svfprintf_r+0xb80>
  4041b0:	3608      	adds	r6, #8
  4041b2:	e008      	b.n	4041c6 <_svfprintf_r+0xb92>
  4041b4:	4650      	mov	r0, sl
  4041b6:	4659      	mov	r1, fp
  4041b8:	aa25      	add	r2, sp, #148	; 0x94
  4041ba:	f002 f987 	bl	4064cc <__ssprint_r>
  4041be:	2800      	cmp	r0, #0
  4041c0:	f040 81c3 	bne.w	40454a <_svfprintf_r+0xf16>
  4041c4:	ae32      	add	r6, sp, #200	; 0xc8
  4041c6:	3c10      	subs	r4, #16
  4041c8:	e7e4      	b.n	404194 <_svfprintf_r+0xb60>
  4041ca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4041cc:	6074      	str	r4, [r6, #4]
  4041ce:	441c      	add	r4, r3
  4041d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4041d4:	3301      	adds	r3, #1
  4041d6:	2b07      	cmp	r3, #7
  4041d8:	9326      	str	r3, [sp, #152]	; 0x98
  4041da:	dc05      	bgt.n	4041e8 <_svfprintf_r+0xbb4>
  4041dc:	3608      	adds	r6, #8
  4041de:	e00c      	b.n	4041fa <_svfprintf_r+0xbc6>
  4041e0:	00407e82 	.word	0x00407e82
  4041e4:	00407ec4 	.word	0x00407ec4
  4041e8:	4650      	mov	r0, sl
  4041ea:	4659      	mov	r1, fp
  4041ec:	aa25      	add	r2, sp, #148	; 0x94
  4041ee:	f002 f96d 	bl	4064cc <__ssprint_r>
  4041f2:	2800      	cmp	r0, #0
  4041f4:	f040 81a9 	bne.w	40454a <_svfprintf_r+0xf16>
  4041f8:	ae32      	add	r6, sp, #200	; 0xc8
  4041fa:	9d07      	ldr	r5, [sp, #28]
  4041fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4041fe:	6035      	str	r5, [r6, #0]
  404200:	6074      	str	r4, [r6, #4]
  404202:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404204:	4423      	add	r3, r4
  404206:	9327      	str	r3, [sp, #156]	; 0x9c
  404208:	e0bd      	b.n	404386 <_svfprintf_r+0xd52>
  40420a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40420c:	9d07      	ldr	r5, [sp, #28]
  40420e:	4681      	mov	r9, r0
  404210:	45a1      	cmp	r9, r4
  404212:	bfa8      	it	ge
  404214:	46a1      	movge	r9, r4
  404216:	f1b9 0f00 	cmp.w	r9, #0
  40421a:	4405      	add	r5, r0
  40421c:	dd15      	ble.n	40424a <_svfprintf_r+0xc16>
  40421e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404220:	9907      	ldr	r1, [sp, #28]
  404222:	444b      	add	r3, r9
  404224:	9327      	str	r3, [sp, #156]	; 0x9c
  404226:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404228:	e886 0202 	stmia.w	r6, {r1, r9}
  40422c:	3301      	adds	r3, #1
  40422e:	2b07      	cmp	r3, #7
  404230:	9326      	str	r3, [sp, #152]	; 0x98
  404232:	dc01      	bgt.n	404238 <_svfprintf_r+0xc04>
  404234:	3608      	adds	r6, #8
  404236:	e008      	b.n	40424a <_svfprintf_r+0xc16>
  404238:	4650      	mov	r0, sl
  40423a:	4659      	mov	r1, fp
  40423c:	aa25      	add	r2, sp, #148	; 0x94
  40423e:	f002 f945 	bl	4064cc <__ssprint_r>
  404242:	2800      	cmp	r0, #0
  404244:	f040 8181 	bne.w	40454a <_svfprintf_r+0xf16>
  404248:	ae32      	add	r6, sp, #200	; 0xc8
  40424a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  40424e:	ebc9 0904 	rsb	r9, r9, r4
  404252:	f1b9 0f00 	cmp.w	r9, #0
  404256:	dd31      	ble.n	4042bc <_svfprintf_r+0xc88>
  404258:	4b9a      	ldr	r3, [pc, #616]	; (4044c4 <_svfprintf_r+0xe90>)
  40425a:	f1b9 0f10 	cmp.w	r9, #16
  40425e:	6033      	str	r3, [r6, #0]
  404260:	dd17      	ble.n	404292 <_svfprintf_r+0xc5e>
  404262:	2310      	movs	r3, #16
  404264:	6073      	str	r3, [r6, #4]
  404266:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404268:	3310      	adds	r3, #16
  40426a:	9327      	str	r3, [sp, #156]	; 0x9c
  40426c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40426e:	3301      	adds	r3, #1
  404270:	2b07      	cmp	r3, #7
  404272:	9326      	str	r3, [sp, #152]	; 0x98
  404274:	dc01      	bgt.n	40427a <_svfprintf_r+0xc46>
  404276:	3608      	adds	r6, #8
  404278:	e008      	b.n	40428c <_svfprintf_r+0xc58>
  40427a:	4650      	mov	r0, sl
  40427c:	4659      	mov	r1, fp
  40427e:	aa25      	add	r2, sp, #148	; 0x94
  404280:	f002 f924 	bl	4064cc <__ssprint_r>
  404284:	2800      	cmp	r0, #0
  404286:	f040 8160 	bne.w	40454a <_svfprintf_r+0xf16>
  40428a:	ae32      	add	r6, sp, #200	; 0xc8
  40428c:	f1a9 0910 	sub.w	r9, r9, #16
  404290:	e7e2      	b.n	404258 <_svfprintf_r+0xc24>
  404292:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404294:	f8c6 9004 	str.w	r9, [r6, #4]
  404298:	444b      	add	r3, r9
  40429a:	9327      	str	r3, [sp, #156]	; 0x9c
  40429c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40429e:	3301      	adds	r3, #1
  4042a0:	2b07      	cmp	r3, #7
  4042a2:	9326      	str	r3, [sp, #152]	; 0x98
  4042a4:	dc01      	bgt.n	4042aa <_svfprintf_r+0xc76>
  4042a6:	3608      	adds	r6, #8
  4042a8:	e008      	b.n	4042bc <_svfprintf_r+0xc88>
  4042aa:	4650      	mov	r0, sl
  4042ac:	4659      	mov	r1, fp
  4042ae:	aa25      	add	r2, sp, #148	; 0x94
  4042b0:	f002 f90c 	bl	4064cc <__ssprint_r>
  4042b4:	2800      	cmp	r0, #0
  4042b6:	f040 8148 	bne.w	40454a <_svfprintf_r+0xf16>
  4042ba:	ae32      	add	r6, sp, #200	; 0xc8
  4042bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4042be:	9809      	ldr	r0, [sp, #36]	; 0x24
  4042c0:	9a07      	ldr	r2, [sp, #28]
  4042c2:	4283      	cmp	r3, r0
  4042c4:	4414      	add	r4, r2
  4042c6:	db01      	blt.n	4042cc <_svfprintf_r+0xc98>
  4042c8:	07f9      	lsls	r1, r7, #31
  4042ca:	d516      	bpl.n	4042fa <_svfprintf_r+0xcc6>
  4042cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4042ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4042d0:	9918      	ldr	r1, [sp, #96]	; 0x60
  4042d2:	4413      	add	r3, r2
  4042d4:	9327      	str	r3, [sp, #156]	; 0x9c
  4042d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042d8:	6031      	str	r1, [r6, #0]
  4042da:	3301      	adds	r3, #1
  4042dc:	2b07      	cmp	r3, #7
  4042de:	6072      	str	r2, [r6, #4]
  4042e0:	9326      	str	r3, [sp, #152]	; 0x98
  4042e2:	dc01      	bgt.n	4042e8 <_svfprintf_r+0xcb4>
  4042e4:	3608      	adds	r6, #8
  4042e6:	e008      	b.n	4042fa <_svfprintf_r+0xcc6>
  4042e8:	4650      	mov	r0, sl
  4042ea:	4659      	mov	r1, fp
  4042ec:	aa25      	add	r2, sp, #148	; 0x94
  4042ee:	f002 f8ed 	bl	4064cc <__ssprint_r>
  4042f2:	2800      	cmp	r0, #0
  4042f4:	f040 8129 	bne.w	40454a <_svfprintf_r+0xf16>
  4042f8:	ae32      	add	r6, sp, #200	; 0xc8
  4042fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4042fc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4042fe:	1b2d      	subs	r5, r5, r4
  404300:	1ac3      	subs	r3, r0, r3
  404302:	429d      	cmp	r5, r3
  404304:	bfa8      	it	ge
  404306:	461d      	movge	r5, r3
  404308:	2d00      	cmp	r5, #0
  40430a:	dd14      	ble.n	404336 <_svfprintf_r+0xd02>
  40430c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40430e:	e886 0030 	stmia.w	r6, {r4, r5}
  404312:	442b      	add	r3, r5
  404314:	9327      	str	r3, [sp, #156]	; 0x9c
  404316:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404318:	3301      	adds	r3, #1
  40431a:	2b07      	cmp	r3, #7
  40431c:	9326      	str	r3, [sp, #152]	; 0x98
  40431e:	dc01      	bgt.n	404324 <_svfprintf_r+0xcf0>
  404320:	3608      	adds	r6, #8
  404322:	e008      	b.n	404336 <_svfprintf_r+0xd02>
  404324:	4650      	mov	r0, sl
  404326:	4659      	mov	r1, fp
  404328:	aa25      	add	r2, sp, #148	; 0x94
  40432a:	f002 f8cf 	bl	4064cc <__ssprint_r>
  40432e:	2800      	cmp	r0, #0
  404330:	f040 810b 	bne.w	40454a <_svfprintf_r+0xf16>
  404334:	ae32      	add	r6, sp, #200	; 0xc8
  404336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404338:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40433a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  40433e:	1ae3      	subs	r3, r4, r3
  404340:	1b5d      	subs	r5, r3, r5
  404342:	2d00      	cmp	r5, #0
  404344:	f340 80b0 	ble.w	4044a8 <_svfprintf_r+0xe74>
  404348:	4b5e      	ldr	r3, [pc, #376]	; (4044c4 <_svfprintf_r+0xe90>)
  40434a:	2d10      	cmp	r5, #16
  40434c:	6033      	str	r3, [r6, #0]
  40434e:	dd16      	ble.n	40437e <_svfprintf_r+0xd4a>
  404350:	2310      	movs	r3, #16
  404352:	6073      	str	r3, [r6, #4]
  404354:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404356:	3310      	adds	r3, #16
  404358:	9327      	str	r3, [sp, #156]	; 0x9c
  40435a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40435c:	3301      	adds	r3, #1
  40435e:	2b07      	cmp	r3, #7
  404360:	9326      	str	r3, [sp, #152]	; 0x98
  404362:	dc01      	bgt.n	404368 <_svfprintf_r+0xd34>
  404364:	3608      	adds	r6, #8
  404366:	e008      	b.n	40437a <_svfprintf_r+0xd46>
  404368:	4650      	mov	r0, sl
  40436a:	4659      	mov	r1, fp
  40436c:	aa25      	add	r2, sp, #148	; 0x94
  40436e:	f002 f8ad 	bl	4064cc <__ssprint_r>
  404372:	2800      	cmp	r0, #0
  404374:	f040 80e9 	bne.w	40454a <_svfprintf_r+0xf16>
  404378:	ae32      	add	r6, sp, #200	; 0xc8
  40437a:	3d10      	subs	r5, #16
  40437c:	e7e4      	b.n	404348 <_svfprintf_r+0xd14>
  40437e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404380:	6075      	str	r5, [r6, #4]
  404382:	441d      	add	r5, r3
  404384:	9527      	str	r5, [sp, #156]	; 0x9c
  404386:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404388:	3301      	adds	r3, #1
  40438a:	2b07      	cmp	r3, #7
  40438c:	9326      	str	r3, [sp, #152]	; 0x98
  40438e:	f340 808a 	ble.w	4044a6 <_svfprintf_r+0xe72>
  404392:	4650      	mov	r0, sl
  404394:	4659      	mov	r1, fp
  404396:	aa25      	add	r2, sp, #148	; 0x94
  404398:	f002 f898 	bl	4064cc <__ssprint_r>
  40439c:	2800      	cmp	r0, #0
  40439e:	f040 80d4 	bne.w	40454a <_svfprintf_r+0xf16>
  4043a2:	ae32      	add	r6, sp, #200	; 0xc8
  4043a4:	e080      	b.n	4044a8 <_svfprintf_r+0xe74>
  4043a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4043a8:	2d01      	cmp	r5, #1
  4043aa:	dc01      	bgt.n	4043b0 <_svfprintf_r+0xd7c>
  4043ac:	07fa      	lsls	r2, r7, #31
  4043ae:	d56d      	bpl.n	40448c <_svfprintf_r+0xe58>
  4043b0:	2301      	movs	r3, #1
  4043b2:	6073      	str	r3, [r6, #4]
  4043b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4043b6:	9c07      	ldr	r4, [sp, #28]
  4043b8:	3301      	adds	r3, #1
  4043ba:	9327      	str	r3, [sp, #156]	; 0x9c
  4043bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043be:	6034      	str	r4, [r6, #0]
  4043c0:	3301      	adds	r3, #1
  4043c2:	2b07      	cmp	r3, #7
  4043c4:	9326      	str	r3, [sp, #152]	; 0x98
  4043c6:	dc01      	bgt.n	4043cc <_svfprintf_r+0xd98>
  4043c8:	3608      	adds	r6, #8
  4043ca:	e008      	b.n	4043de <_svfprintf_r+0xdaa>
  4043cc:	4650      	mov	r0, sl
  4043ce:	4659      	mov	r1, fp
  4043d0:	aa25      	add	r2, sp, #148	; 0x94
  4043d2:	f002 f87b 	bl	4064cc <__ssprint_r>
  4043d6:	2800      	cmp	r0, #0
  4043d8:	f040 80b7 	bne.w	40454a <_svfprintf_r+0xf16>
  4043dc:	ae32      	add	r6, sp, #200	; 0xc8
  4043de:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4043e0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4043e2:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4043e4:	4423      	add	r3, r4
  4043e6:	9327      	str	r3, [sp, #156]	; 0x9c
  4043e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043ea:	6035      	str	r5, [r6, #0]
  4043ec:	3301      	adds	r3, #1
  4043ee:	2b07      	cmp	r3, #7
  4043f0:	6074      	str	r4, [r6, #4]
  4043f2:	9326      	str	r3, [sp, #152]	; 0x98
  4043f4:	dc01      	bgt.n	4043fa <_svfprintf_r+0xdc6>
  4043f6:	3608      	adds	r6, #8
  4043f8:	e008      	b.n	40440c <_svfprintf_r+0xdd8>
  4043fa:	4650      	mov	r0, sl
  4043fc:	4659      	mov	r1, fp
  4043fe:	aa25      	add	r2, sp, #148	; 0x94
  404400:	f002 f864 	bl	4064cc <__ssprint_r>
  404404:	2800      	cmp	r0, #0
  404406:	f040 80a0 	bne.w	40454a <_svfprintf_r+0xf16>
  40440a:	ae32      	add	r6, sp, #200	; 0xc8
  40440c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404410:	2200      	movs	r2, #0
  404412:	2300      	movs	r3, #0
  404414:	f003 f960 	bl	4076d8 <__aeabi_dcmpeq>
  404418:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40441a:	1e6c      	subs	r4, r5, #1
  40441c:	b940      	cbnz	r0, 404430 <_svfprintf_r+0xdfc>
  40441e:	9d07      	ldr	r5, [sp, #28]
  404420:	1c6b      	adds	r3, r5, #1
  404422:	e886 0018 	stmia.w	r6, {r3, r4}
  404426:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404428:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40442a:	3b01      	subs	r3, #1
  40442c:	4423      	add	r3, r4
  40442e:	e033      	b.n	404498 <_svfprintf_r+0xe64>
  404430:	2c00      	cmp	r4, #0
  404432:	dd34      	ble.n	40449e <_svfprintf_r+0xe6a>
  404434:	4b23      	ldr	r3, [pc, #140]	; (4044c4 <_svfprintf_r+0xe90>)
  404436:	2c10      	cmp	r4, #16
  404438:	6033      	str	r3, [r6, #0]
  40443a:	dd15      	ble.n	404468 <_svfprintf_r+0xe34>
  40443c:	2310      	movs	r3, #16
  40443e:	6073      	str	r3, [r6, #4]
  404440:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404442:	3310      	adds	r3, #16
  404444:	9327      	str	r3, [sp, #156]	; 0x9c
  404446:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404448:	3301      	adds	r3, #1
  40444a:	2b07      	cmp	r3, #7
  40444c:	9326      	str	r3, [sp, #152]	; 0x98
  40444e:	dc01      	bgt.n	404454 <_svfprintf_r+0xe20>
  404450:	3608      	adds	r6, #8
  404452:	e007      	b.n	404464 <_svfprintf_r+0xe30>
  404454:	4650      	mov	r0, sl
  404456:	4659      	mov	r1, fp
  404458:	aa25      	add	r2, sp, #148	; 0x94
  40445a:	f002 f837 	bl	4064cc <__ssprint_r>
  40445e:	2800      	cmp	r0, #0
  404460:	d173      	bne.n	40454a <_svfprintf_r+0xf16>
  404462:	ae32      	add	r6, sp, #200	; 0xc8
  404464:	3c10      	subs	r4, #16
  404466:	e7e5      	b.n	404434 <_svfprintf_r+0xe00>
  404468:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40446a:	6074      	str	r4, [r6, #4]
  40446c:	441c      	add	r4, r3
  40446e:	9427      	str	r4, [sp, #156]	; 0x9c
  404470:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404472:	3301      	adds	r3, #1
  404474:	2b07      	cmp	r3, #7
  404476:	9326      	str	r3, [sp, #152]	; 0x98
  404478:	dd10      	ble.n	40449c <_svfprintf_r+0xe68>
  40447a:	4650      	mov	r0, sl
  40447c:	4659      	mov	r1, fp
  40447e:	aa25      	add	r2, sp, #148	; 0x94
  404480:	f002 f824 	bl	4064cc <__ssprint_r>
  404484:	2800      	cmp	r0, #0
  404486:	d160      	bne.n	40454a <_svfprintf_r+0xf16>
  404488:	ae32      	add	r6, sp, #200	; 0xc8
  40448a:	e008      	b.n	40449e <_svfprintf_r+0xe6a>
  40448c:	2301      	movs	r3, #1
  40448e:	9d07      	ldr	r5, [sp, #28]
  404490:	6073      	str	r3, [r6, #4]
  404492:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404494:	6035      	str	r5, [r6, #0]
  404496:	3301      	adds	r3, #1
  404498:	9327      	str	r3, [sp, #156]	; 0x9c
  40449a:	e7e9      	b.n	404470 <_svfprintf_r+0xe3c>
  40449c:	3608      	adds	r6, #8
  40449e:	ab21      	add	r3, sp, #132	; 0x84
  4044a0:	6033      	str	r3, [r6, #0]
  4044a2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  4044a4:	e6ac      	b.n	404200 <_svfprintf_r+0xbcc>
  4044a6:	3608      	adds	r6, #8
  4044a8:	077b      	lsls	r3, r7, #29
  4044aa:	d40d      	bmi.n	4044c8 <_svfprintf_r+0xe94>
  4044ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4044ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4044b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4044b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4044b4:	42a0      	cmp	r0, r4
  4044b6:	bfac      	ite	ge
  4044b8:	182d      	addge	r5, r5, r0
  4044ba:	192d      	addlt	r5, r5, r4
  4044bc:	950f      	str	r5, [sp, #60]	; 0x3c
  4044be:	2b00      	cmp	r3, #0
  4044c0:	d037      	beq.n	404532 <_svfprintf_r+0xefe>
  4044c2:	e030      	b.n	404526 <_svfprintf_r+0xef2>
  4044c4:	00407e82 	.word	0x00407e82
  4044c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4044ca:	980a      	ldr	r0, [sp, #40]	; 0x28
  4044cc:	1a2c      	subs	r4, r5, r0
  4044ce:	2c00      	cmp	r4, #0
  4044d0:	ddec      	ble.n	4044ac <_svfprintf_r+0xe78>
  4044d2:	4b23      	ldr	r3, [pc, #140]	; (404560 <_svfprintf_r+0xf2c>)
  4044d4:	2c10      	cmp	r4, #16
  4044d6:	6033      	str	r3, [r6, #0]
  4044d8:	dd14      	ble.n	404504 <_svfprintf_r+0xed0>
  4044da:	2310      	movs	r3, #16
  4044dc:	6073      	str	r3, [r6, #4]
  4044de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4044e0:	3310      	adds	r3, #16
  4044e2:	9327      	str	r3, [sp, #156]	; 0x9c
  4044e4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4044e6:	3301      	adds	r3, #1
  4044e8:	2b07      	cmp	r3, #7
  4044ea:	9326      	str	r3, [sp, #152]	; 0x98
  4044ec:	dc01      	bgt.n	4044f2 <_svfprintf_r+0xebe>
  4044ee:	3608      	adds	r6, #8
  4044f0:	e006      	b.n	404500 <_svfprintf_r+0xecc>
  4044f2:	4650      	mov	r0, sl
  4044f4:	4659      	mov	r1, fp
  4044f6:	aa25      	add	r2, sp, #148	; 0x94
  4044f8:	f001 ffe8 	bl	4064cc <__ssprint_r>
  4044fc:	bb28      	cbnz	r0, 40454a <_svfprintf_r+0xf16>
  4044fe:	ae32      	add	r6, sp, #200	; 0xc8
  404500:	3c10      	subs	r4, #16
  404502:	e7e6      	b.n	4044d2 <_svfprintf_r+0xe9e>
  404504:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404506:	6074      	str	r4, [r6, #4]
  404508:	441c      	add	r4, r3
  40450a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40450c:	9427      	str	r4, [sp, #156]	; 0x9c
  40450e:	3301      	adds	r3, #1
  404510:	2b07      	cmp	r3, #7
  404512:	9326      	str	r3, [sp, #152]	; 0x98
  404514:	ddca      	ble.n	4044ac <_svfprintf_r+0xe78>
  404516:	4650      	mov	r0, sl
  404518:	4659      	mov	r1, fp
  40451a:	aa25      	add	r2, sp, #148	; 0x94
  40451c:	f001 ffd6 	bl	4064cc <__ssprint_r>
  404520:	2800      	cmp	r0, #0
  404522:	d0c3      	beq.n	4044ac <_svfprintf_r+0xe78>
  404524:	e011      	b.n	40454a <_svfprintf_r+0xf16>
  404526:	4650      	mov	r0, sl
  404528:	4659      	mov	r1, fp
  40452a:	aa25      	add	r2, sp, #148	; 0x94
  40452c:	f001 ffce 	bl	4064cc <__ssprint_r>
  404530:	b958      	cbnz	r0, 40454a <_svfprintf_r+0xf16>
  404532:	2300      	movs	r3, #0
  404534:	9326      	str	r3, [sp, #152]	; 0x98
  404536:	ae32      	add	r6, sp, #200	; 0xc8
  404538:	f7ff b8b1 	b.w	40369e <_svfprintf_r+0x6a>
  40453c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40453e:	b123      	cbz	r3, 40454a <_svfprintf_r+0xf16>
  404540:	4650      	mov	r0, sl
  404542:	4659      	mov	r1, fp
  404544:	aa25      	add	r2, sp, #148	; 0x94
  404546:	f001 ffc1 	bl	4064cc <__ssprint_r>
  40454a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40454e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404550:	f013 0f40 	tst.w	r3, #64	; 0x40
  404554:	bf18      	it	ne
  404556:	f04f 30ff 	movne.w	r0, #4294967295
  40455a:	b043      	add	sp, #268	; 0x10c
  40455c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404560:	00407e72 	.word	0x00407e72

00404564 <register_fini>:
  404564:	4b02      	ldr	r3, [pc, #8]	; (404570 <register_fini+0xc>)
  404566:	b113      	cbz	r3, 40456e <register_fini+0xa>
  404568:	4802      	ldr	r0, [pc, #8]	; (404574 <register_fini+0x10>)
  40456a:	f000 b805 	b.w	404578 <atexit>
  40456e:	4770      	bx	lr
  404570:	00000000 	.word	0x00000000
  404574:	00405209 	.word	0x00405209

00404578 <atexit>:
  404578:	4601      	mov	r1, r0
  40457a:	2000      	movs	r0, #0
  40457c:	4602      	mov	r2, r0
  40457e:	4603      	mov	r3, r0
  404580:	f002 bc10 	b.w	406da4 <__register_exitproc>
  404584:	0000      	movs	r0, r0
	...

00404588 <quorem>:
  404588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40458c:	6903      	ldr	r3, [r0, #16]
  40458e:	690c      	ldr	r4, [r1, #16]
  404590:	4680      	mov	r8, r0
  404592:	42a3      	cmp	r3, r4
  404594:	f2c0 8083 	blt.w	40469e <quorem+0x116>
  404598:	3c01      	subs	r4, #1
  40459a:	00a2      	lsls	r2, r4, #2
  40459c:	f101 0714 	add.w	r7, r1, #20
  4045a0:	f100 0514 	add.w	r5, r0, #20
  4045a4:	4691      	mov	r9, r2
  4045a6:	9200      	str	r2, [sp, #0]
  4045a8:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
  4045ac:	442a      	add	r2, r5
  4045ae:	9201      	str	r2, [sp, #4]
  4045b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  4045b4:	3601      	adds	r6, #1
  4045b6:	fbb2 f6f6 	udiv	r6, r2, r6
  4045ba:	44b9      	add	r9, r7
  4045bc:	2e00      	cmp	r6, #0
  4045be:	d03b      	beq.n	404638 <quorem+0xb0>
  4045c0:	f04f 0e00 	mov.w	lr, #0
  4045c4:	463a      	mov	r2, r7
  4045c6:	4628      	mov	r0, r5
  4045c8:	46f3      	mov	fp, lr
  4045ca:	f852 cb04 	ldr.w	ip, [r2], #4
  4045ce:	6803      	ldr	r3, [r0, #0]
  4045d0:	fa1f fa8c 	uxth.w	sl, ip
  4045d4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  4045d8:	fb0a ea06 	mla	sl, sl, r6, lr
  4045dc:	fb0c fc06 	mul.w	ip, ip, r6
  4045e0:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
  4045e4:	fa1f fa8a 	uxth.w	sl, sl
  4045e8:	ebca 0b0b 	rsb	fp, sl, fp
  4045ec:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
  4045f0:	fa1f fa83 	uxth.w	sl, r3
  4045f4:	fa1f fc8c 	uxth.w	ip, ip
  4045f8:	44da      	add	sl, fp
  4045fa:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
  4045fe:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
  404602:	fa1f fa8a 	uxth.w	sl, sl
  404606:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
  40460a:	454a      	cmp	r2, r9
  40460c:	ea4f 4b2c 	mov.w	fp, ip, asr #16
  404610:	f840 ab04 	str.w	sl, [r0], #4
  404614:	d9d9      	bls.n	4045ca <quorem+0x42>
  404616:	9a00      	ldr	r2, [sp, #0]
  404618:	58ab      	ldr	r3, [r5, r2]
  40461a:	b96b      	cbnz	r3, 404638 <quorem+0xb0>
  40461c:	9a01      	ldr	r2, [sp, #4]
  40461e:	1f13      	subs	r3, r2, #4
  404620:	42ab      	cmp	r3, r5
  404622:	461a      	mov	r2, r3
  404624:	d802      	bhi.n	40462c <quorem+0xa4>
  404626:	f8c8 4010 	str.w	r4, [r8, #16]
  40462a:	e005      	b.n	404638 <quorem+0xb0>
  40462c:	6812      	ldr	r2, [r2, #0]
  40462e:	3b04      	subs	r3, #4
  404630:	2a00      	cmp	r2, #0
  404632:	d1f8      	bne.n	404626 <quorem+0x9e>
  404634:	3c01      	subs	r4, #1
  404636:	e7f3      	b.n	404620 <quorem+0x98>
  404638:	4640      	mov	r0, r8
  40463a:	f001 fba2 	bl	405d82 <__mcmp>
  40463e:	2800      	cmp	r0, #0
  404640:	db2b      	blt.n	40469a <quorem+0x112>
  404642:	3601      	adds	r6, #1
  404644:	462b      	mov	r3, r5
  404646:	2000      	movs	r0, #0
  404648:	f857 cb04 	ldr.w	ip, [r7], #4
  40464c:	681a      	ldr	r2, [r3, #0]
  40464e:	fa1f f18c 	uxth.w	r1, ip
  404652:	1a41      	subs	r1, r0, r1
  404654:	fa1f fa82 	uxth.w	sl, r2
  404658:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  40465c:	4451      	add	r1, sl
  40465e:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
  404662:	eb02 4221 	add.w	r2, r2, r1, asr #16
  404666:	b289      	uxth	r1, r1
  404668:	1410      	asrs	r0, r2, #16
  40466a:	454f      	cmp	r7, r9
  40466c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  404670:	f843 2b04 	str.w	r2, [r3], #4
  404674:	d9e8      	bls.n	404648 <quorem+0xc0>
  404676:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  40467a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
  40467e:	b962      	cbnz	r2, 40469a <quorem+0x112>
  404680:	3b04      	subs	r3, #4
  404682:	42ab      	cmp	r3, r5
  404684:	461a      	mov	r2, r3
  404686:	d802      	bhi.n	40468e <quorem+0x106>
  404688:	f8c8 4010 	str.w	r4, [r8, #16]
  40468c:	e005      	b.n	40469a <quorem+0x112>
  40468e:	6812      	ldr	r2, [r2, #0]
  404690:	3b04      	subs	r3, #4
  404692:	2a00      	cmp	r2, #0
  404694:	d1f8      	bne.n	404688 <quorem+0x100>
  404696:	3c01      	subs	r4, #1
  404698:	e7f3      	b.n	404682 <quorem+0xfa>
  40469a:	4630      	mov	r0, r6
  40469c:	e000      	b.n	4046a0 <quorem+0x118>
  40469e:	2000      	movs	r0, #0
  4046a0:	b003      	add	sp, #12
  4046a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004046a6 <_dtoa_r>:
  4046a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046aa:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4046ac:	b09b      	sub	sp, #108	; 0x6c
  4046ae:	4682      	mov	sl, r0
  4046b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4046b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  4046b6:	b151      	cbz	r1, 4046ce <_dtoa_r+0x28>
  4046b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
  4046ba:	2201      	movs	r2, #1
  4046bc:	604b      	str	r3, [r1, #4]
  4046be:	fa02 f303 	lsl.w	r3, r2, r3
  4046c2:	608b      	str	r3, [r1, #8]
  4046c4:	f001 f958 	bl	405978 <_Bfree>
  4046c8:	2300      	movs	r3, #0
  4046ca:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
  4046ce:	9805      	ldr	r0, [sp, #20]
  4046d0:	2800      	cmp	r0, #0
  4046d2:	da05      	bge.n	4046e0 <_dtoa_r+0x3a>
  4046d4:	2301      	movs	r3, #1
  4046d6:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  4046da:	6023      	str	r3, [r4, #0]
  4046dc:	9105      	str	r1, [sp, #20]
  4046de:	e001      	b.n	4046e4 <_dtoa_r+0x3e>
  4046e0:	2300      	movs	r3, #0
  4046e2:	6023      	str	r3, [r4, #0]
  4046e4:	9f05      	ldr	r7, [sp, #20]
  4046e6:	4a9c      	ldr	r2, [pc, #624]	; (404958 <_dtoa_r+0x2b2>)
  4046e8:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
  4046ec:	0d1b      	lsrs	r3, r3, #20
  4046ee:	051b      	lsls	r3, r3, #20
  4046f0:	4293      	cmp	r3, r2
  4046f2:	d11d      	bne.n	404730 <_dtoa_r+0x8a>
  4046f4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4046f6:	f242 730f 	movw	r3, #9999	; 0x270f
  4046fa:	6013      	str	r3, [r2, #0]
  4046fc:	9b04      	ldr	r3, [sp, #16]
  4046fe:	b943      	cbnz	r3, 404712 <_dtoa_r+0x6c>
  404700:	4b96      	ldr	r3, [pc, #600]	; (40495c <_dtoa_r+0x2b6>)
  404702:	4a97      	ldr	r2, [pc, #604]	; (404960 <_dtoa_r+0x2ba>)
  404704:	f3c7 0013 	ubfx	r0, r7, #0, #20
  404708:	2800      	cmp	r0, #0
  40470a:	bf0c      	ite	eq
  40470c:	4610      	moveq	r0, r2
  40470e:	4618      	movne	r0, r3
  404710:	e000      	b.n	404714 <_dtoa_r+0x6e>
  404712:	4892      	ldr	r0, [pc, #584]	; (40495c <_dtoa_r+0x2b6>)
  404714:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  404716:	2f00      	cmp	r7, #0
  404718:	f000 856f 	beq.w	4051fa <_dtoa_r+0xb54>
  40471c:	78c3      	ldrb	r3, [r0, #3]
  40471e:	b113      	cbz	r3, 404726 <_dtoa_r+0x80>
  404720:	f100 0308 	add.w	r3, r0, #8
  404724:	e000      	b.n	404728 <_dtoa_r+0x82>
  404726:	1cc3      	adds	r3, r0, #3
  404728:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  40472a:	603b      	str	r3, [r7, #0]
  40472c:	f000 bd65 	b.w	4051fa <_dtoa_r+0xb54>
  404730:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  404734:	2200      	movs	r2, #0
  404736:	4620      	mov	r0, r4
  404738:	4629      	mov	r1, r5
  40473a:	2300      	movs	r3, #0
  40473c:	f002 ffcc 	bl	4076d8 <__aeabi_dcmpeq>
  404740:	4680      	mov	r8, r0
  404742:	b158      	cbz	r0, 40475c <_dtoa_r+0xb6>
  404744:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404746:	2301      	movs	r3, #1
  404748:	603b      	str	r3, [r7, #0]
  40474a:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  40474c:	2f00      	cmp	r7, #0
  40474e:	f000 8551 	beq.w	4051f4 <_dtoa_r+0xb4e>
  404752:	4884      	ldr	r0, [pc, #528]	; (404964 <_dtoa_r+0x2be>)
  404754:	6038      	str	r0, [r7, #0]
  404756:	3801      	subs	r0, #1
  404758:	f000 bd4f 	b.w	4051fa <_dtoa_r+0xb54>
  40475c:	ab19      	add	r3, sp, #100	; 0x64
  40475e:	9300      	str	r3, [sp, #0]
  404760:	ab18      	add	r3, sp, #96	; 0x60
  404762:	9301      	str	r3, [sp, #4]
  404764:	4650      	mov	r0, sl
  404766:	4622      	mov	r2, r4
  404768:	462b      	mov	r3, r5
  40476a:	f001 fbfa 	bl	405f62 <__d2b>
  40476e:	f3c7 560a 	ubfx	r6, r7, #20, #11
  404772:	4683      	mov	fp, r0
  404774:	b15e      	cbz	r6, 40478e <_dtoa_r+0xe8>
  404776:	f3c5 0313 	ubfx	r3, r5, #0, #20
  40477a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40477e:	4620      	mov	r0, r4
  404780:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404784:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  404788:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  40478c:	e01c      	b.n	4047c8 <_dtoa_r+0x122>
  40478e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404790:	9e18      	ldr	r6, [sp, #96]	; 0x60
  404792:	441e      	add	r6, r3
  404794:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  404798:	429e      	cmp	r6, r3
  40479a:	db09      	blt.n	4047b0 <_dtoa_r+0x10a>
  40479c:	9904      	ldr	r1, [sp, #16]
  40479e:	331f      	adds	r3, #31
  4047a0:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4047a4:	1b9b      	subs	r3, r3, r6
  4047a6:	fa21 f000 	lsr.w	r0, r1, r0
  4047aa:	409f      	lsls	r7, r3
  4047ac:	4338      	orrs	r0, r7
  4047ae:	e004      	b.n	4047ba <_dtoa_r+0x114>
  4047b0:	486d      	ldr	r0, [pc, #436]	; (404968 <_dtoa_r+0x2c2>)
  4047b2:	9a04      	ldr	r2, [sp, #16]
  4047b4:	1b80      	subs	r0, r0, r6
  4047b6:	fa02 f000 	lsl.w	r0, r2, r0
  4047ba:	f002 fcaf 	bl	40711c <__aeabi_ui2d>
  4047be:	2701      	movs	r7, #1
  4047c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4047c4:	3e01      	subs	r6, #1
  4047c6:	9715      	str	r7, [sp, #84]	; 0x54
  4047c8:	2200      	movs	r2, #0
  4047ca:	4b68      	ldr	r3, [pc, #416]	; (40496c <_dtoa_r+0x2c6>)
  4047cc:	f002 fb68 	bl	406ea0 <__aeabi_dsub>
  4047d0:	a35b      	add	r3, pc, #364	; (adr r3, 404940 <_dtoa_r+0x29a>)
  4047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047d6:	f002 fd17 	bl	407208 <__aeabi_dmul>
  4047da:	a35b      	add	r3, pc, #364	; (adr r3, 404948 <_dtoa_r+0x2a2>)
  4047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047e0:	f002 fb60 	bl	406ea4 <__adddf3>
  4047e4:	4604      	mov	r4, r0
  4047e6:	4630      	mov	r0, r6
  4047e8:	460d      	mov	r5, r1
  4047ea:	f002 fca7 	bl	40713c <__aeabi_i2d>
  4047ee:	a358      	add	r3, pc, #352	; (adr r3, 404950 <_dtoa_r+0x2aa>)
  4047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047f4:	f002 fd08 	bl	407208 <__aeabi_dmul>
  4047f8:	4602      	mov	r2, r0
  4047fa:	460b      	mov	r3, r1
  4047fc:	4620      	mov	r0, r4
  4047fe:	4629      	mov	r1, r5
  404800:	f002 fb50 	bl	406ea4 <__adddf3>
  404804:	4604      	mov	r4, r0
  404806:	460d      	mov	r5, r1
  404808:	f002 ff98 	bl	40773c <__aeabi_d2iz>
  40480c:	4629      	mov	r1, r5
  40480e:	4681      	mov	r9, r0
  404810:	2200      	movs	r2, #0
  404812:	4620      	mov	r0, r4
  404814:	2300      	movs	r3, #0
  404816:	f002 ff69 	bl	4076ec <__aeabi_dcmplt>
  40481a:	b158      	cbz	r0, 404834 <_dtoa_r+0x18e>
  40481c:	4648      	mov	r0, r9
  40481e:	f002 fc8d 	bl	40713c <__aeabi_i2d>
  404822:	4602      	mov	r2, r0
  404824:	460b      	mov	r3, r1
  404826:	4620      	mov	r0, r4
  404828:	4629      	mov	r1, r5
  40482a:	f002 ff55 	bl	4076d8 <__aeabi_dcmpeq>
  40482e:	b908      	cbnz	r0, 404834 <_dtoa_r+0x18e>
  404830:	f109 39ff 	add.w	r9, r9, #4294967295
  404834:	f1b9 0f16 	cmp.w	r9, #22
  404838:	d80d      	bhi.n	404856 <_dtoa_r+0x1b0>
  40483a:	4b4d      	ldr	r3, [pc, #308]	; (404970 <_dtoa_r+0x2ca>)
  40483c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  404840:	e9d3 0100 	ldrd	r0, r1, [r3]
  404844:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404848:	f002 ff6e 	bl	407728 <__aeabi_dcmpgt>
  40484c:	b130      	cbz	r0, 40485c <_dtoa_r+0x1b6>
  40484e:	f109 39ff 	add.w	r9, r9, #4294967295
  404852:	2700      	movs	r7, #0
  404854:	e000      	b.n	404858 <_dtoa_r+0x1b2>
  404856:	2701      	movs	r7, #1
  404858:	9714      	str	r7, [sp, #80]	; 0x50
  40485a:	e000      	b.n	40485e <_dtoa_r+0x1b8>
  40485c:	9014      	str	r0, [sp, #80]	; 0x50
  40485e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404860:	1b9e      	subs	r6, r3, r6
  404862:	3e01      	subs	r6, #1
  404864:	960a      	str	r6, [sp, #40]	; 0x28
  404866:	d504      	bpl.n	404872 <_dtoa_r+0x1cc>
  404868:	4277      	negs	r7, r6
  40486a:	9708      	str	r7, [sp, #32]
  40486c:	2700      	movs	r7, #0
  40486e:	970a      	str	r7, [sp, #40]	; 0x28
  404870:	e001      	b.n	404876 <_dtoa_r+0x1d0>
  404872:	2700      	movs	r7, #0
  404874:	9708      	str	r7, [sp, #32]
  404876:	f1b9 0f00 	cmp.w	r9, #0
  40487a:	db07      	blt.n	40488c <_dtoa_r+0x1e6>
  40487c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40487e:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  404882:	444f      	add	r7, r9
  404884:	970a      	str	r7, [sp, #40]	; 0x28
  404886:	2700      	movs	r7, #0
  404888:	970e      	str	r7, [sp, #56]	; 0x38
  40488a:	e008      	b.n	40489e <_dtoa_r+0x1f8>
  40488c:	9f08      	ldr	r7, [sp, #32]
  40488e:	ebc9 0707 	rsb	r7, r9, r7
  404892:	9708      	str	r7, [sp, #32]
  404894:	f1c9 0700 	rsb	r7, r9, #0
  404898:	970e      	str	r7, [sp, #56]	; 0x38
  40489a:	2700      	movs	r7, #0
  40489c:	9711      	str	r7, [sp, #68]	; 0x44
  40489e:	9f24      	ldr	r7, [sp, #144]	; 0x90
  4048a0:	2f09      	cmp	r7, #9
  4048a2:	d829      	bhi.n	4048f8 <_dtoa_r+0x252>
  4048a4:	2f05      	cmp	r7, #5
  4048a6:	bfc4      	itt	gt
  4048a8:	3f04      	subgt	r7, #4
  4048aa:	9724      	strgt	r7, [sp, #144]	; 0x90
  4048ac:	9f24      	ldr	r7, [sp, #144]	; 0x90
  4048ae:	bfc8      	it	gt
  4048b0:	2400      	movgt	r4, #0
  4048b2:	f1a7 0302 	sub.w	r3, r7, #2
  4048b6:	bfd8      	it	le
  4048b8:	2401      	movle	r4, #1
  4048ba:	2b03      	cmp	r3, #3
  4048bc:	d821      	bhi.n	404902 <_dtoa_r+0x25c>
  4048be:	e8df f003 	tbb	[pc, r3]
  4048c2:	0f06      	.short	0x0f06
  4048c4:	0402      	.short	0x0402
  4048c6:	2701      	movs	r7, #1
  4048c8:	e002      	b.n	4048d0 <_dtoa_r+0x22a>
  4048ca:	2701      	movs	r7, #1
  4048cc:	e009      	b.n	4048e2 <_dtoa_r+0x23c>
  4048ce:	2700      	movs	r7, #0
  4048d0:	970f      	str	r7, [sp, #60]	; 0x3c
  4048d2:	9f25      	ldr	r7, [sp, #148]	; 0x94
  4048d4:	2f00      	cmp	r7, #0
  4048d6:	dd1e      	ble.n	404916 <_dtoa_r+0x270>
  4048d8:	970b      	str	r7, [sp, #44]	; 0x2c
  4048da:	9707      	str	r7, [sp, #28]
  4048dc:	463b      	mov	r3, r7
  4048de:	e01f      	b.n	404920 <_dtoa_r+0x27a>
  4048e0:	2700      	movs	r7, #0
  4048e2:	970f      	str	r7, [sp, #60]	; 0x3c
  4048e4:	9f25      	ldr	r7, [sp, #148]	; 0x94
  4048e6:	444f      	add	r7, r9
  4048e8:	970b      	str	r7, [sp, #44]	; 0x2c
  4048ea:	3701      	adds	r7, #1
  4048ec:	463b      	mov	r3, r7
  4048ee:	9707      	str	r7, [sp, #28]
  4048f0:	2b01      	cmp	r3, #1
  4048f2:	bfb8      	it	lt
  4048f4:	2301      	movlt	r3, #1
  4048f6:	e013      	b.n	404920 <_dtoa_r+0x27a>
  4048f8:	2401      	movs	r4, #1
  4048fa:	2700      	movs	r7, #0
  4048fc:	9724      	str	r7, [sp, #144]	; 0x90
  4048fe:	940f      	str	r4, [sp, #60]	; 0x3c
  404900:	e001      	b.n	404906 <_dtoa_r+0x260>
  404902:	2701      	movs	r7, #1
  404904:	970f      	str	r7, [sp, #60]	; 0x3c
  404906:	f04f 37ff 	mov.w	r7, #4294967295
  40490a:	970b      	str	r7, [sp, #44]	; 0x2c
  40490c:	9707      	str	r7, [sp, #28]
  40490e:	2700      	movs	r7, #0
  404910:	2312      	movs	r3, #18
  404912:	9725      	str	r7, [sp, #148]	; 0x94
  404914:	e004      	b.n	404920 <_dtoa_r+0x27a>
  404916:	2701      	movs	r7, #1
  404918:	970b      	str	r7, [sp, #44]	; 0x2c
  40491a:	9707      	str	r7, [sp, #28]
  40491c:	463b      	mov	r3, r7
  40491e:	9725      	str	r7, [sp, #148]	; 0x94
  404920:	2200      	movs	r2, #0
  404922:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
  404926:	2204      	movs	r2, #4
  404928:	f102 0114 	add.w	r1, r2, #20
  40492c:	4299      	cmp	r1, r3
  40492e:	d821      	bhi.n	404974 <_dtoa_r+0x2ce>
  404930:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  404934:	0052      	lsls	r2, r2, #1
  404936:	3101      	adds	r1, #1
  404938:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
  40493c:	e7f4      	b.n	404928 <_dtoa_r+0x282>
  40493e:	bf00      	nop
  404940:	636f4361 	.word	0x636f4361
  404944:	3fd287a7 	.word	0x3fd287a7
  404948:	8b60c8b3 	.word	0x8b60c8b3
  40494c:	3fc68a28 	.word	0x3fc68a28
  404950:	509f79fb 	.word	0x509f79fb
  404954:	3fd34413 	.word	0x3fd34413
  404958:	7ff00000 	.word	0x7ff00000
  40495c:	00407fd0 	.word	0x00407fd0
  404960:	00407fc7 	.word	0x00407fc7
  404964:	00407ec5 	.word	0x00407ec5
  404968:	fffffbee 	.word	0xfffffbee
  40496c:	3ff80000 	.word	0x3ff80000
  404970:	00407ff0 	.word	0x00407ff0
  404974:	4650      	mov	r0, sl
  404976:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  40497a:	f000 ffd7 	bl	40592c <_Balloc>
  40497e:	9f07      	ldr	r7, [sp, #28]
  404980:	9009      	str	r0, [sp, #36]	; 0x24
  404982:	2f0e      	cmp	r7, #14
  404984:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
  404988:	f200 816a 	bhi.w	404c60 <_dtoa_r+0x5ba>
  40498c:	2c00      	cmp	r4, #0
  40498e:	f000 8167 	beq.w	404c60 <_dtoa_r+0x5ba>
  404992:	f1b9 0f00 	cmp.w	r9, #0
  404996:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40499a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40499e:	dd31      	ble.n	404a04 <_dtoa_r+0x35e>
  4049a0:	4a80      	ldr	r2, [pc, #512]	; (404ba4 <_dtoa_r+0x4fe>)
  4049a2:	f009 030f 	and.w	r3, r9, #15
  4049a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4049aa:	ea4f 1429 	mov.w	r4, r9, asr #4
  4049ae:	e9d3 0100 	ldrd	r0, r1, [r3]
  4049b2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4049b6:	06e0      	lsls	r0, r4, #27
  4049b8:	d50c      	bpl.n	4049d4 <_dtoa_r+0x32e>
  4049ba:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4049be:	4b7a      	ldr	r3, [pc, #488]	; (404ba8 <_dtoa_r+0x502>)
  4049c0:	f004 040f 	and.w	r4, r4, #15
  4049c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4049c8:	f002 fd48 	bl	40745c <__aeabi_ddiv>
  4049cc:	2703      	movs	r7, #3
  4049ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4049d2:	e000      	b.n	4049d6 <_dtoa_r+0x330>
  4049d4:	2702      	movs	r7, #2
  4049d6:	4d74      	ldr	r5, [pc, #464]	; (404ba8 <_dtoa_r+0x502>)
  4049d8:	b16c      	cbz	r4, 4049f6 <_dtoa_r+0x350>
  4049da:	07e1      	lsls	r1, r4, #31
  4049dc:	d508      	bpl.n	4049f0 <_dtoa_r+0x34a>
  4049de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4049e2:	e9d5 2300 	ldrd	r2, r3, [r5]
  4049e6:	f002 fc0f 	bl	407208 <__aeabi_dmul>
  4049ea:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4049ee:	3701      	adds	r7, #1
  4049f0:	1064      	asrs	r4, r4, #1
  4049f2:	3508      	adds	r5, #8
  4049f4:	e7f0      	b.n	4049d8 <_dtoa_r+0x332>
  4049f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4049fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4049fe:	f002 fd2d 	bl	40745c <__aeabi_ddiv>
  404a02:	e01b      	b.n	404a3c <_dtoa_r+0x396>
  404a04:	f1c9 0400 	rsb	r4, r9, #0
  404a08:	b1dc      	cbz	r4, 404a42 <_dtoa_r+0x39c>
  404a0a:	4b66      	ldr	r3, [pc, #408]	; (404ba4 <_dtoa_r+0x4fe>)
  404a0c:	f004 020f 	and.w	r2, r4, #15
  404a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404a14:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404a18:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a1c:	f002 fbf4 	bl	407208 <__aeabi_dmul>
  404a20:	4d61      	ldr	r5, [pc, #388]	; (404ba8 <_dtoa_r+0x502>)
  404a22:	1124      	asrs	r4, r4, #4
  404a24:	2702      	movs	r7, #2
  404a26:	b14c      	cbz	r4, 404a3c <_dtoa_r+0x396>
  404a28:	07e2      	lsls	r2, r4, #31
  404a2a:	d504      	bpl.n	404a36 <_dtoa_r+0x390>
  404a2c:	e9d5 2300 	ldrd	r2, r3, [r5]
  404a30:	3701      	adds	r7, #1
  404a32:	f002 fbe9 	bl	407208 <__aeabi_dmul>
  404a36:	1064      	asrs	r4, r4, #1
  404a38:	3508      	adds	r5, #8
  404a3a:	e7f4      	b.n	404a26 <_dtoa_r+0x380>
  404a3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404a40:	e000      	b.n	404a44 <_dtoa_r+0x39e>
  404a42:	2702      	movs	r7, #2
  404a44:	9914      	ldr	r1, [sp, #80]	; 0x50
  404a46:	b1e9      	cbz	r1, 404a84 <_dtoa_r+0x3de>
  404a48:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  404a4c:	2200      	movs	r2, #0
  404a4e:	4620      	mov	r0, r4
  404a50:	4629      	mov	r1, r5
  404a52:	4b56      	ldr	r3, [pc, #344]	; (404bac <_dtoa_r+0x506>)
  404a54:	f002 fe4a 	bl	4076ec <__aeabi_dcmplt>
  404a58:	b1c8      	cbz	r0, 404a8e <_dtoa_r+0x3e8>
  404a5a:	9a07      	ldr	r2, [sp, #28]
  404a5c:	b1e2      	cbz	r2, 404a98 <_dtoa_r+0x3f2>
  404a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404a60:	2b00      	cmp	r3, #0
  404a62:	f340 80f9 	ble.w	404c58 <_dtoa_r+0x5b2>
  404a66:	f109 30ff 	add.w	r0, r9, #4294967295
  404a6a:	9010      	str	r0, [sp, #64]	; 0x40
  404a6c:	4629      	mov	r1, r5
  404a6e:	4620      	mov	r0, r4
  404a70:	2200      	movs	r2, #0
  404a72:	4b4f      	ldr	r3, [pc, #316]	; (404bb0 <_dtoa_r+0x50a>)
  404a74:	f002 fbc8 	bl	407208 <__aeabi_dmul>
  404a78:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404a7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a7e:	3701      	adds	r7, #1
  404a80:	910c      	str	r1, [sp, #48]	; 0x30
  404a82:	e00d      	b.n	404aa0 <_dtoa_r+0x3fa>
  404a84:	9a07      	ldr	r2, [sp, #28]
  404a86:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  404a8a:	920c      	str	r2, [sp, #48]	; 0x30
  404a8c:	e008      	b.n	404aa0 <_dtoa_r+0x3fa>
  404a8e:	9b07      	ldr	r3, [sp, #28]
  404a90:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  404a94:	930c      	str	r3, [sp, #48]	; 0x30
  404a96:	e003      	b.n	404aa0 <_dtoa_r+0x3fa>
  404a98:	9807      	ldr	r0, [sp, #28]
  404a9a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  404a9e:	900c      	str	r0, [sp, #48]	; 0x30
  404aa0:	4638      	mov	r0, r7
  404aa2:	f002 fb4b 	bl	40713c <__aeabi_i2d>
  404aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404aaa:	f002 fbad 	bl	407208 <__aeabi_dmul>
  404aae:	2200      	movs	r2, #0
  404ab0:	4b40      	ldr	r3, [pc, #256]	; (404bb4 <_dtoa_r+0x50e>)
  404ab2:	f002 f9f7 	bl	406ea4 <__adddf3>
  404ab6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404ab8:	4604      	mov	r4, r0
  404aba:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  404abe:	b9cf      	cbnz	r7, 404af4 <_dtoa_r+0x44e>
  404ac0:	2200      	movs	r2, #0
  404ac2:	4b3d      	ldr	r3, [pc, #244]	; (404bb8 <_dtoa_r+0x512>)
  404ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404ac8:	f002 f9ea 	bl	406ea0 <__aeabi_dsub>
  404acc:	4622      	mov	r2, r4
  404ace:	462b      	mov	r3, r5
  404ad0:	4606      	mov	r6, r0
  404ad2:	460f      	mov	r7, r1
  404ad4:	f002 fe28 	bl	407728 <__aeabi_dcmpgt>
  404ad8:	2800      	cmp	r0, #0
  404ada:	f040 8252 	bne.w	404f82 <_dtoa_r+0x8dc>
  404ade:	4622      	mov	r2, r4
  404ae0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404ae4:	4630      	mov	r0, r6
  404ae6:	4639      	mov	r1, r7
  404ae8:	f002 fe00 	bl	4076ec <__aeabi_dcmplt>
  404aec:	2800      	cmp	r0, #0
  404aee:	f040 823e 	bne.w	404f6e <_dtoa_r+0x8c8>
  404af2:	e0b1      	b.n	404c58 <_dtoa_r+0x5b2>
  404af4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404af6:	4b2b      	ldr	r3, [pc, #172]	; (404ba4 <_dtoa_r+0x4fe>)
  404af8:	1e7a      	subs	r2, r7, #1
  404afa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  404afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404b00:	2f00      	cmp	r7, #0
  404b02:	d05d      	beq.n	404bc0 <_dtoa_r+0x51a>
  404b04:	e9d3 2300 	ldrd	r2, r3, [r3]
  404b08:	2000      	movs	r0, #0
  404b0a:	492c      	ldr	r1, [pc, #176]	; (404bbc <_dtoa_r+0x516>)
  404b0c:	f002 fca6 	bl	40745c <__aeabi_ddiv>
  404b10:	4622      	mov	r2, r4
  404b12:	462b      	mov	r3, r5
  404b14:	f002 f9c4 	bl	406ea0 <__aeabi_dsub>
  404b18:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  404b1c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404b20:	4604      	mov	r4, r0
  404b22:	460d      	mov	r5, r1
  404b24:	4639      	mov	r1, r7
  404b26:	4630      	mov	r0, r6
  404b28:	f002 fe08 	bl	40773c <__aeabi_d2iz>
  404b2c:	9002      	str	r0, [sp, #8]
  404b2e:	f002 fb05 	bl	40713c <__aeabi_i2d>
  404b32:	4602      	mov	r2, r0
  404b34:	460b      	mov	r3, r1
  404b36:	4630      	mov	r0, r6
  404b38:	4639      	mov	r1, r7
  404b3a:	f002 f9b1 	bl	406ea0 <__aeabi_dsub>
  404b3e:	f8dd c008 	ldr.w	ip, [sp, #8]
  404b42:	4622      	mov	r2, r4
  404b44:	f10c 0330 	add.w	r3, ip, #48	; 0x30
  404b48:	f808 3b01 	strb.w	r3, [r8], #1
  404b4c:	462b      	mov	r3, r5
  404b4e:	4606      	mov	r6, r0
  404b50:	460f      	mov	r7, r1
  404b52:	f002 fdcb 	bl	4076ec <__aeabi_dcmplt>
  404b56:	2800      	cmp	r0, #0
  404b58:	f040 833a 	bne.w	4051d0 <_dtoa_r+0xb2a>
  404b5c:	4632      	mov	r2, r6
  404b5e:	463b      	mov	r3, r7
  404b60:	2000      	movs	r0, #0
  404b62:	4912      	ldr	r1, [pc, #72]	; (404bac <_dtoa_r+0x506>)
  404b64:	f002 f99c 	bl	406ea0 <__aeabi_dsub>
  404b68:	4622      	mov	r2, r4
  404b6a:	462b      	mov	r3, r5
  404b6c:	f002 fdbe 	bl	4076ec <__aeabi_dcmplt>
  404b70:	2800      	cmp	r0, #0
  404b72:	f040 80d4 	bne.w	404d1e <_dtoa_r+0x678>
  404b76:	9809      	ldr	r0, [sp, #36]	; 0x24
  404b78:	990c      	ldr	r1, [sp, #48]	; 0x30
  404b7a:	ebc0 0308 	rsb	r3, r0, r8
  404b7e:	428b      	cmp	r3, r1
  404b80:	da6a      	bge.n	404c58 <_dtoa_r+0x5b2>
  404b82:	4620      	mov	r0, r4
  404b84:	4629      	mov	r1, r5
  404b86:	2200      	movs	r2, #0
  404b88:	4b09      	ldr	r3, [pc, #36]	; (404bb0 <_dtoa_r+0x50a>)
  404b8a:	f002 fb3d 	bl	407208 <__aeabi_dmul>
  404b8e:	2200      	movs	r2, #0
  404b90:	4604      	mov	r4, r0
  404b92:	460d      	mov	r5, r1
  404b94:	4630      	mov	r0, r6
  404b96:	4639      	mov	r1, r7
  404b98:	4b05      	ldr	r3, [pc, #20]	; (404bb0 <_dtoa_r+0x50a>)
  404b9a:	f002 fb35 	bl	407208 <__aeabi_dmul>
  404b9e:	4606      	mov	r6, r0
  404ba0:	460f      	mov	r7, r1
  404ba2:	e7bf      	b.n	404b24 <_dtoa_r+0x47e>
  404ba4:	00407ff0 	.word	0x00407ff0
  404ba8:	004080e0 	.word	0x004080e0
  404bac:	3ff00000 	.word	0x3ff00000
  404bb0:	40240000 	.word	0x40240000
  404bb4:	401c0000 	.word	0x401c0000
  404bb8:	40140000 	.word	0x40140000
  404bbc:	3fe00000 	.word	0x3fe00000
  404bc0:	4622      	mov	r2, r4
  404bc2:	e9d3 0100 	ldrd	r0, r1, [r3]
  404bc6:	462b      	mov	r3, r5
  404bc8:	f002 fb1e 	bl	407208 <__aeabi_dmul>
  404bcc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  404bd0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404bd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404bd6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404bda:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404bdc:	4490      	add	r8, r2
  404bde:	4639      	mov	r1, r7
  404be0:	4630      	mov	r0, r6
  404be2:	f002 fdab 	bl	40773c <__aeabi_d2iz>
  404be6:	4605      	mov	r5, r0
  404be8:	f002 faa8 	bl	40713c <__aeabi_i2d>
  404bec:	4602      	mov	r2, r0
  404bee:	460b      	mov	r3, r1
  404bf0:	4630      	mov	r0, r6
  404bf2:	4639      	mov	r1, r7
  404bf4:	f002 f954 	bl	406ea0 <__aeabi_dsub>
  404bf8:	3530      	adds	r5, #48	; 0x30
  404bfa:	f804 5b01 	strb.w	r5, [r4], #1
  404bfe:	4544      	cmp	r4, r8
  404c00:	4606      	mov	r6, r0
  404c02:	460f      	mov	r7, r1
  404c04:	d121      	bne.n	404c4a <_dtoa_r+0x5a4>
  404c06:	2200      	movs	r2, #0
  404c08:	4b87      	ldr	r3, [pc, #540]	; (404e28 <_dtoa_r+0x782>)
  404c0a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404c0e:	f002 f949 	bl	406ea4 <__adddf3>
  404c12:	4602      	mov	r2, r0
  404c14:	460b      	mov	r3, r1
  404c16:	4630      	mov	r0, r6
  404c18:	4639      	mov	r1, r7
  404c1a:	f002 fd85 	bl	407728 <__aeabi_dcmpgt>
  404c1e:	2800      	cmp	r0, #0
  404c20:	d17d      	bne.n	404d1e <_dtoa_r+0x678>
  404c22:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  404c26:	2000      	movs	r0, #0
  404c28:	497f      	ldr	r1, [pc, #508]	; (404e28 <_dtoa_r+0x782>)
  404c2a:	f002 f939 	bl	406ea0 <__aeabi_dsub>
  404c2e:	4602      	mov	r2, r0
  404c30:	460b      	mov	r3, r1
  404c32:	4630      	mov	r0, r6
  404c34:	4639      	mov	r1, r7
  404c36:	f002 fd59 	bl	4076ec <__aeabi_dcmplt>
  404c3a:	b168      	cbz	r0, 404c58 <_dtoa_r+0x5b2>
  404c3c:	46a0      	mov	r8, r4
  404c3e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  404c42:	3c01      	subs	r4, #1
  404c44:	2b30      	cmp	r3, #48	; 0x30
  404c46:	d0f9      	beq.n	404c3c <_dtoa_r+0x596>
  404c48:	e2c2      	b.n	4051d0 <_dtoa_r+0xb2a>
  404c4a:	2200      	movs	r2, #0
  404c4c:	4b77      	ldr	r3, [pc, #476]	; (404e2c <_dtoa_r+0x786>)
  404c4e:	f002 fadb 	bl	407208 <__aeabi_dmul>
  404c52:	4606      	mov	r6, r0
  404c54:	460f      	mov	r7, r1
  404c56:	e7c2      	b.n	404bde <_dtoa_r+0x538>
  404c58:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404c5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404c60:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404c62:	2b00      	cmp	r3, #0
  404c64:	db7c      	blt.n	404d60 <_dtoa_r+0x6ba>
  404c66:	f1b9 0f0e 	cmp.w	r9, #14
  404c6a:	dc79      	bgt.n	404d60 <_dtoa_r+0x6ba>
  404c6c:	4b70      	ldr	r3, [pc, #448]	; (404e30 <_dtoa_r+0x78a>)
  404c6e:	9f25      	ldr	r7, [sp, #148]	; 0x94
  404c70:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  404c74:	2f00      	cmp	r7, #0
  404c76:	e9d3 4500 	ldrd	r4, r5, [r3]
  404c7a:	da14      	bge.n	404ca6 <_dtoa_r+0x600>
  404c7c:	9f07      	ldr	r7, [sp, #28]
  404c7e:	2f00      	cmp	r7, #0
  404c80:	dc11      	bgt.n	404ca6 <_dtoa_r+0x600>
  404c82:	f040 8176 	bne.w	404f72 <_dtoa_r+0x8cc>
  404c86:	4620      	mov	r0, r4
  404c88:	4629      	mov	r1, r5
  404c8a:	2200      	movs	r2, #0
  404c8c:	4b69      	ldr	r3, [pc, #420]	; (404e34 <_dtoa_r+0x78e>)
  404c8e:	f002 fabb 	bl	407208 <__aeabi_dmul>
  404c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404c96:	f002 fd3d 	bl	407714 <__aeabi_dcmpge>
  404c9a:	9d07      	ldr	r5, [sp, #28]
  404c9c:	462c      	mov	r4, r5
  404c9e:	2800      	cmp	r0, #0
  404ca0:	f040 8169 	bne.w	404f76 <_dtoa_r+0x8d0>
  404ca4:	e171      	b.n	404f8a <_dtoa_r+0x8e4>
  404ca6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404caa:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  404cae:	4622      	mov	r2, r4
  404cb0:	462b      	mov	r3, r5
  404cb2:	4630      	mov	r0, r6
  404cb4:	4639      	mov	r1, r7
  404cb6:	f002 fbd1 	bl	40745c <__aeabi_ddiv>
  404cba:	f002 fd3f 	bl	40773c <__aeabi_d2iz>
  404cbe:	9004      	str	r0, [sp, #16]
  404cc0:	f002 fa3c 	bl	40713c <__aeabi_i2d>
  404cc4:	4622      	mov	r2, r4
  404cc6:	462b      	mov	r3, r5
  404cc8:	f002 fa9e 	bl	407208 <__aeabi_dmul>
  404ccc:	4602      	mov	r2, r0
  404cce:	460b      	mov	r3, r1
  404cd0:	4630      	mov	r0, r6
  404cd2:	4639      	mov	r1, r7
  404cd4:	f002 f8e4 	bl	406ea0 <__aeabi_dsub>
  404cd8:	9f04      	ldr	r7, [sp, #16]
  404cda:	4602      	mov	r2, r0
  404cdc:	f107 0630 	add.w	r6, r7, #48	; 0x30
  404ce0:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404ce2:	f808 6b01 	strb.w	r6, [r8], #1
  404ce6:	ebc7 0608 	rsb	r6, r7, r8
  404cea:	9f07      	ldr	r7, [sp, #28]
  404cec:	460b      	mov	r3, r1
  404cee:	42be      	cmp	r6, r7
  404cf0:	d129      	bne.n	404d46 <_dtoa_r+0x6a0>
  404cf2:	f002 f8d7 	bl	406ea4 <__adddf3>
  404cf6:	4622      	mov	r2, r4
  404cf8:	462b      	mov	r3, r5
  404cfa:	4606      	mov	r6, r0
  404cfc:	460f      	mov	r7, r1
  404cfe:	f002 fd13 	bl	407728 <__aeabi_dcmpgt>
  404d02:	b970      	cbnz	r0, 404d22 <_dtoa_r+0x67c>
  404d04:	4630      	mov	r0, r6
  404d06:	4639      	mov	r1, r7
  404d08:	4622      	mov	r2, r4
  404d0a:	462b      	mov	r3, r5
  404d0c:	f002 fce4 	bl	4076d8 <__aeabi_dcmpeq>
  404d10:	2800      	cmp	r0, #0
  404d12:	f000 825f 	beq.w	4051d4 <_dtoa_r+0xb2e>
  404d16:	9f04      	ldr	r7, [sp, #16]
  404d18:	07fb      	lsls	r3, r7, #31
  404d1a:	d402      	bmi.n	404d22 <_dtoa_r+0x67c>
  404d1c:	e25a      	b.n	4051d4 <_dtoa_r+0xb2e>
  404d1e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  404d22:	4643      	mov	r3, r8
  404d24:	4698      	mov	r8, r3
  404d26:	f818 2c01 	ldrb.w	r2, [r8, #-1]
  404d2a:	3b01      	subs	r3, #1
  404d2c:	2a39      	cmp	r2, #57	; 0x39
  404d2e:	d106      	bne.n	404d3e <_dtoa_r+0x698>
  404d30:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404d32:	429f      	cmp	r7, r3
  404d34:	d1f6      	bne.n	404d24 <_dtoa_r+0x67e>
  404d36:	2230      	movs	r2, #48	; 0x30
  404d38:	f109 0901 	add.w	r9, r9, #1
  404d3c:	703a      	strb	r2, [r7, #0]
  404d3e:	781a      	ldrb	r2, [r3, #0]
  404d40:	3201      	adds	r2, #1
  404d42:	701a      	strb	r2, [r3, #0]
  404d44:	e246      	b.n	4051d4 <_dtoa_r+0xb2e>
  404d46:	2200      	movs	r2, #0
  404d48:	4b38      	ldr	r3, [pc, #224]	; (404e2c <_dtoa_r+0x786>)
  404d4a:	f002 fa5d 	bl	407208 <__aeabi_dmul>
  404d4e:	2200      	movs	r2, #0
  404d50:	2300      	movs	r3, #0
  404d52:	4606      	mov	r6, r0
  404d54:	460f      	mov	r7, r1
  404d56:	f002 fcbf 	bl	4076d8 <__aeabi_dcmpeq>
  404d5a:	2800      	cmp	r0, #0
  404d5c:	d0a7      	beq.n	404cae <_dtoa_r+0x608>
  404d5e:	e239      	b.n	4051d4 <_dtoa_r+0xb2e>
  404d60:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  404d62:	2f00      	cmp	r7, #0
  404d64:	d030      	beq.n	404dc8 <_dtoa_r+0x722>
  404d66:	9f24      	ldr	r7, [sp, #144]	; 0x90
  404d68:	2f01      	cmp	r7, #1
  404d6a:	dc0a      	bgt.n	404d82 <_dtoa_r+0x6dc>
  404d6c:	9f15      	ldr	r7, [sp, #84]	; 0x54
  404d6e:	b117      	cbz	r7, 404d76 <_dtoa_r+0x6d0>
  404d70:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404d74:	e002      	b.n	404d7c <_dtoa_r+0x6d6>
  404d76:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404d78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404d7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404d7e:	9e08      	ldr	r6, [sp, #32]
  404d80:	e016      	b.n	404db0 <_dtoa_r+0x70a>
  404d82:	9f07      	ldr	r7, [sp, #28]
  404d84:	1e7d      	subs	r5, r7, #1
  404d86:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404d88:	42af      	cmp	r7, r5
  404d8a:	db01      	blt.n	404d90 <_dtoa_r+0x6ea>
  404d8c:	1b7d      	subs	r5, r7, r5
  404d8e:	e006      	b.n	404d9e <_dtoa_r+0x6f8>
  404d90:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404d92:	950e      	str	r5, [sp, #56]	; 0x38
  404d94:	1beb      	subs	r3, r5, r7
  404d96:	9f11      	ldr	r7, [sp, #68]	; 0x44
  404d98:	2500      	movs	r5, #0
  404d9a:	441f      	add	r7, r3
  404d9c:	9711      	str	r7, [sp, #68]	; 0x44
  404d9e:	9f07      	ldr	r7, [sp, #28]
  404da0:	2f00      	cmp	r7, #0
  404da2:	da03      	bge.n	404dac <_dtoa_r+0x706>
  404da4:	9808      	ldr	r0, [sp, #32]
  404da6:	2300      	movs	r3, #0
  404da8:	1bc6      	subs	r6, r0, r7
  404daa:	e001      	b.n	404db0 <_dtoa_r+0x70a>
  404dac:	9e08      	ldr	r6, [sp, #32]
  404dae:	9b07      	ldr	r3, [sp, #28]
  404db0:	9f08      	ldr	r7, [sp, #32]
  404db2:	4650      	mov	r0, sl
  404db4:	441f      	add	r7, r3
  404db6:	9708      	str	r7, [sp, #32]
  404db8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404dba:	2101      	movs	r1, #1
  404dbc:	441f      	add	r7, r3
  404dbe:	970a      	str	r7, [sp, #40]	; 0x28
  404dc0:	f000 feac 	bl	405b1c <__i2b>
  404dc4:	4604      	mov	r4, r0
  404dc6:	e002      	b.n	404dce <_dtoa_r+0x728>
  404dc8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404dca:	9e08      	ldr	r6, [sp, #32]
  404dcc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404dce:	b16e      	cbz	r6, 404dec <_dtoa_r+0x746>
  404dd0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404dd2:	2f00      	cmp	r7, #0
  404dd4:	dd0a      	ble.n	404dec <_dtoa_r+0x746>
  404dd6:	463b      	mov	r3, r7
  404dd8:	9f08      	ldr	r7, [sp, #32]
  404dda:	42b3      	cmp	r3, r6
  404ddc:	bfa8      	it	ge
  404dde:	4633      	movge	r3, r6
  404de0:	1aff      	subs	r7, r7, r3
  404de2:	9708      	str	r7, [sp, #32]
  404de4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404de6:	1af6      	subs	r6, r6, r3
  404de8:	1aff      	subs	r7, r7, r3
  404dea:	970a      	str	r7, [sp, #40]	; 0x28
  404dec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404dee:	2f00      	cmp	r7, #0
  404df0:	dd28      	ble.n	404e44 <_dtoa_r+0x79e>
  404df2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  404df4:	b307      	cbz	r7, 404e38 <_dtoa_r+0x792>
  404df6:	2d00      	cmp	r5, #0
  404df8:	dd10      	ble.n	404e1c <_dtoa_r+0x776>
  404dfa:	4621      	mov	r1, r4
  404dfc:	462a      	mov	r2, r5
  404dfe:	4650      	mov	r0, sl
  404e00:	f000 ff2d 	bl	405c5e <__pow5mult>
  404e04:	4604      	mov	r4, r0
  404e06:	465a      	mov	r2, fp
  404e08:	4621      	mov	r1, r4
  404e0a:	4650      	mov	r0, sl
  404e0c:	f000 fe8f 	bl	405b2e <__multiply>
  404e10:	4659      	mov	r1, fp
  404e12:	4607      	mov	r7, r0
  404e14:	4650      	mov	r0, sl
  404e16:	f000 fdaf 	bl	405978 <_Bfree>
  404e1a:	46bb      	mov	fp, r7
  404e1c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404e1e:	1b7a      	subs	r2, r7, r5
  404e20:	d010      	beq.n	404e44 <_dtoa_r+0x79e>
  404e22:	4650      	mov	r0, sl
  404e24:	4659      	mov	r1, fp
  404e26:	e00a      	b.n	404e3e <_dtoa_r+0x798>
  404e28:	3fe00000 	.word	0x3fe00000
  404e2c:	40240000 	.word	0x40240000
  404e30:	00407ff0 	.word	0x00407ff0
  404e34:	40140000 	.word	0x40140000
  404e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404e3a:	4650      	mov	r0, sl
  404e3c:	4659      	mov	r1, fp
  404e3e:	f000 ff0e 	bl	405c5e <__pow5mult>
  404e42:	4683      	mov	fp, r0
  404e44:	4650      	mov	r0, sl
  404e46:	2101      	movs	r1, #1
  404e48:	f000 fe68 	bl	405b1c <__i2b>
  404e4c:	9f11      	ldr	r7, [sp, #68]	; 0x44
  404e4e:	4605      	mov	r5, r0
  404e50:	2f00      	cmp	r7, #0
  404e52:	dd05      	ble.n	404e60 <_dtoa_r+0x7ba>
  404e54:	4629      	mov	r1, r5
  404e56:	4650      	mov	r0, sl
  404e58:	463a      	mov	r2, r7
  404e5a:	f000 ff00 	bl	405c5e <__pow5mult>
  404e5e:	4605      	mov	r5, r0
  404e60:	9f24      	ldr	r7, [sp, #144]	; 0x90
  404e62:	2f01      	cmp	r7, #1
  404e64:	dc12      	bgt.n	404e8c <_dtoa_r+0x7e6>
  404e66:	9804      	ldr	r0, [sp, #16]
  404e68:	b980      	cbnz	r0, 404e8c <_dtoa_r+0x7e6>
  404e6a:	9905      	ldr	r1, [sp, #20]
  404e6c:	f3c1 0313 	ubfx	r3, r1, #0, #20
  404e70:	b973      	cbnz	r3, 404e90 <_dtoa_r+0x7ea>
  404e72:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  404e76:	0d3f      	lsrs	r7, r7, #20
  404e78:	053f      	lsls	r7, r7, #20
  404e7a:	b157      	cbz	r7, 404e92 <_dtoa_r+0x7ec>
  404e7c:	9f08      	ldr	r7, [sp, #32]
  404e7e:	3701      	adds	r7, #1
  404e80:	9708      	str	r7, [sp, #32]
  404e82:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404e84:	3701      	adds	r7, #1
  404e86:	970a      	str	r7, [sp, #40]	; 0x28
  404e88:	2701      	movs	r7, #1
  404e8a:	e002      	b.n	404e92 <_dtoa_r+0x7ec>
  404e8c:	2700      	movs	r7, #0
  404e8e:	e000      	b.n	404e92 <_dtoa_r+0x7ec>
  404e90:	9f04      	ldr	r7, [sp, #16]
  404e92:	9811      	ldr	r0, [sp, #68]	; 0x44
  404e94:	b140      	cbz	r0, 404ea8 <_dtoa_r+0x802>
  404e96:	692b      	ldr	r3, [r5, #16]
  404e98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  404e9c:	6918      	ldr	r0, [r3, #16]
  404e9e:	f000 fdf0 	bl	405a82 <__hi0bits>
  404ea2:	f1c0 0020 	rsb	r0, r0, #32
  404ea6:	e000      	b.n	404eaa <_dtoa_r+0x804>
  404ea8:	2001      	movs	r0, #1
  404eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404eac:	4403      	add	r3, r0
  404eae:	f013 031f 	ands.w	r3, r3, #31
  404eb2:	d00f      	beq.n	404ed4 <_dtoa_r+0x82e>
  404eb4:	f1c3 0220 	rsb	r2, r3, #32
  404eb8:	2a04      	cmp	r2, #4
  404eba:	dd09      	ble.n	404ed0 <_dtoa_r+0x82a>
  404ebc:	9908      	ldr	r1, [sp, #32]
  404ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404ec0:	f1c3 031c 	rsb	r3, r3, #28
  404ec4:	4419      	add	r1, r3
  404ec6:	441a      	add	r2, r3
  404ec8:	9108      	str	r1, [sp, #32]
  404eca:	441e      	add	r6, r3
  404ecc:	920a      	str	r2, [sp, #40]	; 0x28
  404ece:	e009      	b.n	404ee4 <_dtoa_r+0x83e>
  404ed0:	d008      	beq.n	404ee4 <_dtoa_r+0x83e>
  404ed2:	4613      	mov	r3, r2
  404ed4:	9808      	ldr	r0, [sp, #32]
  404ed6:	990a      	ldr	r1, [sp, #40]	; 0x28
  404ed8:	331c      	adds	r3, #28
  404eda:	4418      	add	r0, r3
  404edc:	4419      	add	r1, r3
  404ede:	9008      	str	r0, [sp, #32]
  404ee0:	441e      	add	r6, r3
  404ee2:	910a      	str	r1, [sp, #40]	; 0x28
  404ee4:	9a08      	ldr	r2, [sp, #32]
  404ee6:	2a00      	cmp	r2, #0
  404ee8:	dd04      	ble.n	404ef4 <_dtoa_r+0x84e>
  404eea:	4659      	mov	r1, fp
  404eec:	4650      	mov	r0, sl
  404eee:	f000 fef5 	bl	405cdc <__lshift>
  404ef2:	4683      	mov	fp, r0
  404ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404ef6:	2b00      	cmp	r3, #0
  404ef8:	dd05      	ble.n	404f06 <_dtoa_r+0x860>
  404efa:	4629      	mov	r1, r5
  404efc:	4650      	mov	r0, sl
  404efe:	461a      	mov	r2, r3
  404f00:	f000 feec 	bl	405cdc <__lshift>
  404f04:	4605      	mov	r5, r0
  404f06:	9814      	ldr	r0, [sp, #80]	; 0x50
  404f08:	b1e0      	cbz	r0, 404f44 <_dtoa_r+0x89e>
  404f0a:	4658      	mov	r0, fp
  404f0c:	4629      	mov	r1, r5
  404f0e:	f000 ff38 	bl	405d82 <__mcmp>
  404f12:	2800      	cmp	r0, #0
  404f14:	da16      	bge.n	404f44 <_dtoa_r+0x89e>
  404f16:	4659      	mov	r1, fp
  404f18:	4650      	mov	r0, sl
  404f1a:	220a      	movs	r2, #10
  404f1c:	2300      	movs	r3, #0
  404f1e:	f000 fd34 	bl	40598a <__multadd>
  404f22:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404f24:	f109 39ff 	add.w	r9, r9, #4294967295
  404f28:	4683      	mov	fp, r0
  404f2a:	b149      	cbz	r1, 404f40 <_dtoa_r+0x89a>
  404f2c:	4621      	mov	r1, r4
  404f2e:	220a      	movs	r2, #10
  404f30:	4650      	mov	r0, sl
  404f32:	2300      	movs	r3, #0
  404f34:	f000 fd29 	bl	40598a <__multadd>
  404f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404f3a:	4604      	mov	r4, r0
  404f3c:	9207      	str	r2, [sp, #28]
  404f3e:	e001      	b.n	404f44 <_dtoa_r+0x89e>
  404f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404f42:	9307      	str	r3, [sp, #28]
  404f44:	9807      	ldr	r0, [sp, #28]
  404f46:	2800      	cmp	r0, #0
  404f48:	dc29      	bgt.n	404f9e <_dtoa_r+0x8f8>
  404f4a:	9924      	ldr	r1, [sp, #144]	; 0x90
  404f4c:	2902      	cmp	r1, #2
  404f4e:	dd26      	ble.n	404f9e <_dtoa_r+0x8f8>
  404f50:	b988      	cbnz	r0, 404f76 <_dtoa_r+0x8d0>
  404f52:	4629      	mov	r1, r5
  404f54:	2205      	movs	r2, #5
  404f56:	9b07      	ldr	r3, [sp, #28]
  404f58:	4650      	mov	r0, sl
  404f5a:	f000 fd16 	bl	40598a <__multadd>
  404f5e:	4605      	mov	r5, r0
  404f60:	4629      	mov	r1, r5
  404f62:	4658      	mov	r0, fp
  404f64:	f000 ff0d 	bl	405d82 <__mcmp>
  404f68:	2800      	cmp	r0, #0
  404f6a:	dc0e      	bgt.n	404f8a <_dtoa_r+0x8e4>
  404f6c:	e003      	b.n	404f76 <_dtoa_r+0x8d0>
  404f6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404f70:	e000      	b.n	404f74 <_dtoa_r+0x8ce>
  404f72:	2500      	movs	r5, #0
  404f74:	462c      	mov	r4, r5
  404f76:	9f25      	ldr	r7, [sp, #148]	; 0x94
  404f78:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404f7c:	ea6f 0907 	mvn.w	r9, r7
  404f80:	e00a      	b.n	404f98 <_dtoa_r+0x8f2>
  404f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404f84:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  404f88:	462c      	mov	r4, r5
  404f8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404f8c:	2331      	movs	r3, #49	; 0x31
  404f8e:	f107 0801 	add.w	r8, r7, #1
  404f92:	703b      	strb	r3, [r7, #0]
  404f94:	f109 0901 	add.w	r9, r9, #1
  404f98:	4627      	mov	r7, r4
  404f9a:	2400      	movs	r4, #0
  404f9c:	e107      	b.n	4051ae <_dtoa_r+0xb08>
  404f9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404fa0:	2800      	cmp	r0, #0
  404fa2:	f000 80bb 	beq.w	40511c <_dtoa_r+0xa76>
  404fa6:	2e00      	cmp	r6, #0
  404fa8:	dd05      	ble.n	404fb6 <_dtoa_r+0x910>
  404faa:	4621      	mov	r1, r4
  404fac:	4650      	mov	r0, sl
  404fae:	4632      	mov	r2, r6
  404fb0:	f000 fe94 	bl	405cdc <__lshift>
  404fb4:	4604      	mov	r4, r0
  404fb6:	b19f      	cbz	r7, 404fe0 <_dtoa_r+0x93a>
  404fb8:	6861      	ldr	r1, [r4, #4]
  404fba:	4650      	mov	r0, sl
  404fbc:	f000 fcb6 	bl	40592c <_Balloc>
  404fc0:	6922      	ldr	r2, [r4, #16]
  404fc2:	4606      	mov	r6, r0
  404fc4:	3202      	adds	r2, #2
  404fc6:	f104 010c 	add.w	r1, r4, #12
  404fca:	0092      	lsls	r2, r2, #2
  404fcc:	300c      	adds	r0, #12
  404fce:	f7fe fa2b 	bl	403428 <memcpy>
  404fd2:	4650      	mov	r0, sl
  404fd4:	4631      	mov	r1, r6
  404fd6:	2201      	movs	r2, #1
  404fd8:	f000 fe80 	bl	405cdc <__lshift>
  404fdc:	4607      	mov	r7, r0
  404fde:	e000      	b.n	404fe2 <_dtoa_r+0x93c>
  404fe0:	4627      	mov	r7, r4
  404fe2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404fe4:	4629      	mov	r1, r5
  404fe6:	4658      	mov	r0, fp
  404fe8:	f7ff face 	bl	404588 <quorem>
  404fec:	4621      	mov	r1, r4
  404fee:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  404ff2:	4680      	mov	r8, r0
  404ff4:	4658      	mov	r0, fp
  404ff6:	f8cd c008 	str.w	ip, [sp, #8]
  404ffa:	f000 fec2 	bl	405d82 <__mcmp>
  404ffe:	463a      	mov	r2, r7
  405000:	9008      	str	r0, [sp, #32]
  405002:	4629      	mov	r1, r5
  405004:	4650      	mov	r0, sl
  405006:	f000 fed9 	bl	405dbc <__mdiff>
  40500a:	68c3      	ldr	r3, [r0, #12]
  40500c:	4602      	mov	r2, r0
  40500e:	f8dd c008 	ldr.w	ip, [sp, #8]
  405012:	b94b      	cbnz	r3, 405028 <_dtoa_r+0x982>
  405014:	4611      	mov	r1, r2
  405016:	4658      	mov	r0, fp
  405018:	9203      	str	r2, [sp, #12]
  40501a:	f000 feb2 	bl	405d82 <__mcmp>
  40501e:	9a03      	ldr	r2, [sp, #12]
  405020:	4603      	mov	r3, r0
  405022:	f8dd c008 	ldr.w	ip, [sp, #8]
  405026:	e000      	b.n	40502a <_dtoa_r+0x984>
  405028:	2301      	movs	r3, #1
  40502a:	4650      	mov	r0, sl
  40502c:	4611      	mov	r1, r2
  40502e:	9303      	str	r3, [sp, #12]
  405030:	f8cd c008 	str.w	ip, [sp, #8]
  405034:	f000 fca0 	bl	405978 <_Bfree>
  405038:	9b03      	ldr	r3, [sp, #12]
  40503a:	f8dd c008 	ldr.w	ip, [sp, #8]
  40503e:	b963      	cbnz	r3, 40505a <_dtoa_r+0x9b4>
  405040:	9924      	ldr	r1, [sp, #144]	; 0x90
  405042:	b951      	cbnz	r1, 40505a <_dtoa_r+0x9b4>
  405044:	9804      	ldr	r0, [sp, #16]
  405046:	f000 0201 	and.w	r2, r0, #1
  40504a:	b932      	cbnz	r2, 40505a <_dtoa_r+0x9b4>
  40504c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  405050:	d035      	beq.n	4050be <_dtoa_r+0xa18>
  405052:	9b08      	ldr	r3, [sp, #32]
  405054:	2b00      	cmp	r3, #0
  405056:	dc24      	bgt.n	4050a2 <_dtoa_r+0x9fc>
  405058:	e025      	b.n	4050a6 <_dtoa_r+0xa00>
  40505a:	9808      	ldr	r0, [sp, #32]
  40505c:	2800      	cmp	r0, #0
  40505e:	da02      	bge.n	405066 <_dtoa_r+0x9c0>
  405060:	2b00      	cmp	r3, #0
  405062:	dc08      	bgt.n	405076 <_dtoa_r+0x9d0>
  405064:	e01f      	b.n	4050a6 <_dtoa_r+0xa00>
  405066:	d123      	bne.n	4050b0 <_dtoa_r+0xa0a>
  405068:	9924      	ldr	r1, [sp, #144]	; 0x90
  40506a:	bb09      	cbnz	r1, 4050b0 <_dtoa_r+0xa0a>
  40506c:	9804      	ldr	r0, [sp, #16]
  40506e:	f000 0201 	and.w	r2, r0, #1
  405072:	b9ea      	cbnz	r2, 4050b0 <_dtoa_r+0xa0a>
  405074:	e7f4      	b.n	405060 <_dtoa_r+0x9ba>
  405076:	4659      	mov	r1, fp
  405078:	2201      	movs	r2, #1
  40507a:	4650      	mov	r0, sl
  40507c:	f8cd c008 	str.w	ip, [sp, #8]
  405080:	f000 fe2c 	bl	405cdc <__lshift>
  405084:	4629      	mov	r1, r5
  405086:	4683      	mov	fp, r0
  405088:	f000 fe7b 	bl	405d82 <__mcmp>
  40508c:	2800      	cmp	r0, #0
  40508e:	f8dd c008 	ldr.w	ip, [sp, #8]
  405092:	dc03      	bgt.n	40509c <_dtoa_r+0x9f6>
  405094:	d107      	bne.n	4050a6 <_dtoa_r+0xa00>
  405096:	f01c 0f01 	tst.w	ip, #1
  40509a:	d004      	beq.n	4050a6 <_dtoa_r+0xa00>
  40509c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4050a0:	d00d      	beq.n	4050be <_dtoa_r+0xa18>
  4050a2:	f108 0c31 	add.w	ip, r8, #49	; 0x31
  4050a6:	f106 0801 	add.w	r8, r6, #1
  4050aa:	f886 c000 	strb.w	ip, [r6]
  4050ae:	e07e      	b.n	4051ae <_dtoa_r+0xb08>
  4050b0:	2b00      	cmp	r3, #0
  4050b2:	f106 0801 	add.w	r8, r6, #1
  4050b6:	dd09      	ble.n	4050cc <_dtoa_r+0xa26>
  4050b8:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  4050bc:	d103      	bne.n	4050c6 <_dtoa_r+0xa20>
  4050be:	2339      	movs	r3, #57	; 0x39
  4050c0:	7033      	strb	r3, [r6, #0]
  4050c2:	3601      	adds	r6, #1
  4050c4:	e05b      	b.n	40517e <_dtoa_r+0xad8>
  4050c6:	f10c 0301 	add.w	r3, ip, #1
  4050ca:	e068      	b.n	40519e <_dtoa_r+0xaf8>
  4050cc:	9909      	ldr	r1, [sp, #36]	; 0x24
  4050ce:	9a07      	ldr	r2, [sp, #28]
  4050d0:	ebc1 0308 	rsb	r3, r1, r8
  4050d4:	4646      	mov	r6, r8
  4050d6:	4293      	cmp	r3, r2
  4050d8:	f806 cc01 	strb.w	ip, [r6, #-1]
  4050dc:	d03c      	beq.n	405158 <_dtoa_r+0xab2>
  4050de:	4659      	mov	r1, fp
  4050e0:	220a      	movs	r2, #10
  4050e2:	2300      	movs	r3, #0
  4050e4:	4650      	mov	r0, sl
  4050e6:	f000 fc50 	bl	40598a <__multadd>
  4050ea:	42bc      	cmp	r4, r7
  4050ec:	4683      	mov	fp, r0
  4050ee:	4621      	mov	r1, r4
  4050f0:	4650      	mov	r0, sl
  4050f2:	f04f 020a 	mov.w	r2, #10
  4050f6:	f04f 0300 	mov.w	r3, #0
  4050fa:	d104      	bne.n	405106 <_dtoa_r+0xa60>
  4050fc:	f000 fc45 	bl	40598a <__multadd>
  405100:	4604      	mov	r4, r0
  405102:	4607      	mov	r7, r0
  405104:	e76e      	b.n	404fe4 <_dtoa_r+0x93e>
  405106:	f000 fc40 	bl	40598a <__multadd>
  40510a:	4639      	mov	r1, r7
  40510c:	4604      	mov	r4, r0
  40510e:	220a      	movs	r2, #10
  405110:	4650      	mov	r0, sl
  405112:	2300      	movs	r3, #0
  405114:	f000 fc39 	bl	40598a <__multadd>
  405118:	4607      	mov	r7, r0
  40511a:	e763      	b.n	404fe4 <_dtoa_r+0x93e>
  40511c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40511e:	4658      	mov	r0, fp
  405120:	4629      	mov	r1, r5
  405122:	f7ff fa31 	bl	404588 <quorem>
  405126:	9f09      	ldr	r7, [sp, #36]	; 0x24
  405128:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  40512c:	f807 c006 	strb.w	ip, [r7, r6]
  405130:	9f07      	ldr	r7, [sp, #28]
  405132:	3601      	adds	r6, #1
  405134:	42be      	cmp	r6, r7
  405136:	db07      	blt.n	405148 <_dtoa_r+0xaa2>
  405138:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40513a:	2f01      	cmp	r7, #1
  40513c:	bfac      	ite	ge
  40513e:	19f6      	addge	r6, r6, r7
  405140:	3601      	addlt	r6, #1
  405142:	4627      	mov	r7, r4
  405144:	2400      	movs	r4, #0
  405146:	e007      	b.n	405158 <_dtoa_r+0xab2>
  405148:	4659      	mov	r1, fp
  40514a:	4650      	mov	r0, sl
  40514c:	220a      	movs	r2, #10
  40514e:	2300      	movs	r3, #0
  405150:	f000 fc1b 	bl	40598a <__multadd>
  405154:	4683      	mov	fp, r0
  405156:	e7e2      	b.n	40511e <_dtoa_r+0xa78>
  405158:	4659      	mov	r1, fp
  40515a:	2201      	movs	r2, #1
  40515c:	4650      	mov	r0, sl
  40515e:	f8cd c008 	str.w	ip, [sp, #8]
  405162:	f000 fdbb 	bl	405cdc <__lshift>
  405166:	4629      	mov	r1, r5
  405168:	4683      	mov	fp, r0
  40516a:	f000 fe0a 	bl	405d82 <__mcmp>
  40516e:	2800      	cmp	r0, #0
  405170:	f8dd c008 	ldr.w	ip, [sp, #8]
  405174:	dc03      	bgt.n	40517e <_dtoa_r+0xad8>
  405176:	d114      	bne.n	4051a2 <_dtoa_r+0xafc>
  405178:	f01c 0f01 	tst.w	ip, #1
  40517c:	d011      	beq.n	4051a2 <_dtoa_r+0xafc>
  40517e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  405182:	46b0      	mov	r8, r6
  405184:	2b39      	cmp	r3, #57	; 0x39
  405186:	f106 36ff 	add.w	r6, r6, #4294967295
  40518a:	d107      	bne.n	40519c <_dtoa_r+0xaf6>
  40518c:	9809      	ldr	r0, [sp, #36]	; 0x24
  40518e:	42b0      	cmp	r0, r6
  405190:	d1f5      	bne.n	40517e <_dtoa_r+0xad8>
  405192:	2331      	movs	r3, #49	; 0x31
  405194:	f109 0901 	add.w	r9, r9, #1
  405198:	7003      	strb	r3, [r0, #0]
  40519a:	e008      	b.n	4051ae <_dtoa_r+0xb08>
  40519c:	3301      	adds	r3, #1
  40519e:	7033      	strb	r3, [r6, #0]
  4051a0:	e005      	b.n	4051ae <_dtoa_r+0xb08>
  4051a2:	46b0      	mov	r8, r6
  4051a4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  4051a8:	3e01      	subs	r6, #1
  4051aa:	2b30      	cmp	r3, #48	; 0x30
  4051ac:	d0f9      	beq.n	4051a2 <_dtoa_r+0xafc>
  4051ae:	4650      	mov	r0, sl
  4051b0:	4629      	mov	r1, r5
  4051b2:	f000 fbe1 	bl	405978 <_Bfree>
  4051b6:	b16f      	cbz	r7, 4051d4 <_dtoa_r+0xb2e>
  4051b8:	b12c      	cbz	r4, 4051c6 <_dtoa_r+0xb20>
  4051ba:	42bc      	cmp	r4, r7
  4051bc:	d003      	beq.n	4051c6 <_dtoa_r+0xb20>
  4051be:	4650      	mov	r0, sl
  4051c0:	4621      	mov	r1, r4
  4051c2:	f000 fbd9 	bl	405978 <_Bfree>
  4051c6:	4650      	mov	r0, sl
  4051c8:	4639      	mov	r1, r7
  4051ca:	f000 fbd5 	bl	405978 <_Bfree>
  4051ce:	e001      	b.n	4051d4 <_dtoa_r+0xb2e>
  4051d0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  4051d4:	4650      	mov	r0, sl
  4051d6:	4659      	mov	r1, fp
  4051d8:	f000 fbce 	bl	405978 <_Bfree>
  4051dc:	2300      	movs	r3, #0
  4051de:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4051e0:	f888 3000 	strb.w	r3, [r8]
  4051e4:	f109 0301 	add.w	r3, r9, #1
  4051e8:	603b      	str	r3, [r7, #0]
  4051ea:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  4051ec:	b127      	cbz	r7, 4051f8 <_dtoa_r+0xb52>
  4051ee:	f8c7 8000 	str.w	r8, [r7]
  4051f2:	e001      	b.n	4051f8 <_dtoa_r+0xb52>
  4051f4:	4802      	ldr	r0, [pc, #8]	; (405200 <_dtoa_r+0xb5a>)
  4051f6:	e000      	b.n	4051fa <_dtoa_r+0xb54>
  4051f8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4051fa:	b01b      	add	sp, #108	; 0x6c
  4051fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405200:	00407ec4 	.word	0x00407ec4
  405204:	f3af 8000 	nop.w

00405208 <__libc_fini_array>:
  405208:	b538      	push	{r3, r4, r5, lr}
  40520a:	4d08      	ldr	r5, [pc, #32]	; (40522c <__libc_fini_array+0x24>)
  40520c:	4c08      	ldr	r4, [pc, #32]	; (405230 <__libc_fini_array+0x28>)
  40520e:	1b64      	subs	r4, r4, r5
  405210:	10a4      	asrs	r4, r4, #2
  405212:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  405216:	b124      	cbz	r4, 405222 <__libc_fini_array+0x1a>
  405218:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40521c:	3c01      	subs	r4, #1
  40521e:	4798      	blx	r3
  405220:	e7f9      	b.n	405216 <__libc_fini_array+0xe>
  405222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405226:	f002 bf89 	b.w	40813c <_fini>
  40522a:	bf00      	nop
  40522c:	00408148 	.word	0x00408148
  405230:	0040814c 	.word	0x0040814c

00405234 <_malloc_trim_r>:
  405234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405236:	4d23      	ldr	r5, [pc, #140]	; (4052c4 <_malloc_trim_r+0x90>)
  405238:	460e      	mov	r6, r1
  40523a:	4604      	mov	r4, r0
  40523c:	f000 fb73 	bl	405926 <__malloc_lock>
  405240:	68ab      	ldr	r3, [r5, #8]
  405242:	685f      	ldr	r7, [r3, #4]
  405244:	f027 0703 	bic.w	r7, r7, #3
  405248:	1bbe      	subs	r6, r7, r6
  40524a:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
  40524e:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
  405252:	f026 060f 	bic.w	r6, r6, #15
  405256:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
  40525a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  40525e:	da04      	bge.n	40526a <_malloc_trim_r+0x36>
  405260:	4620      	mov	r0, r4
  405262:	f000 fb61 	bl	405928 <__malloc_unlock>
  405266:	2000      	movs	r0, #0
  405268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40526a:	4620      	mov	r0, r4
  40526c:	2100      	movs	r1, #0
  40526e:	f001 f913 	bl	406498 <_sbrk_r>
  405272:	68ab      	ldr	r3, [r5, #8]
  405274:	443b      	add	r3, r7
  405276:	4298      	cmp	r0, r3
  405278:	d1f2      	bne.n	405260 <_malloc_trim_r+0x2c>
  40527a:	4620      	mov	r0, r4
  40527c:	4271      	negs	r1, r6
  40527e:	f001 f90b 	bl	406498 <_sbrk_r>
  405282:	3001      	adds	r0, #1
  405284:	d110      	bne.n	4052a8 <_malloc_trim_r+0x74>
  405286:	4620      	mov	r0, r4
  405288:	2100      	movs	r1, #0
  40528a:	f001 f905 	bl	406498 <_sbrk_r>
  40528e:	68ab      	ldr	r3, [r5, #8]
  405290:	1ac2      	subs	r2, r0, r3
  405292:	2a0f      	cmp	r2, #15
  405294:	dde4      	ble.n	405260 <_malloc_trim_r+0x2c>
  405296:	490c      	ldr	r1, [pc, #48]	; (4052c8 <_malloc_trim_r+0x94>)
  405298:	f042 0201 	orr.w	r2, r2, #1
  40529c:	6809      	ldr	r1, [r1, #0]
  40529e:	605a      	str	r2, [r3, #4]
  4052a0:	1a40      	subs	r0, r0, r1
  4052a2:	490a      	ldr	r1, [pc, #40]	; (4052cc <_malloc_trim_r+0x98>)
  4052a4:	6008      	str	r0, [r1, #0]
  4052a6:	e7db      	b.n	405260 <_malloc_trim_r+0x2c>
  4052a8:	68ab      	ldr	r3, [r5, #8]
  4052aa:	1bbf      	subs	r7, r7, r6
  4052ac:	f047 0701 	orr.w	r7, r7, #1
  4052b0:	605f      	str	r7, [r3, #4]
  4052b2:	4b06      	ldr	r3, [pc, #24]	; (4052cc <_malloc_trim_r+0x98>)
  4052b4:	4620      	mov	r0, r4
  4052b6:	681a      	ldr	r2, [r3, #0]
  4052b8:	1b96      	subs	r6, r2, r6
  4052ba:	601e      	str	r6, [r3, #0]
  4052bc:	f000 fb34 	bl	405928 <__malloc_unlock>
  4052c0:	2001      	movs	r0, #1
  4052c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052c4:	20000568 	.word	0x20000568
  4052c8:	20000970 	.word	0x20000970
  4052cc:	20000bd8 	.word	0x20000bd8

004052d0 <_free_r>:
  4052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4052d2:	4606      	mov	r6, r0
  4052d4:	460d      	mov	r5, r1
  4052d6:	2900      	cmp	r1, #0
  4052d8:	f000 80a9 	beq.w	40542e <_free_r+0x15e>
  4052dc:	f000 fb23 	bl	405926 <__malloc_lock>
  4052e0:	f855 cc04 	ldr.w	ip, [r5, #-4]
  4052e4:	4c52      	ldr	r4, [pc, #328]	; (405430 <_free_r+0x160>)
  4052e6:	f1a5 0308 	sub.w	r3, r5, #8
  4052ea:	f02c 0201 	bic.w	r2, ip, #1
  4052ee:	1898      	adds	r0, r3, r2
  4052f0:	68a1      	ldr	r1, [r4, #8]
  4052f2:	6847      	ldr	r7, [r0, #4]
  4052f4:	4288      	cmp	r0, r1
  4052f6:	f027 0703 	bic.w	r7, r7, #3
  4052fa:	f00c 0101 	and.w	r1, ip, #1
  4052fe:	d11b      	bne.n	405338 <_free_r+0x68>
  405300:	443a      	add	r2, r7
  405302:	b939      	cbnz	r1, 405314 <_free_r+0x44>
  405304:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405308:	1a5b      	subs	r3, r3, r1
  40530a:	6898      	ldr	r0, [r3, #8]
  40530c:	440a      	add	r2, r1
  40530e:	68d9      	ldr	r1, [r3, #12]
  405310:	60c1      	str	r1, [r0, #12]
  405312:	6088      	str	r0, [r1, #8]
  405314:	f042 0101 	orr.w	r1, r2, #1
  405318:	6059      	str	r1, [r3, #4]
  40531a:	60a3      	str	r3, [r4, #8]
  40531c:	4b45      	ldr	r3, [pc, #276]	; (405434 <_free_r+0x164>)
  40531e:	681b      	ldr	r3, [r3, #0]
  405320:	429a      	cmp	r2, r3
  405322:	d304      	bcc.n	40532e <_free_r+0x5e>
  405324:	4b44      	ldr	r3, [pc, #272]	; (405438 <_free_r+0x168>)
  405326:	4630      	mov	r0, r6
  405328:	6819      	ldr	r1, [r3, #0]
  40532a:	f7ff ff83 	bl	405234 <_malloc_trim_r>
  40532e:	4630      	mov	r0, r6
  405330:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  405334:	f000 baf8 	b.w	405928 <__malloc_unlock>
  405338:	6047      	str	r7, [r0, #4]
  40533a:	b979      	cbnz	r1, 40535c <_free_r+0x8c>
  40533c:	f855 5c08 	ldr.w	r5, [r5, #-8]
  405340:	f104 0c08 	add.w	ip, r4, #8
  405344:	1b5b      	subs	r3, r3, r5
  405346:	442a      	add	r2, r5
  405348:	689d      	ldr	r5, [r3, #8]
  40534a:	4565      	cmp	r5, ip
  40534c:	d008      	beq.n	405360 <_free_r+0x90>
  40534e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405352:	f8c5 c00c 	str.w	ip, [r5, #12]
  405356:	f8cc 5008 	str.w	r5, [ip, #8]
  40535a:	e002      	b.n	405362 <_free_r+0x92>
  40535c:	2100      	movs	r1, #0
  40535e:	e000      	b.n	405362 <_free_r+0x92>
  405360:	2101      	movs	r1, #1
  405362:	19c5      	adds	r5, r0, r7
  405364:	686d      	ldr	r5, [r5, #4]
  405366:	07ed      	lsls	r5, r5, #31
  405368:	d40e      	bmi.n	405388 <_free_r+0xb8>
  40536a:	443a      	add	r2, r7
  40536c:	6885      	ldr	r5, [r0, #8]
  40536e:	b941      	cbnz	r1, 405382 <_free_r+0xb2>
  405370:	4f32      	ldr	r7, [pc, #200]	; (40543c <_free_r+0x16c>)
  405372:	42bd      	cmp	r5, r7
  405374:	d105      	bne.n	405382 <_free_r+0xb2>
  405376:	6163      	str	r3, [r4, #20]
  405378:	6123      	str	r3, [r4, #16]
  40537a:	2101      	movs	r1, #1
  40537c:	60dd      	str	r5, [r3, #12]
  40537e:	609d      	str	r5, [r3, #8]
  405380:	e002      	b.n	405388 <_free_r+0xb8>
  405382:	68c0      	ldr	r0, [r0, #12]
  405384:	60e8      	str	r0, [r5, #12]
  405386:	6085      	str	r5, [r0, #8]
  405388:	f042 0001 	orr.w	r0, r2, #1
  40538c:	6058      	str	r0, [r3, #4]
  40538e:	509a      	str	r2, [r3, r2]
  405390:	2900      	cmp	r1, #0
  405392:	d1cc      	bne.n	40532e <_free_r+0x5e>
  405394:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405398:	d20e      	bcs.n	4053b8 <_free_r+0xe8>
  40539a:	08d2      	lsrs	r2, r2, #3
  40539c:	1091      	asrs	r1, r2, #2
  40539e:	2001      	movs	r0, #1
  4053a0:	4088      	lsls	r0, r1
  4053a2:	6861      	ldr	r1, [r4, #4]
  4053a4:	4301      	orrs	r1, r0
  4053a6:	6061      	str	r1, [r4, #4]
  4053a8:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
  4053ac:	68a2      	ldr	r2, [r4, #8]
  4053ae:	60dc      	str	r4, [r3, #12]
  4053b0:	609a      	str	r2, [r3, #8]
  4053b2:	60a3      	str	r3, [r4, #8]
  4053b4:	60d3      	str	r3, [r2, #12]
  4053b6:	e7ba      	b.n	40532e <_free_r+0x5e>
  4053b8:	0a51      	lsrs	r1, r2, #9
  4053ba:	2904      	cmp	r1, #4
  4053bc:	d802      	bhi.n	4053c4 <_free_r+0xf4>
  4053be:	0991      	lsrs	r1, r2, #6
  4053c0:	3138      	adds	r1, #56	; 0x38
  4053c2:	e015      	b.n	4053f0 <_free_r+0x120>
  4053c4:	2914      	cmp	r1, #20
  4053c6:	d801      	bhi.n	4053cc <_free_r+0xfc>
  4053c8:	315b      	adds	r1, #91	; 0x5b
  4053ca:	e011      	b.n	4053f0 <_free_r+0x120>
  4053cc:	2954      	cmp	r1, #84	; 0x54
  4053ce:	d802      	bhi.n	4053d6 <_free_r+0x106>
  4053d0:	0b11      	lsrs	r1, r2, #12
  4053d2:	316e      	adds	r1, #110	; 0x6e
  4053d4:	e00c      	b.n	4053f0 <_free_r+0x120>
  4053d6:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  4053da:	d802      	bhi.n	4053e2 <_free_r+0x112>
  4053dc:	0bd1      	lsrs	r1, r2, #15
  4053de:	3177      	adds	r1, #119	; 0x77
  4053e0:	e006      	b.n	4053f0 <_free_r+0x120>
  4053e2:	f240 5054 	movw	r0, #1364	; 0x554
  4053e6:	4281      	cmp	r1, r0
  4053e8:	bf9a      	itte	ls
  4053ea:	0c91      	lsrls	r1, r2, #18
  4053ec:	317c      	addls	r1, #124	; 0x7c
  4053ee:	217e      	movhi	r1, #126	; 0x7e
  4053f0:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
  4053f4:	68a5      	ldr	r5, [r4, #8]
  4053f6:	480e      	ldr	r0, [pc, #56]	; (405430 <_free_r+0x160>)
  4053f8:	42a5      	cmp	r5, r4
  4053fa:	d001      	beq.n	405400 <_free_r+0x130>
  4053fc:	4629      	mov	r1, r5
  4053fe:	e00b      	b.n	405418 <_free_r+0x148>
  405400:	2201      	movs	r2, #1
  405402:	1089      	asrs	r1, r1, #2
  405404:	fa02 f101 	lsl.w	r1, r2, r1
  405408:	6842      	ldr	r2, [r0, #4]
  40540a:	430a      	orrs	r2, r1
  40540c:	6042      	str	r2, [r0, #4]
  40540e:	4629      	mov	r1, r5
  405410:	e008      	b.n	405424 <_free_r+0x154>
  405412:	6889      	ldr	r1, [r1, #8]
  405414:	42a1      	cmp	r1, r4
  405416:	d004      	beq.n	405422 <_free_r+0x152>
  405418:	6848      	ldr	r0, [r1, #4]
  40541a:	f020 0003 	bic.w	r0, r0, #3
  40541e:	4282      	cmp	r2, r0
  405420:	d3f7      	bcc.n	405412 <_free_r+0x142>
  405422:	68cd      	ldr	r5, [r1, #12]
  405424:	60dd      	str	r5, [r3, #12]
  405426:	6099      	str	r1, [r3, #8]
  405428:	60ab      	str	r3, [r5, #8]
  40542a:	60cb      	str	r3, [r1, #12]
  40542c:	e77f      	b.n	40532e <_free_r+0x5e>
  40542e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405430:	20000568 	.word	0x20000568
  405434:	20000974 	.word	0x20000974
  405438:	20000bd4 	.word	0x20000bd4
  40543c:	20000570 	.word	0x20000570

00405440 <_setlocale_r>:
  405440:	b510      	push	{r4, lr}
  405442:	4614      	mov	r4, r2
  405444:	b90a      	cbnz	r2, 40544a <_setlocale_r+0xa>
  405446:	480b      	ldr	r0, [pc, #44]	; (405474 <_setlocale_r+0x34>)
  405448:	bd10      	pop	{r4, pc}
  40544a:	4610      	mov	r0, r2
  40544c:	490a      	ldr	r1, [pc, #40]	; (405478 <_setlocale_r+0x38>)
  40544e:	f001 f833 	bl	4064b8 <strcmp>
  405452:	2800      	cmp	r0, #0
  405454:	d0f7      	beq.n	405446 <_setlocale_r+0x6>
  405456:	4620      	mov	r0, r4
  405458:	4906      	ldr	r1, [pc, #24]	; (405474 <_setlocale_r+0x34>)
  40545a:	f001 f82d 	bl	4064b8 <strcmp>
  40545e:	2800      	cmp	r0, #0
  405460:	d0f1      	beq.n	405446 <_setlocale_r+0x6>
  405462:	4620      	mov	r0, r4
  405464:	4905      	ldr	r1, [pc, #20]	; (40547c <_setlocale_r+0x3c>)
  405466:	f001 f827 	bl	4064b8 <strcmp>
  40546a:	2800      	cmp	r0, #0
  40546c:	4801      	ldr	r0, [pc, #4]	; (405474 <_setlocale_r+0x34>)
  40546e:	bf18      	it	ne
  405470:	2000      	movne	r0, #0
  405472:	bd10      	pop	{r4, pc}
  405474:	00407e70 	.word	0x00407e70
  405478:	00407fd4 	.word	0x00407fd4
  40547c:	00407fdb 	.word	0x00407fdb

00405480 <__locale_charset>:
  405480:	4800      	ldr	r0, [pc, #0]	; (405484 <__locale_charset+0x4>)
  405482:	4770      	bx	lr
  405484:	200004ec 	.word	0x200004ec

00405488 <__locale_mb_cur_max>:
  405488:	4b01      	ldr	r3, [pc, #4]	; (405490 <__locale_mb_cur_max+0x8>)
  40548a:	6a18      	ldr	r0, [r3, #32]
  40548c:	4770      	bx	lr
  40548e:	bf00      	nop
  405490:	200004ec 	.word	0x200004ec

00405494 <__locale_msgcharset>:
  405494:	4800      	ldr	r0, [pc, #0]	; (405498 <__locale_msgcharset+0x4>)
  405496:	4770      	bx	lr
  405498:	20000510 	.word	0x20000510

0040549c <__locale_cjk_lang>:
  40549c:	2000      	movs	r0, #0
  40549e:	4770      	bx	lr

004054a0 <_localeconv_r>:
  4054a0:	4800      	ldr	r0, [pc, #0]	; (4054a4 <_localeconv_r+0x4>)
  4054a2:	4770      	bx	lr
  4054a4:	20000530 	.word	0x20000530

004054a8 <setlocale>:
  4054a8:	460a      	mov	r2, r1
  4054aa:	4903      	ldr	r1, [pc, #12]	; (4054b8 <setlocale+0x10>)
  4054ac:	4603      	mov	r3, r0
  4054ae:	6808      	ldr	r0, [r1, #0]
  4054b0:	4619      	mov	r1, r3
  4054b2:	f7ff bfc5 	b.w	405440 <_setlocale_r>
  4054b6:	bf00      	nop
  4054b8:	200000b8 	.word	0x200000b8

004054bc <localeconv>:
  4054bc:	4800      	ldr	r0, [pc, #0]	; (4054c0 <localeconv+0x4>)
  4054be:	4770      	bx	lr
  4054c0:	20000530 	.word	0x20000530

004054c4 <_malloc_r>:
  4054c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4054c8:	f101 040b 	add.w	r4, r1, #11
  4054cc:	2c16      	cmp	r4, #22
  4054ce:	4607      	mov	r7, r0
  4054d0:	d903      	bls.n	4054da <_malloc_r+0x16>
  4054d2:	f034 0407 	bics.w	r4, r4, #7
  4054d6:	d501      	bpl.n	4054dc <_malloc_r+0x18>
  4054d8:	e002      	b.n	4054e0 <_malloc_r+0x1c>
  4054da:	2410      	movs	r4, #16
  4054dc:	428c      	cmp	r4, r1
  4054de:	d202      	bcs.n	4054e6 <_malloc_r+0x22>
  4054e0:	230c      	movs	r3, #12
  4054e2:	603b      	str	r3, [r7, #0]
  4054e4:	e1de      	b.n	4058a4 <_malloc_r+0x3e0>
  4054e6:	4638      	mov	r0, r7
  4054e8:	f000 fa1d 	bl	405926 <__malloc_lock>
  4054ec:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  4054f0:	4da3      	ldr	r5, [pc, #652]	; (405780 <_malloc_r+0x2bc>)
  4054f2:	d214      	bcs.n	40551e <_malloc_r+0x5a>
  4054f4:	08e2      	lsrs	r2, r4, #3
  4054f6:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  4054fa:	68de      	ldr	r6, [r3, #12]
  4054fc:	429e      	cmp	r6, r3
  4054fe:	d106      	bne.n	40550e <_malloc_r+0x4a>
  405500:	f106 0308 	add.w	r3, r6, #8
  405504:	6976      	ldr	r6, [r6, #20]
  405506:	429e      	cmp	r6, r3
  405508:	bf08      	it	eq
  40550a:	3202      	addeq	r2, #2
  40550c:	d043      	beq.n	405596 <_malloc_r+0xd2>
  40550e:	6873      	ldr	r3, [r6, #4]
  405510:	68f2      	ldr	r2, [r6, #12]
  405512:	68b1      	ldr	r1, [r6, #8]
  405514:	f023 0303 	bic.w	r3, r3, #3
  405518:	60ca      	str	r2, [r1, #12]
  40551a:	6091      	str	r1, [r2, #8]
  40551c:	e05d      	b.n	4055da <_malloc_r+0x116>
  40551e:	0a62      	lsrs	r2, r4, #9
  405520:	d01a      	beq.n	405558 <_malloc_r+0x94>
  405522:	2a04      	cmp	r2, #4
  405524:	d802      	bhi.n	40552c <_malloc_r+0x68>
  405526:	09a2      	lsrs	r2, r4, #6
  405528:	3238      	adds	r2, #56	; 0x38
  40552a:	e018      	b.n	40555e <_malloc_r+0x9a>
  40552c:	2a14      	cmp	r2, #20
  40552e:	d801      	bhi.n	405534 <_malloc_r+0x70>
  405530:	325b      	adds	r2, #91	; 0x5b
  405532:	e014      	b.n	40555e <_malloc_r+0x9a>
  405534:	2a54      	cmp	r2, #84	; 0x54
  405536:	d802      	bhi.n	40553e <_malloc_r+0x7a>
  405538:	0b22      	lsrs	r2, r4, #12
  40553a:	326e      	adds	r2, #110	; 0x6e
  40553c:	e00f      	b.n	40555e <_malloc_r+0x9a>
  40553e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405542:	d802      	bhi.n	40554a <_malloc_r+0x86>
  405544:	0be2      	lsrs	r2, r4, #15
  405546:	3277      	adds	r2, #119	; 0x77
  405548:	e009      	b.n	40555e <_malloc_r+0x9a>
  40554a:	f240 5354 	movw	r3, #1364	; 0x554
  40554e:	429a      	cmp	r2, r3
  405550:	d804      	bhi.n	40555c <_malloc_r+0x98>
  405552:	0ca2      	lsrs	r2, r4, #18
  405554:	327c      	adds	r2, #124	; 0x7c
  405556:	e002      	b.n	40555e <_malloc_r+0x9a>
  405558:	223f      	movs	r2, #63	; 0x3f
  40555a:	e000      	b.n	40555e <_malloc_r+0x9a>
  40555c:	227e      	movs	r2, #126	; 0x7e
  40555e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  405562:	68de      	ldr	r6, [r3, #12]
  405564:	429e      	cmp	r6, r3
  405566:	d015      	beq.n	405594 <_malloc_r+0xd0>
  405568:	6871      	ldr	r1, [r6, #4]
  40556a:	f021 0103 	bic.w	r1, r1, #3
  40556e:	1b08      	subs	r0, r1, r4
  405570:	280f      	cmp	r0, #15
  405572:	dd01      	ble.n	405578 <_malloc_r+0xb4>
  405574:	3a01      	subs	r2, #1
  405576:	e00d      	b.n	405594 <_malloc_r+0xd0>
  405578:	2800      	cmp	r0, #0
  40557a:	db09      	blt.n	405590 <_malloc_r+0xcc>
  40557c:	68f3      	ldr	r3, [r6, #12]
  40557e:	68b2      	ldr	r2, [r6, #8]
  405580:	60d3      	str	r3, [r2, #12]
  405582:	609a      	str	r2, [r3, #8]
  405584:	1873      	adds	r3, r6, r1
  405586:	685a      	ldr	r2, [r3, #4]
  405588:	f042 0201 	orr.w	r2, r2, #1
  40558c:	605a      	str	r2, [r3, #4]
  40558e:	e194      	b.n	4058ba <_malloc_r+0x3f6>
  405590:	68f6      	ldr	r6, [r6, #12]
  405592:	e7e7      	b.n	405564 <_malloc_r+0xa0>
  405594:	3201      	adds	r2, #1
  405596:	497a      	ldr	r1, [pc, #488]	; (405780 <_malloc_r+0x2bc>)
  405598:	692e      	ldr	r6, [r5, #16]
  40559a:	f101 0008 	add.w	r0, r1, #8
  40559e:	4286      	cmp	r6, r0
  4055a0:	4686      	mov	lr, r0
  4055a2:	d06d      	beq.n	405680 <_malloc_r+0x1bc>
  4055a4:	6873      	ldr	r3, [r6, #4]
  4055a6:	f023 0303 	bic.w	r3, r3, #3
  4055aa:	ebc4 0c03 	rsb	ip, r4, r3
  4055ae:	f1bc 0f0f 	cmp.w	ip, #15
  4055b2:	dd0d      	ble.n	4055d0 <_malloc_r+0x10c>
  4055b4:	1933      	adds	r3, r6, r4
  4055b6:	f04c 0201 	orr.w	r2, ip, #1
  4055ba:	f044 0401 	orr.w	r4, r4, #1
  4055be:	6074      	str	r4, [r6, #4]
  4055c0:	614b      	str	r3, [r1, #20]
  4055c2:	610b      	str	r3, [r1, #16]
  4055c4:	60d8      	str	r0, [r3, #12]
  4055c6:	6098      	str	r0, [r3, #8]
  4055c8:	605a      	str	r2, [r3, #4]
  4055ca:	f843 c00c 	str.w	ip, [r3, ip]
  4055ce:	e174      	b.n	4058ba <_malloc_r+0x3f6>
  4055d0:	f1bc 0f00 	cmp.w	ip, #0
  4055d4:	6148      	str	r0, [r1, #20]
  4055d6:	6108      	str	r0, [r1, #16]
  4055d8:	db01      	blt.n	4055de <_malloc_r+0x11a>
  4055da:	4433      	add	r3, r6
  4055dc:	e7d3      	b.n	405586 <_malloc_r+0xc2>
  4055de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4055e2:	d211      	bcs.n	405608 <_malloc_r+0x144>
  4055e4:	08db      	lsrs	r3, r3, #3
  4055e6:	1098      	asrs	r0, r3, #2
  4055e8:	f04f 0c01 	mov.w	ip, #1
  4055ec:	fa0c fc00 	lsl.w	ip, ip, r0
  4055f0:	6848      	ldr	r0, [r1, #4]
  4055f2:	ea4c 0000 	orr.w	r0, ip, r0
  4055f6:	6048      	str	r0, [r1, #4]
  4055f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  4055fc:	688b      	ldr	r3, [r1, #8]
  4055fe:	60f1      	str	r1, [r6, #12]
  405600:	60b3      	str	r3, [r6, #8]
  405602:	608e      	str	r6, [r1, #8]
  405604:	60de      	str	r6, [r3, #12]
  405606:	e03b      	b.n	405680 <_malloc_r+0x1bc>
  405608:	0a58      	lsrs	r0, r3, #9
  40560a:	2804      	cmp	r0, #4
  40560c:	d802      	bhi.n	405614 <_malloc_r+0x150>
  40560e:	0998      	lsrs	r0, r3, #6
  405610:	3038      	adds	r0, #56	; 0x38
  405612:	e015      	b.n	405640 <_malloc_r+0x17c>
  405614:	2814      	cmp	r0, #20
  405616:	d801      	bhi.n	40561c <_malloc_r+0x158>
  405618:	305b      	adds	r0, #91	; 0x5b
  40561a:	e011      	b.n	405640 <_malloc_r+0x17c>
  40561c:	2854      	cmp	r0, #84	; 0x54
  40561e:	d802      	bhi.n	405626 <_malloc_r+0x162>
  405620:	0b18      	lsrs	r0, r3, #12
  405622:	306e      	adds	r0, #110	; 0x6e
  405624:	e00c      	b.n	405640 <_malloc_r+0x17c>
  405626:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  40562a:	d802      	bhi.n	405632 <_malloc_r+0x16e>
  40562c:	0bd8      	lsrs	r0, r3, #15
  40562e:	3077      	adds	r0, #119	; 0x77
  405630:	e006      	b.n	405640 <_malloc_r+0x17c>
  405632:	f240 5154 	movw	r1, #1364	; 0x554
  405636:	4288      	cmp	r0, r1
  405638:	bf9a      	itte	ls
  40563a:	0c98      	lsrls	r0, r3, #18
  40563c:	307c      	addls	r0, #124	; 0x7c
  40563e:	207e      	movhi	r0, #126	; 0x7e
  405640:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
  405644:	f8dc 1008 	ldr.w	r1, [ip, #8]
  405648:	f8df 8134 	ldr.w	r8, [pc, #308]	; 405780 <_malloc_r+0x2bc>
  40564c:	4561      	cmp	r1, ip
  40564e:	d10d      	bne.n	40566c <_malloc_r+0x1a8>
  405650:	2301      	movs	r3, #1
  405652:	1080      	asrs	r0, r0, #2
  405654:	fa03 f000 	lsl.w	r0, r3, r0
  405658:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40565c:	4303      	orrs	r3, r0
  40565e:	f8c8 3004 	str.w	r3, [r8, #4]
  405662:	460b      	mov	r3, r1
  405664:	e008      	b.n	405678 <_malloc_r+0x1b4>
  405666:	6889      	ldr	r1, [r1, #8]
  405668:	4561      	cmp	r1, ip
  40566a:	d004      	beq.n	405676 <_malloc_r+0x1b2>
  40566c:	6848      	ldr	r0, [r1, #4]
  40566e:	f020 0003 	bic.w	r0, r0, #3
  405672:	4283      	cmp	r3, r0
  405674:	d3f7      	bcc.n	405666 <_malloc_r+0x1a2>
  405676:	68cb      	ldr	r3, [r1, #12]
  405678:	60f3      	str	r3, [r6, #12]
  40567a:	60b1      	str	r1, [r6, #8]
  40567c:	609e      	str	r6, [r3, #8]
  40567e:	60ce      	str	r6, [r1, #12]
  405680:	2101      	movs	r1, #1
  405682:	1093      	asrs	r3, r2, #2
  405684:	fa01 f303 	lsl.w	r3, r1, r3
  405688:	6869      	ldr	r1, [r5, #4]
  40568a:	428b      	cmp	r3, r1
  40568c:	d85d      	bhi.n	40574a <_malloc_r+0x286>
  40568e:	420b      	tst	r3, r1
  405690:	d106      	bne.n	4056a0 <_malloc_r+0x1dc>
  405692:	f022 0203 	bic.w	r2, r2, #3
  405696:	005b      	lsls	r3, r3, #1
  405698:	420b      	tst	r3, r1
  40569a:	f102 0204 	add.w	r2, r2, #4
  40569e:	d0fa      	beq.n	405696 <_malloc_r+0x1d2>
  4056a0:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
  4056a4:	4680      	mov	r8, r0
  4056a6:	4694      	mov	ip, r2
  4056a8:	f8d8 600c 	ldr.w	r6, [r8, #12]
  4056ac:	4546      	cmp	r6, r8
  4056ae:	d02d      	beq.n	40570c <_malloc_r+0x248>
  4056b0:	6871      	ldr	r1, [r6, #4]
  4056b2:	f021 0903 	bic.w	r9, r1, #3
  4056b6:	ebc4 0109 	rsb	r1, r4, r9
  4056ba:	290f      	cmp	r1, #15
  4056bc:	dd13      	ble.n	4056e6 <_malloc_r+0x222>
  4056be:	1933      	adds	r3, r6, r4
  4056c0:	f044 0401 	orr.w	r4, r4, #1
  4056c4:	68f2      	ldr	r2, [r6, #12]
  4056c6:	6074      	str	r4, [r6, #4]
  4056c8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4056cc:	60c2      	str	r2, [r0, #12]
  4056ce:	6090      	str	r0, [r2, #8]
  4056d0:	f041 0201 	orr.w	r2, r1, #1
  4056d4:	616b      	str	r3, [r5, #20]
  4056d6:	612b      	str	r3, [r5, #16]
  4056d8:	f8c3 e00c 	str.w	lr, [r3, #12]
  4056dc:	f8c3 e008 	str.w	lr, [r3, #8]
  4056e0:	605a      	str	r2, [r3, #4]
  4056e2:	5059      	str	r1, [r3, r1]
  4056e4:	e00c      	b.n	405700 <_malloc_r+0x23c>
  4056e6:	2900      	cmp	r1, #0
  4056e8:	db0e      	blt.n	405708 <_malloc_r+0x244>
  4056ea:	eb06 0109 	add.w	r1, r6, r9
  4056ee:	684b      	ldr	r3, [r1, #4]
  4056f0:	f043 0301 	orr.w	r3, r3, #1
  4056f4:	604b      	str	r3, [r1, #4]
  4056f6:	68f3      	ldr	r3, [r6, #12]
  4056f8:	f856 2f08 	ldr.w	r2, [r6, #8]!
  4056fc:	60d3      	str	r3, [r2, #12]
  4056fe:	609a      	str	r2, [r3, #8]
  405700:	4638      	mov	r0, r7
  405702:	f000 f911 	bl	405928 <__malloc_unlock>
  405706:	e0dc      	b.n	4058c2 <_malloc_r+0x3fe>
  405708:	68f6      	ldr	r6, [r6, #12]
  40570a:	e7cf      	b.n	4056ac <_malloc_r+0x1e8>
  40570c:	f10c 0c01 	add.w	ip, ip, #1
  405710:	f01c 0f03 	tst.w	ip, #3
  405714:	f108 0808 	add.w	r8, r8, #8
  405718:	d1c6      	bne.n	4056a8 <_malloc_r+0x1e4>
  40571a:	0791      	lsls	r1, r2, #30
  40571c:	d104      	bne.n	405728 <_malloc_r+0x264>
  40571e:	686a      	ldr	r2, [r5, #4]
  405720:	ea22 0203 	bic.w	r2, r2, r3
  405724:	606a      	str	r2, [r5, #4]
  405726:	e005      	b.n	405734 <_malloc_r+0x270>
  405728:	f1a0 0108 	sub.w	r1, r0, #8
  40572c:	6800      	ldr	r0, [r0, #0]
  40572e:	3a01      	subs	r2, #1
  405730:	4288      	cmp	r0, r1
  405732:	d0f2      	beq.n	40571a <_malloc_r+0x256>
  405734:	6869      	ldr	r1, [r5, #4]
  405736:	005b      	lsls	r3, r3, #1
  405738:	428b      	cmp	r3, r1
  40573a:	d806      	bhi.n	40574a <_malloc_r+0x286>
  40573c:	b12b      	cbz	r3, 40574a <_malloc_r+0x286>
  40573e:	4662      	mov	r2, ip
  405740:	420b      	tst	r3, r1
  405742:	d1ad      	bne.n	4056a0 <_malloc_r+0x1dc>
  405744:	3204      	adds	r2, #4
  405746:	005b      	lsls	r3, r3, #1
  405748:	e7fa      	b.n	405740 <_malloc_r+0x27c>
  40574a:	f8d5 9008 	ldr.w	r9, [r5, #8]
  40574e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405752:	f023 0b03 	bic.w	fp, r3, #3
  405756:	45a3      	cmp	fp, r4
  405758:	d304      	bcc.n	405764 <_malloc_r+0x2a0>
  40575a:	ebc4 030b 	rsb	r3, r4, fp
  40575e:	2b0f      	cmp	r3, #15
  405760:	f300 80a2 	bgt.w	4058a8 <_malloc_r+0x3e4>
  405764:	4907      	ldr	r1, [pc, #28]	; (405784 <_malloc_r+0x2c0>)
  405766:	eb09 030b 	add.w	r3, r9, fp
  40576a:	680a      	ldr	r2, [r1, #0]
  40576c:	4688      	mov	r8, r1
  40576e:	eb04 0a02 	add.w	sl, r4, r2
  405772:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
  405776:	3201      	adds	r2, #1
  405778:	d106      	bne.n	405788 <_malloc_r+0x2c4>
  40577a:	f10a 0a10 	add.w	sl, sl, #16
  40577e:	e00b      	b.n	405798 <_malloc_r+0x2d4>
  405780:	20000568 	.word	0x20000568
  405784:	20000bd4 	.word	0x20000bd4
  405788:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  40578c:	f10a 0a0f 	add.w	sl, sl, #15
  405790:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  405794:	f02a 0a0f 	bic.w	sl, sl, #15
  405798:	4638      	mov	r0, r7
  40579a:	4651      	mov	r1, sl
  40579c:	9301      	str	r3, [sp, #4]
  40579e:	f000 fe7b 	bl	406498 <_sbrk_r>
  4057a2:	1c42      	adds	r2, r0, #1
  4057a4:	4606      	mov	r6, r0
  4057a6:	9b01      	ldr	r3, [sp, #4]
  4057a8:	d06f      	beq.n	40588a <_malloc_r+0x3c6>
  4057aa:	4298      	cmp	r0, r3
  4057ac:	d201      	bcs.n	4057b2 <_malloc_r+0x2ee>
  4057ae:	45a9      	cmp	r9, r5
  4057b0:	d16b      	bne.n	40588a <_malloc_r+0x3c6>
  4057b2:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4057b6:	429e      	cmp	r6, r3
  4057b8:	4452      	add	r2, sl
  4057ba:	f8c8 2004 	str.w	r2, [r8, #4]
  4057be:	d108      	bne.n	4057d2 <_malloc_r+0x30e>
  4057c0:	f3c6 010b 	ubfx	r1, r6, #0, #12
  4057c4:	b929      	cbnz	r1, 4057d2 <_malloc_r+0x30e>
  4057c6:	68ab      	ldr	r3, [r5, #8]
  4057c8:	44da      	add	sl, fp
  4057ca:	f04a 0201 	orr.w	r2, sl, #1
  4057ce:	605a      	str	r2, [r3, #4]
  4057d0:	e04d      	b.n	40586e <_malloc_r+0x3aa>
  4057d2:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
  4057d6:	3101      	adds	r1, #1
  4057d8:	d103      	bne.n	4057e2 <_malloc_r+0x31e>
  4057da:	4b3c      	ldr	r3, [pc, #240]	; (4058cc <_malloc_r+0x408>)
  4057dc:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
  4057e0:	e003      	b.n	4057ea <_malloc_r+0x326>
  4057e2:	1af3      	subs	r3, r6, r3
  4057e4:	441a      	add	r2, r3
  4057e6:	f8c8 2004 	str.w	r2, [r8, #4]
  4057ea:	f016 0307 	ands.w	r3, r6, #7
  4057ee:	bf1c      	itt	ne
  4057f0:	f1c3 0308 	rsbne	r3, r3, #8
  4057f4:	18f6      	addne	r6, r6, r3
  4057f6:	44b2      	add	sl, r6
  4057f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4057fc:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  405800:	ebca 0a03 	rsb	sl, sl, r3
  405804:	4651      	mov	r1, sl
  405806:	4638      	mov	r0, r7
  405808:	f000 fe46 	bl	406498 <_sbrk_r>
  40580c:	1c43      	adds	r3, r0, #1
  40580e:	bf04      	itt	eq
  405810:	4630      	moveq	r0, r6
  405812:	f04f 0a00 	moveq.w	sl, #0
  405816:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40581a:	1b80      	subs	r0, r0, r6
  40581c:	4450      	add	r0, sl
  40581e:	4453      	add	r3, sl
  405820:	f040 0001 	orr.w	r0, r0, #1
  405824:	45a9      	cmp	r9, r5
  405826:	60ae      	str	r6, [r5, #8]
  405828:	f8c8 3004 	str.w	r3, [r8, #4]
  40582c:	6070      	str	r0, [r6, #4]
  40582e:	d01e      	beq.n	40586e <_malloc_r+0x3aa>
  405830:	f1bb 0f0f 	cmp.w	fp, #15
  405834:	d802      	bhi.n	40583c <_malloc_r+0x378>
  405836:	2301      	movs	r3, #1
  405838:	6073      	str	r3, [r6, #4]
  40583a:	e026      	b.n	40588a <_malloc_r+0x3c6>
  40583c:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405840:	f1ab 0b0c 	sub.w	fp, fp, #12
  405844:	f02b 0b07 	bic.w	fp, fp, #7
  405848:	f003 0301 	and.w	r3, r3, #1
  40584c:	ea4b 0303 	orr.w	r3, fp, r3
  405850:	f8c9 3004 	str.w	r3, [r9, #4]
  405854:	2205      	movs	r2, #5
  405856:	eb09 030b 	add.w	r3, r9, fp
  40585a:	f1bb 0f0f 	cmp.w	fp, #15
  40585e:	605a      	str	r2, [r3, #4]
  405860:	609a      	str	r2, [r3, #8]
  405862:	d904      	bls.n	40586e <_malloc_r+0x3aa>
  405864:	4638      	mov	r0, r7
  405866:	f109 0108 	add.w	r1, r9, #8
  40586a:	f7ff fd31 	bl	4052d0 <_free_r>
  40586e:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405872:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
  405876:	4293      	cmp	r3, r2
  405878:	bf84      	itt	hi
  40587a:	4a15      	ldrhi	r2, [pc, #84]	; (4058d0 <_malloc_r+0x40c>)
  40587c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
  40587e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  405882:	4293      	cmp	r3, r2
  405884:	bf84      	itt	hi
  405886:	4a12      	ldrhi	r2, [pc, #72]	; (4058d0 <_malloc_r+0x40c>)
  405888:	6313      	strhi	r3, [r2, #48]	; 0x30
  40588a:	68ab      	ldr	r3, [r5, #8]
  40588c:	685a      	ldr	r2, [r3, #4]
  40588e:	f022 0203 	bic.w	r2, r2, #3
  405892:	42a2      	cmp	r2, r4
  405894:	ebc4 0302 	rsb	r3, r4, r2
  405898:	d301      	bcc.n	40589e <_malloc_r+0x3da>
  40589a:	2b0f      	cmp	r3, #15
  40589c:	dc04      	bgt.n	4058a8 <_malloc_r+0x3e4>
  40589e:	4638      	mov	r0, r7
  4058a0:	f000 f842 	bl	405928 <__malloc_unlock>
  4058a4:	2600      	movs	r6, #0
  4058a6:	e00c      	b.n	4058c2 <_malloc_r+0x3fe>
  4058a8:	68ae      	ldr	r6, [r5, #8]
  4058aa:	f044 0201 	orr.w	r2, r4, #1
  4058ae:	f043 0301 	orr.w	r3, r3, #1
  4058b2:	4434      	add	r4, r6
  4058b4:	6072      	str	r2, [r6, #4]
  4058b6:	60ac      	str	r4, [r5, #8]
  4058b8:	6063      	str	r3, [r4, #4]
  4058ba:	4638      	mov	r0, r7
  4058bc:	f000 f834 	bl	405928 <__malloc_unlock>
  4058c0:	3608      	adds	r6, #8
  4058c2:	4630      	mov	r0, r6
  4058c4:	b003      	add	sp, #12
  4058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4058ca:	bf00      	nop
  4058cc:	20000568 	.word	0x20000568
  4058d0:	20000bd4 	.word	0x20000bd4

004058d4 <memchr>:
  4058d4:	b510      	push	{r4, lr}
  4058d6:	b2c9      	uxtb	r1, r1
  4058d8:	4402      	add	r2, r0
  4058da:	4290      	cmp	r0, r2
  4058dc:	4603      	mov	r3, r0
  4058de:	d005      	beq.n	4058ec <memchr+0x18>
  4058e0:	781c      	ldrb	r4, [r3, #0]
  4058e2:	3001      	adds	r0, #1
  4058e4:	428c      	cmp	r4, r1
  4058e6:	d1f8      	bne.n	4058da <memchr+0x6>
  4058e8:	4618      	mov	r0, r3
  4058ea:	bd10      	pop	{r4, pc}
  4058ec:	2000      	movs	r0, #0
  4058ee:	bd10      	pop	{r4, pc}

004058f0 <memmove>:
  4058f0:	4281      	cmp	r1, r0
  4058f2:	b570      	push	{r4, r5, r6, lr}
  4058f4:	d301      	bcc.n	4058fa <memmove+0xa>
  4058f6:	2300      	movs	r3, #0
  4058f8:	e00e      	b.n	405918 <memmove+0x28>
  4058fa:	188c      	adds	r4, r1, r2
  4058fc:	42a0      	cmp	r0, r4
  4058fe:	d2fa      	bcs.n	4058f6 <memmove+0x6>
  405900:	1885      	adds	r5, r0, r2
  405902:	4613      	mov	r3, r2
  405904:	f113 33ff 	adds.w	r3, r3, #4294967295
  405908:	d305      	bcc.n	405916 <memmove+0x26>
  40590a:	4251      	negs	r1, r2
  40590c:	1866      	adds	r6, r4, r1
  40590e:	5cf6      	ldrb	r6, [r6, r3]
  405910:	4429      	add	r1, r5
  405912:	54ce      	strb	r6, [r1, r3]
  405914:	e7f6      	b.n	405904 <memmove+0x14>
  405916:	bd70      	pop	{r4, r5, r6, pc}
  405918:	4293      	cmp	r3, r2
  40591a:	d003      	beq.n	405924 <memmove+0x34>
  40591c:	5ccc      	ldrb	r4, [r1, r3]
  40591e:	54c4      	strb	r4, [r0, r3]
  405920:	3301      	adds	r3, #1
  405922:	e7f9      	b.n	405918 <memmove+0x28>
  405924:	bd70      	pop	{r4, r5, r6, pc}

00405926 <__malloc_lock>:
  405926:	4770      	bx	lr

00405928 <__malloc_unlock>:
  405928:	4770      	bx	lr
	...

0040592c <_Balloc>:
  40592c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40592e:	b570      	push	{r4, r5, r6, lr}
  405930:	4605      	mov	r5, r0
  405932:	460c      	mov	r4, r1
  405934:	b13b      	cbz	r3, 405946 <_Balloc+0x1a>
  405936:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  405938:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  40593c:	b160      	cbz	r0, 405958 <_Balloc+0x2c>
  40593e:	6801      	ldr	r1, [r0, #0]
  405940:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  405944:	e014      	b.n	405970 <_Balloc+0x44>
  405946:	2104      	movs	r1, #4
  405948:	2221      	movs	r2, #33	; 0x21
  40594a:	f001 fa77 	bl	406e3c <_calloc_r>
  40594e:	64e8      	str	r0, [r5, #76]	; 0x4c
  405950:	2800      	cmp	r0, #0
  405952:	d1f0      	bne.n	405936 <_Balloc+0xa>
  405954:	2000      	movs	r0, #0
  405956:	bd70      	pop	{r4, r5, r6, pc}
  405958:	2101      	movs	r1, #1
  40595a:	fa01 f604 	lsl.w	r6, r1, r4
  40595e:	1d72      	adds	r2, r6, #5
  405960:	4628      	mov	r0, r5
  405962:	0092      	lsls	r2, r2, #2
  405964:	f001 fa6a 	bl	406e3c <_calloc_r>
  405968:	2800      	cmp	r0, #0
  40596a:	d0f3      	beq.n	405954 <_Balloc+0x28>
  40596c:	6044      	str	r4, [r0, #4]
  40596e:	6086      	str	r6, [r0, #8]
  405970:	2200      	movs	r2, #0
  405972:	6102      	str	r2, [r0, #16]
  405974:	60c2      	str	r2, [r0, #12]
  405976:	bd70      	pop	{r4, r5, r6, pc}

00405978 <_Bfree>:
  405978:	b131      	cbz	r1, 405988 <_Bfree+0x10>
  40597a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40597c:	684a      	ldr	r2, [r1, #4]
  40597e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  405982:	6008      	str	r0, [r1, #0]
  405984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405988:	4770      	bx	lr

0040598a <__multadd>:
  40598a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40598e:	460c      	mov	r4, r1
  405990:	461e      	mov	r6, r3
  405992:	690d      	ldr	r5, [r1, #16]
  405994:	4607      	mov	r7, r0
  405996:	3114      	adds	r1, #20
  405998:	2300      	movs	r3, #0
  40599a:	6808      	ldr	r0, [r1, #0]
  40599c:	3301      	adds	r3, #1
  40599e:	fa1f fc80 	uxth.w	ip, r0
  4059a2:	0c00      	lsrs	r0, r0, #16
  4059a4:	fb02 6c0c 	mla	ip, r2, ip, r6
  4059a8:	4350      	muls	r0, r2
  4059aa:	eb00 401c 	add.w	r0, r0, ip, lsr #16
  4059ae:	fa1f fc8c 	uxth.w	ip, ip
  4059b2:	0c06      	lsrs	r6, r0, #16
  4059b4:	42ab      	cmp	r3, r5
  4059b6:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
  4059ba:	f841 0b04 	str.w	r0, [r1], #4
  4059be:	dbec      	blt.n	40599a <__multadd+0x10>
  4059c0:	b1d6      	cbz	r6, 4059f8 <__multadd+0x6e>
  4059c2:	68a3      	ldr	r3, [r4, #8]
  4059c4:	429d      	cmp	r5, r3
  4059c6:	db12      	blt.n	4059ee <__multadd+0x64>
  4059c8:	6861      	ldr	r1, [r4, #4]
  4059ca:	4638      	mov	r0, r7
  4059cc:	3101      	adds	r1, #1
  4059ce:	f7ff ffad 	bl	40592c <_Balloc>
  4059d2:	6922      	ldr	r2, [r4, #16]
  4059d4:	f104 010c 	add.w	r1, r4, #12
  4059d8:	3202      	adds	r2, #2
  4059da:	4680      	mov	r8, r0
  4059dc:	0092      	lsls	r2, r2, #2
  4059de:	300c      	adds	r0, #12
  4059e0:	f7fd fd22 	bl	403428 <memcpy>
  4059e4:	4621      	mov	r1, r4
  4059e6:	4638      	mov	r0, r7
  4059e8:	f7ff ffc6 	bl	405978 <_Bfree>
  4059ec:	4644      	mov	r4, r8
  4059ee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  4059f2:	3501      	adds	r5, #1
  4059f4:	615e      	str	r6, [r3, #20]
  4059f6:	6125      	str	r5, [r4, #16]
  4059f8:	4620      	mov	r0, r4
  4059fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004059fe <__s2b>:
  4059fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405a02:	4614      	mov	r4, r2
  405a04:	4698      	mov	r8, r3
  405a06:	f103 0208 	add.w	r2, r3, #8
  405a0a:	2309      	movs	r3, #9
  405a0c:	460d      	mov	r5, r1
  405a0e:	fb92 f2f3 	sdiv	r2, r2, r3
  405a12:	4606      	mov	r6, r0
  405a14:	2301      	movs	r3, #1
  405a16:	2100      	movs	r1, #0
  405a18:	429a      	cmp	r2, r3
  405a1a:	dd02      	ble.n	405a22 <__s2b+0x24>
  405a1c:	005b      	lsls	r3, r3, #1
  405a1e:	3101      	adds	r1, #1
  405a20:	e7fa      	b.n	405a18 <__s2b+0x1a>
  405a22:	4630      	mov	r0, r6
  405a24:	f7ff ff82 	bl	40592c <_Balloc>
  405a28:	9b08      	ldr	r3, [sp, #32]
  405a2a:	2c09      	cmp	r4, #9
  405a2c:	6143      	str	r3, [r0, #20]
  405a2e:	f04f 0301 	mov.w	r3, #1
  405a32:	4601      	mov	r1, r0
  405a34:	6103      	str	r3, [r0, #16]
  405a36:	dd11      	ble.n	405a5c <__s2b+0x5e>
  405a38:	f105 0909 	add.w	r9, r5, #9
  405a3c:	464f      	mov	r7, r9
  405a3e:	4425      	add	r5, r4
  405a40:	f817 3b01 	ldrb.w	r3, [r7], #1
  405a44:	4630      	mov	r0, r6
  405a46:	220a      	movs	r2, #10
  405a48:	3b30      	subs	r3, #48	; 0x30
  405a4a:	f7ff ff9e 	bl	40598a <__multadd>
  405a4e:	42af      	cmp	r7, r5
  405a50:	4601      	mov	r1, r0
  405a52:	d1f5      	bne.n	405a40 <__s2b+0x42>
  405a54:	eb09 0704 	add.w	r7, r9, r4
  405a58:	3f08      	subs	r7, #8
  405a5a:	e002      	b.n	405a62 <__s2b+0x64>
  405a5c:	f105 070a 	add.w	r7, r5, #10
  405a60:	2409      	movs	r4, #9
  405a62:	4625      	mov	r5, r4
  405a64:	4545      	cmp	r5, r8
  405a66:	da09      	bge.n	405a7c <__s2b+0x7e>
  405a68:	1b3b      	subs	r3, r7, r4
  405a6a:	5d5b      	ldrb	r3, [r3, r5]
  405a6c:	4630      	mov	r0, r6
  405a6e:	220a      	movs	r2, #10
  405a70:	3b30      	subs	r3, #48	; 0x30
  405a72:	f7ff ff8a 	bl	40598a <__multadd>
  405a76:	3501      	adds	r5, #1
  405a78:	4601      	mov	r1, r0
  405a7a:	e7f3      	b.n	405a64 <__s2b+0x66>
  405a7c:	4608      	mov	r0, r1
  405a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00405a82 <__hi0bits>:
  405a82:	0c03      	lsrs	r3, r0, #16
  405a84:	041b      	lsls	r3, r3, #16
  405a86:	b913      	cbnz	r3, 405a8e <__hi0bits+0xc>
  405a88:	0400      	lsls	r0, r0, #16
  405a8a:	2310      	movs	r3, #16
  405a8c:	e000      	b.n	405a90 <__hi0bits+0xe>
  405a8e:	2300      	movs	r3, #0
  405a90:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  405a94:	bf04      	itt	eq
  405a96:	0200      	lsleq	r0, r0, #8
  405a98:	3308      	addeq	r3, #8
  405a9a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  405a9e:	bf04      	itt	eq
  405aa0:	0100      	lsleq	r0, r0, #4
  405aa2:	3304      	addeq	r3, #4
  405aa4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  405aa8:	bf04      	itt	eq
  405aaa:	0080      	lsleq	r0, r0, #2
  405aac:	3302      	addeq	r3, #2
  405aae:	2800      	cmp	r0, #0
  405ab0:	db03      	blt.n	405aba <__hi0bits+0x38>
  405ab2:	0042      	lsls	r2, r0, #1
  405ab4:	d503      	bpl.n	405abe <__hi0bits+0x3c>
  405ab6:	1c58      	adds	r0, r3, #1
  405ab8:	4770      	bx	lr
  405aba:	4618      	mov	r0, r3
  405abc:	4770      	bx	lr
  405abe:	2020      	movs	r0, #32
  405ac0:	4770      	bx	lr

00405ac2 <__lo0bits>:
  405ac2:	6803      	ldr	r3, [r0, #0]
  405ac4:	f013 0207 	ands.w	r2, r3, #7
  405ac8:	d00b      	beq.n	405ae2 <__lo0bits+0x20>
  405aca:	07d9      	lsls	r1, r3, #31
  405acc:	d422      	bmi.n	405b14 <__lo0bits+0x52>
  405ace:	079a      	lsls	r2, r3, #30
  405ad0:	d503      	bpl.n	405ada <__lo0bits+0x18>
  405ad2:	085b      	lsrs	r3, r3, #1
  405ad4:	6003      	str	r3, [r0, #0]
  405ad6:	2001      	movs	r0, #1
  405ad8:	4770      	bx	lr
  405ada:	089b      	lsrs	r3, r3, #2
  405adc:	6003      	str	r3, [r0, #0]
  405ade:	2002      	movs	r0, #2
  405ae0:	4770      	bx	lr
  405ae2:	b299      	uxth	r1, r3
  405ae4:	b909      	cbnz	r1, 405aea <__lo0bits+0x28>
  405ae6:	0c1b      	lsrs	r3, r3, #16
  405ae8:	2210      	movs	r2, #16
  405aea:	f013 0fff 	tst.w	r3, #255	; 0xff
  405aee:	bf04      	itt	eq
  405af0:	0a1b      	lsreq	r3, r3, #8
  405af2:	3208      	addeq	r2, #8
  405af4:	0719      	lsls	r1, r3, #28
  405af6:	bf04      	itt	eq
  405af8:	091b      	lsreq	r3, r3, #4
  405afa:	3204      	addeq	r2, #4
  405afc:	0799      	lsls	r1, r3, #30
  405afe:	bf04      	itt	eq
  405b00:	089b      	lsreq	r3, r3, #2
  405b02:	3202      	addeq	r2, #2
  405b04:	07d9      	lsls	r1, r3, #31
  405b06:	d402      	bmi.n	405b0e <__lo0bits+0x4c>
  405b08:	085b      	lsrs	r3, r3, #1
  405b0a:	d005      	beq.n	405b18 <__lo0bits+0x56>
  405b0c:	3201      	adds	r2, #1
  405b0e:	6003      	str	r3, [r0, #0]
  405b10:	4610      	mov	r0, r2
  405b12:	4770      	bx	lr
  405b14:	2000      	movs	r0, #0
  405b16:	4770      	bx	lr
  405b18:	2020      	movs	r0, #32
  405b1a:	4770      	bx	lr

00405b1c <__i2b>:
  405b1c:	b510      	push	{r4, lr}
  405b1e:	460c      	mov	r4, r1
  405b20:	2101      	movs	r1, #1
  405b22:	f7ff ff03 	bl	40592c <_Balloc>
  405b26:	2201      	movs	r2, #1
  405b28:	6144      	str	r4, [r0, #20]
  405b2a:	6102      	str	r2, [r0, #16]
  405b2c:	bd10      	pop	{r4, pc}

00405b2e <__multiply>:
  405b2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b32:	4616      	mov	r6, r2
  405b34:	6933      	ldr	r3, [r6, #16]
  405b36:	690a      	ldr	r2, [r1, #16]
  405b38:	b085      	sub	sp, #20
  405b3a:	429a      	cmp	r2, r3
  405b3c:	460d      	mov	r5, r1
  405b3e:	da01      	bge.n	405b44 <__multiply+0x16>
  405b40:	4635      	mov	r5, r6
  405b42:	460e      	mov	r6, r1
  405b44:	f8d5 8010 	ldr.w	r8, [r5, #16]
  405b48:	6937      	ldr	r7, [r6, #16]
  405b4a:	68ab      	ldr	r3, [r5, #8]
  405b4c:	6869      	ldr	r1, [r5, #4]
  405b4e:	eb08 0407 	add.w	r4, r8, r7
  405b52:	429c      	cmp	r4, r3
  405b54:	bfc8      	it	gt
  405b56:	3101      	addgt	r1, #1
  405b58:	f7ff fee8 	bl	40592c <_Balloc>
  405b5c:	f100 0314 	add.w	r3, r0, #20
  405b60:	eb03 0184 	add.w	r1, r3, r4, lsl #2
  405b64:	9101      	str	r1, [sp, #4]
  405b66:	461a      	mov	r2, r3
  405b68:	f8dd a004 	ldr.w	sl, [sp, #4]
  405b6c:	4552      	cmp	r2, sl
  405b6e:	d203      	bcs.n	405b78 <__multiply+0x4a>
  405b70:	2100      	movs	r1, #0
  405b72:	f842 1b04 	str.w	r1, [r2], #4
  405b76:	e7f7      	b.n	405b68 <__multiply+0x3a>
  405b78:	f105 0114 	add.w	r1, r5, #20
  405b7c:	f106 0214 	add.w	r2, r6, #20
  405b80:	eb01 0888 	add.w	r8, r1, r8, lsl #2
  405b84:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  405b88:	f8cd 8008 	str.w	r8, [sp, #8]
  405b8c:	9703      	str	r7, [sp, #12]
  405b8e:	9e03      	ldr	r6, [sp, #12]
  405b90:	4615      	mov	r5, r2
  405b92:	42b2      	cmp	r2, r6
  405b94:	d256      	bcs.n	405c44 <__multiply+0x116>
  405b96:	f8b5 c000 	ldrh.w	ip, [r5]
  405b9a:	3204      	adds	r2, #4
  405b9c:	f1bc 0f00 	cmp.w	ip, #0
  405ba0:	d025      	beq.n	405bee <__multiply+0xc0>
  405ba2:	460f      	mov	r7, r1
  405ba4:	461d      	mov	r5, r3
  405ba6:	2600      	movs	r6, #0
  405ba8:	f857 9b04 	ldr.w	r9, [r7], #4
  405bac:	f8d5 8000 	ldr.w	r8, [r5]
  405bb0:	fa1f fb89 	uxth.w	fp, r9
  405bb4:	fa1f fa88 	uxth.w	sl, r8
  405bb8:	fb0c aa0b 	mla	sl, ip, fp, sl
  405bbc:	ea4f 4919 	mov.w	r9, r9, lsr #16
  405bc0:	ea4f 4818 	mov.w	r8, r8, lsr #16
  405bc4:	fb0c 8809 	mla	r8, ip, r9, r8
  405bc8:	44b2      	add	sl, r6
  405bca:	eb08 481a 	add.w	r8, r8, sl, lsr #16
  405bce:	fa1f fa8a 	uxth.w	sl, sl
  405bd2:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
  405bd6:	ea4f 4618 	mov.w	r6, r8, lsr #16
  405bda:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405bde:	46ab      	mov	fp, r5
  405be0:	45b8      	cmp	r8, r7
  405be2:	f84b ab04 	str.w	sl, [fp], #4
  405be6:	d901      	bls.n	405bec <__multiply+0xbe>
  405be8:	465d      	mov	r5, fp
  405bea:	e7dd      	b.n	405ba8 <__multiply+0x7a>
  405bec:	606e      	str	r6, [r5, #4]
  405bee:	f832 8c02 	ldrh.w	r8, [r2, #-2]
  405bf2:	f1b8 0f00 	cmp.w	r8, #0
  405bf6:	d023      	beq.n	405c40 <__multiply+0x112>
  405bf8:	681e      	ldr	r6, [r3, #0]
  405bfa:	460f      	mov	r7, r1
  405bfc:	461d      	mov	r5, r3
  405bfe:	f04f 0900 	mov.w	r9, #0
  405c02:	f8b7 a000 	ldrh.w	sl, [r7]
  405c06:	f8b5 c002 	ldrh.w	ip, [r5, #2]
  405c0a:	b2b6      	uxth	r6, r6
  405c0c:	fb08 cc0a 	mla	ip, r8, sl, ip
  405c10:	44e1      	add	r9, ip
  405c12:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  405c16:	46ac      	mov	ip, r5
  405c18:	f84c 6b04 	str.w	r6, [ip], #4
  405c1c:	f857 6b04 	ldr.w	r6, [r7], #4
  405c20:	f8b5 a004 	ldrh.w	sl, [r5, #4]
  405c24:	0c36      	lsrs	r6, r6, #16
  405c26:	fb08 a606 	mla	r6, r8, r6, sl
  405c2a:	f8dd a008 	ldr.w	sl, [sp, #8]
  405c2e:	eb06 4619 	add.w	r6, r6, r9, lsr #16
  405c32:	4557      	cmp	r7, sl
  405c34:	ea4f 4916 	mov.w	r9, r6, lsr #16
  405c38:	d201      	bcs.n	405c3e <__multiply+0x110>
  405c3a:	4665      	mov	r5, ip
  405c3c:	e7e1      	b.n	405c02 <__multiply+0xd4>
  405c3e:	606e      	str	r6, [r5, #4]
  405c40:	3304      	adds	r3, #4
  405c42:	e7a4      	b.n	405b8e <__multiply+0x60>
  405c44:	9b01      	ldr	r3, [sp, #4]
  405c46:	2c00      	cmp	r4, #0
  405c48:	dc03      	bgt.n	405c52 <__multiply+0x124>
  405c4a:	6104      	str	r4, [r0, #16]
  405c4c:	b005      	add	sp, #20
  405c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c52:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  405c56:	2a00      	cmp	r2, #0
  405c58:	d1f7      	bne.n	405c4a <__multiply+0x11c>
  405c5a:	3c01      	subs	r4, #1
  405c5c:	e7f3      	b.n	405c46 <__multiply+0x118>

00405c5e <__pow5mult>:
  405c5e:	f012 0303 	ands.w	r3, r2, #3
  405c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c66:	4605      	mov	r5, r0
  405c68:	460e      	mov	r6, r1
  405c6a:	4617      	mov	r7, r2
  405c6c:	d007      	beq.n	405c7e <__pow5mult+0x20>
  405c6e:	4a1a      	ldr	r2, [pc, #104]	; (405cd8 <__pow5mult+0x7a>)
  405c70:	3b01      	subs	r3, #1
  405c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  405c76:	2300      	movs	r3, #0
  405c78:	f7ff fe87 	bl	40598a <__multadd>
  405c7c:	4606      	mov	r6, r0
  405c7e:	10bf      	asrs	r7, r7, #2
  405c80:	d027      	beq.n	405cd2 <__pow5mult+0x74>
  405c82:	6cac      	ldr	r4, [r5, #72]	; 0x48
  405c84:	b974      	cbnz	r4, 405ca4 <__pow5mult+0x46>
  405c86:	4628      	mov	r0, r5
  405c88:	f240 2171 	movw	r1, #625	; 0x271
  405c8c:	f7ff ff46 	bl	405b1c <__i2b>
  405c90:	2300      	movs	r3, #0
  405c92:	64a8      	str	r0, [r5, #72]	; 0x48
  405c94:	4604      	mov	r4, r0
  405c96:	6003      	str	r3, [r0, #0]
  405c98:	e004      	b.n	405ca4 <__pow5mult+0x46>
  405c9a:	107f      	asrs	r7, r7, #1
  405c9c:	d019      	beq.n	405cd2 <__pow5mult+0x74>
  405c9e:	6820      	ldr	r0, [r4, #0]
  405ca0:	b170      	cbz	r0, 405cc0 <__pow5mult+0x62>
  405ca2:	4604      	mov	r4, r0
  405ca4:	07fb      	lsls	r3, r7, #31
  405ca6:	d5f8      	bpl.n	405c9a <__pow5mult+0x3c>
  405ca8:	4631      	mov	r1, r6
  405caa:	4622      	mov	r2, r4
  405cac:	4628      	mov	r0, r5
  405cae:	f7ff ff3e 	bl	405b2e <__multiply>
  405cb2:	4631      	mov	r1, r6
  405cb4:	4680      	mov	r8, r0
  405cb6:	4628      	mov	r0, r5
  405cb8:	f7ff fe5e 	bl	405978 <_Bfree>
  405cbc:	4646      	mov	r6, r8
  405cbe:	e7ec      	b.n	405c9a <__pow5mult+0x3c>
  405cc0:	4628      	mov	r0, r5
  405cc2:	4621      	mov	r1, r4
  405cc4:	4622      	mov	r2, r4
  405cc6:	f7ff ff32 	bl	405b2e <__multiply>
  405cca:	2300      	movs	r3, #0
  405ccc:	6020      	str	r0, [r4, #0]
  405cce:	6003      	str	r3, [r0, #0]
  405cd0:	e7e7      	b.n	405ca2 <__pow5mult+0x44>
  405cd2:	4630      	mov	r0, r6
  405cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405cd8:	00407fe0 	.word	0x00407fe0

00405cdc <__lshift>:
  405cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405ce0:	460c      	mov	r4, r1
  405ce2:	6923      	ldr	r3, [r4, #16]
  405ce4:	ea4f 1a62 	mov.w	sl, r2, asr #5
  405ce8:	eb0a 0903 	add.w	r9, sl, r3
  405cec:	6849      	ldr	r1, [r1, #4]
  405cee:	68a3      	ldr	r3, [r4, #8]
  405cf0:	4680      	mov	r8, r0
  405cf2:	4615      	mov	r5, r2
  405cf4:	f109 0701 	add.w	r7, r9, #1
  405cf8:	429f      	cmp	r7, r3
  405cfa:	dd02      	ble.n	405d02 <__lshift+0x26>
  405cfc:	3101      	adds	r1, #1
  405cfe:	005b      	lsls	r3, r3, #1
  405d00:	e7fa      	b.n	405cf8 <__lshift+0x1c>
  405d02:	4640      	mov	r0, r8
  405d04:	f7ff fe12 	bl	40592c <_Balloc>
  405d08:	2300      	movs	r3, #0
  405d0a:	4606      	mov	r6, r0
  405d0c:	f100 0214 	add.w	r2, r0, #20
  405d10:	4553      	cmp	r3, sl
  405d12:	da04      	bge.n	405d1e <__lshift+0x42>
  405d14:	2100      	movs	r1, #0
  405d16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  405d1a:	3301      	adds	r3, #1
  405d1c:	e7f8      	b.n	405d10 <__lshift+0x34>
  405d1e:	6920      	ldr	r0, [r4, #16]
  405d20:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
  405d24:	f104 0314 	add.w	r3, r4, #20
  405d28:	f015 0c1f 	ands.w	ip, r5, #31
  405d2c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  405d30:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
  405d34:	d016      	beq.n	405d64 <__lshift+0x88>
  405d36:	f1cc 0a20 	rsb	sl, ip, #32
  405d3a:	2500      	movs	r5, #0
  405d3c:	6818      	ldr	r0, [r3, #0]
  405d3e:	460a      	mov	r2, r1
  405d40:	fa00 f00c 	lsl.w	r0, r0, ip
  405d44:	4305      	orrs	r5, r0
  405d46:	f842 5b04 	str.w	r5, [r2], #4
  405d4a:	f853 5b04 	ldr.w	r5, [r3], #4
  405d4e:	4573      	cmp	r3, lr
  405d50:	fa25 f50a 	lsr.w	r5, r5, sl
  405d54:	d201      	bcs.n	405d5a <__lshift+0x7e>
  405d56:	4611      	mov	r1, r2
  405d58:	e7f0      	b.n	405d3c <__lshift+0x60>
  405d5a:	604d      	str	r5, [r1, #4]
  405d5c:	b145      	cbz	r5, 405d70 <__lshift+0x94>
  405d5e:	f109 0702 	add.w	r7, r9, #2
  405d62:	e005      	b.n	405d70 <__lshift+0x94>
  405d64:	f853 2b04 	ldr.w	r2, [r3], #4
  405d68:	4573      	cmp	r3, lr
  405d6a:	f841 2b04 	str.w	r2, [r1], #4
  405d6e:	d3f9      	bcc.n	405d64 <__lshift+0x88>
  405d70:	3f01      	subs	r7, #1
  405d72:	4640      	mov	r0, r8
  405d74:	6137      	str	r7, [r6, #16]
  405d76:	4621      	mov	r1, r4
  405d78:	f7ff fdfe 	bl	405978 <_Bfree>
  405d7c:	4630      	mov	r0, r6
  405d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00405d82 <__mcmp>:
  405d82:	6902      	ldr	r2, [r0, #16]
  405d84:	690b      	ldr	r3, [r1, #16]
  405d86:	b510      	push	{r4, lr}
  405d88:	1ad2      	subs	r2, r2, r3
  405d8a:	d113      	bne.n	405db4 <__mcmp+0x32>
  405d8c:	009c      	lsls	r4, r3, #2
  405d8e:	3014      	adds	r0, #20
  405d90:	f101 0214 	add.w	r2, r1, #20
  405d94:	1903      	adds	r3, r0, r4
  405d96:	4422      	add	r2, r4
  405d98:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405d9c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  405da0:	428c      	cmp	r4, r1
  405da2:	d003      	beq.n	405dac <__mcmp+0x2a>
  405da4:	d208      	bcs.n	405db8 <__mcmp+0x36>
  405da6:	f04f 30ff 	mov.w	r0, #4294967295
  405daa:	bd10      	pop	{r4, pc}
  405dac:	4298      	cmp	r0, r3
  405dae:	d3f3      	bcc.n	405d98 <__mcmp+0x16>
  405db0:	2000      	movs	r0, #0
  405db2:	bd10      	pop	{r4, pc}
  405db4:	4610      	mov	r0, r2
  405db6:	bd10      	pop	{r4, pc}
  405db8:	2001      	movs	r0, #1
  405dba:	bd10      	pop	{r4, pc}

00405dbc <__mdiff>:
  405dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405dc0:	4606      	mov	r6, r0
  405dc2:	460c      	mov	r4, r1
  405dc4:	4608      	mov	r0, r1
  405dc6:	4611      	mov	r1, r2
  405dc8:	4615      	mov	r5, r2
  405dca:	f7ff ffda 	bl	405d82 <__mcmp>
  405dce:	1e07      	subs	r7, r0, #0
  405dd0:	d108      	bne.n	405de4 <__mdiff+0x28>
  405dd2:	4630      	mov	r0, r6
  405dd4:	4639      	mov	r1, r7
  405dd6:	f7ff fda9 	bl	40592c <_Balloc>
  405dda:	2301      	movs	r3, #1
  405ddc:	6103      	str	r3, [r0, #16]
  405dde:	6147      	str	r7, [r0, #20]
  405de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405de4:	db01      	blt.n	405dea <__mdiff+0x2e>
  405de6:	2700      	movs	r7, #0
  405de8:	e003      	b.n	405df2 <__mdiff+0x36>
  405dea:	4623      	mov	r3, r4
  405dec:	2701      	movs	r7, #1
  405dee:	462c      	mov	r4, r5
  405df0:	461d      	mov	r5, r3
  405df2:	6861      	ldr	r1, [r4, #4]
  405df4:	4630      	mov	r0, r6
  405df6:	f7ff fd99 	bl	40592c <_Balloc>
  405dfa:	6922      	ldr	r2, [r4, #16]
  405dfc:	692b      	ldr	r3, [r5, #16]
  405dfe:	3414      	adds	r4, #20
  405e00:	f105 0614 	add.w	r6, r5, #20
  405e04:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
  405e08:	60c7      	str	r7, [r0, #12]
  405e0a:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
  405e0e:	f100 0314 	add.w	r3, r0, #20
  405e12:	2100      	movs	r1, #0
  405e14:	f854 7b04 	ldr.w	r7, [r4], #4
  405e18:	f856 9b04 	ldr.w	r9, [r6], #4
  405e1c:	fa1f f887 	uxth.w	r8, r7
  405e20:	fa1f f589 	uxth.w	r5, r9
  405e24:	4441      	add	r1, r8
  405e26:	ea4f 4919 	mov.w	r9, r9, lsr #16
  405e2a:	ebc5 0801 	rsb	r8, r5, r1
  405e2e:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
  405e32:	eb07 4728 	add.w	r7, r7, r8, asr #16
  405e36:	fa1f f888 	uxth.w	r8, r8
  405e3a:	1439      	asrs	r1, r7, #16
  405e3c:	45b2      	cmp	sl, r6
  405e3e:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  405e42:	4625      	mov	r5, r4
  405e44:	f843 7b04 	str.w	r7, [r3], #4
  405e48:	d8e4      	bhi.n	405e14 <__mdiff+0x58>
  405e4a:	4565      	cmp	r5, ip
  405e4c:	d20d      	bcs.n	405e6a <__mdiff+0xae>
  405e4e:	f855 4b04 	ldr.w	r4, [r5], #4
  405e52:	b2a6      	uxth	r6, r4
  405e54:	440e      	add	r6, r1
  405e56:	0c24      	lsrs	r4, r4, #16
  405e58:	eb04 4426 	add.w	r4, r4, r6, asr #16
  405e5c:	b2b6      	uxth	r6, r6
  405e5e:	1421      	asrs	r1, r4, #16
  405e60:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  405e64:	f843 4b04 	str.w	r4, [r3], #4
  405e68:	e7ef      	b.n	405e4a <__mdiff+0x8e>
  405e6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  405e6e:	b909      	cbnz	r1, 405e74 <__mdiff+0xb8>
  405e70:	3a01      	subs	r2, #1
  405e72:	e7fa      	b.n	405e6a <__mdiff+0xae>
  405e74:	6102      	str	r2, [r0, #16]
  405e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00405e7a <__ulp>:
  405e7a:	4b0f      	ldr	r3, [pc, #60]	; (405eb8 <__ulp+0x3e>)
  405e7c:	400b      	ands	r3, r1
  405e7e:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  405e82:	2b00      	cmp	r3, #0
  405e84:	dd01      	ble.n	405e8a <__ulp+0x10>
  405e86:	4619      	mov	r1, r3
  405e88:	e009      	b.n	405e9e <__ulp+0x24>
  405e8a:	425b      	negs	r3, r3
  405e8c:	151b      	asrs	r3, r3, #20
  405e8e:	2b13      	cmp	r3, #19
  405e90:	f04f 0100 	mov.w	r1, #0
  405e94:	dc05      	bgt.n	405ea2 <__ulp+0x28>
  405e96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405e9a:	fa42 f103 	asr.w	r1, r2, r3
  405e9e:	2000      	movs	r0, #0
  405ea0:	4770      	bx	lr
  405ea2:	2b32      	cmp	r3, #50	; 0x32
  405ea4:	f04f 0201 	mov.w	r2, #1
  405ea8:	bfda      	itte	le
  405eaa:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  405eae:	fa02 f303 	lslle.w	r3, r2, r3
  405eb2:	4613      	movgt	r3, r2
  405eb4:	4618      	mov	r0, r3
  405eb6:	4770      	bx	lr
  405eb8:	7ff00000 	.word	0x7ff00000

00405ebc <__b2d>:
  405ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ec0:	6906      	ldr	r6, [r0, #16]
  405ec2:	f100 0714 	add.w	r7, r0, #20
  405ec6:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  405eca:	f856 4c04 	ldr.w	r4, [r6, #-4]
  405ece:	4688      	mov	r8, r1
  405ed0:	4620      	mov	r0, r4
  405ed2:	f7ff fdd6 	bl	405a82 <__hi0bits>
  405ed6:	f1c0 0320 	rsb	r3, r0, #32
  405eda:	280a      	cmp	r0, #10
  405edc:	f1a6 0504 	sub.w	r5, r6, #4
  405ee0:	f8c8 3000 	str.w	r3, [r8]
  405ee4:	dc14      	bgt.n	405f10 <__b2d+0x54>
  405ee6:	42bd      	cmp	r5, r7
  405ee8:	f1c0 010b 	rsb	r1, r0, #11
  405eec:	bf88      	it	hi
  405eee:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
  405ef2:	fa24 fc01 	lsr.w	ip, r4, r1
  405ef6:	bf98      	it	ls
  405ef8:	2500      	movls	r5, #0
  405efa:	3015      	adds	r0, #21
  405efc:	fa25 f101 	lsr.w	r1, r5, r1
  405f00:	4084      	lsls	r4, r0
  405f02:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  405f06:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  405f0a:	ea41 0204 	orr.w	r2, r1, r4
  405f0e:	e024      	b.n	405f5a <__b2d+0x9e>
  405f10:	42bd      	cmp	r5, r7
  405f12:	bf86      	itte	hi
  405f14:	f1a6 0508 	subhi.w	r5, r6, #8
  405f18:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
  405f1c:	2100      	movls	r1, #0
  405f1e:	f1b0 060b 	subs.w	r6, r0, #11
  405f22:	d015      	beq.n	405f50 <__b2d+0x94>
  405f24:	40b4      	lsls	r4, r6
  405f26:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  405f2a:	fa21 fc00 	lsr.w	ip, r1, r0
  405f2e:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  405f32:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  405f36:	42bd      	cmp	r5, r7
  405f38:	ea44 030c 	orr.w	r3, r4, ip
  405f3c:	bf8c      	ite	hi
  405f3e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
  405f42:	2400      	movls	r4, #0
  405f44:	fa24 f000 	lsr.w	r0, r4, r0
  405f48:	40b1      	lsls	r1, r6
  405f4a:	ea40 0201 	orr.w	r2, r0, r1
  405f4e:	e004      	b.n	405f5a <__b2d+0x9e>
  405f50:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  405f54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  405f58:	460a      	mov	r2, r1
  405f5a:	4610      	mov	r0, r2
  405f5c:	4619      	mov	r1, r3
  405f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405f62 <__d2b>:
  405f62:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  405f66:	2101      	movs	r1, #1
  405f68:	461d      	mov	r5, r3
  405f6a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  405f6e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  405f72:	4614      	mov	r4, r2
  405f74:	f7ff fcda 	bl	40592c <_Balloc>
  405f78:	f3c5 570a 	ubfx	r7, r5, #20, #11
  405f7c:	4606      	mov	r6, r0
  405f7e:	f3c5 0313 	ubfx	r3, r5, #0, #20
  405f82:	b10f      	cbz	r7, 405f88 <__d2b+0x26>
  405f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405f88:	9301      	str	r3, [sp, #4]
  405f8a:	b1d4      	cbz	r4, 405fc2 <__d2b+0x60>
  405f8c:	a802      	add	r0, sp, #8
  405f8e:	f840 4d08 	str.w	r4, [r0, #-8]!
  405f92:	4668      	mov	r0, sp
  405f94:	f7ff fd95 	bl	405ac2 <__lo0bits>
  405f98:	9b00      	ldr	r3, [sp, #0]
  405f9a:	b148      	cbz	r0, 405fb0 <__d2b+0x4e>
  405f9c:	9a01      	ldr	r2, [sp, #4]
  405f9e:	f1c0 0120 	rsb	r1, r0, #32
  405fa2:	fa02 f101 	lsl.w	r1, r2, r1
  405fa6:	40c2      	lsrs	r2, r0
  405fa8:	430b      	orrs	r3, r1
  405faa:	6173      	str	r3, [r6, #20]
  405fac:	9201      	str	r2, [sp, #4]
  405fae:	e000      	b.n	405fb2 <__d2b+0x50>
  405fb0:	6173      	str	r3, [r6, #20]
  405fb2:	9b01      	ldr	r3, [sp, #4]
  405fb4:	2b00      	cmp	r3, #0
  405fb6:	bf0c      	ite	eq
  405fb8:	2401      	moveq	r4, #1
  405fba:	2402      	movne	r4, #2
  405fbc:	61b3      	str	r3, [r6, #24]
  405fbe:	6134      	str	r4, [r6, #16]
  405fc0:	e007      	b.n	405fd2 <__d2b+0x70>
  405fc2:	a801      	add	r0, sp, #4
  405fc4:	f7ff fd7d 	bl	405ac2 <__lo0bits>
  405fc8:	9b01      	ldr	r3, [sp, #4]
  405fca:	2401      	movs	r4, #1
  405fcc:	6173      	str	r3, [r6, #20]
  405fce:	6134      	str	r4, [r6, #16]
  405fd0:	3020      	adds	r0, #32
  405fd2:	b13f      	cbz	r7, 405fe4 <__d2b+0x82>
  405fd4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405fd8:	4407      	add	r7, r0
  405fda:	f8c9 7000 	str.w	r7, [r9]
  405fde:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405fe2:	e00a      	b.n	405ffa <__d2b+0x98>
  405fe4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405fe8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  405fec:	f8c9 0000 	str.w	r0, [r9]
  405ff0:	6918      	ldr	r0, [r3, #16]
  405ff2:	f7ff fd46 	bl	405a82 <__hi0bits>
  405ff6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  405ffa:	f8c8 0000 	str.w	r0, [r8]
  405ffe:	4630      	mov	r0, r6
  406000:	b003      	add	sp, #12
  406002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00406006 <__ratio>:
  406006:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  40600a:	460e      	mov	r6, r1
  40600c:	4669      	mov	r1, sp
  40600e:	4680      	mov	r8, r0
  406010:	f7ff ff54 	bl	405ebc <__b2d>
  406014:	460d      	mov	r5, r1
  406016:	4604      	mov	r4, r0
  406018:	a901      	add	r1, sp, #4
  40601a:	4630      	mov	r0, r6
  40601c:	f7ff ff4e 	bl	405ebc <__b2d>
  406020:	9f00      	ldr	r7, [sp, #0]
  406022:	460b      	mov	r3, r1
  406024:	9901      	ldr	r1, [sp, #4]
  406026:	4602      	mov	r2, r0
  406028:	1a7f      	subs	r7, r7, r1
  40602a:	f8d8 0010 	ldr.w	r0, [r8, #16]
  40602e:	6931      	ldr	r1, [r6, #16]
  406030:	1a41      	subs	r1, r0, r1
  406032:	eb07 1141 	add.w	r1, r7, r1, lsl #5
  406036:	2900      	cmp	r1, #0
  406038:	bfcc      	ite	gt
  40603a:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
  40603e:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
  406042:	4620      	mov	r0, r4
  406044:	4629      	mov	r1, r5
  406046:	f001 fa09 	bl	40745c <__aeabi_ddiv>
  40604a:	b002      	add	sp, #8
  40604c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00406050 <_mprec_log10>:
  406050:	2817      	cmp	r0, #23
  406052:	b510      	push	{r4, lr}
  406054:	4604      	mov	r4, r0
  406056:	dc05      	bgt.n	406064 <_mprec_log10+0x14>
  406058:	4b07      	ldr	r3, [pc, #28]	; (406078 <_mprec_log10+0x28>)
  40605a:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
  40605e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  406062:	bd10      	pop	{r4, pc}
  406064:	4905      	ldr	r1, [pc, #20]	; (40607c <_mprec_log10+0x2c>)
  406066:	2000      	movs	r0, #0
  406068:	2200      	movs	r2, #0
  40606a:	4b05      	ldr	r3, [pc, #20]	; (406080 <_mprec_log10+0x30>)
  40606c:	f001 f8cc 	bl	407208 <__aeabi_dmul>
  406070:	3c01      	subs	r4, #1
  406072:	d1f9      	bne.n	406068 <_mprec_log10+0x18>
  406074:	bd10      	pop	{r4, pc}
  406076:	bf00      	nop
  406078:	00407fe0 	.word	0x00407fe0
  40607c:	3ff00000 	.word	0x3ff00000
  406080:	40240000 	.word	0x40240000

00406084 <__copybits>:
  406084:	b510      	push	{r4, lr}
  406086:	3901      	subs	r1, #1
  406088:	f102 0314 	add.w	r3, r2, #20
  40608c:	1149      	asrs	r1, r1, #5
  40608e:	6912      	ldr	r2, [r2, #16]
  406090:	3101      	adds	r1, #1
  406092:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  406096:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  40609a:	4293      	cmp	r3, r2
  40609c:	d204      	bcs.n	4060a8 <__copybits+0x24>
  40609e:	f853 4b04 	ldr.w	r4, [r3], #4
  4060a2:	f840 4b04 	str.w	r4, [r0], #4
  4060a6:	e7f8      	b.n	40609a <__copybits+0x16>
  4060a8:	4288      	cmp	r0, r1
  4060aa:	d203      	bcs.n	4060b4 <__copybits+0x30>
  4060ac:	2300      	movs	r3, #0
  4060ae:	f840 3b04 	str.w	r3, [r0], #4
  4060b2:	e7f9      	b.n	4060a8 <__copybits+0x24>
  4060b4:	bd10      	pop	{r4, pc}

004060b6 <__any_on>:
  4060b6:	f100 0214 	add.w	r2, r0, #20
  4060ba:	6900      	ldr	r0, [r0, #16]
  4060bc:	114b      	asrs	r3, r1, #5
  4060be:	4283      	cmp	r3, r0
  4060c0:	b510      	push	{r4, lr}
  4060c2:	dc0c      	bgt.n	4060de <__any_on+0x28>
  4060c4:	da0c      	bge.n	4060e0 <__any_on+0x2a>
  4060c6:	f011 011f 	ands.w	r1, r1, #31
  4060ca:	d009      	beq.n	4060e0 <__any_on+0x2a>
  4060cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  4060d0:	fa20 f401 	lsr.w	r4, r0, r1
  4060d4:	fa04 f101 	lsl.w	r1, r4, r1
  4060d8:	4281      	cmp	r1, r0
  4060da:	d10e      	bne.n	4060fa <__any_on+0x44>
  4060dc:	e000      	b.n	4060e0 <__any_on+0x2a>
  4060de:	4603      	mov	r3, r0
  4060e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4060e4:	4293      	cmp	r3, r2
  4060e6:	4619      	mov	r1, r3
  4060e8:	d905      	bls.n	4060f6 <__any_on+0x40>
  4060ea:	f851 1c04 	ldr.w	r1, [r1, #-4]
  4060ee:	3b04      	subs	r3, #4
  4060f0:	2900      	cmp	r1, #0
  4060f2:	d0f7      	beq.n	4060e4 <__any_on+0x2e>
  4060f4:	e001      	b.n	4060fa <__any_on+0x44>
  4060f6:	2000      	movs	r0, #0
  4060f8:	bd10      	pop	{r4, pc}
  4060fa:	2001      	movs	r0, #1
  4060fc:	bd10      	pop	{r4, pc}
  4060fe:	bf00      	nop

00406100 <_realloc_r>:
  406100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406104:	4681      	mov	r9, r0
  406106:	460c      	mov	r4, r1
  406108:	b929      	cbnz	r1, 406116 <_realloc_r+0x16>
  40610a:	4611      	mov	r1, r2
  40610c:	b003      	add	sp, #12
  40610e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406112:	f7ff b9d7 	b.w	4054c4 <_malloc_r>
  406116:	9201      	str	r2, [sp, #4]
  406118:	f7ff fc05 	bl	405926 <__malloc_lock>
  40611c:	9a01      	ldr	r2, [sp, #4]
  40611e:	f854 5c04 	ldr.w	r5, [r4, #-4]
  406122:	f102 070b 	add.w	r7, r2, #11
  406126:	2f16      	cmp	r7, #22
  406128:	f1a4 0808 	sub.w	r8, r4, #8
  40612c:	f025 0603 	bic.w	r6, r5, #3
  406130:	d903      	bls.n	40613a <_realloc_r+0x3a>
  406132:	f037 0707 	bics.w	r7, r7, #7
  406136:	d501      	bpl.n	40613c <_realloc_r+0x3c>
  406138:	e002      	b.n	406140 <_realloc_r+0x40>
  40613a:	2710      	movs	r7, #16
  40613c:	4297      	cmp	r7, r2
  40613e:	d204      	bcs.n	40614a <_realloc_r+0x4a>
  406140:	230c      	movs	r3, #12
  406142:	f8c9 3000 	str.w	r3, [r9]
  406146:	2000      	movs	r0, #0
  406148:	e180      	b.n	40644c <_realloc_r+0x34c>
  40614a:	42be      	cmp	r6, r7
  40614c:	f280 8156 	bge.w	4063fc <_realloc_r+0x2fc>
  406150:	49a3      	ldr	r1, [pc, #652]	; (4063e0 <_realloc_r+0x2e0>)
  406152:	eb08 0306 	add.w	r3, r8, r6
  406156:	f8d1 e008 	ldr.w	lr, [r1, #8]
  40615a:	468b      	mov	fp, r1
  40615c:	4573      	cmp	r3, lr
  40615e:	6858      	ldr	r0, [r3, #4]
  406160:	d005      	beq.n	40616e <_realloc_r+0x6e>
  406162:	f020 0101 	bic.w	r1, r0, #1
  406166:	4419      	add	r1, r3
  406168:	6849      	ldr	r1, [r1, #4]
  40616a:	07c9      	lsls	r1, r1, #31
  40616c:	d425      	bmi.n	4061ba <_realloc_r+0xba>
  40616e:	f020 0003 	bic.w	r0, r0, #3
  406172:	4573      	cmp	r3, lr
  406174:	eb00 0106 	add.w	r1, r0, r6
  406178:	d117      	bne.n	4061aa <_realloc_r+0xaa>
  40617a:	f107 0c10 	add.w	ip, r7, #16
  40617e:	4561      	cmp	r1, ip
  406180:	db1d      	blt.n	4061be <_realloc_r+0xbe>
  406182:	1bc9      	subs	r1, r1, r7
  406184:	eb08 0507 	add.w	r5, r8, r7
  406188:	f041 0101 	orr.w	r1, r1, #1
  40618c:	f8cb 5008 	str.w	r5, [fp, #8]
  406190:	6069      	str	r1, [r5, #4]
  406192:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406196:	4648      	mov	r0, r9
  406198:	f003 0301 	and.w	r3, r3, #1
  40619c:	431f      	orrs	r7, r3
  40619e:	f844 7c04 	str.w	r7, [r4, #-4]
  4061a2:	f7ff fbc1 	bl	405928 <__malloc_unlock>
  4061a6:	4620      	mov	r0, r4
  4061a8:	e150      	b.n	40644c <_realloc_r+0x34c>
  4061aa:	42b9      	cmp	r1, r7
  4061ac:	db07      	blt.n	4061be <_realloc_r+0xbe>
  4061ae:	68da      	ldr	r2, [r3, #12]
  4061b0:	689b      	ldr	r3, [r3, #8]
  4061b2:	460e      	mov	r6, r1
  4061b4:	60da      	str	r2, [r3, #12]
  4061b6:	6093      	str	r3, [r2, #8]
  4061b8:	e120      	b.n	4063fc <_realloc_r+0x2fc>
  4061ba:	2000      	movs	r0, #0
  4061bc:	4603      	mov	r3, r0
  4061be:	07e9      	lsls	r1, r5, #31
  4061c0:	f100 80cb 	bmi.w	40635a <_realloc_r+0x25a>
  4061c4:	f854 5c08 	ldr.w	r5, [r4, #-8]
  4061c8:	ebc5 0508 	rsb	r5, r5, r8
  4061cc:	6869      	ldr	r1, [r5, #4]
  4061ce:	f021 0103 	bic.w	r1, r1, #3
  4061d2:	eb01 0a06 	add.w	sl, r1, r6
  4061d6:	2b00      	cmp	r3, #0
  4061d8:	f000 808a 	beq.w	4062f0 <_realloc_r+0x1f0>
  4061dc:	4573      	cmp	r3, lr
  4061de:	d14d      	bne.n	40627c <_realloc_r+0x17c>
  4061e0:	eb0a 0300 	add.w	r3, sl, r0
  4061e4:	f107 0110 	add.w	r1, r7, #16
  4061e8:	428b      	cmp	r3, r1
  4061ea:	f2c0 8081 	blt.w	4062f0 <_realloc_r+0x1f0>
  4061ee:	46a8      	mov	r8, r5
  4061f0:	68ea      	ldr	r2, [r5, #12]
  4061f2:	f858 1f08 	ldr.w	r1, [r8, #8]!
  4061f6:	60ca      	str	r2, [r1, #12]
  4061f8:	6091      	str	r1, [r2, #8]
  4061fa:	1f32      	subs	r2, r6, #4
  4061fc:	2a24      	cmp	r2, #36	; 0x24
  4061fe:	d826      	bhi.n	40624e <_realloc_r+0x14e>
  406200:	2a13      	cmp	r2, #19
  406202:	d91c      	bls.n	40623e <_realloc_r+0x13e>
  406204:	6821      	ldr	r1, [r4, #0]
  406206:	2a1b      	cmp	r2, #27
  406208:	60a9      	str	r1, [r5, #8]
  40620a:	6861      	ldr	r1, [r4, #4]
  40620c:	60e9      	str	r1, [r5, #12]
  40620e:	d803      	bhi.n	406218 <_realloc_r+0x118>
  406210:	f105 0210 	add.w	r2, r5, #16
  406214:	3408      	adds	r4, #8
  406216:	e013      	b.n	406240 <_realloc_r+0x140>
  406218:	68a1      	ldr	r1, [r4, #8]
  40621a:	2a24      	cmp	r2, #36	; 0x24
  40621c:	6129      	str	r1, [r5, #16]
  40621e:	68e1      	ldr	r1, [r4, #12]
  406220:	6169      	str	r1, [r5, #20]
  406222:	d003      	beq.n	40622c <_realloc_r+0x12c>
  406224:	f105 0218 	add.w	r2, r5, #24
  406228:	3410      	adds	r4, #16
  40622a:	e009      	b.n	406240 <_realloc_r+0x140>
  40622c:	6922      	ldr	r2, [r4, #16]
  40622e:	3418      	adds	r4, #24
  406230:	61aa      	str	r2, [r5, #24]
  406232:	f854 1c04 	ldr.w	r1, [r4, #-4]
  406236:	f105 0220 	add.w	r2, r5, #32
  40623a:	61e9      	str	r1, [r5, #28]
  40623c:	e000      	b.n	406240 <_realloc_r+0x140>
  40623e:	4642      	mov	r2, r8
  406240:	6821      	ldr	r1, [r4, #0]
  406242:	6011      	str	r1, [r2, #0]
  406244:	6861      	ldr	r1, [r4, #4]
  406246:	6051      	str	r1, [r2, #4]
  406248:	68a1      	ldr	r1, [r4, #8]
  40624a:	6091      	str	r1, [r2, #8]
  40624c:	e005      	b.n	40625a <_realloc_r+0x15a>
  40624e:	4640      	mov	r0, r8
  406250:	4621      	mov	r1, r4
  406252:	9301      	str	r3, [sp, #4]
  406254:	f7ff fb4c 	bl	4058f0 <memmove>
  406258:	9b01      	ldr	r3, [sp, #4]
  40625a:	1bdb      	subs	r3, r3, r7
  40625c:	19ea      	adds	r2, r5, r7
  40625e:	f043 0301 	orr.w	r3, r3, #1
  406262:	f8cb 2008 	str.w	r2, [fp, #8]
  406266:	6053      	str	r3, [r2, #4]
  406268:	686b      	ldr	r3, [r5, #4]
  40626a:	4648      	mov	r0, r9
  40626c:	f003 0301 	and.w	r3, r3, #1
  406270:	431f      	orrs	r7, r3
  406272:	606f      	str	r7, [r5, #4]
  406274:	f7ff fb58 	bl	405928 <__malloc_unlock>
  406278:	4640      	mov	r0, r8
  40627a:	e0e7      	b.n	40644c <_realloc_r+0x34c>
  40627c:	eb0a 0b00 	add.w	fp, sl, r0
  406280:	45bb      	cmp	fp, r7
  406282:	db35      	blt.n	4062f0 <_realloc_r+0x1f0>
  406284:	68da      	ldr	r2, [r3, #12]
  406286:	689b      	ldr	r3, [r3, #8]
  406288:	4628      	mov	r0, r5
  40628a:	60da      	str	r2, [r3, #12]
  40628c:	6093      	str	r3, [r2, #8]
  40628e:	f850 2f08 	ldr.w	r2, [r0, #8]!
  406292:	68eb      	ldr	r3, [r5, #12]
  406294:	60d3      	str	r3, [r2, #12]
  406296:	609a      	str	r2, [r3, #8]
  406298:	1f32      	subs	r2, r6, #4
  40629a:	2a24      	cmp	r2, #36	; 0x24
  40629c:	d823      	bhi.n	4062e6 <_realloc_r+0x1e6>
  40629e:	2a13      	cmp	r2, #19
  4062a0:	d91a      	bls.n	4062d8 <_realloc_r+0x1d8>
  4062a2:	6823      	ldr	r3, [r4, #0]
  4062a4:	2a1b      	cmp	r2, #27
  4062a6:	60ab      	str	r3, [r5, #8]
  4062a8:	6863      	ldr	r3, [r4, #4]
  4062aa:	60eb      	str	r3, [r5, #12]
  4062ac:	d803      	bhi.n	4062b6 <_realloc_r+0x1b6>
  4062ae:	f105 0010 	add.w	r0, r5, #16
  4062b2:	3408      	adds	r4, #8
  4062b4:	e010      	b.n	4062d8 <_realloc_r+0x1d8>
  4062b6:	68a3      	ldr	r3, [r4, #8]
  4062b8:	2a24      	cmp	r2, #36	; 0x24
  4062ba:	612b      	str	r3, [r5, #16]
  4062bc:	68e3      	ldr	r3, [r4, #12]
  4062be:	616b      	str	r3, [r5, #20]
  4062c0:	d003      	beq.n	4062ca <_realloc_r+0x1ca>
  4062c2:	f105 0018 	add.w	r0, r5, #24
  4062c6:	3410      	adds	r4, #16
  4062c8:	e006      	b.n	4062d8 <_realloc_r+0x1d8>
  4062ca:	6923      	ldr	r3, [r4, #16]
  4062cc:	f105 0020 	add.w	r0, r5, #32
  4062d0:	61ab      	str	r3, [r5, #24]
  4062d2:	6963      	ldr	r3, [r4, #20]
  4062d4:	3418      	adds	r4, #24
  4062d6:	61eb      	str	r3, [r5, #28]
  4062d8:	6823      	ldr	r3, [r4, #0]
  4062da:	6003      	str	r3, [r0, #0]
  4062dc:	6863      	ldr	r3, [r4, #4]
  4062de:	6043      	str	r3, [r0, #4]
  4062e0:	68a3      	ldr	r3, [r4, #8]
  4062e2:	6083      	str	r3, [r0, #8]
  4062e4:	e002      	b.n	4062ec <_realloc_r+0x1ec>
  4062e6:	4621      	mov	r1, r4
  4062e8:	f7ff fb02 	bl	4058f0 <memmove>
  4062ec:	465e      	mov	r6, fp
  4062ee:	e02e      	b.n	40634e <_realloc_r+0x24e>
  4062f0:	45ba      	cmp	sl, r7
  4062f2:	db32      	blt.n	40635a <_realloc_r+0x25a>
  4062f4:	4628      	mov	r0, r5
  4062f6:	f850 2f08 	ldr.w	r2, [r0, #8]!
  4062fa:	68eb      	ldr	r3, [r5, #12]
  4062fc:	60d3      	str	r3, [r2, #12]
  4062fe:	609a      	str	r2, [r3, #8]
  406300:	1f32      	subs	r2, r6, #4
  406302:	2a24      	cmp	r2, #36	; 0x24
  406304:	d825      	bhi.n	406352 <_realloc_r+0x252>
  406306:	2a13      	cmp	r2, #19
  406308:	d91a      	bls.n	406340 <_realloc_r+0x240>
  40630a:	6823      	ldr	r3, [r4, #0]
  40630c:	2a1b      	cmp	r2, #27
  40630e:	60ab      	str	r3, [r5, #8]
  406310:	6863      	ldr	r3, [r4, #4]
  406312:	60eb      	str	r3, [r5, #12]
  406314:	d803      	bhi.n	40631e <_realloc_r+0x21e>
  406316:	f105 0010 	add.w	r0, r5, #16
  40631a:	3408      	adds	r4, #8
  40631c:	e010      	b.n	406340 <_realloc_r+0x240>
  40631e:	68a3      	ldr	r3, [r4, #8]
  406320:	2a24      	cmp	r2, #36	; 0x24
  406322:	612b      	str	r3, [r5, #16]
  406324:	68e3      	ldr	r3, [r4, #12]
  406326:	616b      	str	r3, [r5, #20]
  406328:	d003      	beq.n	406332 <_realloc_r+0x232>
  40632a:	f105 0018 	add.w	r0, r5, #24
  40632e:	3410      	adds	r4, #16
  406330:	e006      	b.n	406340 <_realloc_r+0x240>
  406332:	6923      	ldr	r3, [r4, #16]
  406334:	f105 0020 	add.w	r0, r5, #32
  406338:	61ab      	str	r3, [r5, #24]
  40633a:	6963      	ldr	r3, [r4, #20]
  40633c:	3418      	adds	r4, #24
  40633e:	61eb      	str	r3, [r5, #28]
  406340:	6823      	ldr	r3, [r4, #0]
  406342:	6003      	str	r3, [r0, #0]
  406344:	6863      	ldr	r3, [r4, #4]
  406346:	6043      	str	r3, [r0, #4]
  406348:	68a3      	ldr	r3, [r4, #8]
  40634a:	6083      	str	r3, [r0, #8]
  40634c:	4656      	mov	r6, sl
  40634e:	46a8      	mov	r8, r5
  406350:	e054      	b.n	4063fc <_realloc_r+0x2fc>
  406352:	4621      	mov	r1, r4
  406354:	f7ff facc 	bl	4058f0 <memmove>
  406358:	e7f8      	b.n	40634c <_realloc_r+0x24c>
  40635a:	4648      	mov	r0, r9
  40635c:	4611      	mov	r1, r2
  40635e:	f7ff f8b1 	bl	4054c4 <_malloc_r>
  406362:	4605      	mov	r5, r0
  406364:	2800      	cmp	r0, #0
  406366:	d044      	beq.n	4063f2 <_realloc_r+0x2f2>
  406368:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40636c:	f1a0 0208 	sub.w	r2, r0, #8
  406370:	f023 0301 	bic.w	r3, r3, #1
  406374:	4443      	add	r3, r8
  406376:	429a      	cmp	r2, r3
  406378:	d105      	bne.n	406386 <_realloc_r+0x286>
  40637a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40637e:	f023 0303 	bic.w	r3, r3, #3
  406382:	441e      	add	r6, r3
  406384:	e03a      	b.n	4063fc <_realloc_r+0x2fc>
  406386:	1f32      	subs	r2, r6, #4
  406388:	2a24      	cmp	r2, #36	; 0x24
  40638a:	d82b      	bhi.n	4063e4 <_realloc_r+0x2e4>
  40638c:	2a13      	cmp	r2, #19
  40638e:	d91e      	bls.n	4063ce <_realloc_r+0x2ce>
  406390:	6823      	ldr	r3, [r4, #0]
  406392:	2a1b      	cmp	r2, #27
  406394:	6003      	str	r3, [r0, #0]
  406396:	6863      	ldr	r3, [r4, #4]
  406398:	6043      	str	r3, [r0, #4]
  40639a:	d804      	bhi.n	4063a6 <_realloc_r+0x2a6>
  40639c:	f100 0308 	add.w	r3, r0, #8
  4063a0:	f104 0208 	add.w	r2, r4, #8
  4063a4:	e015      	b.n	4063d2 <_realloc_r+0x2d2>
  4063a6:	68a3      	ldr	r3, [r4, #8]
  4063a8:	2a24      	cmp	r2, #36	; 0x24
  4063aa:	6083      	str	r3, [r0, #8]
  4063ac:	68e3      	ldr	r3, [r4, #12]
  4063ae:	60c3      	str	r3, [r0, #12]
  4063b0:	d004      	beq.n	4063bc <_realloc_r+0x2bc>
  4063b2:	f100 0310 	add.w	r3, r0, #16
  4063b6:	f104 0210 	add.w	r2, r4, #16
  4063ba:	e00a      	b.n	4063d2 <_realloc_r+0x2d2>
  4063bc:	6923      	ldr	r3, [r4, #16]
  4063be:	f104 0218 	add.w	r2, r4, #24
  4063c2:	6103      	str	r3, [r0, #16]
  4063c4:	6961      	ldr	r1, [r4, #20]
  4063c6:	f100 0318 	add.w	r3, r0, #24
  4063ca:	6141      	str	r1, [r0, #20]
  4063cc:	e001      	b.n	4063d2 <_realloc_r+0x2d2>
  4063ce:	4603      	mov	r3, r0
  4063d0:	4622      	mov	r2, r4
  4063d2:	6811      	ldr	r1, [r2, #0]
  4063d4:	6019      	str	r1, [r3, #0]
  4063d6:	6851      	ldr	r1, [r2, #4]
  4063d8:	6059      	str	r1, [r3, #4]
  4063da:	6892      	ldr	r2, [r2, #8]
  4063dc:	609a      	str	r2, [r3, #8]
  4063de:	e004      	b.n	4063ea <_realloc_r+0x2ea>
  4063e0:	20000568 	.word	0x20000568
  4063e4:	4621      	mov	r1, r4
  4063e6:	f7ff fa83 	bl	4058f0 <memmove>
  4063ea:	4648      	mov	r0, r9
  4063ec:	4621      	mov	r1, r4
  4063ee:	f7fe ff6f 	bl	4052d0 <_free_r>
  4063f2:	4648      	mov	r0, r9
  4063f4:	f7ff fa98 	bl	405928 <__malloc_unlock>
  4063f8:	4628      	mov	r0, r5
  4063fa:	e027      	b.n	40644c <_realloc_r+0x34c>
  4063fc:	1bf3      	subs	r3, r6, r7
  4063fe:	2b0f      	cmp	r3, #15
  406400:	f8d8 2004 	ldr.w	r2, [r8, #4]
  406404:	d913      	bls.n	40642e <_realloc_r+0x32e>
  406406:	f002 0201 	and.w	r2, r2, #1
  40640a:	eb08 0107 	add.w	r1, r8, r7
  40640e:	4317      	orrs	r7, r2
  406410:	f043 0201 	orr.w	r2, r3, #1
  406414:	f8c8 7004 	str.w	r7, [r8, #4]
  406418:	440b      	add	r3, r1
  40641a:	604a      	str	r2, [r1, #4]
  40641c:	685a      	ldr	r2, [r3, #4]
  40641e:	4648      	mov	r0, r9
  406420:	f042 0201 	orr.w	r2, r2, #1
  406424:	605a      	str	r2, [r3, #4]
  406426:	3108      	adds	r1, #8
  406428:	f7fe ff52 	bl	4052d0 <_free_r>
  40642c:	e009      	b.n	406442 <_realloc_r+0x342>
  40642e:	f002 0201 	and.w	r2, r2, #1
  406432:	4332      	orrs	r2, r6
  406434:	f8c8 2004 	str.w	r2, [r8, #4]
  406438:	4446      	add	r6, r8
  40643a:	6873      	ldr	r3, [r6, #4]
  40643c:	f043 0301 	orr.w	r3, r3, #1
  406440:	6073      	str	r3, [r6, #4]
  406442:	4648      	mov	r0, r9
  406444:	f7ff fa70 	bl	405928 <__malloc_unlock>
  406448:	f108 0008 	add.w	r0, r8, #8
  40644c:	b003      	add	sp, #12
  40644e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406452:	bf00      	nop

00406454 <__fpclassifyd>:
  406454:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406458:	b510      	push	{r4, lr}
  40645a:	d100      	bne.n	40645e <__fpclassifyd+0xa>
  40645c:	b178      	cbz	r0, 40647e <__fpclassifyd+0x2a>
  40645e:	4a0c      	ldr	r2, [pc, #48]	; (406490 <__fpclassifyd+0x3c>)
  406460:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  406464:	4294      	cmp	r4, r2
  406466:	d90c      	bls.n	406482 <__fpclassifyd+0x2e>
  406468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  40646c:	d30b      	bcc.n	406486 <__fpclassifyd+0x32>
  40646e:	4a09      	ldr	r2, [pc, #36]	; (406494 <__fpclassifyd+0x40>)
  406470:	4293      	cmp	r3, r2
  406472:	d10a      	bne.n	40648a <__fpclassifyd+0x36>
  406474:	f1d0 0001 	rsbs	r0, r0, #1
  406478:	bf38      	it	cc
  40647a:	2000      	movcc	r0, #0
  40647c:	bd10      	pop	{r4, pc}
  40647e:	2002      	movs	r0, #2
  406480:	bd10      	pop	{r4, pc}
  406482:	2004      	movs	r0, #4
  406484:	bd10      	pop	{r4, pc}
  406486:	2003      	movs	r0, #3
  406488:	bd10      	pop	{r4, pc}
  40648a:	2000      	movs	r0, #0
  40648c:	bd10      	pop	{r4, pc}
  40648e:	bf00      	nop
  406490:	7fdfffff 	.word	0x7fdfffff
  406494:	7ff00000 	.word	0x7ff00000

00406498 <_sbrk_r>:
  406498:	b538      	push	{r3, r4, r5, lr}
  40649a:	4c06      	ldr	r4, [pc, #24]	; (4064b4 <_sbrk_r+0x1c>)
  40649c:	2300      	movs	r3, #0
  40649e:	4605      	mov	r5, r0
  4064a0:	4608      	mov	r0, r1
  4064a2:	6023      	str	r3, [r4, #0]
  4064a4:	f7fc ff5e 	bl	403364 <_sbrk>
  4064a8:	1c43      	adds	r3, r0, #1
  4064aa:	d102      	bne.n	4064b2 <_sbrk_r+0x1a>
  4064ac:	6823      	ldr	r3, [r4, #0]
  4064ae:	b103      	cbz	r3, 4064b2 <_sbrk_r+0x1a>
  4064b0:	602b      	str	r3, [r5, #0]
  4064b2:	bd38      	pop	{r3, r4, r5, pc}
  4064b4:	20000c54 	.word	0x20000c54

004064b8 <strcmp>:
  4064b8:	f810 2b01 	ldrb.w	r2, [r0], #1
  4064bc:	f811 3b01 	ldrb.w	r3, [r1], #1
  4064c0:	2a01      	cmp	r2, #1
  4064c2:	bf28      	it	cs
  4064c4:	429a      	cmpcs	r2, r3
  4064c6:	d0f7      	beq.n	4064b8 <strcmp>
  4064c8:	1ad0      	subs	r0, r2, r3
  4064ca:	4770      	bx	lr

004064cc <__ssprint_r>:
  4064cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064d0:	4680      	mov	r8, r0
  4064d2:	6890      	ldr	r0, [r2, #8]
  4064d4:	460c      	mov	r4, r1
  4064d6:	4615      	mov	r5, r2
  4064d8:	f8d2 9000 	ldr.w	r9, [r2]
  4064dc:	b118      	cbz	r0, 4064e6 <__ssprint_r+0x1a>
  4064de:	2300      	movs	r3, #0
  4064e0:	9301      	str	r3, [sp, #4]
  4064e2:	461e      	mov	r6, r3
  4064e4:	e008      	b.n	4064f8 <__ssprint_r+0x2c>
  4064e6:	6050      	str	r0, [r2, #4]
  4064e8:	e066      	b.n	4065b8 <__ssprint_r+0xec>
  4064ea:	f8d9 3000 	ldr.w	r3, [r9]
  4064ee:	f8d9 6004 	ldr.w	r6, [r9, #4]
  4064f2:	9301      	str	r3, [sp, #4]
  4064f4:	f109 0908 	add.w	r9, r9, #8
  4064f8:	2e00      	cmp	r6, #0
  4064fa:	d0f6      	beq.n	4064ea <__ssprint_r+0x1e>
  4064fc:	68a7      	ldr	r7, [r4, #8]
  4064fe:	42be      	cmp	r6, r7
  406500:	d347      	bcc.n	406592 <__ssprint_r+0xc6>
  406502:	89a2      	ldrh	r2, [r4, #12]
  406504:	f412 6f90 	tst.w	r2, #1152	; 0x480
  406508:	d041      	beq.n	40658e <__ssprint_r+0xc2>
  40650a:	6823      	ldr	r3, [r4, #0]
  40650c:	6921      	ldr	r1, [r4, #16]
  40650e:	2002      	movs	r0, #2
  406510:	ebc1 0a03 	rsb	sl, r1, r3
  406514:	6963      	ldr	r3, [r4, #20]
  406516:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40651a:	fb93 fbf0 	sdiv	fp, r3, r0
  40651e:	f10a 0001 	add.w	r0, sl, #1
  406522:	4430      	add	r0, r6
  406524:	4583      	cmp	fp, r0
  406526:	bf38      	it	cc
  406528:	4683      	movcc	fp, r0
  40652a:	0553      	lsls	r3, r2, #21
  40652c:	4640      	mov	r0, r8
  40652e:	d50f      	bpl.n	406550 <__ssprint_r+0x84>
  406530:	4659      	mov	r1, fp
  406532:	f7fe ffc7 	bl	4054c4 <_malloc_r>
  406536:	4607      	mov	r7, r0
  406538:	b198      	cbz	r0, 406562 <__ssprint_r+0x96>
  40653a:	4652      	mov	r2, sl
  40653c:	6921      	ldr	r1, [r4, #16]
  40653e:	f7fc ff73 	bl	403428 <memcpy>
  406542:	89a2      	ldrh	r2, [r4, #12]
  406544:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40654c:	81a2      	strh	r2, [r4, #12]
  40654e:	e015      	b.n	40657c <__ssprint_r+0xb0>
  406550:	465a      	mov	r2, fp
  406552:	f7ff fdd5 	bl	406100 <_realloc_r>
  406556:	4607      	mov	r7, r0
  406558:	b980      	cbnz	r0, 40657c <__ssprint_r+0xb0>
  40655a:	4640      	mov	r0, r8
  40655c:	6921      	ldr	r1, [r4, #16]
  40655e:	f7fe feb7 	bl	4052d0 <_free_r>
  406562:	230c      	movs	r3, #12
  406564:	f8c8 3000 	str.w	r3, [r8]
  406568:	89a3      	ldrh	r3, [r4, #12]
  40656a:	f04f 30ff 	mov.w	r0, #4294967295
  40656e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406572:	81a3      	strh	r3, [r4, #12]
  406574:	2300      	movs	r3, #0
  406576:	60ab      	str	r3, [r5, #8]
  406578:	606b      	str	r3, [r5, #4]
  40657a:	e01d      	b.n	4065b8 <__ssprint_r+0xec>
  40657c:	6127      	str	r7, [r4, #16]
  40657e:	ebca 030b 	rsb	r3, sl, fp
  406582:	4457      	add	r7, sl
  406584:	6027      	str	r7, [r4, #0]
  406586:	f8c4 b014 	str.w	fp, [r4, #20]
  40658a:	4637      	mov	r7, r6
  40658c:	60a3      	str	r3, [r4, #8]
  40658e:	42be      	cmp	r6, r7
  406590:	d200      	bcs.n	406594 <__ssprint_r+0xc8>
  406592:	4637      	mov	r7, r6
  406594:	463a      	mov	r2, r7
  406596:	6820      	ldr	r0, [r4, #0]
  406598:	9901      	ldr	r1, [sp, #4]
  40659a:	f7ff f9a9 	bl	4058f0 <memmove>
  40659e:	68a3      	ldr	r3, [r4, #8]
  4065a0:	1bdb      	subs	r3, r3, r7
  4065a2:	60a3      	str	r3, [r4, #8]
  4065a4:	6823      	ldr	r3, [r4, #0]
  4065a6:	441f      	add	r7, r3
  4065a8:	68ab      	ldr	r3, [r5, #8]
  4065aa:	6027      	str	r7, [r4, #0]
  4065ac:	1b9e      	subs	r6, r3, r6
  4065ae:	60ae      	str	r6, [r5, #8]
  4065b0:	2e00      	cmp	r6, #0
  4065b2:	d19a      	bne.n	4064ea <__ssprint_r+0x1e>
  4065b4:	606e      	str	r6, [r5, #4]
  4065b6:	4630      	mov	r0, r6
  4065b8:	b003      	add	sp, #12
  4065ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004065be <_svfiprintf_r>:
  4065be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4065c2:	461e      	mov	r6, r3
  4065c4:	898b      	ldrh	r3, [r1, #12]
  4065c6:	b0ad      	sub	sp, #180	; 0xb4
  4065c8:	4688      	mov	r8, r1
  4065ca:	0619      	lsls	r1, r3, #24
  4065cc:	4683      	mov	fp, r0
  4065ce:	9202      	str	r2, [sp, #8]
  4065d0:	d513      	bpl.n	4065fa <_svfiprintf_r+0x3c>
  4065d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4065d6:	b983      	cbnz	r3, 4065fa <_svfiprintf_r+0x3c>
  4065d8:	2140      	movs	r1, #64	; 0x40
  4065da:	f7fe ff73 	bl	4054c4 <_malloc_r>
  4065de:	f8c8 0000 	str.w	r0, [r8]
  4065e2:	f8c8 0010 	str.w	r0, [r8, #16]
  4065e6:	b928      	cbnz	r0, 4065f4 <_svfiprintf_r+0x36>
  4065e8:	230c      	movs	r3, #12
  4065ea:	f8cb 3000 	str.w	r3, [fp]
  4065ee:	f04f 30ff 	mov.w	r0, #4294967295
  4065f2:	e3d4      	b.n	406d9e <_svfiprintf_r+0x7e0>
  4065f4:	2340      	movs	r3, #64	; 0x40
  4065f6:	f8c8 3014 	str.w	r3, [r8, #20]
  4065fa:	2300      	movs	r3, #0
  4065fc:	aa1c      	add	r2, sp, #112	; 0x70
  4065fe:	920f      	str	r2, [sp, #60]	; 0x3c
  406600:	9311      	str	r3, [sp, #68]	; 0x44
  406602:	9310      	str	r3, [sp, #64]	; 0x40
  406604:	4694      	mov	ip, r2
  406606:	930a      	str	r3, [sp, #40]	; 0x28
  406608:	9305      	str	r3, [sp, #20]
  40660a:	9b02      	ldr	r3, [sp, #8]
  40660c:	461c      	mov	r4, r3
  40660e:	f813 2b01 	ldrb.w	r2, [r3], #1
  406612:	b91a      	cbnz	r2, 40661c <_svfiprintf_r+0x5e>
  406614:	9802      	ldr	r0, [sp, #8]
  406616:	1a25      	subs	r5, r4, r0
  406618:	d103      	bne.n	406622 <_svfiprintf_r+0x64>
  40661a:	e01d      	b.n	406658 <_svfiprintf_r+0x9a>
  40661c:	2a25      	cmp	r2, #37	; 0x25
  40661e:	d1f5      	bne.n	40660c <_svfiprintf_r+0x4e>
  406620:	e7f8      	b.n	406614 <_svfiprintf_r+0x56>
  406622:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406624:	9902      	ldr	r1, [sp, #8]
  406626:	442b      	add	r3, r5
  406628:	9311      	str	r3, [sp, #68]	; 0x44
  40662a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40662c:	e88c 0022 	stmia.w	ip, {r1, r5}
  406630:	3301      	adds	r3, #1
  406632:	2b07      	cmp	r3, #7
  406634:	9310      	str	r3, [sp, #64]	; 0x40
  406636:	dc02      	bgt.n	40663e <_svfiprintf_r+0x80>
  406638:	f10c 0c08 	add.w	ip, ip, #8
  40663c:	e009      	b.n	406652 <_svfiprintf_r+0x94>
  40663e:	4658      	mov	r0, fp
  406640:	4641      	mov	r1, r8
  406642:	aa0f      	add	r2, sp, #60	; 0x3c
  406644:	f7ff ff42 	bl	4064cc <__ssprint_r>
  406648:	2800      	cmp	r0, #0
  40664a:	f040 83a0 	bne.w	406d8e <_svfiprintf_r+0x7d0>
  40664e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406652:	9a05      	ldr	r2, [sp, #20]
  406654:	442a      	add	r2, r5
  406656:	9205      	str	r2, [sp, #20]
  406658:	7823      	ldrb	r3, [r4, #0]
  40665a:	2b00      	cmp	r3, #0
  40665c:	f000 8390 	beq.w	406d80 <_svfiprintf_r+0x7c2>
  406660:	2200      	movs	r2, #0
  406662:	3401      	adds	r4, #1
  406664:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406668:	f04f 3aff 	mov.w	sl, #4294967295
  40666c:	9204      	str	r2, [sp, #16]
  40666e:	4617      	mov	r7, r2
  406670:	1c65      	adds	r5, r4, #1
  406672:	7823      	ldrb	r3, [r4, #0]
  406674:	9502      	str	r5, [sp, #8]
  406676:	2b58      	cmp	r3, #88	; 0x58
  406678:	d064      	beq.n	406744 <_svfiprintf_r+0x186>
  40667a:	dc2d      	bgt.n	4066d8 <_svfiprintf_r+0x11a>
  40667c:	2b2e      	cmp	r3, #46	; 0x2e
  40667e:	d076      	beq.n	40676e <_svfiprintf_r+0x1b0>
  406680:	dc12      	bgt.n	4066a8 <_svfiprintf_r+0xea>
  406682:	2b2a      	cmp	r3, #42	; 0x2a
  406684:	d066      	beq.n	406754 <_svfiprintf_r+0x196>
  406686:	dc08      	bgt.n	40669a <_svfiprintf_r+0xdc>
  406688:	2b20      	cmp	r3, #32
  40668a:	d05f      	beq.n	40674c <_svfiprintf_r+0x18e>
  40668c:	2b23      	cmp	r3, #35	; 0x23
  40668e:	f040 8201 	bne.w	406a94 <_svfiprintf_r+0x4d6>
  406692:	f047 0701 	orr.w	r7, r7, #1
  406696:	9c02      	ldr	r4, [sp, #8]
  406698:	e7ea      	b.n	406670 <_svfiprintf_r+0xb2>
  40669a:	2b2b      	cmp	r3, #43	; 0x2b
  40669c:	d101      	bne.n	4066a2 <_svfiprintf_r+0xe4>
  40669e:	461a      	mov	r2, r3
  4066a0:	e7f9      	b.n	406696 <_svfiprintf_r+0xd8>
  4066a2:	2b2d      	cmp	r3, #45	; 0x2d
  4066a4:	d060      	beq.n	406768 <_svfiprintf_r+0x1aa>
  4066a6:	e1f5      	b.n	406a94 <_svfiprintf_r+0x4d6>
  4066a8:	2b39      	cmp	r3, #57	; 0x39
  4066aa:	dc07      	bgt.n	4066bc <_svfiprintf_r+0xfe>
  4066ac:	2b31      	cmp	r3, #49	; 0x31
  4066ae:	da7f      	bge.n	4067b0 <_svfiprintf_r+0x1f2>
  4066b0:	2b30      	cmp	r3, #48	; 0x30
  4066b2:	f040 81ef 	bne.w	406a94 <_svfiprintf_r+0x4d6>
  4066b6:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  4066ba:	e7ec      	b.n	406696 <_svfiprintf_r+0xd8>
  4066bc:	2b4f      	cmp	r3, #79	; 0x4f
  4066be:	f000 80e0 	beq.w	406882 <_svfiprintf_r+0x2c4>
  4066c2:	2b55      	cmp	r3, #85	; 0x55
  4066c4:	f000 8120 	beq.w	406908 <_svfiprintf_r+0x34a>
  4066c8:	2b44      	cmp	r3, #68	; 0x44
  4066ca:	f040 81e3 	bne.w	406a94 <_svfiprintf_r+0x4d6>
  4066ce:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4066d2:	f047 0710 	orr.w	r7, r7, #16
  4066d6:	e094      	b.n	406802 <_svfiprintf_r+0x244>
  4066d8:	2b6e      	cmp	r3, #110	; 0x6e
  4066da:	f000 80b6 	beq.w	40684a <_svfiprintf_r+0x28c>
  4066de:	dc0d      	bgt.n	4066fc <_svfiprintf_r+0x13e>
  4066e0:	2b68      	cmp	r3, #104	; 0x68
  4066e2:	d076      	beq.n	4067d2 <_svfiprintf_r+0x214>
  4066e4:	dc05      	bgt.n	4066f2 <_svfiprintf_r+0x134>
  4066e6:	2b63      	cmp	r3, #99	; 0x63
  4066e8:	f000 8083 	beq.w	4067f2 <_svfiprintf_r+0x234>
  4066ec:	2b64      	cmp	r3, #100	; 0x64
  4066ee:	d026      	beq.n	40673e <_svfiprintf_r+0x180>
  4066f0:	e1d0      	b.n	406a94 <_svfiprintf_r+0x4d6>
  4066f2:	2b69      	cmp	r3, #105	; 0x69
  4066f4:	d023      	beq.n	40673e <_svfiprintf_r+0x180>
  4066f6:	2b6c      	cmp	r3, #108	; 0x6c
  4066f8:	d06e      	beq.n	4067d8 <_svfiprintf_r+0x21a>
  4066fa:	e1cb      	b.n	406a94 <_svfiprintf_r+0x4d6>
  4066fc:	2b71      	cmp	r3, #113	; 0x71
  4066fe:	d075      	beq.n	4067ec <_svfiprintf_r+0x22e>
  406700:	dc13      	bgt.n	40672a <_svfiprintf_r+0x16c>
  406702:	2b6f      	cmp	r3, #111	; 0x6f
  406704:	f000 80bf 	beq.w	406886 <_svfiprintf_r+0x2c8>
  406708:	2b70      	cmp	r3, #112	; 0x70
  40670a:	f040 81c3 	bne.w	406a94 <_svfiprintf_r+0x4d6>
  40670e:	2330      	movs	r3, #48	; 0x30
  406710:	48a0      	ldr	r0, [pc, #640]	; (406994 <_svfiprintf_r+0x3d6>)
  406712:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  406716:	2378      	movs	r3, #120	; 0x78
  406718:	6834      	ldr	r4, [r6, #0]
  40671a:	2500      	movs	r5, #0
  40671c:	f047 0702 	orr.w	r7, r7, #2
  406720:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  406724:	3604      	adds	r6, #4
  406726:	900a      	str	r0, [sp, #40]	; 0x28
  406728:	e12e      	b.n	406988 <_svfiprintf_r+0x3ca>
  40672a:	2b75      	cmp	r3, #117	; 0x75
  40672c:	f000 80ee 	beq.w	40690c <_svfiprintf_r+0x34e>
  406730:	2b78      	cmp	r3, #120	; 0x78
  406732:	f000 8103 	beq.w	40693c <_svfiprintf_r+0x37e>
  406736:	2b73      	cmp	r3, #115	; 0x73
  406738:	f040 81ac 	bne.w	406a94 <_svfiprintf_r+0x4d6>
  40673c:	e0bf      	b.n	4068be <_svfiprintf_r+0x300>
  40673e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406742:	e05e      	b.n	406802 <_svfiprintf_r+0x244>
  406744:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406748:	4c93      	ldr	r4, [pc, #588]	; (406998 <_svfiprintf_r+0x3da>)
  40674a:	e0fa      	b.n	406942 <_svfiprintf_r+0x384>
  40674c:	2a00      	cmp	r2, #0
  40674e:	bf08      	it	eq
  406750:	2220      	moveq	r2, #32
  406752:	e7a0      	b.n	406696 <_svfiprintf_r+0xd8>
  406754:	1d33      	adds	r3, r6, #4
  406756:	6836      	ldr	r6, [r6, #0]
  406758:	2e00      	cmp	r6, #0
  40675a:	9604      	str	r6, [sp, #16]
  40675c:	db01      	blt.n	406762 <_svfiprintf_r+0x1a4>
  40675e:	461e      	mov	r6, r3
  406760:	e799      	b.n	406696 <_svfiprintf_r+0xd8>
  406762:	4275      	negs	r5, r6
  406764:	9504      	str	r5, [sp, #16]
  406766:	461e      	mov	r6, r3
  406768:	f047 0704 	orr.w	r7, r7, #4
  40676c:	e793      	b.n	406696 <_svfiprintf_r+0xd8>
  40676e:	9c02      	ldr	r4, [sp, #8]
  406770:	7823      	ldrb	r3, [r4, #0]
  406772:	1c61      	adds	r1, r4, #1
  406774:	2b2a      	cmp	r3, #42	; 0x2a
  406776:	d002      	beq.n	40677e <_svfiprintf_r+0x1c0>
  406778:	f04f 0a00 	mov.w	sl, #0
  40677c:	e00a      	b.n	406794 <_svfiprintf_r+0x1d6>
  40677e:	f8d6 a000 	ldr.w	sl, [r6]
  406782:	1d33      	adds	r3, r6, #4
  406784:	f1ba 0f00 	cmp.w	sl, #0
  406788:	461e      	mov	r6, r3
  40678a:	9102      	str	r1, [sp, #8]
  40678c:	da83      	bge.n	406696 <_svfiprintf_r+0xd8>
  40678e:	f04f 3aff 	mov.w	sl, #4294967295
  406792:	e780      	b.n	406696 <_svfiprintf_r+0xd8>
  406794:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406798:	2809      	cmp	r0, #9
  40679a:	d805      	bhi.n	4067a8 <_svfiprintf_r+0x1ea>
  40679c:	230a      	movs	r3, #10
  40679e:	fb03 0a0a 	mla	sl, r3, sl, r0
  4067a2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4067a6:	e7f5      	b.n	406794 <_svfiprintf_r+0x1d6>
  4067a8:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  4067ac:	9102      	str	r1, [sp, #8]
  4067ae:	e762      	b.n	406676 <_svfiprintf_r+0xb8>
  4067b0:	2500      	movs	r5, #0
  4067b2:	9504      	str	r5, [sp, #16]
  4067b4:	9c04      	ldr	r4, [sp, #16]
  4067b6:	3b30      	subs	r3, #48	; 0x30
  4067b8:	210a      	movs	r1, #10
  4067ba:	fb01 3404 	mla	r4, r1, r4, r3
  4067be:	9902      	ldr	r1, [sp, #8]
  4067c0:	9404      	str	r4, [sp, #16]
  4067c2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4067c6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4067ca:	2809      	cmp	r0, #9
  4067cc:	d8ee      	bhi.n	4067ac <_svfiprintf_r+0x1ee>
  4067ce:	9102      	str	r1, [sp, #8]
  4067d0:	e7f0      	b.n	4067b4 <_svfiprintf_r+0x1f6>
  4067d2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  4067d6:	e75e      	b.n	406696 <_svfiprintf_r+0xd8>
  4067d8:	9d02      	ldr	r5, [sp, #8]
  4067da:	782b      	ldrb	r3, [r5, #0]
  4067dc:	2b6c      	cmp	r3, #108	; 0x6c
  4067de:	d102      	bne.n	4067e6 <_svfiprintf_r+0x228>
  4067e0:	3501      	adds	r5, #1
  4067e2:	9502      	str	r5, [sp, #8]
  4067e4:	e002      	b.n	4067ec <_svfiprintf_r+0x22e>
  4067e6:	f047 0710 	orr.w	r7, r7, #16
  4067ea:	e754      	b.n	406696 <_svfiprintf_r+0xd8>
  4067ec:	f047 0720 	orr.w	r7, r7, #32
  4067f0:	e751      	b.n	406696 <_svfiprintf_r+0xd8>
  4067f2:	6833      	ldr	r3, [r6, #0]
  4067f4:	2500      	movs	r5, #0
  4067f6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  4067fa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4067fe:	3604      	adds	r6, #4
  406800:	e152      	b.n	406aa8 <_svfiprintf_r+0x4ea>
  406802:	06ba      	lsls	r2, r7, #26
  406804:	d507      	bpl.n	406816 <_svfiprintf_r+0x258>
  406806:	3607      	adds	r6, #7
  406808:	f026 0307 	bic.w	r3, r6, #7
  40680c:	f103 0608 	add.w	r6, r3, #8
  406810:	e9d3 4500 	ldrd	r4, r5, [r3]
  406814:	e00d      	b.n	406832 <_svfiprintf_r+0x274>
  406816:	f017 0f10 	tst.w	r7, #16
  40681a:	f106 0304 	add.w	r3, r6, #4
  40681e:	d001      	beq.n	406824 <_svfiprintf_r+0x266>
  406820:	6834      	ldr	r4, [r6, #0]
  406822:	e004      	b.n	40682e <_svfiprintf_r+0x270>
  406824:	6834      	ldr	r4, [r6, #0]
  406826:	f017 0f40 	tst.w	r7, #64	; 0x40
  40682a:	bf18      	it	ne
  40682c:	b224      	sxthne	r4, r4
  40682e:	17e5      	asrs	r5, r4, #31
  406830:	461e      	mov	r6, r3
  406832:	2c00      	cmp	r4, #0
  406834:	f175 0000 	sbcs.w	r0, r5, #0
  406838:	f280 80b0 	bge.w	40699c <_svfiprintf_r+0x3de>
  40683c:	232d      	movs	r3, #45	; 0x2d
  40683e:	4264      	negs	r4, r4
  406840:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406844:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  406848:	e0a8      	b.n	40699c <_svfiprintf_r+0x3de>
  40684a:	f017 0f20 	tst.w	r7, #32
  40684e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406852:	f106 0104 	add.w	r1, r6, #4
  406856:	d007      	beq.n	406868 <_svfiprintf_r+0x2aa>
  406858:	9c05      	ldr	r4, [sp, #20]
  40685a:	6830      	ldr	r0, [r6, #0]
  40685c:	17e5      	asrs	r5, r4, #31
  40685e:	4622      	mov	r2, r4
  406860:	462b      	mov	r3, r5
  406862:	e9c0 2300 	strd	r2, r3, [r0]
  406866:	e00a      	b.n	40687e <_svfiprintf_r+0x2c0>
  406868:	06fb      	lsls	r3, r7, #27
  40686a:	d405      	bmi.n	406878 <_svfiprintf_r+0x2ba>
  40686c:	067f      	lsls	r7, r7, #25
  40686e:	d503      	bpl.n	406878 <_svfiprintf_r+0x2ba>
  406870:	6833      	ldr	r3, [r6, #0]
  406872:	9c05      	ldr	r4, [sp, #20]
  406874:	801c      	strh	r4, [r3, #0]
  406876:	e002      	b.n	40687e <_svfiprintf_r+0x2c0>
  406878:	6833      	ldr	r3, [r6, #0]
  40687a:	9d05      	ldr	r5, [sp, #20]
  40687c:	601d      	str	r5, [r3, #0]
  40687e:	460e      	mov	r6, r1
  406880:	e6c3      	b.n	40660a <_svfiprintf_r+0x4c>
  406882:	f047 0710 	orr.w	r7, r7, #16
  406886:	f017 0320 	ands.w	r3, r7, #32
  40688a:	d008      	beq.n	40689e <_svfiprintf_r+0x2e0>
  40688c:	3607      	adds	r6, #7
  40688e:	f026 0307 	bic.w	r3, r6, #7
  406892:	f103 0608 	add.w	r6, r3, #8
  406896:	e9d3 4500 	ldrd	r4, r5, [r3]
  40689a:	2300      	movs	r3, #0
  40689c:	e075      	b.n	40698a <_svfiprintf_r+0x3cc>
  40689e:	f017 0110 	ands.w	r1, r7, #16
  4068a2:	f106 0204 	add.w	r2, r6, #4
  4068a6:	d106      	bne.n	4068b6 <_svfiprintf_r+0x2f8>
  4068a8:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  4068ac:	d003      	beq.n	4068b6 <_svfiprintf_r+0x2f8>
  4068ae:	8834      	ldrh	r4, [r6, #0]
  4068b0:	2500      	movs	r5, #0
  4068b2:	4616      	mov	r6, r2
  4068b4:	e7f1      	b.n	40689a <_svfiprintf_r+0x2dc>
  4068b6:	6834      	ldr	r4, [r6, #0]
  4068b8:	2500      	movs	r5, #0
  4068ba:	4616      	mov	r6, r2
  4068bc:	e065      	b.n	40698a <_svfiprintf_r+0x3cc>
  4068be:	f8d6 9000 	ldr.w	r9, [r6]
  4068c2:	2300      	movs	r3, #0
  4068c4:	459a      	cmp	sl, r3
  4068c6:	f106 0604 	add.w	r6, r6, #4
  4068ca:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4068ce:	4648      	mov	r0, r9
  4068d0:	db11      	blt.n	4068f6 <_svfiprintf_r+0x338>
  4068d2:	4619      	mov	r1, r3
  4068d4:	4652      	mov	r2, sl
  4068d6:	f8cd c004 	str.w	ip, [sp, #4]
  4068da:	f7fe fffb 	bl	4058d4 <memchr>
  4068de:	f8dd c004 	ldr.w	ip, [sp, #4]
  4068e2:	2800      	cmp	r0, #0
  4068e4:	f000 80e5 	beq.w	406ab2 <_svfiprintf_r+0x4f4>
  4068e8:	ebc9 0000 	rsb	r0, r9, r0
  4068ec:	4550      	cmp	r0, sl
  4068ee:	bfb8      	it	lt
  4068f0:	4682      	movlt	sl, r0
  4068f2:	2500      	movs	r5, #0
  4068f4:	e0de      	b.n	406ab4 <_svfiprintf_r+0x4f6>
  4068f6:	f8cd c004 	str.w	ip, [sp, #4]
  4068fa:	f7fc fdeb 	bl	4034d4 <strlen>
  4068fe:	2500      	movs	r5, #0
  406900:	4682      	mov	sl, r0
  406902:	f8dd c004 	ldr.w	ip, [sp, #4]
  406906:	e0d5      	b.n	406ab4 <_svfiprintf_r+0x4f6>
  406908:	f047 0710 	orr.w	r7, r7, #16
  40690c:	06bd      	lsls	r5, r7, #26
  40690e:	d507      	bpl.n	406920 <_svfiprintf_r+0x362>
  406910:	3607      	adds	r6, #7
  406912:	f026 0307 	bic.w	r3, r6, #7
  406916:	f103 0608 	add.w	r6, r3, #8
  40691a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40691e:	e00b      	b.n	406938 <_svfiprintf_r+0x37a>
  406920:	f017 0f10 	tst.w	r7, #16
  406924:	f106 0304 	add.w	r3, r6, #4
  406928:	d103      	bne.n	406932 <_svfiprintf_r+0x374>
  40692a:	067c      	lsls	r4, r7, #25
  40692c:	d501      	bpl.n	406932 <_svfiprintf_r+0x374>
  40692e:	8834      	ldrh	r4, [r6, #0]
  406930:	e000      	b.n	406934 <_svfiprintf_r+0x376>
  406932:	6834      	ldr	r4, [r6, #0]
  406934:	2500      	movs	r5, #0
  406936:	461e      	mov	r6, r3
  406938:	2301      	movs	r3, #1
  40693a:	e026      	b.n	40698a <_svfiprintf_r+0x3cc>
  40693c:	4c15      	ldr	r4, [pc, #84]	; (406994 <_svfiprintf_r+0x3d6>)
  40693e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406942:	06b8      	lsls	r0, r7, #26
  406944:	940a      	str	r4, [sp, #40]	; 0x28
  406946:	d507      	bpl.n	406958 <_svfiprintf_r+0x39a>
  406948:	3607      	adds	r6, #7
  40694a:	f026 0207 	bic.w	r2, r6, #7
  40694e:	f102 0608 	add.w	r6, r2, #8
  406952:	e9d2 4500 	ldrd	r4, r5, [r2]
  406956:	e00b      	b.n	406970 <_svfiprintf_r+0x3b2>
  406958:	f017 0f10 	tst.w	r7, #16
  40695c:	f106 0204 	add.w	r2, r6, #4
  406960:	d103      	bne.n	40696a <_svfiprintf_r+0x3ac>
  406962:	0679      	lsls	r1, r7, #25
  406964:	d501      	bpl.n	40696a <_svfiprintf_r+0x3ac>
  406966:	8834      	ldrh	r4, [r6, #0]
  406968:	e000      	b.n	40696c <_svfiprintf_r+0x3ae>
  40696a:	6834      	ldr	r4, [r6, #0]
  40696c:	2500      	movs	r5, #0
  40696e:	4616      	mov	r6, r2
  406970:	07fa      	lsls	r2, r7, #31
  406972:	d509      	bpl.n	406988 <_svfiprintf_r+0x3ca>
  406974:	ea54 0005 	orrs.w	r0, r4, r5
  406978:	d006      	beq.n	406988 <_svfiprintf_r+0x3ca>
  40697a:	2230      	movs	r2, #48	; 0x30
  40697c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  406980:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  406984:	f047 0702 	orr.w	r7, r7, #2
  406988:	2302      	movs	r3, #2
  40698a:	2200      	movs	r2, #0
  40698c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406990:	e005      	b.n	40699e <_svfiprintf_r+0x3e0>
  406992:	bf00      	nop
  406994:	00407eb3 	.word	0x00407eb3
  406998:	00407ea2 	.word	0x00407ea2
  40699c:	2301      	movs	r3, #1
  40699e:	f1ba 0f00 	cmp.w	sl, #0
  4069a2:	bfa8      	it	ge
  4069a4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  4069a8:	ea54 0105 	orrs.w	r1, r4, r5
  4069ac:	d102      	bne.n	4069b4 <_svfiprintf_r+0x3f6>
  4069ae:	f1ba 0f00 	cmp.w	sl, #0
  4069b2:	d05e      	beq.n	406a72 <_svfiprintf_r+0x4b4>
  4069b4:	2b01      	cmp	r3, #1
  4069b6:	d01f      	beq.n	4069f8 <_svfiprintf_r+0x43a>
  4069b8:	2b02      	cmp	r3, #2
  4069ba:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
  4069be:	d045      	beq.n	406a4c <_svfiprintf_r+0x48e>
  4069c0:	08e0      	lsrs	r0, r4, #3
  4069c2:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
  4069c6:	08e8      	lsrs	r0, r5, #3
  4069c8:	f004 0207 	and.w	r2, r4, #7
  4069cc:	9106      	str	r1, [sp, #24]
  4069ce:	9007      	str	r0, [sp, #28]
  4069d0:	3230      	adds	r2, #48	; 0x30
  4069d2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  4069d6:	ea54 0105 	orrs.w	r1, r4, r5
  4069da:	4699      	mov	r9, r3
  4069dc:	701a      	strb	r2, [r3, #0]
  4069de:	f103 33ff 	add.w	r3, r3, #4294967295
  4069e2:	d1ed      	bne.n	4069c0 <_svfiprintf_r+0x402>
  4069e4:	07f8      	lsls	r0, r7, #31
  4069e6:	4649      	mov	r1, r9
  4069e8:	d54e      	bpl.n	406a88 <_svfiprintf_r+0x4ca>
  4069ea:	2a30      	cmp	r2, #48	; 0x30
  4069ec:	d04c      	beq.n	406a88 <_svfiprintf_r+0x4ca>
  4069ee:	4699      	mov	r9, r3
  4069f0:	2330      	movs	r3, #48	; 0x30
  4069f2:	f801 3c01 	strb.w	r3, [r1, #-1]
  4069f6:	e047      	b.n	406a88 <_svfiprintf_r+0x4ca>
  4069f8:	2d00      	cmp	r5, #0
  4069fa:	bf08      	it	eq
  4069fc:	2c0a      	cmpeq	r4, #10
  4069fe:	d205      	bcs.n	406a0c <_svfiprintf_r+0x44e>
  406a00:	3430      	adds	r4, #48	; 0x30
  406a02:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  406a06:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
  406a0a:	e03d      	b.n	406a88 <_svfiprintf_r+0x4ca>
  406a0c:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
  406a10:	9203      	str	r2, [sp, #12]
  406a12:	4620      	mov	r0, r4
  406a14:	4629      	mov	r1, r5
  406a16:	220a      	movs	r2, #10
  406a18:	2300      	movs	r3, #0
  406a1a:	f8cd c004 	str.w	ip, [sp, #4]
  406a1e:	f000 feb5 	bl	40778c <__aeabi_uldivmod>
  406a22:	9b03      	ldr	r3, [sp, #12]
  406a24:	3230      	adds	r2, #48	; 0x30
  406a26:	f803 2901 	strb.w	r2, [r3], #-1
  406a2a:	4620      	mov	r0, r4
  406a2c:	4629      	mov	r1, r5
  406a2e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  406a32:	220a      	movs	r2, #10
  406a34:	9303      	str	r3, [sp, #12]
  406a36:	2300      	movs	r3, #0
  406a38:	f000 fea8 	bl	40778c <__aeabi_uldivmod>
  406a3c:	4604      	mov	r4, r0
  406a3e:	460d      	mov	r5, r1
  406a40:	ea54 0005 	orrs.w	r0, r4, r5
  406a44:	f8dd c004 	ldr.w	ip, [sp, #4]
  406a48:	d1e3      	bne.n	406a12 <_svfiprintf_r+0x454>
  406a4a:	e01d      	b.n	406a88 <_svfiprintf_r+0x4ca>
  406a4c:	990a      	ldr	r1, [sp, #40]	; 0x28
  406a4e:	f004 020f 	and.w	r2, r4, #15
  406a52:	5c8a      	ldrb	r2, [r1, r2]
  406a54:	4699      	mov	r9, r3
  406a56:	f803 2901 	strb.w	r2, [r3], #-1
  406a5a:	0922      	lsrs	r2, r4, #4
  406a5c:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  406a60:	0929      	lsrs	r1, r5, #4
  406a62:	9008      	str	r0, [sp, #32]
  406a64:	9109      	str	r1, [sp, #36]	; 0x24
  406a66:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
  406a6a:	ea54 0205 	orrs.w	r2, r4, r5
  406a6e:	d1ed      	bne.n	406a4c <_svfiprintf_r+0x48e>
  406a70:	e00a      	b.n	406a88 <_svfiprintf_r+0x4ca>
  406a72:	b93b      	cbnz	r3, 406a84 <_svfiprintf_r+0x4c6>
  406a74:	07f9      	lsls	r1, r7, #31
  406a76:	d505      	bpl.n	406a84 <_svfiprintf_r+0x4c6>
  406a78:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
  406a7c:	2330      	movs	r3, #48	; 0x30
  406a7e:	f809 3d41 	strb.w	r3, [r9, #-65]!
  406a82:	e001      	b.n	406a88 <_svfiprintf_r+0x4ca>
  406a84:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  406a88:	4655      	mov	r5, sl
  406a8a:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
  406a8e:	ebc9 0a0a 	rsb	sl, r9, sl
  406a92:	e00f      	b.n	406ab4 <_svfiprintf_r+0x4f6>
  406a94:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406a98:	2b00      	cmp	r3, #0
  406a9a:	f000 8171 	beq.w	406d80 <_svfiprintf_r+0x7c2>
  406a9e:	2500      	movs	r5, #0
  406aa0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  406aa4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406aa8:	f04f 0a01 	mov.w	sl, #1
  406aac:	f10d 0948 	add.w	r9, sp, #72	; 0x48
  406ab0:	e000      	b.n	406ab4 <_svfiprintf_r+0x4f6>
  406ab2:	4605      	mov	r5, r0
  406ab4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  406ab8:	45aa      	cmp	sl, r5
  406aba:	bfac      	ite	ge
  406abc:	4654      	movge	r4, sl
  406abe:	462c      	movlt	r4, r5
  406ac0:	b103      	cbz	r3, 406ac4 <_svfiprintf_r+0x506>
  406ac2:	3401      	adds	r4, #1
  406ac4:	f017 0302 	ands.w	r3, r7, #2
  406ac8:	9303      	str	r3, [sp, #12]
  406aca:	bf18      	it	ne
  406acc:	3402      	addne	r4, #2
  406ace:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  406ad2:	930b      	str	r3, [sp, #44]	; 0x2c
  406ad4:	d13b      	bne.n	406b4e <_svfiprintf_r+0x590>
  406ad6:	9804      	ldr	r0, [sp, #16]
  406ad8:	1b03      	subs	r3, r0, r4
  406ada:	2b00      	cmp	r3, #0
  406adc:	dd37      	ble.n	406b4e <_svfiprintf_r+0x590>
  406ade:	4aa6      	ldr	r2, [pc, #664]	; (406d78 <_svfiprintf_r+0x7ba>)
  406ae0:	2b10      	cmp	r3, #16
  406ae2:	f8cc 2000 	str.w	r2, [ip]
  406ae6:	dd1b      	ble.n	406b20 <_svfiprintf_r+0x562>
  406ae8:	2210      	movs	r2, #16
  406aea:	f8cc 2004 	str.w	r2, [ip, #4]
  406aee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406af0:	3210      	adds	r2, #16
  406af2:	9211      	str	r2, [sp, #68]	; 0x44
  406af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406af6:	3201      	adds	r2, #1
  406af8:	2a07      	cmp	r2, #7
  406afa:	9210      	str	r2, [sp, #64]	; 0x40
  406afc:	dc02      	bgt.n	406b04 <_svfiprintf_r+0x546>
  406afe:	f10c 0c08 	add.w	ip, ip, #8
  406b02:	e00b      	b.n	406b1c <_svfiprintf_r+0x55e>
  406b04:	4658      	mov	r0, fp
  406b06:	4641      	mov	r1, r8
  406b08:	aa0f      	add	r2, sp, #60	; 0x3c
  406b0a:	9301      	str	r3, [sp, #4]
  406b0c:	f7ff fcde 	bl	4064cc <__ssprint_r>
  406b10:	9b01      	ldr	r3, [sp, #4]
  406b12:	2800      	cmp	r0, #0
  406b14:	f040 813b 	bne.w	406d8e <_svfiprintf_r+0x7d0>
  406b18:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406b1c:	3b10      	subs	r3, #16
  406b1e:	e7de      	b.n	406ade <_svfiprintf_r+0x520>
  406b20:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406b22:	f8cc 3004 	str.w	r3, [ip, #4]
  406b26:	4413      	add	r3, r2
  406b28:	9311      	str	r3, [sp, #68]	; 0x44
  406b2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406b2c:	3301      	adds	r3, #1
  406b2e:	2b07      	cmp	r3, #7
  406b30:	9310      	str	r3, [sp, #64]	; 0x40
  406b32:	dc02      	bgt.n	406b3a <_svfiprintf_r+0x57c>
  406b34:	f10c 0c08 	add.w	ip, ip, #8
  406b38:	e009      	b.n	406b4e <_svfiprintf_r+0x590>
  406b3a:	4658      	mov	r0, fp
  406b3c:	4641      	mov	r1, r8
  406b3e:	aa0f      	add	r2, sp, #60	; 0x3c
  406b40:	f7ff fcc4 	bl	4064cc <__ssprint_r>
  406b44:	2800      	cmp	r0, #0
  406b46:	f040 8122 	bne.w	406d8e <_svfiprintf_r+0x7d0>
  406b4a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406b4e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  406b52:	b1db      	cbz	r3, 406b8c <_svfiprintf_r+0x5ce>
  406b54:	f10d 0337 	add.w	r3, sp, #55	; 0x37
  406b58:	f8cc 3000 	str.w	r3, [ip]
  406b5c:	2301      	movs	r3, #1
  406b5e:	f8cc 3004 	str.w	r3, [ip, #4]
  406b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406b64:	3301      	adds	r3, #1
  406b66:	9311      	str	r3, [sp, #68]	; 0x44
  406b68:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406b6a:	3301      	adds	r3, #1
  406b6c:	2b07      	cmp	r3, #7
  406b6e:	9310      	str	r3, [sp, #64]	; 0x40
  406b70:	dc02      	bgt.n	406b78 <_svfiprintf_r+0x5ba>
  406b72:	f10c 0c08 	add.w	ip, ip, #8
  406b76:	e009      	b.n	406b8c <_svfiprintf_r+0x5ce>
  406b78:	4658      	mov	r0, fp
  406b7a:	4641      	mov	r1, r8
  406b7c:	aa0f      	add	r2, sp, #60	; 0x3c
  406b7e:	f7ff fca5 	bl	4064cc <__ssprint_r>
  406b82:	2800      	cmp	r0, #0
  406b84:	f040 8103 	bne.w	406d8e <_svfiprintf_r+0x7d0>
  406b88:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406b8c:	9b03      	ldr	r3, [sp, #12]
  406b8e:	b1d3      	cbz	r3, 406bc6 <_svfiprintf_r+0x608>
  406b90:	ab0e      	add	r3, sp, #56	; 0x38
  406b92:	f8cc 3000 	str.w	r3, [ip]
  406b96:	2302      	movs	r3, #2
  406b98:	f8cc 3004 	str.w	r3, [ip, #4]
  406b9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406b9e:	3302      	adds	r3, #2
  406ba0:	9311      	str	r3, [sp, #68]	; 0x44
  406ba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406ba4:	3301      	adds	r3, #1
  406ba6:	2b07      	cmp	r3, #7
  406ba8:	9310      	str	r3, [sp, #64]	; 0x40
  406baa:	dc02      	bgt.n	406bb2 <_svfiprintf_r+0x5f4>
  406bac:	f10c 0c08 	add.w	ip, ip, #8
  406bb0:	e009      	b.n	406bc6 <_svfiprintf_r+0x608>
  406bb2:	4658      	mov	r0, fp
  406bb4:	4641      	mov	r1, r8
  406bb6:	aa0f      	add	r2, sp, #60	; 0x3c
  406bb8:	f7ff fc88 	bl	4064cc <__ssprint_r>
  406bbc:	2800      	cmp	r0, #0
  406bbe:	f040 80e6 	bne.w	406d8e <_svfiprintf_r+0x7d0>
  406bc2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406bc8:	2b80      	cmp	r3, #128	; 0x80
  406bca:	d13f      	bne.n	406c4c <_svfiprintf_r+0x68e>
  406bcc:	9b04      	ldr	r3, [sp, #16]
  406bce:	1b1b      	subs	r3, r3, r4
  406bd0:	2b00      	cmp	r3, #0
  406bd2:	9303      	str	r3, [sp, #12]
  406bd4:	dd3a      	ble.n	406c4c <_svfiprintf_r+0x68e>
  406bd6:	9b03      	ldr	r3, [sp, #12]
  406bd8:	2b10      	cmp	r3, #16
  406bda:	4b68      	ldr	r3, [pc, #416]	; (406d7c <_svfiprintf_r+0x7be>)
  406bdc:	f8cc 3000 	str.w	r3, [ip]
  406be0:	dd1b      	ble.n	406c1a <_svfiprintf_r+0x65c>
  406be2:	2310      	movs	r3, #16
  406be4:	f8cc 3004 	str.w	r3, [ip, #4]
  406be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406bea:	3310      	adds	r3, #16
  406bec:	9311      	str	r3, [sp, #68]	; 0x44
  406bee:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406bf0:	3301      	adds	r3, #1
  406bf2:	2b07      	cmp	r3, #7
  406bf4:	9310      	str	r3, [sp, #64]	; 0x40
  406bf6:	dc02      	bgt.n	406bfe <_svfiprintf_r+0x640>
  406bf8:	f10c 0c08 	add.w	ip, ip, #8
  406bfc:	e009      	b.n	406c12 <_svfiprintf_r+0x654>
  406bfe:	4658      	mov	r0, fp
  406c00:	4641      	mov	r1, r8
  406c02:	aa0f      	add	r2, sp, #60	; 0x3c
  406c04:	f7ff fc62 	bl	4064cc <__ssprint_r>
  406c08:	2800      	cmp	r0, #0
  406c0a:	f040 80c0 	bne.w	406d8e <_svfiprintf_r+0x7d0>
  406c0e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406c12:	9b03      	ldr	r3, [sp, #12]
  406c14:	3b10      	subs	r3, #16
  406c16:	9303      	str	r3, [sp, #12]
  406c18:	e7dd      	b.n	406bd6 <_svfiprintf_r+0x618>
  406c1a:	9b03      	ldr	r3, [sp, #12]
  406c1c:	9803      	ldr	r0, [sp, #12]
  406c1e:	f8cc 3004 	str.w	r3, [ip, #4]
  406c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406c24:	4403      	add	r3, r0
  406c26:	9311      	str	r3, [sp, #68]	; 0x44
  406c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406c2a:	3301      	adds	r3, #1
  406c2c:	2b07      	cmp	r3, #7
  406c2e:	9310      	str	r3, [sp, #64]	; 0x40
  406c30:	dc02      	bgt.n	406c38 <_svfiprintf_r+0x67a>
  406c32:	f10c 0c08 	add.w	ip, ip, #8
  406c36:	e009      	b.n	406c4c <_svfiprintf_r+0x68e>
  406c38:	4658      	mov	r0, fp
  406c3a:	4641      	mov	r1, r8
  406c3c:	aa0f      	add	r2, sp, #60	; 0x3c
  406c3e:	f7ff fc45 	bl	4064cc <__ssprint_r>
  406c42:	2800      	cmp	r0, #0
  406c44:	f040 80a3 	bne.w	406d8e <_svfiprintf_r+0x7d0>
  406c48:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406c4c:	ebca 0505 	rsb	r5, sl, r5
  406c50:	2d00      	cmp	r5, #0
  406c52:	dd34      	ble.n	406cbe <_svfiprintf_r+0x700>
  406c54:	4b49      	ldr	r3, [pc, #292]	; (406d7c <_svfiprintf_r+0x7be>)
  406c56:	2d10      	cmp	r5, #16
  406c58:	f8cc 3000 	str.w	r3, [ip]
  406c5c:	dd19      	ble.n	406c92 <_svfiprintf_r+0x6d4>
  406c5e:	2310      	movs	r3, #16
  406c60:	f8cc 3004 	str.w	r3, [ip, #4]
  406c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406c66:	3310      	adds	r3, #16
  406c68:	9311      	str	r3, [sp, #68]	; 0x44
  406c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406c6c:	3301      	adds	r3, #1
  406c6e:	2b07      	cmp	r3, #7
  406c70:	9310      	str	r3, [sp, #64]	; 0x40
  406c72:	dc02      	bgt.n	406c7a <_svfiprintf_r+0x6bc>
  406c74:	f10c 0c08 	add.w	ip, ip, #8
  406c78:	e009      	b.n	406c8e <_svfiprintf_r+0x6d0>
  406c7a:	4658      	mov	r0, fp
  406c7c:	4641      	mov	r1, r8
  406c7e:	aa0f      	add	r2, sp, #60	; 0x3c
  406c80:	f7ff fc24 	bl	4064cc <__ssprint_r>
  406c84:	2800      	cmp	r0, #0
  406c86:	f040 8082 	bne.w	406d8e <_svfiprintf_r+0x7d0>
  406c8a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406c8e:	3d10      	subs	r5, #16
  406c90:	e7e0      	b.n	406c54 <_svfiprintf_r+0x696>
  406c92:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406c94:	f8cc 5004 	str.w	r5, [ip, #4]
  406c98:	441d      	add	r5, r3
  406c9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406c9c:	9511      	str	r5, [sp, #68]	; 0x44
  406c9e:	3301      	adds	r3, #1
  406ca0:	2b07      	cmp	r3, #7
  406ca2:	9310      	str	r3, [sp, #64]	; 0x40
  406ca4:	dc02      	bgt.n	406cac <_svfiprintf_r+0x6ee>
  406ca6:	f10c 0c08 	add.w	ip, ip, #8
  406caa:	e008      	b.n	406cbe <_svfiprintf_r+0x700>
  406cac:	4658      	mov	r0, fp
  406cae:	4641      	mov	r1, r8
  406cb0:	aa0f      	add	r2, sp, #60	; 0x3c
  406cb2:	f7ff fc0b 	bl	4064cc <__ssprint_r>
  406cb6:	2800      	cmp	r0, #0
  406cb8:	d169      	bne.n	406d8e <_svfiprintf_r+0x7d0>
  406cba:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406cc0:	e88c 0600 	stmia.w	ip, {r9, sl}
  406cc4:	4453      	add	r3, sl
  406cc6:	9311      	str	r3, [sp, #68]	; 0x44
  406cc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406cca:	3301      	adds	r3, #1
  406ccc:	2b07      	cmp	r3, #7
  406cce:	9310      	str	r3, [sp, #64]	; 0x40
  406cd0:	dc02      	bgt.n	406cd8 <_svfiprintf_r+0x71a>
  406cd2:	f10c 0308 	add.w	r3, ip, #8
  406cd6:	e007      	b.n	406ce8 <_svfiprintf_r+0x72a>
  406cd8:	4658      	mov	r0, fp
  406cda:	4641      	mov	r1, r8
  406cdc:	aa0f      	add	r2, sp, #60	; 0x3c
  406cde:	f7ff fbf5 	bl	4064cc <__ssprint_r>
  406ce2:	2800      	cmp	r0, #0
  406ce4:	d153      	bne.n	406d8e <_svfiprintf_r+0x7d0>
  406ce6:	ab1c      	add	r3, sp, #112	; 0x70
  406ce8:	077a      	lsls	r2, r7, #29
  406cea:	d40a      	bmi.n	406d02 <_svfiprintf_r+0x744>
  406cec:	9d05      	ldr	r5, [sp, #20]
  406cee:	9804      	ldr	r0, [sp, #16]
  406cf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406cf2:	4284      	cmp	r4, r0
  406cf4:	bfac      	ite	ge
  406cf6:	192d      	addge	r5, r5, r4
  406cf8:	182d      	addlt	r5, r5, r0
  406cfa:	9505      	str	r5, [sp, #20]
  406cfc:	2b00      	cmp	r3, #0
  406cfe:	d035      	beq.n	406d6c <_svfiprintf_r+0x7ae>
  406d00:	e02e      	b.n	406d60 <_svfiprintf_r+0x7a2>
  406d02:	9904      	ldr	r1, [sp, #16]
  406d04:	1b0d      	subs	r5, r1, r4
  406d06:	2d00      	cmp	r5, #0
  406d08:	ddf0      	ble.n	406cec <_svfiprintf_r+0x72e>
  406d0a:	4a1b      	ldr	r2, [pc, #108]	; (406d78 <_svfiprintf_r+0x7ba>)
  406d0c:	2d10      	cmp	r5, #16
  406d0e:	601a      	str	r2, [r3, #0]
  406d10:	dd15      	ble.n	406d3e <_svfiprintf_r+0x780>
  406d12:	2210      	movs	r2, #16
  406d14:	605a      	str	r2, [r3, #4]
  406d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406d18:	3210      	adds	r2, #16
  406d1a:	9211      	str	r2, [sp, #68]	; 0x44
  406d1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406d1e:	3201      	adds	r2, #1
  406d20:	2a07      	cmp	r2, #7
  406d22:	9210      	str	r2, [sp, #64]	; 0x40
  406d24:	dc01      	bgt.n	406d2a <_svfiprintf_r+0x76c>
  406d26:	3308      	adds	r3, #8
  406d28:	e007      	b.n	406d3a <_svfiprintf_r+0x77c>
  406d2a:	4658      	mov	r0, fp
  406d2c:	4641      	mov	r1, r8
  406d2e:	aa0f      	add	r2, sp, #60	; 0x3c
  406d30:	f7ff fbcc 	bl	4064cc <__ssprint_r>
  406d34:	2800      	cmp	r0, #0
  406d36:	d12a      	bne.n	406d8e <_svfiprintf_r+0x7d0>
  406d38:	ab1c      	add	r3, sp, #112	; 0x70
  406d3a:	3d10      	subs	r5, #16
  406d3c:	e7e5      	b.n	406d0a <_svfiprintf_r+0x74c>
  406d3e:	605d      	str	r5, [r3, #4]
  406d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406d42:	441d      	add	r5, r3
  406d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406d46:	9511      	str	r5, [sp, #68]	; 0x44
  406d48:	3301      	adds	r3, #1
  406d4a:	2b07      	cmp	r3, #7
  406d4c:	9310      	str	r3, [sp, #64]	; 0x40
  406d4e:	ddcd      	ble.n	406cec <_svfiprintf_r+0x72e>
  406d50:	4658      	mov	r0, fp
  406d52:	4641      	mov	r1, r8
  406d54:	aa0f      	add	r2, sp, #60	; 0x3c
  406d56:	f7ff fbb9 	bl	4064cc <__ssprint_r>
  406d5a:	2800      	cmp	r0, #0
  406d5c:	d0c6      	beq.n	406cec <_svfiprintf_r+0x72e>
  406d5e:	e016      	b.n	406d8e <_svfiprintf_r+0x7d0>
  406d60:	4658      	mov	r0, fp
  406d62:	4641      	mov	r1, r8
  406d64:	aa0f      	add	r2, sp, #60	; 0x3c
  406d66:	f7ff fbb1 	bl	4064cc <__ssprint_r>
  406d6a:	b980      	cbnz	r0, 406d8e <_svfiprintf_r+0x7d0>
  406d6c:	2300      	movs	r3, #0
  406d6e:	9310      	str	r3, [sp, #64]	; 0x40
  406d70:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406d74:	e449      	b.n	40660a <_svfiprintf_r+0x4c>
  406d76:	bf00      	nop
  406d78:	00408108 	.word	0x00408108
  406d7c:	00408118 	.word	0x00408118
  406d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406d82:	b123      	cbz	r3, 406d8e <_svfiprintf_r+0x7d0>
  406d84:	4658      	mov	r0, fp
  406d86:	4641      	mov	r1, r8
  406d88:	aa0f      	add	r2, sp, #60	; 0x3c
  406d8a:	f7ff fb9f 	bl	4064cc <__ssprint_r>
  406d8e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  406d92:	9805      	ldr	r0, [sp, #20]
  406d94:	f013 0f40 	tst.w	r3, #64	; 0x40
  406d98:	bf18      	it	ne
  406d9a:	f04f 30ff 	movne.w	r0, #4294967295
  406d9e:	b02d      	add	sp, #180	; 0xb4
  406da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406da4 <__register_exitproc>:
  406da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406da8:	4698      	mov	r8, r3
  406daa:	4b22      	ldr	r3, [pc, #136]	; (406e34 <__register_exitproc+0x90>)
  406dac:	4606      	mov	r6, r0
  406dae:	681c      	ldr	r4, [r3, #0]
  406db0:	460f      	mov	r7, r1
  406db2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  406db6:	4691      	mov	r9, r2
  406db8:	b918      	cbnz	r0, 406dc2 <__register_exitproc+0x1e>
  406dba:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  406dbe:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406dc2:	6843      	ldr	r3, [r0, #4]
  406dc4:	2b1f      	cmp	r3, #31
  406dc6:	dd16      	ble.n	406df6 <__register_exitproc+0x52>
  406dc8:	4b1b      	ldr	r3, [pc, #108]	; (406e38 <__register_exitproc+0x94>)
  406dca:	b91b      	cbnz	r3, 406dd4 <__register_exitproc+0x30>
  406dcc:	f04f 30ff 	mov.w	r0, #4294967295
  406dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406dd4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406dd8:	f3af 8000 	nop.w
  406ddc:	2800      	cmp	r0, #0
  406dde:	d0f5      	beq.n	406dcc <__register_exitproc+0x28>
  406de0:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  406de4:	2500      	movs	r5, #0
  406de6:	6045      	str	r5, [r0, #4]
  406de8:	6001      	str	r1, [r0, #0]
  406dea:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406dee:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  406df2:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  406df6:	6844      	ldr	r4, [r0, #4]
  406df8:	b1a6      	cbz	r6, 406e24 <__register_exitproc+0x80>
  406dfa:	2201      	movs	r2, #1
  406dfc:	40a2      	lsls	r2, r4
  406dfe:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  406e02:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  406e06:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  406e0a:	2e02      	cmp	r6, #2
  406e0c:	ea41 0102 	orr.w	r1, r1, r2
  406e10:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406e14:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
  406e18:	d104      	bne.n	406e24 <__register_exitproc+0x80>
  406e1a:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  406e1e:	431a      	orrs	r2, r3
  406e20:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  406e24:	1c63      	adds	r3, r4, #1
  406e26:	3402      	adds	r4, #2
  406e28:	6043      	str	r3, [r0, #4]
  406e2a:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
  406e2e:	2000      	movs	r0, #0
  406e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406e34:	00407e6c 	.word	0x00407e6c
  406e38:	00000000 	.word	0x00000000

00406e3c <_calloc_r>:
  406e3c:	b510      	push	{r4, lr}
  406e3e:	4351      	muls	r1, r2
  406e40:	f7fe fb40 	bl	4054c4 <_malloc_r>
  406e44:	4604      	mov	r4, r0
  406e46:	b320      	cbz	r0, 406e92 <_calloc_r+0x56>
  406e48:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406e4c:	f022 0203 	bic.w	r2, r2, #3
  406e50:	3a04      	subs	r2, #4
  406e52:	2a24      	cmp	r2, #36	; 0x24
  406e54:	d81a      	bhi.n	406e8c <_calloc_r+0x50>
  406e56:	2a13      	cmp	r2, #19
  406e58:	d912      	bls.n	406e80 <_calloc_r+0x44>
  406e5a:	2100      	movs	r1, #0
  406e5c:	2a1b      	cmp	r2, #27
  406e5e:	6001      	str	r1, [r0, #0]
  406e60:	6041      	str	r1, [r0, #4]
  406e62:	d802      	bhi.n	406e6a <_calloc_r+0x2e>
  406e64:	f100 0308 	add.w	r3, r0, #8
  406e68:	e00b      	b.n	406e82 <_calloc_r+0x46>
  406e6a:	2a24      	cmp	r2, #36	; 0x24
  406e6c:	6081      	str	r1, [r0, #8]
  406e6e:	60c1      	str	r1, [r0, #12]
  406e70:	bf11      	iteee	ne
  406e72:	f100 0310 	addne.w	r3, r0, #16
  406e76:	6101      	streq	r1, [r0, #16]
  406e78:	f100 0318 	addeq.w	r3, r0, #24
  406e7c:	6141      	streq	r1, [r0, #20]
  406e7e:	e000      	b.n	406e82 <_calloc_r+0x46>
  406e80:	4603      	mov	r3, r0
  406e82:	2200      	movs	r2, #0
  406e84:	601a      	str	r2, [r3, #0]
  406e86:	605a      	str	r2, [r3, #4]
  406e88:	609a      	str	r2, [r3, #8]
  406e8a:	e002      	b.n	406e92 <_calloc_r+0x56>
  406e8c:	2100      	movs	r1, #0
  406e8e:	f7fc fad4 	bl	40343a <memset>
  406e92:	4620      	mov	r0, r4
  406e94:	bd10      	pop	{r4, pc}
	...

00406e98 <__aeabi_drsub>:
  406e98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406e9c:	e002      	b.n	406ea4 <__adddf3>
  406e9e:	bf00      	nop

00406ea0 <__aeabi_dsub>:
  406ea0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406ea4 <__adddf3>:
  406ea4:	b530      	push	{r4, r5, lr}
  406ea6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406eaa:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406eae:	ea94 0f05 	teq	r4, r5
  406eb2:	bf08      	it	eq
  406eb4:	ea90 0f02 	teqeq	r0, r2
  406eb8:	bf1f      	itttt	ne
  406eba:	ea54 0c00 	orrsne.w	ip, r4, r0
  406ebe:	ea55 0c02 	orrsne.w	ip, r5, r2
  406ec2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406ec6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406eca:	f000 80e2 	beq.w	407092 <__adddf3+0x1ee>
  406ece:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406ed2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406ed6:	bfb8      	it	lt
  406ed8:	426d      	neglt	r5, r5
  406eda:	dd0c      	ble.n	406ef6 <__adddf3+0x52>
  406edc:	442c      	add	r4, r5
  406ede:	ea80 0202 	eor.w	r2, r0, r2
  406ee2:	ea81 0303 	eor.w	r3, r1, r3
  406ee6:	ea82 0000 	eor.w	r0, r2, r0
  406eea:	ea83 0101 	eor.w	r1, r3, r1
  406eee:	ea80 0202 	eor.w	r2, r0, r2
  406ef2:	ea81 0303 	eor.w	r3, r1, r3
  406ef6:	2d36      	cmp	r5, #54	; 0x36
  406ef8:	bf88      	it	hi
  406efa:	bd30      	pophi	{r4, r5, pc}
  406efc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406f00:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406f04:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406f08:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406f0c:	d002      	beq.n	406f14 <__adddf3+0x70>
  406f0e:	4240      	negs	r0, r0
  406f10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406f14:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406f18:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406f1c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406f20:	d002      	beq.n	406f28 <__adddf3+0x84>
  406f22:	4252      	negs	r2, r2
  406f24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406f28:	ea94 0f05 	teq	r4, r5
  406f2c:	f000 80a7 	beq.w	40707e <__adddf3+0x1da>
  406f30:	f1a4 0401 	sub.w	r4, r4, #1
  406f34:	f1d5 0e20 	rsbs	lr, r5, #32
  406f38:	db0d      	blt.n	406f56 <__adddf3+0xb2>
  406f3a:	fa02 fc0e 	lsl.w	ip, r2, lr
  406f3e:	fa22 f205 	lsr.w	r2, r2, r5
  406f42:	1880      	adds	r0, r0, r2
  406f44:	f141 0100 	adc.w	r1, r1, #0
  406f48:	fa03 f20e 	lsl.w	r2, r3, lr
  406f4c:	1880      	adds	r0, r0, r2
  406f4e:	fa43 f305 	asr.w	r3, r3, r5
  406f52:	4159      	adcs	r1, r3
  406f54:	e00e      	b.n	406f74 <__adddf3+0xd0>
  406f56:	f1a5 0520 	sub.w	r5, r5, #32
  406f5a:	f10e 0e20 	add.w	lr, lr, #32
  406f5e:	2a01      	cmp	r2, #1
  406f60:	fa03 fc0e 	lsl.w	ip, r3, lr
  406f64:	bf28      	it	cs
  406f66:	f04c 0c02 	orrcs.w	ip, ip, #2
  406f6a:	fa43 f305 	asr.w	r3, r3, r5
  406f6e:	18c0      	adds	r0, r0, r3
  406f70:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406f74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406f78:	d507      	bpl.n	406f8a <__adddf3+0xe6>
  406f7a:	f04f 0e00 	mov.w	lr, #0
  406f7e:	f1dc 0c00 	rsbs	ip, ip, #0
  406f82:	eb7e 0000 	sbcs.w	r0, lr, r0
  406f86:	eb6e 0101 	sbc.w	r1, lr, r1
  406f8a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406f8e:	d31b      	bcc.n	406fc8 <__adddf3+0x124>
  406f90:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406f94:	d30c      	bcc.n	406fb0 <__adddf3+0x10c>
  406f96:	0849      	lsrs	r1, r1, #1
  406f98:	ea5f 0030 	movs.w	r0, r0, rrx
  406f9c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406fa0:	f104 0401 	add.w	r4, r4, #1
  406fa4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406fa8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406fac:	f080 809a 	bcs.w	4070e4 <__adddf3+0x240>
  406fb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406fb4:	bf08      	it	eq
  406fb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406fba:	f150 0000 	adcs.w	r0, r0, #0
  406fbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406fc2:	ea41 0105 	orr.w	r1, r1, r5
  406fc6:	bd30      	pop	{r4, r5, pc}
  406fc8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406fcc:	4140      	adcs	r0, r0
  406fce:	eb41 0101 	adc.w	r1, r1, r1
  406fd2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406fd6:	f1a4 0401 	sub.w	r4, r4, #1
  406fda:	d1e9      	bne.n	406fb0 <__adddf3+0x10c>
  406fdc:	f091 0f00 	teq	r1, #0
  406fe0:	bf04      	itt	eq
  406fe2:	4601      	moveq	r1, r0
  406fe4:	2000      	moveq	r0, #0
  406fe6:	fab1 f381 	clz	r3, r1
  406fea:	bf08      	it	eq
  406fec:	3320      	addeq	r3, #32
  406fee:	f1a3 030b 	sub.w	r3, r3, #11
  406ff2:	f1b3 0220 	subs.w	r2, r3, #32
  406ff6:	da0c      	bge.n	407012 <__adddf3+0x16e>
  406ff8:	320c      	adds	r2, #12
  406ffa:	dd08      	ble.n	40700e <__adddf3+0x16a>
  406ffc:	f102 0c14 	add.w	ip, r2, #20
  407000:	f1c2 020c 	rsb	r2, r2, #12
  407004:	fa01 f00c 	lsl.w	r0, r1, ip
  407008:	fa21 f102 	lsr.w	r1, r1, r2
  40700c:	e00c      	b.n	407028 <__adddf3+0x184>
  40700e:	f102 0214 	add.w	r2, r2, #20
  407012:	bfd8      	it	le
  407014:	f1c2 0c20 	rsble	ip, r2, #32
  407018:	fa01 f102 	lsl.w	r1, r1, r2
  40701c:	fa20 fc0c 	lsr.w	ip, r0, ip
  407020:	bfdc      	itt	le
  407022:	ea41 010c 	orrle.w	r1, r1, ip
  407026:	4090      	lslle	r0, r2
  407028:	1ae4      	subs	r4, r4, r3
  40702a:	bfa2      	ittt	ge
  40702c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  407030:	4329      	orrge	r1, r5
  407032:	bd30      	popge	{r4, r5, pc}
  407034:	ea6f 0404 	mvn.w	r4, r4
  407038:	3c1f      	subs	r4, #31
  40703a:	da1c      	bge.n	407076 <__adddf3+0x1d2>
  40703c:	340c      	adds	r4, #12
  40703e:	dc0e      	bgt.n	40705e <__adddf3+0x1ba>
  407040:	f104 0414 	add.w	r4, r4, #20
  407044:	f1c4 0220 	rsb	r2, r4, #32
  407048:	fa20 f004 	lsr.w	r0, r0, r4
  40704c:	fa01 f302 	lsl.w	r3, r1, r2
  407050:	ea40 0003 	orr.w	r0, r0, r3
  407054:	fa21 f304 	lsr.w	r3, r1, r4
  407058:	ea45 0103 	orr.w	r1, r5, r3
  40705c:	bd30      	pop	{r4, r5, pc}
  40705e:	f1c4 040c 	rsb	r4, r4, #12
  407062:	f1c4 0220 	rsb	r2, r4, #32
  407066:	fa20 f002 	lsr.w	r0, r0, r2
  40706a:	fa01 f304 	lsl.w	r3, r1, r4
  40706e:	ea40 0003 	orr.w	r0, r0, r3
  407072:	4629      	mov	r1, r5
  407074:	bd30      	pop	{r4, r5, pc}
  407076:	fa21 f004 	lsr.w	r0, r1, r4
  40707a:	4629      	mov	r1, r5
  40707c:	bd30      	pop	{r4, r5, pc}
  40707e:	f094 0f00 	teq	r4, #0
  407082:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  407086:	bf06      	itte	eq
  407088:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40708c:	3401      	addeq	r4, #1
  40708e:	3d01      	subne	r5, #1
  407090:	e74e      	b.n	406f30 <__adddf3+0x8c>
  407092:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407096:	bf18      	it	ne
  407098:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40709c:	d029      	beq.n	4070f2 <__adddf3+0x24e>
  40709e:	ea94 0f05 	teq	r4, r5
  4070a2:	bf08      	it	eq
  4070a4:	ea90 0f02 	teqeq	r0, r2
  4070a8:	d005      	beq.n	4070b6 <__adddf3+0x212>
  4070aa:	ea54 0c00 	orrs.w	ip, r4, r0
  4070ae:	bf04      	itt	eq
  4070b0:	4619      	moveq	r1, r3
  4070b2:	4610      	moveq	r0, r2
  4070b4:	bd30      	pop	{r4, r5, pc}
  4070b6:	ea91 0f03 	teq	r1, r3
  4070ba:	bf1e      	ittt	ne
  4070bc:	2100      	movne	r1, #0
  4070be:	2000      	movne	r0, #0
  4070c0:	bd30      	popne	{r4, r5, pc}
  4070c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4070c6:	d105      	bne.n	4070d4 <__adddf3+0x230>
  4070c8:	0040      	lsls	r0, r0, #1
  4070ca:	4149      	adcs	r1, r1
  4070cc:	bf28      	it	cs
  4070ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4070d2:	bd30      	pop	{r4, r5, pc}
  4070d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4070d8:	bf3c      	itt	cc
  4070da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4070de:	bd30      	popcc	{r4, r5, pc}
  4070e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4070e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4070e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4070ec:	f04f 0000 	mov.w	r0, #0
  4070f0:	bd30      	pop	{r4, r5, pc}
  4070f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4070f6:	bf1a      	itte	ne
  4070f8:	4619      	movne	r1, r3
  4070fa:	4610      	movne	r0, r2
  4070fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407100:	bf1c      	itt	ne
  407102:	460b      	movne	r3, r1
  407104:	4602      	movne	r2, r0
  407106:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40710a:	bf06      	itte	eq
  40710c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407110:	ea91 0f03 	teqeq	r1, r3
  407114:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407118:	bd30      	pop	{r4, r5, pc}
  40711a:	bf00      	nop

0040711c <__aeabi_ui2d>:
  40711c:	f090 0f00 	teq	r0, #0
  407120:	bf04      	itt	eq
  407122:	2100      	moveq	r1, #0
  407124:	4770      	bxeq	lr
  407126:	b530      	push	{r4, r5, lr}
  407128:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40712c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407130:	f04f 0500 	mov.w	r5, #0
  407134:	f04f 0100 	mov.w	r1, #0
  407138:	e750      	b.n	406fdc <__adddf3+0x138>
  40713a:	bf00      	nop

0040713c <__aeabi_i2d>:
  40713c:	f090 0f00 	teq	r0, #0
  407140:	bf04      	itt	eq
  407142:	2100      	moveq	r1, #0
  407144:	4770      	bxeq	lr
  407146:	b530      	push	{r4, r5, lr}
  407148:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40714c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407150:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407154:	bf48      	it	mi
  407156:	4240      	negmi	r0, r0
  407158:	f04f 0100 	mov.w	r1, #0
  40715c:	e73e      	b.n	406fdc <__adddf3+0x138>
  40715e:	bf00      	nop

00407160 <__aeabi_f2d>:
  407160:	0042      	lsls	r2, r0, #1
  407162:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407166:	ea4f 0131 	mov.w	r1, r1, rrx
  40716a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40716e:	bf1f      	itttt	ne
  407170:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407174:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407178:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40717c:	4770      	bxne	lr
  40717e:	f092 0f00 	teq	r2, #0
  407182:	bf14      	ite	ne
  407184:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407188:	4770      	bxeq	lr
  40718a:	b530      	push	{r4, r5, lr}
  40718c:	f44f 7460 	mov.w	r4, #896	; 0x380
  407190:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407194:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407198:	e720      	b.n	406fdc <__adddf3+0x138>
  40719a:	bf00      	nop

0040719c <__aeabi_ul2d>:
  40719c:	ea50 0201 	orrs.w	r2, r0, r1
  4071a0:	bf08      	it	eq
  4071a2:	4770      	bxeq	lr
  4071a4:	b530      	push	{r4, r5, lr}
  4071a6:	f04f 0500 	mov.w	r5, #0
  4071aa:	e00a      	b.n	4071c2 <__aeabi_l2d+0x16>

004071ac <__aeabi_l2d>:
  4071ac:	ea50 0201 	orrs.w	r2, r0, r1
  4071b0:	bf08      	it	eq
  4071b2:	4770      	bxeq	lr
  4071b4:	b530      	push	{r4, r5, lr}
  4071b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4071ba:	d502      	bpl.n	4071c2 <__aeabi_l2d+0x16>
  4071bc:	4240      	negs	r0, r0
  4071be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4071c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4071c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4071ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4071ce:	f43f aedc 	beq.w	406f8a <__adddf3+0xe6>
  4071d2:	f04f 0203 	mov.w	r2, #3
  4071d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4071da:	bf18      	it	ne
  4071dc:	3203      	addne	r2, #3
  4071de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4071e2:	bf18      	it	ne
  4071e4:	3203      	addne	r2, #3
  4071e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4071ea:	f1c2 0320 	rsb	r3, r2, #32
  4071ee:	fa00 fc03 	lsl.w	ip, r0, r3
  4071f2:	fa20 f002 	lsr.w	r0, r0, r2
  4071f6:	fa01 fe03 	lsl.w	lr, r1, r3
  4071fa:	ea40 000e 	orr.w	r0, r0, lr
  4071fe:	fa21 f102 	lsr.w	r1, r1, r2
  407202:	4414      	add	r4, r2
  407204:	e6c1      	b.n	406f8a <__adddf3+0xe6>
  407206:	bf00      	nop

00407208 <__aeabi_dmul>:
  407208:	b570      	push	{r4, r5, r6, lr}
  40720a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40720e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407216:	bf1d      	ittte	ne
  407218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40721c:	ea94 0f0c 	teqne	r4, ip
  407220:	ea95 0f0c 	teqne	r5, ip
  407224:	f000 f8de 	bleq	4073e4 <__aeabi_dmul+0x1dc>
  407228:	442c      	add	r4, r5
  40722a:	ea81 0603 	eor.w	r6, r1, r3
  40722e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40723a:	bf18      	it	ne
  40723c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407248:	d038      	beq.n	4072bc <__aeabi_dmul+0xb4>
  40724a:	fba0 ce02 	umull	ip, lr, r0, r2
  40724e:	f04f 0500 	mov.w	r5, #0
  407252:	fbe1 e502 	umlal	lr, r5, r1, r2
  407256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40725a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40725e:	f04f 0600 	mov.w	r6, #0
  407262:	fbe1 5603 	umlal	r5, r6, r1, r3
  407266:	f09c 0f00 	teq	ip, #0
  40726a:	bf18      	it	ne
  40726c:	f04e 0e01 	orrne.w	lr, lr, #1
  407270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40727c:	d204      	bcs.n	407288 <__aeabi_dmul+0x80>
  40727e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407282:	416d      	adcs	r5, r5
  407284:	eb46 0606 	adc.w	r6, r6, r6
  407288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40728c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40729c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4072a0:	bf88      	it	hi
  4072a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4072a6:	d81e      	bhi.n	4072e6 <__aeabi_dmul+0xde>
  4072a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4072ac:	bf08      	it	eq
  4072ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4072b2:	f150 0000 	adcs.w	r0, r0, #0
  4072b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4072ba:	bd70      	pop	{r4, r5, r6, pc}
  4072bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4072c0:	ea46 0101 	orr.w	r1, r6, r1
  4072c4:	ea40 0002 	orr.w	r0, r0, r2
  4072c8:	ea81 0103 	eor.w	r1, r1, r3
  4072cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4072d0:	bfc2      	ittt	gt
  4072d2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4072d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4072da:	bd70      	popgt	{r4, r5, r6, pc}
  4072dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4072e0:	f04f 0e00 	mov.w	lr, #0
  4072e4:	3c01      	subs	r4, #1
  4072e6:	f300 80ab 	bgt.w	407440 <__aeabi_dmul+0x238>
  4072ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4072ee:	bfde      	ittt	le
  4072f0:	2000      	movle	r0, #0
  4072f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4072f6:	bd70      	pople	{r4, r5, r6, pc}
  4072f8:	f1c4 0400 	rsb	r4, r4, #0
  4072fc:	3c20      	subs	r4, #32
  4072fe:	da35      	bge.n	40736c <__aeabi_dmul+0x164>
  407300:	340c      	adds	r4, #12
  407302:	dc1b      	bgt.n	40733c <__aeabi_dmul+0x134>
  407304:	f104 0414 	add.w	r4, r4, #20
  407308:	f1c4 0520 	rsb	r5, r4, #32
  40730c:	fa00 f305 	lsl.w	r3, r0, r5
  407310:	fa20 f004 	lsr.w	r0, r0, r4
  407314:	fa01 f205 	lsl.w	r2, r1, r5
  407318:	ea40 0002 	orr.w	r0, r0, r2
  40731c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407328:	fa21 f604 	lsr.w	r6, r1, r4
  40732c:	eb42 0106 	adc.w	r1, r2, r6
  407330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407334:	bf08      	it	eq
  407336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40733a:	bd70      	pop	{r4, r5, r6, pc}
  40733c:	f1c4 040c 	rsb	r4, r4, #12
  407340:	f1c4 0520 	rsb	r5, r4, #32
  407344:	fa00 f304 	lsl.w	r3, r0, r4
  407348:	fa20 f005 	lsr.w	r0, r0, r5
  40734c:	fa01 f204 	lsl.w	r2, r1, r4
  407350:	ea40 0002 	orr.w	r0, r0, r2
  407354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40735c:	f141 0100 	adc.w	r1, r1, #0
  407360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407364:	bf08      	it	eq
  407366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40736a:	bd70      	pop	{r4, r5, r6, pc}
  40736c:	f1c4 0520 	rsb	r5, r4, #32
  407370:	fa00 f205 	lsl.w	r2, r0, r5
  407374:	ea4e 0e02 	orr.w	lr, lr, r2
  407378:	fa20 f304 	lsr.w	r3, r0, r4
  40737c:	fa01 f205 	lsl.w	r2, r1, r5
  407380:	ea43 0302 	orr.w	r3, r3, r2
  407384:	fa21 f004 	lsr.w	r0, r1, r4
  407388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40738c:	fa21 f204 	lsr.w	r2, r1, r4
  407390:	ea20 0002 	bic.w	r0, r0, r2
  407394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40739c:	bf08      	it	eq
  40739e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4073a2:	bd70      	pop	{r4, r5, r6, pc}
  4073a4:	f094 0f00 	teq	r4, #0
  4073a8:	d10f      	bne.n	4073ca <__aeabi_dmul+0x1c2>
  4073aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4073ae:	0040      	lsls	r0, r0, #1
  4073b0:	eb41 0101 	adc.w	r1, r1, r1
  4073b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4073b8:	bf08      	it	eq
  4073ba:	3c01      	subeq	r4, #1
  4073bc:	d0f7      	beq.n	4073ae <__aeabi_dmul+0x1a6>
  4073be:	ea41 0106 	orr.w	r1, r1, r6
  4073c2:	f095 0f00 	teq	r5, #0
  4073c6:	bf18      	it	ne
  4073c8:	4770      	bxne	lr
  4073ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4073ce:	0052      	lsls	r2, r2, #1
  4073d0:	eb43 0303 	adc.w	r3, r3, r3
  4073d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4073d8:	bf08      	it	eq
  4073da:	3d01      	subeq	r5, #1
  4073dc:	d0f7      	beq.n	4073ce <__aeabi_dmul+0x1c6>
  4073de:	ea43 0306 	orr.w	r3, r3, r6
  4073e2:	4770      	bx	lr
  4073e4:	ea94 0f0c 	teq	r4, ip
  4073e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4073ec:	bf18      	it	ne
  4073ee:	ea95 0f0c 	teqne	r5, ip
  4073f2:	d00c      	beq.n	40740e <__aeabi_dmul+0x206>
  4073f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4073f8:	bf18      	it	ne
  4073fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4073fe:	d1d1      	bne.n	4073a4 <__aeabi_dmul+0x19c>
  407400:	ea81 0103 	eor.w	r1, r1, r3
  407404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407408:	f04f 0000 	mov.w	r0, #0
  40740c:	bd70      	pop	{r4, r5, r6, pc}
  40740e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407412:	bf06      	itte	eq
  407414:	4610      	moveq	r0, r2
  407416:	4619      	moveq	r1, r3
  407418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40741c:	d019      	beq.n	407452 <__aeabi_dmul+0x24a>
  40741e:	ea94 0f0c 	teq	r4, ip
  407422:	d102      	bne.n	40742a <__aeabi_dmul+0x222>
  407424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407428:	d113      	bne.n	407452 <__aeabi_dmul+0x24a>
  40742a:	ea95 0f0c 	teq	r5, ip
  40742e:	d105      	bne.n	40743c <__aeabi_dmul+0x234>
  407430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407434:	bf1c      	itt	ne
  407436:	4610      	movne	r0, r2
  407438:	4619      	movne	r1, r3
  40743a:	d10a      	bne.n	407452 <__aeabi_dmul+0x24a>
  40743c:	ea81 0103 	eor.w	r1, r1, r3
  407440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40744c:	f04f 0000 	mov.w	r0, #0
  407450:	bd70      	pop	{r4, r5, r6, pc}
  407452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40745a:	bd70      	pop	{r4, r5, r6, pc}

0040745c <__aeabi_ddiv>:
  40745c:	b570      	push	{r4, r5, r6, lr}
  40745e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407462:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407466:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40746a:	bf1d      	ittte	ne
  40746c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407470:	ea94 0f0c 	teqne	r4, ip
  407474:	ea95 0f0c 	teqne	r5, ip
  407478:	f000 f8a7 	bleq	4075ca <__aeabi_ddiv+0x16e>
  40747c:	eba4 0405 	sub.w	r4, r4, r5
  407480:	ea81 0e03 	eor.w	lr, r1, r3
  407484:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407488:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40748c:	f000 8088 	beq.w	4075a0 <__aeabi_ddiv+0x144>
  407490:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407494:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407498:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40749c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4074a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4074a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4074a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4074ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4074b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4074b4:	429d      	cmp	r5, r3
  4074b6:	bf08      	it	eq
  4074b8:	4296      	cmpeq	r6, r2
  4074ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4074be:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4074c2:	d202      	bcs.n	4074ca <__aeabi_ddiv+0x6e>
  4074c4:	085b      	lsrs	r3, r3, #1
  4074c6:	ea4f 0232 	mov.w	r2, r2, rrx
  4074ca:	1ab6      	subs	r6, r6, r2
  4074cc:	eb65 0503 	sbc.w	r5, r5, r3
  4074d0:	085b      	lsrs	r3, r3, #1
  4074d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4074d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4074da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4074de:	ebb6 0e02 	subs.w	lr, r6, r2
  4074e2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4074e6:	bf22      	ittt	cs
  4074e8:	1ab6      	subcs	r6, r6, r2
  4074ea:	4675      	movcs	r5, lr
  4074ec:	ea40 000c 	orrcs.w	r0, r0, ip
  4074f0:	085b      	lsrs	r3, r3, #1
  4074f2:	ea4f 0232 	mov.w	r2, r2, rrx
  4074f6:	ebb6 0e02 	subs.w	lr, r6, r2
  4074fa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4074fe:	bf22      	ittt	cs
  407500:	1ab6      	subcs	r6, r6, r2
  407502:	4675      	movcs	r5, lr
  407504:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407508:	085b      	lsrs	r3, r3, #1
  40750a:	ea4f 0232 	mov.w	r2, r2, rrx
  40750e:	ebb6 0e02 	subs.w	lr, r6, r2
  407512:	eb75 0e03 	sbcs.w	lr, r5, r3
  407516:	bf22      	ittt	cs
  407518:	1ab6      	subcs	r6, r6, r2
  40751a:	4675      	movcs	r5, lr
  40751c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407520:	085b      	lsrs	r3, r3, #1
  407522:	ea4f 0232 	mov.w	r2, r2, rrx
  407526:	ebb6 0e02 	subs.w	lr, r6, r2
  40752a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40752e:	bf22      	ittt	cs
  407530:	1ab6      	subcs	r6, r6, r2
  407532:	4675      	movcs	r5, lr
  407534:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407538:	ea55 0e06 	orrs.w	lr, r5, r6
  40753c:	d018      	beq.n	407570 <__aeabi_ddiv+0x114>
  40753e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407542:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407546:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40754a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40754e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407552:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407556:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40755a:	d1c0      	bne.n	4074de <__aeabi_ddiv+0x82>
  40755c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407560:	d10b      	bne.n	40757a <__aeabi_ddiv+0x11e>
  407562:	ea41 0100 	orr.w	r1, r1, r0
  407566:	f04f 0000 	mov.w	r0, #0
  40756a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40756e:	e7b6      	b.n	4074de <__aeabi_ddiv+0x82>
  407570:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407574:	bf04      	itt	eq
  407576:	4301      	orreq	r1, r0
  407578:	2000      	moveq	r0, #0
  40757a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40757e:	bf88      	it	hi
  407580:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407584:	f63f aeaf 	bhi.w	4072e6 <__aeabi_dmul+0xde>
  407588:	ebb5 0c03 	subs.w	ip, r5, r3
  40758c:	bf04      	itt	eq
  40758e:	ebb6 0c02 	subseq.w	ip, r6, r2
  407592:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407596:	f150 0000 	adcs.w	r0, r0, #0
  40759a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40759e:	bd70      	pop	{r4, r5, r6, pc}
  4075a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4075a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4075a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4075ac:	bfc2      	ittt	gt
  4075ae:	ebd4 050c 	rsbsgt	r5, r4, ip
  4075b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4075b6:	bd70      	popgt	{r4, r5, r6, pc}
  4075b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4075bc:	f04f 0e00 	mov.w	lr, #0
  4075c0:	3c01      	subs	r4, #1
  4075c2:	e690      	b.n	4072e6 <__aeabi_dmul+0xde>
  4075c4:	ea45 0e06 	orr.w	lr, r5, r6
  4075c8:	e68d      	b.n	4072e6 <__aeabi_dmul+0xde>
  4075ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4075ce:	ea94 0f0c 	teq	r4, ip
  4075d2:	bf08      	it	eq
  4075d4:	ea95 0f0c 	teqeq	r5, ip
  4075d8:	f43f af3b 	beq.w	407452 <__aeabi_dmul+0x24a>
  4075dc:	ea94 0f0c 	teq	r4, ip
  4075e0:	d10a      	bne.n	4075f8 <__aeabi_ddiv+0x19c>
  4075e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4075e6:	f47f af34 	bne.w	407452 <__aeabi_dmul+0x24a>
  4075ea:	ea95 0f0c 	teq	r5, ip
  4075ee:	f47f af25 	bne.w	40743c <__aeabi_dmul+0x234>
  4075f2:	4610      	mov	r0, r2
  4075f4:	4619      	mov	r1, r3
  4075f6:	e72c      	b.n	407452 <__aeabi_dmul+0x24a>
  4075f8:	ea95 0f0c 	teq	r5, ip
  4075fc:	d106      	bne.n	40760c <__aeabi_ddiv+0x1b0>
  4075fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407602:	f43f aefd 	beq.w	407400 <__aeabi_dmul+0x1f8>
  407606:	4610      	mov	r0, r2
  407608:	4619      	mov	r1, r3
  40760a:	e722      	b.n	407452 <__aeabi_dmul+0x24a>
  40760c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407610:	bf18      	it	ne
  407612:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407616:	f47f aec5 	bne.w	4073a4 <__aeabi_dmul+0x19c>
  40761a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40761e:	f47f af0d 	bne.w	40743c <__aeabi_dmul+0x234>
  407622:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407626:	f47f aeeb 	bne.w	407400 <__aeabi_dmul+0x1f8>
  40762a:	e712      	b.n	407452 <__aeabi_dmul+0x24a>

0040762c <__gedf2>:
  40762c:	f04f 3cff 	mov.w	ip, #4294967295
  407630:	e006      	b.n	407640 <__cmpdf2+0x4>
  407632:	bf00      	nop

00407634 <__ledf2>:
  407634:	f04f 0c01 	mov.w	ip, #1
  407638:	e002      	b.n	407640 <__cmpdf2+0x4>
  40763a:	bf00      	nop

0040763c <__cmpdf2>:
  40763c:	f04f 0c01 	mov.w	ip, #1
  407640:	f84d cd04 	str.w	ip, [sp, #-4]!
  407644:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407648:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40764c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407650:	bf18      	it	ne
  407652:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407656:	d01b      	beq.n	407690 <__cmpdf2+0x54>
  407658:	b001      	add	sp, #4
  40765a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40765e:	bf0c      	ite	eq
  407660:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407664:	ea91 0f03 	teqne	r1, r3
  407668:	bf02      	ittt	eq
  40766a:	ea90 0f02 	teqeq	r0, r2
  40766e:	2000      	moveq	r0, #0
  407670:	4770      	bxeq	lr
  407672:	f110 0f00 	cmn.w	r0, #0
  407676:	ea91 0f03 	teq	r1, r3
  40767a:	bf58      	it	pl
  40767c:	4299      	cmppl	r1, r3
  40767e:	bf08      	it	eq
  407680:	4290      	cmpeq	r0, r2
  407682:	bf2c      	ite	cs
  407684:	17d8      	asrcs	r0, r3, #31
  407686:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40768a:	f040 0001 	orr.w	r0, r0, #1
  40768e:	4770      	bx	lr
  407690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407698:	d102      	bne.n	4076a0 <__cmpdf2+0x64>
  40769a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40769e:	d107      	bne.n	4076b0 <__cmpdf2+0x74>
  4076a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4076a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4076a8:	d1d6      	bne.n	407658 <__cmpdf2+0x1c>
  4076aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4076ae:	d0d3      	beq.n	407658 <__cmpdf2+0x1c>
  4076b0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4076b4:	4770      	bx	lr
  4076b6:	bf00      	nop

004076b8 <__aeabi_cdrcmple>:
  4076b8:	4684      	mov	ip, r0
  4076ba:	4610      	mov	r0, r2
  4076bc:	4662      	mov	r2, ip
  4076be:	468c      	mov	ip, r1
  4076c0:	4619      	mov	r1, r3
  4076c2:	4663      	mov	r3, ip
  4076c4:	e000      	b.n	4076c8 <__aeabi_cdcmpeq>
  4076c6:	bf00      	nop

004076c8 <__aeabi_cdcmpeq>:
  4076c8:	b501      	push	{r0, lr}
  4076ca:	f7ff ffb7 	bl	40763c <__cmpdf2>
  4076ce:	2800      	cmp	r0, #0
  4076d0:	bf48      	it	mi
  4076d2:	f110 0f00 	cmnmi.w	r0, #0
  4076d6:	bd01      	pop	{r0, pc}

004076d8 <__aeabi_dcmpeq>:
  4076d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4076dc:	f7ff fff4 	bl	4076c8 <__aeabi_cdcmpeq>
  4076e0:	bf0c      	ite	eq
  4076e2:	2001      	moveq	r0, #1
  4076e4:	2000      	movne	r0, #0
  4076e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4076ea:	bf00      	nop

004076ec <__aeabi_dcmplt>:
  4076ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4076f0:	f7ff ffea 	bl	4076c8 <__aeabi_cdcmpeq>
  4076f4:	bf34      	ite	cc
  4076f6:	2001      	movcc	r0, #1
  4076f8:	2000      	movcs	r0, #0
  4076fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4076fe:	bf00      	nop

00407700 <__aeabi_dcmple>:
  407700:	f84d ed08 	str.w	lr, [sp, #-8]!
  407704:	f7ff ffe0 	bl	4076c8 <__aeabi_cdcmpeq>
  407708:	bf94      	ite	ls
  40770a:	2001      	movls	r0, #1
  40770c:	2000      	movhi	r0, #0
  40770e:	f85d fb08 	ldr.w	pc, [sp], #8
  407712:	bf00      	nop

00407714 <__aeabi_dcmpge>:
  407714:	f84d ed08 	str.w	lr, [sp, #-8]!
  407718:	f7ff ffce 	bl	4076b8 <__aeabi_cdrcmple>
  40771c:	bf94      	ite	ls
  40771e:	2001      	movls	r0, #1
  407720:	2000      	movhi	r0, #0
  407722:	f85d fb08 	ldr.w	pc, [sp], #8
  407726:	bf00      	nop

00407728 <__aeabi_dcmpgt>:
  407728:	f84d ed08 	str.w	lr, [sp, #-8]!
  40772c:	f7ff ffc4 	bl	4076b8 <__aeabi_cdrcmple>
  407730:	bf34      	ite	cc
  407732:	2001      	movcc	r0, #1
  407734:	2000      	movcs	r0, #0
  407736:	f85d fb08 	ldr.w	pc, [sp], #8
  40773a:	bf00      	nop

0040773c <__aeabi_d2iz>:
  40773c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407740:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407744:	d215      	bcs.n	407772 <__aeabi_d2iz+0x36>
  407746:	d511      	bpl.n	40776c <__aeabi_d2iz+0x30>
  407748:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40774c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407750:	d912      	bls.n	407778 <__aeabi_d2iz+0x3c>
  407752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40775a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40775e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407762:	fa23 f002 	lsr.w	r0, r3, r2
  407766:	bf18      	it	ne
  407768:	4240      	negne	r0, r0
  40776a:	4770      	bx	lr
  40776c:	f04f 0000 	mov.w	r0, #0
  407770:	4770      	bx	lr
  407772:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407776:	d105      	bne.n	407784 <__aeabi_d2iz+0x48>
  407778:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40777c:	bf08      	it	eq
  40777e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407782:	4770      	bx	lr
  407784:	f04f 0000 	mov.w	r0, #0
  407788:	4770      	bx	lr
  40778a:	bf00      	nop

0040778c <__aeabi_uldivmod>:
  40778c:	b94b      	cbnz	r3, 4077a2 <__aeabi_uldivmod+0x16>
  40778e:	b942      	cbnz	r2, 4077a2 <__aeabi_uldivmod+0x16>
  407790:	2900      	cmp	r1, #0
  407792:	bf08      	it	eq
  407794:	2800      	cmpeq	r0, #0
  407796:	d002      	beq.n	40779e <__aeabi_uldivmod+0x12>
  407798:	f04f 31ff 	mov.w	r1, #4294967295
  40779c:	4608      	mov	r0, r1
  40779e:	f000 b83b 	b.w	407818 <__aeabi_idiv0>
  4077a2:	b082      	sub	sp, #8
  4077a4:	46ec      	mov	ip, sp
  4077a6:	e92d 5000 	stmdb	sp!, {ip, lr}
  4077aa:	f000 f81d 	bl	4077e8 <__gnu_uldivmod_helper>
  4077ae:	f8dd e004 	ldr.w	lr, [sp, #4]
  4077b2:	b002      	add	sp, #8
  4077b4:	bc0c      	pop	{r2, r3}
  4077b6:	4770      	bx	lr

004077b8 <__gnu_ldivmod_helper>:
  4077b8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  4077bc:	9e08      	ldr	r6, [sp, #32]
  4077be:	4614      	mov	r4, r2
  4077c0:	461d      	mov	r5, r3
  4077c2:	4680      	mov	r8, r0
  4077c4:	4689      	mov	r9, r1
  4077c6:	f000 f829 	bl	40781c <__divdi3>
  4077ca:	fb04 f301 	mul.w	r3, r4, r1
  4077ce:	fba4 ab00 	umull	sl, fp, r4, r0
  4077d2:	fb00 3205 	mla	r2, r0, r5, r3
  4077d6:	4493      	add	fp, r2
  4077d8:	ebb8 080a 	subs.w	r8, r8, sl
  4077dc:	eb69 090b 	sbc.w	r9, r9, fp
  4077e0:	e9c6 8900 	strd	r8, r9, [r6]
  4077e4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

004077e8 <__gnu_uldivmod_helper>:
  4077e8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  4077ec:	9e08      	ldr	r6, [sp, #32]
  4077ee:	4614      	mov	r4, r2
  4077f0:	461d      	mov	r5, r3
  4077f2:	4680      	mov	r8, r0
  4077f4:	4689      	mov	r9, r1
  4077f6:	f000 f961 	bl	407abc <__udivdi3>
  4077fa:	fb00 f505 	mul.w	r5, r0, r5
  4077fe:	fba0 ab04 	umull	sl, fp, r0, r4
  407802:	fb04 5401 	mla	r4, r4, r1, r5
  407806:	44a3      	add	fp, r4
  407808:	ebb8 080a 	subs.w	r8, r8, sl
  40780c:	eb69 090b 	sbc.w	r9, r9, fp
  407810:	e9c6 8900 	strd	r8, r9, [r6]
  407814:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00407818 <__aeabi_idiv0>:
  407818:	4770      	bx	lr
  40781a:	bf00      	nop

0040781c <__divdi3>:
  40781c:	2900      	cmp	r1, #0
  40781e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407822:	f2c0 80a1 	blt.w	407968 <__divdi3+0x14c>
  407826:	2400      	movs	r4, #0
  407828:	2b00      	cmp	r3, #0
  40782a:	f2c0 8098 	blt.w	40795e <__divdi3+0x142>
  40782e:	4615      	mov	r5, r2
  407830:	4606      	mov	r6, r0
  407832:	460f      	mov	r7, r1
  407834:	2b00      	cmp	r3, #0
  407836:	d13f      	bne.n	4078b8 <__divdi3+0x9c>
  407838:	428a      	cmp	r2, r1
  40783a:	d958      	bls.n	4078ee <__divdi3+0xd2>
  40783c:	fab2 f382 	clz	r3, r2
  407840:	b14b      	cbz	r3, 407856 <__divdi3+0x3a>
  407842:	f1c3 0220 	rsb	r2, r3, #32
  407846:	fa01 f703 	lsl.w	r7, r1, r3
  40784a:	fa20 f202 	lsr.w	r2, r0, r2
  40784e:	409d      	lsls	r5, r3
  407850:	fa00 f603 	lsl.w	r6, r0, r3
  407854:	4317      	orrs	r7, r2
  407856:	0c29      	lsrs	r1, r5, #16
  407858:	fbb7 f2f1 	udiv	r2, r7, r1
  40785c:	fb01 7712 	mls	r7, r1, r2, r7
  407860:	b2a8      	uxth	r0, r5
  407862:	fb00 f302 	mul.w	r3, r0, r2
  407866:	ea4f 4c16 	mov.w	ip, r6, lsr #16
  40786a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
  40786e:	42bb      	cmp	r3, r7
  407870:	d909      	bls.n	407886 <__divdi3+0x6a>
  407872:	197f      	adds	r7, r7, r5
  407874:	f102 3cff 	add.w	ip, r2, #4294967295
  407878:	f080 8105 	bcs.w	407a86 <__divdi3+0x26a>
  40787c:	42bb      	cmp	r3, r7
  40787e:	f240 8102 	bls.w	407a86 <__divdi3+0x26a>
  407882:	3a02      	subs	r2, #2
  407884:	442f      	add	r7, r5
  407886:	1aff      	subs	r7, r7, r3
  407888:	fbb7 f3f1 	udiv	r3, r7, r1
  40788c:	fb01 7113 	mls	r1, r1, r3, r7
  407890:	fb00 f003 	mul.w	r0, r0, r3
  407894:	b2b6      	uxth	r6, r6
  407896:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  40789a:	4288      	cmp	r0, r1
  40789c:	d908      	bls.n	4078b0 <__divdi3+0x94>
  40789e:	1949      	adds	r1, r1, r5
  4078a0:	f103 37ff 	add.w	r7, r3, #4294967295
  4078a4:	f080 80f1 	bcs.w	407a8a <__divdi3+0x26e>
  4078a8:	4288      	cmp	r0, r1
  4078aa:	f240 80ee 	bls.w	407a8a <__divdi3+0x26e>
  4078ae:	3b02      	subs	r3, #2
  4078b0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4078b4:	2300      	movs	r3, #0
  4078b6:	e003      	b.n	4078c0 <__divdi3+0xa4>
  4078b8:	428b      	cmp	r3, r1
  4078ba:	d90a      	bls.n	4078d2 <__divdi3+0xb6>
  4078bc:	2300      	movs	r3, #0
  4078be:	461a      	mov	r2, r3
  4078c0:	4610      	mov	r0, r2
  4078c2:	4619      	mov	r1, r3
  4078c4:	b114      	cbz	r4, 4078cc <__divdi3+0xb0>
  4078c6:	4240      	negs	r0, r0
  4078c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4078cc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4078d0:	4770      	bx	lr
  4078d2:	fab3 f883 	clz	r8, r3
  4078d6:	f1b8 0f00 	cmp.w	r8, #0
  4078da:	f040 8088 	bne.w	4079ee <__divdi3+0x1d2>
  4078de:	428b      	cmp	r3, r1
  4078e0:	d302      	bcc.n	4078e8 <__divdi3+0xcc>
  4078e2:	4282      	cmp	r2, r0
  4078e4:	f200 80e2 	bhi.w	407aac <__divdi3+0x290>
  4078e8:	2300      	movs	r3, #0
  4078ea:	2201      	movs	r2, #1
  4078ec:	e7e8      	b.n	4078c0 <__divdi3+0xa4>
  4078ee:	b912      	cbnz	r2, 4078f6 <__divdi3+0xda>
  4078f0:	2301      	movs	r3, #1
  4078f2:	fbb3 f5f2 	udiv	r5, r3, r2
  4078f6:	fab5 f285 	clz	r2, r5
  4078fa:	2a00      	cmp	r2, #0
  4078fc:	d13a      	bne.n	407974 <__divdi3+0x158>
  4078fe:	1b7f      	subs	r7, r7, r5
  407900:	0c28      	lsrs	r0, r5, #16
  407902:	fa1f fc85 	uxth.w	ip, r5
  407906:	2301      	movs	r3, #1
  407908:	fbb7 f1f0 	udiv	r1, r7, r0
  40790c:	fb00 7711 	mls	r7, r0, r1, r7
  407910:	fb0c f201 	mul.w	r2, ip, r1
  407914:	ea4f 4816 	mov.w	r8, r6, lsr #16
  407918:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40791c:	42ba      	cmp	r2, r7
  40791e:	d907      	bls.n	407930 <__divdi3+0x114>
  407920:	197f      	adds	r7, r7, r5
  407922:	f101 38ff 	add.w	r8, r1, #4294967295
  407926:	d202      	bcs.n	40792e <__divdi3+0x112>
  407928:	42ba      	cmp	r2, r7
  40792a:	f200 80c4 	bhi.w	407ab6 <__divdi3+0x29a>
  40792e:	4641      	mov	r1, r8
  407930:	1abf      	subs	r7, r7, r2
  407932:	fbb7 f2f0 	udiv	r2, r7, r0
  407936:	fb00 7012 	mls	r0, r0, r2, r7
  40793a:	fb0c fc02 	mul.w	ip, ip, r2
  40793e:	b2b6      	uxth	r6, r6
  407940:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  407944:	4584      	cmp	ip, r0
  407946:	d907      	bls.n	407958 <__divdi3+0x13c>
  407948:	1940      	adds	r0, r0, r5
  40794a:	f102 37ff 	add.w	r7, r2, #4294967295
  40794e:	d202      	bcs.n	407956 <__divdi3+0x13a>
  407950:	4584      	cmp	ip, r0
  407952:	f200 80ae 	bhi.w	407ab2 <__divdi3+0x296>
  407956:	463a      	mov	r2, r7
  407958:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40795c:	e7b0      	b.n	4078c0 <__divdi3+0xa4>
  40795e:	43e4      	mvns	r4, r4
  407960:	4252      	negs	r2, r2
  407962:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407966:	e762      	b.n	40782e <__divdi3+0x12>
  407968:	4240      	negs	r0, r0
  40796a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40796e:	f04f 34ff 	mov.w	r4, #4294967295
  407972:	e759      	b.n	407828 <__divdi3+0xc>
  407974:	4095      	lsls	r5, r2
  407976:	f1c2 0920 	rsb	r9, r2, #32
  40797a:	fa27 f109 	lsr.w	r1, r7, r9
  40797e:	fa26 f909 	lsr.w	r9, r6, r9
  407982:	4097      	lsls	r7, r2
  407984:	0c28      	lsrs	r0, r5, #16
  407986:	fbb1 f8f0 	udiv	r8, r1, r0
  40798a:	fb00 1118 	mls	r1, r0, r8, r1
  40798e:	fa1f fc85 	uxth.w	ip, r5
  407992:	fb0c f308 	mul.w	r3, ip, r8
  407996:	ea49 0907 	orr.w	r9, r9, r7
  40799a:	ea4f 4719 	mov.w	r7, r9, lsr #16
  40799e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
  4079a2:	428b      	cmp	r3, r1
  4079a4:	fa06 f602 	lsl.w	r6, r6, r2
  4079a8:	d908      	bls.n	4079bc <__divdi3+0x1a0>
  4079aa:	1949      	adds	r1, r1, r5
  4079ac:	f108 32ff 	add.w	r2, r8, #4294967295
  4079b0:	d27a      	bcs.n	407aa8 <__divdi3+0x28c>
  4079b2:	428b      	cmp	r3, r1
  4079b4:	d978      	bls.n	407aa8 <__divdi3+0x28c>
  4079b6:	f1a8 0802 	sub.w	r8, r8, #2
  4079ba:	4429      	add	r1, r5
  4079bc:	1ac9      	subs	r1, r1, r3
  4079be:	fbb1 f3f0 	udiv	r3, r1, r0
  4079c2:	fb00 1713 	mls	r7, r0, r3, r1
  4079c6:	fb0c f203 	mul.w	r2, ip, r3
  4079ca:	fa1f f989 	uxth.w	r9, r9
  4079ce:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
  4079d2:	42ba      	cmp	r2, r7
  4079d4:	d907      	bls.n	4079e6 <__divdi3+0x1ca>
  4079d6:	197f      	adds	r7, r7, r5
  4079d8:	f103 31ff 	add.w	r1, r3, #4294967295
  4079dc:	d260      	bcs.n	407aa0 <__divdi3+0x284>
  4079de:	42ba      	cmp	r2, r7
  4079e0:	d95e      	bls.n	407aa0 <__divdi3+0x284>
  4079e2:	3b02      	subs	r3, #2
  4079e4:	442f      	add	r7, r5
  4079e6:	1abf      	subs	r7, r7, r2
  4079e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  4079ec:	e78c      	b.n	407908 <__divdi3+0xec>
  4079ee:	f1c8 0220 	rsb	r2, r8, #32
  4079f2:	fa25 f102 	lsr.w	r1, r5, r2
  4079f6:	fa03 fc08 	lsl.w	ip, r3, r8
  4079fa:	fa27 f302 	lsr.w	r3, r7, r2
  4079fe:	fa20 f202 	lsr.w	r2, r0, r2
  407a02:	fa07 f708 	lsl.w	r7, r7, r8
  407a06:	ea41 0c0c 	orr.w	ip, r1, ip
  407a0a:	ea4f 491c 	mov.w	r9, ip, lsr #16
  407a0e:	fbb3 f1f9 	udiv	r1, r3, r9
  407a12:	fb09 3311 	mls	r3, r9, r1, r3
  407a16:	fa1f fa8c 	uxth.w	sl, ip
  407a1a:	fb0a fb01 	mul.w	fp, sl, r1
  407a1e:	4317      	orrs	r7, r2
  407a20:	0c3a      	lsrs	r2, r7, #16
  407a22:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  407a26:	459b      	cmp	fp, r3
  407a28:	fa05 f008 	lsl.w	r0, r5, r8
  407a2c:	d908      	bls.n	407a40 <__divdi3+0x224>
  407a2e:	eb13 030c 	adds.w	r3, r3, ip
  407a32:	f101 32ff 	add.w	r2, r1, #4294967295
  407a36:	d235      	bcs.n	407aa4 <__divdi3+0x288>
  407a38:	459b      	cmp	fp, r3
  407a3a:	d933      	bls.n	407aa4 <__divdi3+0x288>
  407a3c:	3902      	subs	r1, #2
  407a3e:	4463      	add	r3, ip
  407a40:	ebcb 0303 	rsb	r3, fp, r3
  407a44:	fbb3 f2f9 	udiv	r2, r3, r9
  407a48:	fb09 3312 	mls	r3, r9, r2, r3
  407a4c:	fb0a fa02 	mul.w	sl, sl, r2
  407a50:	b2bf      	uxth	r7, r7
  407a52:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  407a56:	45ba      	cmp	sl, r7
  407a58:	d908      	bls.n	407a6c <__divdi3+0x250>
  407a5a:	eb17 070c 	adds.w	r7, r7, ip
  407a5e:	f102 33ff 	add.w	r3, r2, #4294967295
  407a62:	d21b      	bcs.n	407a9c <__divdi3+0x280>
  407a64:	45ba      	cmp	sl, r7
  407a66:	d919      	bls.n	407a9c <__divdi3+0x280>
  407a68:	3a02      	subs	r2, #2
  407a6a:	4467      	add	r7, ip
  407a6c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  407a70:	fba5 0100 	umull	r0, r1, r5, r0
  407a74:	ebca 0707 	rsb	r7, sl, r7
  407a78:	428f      	cmp	r7, r1
  407a7a:	f04f 0300 	mov.w	r3, #0
  407a7e:	d30a      	bcc.n	407a96 <__divdi3+0x27a>
  407a80:	d005      	beq.n	407a8e <__divdi3+0x272>
  407a82:	462a      	mov	r2, r5
  407a84:	e71c      	b.n	4078c0 <__divdi3+0xa4>
  407a86:	4662      	mov	r2, ip
  407a88:	e6fd      	b.n	407886 <__divdi3+0x6a>
  407a8a:	463b      	mov	r3, r7
  407a8c:	e710      	b.n	4078b0 <__divdi3+0x94>
  407a8e:	fa06 f608 	lsl.w	r6, r6, r8
  407a92:	4286      	cmp	r6, r0
  407a94:	d2f5      	bcs.n	407a82 <__divdi3+0x266>
  407a96:	1e6a      	subs	r2, r5, #1
  407a98:	2300      	movs	r3, #0
  407a9a:	e711      	b.n	4078c0 <__divdi3+0xa4>
  407a9c:	461a      	mov	r2, r3
  407a9e:	e7e5      	b.n	407a6c <__divdi3+0x250>
  407aa0:	460b      	mov	r3, r1
  407aa2:	e7a0      	b.n	4079e6 <__divdi3+0x1ca>
  407aa4:	4611      	mov	r1, r2
  407aa6:	e7cb      	b.n	407a40 <__divdi3+0x224>
  407aa8:	4690      	mov	r8, r2
  407aaa:	e787      	b.n	4079bc <__divdi3+0x1a0>
  407aac:	4643      	mov	r3, r8
  407aae:	4642      	mov	r2, r8
  407ab0:	e706      	b.n	4078c0 <__divdi3+0xa4>
  407ab2:	3a02      	subs	r2, #2
  407ab4:	e750      	b.n	407958 <__divdi3+0x13c>
  407ab6:	3902      	subs	r1, #2
  407ab8:	442f      	add	r7, r5
  407aba:	e739      	b.n	407930 <__divdi3+0x114>

00407abc <__udivdi3>:
  407abc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407ac0:	4614      	mov	r4, r2
  407ac2:	4605      	mov	r5, r0
  407ac4:	460e      	mov	r6, r1
  407ac6:	2b00      	cmp	r3, #0
  407ac8:	d143      	bne.n	407b52 <__udivdi3+0x96>
  407aca:	428a      	cmp	r2, r1
  407acc:	d953      	bls.n	407b76 <__udivdi3+0xba>
  407ace:	fab2 f782 	clz	r7, r2
  407ad2:	b157      	cbz	r7, 407aea <__udivdi3+0x2e>
  407ad4:	f1c7 0620 	rsb	r6, r7, #32
  407ad8:	fa20 f606 	lsr.w	r6, r0, r6
  407adc:	fa01 f307 	lsl.w	r3, r1, r7
  407ae0:	fa02 f407 	lsl.w	r4, r2, r7
  407ae4:	fa00 f507 	lsl.w	r5, r0, r7
  407ae8:	431e      	orrs	r6, r3
  407aea:	0c21      	lsrs	r1, r4, #16
  407aec:	fbb6 f2f1 	udiv	r2, r6, r1
  407af0:	fb01 6612 	mls	r6, r1, r2, r6
  407af4:	b2a0      	uxth	r0, r4
  407af6:	fb00 f302 	mul.w	r3, r0, r2
  407afa:	0c2f      	lsrs	r7, r5, #16
  407afc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  407b00:	42b3      	cmp	r3, r6
  407b02:	d909      	bls.n	407b18 <__udivdi3+0x5c>
  407b04:	1936      	adds	r6, r6, r4
  407b06:	f102 37ff 	add.w	r7, r2, #4294967295
  407b0a:	f080 80fd 	bcs.w	407d08 <__udivdi3+0x24c>
  407b0e:	42b3      	cmp	r3, r6
  407b10:	f240 80fa 	bls.w	407d08 <__udivdi3+0x24c>
  407b14:	3a02      	subs	r2, #2
  407b16:	4426      	add	r6, r4
  407b18:	1af6      	subs	r6, r6, r3
  407b1a:	fbb6 f3f1 	udiv	r3, r6, r1
  407b1e:	fb01 6113 	mls	r1, r1, r3, r6
  407b22:	fb00 f003 	mul.w	r0, r0, r3
  407b26:	b2ad      	uxth	r5, r5
  407b28:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  407b2c:	4288      	cmp	r0, r1
  407b2e:	d908      	bls.n	407b42 <__udivdi3+0x86>
  407b30:	1909      	adds	r1, r1, r4
  407b32:	f103 36ff 	add.w	r6, r3, #4294967295
  407b36:	f080 80e9 	bcs.w	407d0c <__udivdi3+0x250>
  407b3a:	4288      	cmp	r0, r1
  407b3c:	f240 80e6 	bls.w	407d0c <__udivdi3+0x250>
  407b40:	3b02      	subs	r3, #2
  407b42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  407b46:	2300      	movs	r3, #0
  407b48:	4610      	mov	r0, r2
  407b4a:	4619      	mov	r1, r3
  407b4c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407b50:	4770      	bx	lr
  407b52:	428b      	cmp	r3, r1
  407b54:	d84c      	bhi.n	407bf0 <__udivdi3+0x134>
  407b56:	fab3 f683 	clz	r6, r3
  407b5a:	2e00      	cmp	r6, #0
  407b5c:	d14f      	bne.n	407bfe <__udivdi3+0x142>
  407b5e:	428b      	cmp	r3, r1
  407b60:	d302      	bcc.n	407b68 <__udivdi3+0xac>
  407b62:	4282      	cmp	r2, r0
  407b64:	f200 80dd 	bhi.w	407d22 <__udivdi3+0x266>
  407b68:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407b6c:	2300      	movs	r3, #0
  407b6e:	2201      	movs	r2, #1
  407b70:	4610      	mov	r0, r2
  407b72:	4619      	mov	r1, r3
  407b74:	4770      	bx	lr
  407b76:	b912      	cbnz	r2, 407b7e <__udivdi3+0xc2>
  407b78:	2401      	movs	r4, #1
  407b7a:	fbb4 f4f2 	udiv	r4, r4, r2
  407b7e:	fab4 f284 	clz	r2, r4
  407b82:	2a00      	cmp	r2, #0
  407b84:	f040 8082 	bne.w	407c8c <__udivdi3+0x1d0>
  407b88:	1b09      	subs	r1, r1, r4
  407b8a:	0c26      	lsrs	r6, r4, #16
  407b8c:	b2a7      	uxth	r7, r4
  407b8e:	2301      	movs	r3, #1
  407b90:	fbb1 f0f6 	udiv	r0, r1, r6
  407b94:	fb06 1110 	mls	r1, r6, r0, r1
  407b98:	fb07 f200 	mul.w	r2, r7, r0
  407b9c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
  407ba0:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
  407ba4:	428a      	cmp	r2, r1
  407ba6:	d907      	bls.n	407bb8 <__udivdi3+0xfc>
  407ba8:	1909      	adds	r1, r1, r4
  407baa:	f100 3cff 	add.w	ip, r0, #4294967295
  407bae:	d202      	bcs.n	407bb6 <__udivdi3+0xfa>
  407bb0:	428a      	cmp	r2, r1
  407bb2:	f200 80c8 	bhi.w	407d46 <__udivdi3+0x28a>
  407bb6:	4660      	mov	r0, ip
  407bb8:	1a89      	subs	r1, r1, r2
  407bba:	fbb1 f2f6 	udiv	r2, r1, r6
  407bbe:	fb06 1112 	mls	r1, r6, r2, r1
  407bc2:	fb07 f702 	mul.w	r7, r7, r2
  407bc6:	b2ad      	uxth	r5, r5
  407bc8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  407bcc:	42af      	cmp	r7, r5
  407bce:	d908      	bls.n	407be2 <__udivdi3+0x126>
  407bd0:	192c      	adds	r4, r5, r4
  407bd2:	f102 31ff 	add.w	r1, r2, #4294967295
  407bd6:	f080 809b 	bcs.w	407d10 <__udivdi3+0x254>
  407bda:	42a7      	cmp	r7, r4
  407bdc:	f240 8098 	bls.w	407d10 <__udivdi3+0x254>
  407be0:	3a02      	subs	r2, #2
  407be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  407be6:	4610      	mov	r0, r2
  407be8:	4619      	mov	r1, r3
  407bea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407bee:	4770      	bx	lr
  407bf0:	2300      	movs	r3, #0
  407bf2:	461a      	mov	r2, r3
  407bf4:	4610      	mov	r0, r2
  407bf6:	4619      	mov	r1, r3
  407bf8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407bfc:	4770      	bx	lr
  407bfe:	f1c6 0520 	rsb	r5, r6, #32
  407c02:	fa22 f705 	lsr.w	r7, r2, r5
  407c06:	fa03 f406 	lsl.w	r4, r3, r6
  407c0a:	fa21 f305 	lsr.w	r3, r1, r5
  407c0e:	fa01 fb06 	lsl.w	fp, r1, r6
  407c12:	fa20 f505 	lsr.w	r5, r0, r5
  407c16:	433c      	orrs	r4, r7
  407c18:	ea4f 4814 	mov.w	r8, r4, lsr #16
  407c1c:	fbb3 fcf8 	udiv	ip, r3, r8
  407c20:	fb08 331c 	mls	r3, r8, ip, r3
  407c24:	fa1f f984 	uxth.w	r9, r4
  407c28:	fb09 fa0c 	mul.w	sl, r9, ip
  407c2c:	ea45 0b0b 	orr.w	fp, r5, fp
  407c30:	ea4f 451b 	mov.w	r5, fp, lsr #16
  407c34:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  407c38:	459a      	cmp	sl, r3
  407c3a:	fa02 f206 	lsl.w	r2, r2, r6
  407c3e:	d904      	bls.n	407c4a <__udivdi3+0x18e>
  407c40:	191b      	adds	r3, r3, r4
  407c42:	f10c 35ff 	add.w	r5, ip, #4294967295
  407c46:	d36f      	bcc.n	407d28 <__udivdi3+0x26c>
  407c48:	46ac      	mov	ip, r5
  407c4a:	ebca 0303 	rsb	r3, sl, r3
  407c4e:	fbb3 f5f8 	udiv	r5, r3, r8
  407c52:	fb08 3315 	mls	r3, r8, r5, r3
  407c56:	fb09 f905 	mul.w	r9, r9, r5
  407c5a:	fa1f fb8b 	uxth.w	fp, fp
  407c5e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
  407c62:	45b9      	cmp	r9, r7
  407c64:	d904      	bls.n	407c70 <__udivdi3+0x1b4>
  407c66:	193f      	adds	r7, r7, r4
  407c68:	f105 33ff 	add.w	r3, r5, #4294967295
  407c6c:	d362      	bcc.n	407d34 <__udivdi3+0x278>
  407c6e:	461d      	mov	r5, r3
  407c70:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  407c74:	fbac 2302 	umull	r2, r3, ip, r2
  407c78:	ebc9 0707 	rsb	r7, r9, r7
  407c7c:	429f      	cmp	r7, r3
  407c7e:	f04f 0500 	mov.w	r5, #0
  407c82:	d34a      	bcc.n	407d1a <__udivdi3+0x25e>
  407c84:	d046      	beq.n	407d14 <__udivdi3+0x258>
  407c86:	4662      	mov	r2, ip
  407c88:	462b      	mov	r3, r5
  407c8a:	e75d      	b.n	407b48 <__udivdi3+0x8c>
  407c8c:	4094      	lsls	r4, r2
  407c8e:	f1c2 0920 	rsb	r9, r2, #32
  407c92:	fa21 fc09 	lsr.w	ip, r1, r9
  407c96:	4091      	lsls	r1, r2
  407c98:	fa20 f909 	lsr.w	r9, r0, r9
  407c9c:	0c26      	lsrs	r6, r4, #16
  407c9e:	fbbc f8f6 	udiv	r8, ip, r6
  407ca2:	fb06 cc18 	mls	ip, r6, r8, ip
  407ca6:	b2a7      	uxth	r7, r4
  407ca8:	fb07 f308 	mul.w	r3, r7, r8
  407cac:	ea49 0901 	orr.w	r9, r9, r1
  407cb0:	ea4f 4119 	mov.w	r1, r9, lsr #16
  407cb4:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
  407cb8:	4563      	cmp	r3, ip
  407cba:	fa00 f502 	lsl.w	r5, r0, r2
  407cbe:	d909      	bls.n	407cd4 <__udivdi3+0x218>
  407cc0:	eb1c 0c04 	adds.w	ip, ip, r4
  407cc4:	f108 32ff 	add.w	r2, r8, #4294967295
  407cc8:	d23b      	bcs.n	407d42 <__udivdi3+0x286>
  407cca:	4563      	cmp	r3, ip
  407ccc:	d939      	bls.n	407d42 <__udivdi3+0x286>
  407cce:	f1a8 0802 	sub.w	r8, r8, #2
  407cd2:	44a4      	add	ip, r4
  407cd4:	ebc3 0c0c 	rsb	ip, r3, ip
  407cd8:	fbbc f3f6 	udiv	r3, ip, r6
  407cdc:	fb06 c113 	mls	r1, r6, r3, ip
  407ce0:	fb07 f203 	mul.w	r2, r7, r3
  407ce4:	fa1f f989 	uxth.w	r9, r9
  407ce8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
  407cec:	428a      	cmp	r2, r1
  407cee:	d907      	bls.n	407d00 <__udivdi3+0x244>
  407cf0:	1909      	adds	r1, r1, r4
  407cf2:	f103 30ff 	add.w	r0, r3, #4294967295
  407cf6:	d222      	bcs.n	407d3e <__udivdi3+0x282>
  407cf8:	428a      	cmp	r2, r1
  407cfa:	d920      	bls.n	407d3e <__udivdi3+0x282>
  407cfc:	3b02      	subs	r3, #2
  407cfe:	4421      	add	r1, r4
  407d00:	1a89      	subs	r1, r1, r2
  407d02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  407d06:	e743      	b.n	407b90 <__udivdi3+0xd4>
  407d08:	463a      	mov	r2, r7
  407d0a:	e705      	b.n	407b18 <__udivdi3+0x5c>
  407d0c:	4633      	mov	r3, r6
  407d0e:	e718      	b.n	407b42 <__udivdi3+0x86>
  407d10:	460a      	mov	r2, r1
  407d12:	e766      	b.n	407be2 <__udivdi3+0x126>
  407d14:	40b0      	lsls	r0, r6
  407d16:	4290      	cmp	r0, r2
  407d18:	d2b5      	bcs.n	407c86 <__udivdi3+0x1ca>
  407d1a:	f10c 32ff 	add.w	r2, ip, #4294967295
  407d1e:	2300      	movs	r3, #0
  407d20:	e712      	b.n	407b48 <__udivdi3+0x8c>
  407d22:	4633      	mov	r3, r6
  407d24:	4632      	mov	r2, r6
  407d26:	e70f      	b.n	407b48 <__udivdi3+0x8c>
  407d28:	459a      	cmp	sl, r3
  407d2a:	d98d      	bls.n	407c48 <__udivdi3+0x18c>
  407d2c:	f1ac 0c02 	sub.w	ip, ip, #2
  407d30:	4423      	add	r3, r4
  407d32:	e78a      	b.n	407c4a <__udivdi3+0x18e>
  407d34:	45b9      	cmp	r9, r7
  407d36:	d99a      	bls.n	407c6e <__udivdi3+0x1b2>
  407d38:	3d02      	subs	r5, #2
  407d3a:	4427      	add	r7, r4
  407d3c:	e798      	b.n	407c70 <__udivdi3+0x1b4>
  407d3e:	4603      	mov	r3, r0
  407d40:	e7de      	b.n	407d00 <__udivdi3+0x244>
  407d42:	4690      	mov	r8, r2
  407d44:	e7c6      	b.n	407cd4 <__udivdi3+0x218>
  407d46:	3802      	subs	r0, #2
  407d48:	4421      	add	r1, r4
  407d4a:	e735      	b.n	407bb8 <__udivdi3+0xfc>
  407d4c:	616d6f43 	.word	0x616d6f43
  407d50:	6620646e 	.word	0x6620646e
  407d54:	616d726f 	.word	0x616d726f
  407d58:	72652074 	.word	0x72652074
  407d5c:	21726f72 	.word	0x21726f72
  407d60:	00000d0a 	.word	0x00000d0a
  407d64:	41525453 	.word	0x41525453
  407d68:	00444546 	.word	0x00444546
  407d6c:	75716341 	.word	0x75716341
  407d70:	74697369 	.word	0x74697369
  407d74:	206e6f69 	.word	0x206e6f69
  407d78:	72617473 	.word	0x72617473
  407d7c:	0a646574 	.word	0x0a646574
  407d80:	0000000d 	.word	0x0000000d
  407d84:	75716341 	.word	0x75716341
  407d88:	74697369 	.word	0x74697369
  407d8c:	206e6f69 	.word	0x206e6f69
  407d90:	706f7473 	.word	0x706f7473
  407d94:	0d0a6465 	.word	0x0d0a6465
  407d98:	00000000 	.word	0x00000000
  407d9c:	706d6153 	.word	0x706d6153
  407da0:	7020656c 	.word	0x7020656c
  407da4:	6f697265 	.word	0x6f697265
  407da8:	65732064 	.word	0x65732064
  407dac:	6f742074 	.word	0x6f742074
  407db0:	20752520 	.word	0x20752520
  407db4:	0d0a5375 	.word	0x0d0a5375
  407db8:	00000000 	.word	0x00000000
  407dbc:	20514144 	.word	0x20514144
  407dc0:	6c6c6977 	.word	0x6c6c6977
  407dc4:	65746120 	.word	0x65746120
  407dc8:	2074706d 	.word	0x2074706d
  407dcc:	74206f74 	.word	0x74206f74
  407dd0:	20656b61 	.word	0x20656b61
  407dd4:	73207525 	.word	0x73207525
  407dd8:	6c706d61 	.word	0x6c706d61
  407ddc:	70207365 	.word	0x70207365
  407de0:	63207265 	.word	0x63207265
  407de4:	6e6e6168 	.word	0x6e6e6168
  407de8:	0d0a6c65 	.word	0x0d0a6c65
  407dec:	00000000 	.word	0x00000000
  407df0:	20514144 	.word	0x20514144
  407df4:	6c6c6977 	.word	0x6c6c6977
  407df8:	6d617320 	.word	0x6d617320
  407dfc:	20656c70 	.word	0x20656c70
  407e00:	206c6c61 	.word	0x206c6c61
  407e04:	62656e65 	.word	0x62656e65
  407e08:	2064656c 	.word	0x2064656c
  407e0c:	6e616863 	.word	0x6e616863
  407e10:	736c656e 	.word	0x736c656e
  407e14:	20752520 	.word	0x20752520
  407e18:	656d6974 	.word	0x656d6974
  407e1c:	000d0a73 	.word	0x000d0a73
  407e20:	75716553 	.word	0x75716553
  407e24:	65636e65 	.word	0x65636e65
  407e28:	74657320 	.word	0x74657320
  407e2c:	3a6f7420 	.word	0x3a6f7420
  407e30:	00000020 	.word	0x00000020
  407e34:	00207525 	.word	0x00207525
  407e38:	20434144 	.word	0x20434144
  407e3c:	6e616863 	.word	0x6e616863
  407e40:	206c656e 	.word	0x206c656e
  407e44:	73207525 	.word	0x73207525
  407e48:	74207465 	.word	0x74207465
  407e4c:	6425206f 	.word	0x6425206f
  407e50:	0a566d20 	.word	0x0a566d20
  407e54:	0000000d 	.word	0x0000000d
  407e58:	6e6b6e55 	.word	0x6e6b6e55
  407e5c:	206e776f 	.word	0x206e776f
  407e60:	616d6f63 	.word	0x616d6f63
  407e64:	0a21646e 	.word	0x0a21646e
  407e68:	0000000d 	.word	0x0000000d

00407e6c <_global_impure_ptr>:
  407e6c:	200000c0 20200043                                ... C.

00407e72 <blanks.6743>:
  407e72:	20202020 20202020 20202020 20202020                     

00407e82 <zeroes.6744>:
  407e82:	30303030 30303030 30303030 30303030     0000000000000000
  407e92:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  407ea2:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  407eb2:	32313000 36353433 61393837 65646362     .0123456789abcde
  407ec2:	00300066                                f.0.

00407ec6 <_ctype_>:
  407ec6:	20202000 20202020 28282020 20282828     .         ((((( 
  407ed6:	20202020 20202020 20202020 20202020                     
  407ee6:	10108820 10101010 10101010 10101010      ...............
  407ef6:	04040410 04040404 10040404 10101010     ................
  407f06:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407f16:	01010101 01010101 01010101 10101010     ................
  407f26:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407f36:	02020202 02020202 02020202 10101010     ................
  407f46:	00000020 00000000 00000000 00000000      ...............
	...
  407fc6:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
  407fd6:	00584953 0000002e 00050000                       SIX.......

00407fe0 <p05.5289>:
  407fe0:	00000005 00000019 0000007d 00000000     ........}.......

00407ff0 <__mprec_tens>:
  407ff0:	00000000 3ff00000 00000000 40240000     .......?......$@
  408000:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  408010:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  408020:	00000000 412e8480 00000000 416312d0     .......A......cA
  408030:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  408040:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  408050:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408060:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408070:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408080:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408090:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  4080a0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  4080b0:	79d99db4 44ea7843                       ...yCx.D

004080b8 <__mprec_tinytens>:
  4080b8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  4080c8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  4080d8:	64ac6f43 0ac80628                       Co.d(...

004080e0 <__mprec_bigtens>:
  4080e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  4080f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408100:	7f73bf3c 75154fdd                       <.s..O.u

00408108 <blanks.6687>:
  408108:	20202020 20202020 20202020 20202020                     

00408118 <zeroes.6688>:
  408118:	30303030 30303030 30303030 30303030     0000000000000000

00408128 <_init>:
  408128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40812a:	bf00      	nop
  40812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40812e:	bc08      	pop	{r3}
  408130:	469e      	mov	lr, r3
  408132:	4770      	bx	lr

00408134 <__init_array_start>:
  408134:	00404565 	.word	0x00404565

00408138 <__frame_dummy_init_array_entry>:
  408138:	00400149                                I.@.

0040813c <_fini>:
  40813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40813e:	bf00      	nop
  408140:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408142:	bc08      	pop	{r3}
  408144:	469e      	mov	lr, r3
  408146:	4770      	bx	lr

00408148 <__fini_array_start>:
  408148:	00400121 	.word	0x00400121

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <sequencePosition>:
2000000c:	0001 0000                                   ....

20000010 <udi_api_cdc_data>:
20000010:	0be9 0040 089d 0040 08b9 0040 08bd 0040     ..@...@...@...@.
20000020:	0ac9 0040                                   ..@.

20000024 <udi_api_cdc_comm>:
20000024:	0841 0040 088d 0040 08c1 0040 08bd 0040     A.@...@...@...@.
20000034:	0000 0000                                   ....

20000038 <udc_config>:
20000038:	0054 2000 004c 2000 0000 0000               T.. L.. ....

20000044 <udi_apis>:
20000044:	0024 2000 0010 2000                         $.. ... 

2000004c <udc_config_fs>:
2000004c:	0068 2000 0044 2000                         h.. D.. 

20000054 <udc_device_desc>:
20000054:	0112 0200 0002 4000 03eb 2404 0100 0000     .......@...$....
20000064:	0100 0000                                   ....

20000068 <udc_desc_fs>:
20000068:	0209 0043 0102 8000 0932 0004 0100 0202     ..C.....2.......
20000078:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000088:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000098:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
200000a8:	0040 0000                                   @...

200000ac <udc_string_desc_languageid>:
200000ac:	0304 0409                                   ....

200000b0 <g_interrupt_enabled>:
200000b0:	0001 0000                                   ....

200000b4 <SystemCoreClock>:
200000b4:	0900 003d                                   ..=.

200000b8 <_impure_ptr>:
200000b8:	00c0 2000 0000 0000                         ... ....

200000c0 <impure_data>:
200000c0:	0000 0000 03ac 2000 0414 2000 047c 2000     ....... ... |.. 
	...
200000f4:	7e70 0040 0000 0000 0000 0000 0000 0000     p~@.............
	...
20000168:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000178:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004e8 <__ctype_ptr__>:
200004e8:	7ec6 0040                                   .~@.

200004ec <lc_ctype_charset>:
200004ec:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2000050c <__mb_cur_max>:
2000050c:	0001 0000                                   ....

20000510 <lc_message_charset>:
20000510:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000530 <lconv>:
20000530:	7fda 0040 7fdb 0040 7fdb 0040 7fdb 0040     ..@...@...@...@.
20000540:	7fdb 0040 7fdb 0040 7fdb 0040 7fdb 0040     ..@...@...@...@.
20000550:	7fdb 0040 7fdb 0040 ffff ffff ffff ffff     ..@...@.........
20000560:	ffff ffff ffff 0000                         ........

20000568 <__malloc_av_>:
	...
20000570:	0568 2000 0568 2000 0570 2000 0570 2000     h.. h.. p.. p.. 
20000580:	0578 2000 0578 2000 0580 2000 0580 2000     x.. x.. ... ... 
20000590:	0588 2000 0588 2000 0590 2000 0590 2000     ... ... ... ... 
200005a0:	0598 2000 0598 2000 05a0 2000 05a0 2000     ... ... ... ... 
200005b0:	05a8 2000 05a8 2000 05b0 2000 05b0 2000     ... ... ... ... 
200005c0:	05b8 2000 05b8 2000 05c0 2000 05c0 2000     ... ... ... ... 
200005d0:	05c8 2000 05c8 2000 05d0 2000 05d0 2000     ... ... ... ... 
200005e0:	05d8 2000 05d8 2000 05e0 2000 05e0 2000     ... ... ... ... 
200005f0:	05e8 2000 05e8 2000 05f0 2000 05f0 2000     ... ... ... ... 
20000600:	05f8 2000 05f8 2000 0600 2000 0600 2000     ... ... ... ... 
20000610:	0608 2000 0608 2000 0610 2000 0610 2000     ... ... ... ... 
20000620:	0618 2000 0618 2000 0620 2000 0620 2000     ... ...  ..  .. 
20000630:	0628 2000 0628 2000 0630 2000 0630 2000     (.. (.. 0.. 0.. 
20000640:	0638 2000 0638 2000 0640 2000 0640 2000     8.. 8.. @.. @.. 
20000650:	0648 2000 0648 2000 0650 2000 0650 2000     H.. H.. P.. P.. 
20000660:	0658 2000 0658 2000 0660 2000 0660 2000     X.. X.. `.. `.. 
20000670:	0668 2000 0668 2000 0670 2000 0670 2000     h.. h.. p.. p.. 
20000680:	0678 2000 0678 2000 0680 2000 0680 2000     x.. x.. ... ... 
20000690:	0688 2000 0688 2000 0690 2000 0690 2000     ... ... ... ... 
200006a0:	0698 2000 0698 2000 06a0 2000 06a0 2000     ... ... ... ... 
200006b0:	06a8 2000 06a8 2000 06b0 2000 06b0 2000     ... ... ... ... 
200006c0:	06b8 2000 06b8 2000 06c0 2000 06c0 2000     ... ... ... ... 
200006d0:	06c8 2000 06c8 2000 06d0 2000 06d0 2000     ... ... ... ... 
200006e0:	06d8 2000 06d8 2000 06e0 2000 06e0 2000     ... ... ... ... 
200006f0:	06e8 2000 06e8 2000 06f0 2000 06f0 2000     ... ... ... ... 
20000700:	06f8 2000 06f8 2000 0700 2000 0700 2000     ... ... ... ... 
20000710:	0708 2000 0708 2000 0710 2000 0710 2000     ... ... ... ... 
20000720:	0718 2000 0718 2000 0720 2000 0720 2000     ... ...  ..  .. 
20000730:	0728 2000 0728 2000 0730 2000 0730 2000     (.. (.. 0.. 0.. 
20000740:	0738 2000 0738 2000 0740 2000 0740 2000     8.. 8.. @.. @.. 
20000750:	0748 2000 0748 2000 0750 2000 0750 2000     H.. H.. P.. P.. 
20000760:	0758 2000 0758 2000 0760 2000 0760 2000     X.. X.. `.. `.. 
20000770:	0768 2000 0768 2000 0770 2000 0770 2000     h.. h.. p.. p.. 
20000780:	0778 2000 0778 2000 0780 2000 0780 2000     x.. x.. ... ... 
20000790:	0788 2000 0788 2000 0790 2000 0790 2000     ... ... ... ... 
200007a0:	0798 2000 0798 2000 07a0 2000 07a0 2000     ... ... ... ... 
200007b0:	07a8 2000 07a8 2000 07b0 2000 07b0 2000     ... ... ... ... 
200007c0:	07b8 2000 07b8 2000 07c0 2000 07c0 2000     ... ... ... ... 
200007d0:	07c8 2000 07c8 2000 07d0 2000 07d0 2000     ... ... ... ... 
200007e0:	07d8 2000 07d8 2000 07e0 2000 07e0 2000     ... ... ... ... 
200007f0:	07e8 2000 07e8 2000 07f0 2000 07f0 2000     ... ... ... ... 
20000800:	07f8 2000 07f8 2000 0800 2000 0800 2000     ... ... ... ... 
20000810:	0808 2000 0808 2000 0810 2000 0810 2000     ... ... ... ... 
20000820:	0818 2000 0818 2000 0820 2000 0820 2000     ... ...  ..  .. 
20000830:	0828 2000 0828 2000 0830 2000 0830 2000     (.. (.. 0.. 0.. 
20000840:	0838 2000 0838 2000 0840 2000 0840 2000     8.. 8.. @.. @.. 
20000850:	0848 2000 0848 2000 0850 2000 0850 2000     H.. H.. P.. P.. 
20000860:	0858 2000 0858 2000 0860 2000 0860 2000     X.. X.. `.. `.. 
20000870:	0868 2000 0868 2000 0870 2000 0870 2000     h.. h.. p.. p.. 
20000880:	0878 2000 0878 2000 0880 2000 0880 2000     x.. x.. ... ... 
20000890:	0888 2000 0888 2000 0890 2000 0890 2000     ... ... ... ... 
200008a0:	0898 2000 0898 2000 08a0 2000 08a0 2000     ... ... ... ... 
200008b0:	08a8 2000 08a8 2000 08b0 2000 08b0 2000     ... ... ... ... 
200008c0:	08b8 2000 08b8 2000 08c0 2000 08c0 2000     ... ... ... ... 
200008d0:	08c8 2000 08c8 2000 08d0 2000 08d0 2000     ... ... ... ... 
200008e0:	08d8 2000 08d8 2000 08e0 2000 08e0 2000     ... ... ... ... 
200008f0:	08e8 2000 08e8 2000 08f0 2000 08f0 2000     ... ... ... ... 
20000900:	08f8 2000 08f8 2000 0900 2000 0900 2000     ... ... ... ... 
20000910:	0908 2000 0908 2000 0910 2000 0910 2000     ... ... ... ... 
20000920:	0918 2000 0918 2000 0920 2000 0920 2000     ... ...  ..  .. 
20000930:	0928 2000 0928 2000 0930 2000 0930 2000     (.. (.. 0.. 0.. 
20000940:	0938 2000 0938 2000 0940 2000 0940 2000     8.. 8.. @.. @.. 
20000950:	0948 2000 0948 2000 0950 2000 0950 2000     H.. H.. P.. P.. 
20000960:	0958 2000 0958 2000 0960 2000 0960 2000     X.. X.. `.. `.. 

20000970 <__malloc_sbrk_base>:
20000970:	ffff ffff                                   ....

20000974 <__malloc_trim_threshold>:
20000974:	0000 0002                                   ....
