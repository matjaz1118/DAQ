
USB_DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007e7c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407e7c  00407e7c  0000fe7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000978  20000000  00407e84  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002e0  20000978  004087fc  00010978  2**2
                  ALLOC
  4 .stack        00002000  20000c58  00408adc  00010978  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010978  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000109a1  2**0
                  CONTENTS, READONLY
  7 .debug_info   00020737  00000000  00000000  00010a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005c23  00000000  00000000  00031149  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ee92  00000000  00000000  00036d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001060  00000000  00000000  00045c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cc0  00000000  00000000  00046c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000155cd  00000000  00000000  00047920  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016e50  00000000  00000000  0005ceed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051c6a  00000000  00000000  00073d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000239c  00000000  00000000  000c59a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20002c58 	.word	0x20002c58
  400004:	00402ef9 	.word	0x00402ef9
  400008:	00402ef5 	.word	0x00402ef5
  40000c:	00402ef5 	.word	0x00402ef5
  400010:	00402ef5 	.word	0x00402ef5
  400014:	00402ef5 	.word	0x00402ef5
  400018:	00402ef5 	.word	0x00402ef5
	...
  40002c:	00402ef5 	.word	0x00402ef5
  400030:	00402ef5 	.word	0x00402ef5
  400034:	00000000 	.word	0x00000000
  400038:	00402ef5 	.word	0x00402ef5
  40003c:	00402ef5 	.word	0x00402ef5
  400040:	00402ef5 	.word	0x00402ef5
  400044:	00402ef5 	.word	0x00402ef5
  400048:	00402ef5 	.word	0x00402ef5
  40004c:	00402ef5 	.word	0x00402ef5
  400050:	00402ef5 	.word	0x00402ef5
  400054:	00402ef5 	.word	0x00402ef5
  400058:	00402ef5 	.word	0x00402ef5
  40005c:	00402ef5 	.word	0x00402ef5
  400060:	00402ef5 	.word	0x00402ef5
  400064:	00402ef5 	.word	0x00402ef5
  400068:	00402ef5 	.word	0x00402ef5
  40006c:	00401541 	.word	0x00401541
  400070:	00401555 	.word	0x00401555
  400074:	00402ef5 	.word	0x00402ef5
  400078:	00402ef5 	.word	0x00402ef5
  40007c:	00402ef5 	.word	0x00402ef5
  400080:	00402ef5 	.word	0x00402ef5
  400084:	00402ef5 	.word	0x00402ef5
  400088:	00402ef5 	.word	0x00402ef5
  40008c:	00402ef5 	.word	0x00402ef5
  400090:	00402ef5 	.word	0x00402ef5
  400094:	00402ef5 	.word	0x00402ef5
  400098:	00402ef5 	.word	0x00402ef5
  40009c:	00402ef5 	.word	0x00402ef5
  4000a0:	00402ef5 	.word	0x00402ef5
  4000a4:	00402ef5 	.word	0x00402ef5
  4000a8:	00402ef5 	.word	0x00402ef5
  4000ac:	00402ef5 	.word	0x00402ef5
  4000b0:	00402ef5 	.word	0x00402ef5
  4000b4:	00400181 	.word	0x00400181
  4000b8:	00402ef5 	.word	0x00402ef5
  4000bc:	00402ef5 	.word	0x00402ef5
  4000c0:	00402ef5 	.word	0x00402ef5
  4000c4:	00402ef5 	.word	0x00402ef5
  4000c8:	00401d01 	.word	0x00401d01
  4000cc:	00402ef5 	.word	0x00402ef5

004000d0 <deregister_tm_clones>:
  4000d0:	b508      	push	{r3, lr}
  4000d2:	4805      	ldr	r0, [pc, #20]	; (4000e8 <deregister_tm_clones+0x18>)
  4000d4:	4b05      	ldr	r3, [pc, #20]	; (4000ec <deregister_tm_clones+0x1c>)
  4000d6:	1a1b      	subs	r3, r3, r0
  4000d8:	2b06      	cmp	r3, #6
  4000da:	d800      	bhi.n	4000de <deregister_tm_clones+0xe>
  4000dc:	bd08      	pop	{r3, pc}
  4000de:	4b04      	ldr	r3, [pc, #16]	; (4000f0 <deregister_tm_clones+0x20>)
  4000e0:	2b00      	cmp	r3, #0
  4000e2:	d0fb      	beq.n	4000dc <deregister_tm_clones+0xc>
  4000e4:	4798      	blx	r3
  4000e6:	e7f9      	b.n	4000dc <deregister_tm_clones+0xc>
  4000e8:	00407e84 	.word	0x00407e84
  4000ec:	00407e87 	.word	0x00407e87
  4000f0:	00000000 	.word	0x00000000

004000f4 <register_tm_clones>:
  4000f4:	b508      	push	{r3, lr}
  4000f6:	4807      	ldr	r0, [pc, #28]	; (400114 <register_tm_clones+0x20>)
  4000f8:	4b07      	ldr	r3, [pc, #28]	; (400118 <register_tm_clones+0x24>)
  4000fa:	1a1b      	subs	r3, r3, r0
  4000fc:	109b      	asrs	r3, r3, #2
  4000fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  400102:	1059      	asrs	r1, r3, #1
  400104:	d100      	bne.n	400108 <register_tm_clones+0x14>
  400106:	bd08      	pop	{r3, pc}
  400108:	4a04      	ldr	r2, [pc, #16]	; (40011c <register_tm_clones+0x28>)
  40010a:	2a00      	cmp	r2, #0
  40010c:	d0fb      	beq.n	400106 <register_tm_clones+0x12>
  40010e:	4790      	blx	r2
  400110:	e7f9      	b.n	400106 <register_tm_clones+0x12>
  400112:	bf00      	nop
  400114:	00407e84 	.word	0x00407e84
  400118:	00407e84 	.word	0x00407e84
  40011c:	00000000 	.word	0x00000000

00400120 <__do_global_dtors_aux>:
  400120:	b510      	push	{r4, lr}
  400122:	4c06      	ldr	r4, [pc, #24]	; (40013c <__do_global_dtors_aux+0x1c>)
  400124:	7823      	ldrb	r3, [r4, #0]
  400126:	b943      	cbnz	r3, 40013a <__do_global_dtors_aux+0x1a>
  400128:	f7ff ffd2 	bl	4000d0 <deregister_tm_clones>
  40012c:	4b04      	ldr	r3, [pc, #16]	; (400140 <__do_global_dtors_aux+0x20>)
  40012e:	b113      	cbz	r3, 400136 <__do_global_dtors_aux+0x16>
  400130:	4804      	ldr	r0, [pc, #16]	; (400144 <__do_global_dtors_aux+0x24>)
  400132:	f3af 8000 	nop.w
  400136:	2301      	movs	r3, #1
  400138:	7023      	strb	r3, [r4, #0]
  40013a:	bd10      	pop	{r4, pc}
  40013c:	20000978 	.word	0x20000978
  400140:	00000000 	.word	0x00000000
  400144:	00407e84 	.word	0x00407e84

00400148 <frame_dummy>:
  400148:	b508      	push	{r3, lr}
  40014a:	4b08      	ldr	r3, [pc, #32]	; (40016c <frame_dummy+0x24>)
  40014c:	b11b      	cbz	r3, 400156 <frame_dummy+0xe>
  40014e:	4808      	ldr	r0, [pc, #32]	; (400170 <frame_dummy+0x28>)
  400150:	4908      	ldr	r1, [pc, #32]	; (400174 <frame_dummy+0x2c>)
  400152:	f3af 8000 	nop.w
  400156:	4808      	ldr	r0, [pc, #32]	; (400178 <frame_dummy+0x30>)
  400158:	6803      	ldr	r3, [r0, #0]
  40015a:	b113      	cbz	r3, 400162 <frame_dummy+0x1a>
  40015c:	4b07      	ldr	r3, [pc, #28]	; (40017c <frame_dummy+0x34>)
  40015e:	b103      	cbz	r3, 400162 <frame_dummy+0x1a>
  400160:	4798      	blx	r3
  400162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400166:	f7ff bfc5 	b.w	4000f4 <register_tm_clones>
  40016a:	bf00      	nop
  40016c:	00000000 	.word	0x00000000
  400170:	00407e84 	.word	0x00407e84
  400174:	2000097c 	.word	0x2000097c
  400178:	00407e84 	.word	0x00407e84
  40017c:	00000000 	.word	0x00000000

00400180 <ADC_Handler>:
	//Setup adc and start the timer. Everithing else happens in ADC ISR
}


void ADC_Handler (void)
{ 
  400180:	b510      	push	{r4, lr}
	DAQSettingsPtr = get_current_DAQ_settings();
  400182:	4b18      	ldr	r3, [pc, #96]	; (4001e4 <ADC_Handler+0x64>)
  400184:	4798      	blx	r3
  400186:	4b18      	ldr	r3, [pc, #96]	; (4001e8 <ADC_Handler+0x68>)
  400188:	6018      	str	r0, [r3, #0]

	result = adc_get_latest_value(ADC);
  40018a:	4c18      	ldr	r4, [pc, #96]	; (4001ec <ADC_Handler+0x6c>)
  40018c:	4620      	mov	r0, r4
  40018e:	4b18      	ldr	r3, [pc, #96]	; (4001f0 <ADC_Handler+0x70>)
  400190:	4798      	blx	r3
  400192:	4b18      	ldr	r3, [pc, #96]	; (4001f4 <ADC_Handler+0x74>)
  400194:	6018      	str	r0, [r3, #0]
	//todo: convert and print measured result
	adc_disable_all_channel(ADC);
  400196:	4620      	mov	r0, r4
  400198:	4b17      	ldr	r3, [pc, #92]	; (4001f8 <ADC_Handler+0x78>)
  40019a:	4798      	blx	r3
	if(repetitionCounter)
  40019c:	4b17      	ldr	r3, [pc, #92]	; (4001fc <ADC_Handler+0x7c>)
  40019e:	681b      	ldr	r3, [r3, #0]
  4001a0:	b1db      	cbz	r3, 4001da <ADC_Handler+0x5a>
	{
		if(sampleCounter)
  4001a2:	4a17      	ldr	r2, [pc, #92]	; (400200 <ADC_Handler+0x80>)
  4001a4:	6812      	ldr	r2, [r2, #0]
  4001a6:	b11a      	cbz	r2, 4001b0 <ADC_Handler+0x30>
		{
			sampleCounter--;
  4001a8:	3a01      	subs	r2, #1
  4001aa:	4b15      	ldr	r3, [pc, #84]	; (400200 <ADC_Handler+0x80>)
  4001ac:	601a      	str	r2, [r3, #0]
  4001ae:	e00a      	b.n	4001c6 <ADC_Handler+0x46>
		}
		else
		{
			sampleCounter = DAQSettingsPtr->samplesNbr;
  4001b0:	4a0d      	ldr	r2, [pc, #52]	; (4001e8 <ADC_Handler+0x68>)
  4001b2:	6812      	ldr	r2, [r2, #0]
  4001b4:	8a11      	ldrh	r1, [r2, #16]
  4001b6:	4a12      	ldr	r2, [pc, #72]	; (400200 <ADC_Handler+0x80>)
  4001b8:	6011      	str	r1, [r2, #0]
			sequencePosition++;
			if(DAQSettingsPtr->sequence[sequencePosition] == 0);
			{
				sequencePosition = 0;
  4001ba:	2100      	movs	r1, #0
  4001bc:	4a11      	ldr	r2, [pc, #68]	; (400204 <ADC_Handler+0x84>)
  4001be:	6011      	str	r1, [r2, #0]
				repetitionCounter--;
  4001c0:	3b01      	subs	r3, #1
  4001c2:	4a0e      	ldr	r2, [pc, #56]	; (4001fc <ADC_Handler+0x7c>)
  4001c4:	6013      	str	r3, [r2, #0]
			}
		}
		adc_enable_channel(ADC, DAQSettingsPtr->sequence[sequencePosition]); // todo: channel maping
  4001c6:	4b08      	ldr	r3, [pc, #32]	; (4001e8 <ADC_Handler+0x68>)
  4001c8:	681a      	ldr	r2, [r3, #0]
  4001ca:	4b0e      	ldr	r3, [pc, #56]	; (400204 <ADC_Handler+0x84>)
  4001cc:	681b      	ldr	r3, [r3, #0]
  4001ce:	4413      	add	r3, r2
  4001d0:	4806      	ldr	r0, [pc, #24]	; (4001ec <ADC_Handler+0x6c>)
  4001d2:	7a19      	ldrb	r1, [r3, #8]
  4001d4:	4b0c      	ldr	r3, [pc, #48]	; (400208 <ADC_Handler+0x88>)
  4001d6:	4798      	blx	r3
  4001d8:	bd10      	pop	{r4, pc}
	}
	else
	{
		tc_stop(TC0, 0);
  4001da:	480c      	ldr	r0, [pc, #48]	; (40020c <ADC_Handler+0x8c>)
  4001dc:	2100      	movs	r1, #0
  4001de:	4b0c      	ldr	r3, [pc, #48]	; (400210 <ADC_Handler+0x90>)
  4001e0:	4798      	blx	r3
  4001e2:	bd10      	pop	{r4, pc}
  4001e4:	004004d9 	.word	0x004004d9
  4001e8:	20000c14 	.word	0x20000c14
  4001ec:	40038000 	.word	0x40038000
  4001f0:	004013a1 	.word	0x004013a1
  4001f4:	20000c10 	.word	0x20000c10
  4001f8:	00401399 	.word	0x00401399
  4001fc:	20000c0c 	.word	0x20000c0c
  400200:	20000c08 	.word	0x20000c08
  400204:	2000000c 	.word	0x2000000c
  400208:	0040138d 	.word	0x0040138d
  40020c:	40010000 	.word	0x40010000
  400210:	00401761 	.word	0x00401761

00400214 <dac_init>:
#include "pmc.h"
#include "pio.h"
#include "stdint-gcc.h"

void dac_init (void)
{
  400214:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
  400216:	201e      	movs	r0, #30
  400218:	4c15      	ldr	r4, [pc, #84]	; (400270 <dac_init+0x5c>)
  40021a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40021c:	200c      	movs	r0, #12
  40021e:	47a0      	blx	r4
	
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB13);
  400220:	4d14      	ldr	r5, [pc, #80]	; (400274 <dac_init+0x60>)
  400222:	4628      	mov	r0, r5
  400224:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40022c:	4c12      	ldr	r4, [pc, #72]	; (400278 <dac_init+0x64>)
  40022e:	47a0      	blx	r4
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB14);
  400230:	4628      	mov	r0, r5
  400232:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40023a:	47a0      	blx	r4
	dacc_reset(DACC);
  40023c:	4c0f      	ldr	r4, [pc, #60]	; (40027c <dac_init+0x68>)
  40023e:	4620      	mov	r0, r4
  400240:	4b0f      	ldr	r3, [pc, #60]	; (400280 <dac_init+0x6c>)
  400242:	4798      	blx	r3
	dacc_set_writeprotect(DACC, 0);
  400244:	4620      	mov	r0, r4
  400246:	2100      	movs	r1, #0
  400248:	4b0e      	ldr	r3, [pc, #56]	; (400284 <dac_init+0x70>)
  40024a:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);
  40024c:	4620      	mov	r0, r4
  40024e:	2100      	movs	r1, #0
  400250:	4d0d      	ldr	r5, [pc, #52]	; (400288 <dac_init+0x74>)
  400252:	47a8      	blx	r5
	dacc_enable_channel(DACC, 1);	
  400254:	4620      	mov	r0, r4
  400256:	2101      	movs	r1, #1
  400258:	47a8      	blx	r5
	dacc_set_timing(DACC, 1, 0, 15);
  40025a:	4620      	mov	r0, r4
  40025c:	2101      	movs	r1, #1
  40025e:	2200      	movs	r2, #0
  400260:	230f      	movs	r3, #15
  400262:	4d0a      	ldr	r5, [pc, #40]	; (40028c <dac_init+0x78>)
  400264:	47a8      	blx	r5
	dacc_disable_trigger(DACC);
  400266:	4620      	mov	r0, r4
  400268:	4b09      	ldr	r3, [pc, #36]	; (400290 <dac_init+0x7c>)
  40026a:	4798      	blx	r3
  40026c:	bd38      	pop	{r3, r4, r5, pc}
  40026e:	bf00      	nop
  400270:	0040166d 	.word	0x0040166d
  400274:	400e1000 	.word	0x400e1000
  400278:	00401419 	.word	0x00401419
  40027c:	4003c000 	.word	0x4003c000
  400280:	004013a5 	.word	0x004013a5
  400284:	004013b9 	.word	0x004013b9
  400288:	00401405 	.word	0x00401405
  40028c:	004013d5 	.word	0x004013d5
  400290:	004013ad 	.word	0x004013ad

00400294 <parse_comands>:
	}
}


void parse_comands (void)
{
  400294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400298:	b08e      	sub	sp, #56	; 0x38
	uint8_t *startOfData;
	uint8_t printBuffer [50];
	uint32_t charsPrinted, entryCounter;
	uint32_t a;
	
	if(udi_cdc_is_rx_ready())
  40029a:	4b7c      	ldr	r3, [pc, #496]	; (40048c <parse_comands+0x1f8>)
  40029c:	4798      	blx	r3
  40029e:	2800      	cmp	r0, #0
  4002a0:	f000 80f1 	beq.w	400486 <parse_comands+0x1f2>
	{
		temp = udi_cdc_getc();
  4002a4:	4b7a      	ldr	r3, [pc, #488]	; (400490 <parse_comands+0x1fc>)
  4002a6:	4798      	blx	r3
  4002a8:	b2c4      	uxtb	r4, r0
		udi_cdc_putc(temp);
  4002aa:	4620      	mov	r0, r4
  4002ac:	4b79      	ldr	r3, [pc, #484]	; (400494 <parse_comands+0x200>)
  4002ae:	4798      	blx	r3
		
		if(insertPointer < (HOLDING_BUFFER_SIZE - 2))
  4002b0:	4b79      	ldr	r3, [pc, #484]	; (400498 <parse_comands+0x204>)
  4002b2:	781b      	ldrb	r3, [r3, #0]
  4002b4:	2b11      	cmp	r3, #17
  4002b6:	d804      	bhi.n	4002c2 <parse_comands+0x2e>
		{
			holdingBuffer[insertPointer] = temp;
  4002b8:	4a78      	ldr	r2, [pc, #480]	; (40049c <parse_comands+0x208>)
  4002ba:	54d4      	strb	r4, [r2, r3]
			insertPointer++;
  4002bc:	3301      	adds	r3, #1
  4002be:	4a76      	ldr	r2, [pc, #472]	; (400498 <parse_comands+0x204>)
  4002c0:	7013      	strb	r3, [r2, #0]
		}	
		if(temp == '\r')
  4002c2:	2c0d      	cmp	r4, #13
  4002c4:	f040 80df 	bne.w	400486 <parse_comands+0x1f2>
		{
			udi_cdc_putc('\n');
  4002c8:	200a      	movs	r0, #10
  4002ca:	4c72      	ldr	r4, [pc, #456]	; (400494 <parse_comands+0x200>)
  4002cc:	47a0      	blx	r4
			udi_cdc_putc('\r');
  4002ce:	200d      	movs	r0, #13
  4002d0:	47a0      	blx	r4
			
			holdingBuffer[insertPointer] = 0;
  4002d2:	4872      	ldr	r0, [pc, #456]	; (40049c <parse_comands+0x208>)
  4002d4:	4b70      	ldr	r3, [pc, #448]	; (400498 <parse_comands+0x204>)
  4002d6:	781b      	ldrb	r3, [r3, #0]
  4002d8:	2200      	movs	r2, #0
  4002da:	54c2      	strb	r2, [r0, r3]
			startOfData = strpbrk(holdingBuffer, LIST_OF_KNOWN_COMANDS);
  4002dc:	4970      	ldr	r1, [pc, #448]	; (4004a0 <parse_comands+0x20c>)
  4002de:	4b71      	ldr	r3, [pc, #452]	; (4004a4 <parse_comands+0x210>)
  4002e0:	4798      	blx	r3
			//after this executes startOfData should point to first know character in string
			switch (*(startOfData))
  4002e2:	7804      	ldrb	r4, [r0, #0]
  4002e4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  4002e8:	2b13      	cmp	r3, #19
  4002ea:	f200 80c9 	bhi.w	400480 <parse_comands+0x1ec>
  4002ee:	e8df f013 	tbh	[pc, r3, lsl #1]
  4002f2:	0036      	.short	0x0036
  4002f4:	00c700c7 	.word	0x00c700c7
  4002f8:	009b00c7 	.word	0x009b00c7
  4002fc:	00c70036 	.word	0x00c70036
  400300:	00c700c7 	.word	0x00c700c7
  400304:	00c700c7 	.word	0x00c700c7
  400308:	00c700c7 	.word	0x00c700c7
  40030c:	00c700c7 	.word	0x00c700c7
  400310:	00c700c7 	.word	0x00c700c7
  400314:	00140036 	.word	0x00140036
  400318:	0025      	.short	0x0025
			{
				case COMAND_START_ACQ:
					daqSettings.startAcq = 1;
  40031a:	2201      	movs	r2, #1
  40031c:	4b62      	ldr	r3, [pc, #392]	; (4004a8 <parse_comands+0x214>)
  40031e:	751a      	strb	r2, [r3, #20]
					charsPrinted = sprintf(printBuffer, "Acquisition started\n\r");
  400320:	ac01      	add	r4, sp, #4
  400322:	4d62      	ldr	r5, [pc, #392]	; (4004ac <parse_comands+0x218>)
  400324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400328:	e895 0003 	ldmia.w	r5, {r0, r1}
  40032c:	f844 0b04 	str.w	r0, [r4], #4
  400330:	8021      	strh	r1, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  400332:	a801      	add	r0, sp, #4
  400334:	2115      	movs	r1, #21
  400336:	4b5e      	ldr	r3, [pc, #376]	; (4004b0 <parse_comands+0x21c>)
  400338:	4798      	blx	r3
					break;
  40033a:	e0a1      	b.n	400480 <parse_comands+0x1ec>
				
				case COMAND_STOP_ACQ:
					daqSettings.stopAcq = 1;
  40033c:	2201      	movs	r2, #1
  40033e:	4b5a      	ldr	r3, [pc, #360]	; (4004a8 <parse_comands+0x214>)
  400340:	755a      	strb	r2, [r3, #21]
					charsPrinted = sprintf(printBuffer, "Acquisition stoped\n\r");
  400342:	ac01      	add	r4, sp, #4
  400344:	4d5b      	ldr	r5, [pc, #364]	; (4004b4 <parse_comands+0x220>)
  400346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40034a:	e895 0003 	ldmia.w	r5, {r0, r1}
  40034e:	f844 0b04 	str.w	r0, [r4], #4
  400352:	7021      	strb	r1, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  400354:	a801      	add	r0, sp, #4
  400356:	2114      	movs	r1, #20
  400358:	4b55      	ldr	r3, [pc, #340]	; (4004b0 <parse_comands+0x21c>)
  40035a:	4798      	blx	r3
					break;
  40035c:	e090      	b.n	400480 <parse_comands+0x1ec>
					
				case COMAND_SET_SAMPLE_PERIOD:
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
  40035e:	4b56      	ldr	r3, [pc, #344]	; (4004b8 <parse_comands+0x224>)
  400360:	701c      	strb	r4, [r3, #0]
					//skip_blank_chars(startOfData);
					startOfData++;
  400362:	1c42      	adds	r2, r0, #1
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  400364:	7843      	ldrb	r3, [r0, #1]
  400366:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  40036a:	b2c9      	uxtb	r1, r1
  40036c:	2909      	cmp	r1, #9
  40036e:	d814      	bhi.n	40039a <parse_comands+0x106>
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  400370:	4952      	ldr	r1, [pc, #328]	; (4004bc <parse_comands+0x228>)
  400372:	428a      	cmp	r2, r1
  400374:	d813      	bhi.n	40039e <parse_comands+0x10a>
  400376:	1c4e      	adds	r6, r1, #1
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
  400378:	2100      	movs	r1, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
  40037a:	4d51      	ldr	r5, [pc, #324]	; (4004c0 <parse_comands+0x22c>)
  40037c:	e002      	b.n	400384 <parse_comands+0xf0>
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  40037e:	42b2      	cmp	r2, r6
  400380:	d00e      	beq.n	4003a0 <parse_comands+0x10c>
						tempBuffer[n++] = *startOfData++;
  400382:	4601      	mov	r1, r0
  400384:	1c48      	adds	r0, r1, #1
  400386:	b2c0      	uxtb	r0, r0
  400388:	546b      	strb	r3, [r5, r1]
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  40038a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  40038e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  400392:	b2c9      	uxtb	r1, r1
  400394:	2909      	cmp	r1, #9
  400396:	d9f2      	bls.n	40037e <parse_comands+0xea>
  400398:	e002      	b.n	4003a0 <parse_comands+0x10c>
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
  40039a:	2000      	movs	r0, #0
  40039c:	e000      	b.n	4003a0 <parse_comands+0x10c>
  40039e:	2000      	movs	r0, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
					}
					if(comandByte == COMAND_SET_SAMPLE_PERIOD)
  4003a0:	2c52      	cmp	r4, #82	; 0x52
  4003a2:	d113      	bne.n	4003cc <parse_comands+0x138>
					{
						if(*startOfData == '\r')
  4003a4:	2b0d      	cmp	r3, #13
  4003a6:	d16b      	bne.n	400480 <parse_comands+0x1ec>
						{
							tempBuffer[n] = 0;
  4003a8:	4b45      	ldr	r3, [pc, #276]	; (4004c0 <parse_comands+0x22c>)
  4003aa:	2200      	movs	r2, #0
  4003ac:	541a      	strb	r2, [r3, r0]
							daqSettings.timerBase = atoi(tempBuffer);
  4003ae:	4618      	mov	r0, r3
  4003b0:	4b44      	ldr	r3, [pc, #272]	; (4004c4 <parse_comands+0x230>)
  4003b2:	4798      	blx	r3
  4003b4:	4602      	mov	r2, r0
  4003b6:	4b3c      	ldr	r3, [pc, #240]	; (4004a8 <parse_comands+0x214>)
  4003b8:	6058      	str	r0, [r3, #4]
							charsPrinted = sprintf(printBuffer, "Sample period set to %u uS\n\r", daqSettings.timerBase);
  4003ba:	a801      	add	r0, sp, #4
  4003bc:	4942      	ldr	r1, [pc, #264]	; (4004c8 <parse_comands+0x234>)
  4003be:	4b43      	ldr	r3, [pc, #268]	; (4004cc <parse_comands+0x238>)
  4003c0:	4798      	blx	r3
  4003c2:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  4003c4:	a801      	add	r0, sp, #4
  4003c6:	4b3a      	ldr	r3, [pc, #232]	; (4004b0 <parse_comands+0x21c>)
  4003c8:	4798      	blx	r3
  4003ca:	e059      	b.n	400480 <parse_comands+0x1ec>
							//todo: limit sample rate period
							//todo: calcualte timeer base based on sample period
						}	
					}
					else if(comandByte == COMAND_SET_AVERAGE_COUNT)
  4003cc:	2c41      	cmp	r4, #65	; 0x41
  4003ce:	d114      	bne.n	4003fa <parse_comands+0x166>
					{
						if(*startOfData == '\r')
  4003d0:	2b0d      	cmp	r3, #13
  4003d2:	d155      	bne.n	400480 <parse_comands+0x1ec>
						{
							tempBuffer[n] = 0;
  4003d4:	4b3a      	ldr	r3, [pc, #232]	; (4004c0 <parse_comands+0x22c>)
  4003d6:	2200      	movs	r2, #0
  4003d8:	541a      	strb	r2, [r3, r0]
							daqSettings.samplesNbr = atoi(tempBuffer);
  4003da:	4618      	mov	r0, r3
  4003dc:	4b39      	ldr	r3, [pc, #228]	; (4004c4 <parse_comands+0x230>)
  4003de:	4798      	blx	r3
  4003e0:	4602      	mov	r2, r0
  4003e2:	4b31      	ldr	r3, [pc, #196]	; (4004a8 <parse_comands+0x214>)
  4003e4:	8218      	strh	r0, [r3, #16]
							charsPrinted = sprintf(printBuffer, "DAQ will atempt to take %u samples per channel\n\r", daqSettings.samplesNbr);
  4003e6:	a801      	add	r0, sp, #4
  4003e8:	4939      	ldr	r1, [pc, #228]	; (4004d0 <parse_comands+0x23c>)
  4003ea:	b292      	uxth	r2, r2
  4003ec:	4b37      	ldr	r3, [pc, #220]	; (4004cc <parse_comands+0x238>)
  4003ee:	4798      	blx	r3
  4003f0:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  4003f2:	a801      	add	r0, sp, #4
  4003f4:	4b2e      	ldr	r3, [pc, #184]	; (4004b0 <parse_comands+0x21c>)
  4003f6:	4798      	blx	r3
  4003f8:	e042      	b.n	400480 <parse_comands+0x1ec>
							//todo: limit samples per channel
						}
					}
					else if(comandByte == COMAND_SET_MEASURMENT_NBR_COUNT)
  4003fa:	2c46      	cmp	r4, #70	; 0x46
  4003fc:	d140      	bne.n	400480 <parse_comands+0x1ec>
					{
						if(*startOfData == '\r')
  4003fe:	2b0d      	cmp	r3, #13
  400400:	d13e      	bne.n	400480 <parse_comands+0x1ec>
						{
							tempBuffer[n] = 0;
  400402:	4b2f      	ldr	r3, [pc, #188]	; (4004c0 <parse_comands+0x22c>)
  400404:	2200      	movs	r2, #0
  400406:	541a      	strb	r2, [r3, r0]
							daqSettings.cycles = atoi(tempBuffer);
  400408:	4618      	mov	r0, r3
  40040a:	4b2e      	ldr	r3, [pc, #184]	; (4004c4 <parse_comands+0x230>)
  40040c:	4798      	blx	r3
  40040e:	4602      	mov	r2, r0
  400410:	4b25      	ldr	r3, [pc, #148]	; (4004a8 <parse_comands+0x214>)
  400412:	8258      	strh	r0, [r3, #18]
							charsPrinted = sprintf(printBuffer, "DAQ will sample all enebled channels %u times\n\r", daqSettings.cycles);
  400414:	a801      	add	r0, sp, #4
  400416:	492f      	ldr	r1, [pc, #188]	; (4004d4 <parse_comands+0x240>)
  400418:	b292      	uxth	r2, r2
  40041a:	4b2c      	ldr	r3, [pc, #176]	; (4004cc <parse_comands+0x238>)
  40041c:	4798      	blx	r3
  40041e:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  400420:	a801      	add	r0, sp, #4
  400422:	4b23      	ldr	r3, [pc, #140]	; (4004b0 <parse_comands+0x21c>)
  400424:	4798      	blx	r3
  400426:	e02b      	b.n	400480 <parse_comands+0x1ec>
					}
					break;
				
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
  400428:	1c43      	adds	r3, r0, #1
					entryCounter = 0;
  40042a:	2600      	movs	r6, #0
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  40042c:	4d24      	ldr	r5, [pc, #144]	; (4004c0 <parse_comands+0x22c>)
  40042e:	46a8      	mov	r8, r5
							if(*startOfData == '\r') break;
						}
						tempBuffer[n]  = 0;
						a = atoi(tempBuffer);
  400430:	4f24      	ldr	r7, [pc, #144]	; (4004c4 <parse_comands+0x230>)
  400432:	e008      	b.n	400446 <parse_comands+0x1b2>
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  400434:	1c50      	adds	r0, r2, #1
  400436:	b2c0      	uxtb	r0, r0
  400438:	461c      	mov	r4, r3
  40043a:	54a9      	strb	r1, [r5, r2]
							if(*startOfData == '\r') break;
  40043c:	781a      	ldrb	r2, [r3, #0]
  40043e:	2a0d      	cmp	r2, #13
  400440:	d008      	beq.n	400454 <parse_comands+0x1c0>
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  400442:	4602      	mov	r2, r0
  400444:	e000      	b.n	400448 <parse_comands+0x1b4>
					break;
				
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
					entryCounter = 0;
  400446:	2200      	movs	r2, #0
  400448:	461c      	mov	r4, r3
					n = 0;
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
  40044a:	f813 1b01 	ldrb.w	r1, [r3], #1
  40044e:	292c      	cmp	r1, #44	; 0x2c
  400450:	d1f0      	bne.n	400434 <parse_comands+0x1a0>
  400452:	e000      	b.n	400456 <parse_comands+0x1c2>
						{
							tempBuffer[n++] = *startOfData++;
  400454:	4602      	mov	r2, r0
							if(*startOfData == '\r') break;
						}
						tempBuffer[n]  = 0;
  400456:	2300      	movs	r3, #0
  400458:	54ab      	strb	r3, [r5, r2]
						a = atoi(tempBuffer);
  40045a:	4640      	mov	r0, r8
  40045c:	47b8      	blx	r7
						if(a)
  40045e:	b130      	cbz	r0, 40046e <parse_comands+0x1da>
  400460:	4a11      	ldr	r2, [pc, #68]	; (4004a8 <parse_comands+0x214>)
  400462:	4432      	add	r2, r6
						{
							daqSettings.sequence[entryCounter] = a;
  400464:	7210      	strb	r0, [r2, #8]
						else
						{
							daqSettings.sequence[entryCounter] = 0;
							break;
						}
						if(*startOfData == '\r') break;
  400466:	7823      	ldrb	r3, [r4, #0]
  400468:	2b0d      	cmp	r3, #13
  40046a:	d105      	bne.n	400478 <parse_comands+0x1e4>
  40046c:	e008      	b.n	400480 <parse_comands+0x1ec>
						{
							daqSettings.sequence[entryCounter] = a;
						}
						else
						{
							daqSettings.sequence[entryCounter] = 0;
  40046e:	4b0e      	ldr	r3, [pc, #56]	; (4004a8 <parse_comands+0x214>)
  400470:	441e      	add	r6, r3
  400472:	2300      	movs	r3, #0
  400474:	7233      	strb	r3, [r6, #8]
							break;
  400476:	e003      	b.n	400480 <parse_comands+0x1ec>
						}
						if(*startOfData == '\r') break;
						entryCounter++;
  400478:	3601      	adds	r6, #1
						startOfData++;
  40047a:	1c63      	adds	r3, r4, #1
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
					entryCounter = 0;
					n = 0;
					while(entryCounter < 8)
  40047c:	2e08      	cmp	r6, #8
  40047e:	d1e2      	bne.n	400446 <parse_comands+0x1b2>
						startOfData++;
					}
					
			}
			
			insertPointer = 0;
  400480:	2200      	movs	r2, #0
  400482:	4b05      	ldr	r3, [pc, #20]	; (400498 <parse_comands+0x204>)
  400484:	701a      	strb	r2, [r3, #0]
		}
	
	}
}
  400486:	b00e      	add	sp, #56	; 0x38
  400488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40048c:	00400a8d 	.word	0x00400a8d
  400490:	00400b49 	.word	0x00400b49
  400494:	00400c7d 	.word	0x00400c7d
  400498:	20000995 	.word	0x20000995
  40049c:	20000998 	.word	0x20000998
  4004a0:	00407ae4 	.word	0x00407ae4
  4004a4:	00403281 	.word	0x00403281
  4004a8:	20000c18 	.word	0x20000c18
  4004ac:	00407aec 	.word	0x00407aec
  4004b0:	00400d35 	.word	0x00400d35
  4004b4:	00407b04 	.word	0x00407b04
  4004b8:	20000994 	.word	0x20000994
  4004bc:	200009ab 	.word	0x200009ab
  4004c0:	200009ac 	.word	0x200009ac
  4004c4:	00403169 	.word	0x00403169
  4004c8:	00407b1c 	.word	0x00407b1c
  4004cc:	00403229 	.word	0x00403229
  4004d0:	00407b3c 	.word	0x00407b3c
  4004d4:	00407b70 	.word	0x00407b70

004004d8 <get_current_DAQ_settings>:



daq_settings_t * get_current_DAQ_settings (void)
{
		daqSettings.sequence[0]= 1;
  4004d8:	4803      	ldr	r0, [pc, #12]	; (4004e8 <get_current_DAQ_settings+0x10>)
  4004da:	2301      	movs	r3, #1
  4004dc:	7203      	strb	r3, [r0, #8]
		daqSettings.sequence[1]= 2;
  4004de:	2302      	movs	r3, #2
  4004e0:	7243      	strb	r3, [r0, #9]
		daqSettings.sequence[2]= 3;
  4004e2:	2303      	movs	r3, #3
  4004e4:	7283      	strb	r3, [r0, #10]

	return (&daqSettings);
}
  4004e6:	4770      	bx	lr
  4004e8:	20000c18 	.word	0x20000c18

004004ec <board_init>:
#include <conf_board.h>
#include "wdt.h"
#include "DAC.h"

void board_init(void)
{
  4004ec:	b570      	push	{r4, r5, r6, lr}
  4004ee:	b082      	sub	sp, #8
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	sysclk_init();
  4004f0:	4b0e      	ldr	r3, [pc, #56]	; (40052c <board_init+0x40>)
  4004f2:	4798      	blx	r3
	wdt_disable(WDT);
  4004f4:	480e      	ldr	r0, [pc, #56]	; (400530 <board_init+0x44>)
  4004f6:	4b0f      	ldr	r3, [pc, #60]	; (400534 <board_init+0x48>)
  4004f8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
  4004fa:	200b      	movs	r0, #11
  4004fc:	4b0e      	ldr	r3, [pc, #56]	; (400538 <board_init+0x4c>)
  4004fe:	4798      	blx	r3
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
  400500:	4e0e      	ldr	r6, [pc, #56]	; (40053c <board_init+0x50>)
  400502:	2400      	movs	r4, #0
  400504:	9400      	str	r4, [sp, #0]
  400506:	4630      	mov	r0, r6
  400508:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40050c:	4622      	mov	r2, r4
  40050e:	4623      	mov	r3, r4
  400510:	4d0b      	ldr	r5, [pc, #44]	; (400540 <board_init+0x54>)
  400512:	47a8      	blx	r5
	pio_set_output(PIOA, PIO_PA18, LOW, DISABLE, DISABLE);
  400514:	9400      	str	r4, [sp, #0]
  400516:	4630      	mov	r0, r6
  400518:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  40051c:	4622      	mov	r2, r4
  40051e:	4623      	mov	r3, r4
  400520:	47a8      	blx	r5
	dac_init();
  400522:	4b08      	ldr	r3, [pc, #32]	; (400544 <board_init+0x58>)
  400524:	4798      	blx	r3
	
}
  400526:	b002      	add	sp, #8
  400528:	bd70      	pop	{r4, r5, r6, pc}
  40052a:	bf00      	nop
  40052c:	00400599 	.word	0x00400599
  400530:	400e1450 	.word	0x400e1450
  400534:	00402eed 	.word	0x00402eed
  400538:	0040166d 	.word	0x0040166d
  40053c:	400e0e00 	.word	0x400e0e00
  400540:	004014a9 	.word	0x004014a9
  400544:	00400215 	.word	0x00400215

00400548 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  400548:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40054a:	2000      	movs	r0, #0
  40054c:	213e      	movs	r1, #62	; 0x3e
  40054e:	4b0a      	ldr	r3, [pc, #40]	; (400578 <sysclk_enable_usb+0x30>)
  400550:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400552:	4c0a      	ldr	r4, [pc, #40]	; (40057c <sysclk_enable_usb+0x34>)
  400554:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400556:	2800      	cmp	r0, #0
  400558:	d0fc      	beq.n	400554 <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  40055a:	4b09      	ldr	r3, [pc, #36]	; (400580 <sysclk_enable_usb+0x38>)
  40055c:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40055e:	4a09      	ldr	r2, [pc, #36]	; (400584 <sysclk_enable_usb+0x3c>)
  400560:	4b09      	ldr	r3, [pc, #36]	; (400588 <sysclk_enable_usb+0x40>)
  400562:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  400564:	4c09      	ldr	r4, [pc, #36]	; (40058c <sysclk_enable_usb+0x44>)
  400566:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400568:	2800      	cmp	r0, #0
  40056a:	d0fc      	beq.n	400566 <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  40056c:	2001      	movs	r0, #1
  40056e:	4b08      	ldr	r3, [pc, #32]	; (400590 <sysclk_enable_usb+0x48>)
  400570:	4798      	blx	r3
		pmc_enable_udpck();
  400572:	4b08      	ldr	r3, [pc, #32]	; (400594 <sysclk_enable_usb+0x4c>)
  400574:	4798      	blx	r3
  400576:	bd10      	pop	{r4, pc}
  400578:	004015cd 	.word	0x004015cd
  40057c:	00401621 	.word	0x00401621
  400580:	00401651 	.word	0x00401651
  400584:	000f3f02 	.word	0x000f3f02
  400588:	400e0400 	.word	0x400e0400
  40058c:	0040165d 	.word	0x0040165d
  400590:	0040171d 	.word	0x0040171d
  400594:	00401731 	.word	0x00401731

00400598 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400598:	b510      	push	{r4, lr}
	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40059a:	480d      	ldr	r0, [pc, #52]	; (4005d0 <sysclk_init+0x38>)
  40059c:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <sysclk_init+0x3c>)
  40059e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4005a0:	2000      	movs	r0, #0
  4005a2:	213e      	movs	r1, #62	; 0x3e
  4005a4:	4b0c      	ldr	r3, [pc, #48]	; (4005d8 <sysclk_init+0x40>)
  4005a6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4005a8:	4c0c      	ldr	r4, [pc, #48]	; (4005dc <sysclk_init+0x44>)
  4005aa:	47a0      	blx	r4
  4005ac:	2800      	cmp	r0, #0
  4005ae:	d0fc      	beq.n	4005aa <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4005b0:	4b0b      	ldr	r3, [pc, #44]	; (4005e0 <sysclk_init+0x48>)
  4005b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4005b4:	4a0b      	ldr	r2, [pc, #44]	; (4005e4 <sysclk_init+0x4c>)
  4005b6:	4b0c      	ldr	r3, [pc, #48]	; (4005e8 <sysclk_init+0x50>)
  4005b8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4005ba:	4c0c      	ldr	r4, [pc, #48]	; (4005ec <sysclk_init+0x54>)
  4005bc:	47a0      	blx	r4
  4005be:	2800      	cmp	r0, #0
  4005c0:	d0fc      	beq.n	4005bc <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4005c2:	2010      	movs	r0, #16
  4005c4:	4b0a      	ldr	r3, [pc, #40]	; (4005f0 <sysclk_init+0x58>)
  4005c6:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4005c8:	4b0a      	ldr	r3, [pc, #40]	; (4005f4 <sysclk_init+0x5c>)
  4005ca:	4798      	blx	r3
  4005cc:	bd10      	pop	{r4, pc}
  4005ce:	bf00      	nop
  4005d0:	03d09000 	.word	0x03d09000
  4005d4:	004030bd 	.word	0x004030bd
  4005d8:	004015cd 	.word	0x004015cd
  4005dc:	00401621 	.word	0x00401621
  4005e0:	00401631 	.word	0x00401631
  4005e4:	201f3f03 	.word	0x201f3f03
  4005e8:	400e0400 	.word	0x400e0400
  4005ec:	00401641 	.word	0x00401641
  4005f0:	00401569 	.word	0x00401569
  4005f4:	00402fa9 	.word	0x00402fa9

004005f8 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  4005f8:	490e      	ldr	r1, [pc, #56]	; (400634 <udi_cdc_comm_enable+0x3c>)
  4005fa:	2300      	movs	r3, #0
  4005fc:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  4005fe:	4a0e      	ldr	r2, [pc, #56]	; (400638 <udi_cdc_comm_enable+0x40>)
  400600:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400602:	4a0e      	ldr	r2, [pc, #56]	; (40063c <udi_cdc_comm_enable+0x44>)
  400604:	20a1      	movs	r0, #161	; 0xa1
  400606:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400608:	2020      	movs	r0, #32
  40060a:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  40060c:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  40060e:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400610:	2002      	movs	r0, #2
  400612:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400614:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400616:	4a0a      	ldr	r2, [pc, #40]	; (400640 <udi_cdc_comm_enable+0x48>)
  400618:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  40061c:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  40061e:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400620:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400622:	2308      	movs	r3, #8
  400624:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400626:	780b      	ldrb	r3, [r1, #0]
  400628:	3301      	adds	r3, #1
  40062a:	b2db      	uxtb	r3, r3
  40062c:	700b      	strb	r3, [r1, #0]
	return true;
}
  40062e:	2001      	movs	r0, #1
  400630:	4770      	bx	lr
  400632:	bf00      	nop
  400634:	20000a50 	.word	0x20000a50
  400638:	20000afc 	.word	0x20000afc
  40063c:	20000a68 	.word	0x20000a68
  400640:	200009b8 	.word	0x200009b8

00400644 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400644:	4b02      	ldr	r3, [pc, #8]	; (400650 <udi_cdc_comm_disable+0xc>)
  400646:	781a      	ldrb	r2, [r3, #0]
  400648:	3a01      	subs	r2, #1
  40064a:	b2d2      	uxtb	r2, r2
  40064c:	701a      	strb	r2, [r3, #0]
  40064e:	4770      	bx	lr
  400650:	20000a50 	.word	0x20000a50

00400654 <udi_cdc_data_disable>:
{
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400654:	4b04      	ldr	r3, [pc, #16]	; (400668 <udi_cdc_data_disable+0x14>)
  400656:	781a      	ldrb	r2, [r3, #0]
  400658:	3a01      	subs	r2, #1
  40065a:	b2d2      	uxtb	r2, r2
  40065c:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  40065e:	781b      	ldrb	r3, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  400660:	2200      	movs	r2, #0
  400662:	4b02      	ldr	r3, [pc, #8]	; (40066c <udi_cdc_data_disable+0x18>)
  400664:	701a      	strb	r2, [r3, #0]
  400666:	4770      	bx	lr
  400668:	200009c0 	.word	0x200009c0
  40066c:	20000a5c 	.word	0x20000a5c

00400670 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  400670:	2000      	movs	r0, #0
  400672:	4770      	bx	lr

00400674 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  400674:	2000      	movs	r0, #0
  400676:	4770      	bx	lr

00400678 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
  400678:	4b1d      	ldr	r3, [pc, #116]	; (4006f0 <udi_cdc_comm_setup+0x78>)
  40067a:	781b      	ldrb	r3, [r3, #0]
  40067c:	f013 0f80 	tst.w	r3, #128	; 0x80
  400680:	d012      	beq.n	4006a8 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400682:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400686:	2b20      	cmp	r3, #32
  400688:	d128      	bne.n	4006dc <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  40068a:	4b19      	ldr	r3, [pc, #100]	; (4006f0 <udi_cdc_comm_setup+0x78>)
  40068c:	785b      	ldrb	r3, [r3, #1]
  40068e:	2b21      	cmp	r3, #33	; 0x21
  400690:	d126      	bne.n	4006e0 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  400692:	4b17      	ldr	r3, [pc, #92]	; (4006f0 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400694:	88db      	ldrh	r3, [r3, #6]
  400696:	2b07      	cmp	r3, #7
  400698:	d124      	bne.n	4006e4 <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  40069a:	4b15      	ldr	r3, [pc, #84]	; (4006f0 <udi_cdc_comm_setup+0x78>)
  40069c:	4a15      	ldr	r2, [pc, #84]	; (4006f4 <udi_cdc_comm_setup+0x7c>)
  40069e:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4006a0:	2207      	movs	r2, #7
  4006a2:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4006a4:	2001      	movs	r0, #1
  4006a6:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  4006a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
  4006ac:	2b20      	cmp	r3, #32
  4006ae:	d11b      	bne.n	4006e8 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  4006b0:	4b0f      	ldr	r3, [pc, #60]	; (4006f0 <udi_cdc_comm_setup+0x78>)
  4006b2:	7858      	ldrb	r0, [r3, #1]
  4006b4:	2820      	cmp	r0, #32
  4006b6:	d004      	beq.n	4006c2 <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4006b8:	2822      	cmp	r0, #34	; 0x22
  4006ba:	bf14      	ite	ne
  4006bc:	2000      	movne	r0, #0
  4006be:	2001      	moveq	r0, #1
  4006c0:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  4006c2:	4b0b      	ldr	r3, [pc, #44]	; (4006f0 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  4006c4:	88db      	ldrh	r3, [r3, #6]
  4006c6:	2b07      	cmp	r3, #7
  4006c8:	d110      	bne.n	4006ec <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
  4006ca:	4b09      	ldr	r3, [pc, #36]	; (4006f0 <udi_cdc_comm_setup+0x78>)
  4006cc:	4a0a      	ldr	r2, [pc, #40]	; (4006f8 <udi_cdc_comm_setup+0x80>)
  4006ce:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  4006d0:	4a08      	ldr	r2, [pc, #32]	; (4006f4 <udi_cdc_comm_setup+0x7c>)
  4006d2:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4006d4:	2207      	movs	r2, #7
  4006d6:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4006d8:	2001      	movs	r0, #1
  4006da:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4006dc:	2000      	movs	r0, #0
  4006de:	4770      	bx	lr
  4006e0:	2000      	movs	r0, #0
  4006e2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4006e4:	2000      	movs	r0, #0
  4006e6:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4006e8:	2000      	movs	r0, #0
  4006ea:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4006ec:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
  4006ee:	4770      	bx	lr
  4006f0:	20000c3c 	.word	0x20000c3c
  4006f4:	200009b8 	.word	0x200009b8
  4006f8:	004006fd 	.word	0x004006fd

004006fc <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  4006fc:	4770      	bx	lr
  4006fe:	bf00      	nop

00400700 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
  400700:	b530      	push	{r4, r5, lr}
  400702:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400704:	4b42      	ldr	r3, [pc, #264]	; (400810 <udi_cdc_tx_send+0x110>)
  400706:	781b      	ldrb	r3, [r3, #0]
  400708:	f013 0fff 	tst.w	r3, #255	; 0xff
  40070c:	d17e      	bne.n	40080c <udi_cdc_tx_send+0x10c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  40070e:	4b41      	ldr	r3, [pc, #260]	; (400814 <udi_cdc_tx_send+0x114>)
  400710:	4798      	blx	r3
  400712:	b130      	cbz	r0, 400722 <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400714:	4b40      	ldr	r3, [pc, #256]	; (400818 <udi_cdc_tx_send+0x118>)
  400716:	881c      	ldrh	r4, [r3, #0]
  400718:	4b40      	ldr	r3, [pc, #256]	; (40081c <udi_cdc_tx_send+0x11c>)
  40071a:	4798      	blx	r3
  40071c:	4284      	cmp	r4, r0
  40071e:	d106      	bne.n	40072e <udi_cdc_tx_send+0x2e>
  400720:	e074      	b.n	40080c <udi_cdc_tx_send+0x10c>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400722:	4b3d      	ldr	r3, [pc, #244]	; (400818 <udi_cdc_tx_send+0x118>)
  400724:	881c      	ldrh	r4, [r3, #0]
  400726:	4b3e      	ldr	r3, [pc, #248]	; (400820 <udi_cdc_tx_send+0x120>)
  400728:	4798      	blx	r3
  40072a:	4284      	cmp	r4, r0
  40072c:	d06e      	beq.n	40080c <udi_cdc_tx_send+0x10c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40072e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400732:	f1d3 0501 	rsbs	r5, r3, #1
  400736:	bf38      	it	cc
  400738:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40073a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40073c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400740:	2200      	movs	r2, #0
  400742:	4b38      	ldr	r3, [pc, #224]	; (400824 <udi_cdc_tx_send+0x124>)
  400744:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400746:	4b38      	ldr	r3, [pc, #224]	; (400828 <udi_cdc_tx_send+0x128>)
  400748:	781c      	ldrb	r4, [r3, #0]
  40074a:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  40074c:	4b37      	ldr	r3, [pc, #220]	; (40082c <udi_cdc_tx_send+0x12c>)
  40074e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400752:	b9db      	cbnz	r3, 40078c <udi_cdc_tx_send+0x8c>
		sof_zlp_counter++;
  400754:	4b36      	ldr	r3, [pc, #216]	; (400830 <udi_cdc_tx_send+0x130>)
  400756:	881a      	ldrh	r2, [r3, #0]
  400758:	3201      	adds	r2, #1
  40075a:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  40075c:	4b2d      	ldr	r3, [pc, #180]	; (400814 <udi_cdc_tx_send+0x114>)
  40075e:	4798      	blx	r3
  400760:	b918      	cbnz	r0, 40076a <udi_cdc_tx_send+0x6a>
  400762:	4b33      	ldr	r3, [pc, #204]	; (400830 <udi_cdc_tx_send+0x130>)
  400764:	881b      	ldrh	r3, [r3, #0]
  400766:	2b63      	cmp	r3, #99	; 0x63
  400768:	d907      	bls.n	40077a <udi_cdc_tx_send+0x7a>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  40076a:	4b2a      	ldr	r3, [pc, #168]	; (400814 <udi_cdc_tx_send+0x114>)
  40076c:	4798      	blx	r3
  40076e:	b168      	cbz	r0, 40078c <udi_cdc_tx_send+0x8c>
  400770:	4b2f      	ldr	r3, [pc, #188]	; (400830 <udi_cdc_tx_send+0x130>)
  400772:	881b      	ldrh	r3, [r3, #0]
  400774:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400778:	d208      	bcs.n	40078c <udi_cdc_tx_send+0x8c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40077a:	2d00      	cmp	r5, #0
  40077c:	d046      	beq.n	40080c <udi_cdc_tx_send+0x10c>
		cpu_irq_enable();
  40077e:	2201      	movs	r2, #1
  400780:	4b28      	ldr	r3, [pc, #160]	; (400824 <udi_cdc_tx_send+0x124>)
  400782:	701a      	strb	r2, [r3, #0]
  400784:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400788:	b662      	cpsie	i
  40078a:	e03f      	b.n	40080c <udi_cdc_tx_send+0x10c>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  40078c:	2200      	movs	r2, #0
  40078e:	4b28      	ldr	r3, [pc, #160]	; (400830 <udi_cdc_tx_send+0x130>)
  400790:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400792:	4b28      	ldr	r3, [pc, #160]	; (400834 <udi_cdc_tx_send+0x134>)
  400794:	781b      	ldrb	r3, [r3, #0]
  400796:	f013 0fff 	tst.w	r3, #255	; 0xff
  40079a:	d106      	bne.n	4007aa <udi_cdc_tx_send+0xaa>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40079c:	4294      	cmp	r4, r2
  40079e:	bf14      	ite	ne
  4007a0:	2200      	movne	r2, #0
  4007a2:	2201      	moveq	r2, #1
  4007a4:	4b20      	ldr	r3, [pc, #128]	; (400828 <udi_cdc_tx_send+0x128>)
  4007a6:	701a      	strb	r2, [r3, #0]
  4007a8:	e003      	b.n	4007b2 <udi_cdc_tx_send+0xb2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  4007aa:	f1d4 0401 	rsbs	r4, r4, #1
  4007ae:	bf38      	it	cc
  4007b0:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  4007b2:	2201      	movs	r2, #1
  4007b4:	4b16      	ldr	r3, [pc, #88]	; (400810 <udi_cdc_tx_send+0x110>)
  4007b6:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4007b8:	b125      	cbz	r5, 4007c4 <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
  4007ba:	4b1a      	ldr	r3, [pc, #104]	; (400824 <udi_cdc_tx_send+0x124>)
  4007bc:	701a      	strb	r2, [r3, #0]
  4007be:	f3bf 8f5f 	dmb	sy
  4007c2:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4007c4:	4625      	mov	r5, r4
  4007c6:	4b19      	ldr	r3, [pc, #100]	; (40082c <udi_cdc_tx_send+0x12c>)
  4007c8:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
  4007cc:	3c40      	subs	r4, #64	; 0x40
  4007ce:	bf18      	it	ne
  4007d0:	2401      	movne	r4, #1
	if (b_short_packet) {
  4007d2:	b164      	cbz	r4, 4007ee <udi_cdc_tx_send+0xee>
		if (udd_is_high_speed()) {
  4007d4:	4b0f      	ldr	r3, [pc, #60]	; (400814 <udi_cdc_tx_send+0x114>)
  4007d6:	4798      	blx	r3
  4007d8:	b120      	cbz	r0, 4007e4 <udi_cdc_tx_send+0xe4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4007da:	4b10      	ldr	r3, [pc, #64]	; (40081c <udi_cdc_tx_send+0x11c>)
  4007dc:	4798      	blx	r3
  4007de:	4b0e      	ldr	r3, [pc, #56]	; (400818 <udi_cdc_tx_send+0x118>)
  4007e0:	8018      	strh	r0, [r3, #0]
  4007e2:	e007      	b.n	4007f4 <udi_cdc_tx_send+0xf4>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  4007e4:	4b0e      	ldr	r3, [pc, #56]	; (400820 <udi_cdc_tx_send+0x120>)
  4007e6:	4798      	blx	r3
  4007e8:	4b0b      	ldr	r3, [pc, #44]	; (400818 <udi_cdc_tx_send+0x118>)
  4007ea:	8018      	strh	r0, [r3, #0]
  4007ec:	e002      	b.n	4007f4 <udi_cdc_tx_send+0xf4>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  4007ee:	2200      	movs	r2, #0
  4007f0:	4b09      	ldr	r3, [pc, #36]	; (400818 <udi_cdc_tx_send+0x118>)
  4007f2:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  4007f4:	4b0d      	ldr	r3, [pc, #52]	; (40082c <udi_cdc_tx_send+0x12c>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  4007f6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  4007fa:	4a0f      	ldr	r2, [pc, #60]	; (400838 <udi_cdc_tx_send+0x138>)
  4007fc:	9200      	str	r2, [sp, #0]
  4007fe:	2081      	movs	r0, #129	; 0x81
  400800:	4621      	mov	r1, r4
  400802:	4a0e      	ldr	r2, [pc, #56]	; (40083c <udi_cdc_tx_send+0x13c>)
  400804:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  400808:	4c0d      	ldr	r4, [pc, #52]	; (400840 <udi_cdc_tx_send+0x140>)
  40080a:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  40080c:	b003      	add	sp, #12
  40080e:	bd30      	pop	{r4, r5, pc}
  400810:	20000a64 	.word	0x20000a64
  400814:	00402899 	.word	0x00402899
  400818:	20000a58 	.word	0x20000a58
  40081c:	00402901 	.word	0x00402901
  400820:	004028f1 	.word	0x004028f1
  400824:	200000b0 	.word	0x200000b0
  400828:	200009c4 	.word	0x200009c4
  40082c:	200009c8 	.word	0x200009c8
  400830:	20000a5e 	.word	0x20000a5e
  400834:	20000af8 	.word	0x20000af8
  400838:	00400845 	.word	0x00400845
  40083c:	200009cc 	.word	0x200009cc
  400840:	00402c51 	.word	0x00402c51

00400844 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400844:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400846:	b978      	cbnz	r0, 400868 <udi_cdc_data_sent+0x24>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400848:	4b08      	ldr	r3, [pc, #32]	; (40086c <udi_cdc_data_sent+0x28>)
  40084a:	781b      	ldrb	r3, [r3, #0]
  40084c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400850:	bf14      	ite	ne
  400852:	2200      	movne	r2, #0
  400854:	2201      	moveq	r2, #1
  400856:	4b06      	ldr	r3, [pc, #24]	; (400870 <udi_cdc_data_sent+0x2c>)
  400858:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  40085c:	4b05      	ldr	r3, [pc, #20]	; (400874 <udi_cdc_data_sent+0x30>)
  40085e:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400860:	4b05      	ldr	r3, [pc, #20]	; (400878 <udi_cdc_data_sent+0x34>)
  400862:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  400864:	4b05      	ldr	r3, [pc, #20]	; (40087c <udi_cdc_data_sent+0x38>)
  400866:	4798      	blx	r3
  400868:	bd08      	pop	{r3, pc}
  40086a:	bf00      	nop
  40086c:	200009c4 	.word	0x200009c4
  400870:	200009c8 	.word	0x200009c8
  400874:	20000af8 	.word	0x20000af8
  400878:	20000a64 	.word	0x20000a64
  40087c:	00400701 	.word	0x00400701

00400880 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
  400880:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  400882:	2000      	movs	r0, #0
  400884:	4b01      	ldr	r3, [pc, #4]	; (40088c <udi_cdc_data_sof_notify+0xc>)
  400886:	4798      	blx	r3
  400888:	bd08      	pop	{r3, pc}
  40088a:	bf00      	nop
  40088c:	00400701 	.word	0x00400701

00400890 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400890:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400894:	b672      	cpsid	i
  400896:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40089a:	2100      	movs	r1, #0
  40089c:	4a09      	ldr	r2, [pc, #36]	; (4008c4 <udi_cdc_multi_get_nb_received_data+0x34>)
  40089e:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  4008a0:	4a09      	ldr	r2, [pc, #36]	; (4008c8 <udi_cdc_multi_get_nb_received_data+0x38>)
  4008a2:	8810      	ldrh	r0, [r2, #0]
  4008a4:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  4008a6:	4a09      	ldr	r2, [pc, #36]	; (4008cc <udi_cdc_multi_get_nb_received_data+0x3c>)
  4008a8:	7811      	ldrb	r1, [r2, #0]
  4008aa:	4a09      	ldr	r2, [pc, #36]	; (4008d0 <udi_cdc_multi_get_nb_received_data+0x40>)
  4008ac:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  4008b0:	1a10      	subs	r0, r2, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008b2:	b92b      	cbnz	r3, 4008c0 <udi_cdc_multi_get_nb_received_data+0x30>
		cpu_irq_enable();
  4008b4:	2201      	movs	r2, #1
  4008b6:	4b03      	ldr	r3, [pc, #12]	; (4008c4 <udi_cdc_multi_get_nb_received_data+0x34>)
  4008b8:	701a      	strb	r2, [r3, #0]
  4008ba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4008be:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  4008c0:	4770      	bx	lr
  4008c2:	bf00      	nop
  4008c4:	200000b0 	.word	0x200000b0
  4008c8:	20000a54 	.word	0x20000a54
  4008cc:	20000a60 	.word	0x20000a60
  4008d0:	20000a4c 	.word	0x20000a4c

004008d4 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  4008d4:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  4008d6:	4b03      	ldr	r3, [pc, #12]	; (4008e4 <udi_cdc_multi_is_rx_ready+0x10>)
  4008d8:	4798      	blx	r3
}
  4008da:	3000      	adds	r0, #0
  4008dc:	bf18      	it	ne
  4008de:	2001      	movne	r0, #1
  4008e0:	bd08      	pop	{r3, pc}
  4008e2:	bf00      	nop
  4008e4:	00400891 	.word	0x00400891

004008e8 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  4008e8:	b510      	push	{r4, lr}
  4008ea:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4008ec:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  4008f0:	f1d3 0301 	rsbs	r3, r3, #1
  4008f4:	bf38      	it	cc
  4008f6:	2300      	movcc	r3, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4008f8:	b672      	cpsid	i
  4008fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008fe:	2100      	movs	r1, #0
  400900:	4a1e      	ldr	r2, [pc, #120]	; (40097c <udi_cdc_rx_start+0x94>)
  400902:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400904:	4a1e      	ldr	r2, [pc, #120]	; (400980 <udi_cdc_rx_start+0x98>)
  400906:	7814      	ldrb	r4, [r2, #0]
  400908:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
  40090a:	4a1e      	ldr	r2, [pc, #120]	; (400984 <udi_cdc_rx_start+0x9c>)
  40090c:	7812      	ldrb	r2, [r2, #0]
  40090e:	f012 0fff 	tst.w	r2, #255	; 0xff
  400912:	d107      	bne.n	400924 <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400914:	4a1c      	ldr	r2, [pc, #112]	; (400988 <udi_cdc_rx_start+0xa0>)
  400916:	8812      	ldrh	r2, [r2, #0]
  400918:	b292      	uxth	r2, r2
  40091a:	491c      	ldr	r1, [pc, #112]	; (40098c <udi_cdc_rx_start+0xa4>)
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  40091c:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
  400920:	4291      	cmp	r1, r2
  400922:	d908      	bls.n	400936 <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400924:	b33b      	cbz	r3, 400976 <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400926:	2201      	movs	r2, #1
  400928:	4b14      	ldr	r3, [pc, #80]	; (40097c <udi_cdc_rx_start+0x94>)
  40092a:	701a      	strb	r2, [r3, #0]
  40092c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400930:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400932:	2000      	movs	r0, #0
  400934:	e020      	b.n	400978 <udi_cdc_rx_start+0x90>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  400936:	2100      	movs	r1, #0
  400938:	4a13      	ldr	r2, [pc, #76]	; (400988 <udi_cdc_rx_start+0xa0>)
  40093a:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  40093c:	428c      	cmp	r4, r1
  40093e:	bf14      	ite	ne
  400940:	2100      	movne	r1, #0
  400942:	2101      	moveq	r1, #1
  400944:	4a0e      	ldr	r2, [pc, #56]	; (400980 <udi_cdc_rx_start+0x98>)
  400946:	7011      	strb	r1, [r2, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  400948:	2101      	movs	r1, #1
  40094a:	4a0e      	ldr	r2, [pc, #56]	; (400984 <udi_cdc_rx_start+0x9c>)
  40094c:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40094e:	b123      	cbz	r3, 40095a <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  400950:	4b0a      	ldr	r3, [pc, #40]	; (40097c <udi_cdc_rx_start+0x94>)
  400952:	7019      	strb	r1, [r3, #0]
  400954:	f3bf 8f5f 	dmb	sy
  400958:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
  40095a:	2000      	movs	r0, #0
  40095c:	4b0c      	ldr	r3, [pc, #48]	; (400990 <udi_cdc_rx_start+0xa8>)
  40095e:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  400960:	4b0c      	ldr	r3, [pc, #48]	; (400994 <udi_cdc_rx_start+0xac>)
  400962:	9300      	str	r3, [sp, #0]
  400964:	2002      	movs	r0, #2
  400966:	2101      	movs	r1, #1
  400968:	4a0b      	ldr	r2, [pc, #44]	; (400998 <udi_cdc_rx_start+0xb0>)
  40096a:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  40096e:	2340      	movs	r3, #64	; 0x40
  400970:	4c0a      	ldr	r4, [pc, #40]	; (40099c <udi_cdc_rx_start+0xb4>)
  400972:	47a0      	blx	r4
  400974:	e000      	b.n	400978 <udi_cdc_rx_start+0x90>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400976:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  400978:	b002      	add	sp, #8
  40097a:	bd10      	pop	{r4, pc}
  40097c:	200000b0 	.word	0x200000b0
  400980:	20000a60 	.word	0x20000a60
  400984:	20000af4 	.word	0x20000af4
  400988:	20000a54 	.word	0x20000a54
  40098c:	20000a4c 	.word	0x20000a4c
  400990:	004008d5 	.word	0x004008d5
  400994:	00400a31 	.word	0x00400a31
  400998:	20000a74 	.word	0x20000a74
  40099c:	00402c51 	.word	0x00402c51

004009a0 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
  4009a0:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
  4009a2:	2400      	movs	r4, #0
  4009a4:	4b15      	ldr	r3, [pc, #84]	; (4009fc <udi_cdc_data_enable+0x5c>)
  4009a6:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  4009a8:	4b15      	ldr	r3, [pc, #84]	; (400a00 <udi_cdc_data_enable+0x60>)
  4009aa:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4009ac:	4b15      	ldr	r3, [pc, #84]	; (400a04 <udi_cdc_data_enable+0x64>)
  4009ae:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  4009b0:	4b15      	ldr	r3, [pc, #84]	; (400a08 <udi_cdc_data_enable+0x68>)
  4009b2:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  4009b4:	4b15      	ldr	r3, [pc, #84]	; (400a0c <udi_cdc_data_enable+0x6c>)
  4009b6:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  4009b8:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  4009ba:	4b15      	ldr	r3, [pc, #84]	; (400a10 <udi_cdc_data_enable+0x70>)
  4009bc:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  4009be:	4620      	mov	r0, r4
  4009c0:	4b14      	ldr	r3, [pc, #80]	; (400a14 <udi_cdc_data_enable+0x74>)
  4009c2:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  4009c4:	4b14      	ldr	r3, [pc, #80]	; (400a18 <udi_cdc_data_enable+0x78>)
  4009c6:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  4009c8:	4b14      	ldr	r3, [pc, #80]	; (400a1c <udi_cdc_data_enable+0x7c>)
  4009ca:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  4009cc:	4b14      	ldr	r3, [pc, #80]	; (400a20 <udi_cdc_data_enable+0x80>)
  4009ce:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
  4009d0:	4b14      	ldr	r3, [pc, #80]	; (400a24 <udi_cdc_data_enable+0x84>)
  4009d2:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  4009d4:	4620      	mov	r0, r4
  4009d6:	4b14      	ldr	r3, [pc, #80]	; (400a28 <udi_cdc_data_enable+0x88>)
  4009d8:	4798      	blx	r3
  4009da:	4602      	mov	r2, r0
  4009dc:	b158      	cbz	r0, 4009f6 <udi_cdc_data_enable+0x56>
		return false;
	}
	udi_cdc_nb_data_enabled++;
  4009de:	4b07      	ldr	r3, [pc, #28]	; (4009fc <udi_cdc_data_enable+0x5c>)
  4009e0:	7819      	ldrb	r1, [r3, #0]
  4009e2:	3101      	adds	r1, #1
  4009e4:	b2c9      	uxtb	r1, r1
  4009e6:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  4009e8:	781b      	ldrb	r3, [r3, #0]
  4009ea:	b2db      	uxtb	r3, r3
  4009ec:	2b01      	cmp	r3, #1
  4009ee:	d102      	bne.n	4009f6 <udi_cdc_data_enable+0x56>
		udi_cdc_data_running = true;
  4009f0:	2101      	movs	r1, #1
  4009f2:	4b0e      	ldr	r3, [pc, #56]	; (400a2c <udi_cdc_data_enable+0x8c>)
  4009f4:	7019      	strb	r1, [r3, #0]
	}
	return true;
}
  4009f6:	4610      	mov	r0, r2
  4009f8:	bd10      	pop	{r4, pc}
  4009fa:	bf00      	nop
  4009fc:	200009c0 	.word	0x200009c0
  400a00:	20000a64 	.word	0x20000a64
  400a04:	20000af8 	.word	0x20000af8
  400a08:	200009c4 	.word	0x200009c4
  400a0c:	200009c8 	.word	0x200009c8
  400a10:	20000a58 	.word	0x20000a58
  400a14:	00400701 	.word	0x00400701
  400a18:	20000af4 	.word	0x20000af4
  400a1c:	20000a60 	.word	0x20000a60
  400a20:	20000a4c 	.word	0x20000a4c
  400a24:	20000a54 	.word	0x20000a54
  400a28:	004008e9 	.word	0x004008e9
  400a2c:	20000a5c 	.word	0x20000a5c

00400a30 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400a30:	b510      	push	{r4, lr}
  400a32:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400a34:	b9d0      	cbnz	r0, 400a6c <udi_cdc_data_received+0x3c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400a36:	4b0e      	ldr	r3, [pc, #56]	; (400a70 <udi_cdc_data_received+0x40>)
  400a38:	781b      	ldrb	r3, [r3, #0]
  400a3a:	f013 0fff 	tst.w	r3, #255	; 0xff
  400a3e:	bf14      	ite	ne
  400a40:	2300      	movne	r3, #0
  400a42:	2301      	moveq	r3, #1
	if (!n) {
  400a44:	b951      	cbnz	r1, 400a5c <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
  400a46:	490b      	ldr	r1, [pc, #44]	; (400a74 <udi_cdc_data_received+0x44>)
  400a48:	9100      	str	r1, [sp, #0]
  400a4a:	4610      	mov	r0, r2
  400a4c:	2101      	movs	r1, #1
  400a4e:	4a0a      	ldr	r2, [pc, #40]	; (400a78 <udi_cdc_data_received+0x48>)
  400a50:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  400a54:	2340      	movs	r3, #64	; 0x40
  400a56:	4c09      	ldr	r4, [pc, #36]	; (400a7c <udi_cdc_data_received+0x4c>)
  400a58:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  400a5a:	e007      	b.n	400a6c <udi_cdc_data_received+0x3c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400a5c:	4a08      	ldr	r2, [pc, #32]	; (400a80 <udi_cdc_data_received+0x50>)
  400a5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  400a62:	2000      	movs	r0, #0
  400a64:	4b07      	ldr	r3, [pc, #28]	; (400a84 <udi_cdc_data_received+0x54>)
  400a66:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  400a68:	4b07      	ldr	r3, [pc, #28]	; (400a88 <udi_cdc_data_received+0x58>)
  400a6a:	4798      	blx	r3
}
  400a6c:	b002      	add	sp, #8
  400a6e:	bd10      	pop	{r4, pc}
  400a70:	20000a60 	.word	0x20000a60
  400a74:	00400a31 	.word	0x00400a31
  400a78:	20000a74 	.word	0x20000a74
  400a7c:	00402c51 	.word	0x00402c51
  400a80:	20000a4c 	.word	0x20000a4c
  400a84:	20000af4 	.word	0x20000af4
  400a88:	004008e9 	.word	0x004008e9

00400a8c <udi_cdc_is_rx_ready>:
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
  400a8c:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
  400a8e:	2000      	movs	r0, #0
  400a90:	4b01      	ldr	r3, [pc, #4]	; (400a98 <udi_cdc_is_rx_ready+0xc>)
  400a92:	4798      	blx	r3
}
  400a94:	bd08      	pop	{r3, pc}
  400a96:	bf00      	nop
  400a98:	004008d5 	.word	0x004008d5

00400a9c <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  400a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400aa0:	4b21      	ldr	r3, [pc, #132]	; (400b28 <udi_cdc_multi_getc+0x8c>)
  400aa2:	f893 9006 	ldrb.w	r9, [r3, #6]
  400aa6:	f1b9 0f09 	cmp.w	r9, #9
  400aaa:	bf14      	ite	ne
  400aac:	f04f 0900 	movne.w	r9, #0
  400ab0:	f04f 0901 	moveq.w	r9, #1
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
  400ab4:	2000      	movs	r0, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400ab6:	4c1d      	ldr	r4, [pc, #116]	; (400b2c <udi_cdc_multi_getc+0x90>)
  400ab8:	4680      	mov	r8, r0
  400aba:	4607      	mov	r7, r0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400abc:	4d1c      	ldr	r5, [pc, #112]	; (400b30 <udi_cdc_multi_getc+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  400abe:	4e1d      	ldr	r6, [pc, #116]	; (400b34 <udi_cdc_multi_getc+0x98>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ac0:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400ac4:	b672      	cpsid	i
  400ac6:	f3bf 8f5f 	dmb	sy
  400aca:	7027      	strb	r7, [r4, #0]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400acc:	882b      	ldrh	r3, [r5, #0]
  400ace:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400ad0:	7832      	ldrb	r2, [r6, #0]
  400ad2:	b2d2      	uxtb	r2, r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400ad4:	b921      	cbnz	r1, 400ae0 <udi_cdc_multi_getc+0x44>
		cpu_irq_enable();
  400ad6:	2101      	movs	r1, #1
  400ad8:	7021      	strb	r1, [r4, #0]
  400ada:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400ade:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
  400ae0:	4915      	ldr	r1, [pc, #84]	; (400b38 <udi_cdc_multi_getc+0x9c>)
  400ae2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  400ae6:	4299      	cmp	r1, r3
  400ae8:	d807      	bhi.n	400afa <udi_cdc_multi_getc+0x5e>
		if (!udi_cdc_data_running) {
  400aea:	4b14      	ldr	r3, [pc, #80]	; (400b3c <udi_cdc_multi_getc+0xa0>)
  400aec:	781b      	ldrb	r3, [r3, #0]
  400aee:	f013 0fff 	tst.w	r3, #255	; 0xff
  400af2:	d1e5      	bne.n	400ac0 <udi_cdc_multi_getc+0x24>
			return 0;
  400af4:	2000      	movs	r0, #0
  400af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400afa:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  400afe:	4910      	ldr	r1, [pc, #64]	; (400b40 <udi_cdc_multi_getc+0xa4>)
  400b00:	f811 a002 	ldrb.w	sl, [r1, r2]
  400b04:	ea40 0a0a 	orr.w	sl, r0, sl
	udi_cdc_rx_pos[port] = pos+1;
  400b08:	3301      	adds	r3, #1
  400b0a:	b29b      	uxth	r3, r3
  400b0c:	802b      	strh	r3, [r5, #0]

	udi_cdc_rx_start(port);
  400b0e:	4640      	mov	r0, r8
  400b10:	4b0c      	ldr	r3, [pc, #48]	; (400b44 <udi_cdc_multi_getc+0xa8>)
  400b12:	4798      	blx	r3

	if (b_databit_9) {
  400b14:	f1b9 0f00 	cmp.w	r9, #0
  400b18:	d003      	beq.n	400b22 <udi_cdc_multi_getc+0x86>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
  400b1a:	ea4f 200a 	mov.w	r0, sl, lsl #8

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
  400b1e:	46c1      	mov	r9, r8
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
  400b20:	e7ce      	b.n	400ac0 <udi_cdc_multi_getc+0x24>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400b22:	4650      	mov	r0, sl
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  400b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b28:	200009b8 	.word	0x200009b8
  400b2c:	200000b0 	.word	0x200000b0
  400b30:	20000a54 	.word	0x20000a54
  400b34:	20000a60 	.word	0x20000a60
  400b38:	20000a4c 	.word	0x20000a4c
  400b3c:	20000a5c 	.word	0x20000a5c
  400b40:	20000a74 	.word	0x20000a74
  400b44:	004008e9 	.word	0x004008e9

00400b48 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400b48:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  400b4a:	2000      	movs	r0, #0
  400b4c:	4b01      	ldr	r3, [pc, #4]	; (400b54 <udi_cdc_getc+0xc>)
  400b4e:	4798      	blx	r3
}
  400b50:	bd08      	pop	{r3, pc}
  400b52:	bf00      	nop
  400b54:	00400a9d 	.word	0x00400a9d

00400b58 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400b58:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400b5a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400b5e:	b672      	cpsid	i
  400b60:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400b64:	2200      	movs	r2, #0
  400b66:	4b17      	ldr	r3, [pc, #92]	; (400bc4 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400b68:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400b6a:	4b17      	ldr	r3, [pc, #92]	; (400bc8 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400b6c:	7819      	ldrb	r1, [r3, #0]
  400b6e:	b2c9      	uxtb	r1, r1
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400b70:	4a16      	ldr	r2, [pc, #88]	; (400bcc <udi_cdc_multi_get_free_tx_buffer+0x74>)
  400b72:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
  400b76:	f1d1 0101 	rsbs	r1, r1, #1
  400b7a:	bf38      	it	cc
  400b7c:	2100      	movcc	r1, #0
  400b7e:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400b82:	2b40      	cmp	r3, #64	; 0x40
  400b84:	d110      	bne.n	400ba8 <udi_cdc_multi_get_free_tx_buffer+0x50>
		if ((!udi_cdc_tx_trans_ongoing[port])
  400b86:	4a12      	ldr	r2, [pc, #72]	; (400bd0 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400b88:	7812      	ldrb	r2, [r2, #0]
  400b8a:	f012 0fff 	tst.w	r2, #255	; 0xff
  400b8e:	d10b      	bne.n	400ba8 <udi_cdc_multi_get_free_tx_buffer+0x50>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400b90:	4a10      	ldr	r2, [pc, #64]	; (400bd4 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
  400b92:	7812      	ldrb	r2, [r2, #0]
  400b94:	f012 0fff 	tst.w	r2, #255	; 0xff
  400b98:	d106      	bne.n	400ba8 <udi_cdc_multi_get_free_tx_buffer+0x50>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  400b9a:	2201      	movs	r2, #1
  400b9c:	4b0d      	ldr	r3, [pc, #52]	; (400bd4 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
  400b9e:	701a      	strb	r2, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400ba0:	4b09      	ldr	r3, [pc, #36]	; (400bc8 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400ba2:	7019      	strb	r1, [r3, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
  400ba4:	2040      	movs	r0, #64	; 0x40
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
  400ba6:	2300      	movs	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400ba8:	b92c      	cbnz	r4, 400bb6 <udi_cdc_multi_get_free_tx_buffer+0x5e>
		cpu_irq_enable();
  400baa:	2101      	movs	r1, #1
  400bac:	4a05      	ldr	r2, [pc, #20]	; (400bc4 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400bae:	7011      	strb	r1, [r2, #0]
  400bb0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400bb4:	b662      	cpsie	i
  400bb6:	4418      	add	r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
  400bb8:	f1c0 0080 	rsb	r0, r0, #128	; 0x80
  400bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bc0:	4770      	bx	lr
  400bc2:	bf00      	nop
  400bc4:	200000b0 	.word	0x200000b0
  400bc8:	200009c4 	.word	0x200009c4
  400bcc:	200009c8 	.word	0x200009c8
  400bd0:	20000a64 	.word	0x20000a64
  400bd4:	20000af8 	.word	0x20000af8

00400bd8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400bd8:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  400bda:	4b03      	ldr	r3, [pc, #12]	; (400be8 <udi_cdc_multi_is_tx_ready+0x10>)
  400bdc:	4798      	blx	r3
}
  400bde:	3000      	adds	r0, #0
  400be0:	bf18      	it	ne
  400be2:	2001      	movne	r0, #1
  400be4:	bd08      	pop	{r3, pc}
  400be6:	bf00      	nop
  400be8:	00400b59 	.word	0x00400b59

00400bec <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bf0:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400bf2:	4b1b      	ldr	r3, [pc, #108]	; (400c60 <udi_cdc_multi_putc+0x74>)
  400bf4:	799e      	ldrb	r6, [r3, #6]
  400bf6:	2e09      	cmp	r6, #9
  400bf8:	bf14      	ite	ne
  400bfa:	2600      	movne	r6, #0
  400bfc:	2601      	moveq	r6, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400bfe:	4d19      	ldr	r5, [pc, #100]	; (400c64 <udi_cdc_multi_putc+0x78>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400c00:	4f19      	ldr	r7, [pc, #100]	; (400c68 <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400c02:	f8df 8074 	ldr.w	r8, [pc, #116]	; 400c78 <udi_cdc_multi_putc+0x8c>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400c06:	2000      	movs	r0, #0
  400c08:	47a8      	blx	r5
  400c0a:	b930      	cbnz	r0, 400c1a <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
  400c0c:	4b17      	ldr	r3, [pc, #92]	; (400c6c <udi_cdc_multi_putc+0x80>)
  400c0e:	781b      	ldrb	r3, [r3, #0]
  400c10:	f013 0fff 	tst.w	r3, #255	; 0xff
  400c14:	d1f7      	bne.n	400c06 <udi_cdc_multi_putc+0x1a>
  400c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400c1a:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400c1e:	b672      	cpsid	i
  400c20:	f3bf 8f5f 	dmb	sy
  400c24:	2300      	movs	r3, #0
  400c26:	703b      	strb	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400c28:	f898 3000 	ldrb.w	r3, [r8]
  400c2c:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400c2e:	4810      	ldr	r0, [pc, #64]	; (400c70 <udi_cdc_multi_putc+0x84>)
  400c30:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
  400c34:	f102 0c01 	add.w	ip, r2, #1
  400c38:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
  400c3c:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  400c40:	4a0c      	ldr	r2, [pc, #48]	; (400c74 <udi_cdc_multi_putc+0x88>)
  400c42:	54d4      	strb	r4, [r2, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400c44:	b921      	cbnz	r1, 400c50 <udi_cdc_multi_putc+0x64>
		cpu_irq_enable();
  400c46:	2301      	movs	r3, #1
  400c48:	703b      	strb	r3, [r7, #0]
  400c4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400c4e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  400c50:	b116      	cbz	r6, 400c58 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  400c52:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
  400c54:	2600      	movs	r6, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
  400c56:	e7d6      	b.n	400c06 <udi_cdc_multi_putc+0x1a>
	}
	return true;
  400c58:	2001      	movs	r0, #1
}
  400c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c5e:	bf00      	nop
  400c60:	200009b8 	.word	0x200009b8
  400c64:	00400bd9 	.word	0x00400bd9
  400c68:	200000b0 	.word	0x200000b0
  400c6c:	20000a5c 	.word	0x20000a5c
  400c70:	200009c8 	.word	0x200009c8
  400c74:	200009cc 	.word	0x200009cc
  400c78:	200009c4 	.word	0x200009c4

00400c7c <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400c7c:	b508      	push	{r3, lr}
  400c7e:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
  400c80:	2000      	movs	r0, #0
  400c82:	4b01      	ldr	r3, [pc, #4]	; (400c88 <udi_cdc_putc+0xc>)
  400c84:	4798      	blx	r3
}
  400c86:	bd08      	pop	{r3, pc}
  400c88:	00400bed 	.word	0x00400bed

00400c8c <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  400c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c90:	4688      	mov	r8, r1
  400c92:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  400c94:	4b1f      	ldr	r3, [pc, #124]	; (400d14 <udi_cdc_multi_write_buf+0x88>)
  400c96:	799b      	ldrb	r3, [r3, #6]
  400c98:	2b09      	cmp	r3, #9
		size *=2;
  400c9a:	bf08      	it	eq
  400c9c:	0055      	lsleq	r5, r2, #1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400c9e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 400d2c <udi_cdc_multi_write_buf+0xa0>
  400ca2:	2000      	movs	r0, #0
  400ca4:	47d0      	blx	sl
  400ca6:	b938      	cbnz	r0, 400cb8 <udi_cdc_multi_write_buf+0x2c>
		if (!udi_cdc_data_running) {
  400ca8:	4b1b      	ldr	r3, [pc, #108]	; (400d18 <udi_cdc_multi_write_buf+0x8c>)
  400caa:	781b      	ldrb	r3, [r3, #0]
  400cac:	f013 0fff 	tst.w	r3, #255	; 0xff
  400cb0:	d1f7      	bne.n	400ca2 <udi_cdc_multi_write_buf+0x16>
  400cb2:	4628      	mov	r0, r5
  400cb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400cb8:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400cbc:	b672      	cpsid	i
  400cbe:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400cc2:	2300      	movs	r3, #0
  400cc4:	4a15      	ldr	r2, [pc, #84]	; (400d1c <udi_cdc_multi_write_buf+0x90>)
  400cc6:	7013      	strb	r3, [r2, #0]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400cc8:	4b15      	ldr	r3, [pc, #84]	; (400d20 <udi_cdc_multi_write_buf+0x94>)
  400cca:	781e      	ldrb	r6, [r3, #0]
  400ccc:	b2f6      	uxtb	r6, r6
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400cce:	f8df 9060 	ldr.w	r9, [pc, #96]	; 400d30 <udi_cdc_multi_write_buf+0xa4>
  400cd2:	f839 7016 	ldrh.w	r7, [r9, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  400cd6:	f1c7 0440 	rsb	r4, r7, #64	; 0x40
  400cda:	42a5      	cmp	r5, r4
  400cdc:	bf38      	it	cc
  400cde:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  400ce0:	eb07 1386 	add.w	r3, r7, r6, lsl #6
  400ce4:	480f      	ldr	r0, [pc, #60]	; (400d24 <udi_cdc_multi_write_buf+0x98>)
  400ce6:	4418      	add	r0, r3
  400ce8:	4641      	mov	r1, r8
  400cea:	4622      	mov	r2, r4
  400cec:	4b0e      	ldr	r3, [pc, #56]	; (400d28 <udi_cdc_multi_write_buf+0x9c>)
  400cee:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  400cf0:	4427      	add	r7, r4
  400cf2:	f829 7016 	strh.w	r7, [r9, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400cf6:	465b      	mov	r3, fp
  400cf8:	b92b      	cbnz	r3, 400d06 <udi_cdc_multi_write_buf+0x7a>
		cpu_irq_enable();
  400cfa:	2301      	movs	r3, #1
  400cfc:	4a07      	ldr	r2, [pc, #28]	; (400d1c <udi_cdc_multi_write_buf+0x90>)
  400cfe:	7013      	strb	r3, [r2, #0]
  400d00:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400d04:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  400d06:	44a0      	add	r8, r4
	size -= copy_nb;

	if (size) {
  400d08:	1b2d      	subs	r5, r5, r4
  400d0a:	d1ca      	bne.n	400ca2 <udi_cdc_multi_write_buf+0x16>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
  400d0c:	2000      	movs	r0, #0
}
  400d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d12:	bf00      	nop
  400d14:	200009b8 	.word	0x200009b8
  400d18:	20000a5c 	.word	0x20000a5c
  400d1c:	200000b0 	.word	0x200000b0
  400d20:	200009c4 	.word	0x200009c4
  400d24:	200009cc 	.word	0x200009cc
  400d28:	004031c5 	.word	0x004031c5
  400d2c:	00400bd9 	.word	0x00400bd9
  400d30:	200009c8 	.word	0x200009c8

00400d34 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  400d34:	b508      	push	{r3, lr}
  400d36:	4603      	mov	r3, r0
  400d38:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
  400d3a:	2000      	movs	r0, #0
  400d3c:	4619      	mov	r1, r3
  400d3e:	4b01      	ldr	r3, [pc, #4]	; (400d44 <udi_cdc_write_buf+0x10>)
  400d40:	4798      	blx	r3
}
  400d42:	bd08      	pop	{r3, pc}
  400d44:	00400c8d 	.word	0x00400c8d

00400d48 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400d48:	4b0f      	ldr	r3, [pc, #60]	; (400d88 <udc_next_desc_in_iface+0x40>)
  400d4a:	681b      	ldr	r3, [r3, #0]
  400d4c:	681b      	ldr	r3, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400d4e:	885a      	ldrh	r2, [r3, #2]
  400d50:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400d52:	7803      	ldrb	r3, [r0, #0]
  400d54:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400d56:	4290      	cmp	r0, r2
  400d58:	d210      	bcs.n	400d7c <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400d5a:	7843      	ldrb	r3, [r0, #1]
  400d5c:	2b04      	cmp	r3, #4
  400d5e:	d00f      	beq.n	400d80 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400d60:	428b      	cmp	r3, r1
  400d62:	d105      	bne.n	400d70 <udc_next_desc_in_iface+0x28>
  400d64:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400d66:	7843      	ldrb	r3, [r0, #1]
  400d68:	2b04      	cmp	r3, #4
  400d6a:	d00b      	beq.n	400d84 <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400d6c:	428b      	cmp	r3, r1
  400d6e:	d00a      	beq.n	400d86 <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400d70:	7803      	ldrb	r3, [r0, #0]
  400d72:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400d74:	4290      	cmp	r0, r2
  400d76:	d3f6      	bcc.n	400d66 <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  400d78:	2000      	movs	r0, #0
  400d7a:	4770      	bx	lr
  400d7c:	2000      	movs	r0, #0
  400d7e:	4770      	bx	lr
  400d80:	2000      	movs	r0, #0
  400d82:	4770      	bx	lr
  400d84:	2000      	movs	r0, #0
}
  400d86:	4770      	bx	lr
  400d88:	20000b04 	.word	0x20000b04

00400d8c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400d8c:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400d8e:	4b03      	ldr	r3, [pc, #12]	; (400d9c <udc_valid_address+0x10>)
  400d90:	7898      	ldrb	r0, [r3, #2]
  400d92:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400d96:	4b02      	ldr	r3, [pc, #8]	; (400da0 <udc_valid_address+0x14>)
  400d98:	4798      	blx	r3
  400d9a:	bd08      	pop	{r3, pc}
  400d9c:	20000c3c 	.word	0x20000c3c
  400da0:	0040289d 	.word	0x0040289d

00400da4 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  400da4:	b410      	push	{r4}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  400da6:	4b16      	ldr	r3, [pc, #88]	; (400e00 <udc_update_iface_desc+0x5c>)
  400da8:	781b      	ldrb	r3, [r3, #0]
  400daa:	b303      	cbz	r3, 400dee <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400dac:	4b15      	ldr	r3, [pc, #84]	; (400e04 <udc_update_iface_desc+0x60>)
  400dae:	681b      	ldr	r3, [r3, #0]
  400db0:	681b      	ldr	r3, [r3, #0]
  400db2:	791a      	ldrb	r2, [r3, #4]
  400db4:	4282      	cmp	r2, r0
  400db6:	d91c      	bls.n	400df2 <udc_update_iface_desc+0x4e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400db8:	4a13      	ldr	r2, [pc, #76]	; (400e08 <udc_update_iface_desc+0x64>)
  400dba:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400dbc:	885c      	ldrh	r4, [r3, #2]
  400dbe:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400dc0:	42a3      	cmp	r3, r4
  400dc2:	d218      	bcs.n	400df6 <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400dc4:	785a      	ldrb	r2, [r3, #1]
  400dc6:	2a04      	cmp	r2, #4
  400dc8:	d109      	bne.n	400dde <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400dca:	789a      	ldrb	r2, [r3, #2]
  400dcc:	4282      	cmp	r2, r0
  400dce:	d106      	bne.n	400dde <udc_update_iface_desc+0x3a>
  400dd0:	78da      	ldrb	r2, [r3, #3]
  400dd2:	428a      	cmp	r2, r1
  400dd4:	d103      	bne.n	400dde <udc_update_iface_desc+0x3a>
  400dd6:	4a0c      	ldr	r2, [pc, #48]	; (400e08 <udc_update_iface_desc+0x64>)
  400dd8:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  400dda:	2001      	movs	r0, #1
  400ddc:	e00c      	b.n	400df8 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400dde:	781a      	ldrb	r2, [r3, #0]
  400de0:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400de2:	42a3      	cmp	r3, r4
  400de4:	d3ee      	bcc.n	400dc4 <udc_update_iface_desc+0x20>
  400de6:	4a08      	ldr	r2, [pc, #32]	; (400e08 <udc_update_iface_desc+0x64>)
  400de8:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400dea:	2000      	movs	r0, #0
  400dec:	e004      	b.n	400df8 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  400dee:	2000      	movs	r0, #0
  400df0:	e002      	b.n	400df8 <udc_update_iface_desc+0x54>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  400df2:	2000      	movs	r0, #0
  400df4:	e000      	b.n	400df8 <udc_update_iface_desc+0x54>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400df6:	2000      	movs	r0, #0
}
  400df8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400dfc:	4770      	bx	lr
  400dfe:	bf00      	nop
  400e00:	20000b0c 	.word	0x20000b0c
  400e04:	20000b04 	.word	0x20000b04
  400e08:	20000b10 	.word	0x20000b10

00400e0c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  400e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400e10:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400e12:	2100      	movs	r1, #0
  400e14:	4b12      	ldr	r3, [pc, #72]	; (400e60 <udc_iface_disable+0x54>)
  400e16:	4798      	blx	r3
  400e18:	4680      	mov	r8, r0
  400e1a:	b1e8      	cbz	r0, 400e58 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400e1c:	4b11      	ldr	r3, [pc, #68]	; (400e64 <udc_iface_disable+0x58>)
  400e1e:	681b      	ldr	r3, [r3, #0]
  400e20:	685b      	ldr	r3, [r3, #4]
  400e22:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400e26:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400e2a:	4798      	blx	r3
  400e2c:	4601      	mov	r1, r0
  400e2e:	4620      	mov	r0, r4
  400e30:	4b0b      	ldr	r3, [pc, #44]	; (400e60 <udc_iface_disable+0x54>)
  400e32:	4798      	blx	r3
  400e34:	4680      	mov	r8, r0
  400e36:	b178      	cbz	r0, 400e58 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400e38:	4b0b      	ldr	r3, [pc, #44]	; (400e68 <udc_iface_disable+0x5c>)
  400e3a:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400e3c:	2605      	movs	r6, #5
  400e3e:	4d0b      	ldr	r5, [pc, #44]	; (400e6c <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400e40:	4f0b      	ldr	r7, [pc, #44]	; (400e70 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400e42:	4620      	mov	r0, r4
  400e44:	4631      	mov	r1, r6
  400e46:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  400e48:	4604      	mov	r4, r0
  400e4a:	b110      	cbz	r0, 400e52 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400e4c:	7880      	ldrb	r0, [r0, #2]
  400e4e:	47b8      	blx	r7
		}
  400e50:	e7f7      	b.n	400e42 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  400e52:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400e56:	4798      	blx	r3
	return true;
}
  400e58:	4640      	mov	r0, r8
  400e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400e5e:	bf00      	nop
  400e60:	00400da5 	.word	0x00400da5
  400e64:	20000b04 	.word	0x20000b04
  400e68:	20000b10 	.word	0x20000b10
  400e6c:	00400d49 	.word	0x00400d49
  400e70:	00402a15 	.word	0x00402a15

00400e74 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  400e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e78:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  400e7a:	4b10      	ldr	r3, [pc, #64]	; (400ebc <udc_iface_enable+0x48>)
  400e7c:	4798      	blx	r3
  400e7e:	4603      	mov	r3, r0
  400e80:	b1c8      	cbz	r0, 400eb6 <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400e82:	4b0f      	ldr	r3, [pc, #60]	; (400ec0 <udc_iface_enable+0x4c>)
  400e84:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400e86:	2605      	movs	r6, #5
  400e88:	4d0e      	ldr	r5, [pc, #56]	; (400ec4 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400e8a:	4f0f      	ldr	r7, [pc, #60]	; (400ec8 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400e8c:	4620      	mov	r0, r4
  400e8e:	4631      	mov	r1, r6
  400e90:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  400e92:	4604      	mov	r4, r0
  400e94:	b138      	cbz	r0, 400ea6 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  400e96:	7880      	ldrb	r0, [r0, #2]
  400e98:	78e1      	ldrb	r1, [r4, #3]
  400e9a:	88a2      	ldrh	r2, [r4, #4]
  400e9c:	47b8      	blx	r7
  400e9e:	4603      	mov	r3, r0
  400ea0:	2800      	cmp	r0, #0
  400ea2:	d1f3      	bne.n	400e8c <udc_iface_enable+0x18>
  400ea4:	e007      	b.n	400eb6 <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  400ea6:	4b09      	ldr	r3, [pc, #36]	; (400ecc <udc_iface_enable+0x58>)
  400ea8:	681b      	ldr	r3, [r3, #0]
  400eaa:	685b      	ldr	r3, [r3, #4]
  400eac:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  400eb0:	681b      	ldr	r3, [r3, #0]
  400eb2:	4798      	blx	r3
  400eb4:	4603      	mov	r3, r0
}
  400eb6:	4618      	mov	r0, r3
  400eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400ebc:	00400da5 	.word	0x00400da5
  400ec0:	20000b10 	.word	0x20000b10
  400ec4:	00400d49 	.word	0x00400d49
  400ec8:	00402911 	.word	0x00402911
  400ecc:	20000b04 	.word	0x20000b04

00400ed0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  400ed0:	b508      	push	{r3, lr}
	udd_enable();
  400ed2:	4b01      	ldr	r3, [pc, #4]	; (400ed8 <udc_start+0x8>)
  400ed4:	4798      	blx	r3
  400ed6:	bd08      	pop	{r3, pc}
  400ed8:	004027e1 	.word	0x004027e1

00400edc <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  400edc:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400ede:	4b0d      	ldr	r3, [pc, #52]	; (400f14 <udc_reset+0x38>)
  400ee0:	781b      	ldrb	r3, [r3, #0]
  400ee2:	b183      	cbz	r3, 400f06 <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ee4:	4b0c      	ldr	r3, [pc, #48]	; (400f18 <udc_reset+0x3c>)
  400ee6:	681b      	ldr	r3, [r3, #0]
  400ee8:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400eea:	791b      	ldrb	r3, [r3, #4]
  400eec:	b15b      	cbz	r3, 400f06 <udc_reset+0x2a>
  400eee:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  400ef0:	4e0a      	ldr	r6, [pc, #40]	; (400f1c <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400ef2:	4d09      	ldr	r5, [pc, #36]	; (400f18 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  400ef4:	4620      	mov	r0, r4
  400ef6:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400ef8:	3401      	adds	r4, #1
  400efa:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400efc:	682b      	ldr	r3, [r5, #0]
  400efe:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400f00:	791b      	ldrb	r3, [r3, #4]
  400f02:	42a3      	cmp	r3, r4
  400f04:	d8f6      	bhi.n	400ef4 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  400f06:	2300      	movs	r3, #0
  400f08:	4a02      	ldr	r2, [pc, #8]	; (400f14 <udc_reset+0x38>)
  400f0a:	7013      	strb	r3, [r2, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  400f0c:	4a04      	ldr	r2, [pc, #16]	; (400f20 <udc_reset+0x44>)
  400f0e:	8013      	strh	r3, [r2, #0]
  400f10:	bd70      	pop	{r4, r5, r6, pc}
  400f12:	bf00      	nop
  400f14:	20000b0c 	.word	0x20000b0c
  400f18:	20000b04 	.word	0x20000b04
  400f1c:	00400e0d 	.word	0x00400e0d
  400f20:	20000b0a 	.word	0x20000b0a

00400f24 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  400f24:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  400f26:	4b0c      	ldr	r3, [pc, #48]	; (400f58 <udc_sof_notify+0x34>)
  400f28:	781b      	ldrb	r3, [r3, #0]
  400f2a:	b19b      	cbz	r3, 400f54 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f2c:	4b0b      	ldr	r3, [pc, #44]	; (400f5c <udc_sof_notify+0x38>)
  400f2e:	681b      	ldr	r3, [r3, #0]
  400f30:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400f32:	7912      	ldrb	r2, [r2, #4]
  400f34:	b172      	cbz	r2, 400f54 <udc_sof_notify+0x30>
  400f36:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f38:	4d08      	ldr	r5, [pc, #32]	; (400f5c <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  400f3a:	685b      	ldr	r3, [r3, #4]
  400f3c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  400f40:	691b      	ldr	r3, [r3, #16]
  400f42:	b103      	cbz	r3, 400f46 <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  400f44:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  400f46:	3401      	adds	r4, #1
  400f48:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  400f4a:	682b      	ldr	r3, [r5, #0]
  400f4c:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  400f4e:	7912      	ldrb	r2, [r2, #4]
  400f50:	42a2      	cmp	r2, r4
  400f52:	d8f2      	bhi.n	400f3a <udc_sof_notify+0x16>
  400f54:	bd38      	pop	{r3, r4, r5, pc}
  400f56:	bf00      	nop
  400f58:	20000b0c 	.word	0x20000b0c
  400f5c:	20000b04 	.word	0x20000b04

00400f60 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  400f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  400f64:	4b77      	ldr	r3, [pc, #476]	; (401144 <udc_process_setup+0x1e4>)
  400f66:	2200      	movs	r2, #0
  400f68:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  400f6a:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  400f6c:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  400f6e:	781b      	ldrb	r3, [r3, #0]
  400f70:	f013 0f80 	tst.w	r3, #128	; 0x80
  400f74:	f000 81e6 	beq.w	401344 <udc_process_setup+0x3e4>
		if (udd_g_ctrlreq.req.wLength == 0) {
  400f78:	4a72      	ldr	r2, [pc, #456]	; (401144 <udc_process_setup+0x1e4>)
  400f7a:	88d2      	ldrh	r2, [r2, #6]
  400f7c:	2a00      	cmp	r2, #0
  400f7e:	f040 81e5 	bne.w	40134c <udc_process_setup+0x3ec>
  400f82:	e1db      	b.n	40133c <udc_process_setup+0x3dc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  400f84:	f013 031f 	ands.w	r3, r3, #31
  400f88:	d167      	bne.n	40105a <udc_process_setup+0xfa>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  400f8a:	496e      	ldr	r1, [pc, #440]	; (401144 <udc_process_setup+0x1e4>)
  400f8c:	7849      	ldrb	r1, [r1, #1]
  400f8e:	2906      	cmp	r1, #6
  400f90:	d00d      	beq.n	400fae <udc_process_setup+0x4e>
  400f92:	2908      	cmp	r1, #8
  400f94:	d057      	beq.n	401046 <udc_process_setup+0xe6>
  400f96:	2900      	cmp	r1, #0
  400f98:	d15f      	bne.n	40105a <udc_process_setup+0xfa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  400f9a:	2a02      	cmp	r2, #2
  400f9c:	d105      	bne.n	400faa <udc_process_setup+0x4a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  400f9e:	486a      	ldr	r0, [pc, #424]	; (401148 <udc_process_setup+0x1e8>)
  400fa0:	2102      	movs	r1, #2
  400fa2:	4b6a      	ldr	r3, [pc, #424]	; (40114c <udc_process_setup+0x1ec>)
  400fa4:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  400fa6:	2401      	movs	r4, #1
  400fa8:	e174      	b.n	401294 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
  400faa:	2400      	movs	r4, #0
  400fac:	e172      	b.n	401294 <udc_process_setup+0x334>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400fae:	4b65      	ldr	r3, [pc, #404]	; (401144 <udc_process_setup+0x1e4>)
  400fb0:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  400fb2:	0a13      	lsrs	r3, r2, #8
  400fb4:	3b01      	subs	r3, #1
  400fb6:	2b0e      	cmp	r3, #14
  400fb8:	d83b      	bhi.n	401032 <udc_process_setup+0xd2>
  400fba:	e8df f003 	tbb	[pc, r3]
  400fbe:	0f08      	.short	0x0f08
  400fc0:	3a3a3a2a 	.word	0x3a3a3a2a
  400fc4:	3a3a3a3a 	.word	0x3a3a3a3a
  400fc8:	3a3a3a3a 	.word	0x3a3a3a3a
  400fcc:	22          	.byte	0x22
  400fcd:	00          	.byte	0x00
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  400fce:	4b60      	ldr	r3, [pc, #384]	; (401150 <udc_process_setup+0x1f0>)
  400fd0:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  400fd2:	4618      	mov	r0, r3
  400fd4:	7819      	ldrb	r1, [r3, #0]
  400fd6:	4b5d      	ldr	r3, [pc, #372]	; (40114c <udc_process_setup+0x1ec>)
  400fd8:	4798      	blx	r3
  400fda:	e021      	b.n	401020 <udc_process_setup+0xc0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  400fdc:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  400fde:	4b5c      	ldr	r3, [pc, #368]	; (401150 <udc_process_setup+0x1f0>)
  400fe0:	681b      	ldr	r3, [r3, #0]
  400fe2:	7c5b      	ldrb	r3, [r3, #17]
  400fe4:	4293      	cmp	r3, r2
  400fe6:	d926      	bls.n	401036 <udc_process_setup+0xd6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  400fe8:	4b59      	ldr	r3, [pc, #356]	; (401150 <udc_process_setup+0x1f0>)
  400fea:	685b      	ldr	r3, [r3, #4]
  400fec:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  400ff0:	4618      	mov	r0, r3
  400ff2:	8859      	ldrh	r1, [r3, #2]
  400ff4:	4b55      	ldr	r3, [pc, #340]	; (40114c <udc_process_setup+0x1ec>)
  400ff6:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  400ff8:	4b52      	ldr	r3, [pc, #328]	; (401144 <udc_process_setup+0x1e4>)
  400ffa:	689b      	ldr	r3, [r3, #8]
  400ffc:	2202      	movs	r2, #2
  400ffe:	705a      	strb	r2, [r3, #1]
  401000:	e00e      	b.n	401020 <udc_process_setup+0xc0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  401002:	4b53      	ldr	r3, [pc, #332]	; (401150 <udc_process_setup+0x1f0>)
  401004:	689b      	ldr	r3, [r3, #8]
  401006:	b1c3      	cbz	r3, 40103a <udc_process_setup+0xda>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401008:	4618      	mov	r0, r3
  40100a:	8859      	ldrh	r1, [r3, #2]
  40100c:	4b4f      	ldr	r3, [pc, #316]	; (40114c <udc_process_setup+0x1ec>)
  40100e:	4798      	blx	r3
  401010:	e006      	b.n	401020 <udc_process_setup+0xc0>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  401012:	f012 0fff 	tst.w	r2, #255	; 0xff
  401016:	d112      	bne.n	40103e <udc_process_setup+0xde>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  401018:	484e      	ldr	r0, [pc, #312]	; (401154 <udc_process_setup+0x1f4>)
  40101a:	2104      	movs	r1, #4
  40101c:	4b4b      	ldr	r3, [pc, #300]	; (40114c <udc_process_setup+0x1ec>)
  40101e:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  401020:	4b48      	ldr	r3, [pc, #288]	; (401144 <udc_process_setup+0x1e4>)
  401022:	88da      	ldrh	r2, [r3, #6]
  401024:	899b      	ldrh	r3, [r3, #12]
  401026:	4293      	cmp	r3, r2
  401028:	d90b      	bls.n	401042 <udc_process_setup+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40102a:	4b46      	ldr	r3, [pc, #280]	; (401144 <udc_process_setup+0x1e4>)
  40102c:	819a      	strh	r2, [r3, #12]
	}
	return true;
  40102e:	2401      	movs	r4, #1
  401030:	e130      	b.n	401294 <udc_process_setup+0x334>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  401032:	2400      	movs	r4, #0
  401034:	e12e      	b.n	401294 <udc_process_setup+0x334>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
  401036:	2400      	movs	r4, #0
  401038:	e12c      	b.n	401294 <udc_process_setup+0x334>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
  40103a:	2400      	movs	r4, #0
  40103c:	e12a      	b.n	401294 <udc_process_setup+0x334>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
  40103e:	2400      	movs	r4, #0
  401040:	e128      	b.n	401294 <udc_process_setup+0x334>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
  401042:	2401      	movs	r4, #1
  401044:	e126      	b.n	401294 <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  401046:	2a01      	cmp	r2, #1
  401048:	d105      	bne.n	401056 <udc_process_setup+0xf6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  40104a:	4843      	ldr	r0, [pc, #268]	; (401158 <udc_process_setup+0x1f8>)
  40104c:	2101      	movs	r1, #1
  40104e:	4b3f      	ldr	r3, [pc, #252]	; (40114c <udc_process_setup+0x1ec>)
  401050:	4798      	blx	r3
	return true;
  401052:	2401      	movs	r4, #1
  401054:	e11e      	b.n	401294 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
  401056:	2400      	movs	r4, #0
  401058:	e11c      	b.n	401294 <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40105a:	2b01      	cmp	r3, #1
  40105c:	d12a      	bne.n	4010b4 <udc_process_setup+0x154>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  40105e:	4939      	ldr	r1, [pc, #228]	; (401144 <udc_process_setup+0x1e4>)
  401060:	7849      	ldrb	r1, [r1, #1]
  401062:	290a      	cmp	r1, #10
  401064:	d126      	bne.n	4010b4 <udc_process_setup+0x154>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  401066:	2a01      	cmp	r2, #1
  401068:	d11e      	bne.n	4010a8 <udc_process_setup+0x148>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  40106a:	4b3b      	ldr	r3, [pc, #236]	; (401158 <udc_process_setup+0x1f8>)
  40106c:	781b      	ldrb	r3, [r3, #0]
  40106e:	b1eb      	cbz	r3, 4010ac <udc_process_setup+0x14c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401070:	4b34      	ldr	r3, [pc, #208]	; (401144 <udc_process_setup+0x1e4>)
  401072:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401074:	4b39      	ldr	r3, [pc, #228]	; (40115c <udc_process_setup+0x1fc>)
  401076:	681e      	ldr	r6, [r3, #0]
  401078:	6833      	ldr	r3, [r6, #0]
  40107a:	791b      	ldrb	r3, [r3, #4]
  40107c:	42ab      	cmp	r3, r5
  40107e:	d917      	bls.n	4010b0 <udc_process_setup+0x150>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401080:	4628      	mov	r0, r5
  401082:	2100      	movs	r1, #0
  401084:	4b36      	ldr	r3, [pc, #216]	; (401160 <udc_process_setup+0x200>)
  401086:	4798      	blx	r3
  401088:	4604      	mov	r4, r0
  40108a:	2800      	cmp	r0, #0
  40108c:	f000 8102 	beq.w	401294 <udc_process_setup+0x334>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401090:	6873      	ldr	r3, [r6, #4]
	udc_iface_setting = udi_api->getsetting();
  401092:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  401096:	68db      	ldr	r3, [r3, #12]
  401098:	4798      	blx	r3
  40109a:	4b32      	ldr	r3, [pc, #200]	; (401164 <udc_process_setup+0x204>)
  40109c:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  40109e:	4618      	mov	r0, r3
  4010a0:	2101      	movs	r1, #1
  4010a2:	4b2a      	ldr	r3, [pc, #168]	; (40114c <udc_process_setup+0x1ec>)
  4010a4:	4798      	blx	r3
  4010a6:	e0f5      	b.n	401294 <udc_process_setup+0x334>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
  4010a8:	2400      	movs	r4, #0
  4010aa:	e0f3      	b.n	401294 <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  4010ac:	2400      	movs	r4, #0
  4010ae:	e0f1      	b.n	401294 <udc_process_setup+0x334>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  4010b0:	2400      	movs	r4, #0
  4010b2:	e0ef      	b.n	401294 <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4010b4:	2b02      	cmp	r3, #2
  4010b6:	f040 80ef 	bne.w	401298 <udc_process_setup+0x338>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4010ba:	4b22      	ldr	r3, [pc, #136]	; (401144 <udc_process_setup+0x1e4>)
  4010bc:	785b      	ldrb	r3, [r3, #1]
  4010be:	2b00      	cmp	r3, #0
  4010c0:	f040 80e3 	bne.w	40128a <udc_process_setup+0x32a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  4010c4:	2a02      	cmp	r2, #2
  4010c6:	d10b      	bne.n	4010e0 <udc_process_setup+0x180>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4010c8:	4b1e      	ldr	r3, [pc, #120]	; (401144 <udc_process_setup+0x1e4>)
  4010ca:	7918      	ldrb	r0, [r3, #4]
  4010cc:	4b26      	ldr	r3, [pc, #152]	; (401168 <udc_process_setup+0x208>)
  4010ce:	4798      	blx	r3
  4010d0:	4b26      	ldr	r3, [pc, #152]	; (40116c <udc_process_setup+0x20c>)
  4010d2:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  4010d4:	4618      	mov	r0, r3
  4010d6:	2102      	movs	r1, #2
  4010d8:	4b1c      	ldr	r3, [pc, #112]	; (40114c <udc_process_setup+0x1ec>)
  4010da:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  4010dc:	2401      	movs	r4, #1
  4010de:	e0d9      	b.n	401294 <udc_process_setup+0x334>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
  4010e0:	2400      	movs	r4, #0
  4010e2:	e0d7      	b.n	401294 <udc_process_setup+0x334>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4010e4:	f013 031f 	ands.w	r3, r3, #31
  4010e8:	f040 8084 	bne.w	4011f4 <udc_process_setup+0x294>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4010ec:	4a15      	ldr	r2, [pc, #84]	; (401144 <udc_process_setup+0x1e4>)
  4010ee:	7852      	ldrb	r2, [r2, #1]
  4010f0:	3a01      	subs	r2, #1
  4010f2:	2a08      	cmp	r2, #8
  4010f4:	d87e      	bhi.n	4011f4 <udc_process_setup+0x294>
  4010f6:	e8df f012 	tbh	[pc, r2, lsl #1]
  4010fa:	0013      	.short	0x0013
  4010fc:	00ca007d 	.word	0x00ca007d
  401100:	0009007d 	.word	0x0009007d
  401104:	007d007d 	.word	0x007d007d
  401108:	003d007d 	.word	0x003d007d
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  40110c:	4b0d      	ldr	r3, [pc, #52]	; (401144 <udc_process_setup+0x1e4>)
  40110e:	88db      	ldrh	r3, [r3, #6]
  401110:	b923      	cbnz	r3, 40111c <udc_process_setup+0x1bc>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  401112:	4a17      	ldr	r2, [pc, #92]	; (401170 <udc_process_setup+0x210>)
  401114:	4b0b      	ldr	r3, [pc, #44]	; (401144 <udc_process_setup+0x1e4>)
  401116:	611a      	str	r2, [r3, #16]
	return true;
  401118:	2401      	movs	r4, #1
  40111a:	e0bb      	b.n	401294 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  40111c:	2400      	movs	r4, #0
  40111e:	e0b9      	b.n	401294 <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401120:	4b08      	ldr	r3, [pc, #32]	; (401144 <udc_process_setup+0x1e4>)
  401122:	88db      	ldrh	r3, [r3, #6]
  401124:	b953      	cbnz	r3, 40113c <udc_process_setup+0x1dc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  401126:	4b07      	ldr	r3, [pc, #28]	; (401144 <udc_process_setup+0x1e4>)
  401128:	885b      	ldrh	r3, [r3, #2]
  40112a:	2b01      	cmp	r3, #1
  40112c:	d108      	bne.n	401140 <udc_process_setup+0x1e0>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  40112e:	4b06      	ldr	r3, [pc, #24]	; (401148 <udc_process_setup+0x1e8>)
  401130:	881a      	ldrh	r2, [r3, #0]
  401132:	f022 0202 	bic.w	r2, r2, #2
  401136:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  401138:	2401      	movs	r4, #1
  40113a:	e0ab      	b.n	401294 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  40113c:	2400      	movs	r4, #0
  40113e:	e0a9      	b.n	401294 <udc_process_setup+0x334>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
  401140:	2400      	movs	r4, #0
  401142:	e0a7      	b.n	401294 <udc_process_setup+0x334>
  401144:	20000c3c 	.word	0x20000c3c
  401148:	20000b0a 	.word	0x20000b0a
  40114c:	00402905 	.word	0x00402905
  401150:	20000038 	.word	0x20000038
  401154:	200000ac 	.word	0x200000ac
  401158:	20000b0c 	.word	0x20000b0c
  40115c:	20000b04 	.word	0x20000b04
  401160:	00400da5 	.word	0x00400da5
  401164:	20000b00 	.word	0x20000b00
  401168:	00402a4d 	.word	0x00402a4d
  40116c:	20000b08 	.word	0x20000b08
  401170:	00400d8d 	.word	0x00400d8d
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  401174:	4b79      	ldr	r3, [pc, #484]	; (40135c <udc_process_setup+0x3fc>)
  401176:	88db      	ldrh	r3, [r3, #6]
  401178:	2b00      	cmp	r3, #0
  40117a:	d131      	bne.n	4011e0 <udc_process_setup+0x280>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  40117c:	4b78      	ldr	r3, [pc, #480]	; (401360 <udc_process_setup+0x400>)
  40117e:	4798      	blx	r3
  401180:	2800      	cmp	r0, #0
  401182:	d02f      	beq.n	4011e4 <udc_process_setup+0x284>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401184:	4b75      	ldr	r3, [pc, #468]	; (40135c <udc_process_setup+0x3fc>)
  401186:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  401188:	4b76      	ldr	r3, [pc, #472]	; (401364 <udc_process_setup+0x404>)
  40118a:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  40118c:	7c5b      	ldrb	r3, [r3, #17]
  40118e:	429a      	cmp	r2, r3
  401190:	dc2a      	bgt.n	4011e8 <udc_process_setup+0x288>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  401192:	4b75      	ldr	r3, [pc, #468]	; (401368 <udc_process_setup+0x408>)
  401194:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  401196:	4b71      	ldr	r3, [pc, #452]	; (40135c <udc_process_setup+0x3fc>)
  401198:	789b      	ldrb	r3, [r3, #2]
  40119a:	4a74      	ldr	r2, [pc, #464]	; (40136c <udc_process_setup+0x40c>)
  40119c:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  40119e:	b32b      	cbz	r3, 4011ec <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  4011a0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  4011a4:	3b01      	subs	r3, #1
  4011a6:	4a6f      	ldr	r2, [pc, #444]	; (401364 <udc_process_setup+0x404>)
  4011a8:	6852      	ldr	r2, [r2, #4]
  4011aa:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  4011ae:	4970      	ldr	r1, [pc, #448]	; (401370 <udc_process_setup+0x410>)
  4011b0:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4011b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  4011b6:	791b      	ldrb	r3, [r3, #4]
  4011b8:	b1d3      	cbz	r3, 4011f0 <udc_process_setup+0x290>
  4011ba:	2500      	movs	r5, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  4011bc:	462f      	mov	r7, r5
  4011be:	4e6d      	ldr	r6, [pc, #436]	; (401374 <udc_process_setup+0x414>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4011c0:	4688      	mov	r8, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  4011c2:	4628      	mov	r0, r5
  4011c4:	4639      	mov	r1, r7
  4011c6:	47b0      	blx	r6
  4011c8:	4604      	mov	r4, r0
  4011ca:	2800      	cmp	r0, #0
  4011cc:	d062      	beq.n	401294 <udc_process_setup+0x334>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  4011ce:	3501      	adds	r5, #1
  4011d0:	b2ed      	uxtb	r5, r5
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4011d2:	f8d8 3000 	ldr.w	r3, [r8]
  4011d6:	681b      	ldr	r3, [r3, #0]
  4011d8:	791b      	ldrb	r3, [r3, #4]
  4011da:	42ab      	cmp	r3, r5
  4011dc:	d8f1      	bhi.n	4011c2 <udc_process_setup+0x262>
  4011de:	e059      	b.n	401294 <udc_process_setup+0x334>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  4011e0:	2400      	movs	r4, #0
  4011e2:	e057      	b.n	401294 <udc_process_setup+0x334>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
  4011e4:	2400      	movs	r4, #0
  4011e6:	e055      	b.n	401294 <udc_process_setup+0x334>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  4011e8:	2400      	movs	r4, #0
  4011ea:	e053      	b.n	401294 <udc_process_setup+0x334>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
  4011ec:	2401      	movs	r4, #1
  4011ee:	e051      	b.n	401294 <udc_process_setup+0x334>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  4011f0:	2401      	movs	r4, #1
  4011f2:	e04f      	b.n	401294 <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4011f4:	2b01      	cmp	r3, #1
  4011f6:	d11c      	bne.n	401232 <udc_process_setup+0x2d2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4011f8:	4a58      	ldr	r2, [pc, #352]	; (40135c <udc_process_setup+0x3fc>)
  4011fa:	7852      	ldrb	r2, [r2, #1]
  4011fc:	2a0b      	cmp	r2, #11
  4011fe:	d118      	bne.n	401232 <udc_process_setup+0x2d2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  401200:	4b56      	ldr	r3, [pc, #344]	; (40135c <udc_process_setup+0x3fc>)
  401202:	88db      	ldrh	r3, [r3, #6]
  401204:	b98b      	cbnz	r3, 40122a <udc_process_setup+0x2ca>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  401206:	4b59      	ldr	r3, [pc, #356]	; (40136c <udc_process_setup+0x40c>)
  401208:	781b      	ldrb	r3, [r3, #0]
  40120a:	b183      	cbz	r3, 40122e <udc_process_setup+0x2ce>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40120c:	4b53      	ldr	r3, [pc, #332]	; (40135c <udc_process_setup+0x3fc>)
  40120e:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401210:	885e      	ldrh	r6, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  401212:	4628      	mov	r0, r5
  401214:	4b58      	ldr	r3, [pc, #352]	; (401378 <udc_process_setup+0x418>)
  401216:	4798      	blx	r3
  401218:	4604      	mov	r4, r0
  40121a:	2800      	cmp	r0, #0
  40121c:	d03a      	beq.n	401294 <udc_process_setup+0x334>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  40121e:	4628      	mov	r0, r5
  401220:	b2f1      	uxtb	r1, r6
  401222:	4b54      	ldr	r3, [pc, #336]	; (401374 <udc_process_setup+0x414>)
  401224:	4798      	blx	r3
  401226:	4604      	mov	r4, r0
  401228:	e034      	b.n	401294 <udc_process_setup+0x334>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
  40122a:	2400      	movs	r4, #0
  40122c:	e032      	b.n	401294 <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  40122e:	2400      	movs	r4, #0
  401230:	e030      	b.n	401294 <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401232:	2b02      	cmp	r3, #2
  401234:	d130      	bne.n	401298 <udc_process_setup+0x338>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  401236:	4b49      	ldr	r3, [pc, #292]	; (40135c <udc_process_setup+0x3fc>)
  401238:	785b      	ldrb	r3, [r3, #1]
  40123a:	2b01      	cmp	r3, #1
  40123c:	d002      	beq.n	401244 <udc_process_setup+0x2e4>
  40123e:	2b03      	cmp	r3, #3
  401240:	d010      	beq.n	401264 <udc_process_setup+0x304>
  401242:	e026      	b.n	401292 <udc_process_setup+0x332>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401244:	4b45      	ldr	r3, [pc, #276]	; (40135c <udc_process_setup+0x3fc>)
  401246:	88db      	ldrh	r3, [r3, #6]
  401248:	b943      	cbnz	r3, 40125c <udc_process_setup+0x2fc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  40124a:	4b44      	ldr	r3, [pc, #272]	; (40135c <udc_process_setup+0x3fc>)
  40124c:	885b      	ldrh	r3, [r3, #2]
  40124e:	b93b      	cbnz	r3, 401260 <udc_process_setup+0x300>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401250:	4b42      	ldr	r3, [pc, #264]	; (40135c <udc_process_setup+0x3fc>)
  401252:	7918      	ldrb	r0, [r3, #4]
  401254:	4b49      	ldr	r3, [pc, #292]	; (40137c <udc_process_setup+0x41c>)
  401256:	4798      	blx	r3
  401258:	4604      	mov	r4, r0
  40125a:	e01b      	b.n	401294 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  40125c:	2400      	movs	r4, #0
  40125e:	e019      	b.n	401294 <udc_process_setup+0x334>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  401260:	2400      	movs	r4, #0
  401262:	e017      	b.n	401294 <udc_process_setup+0x334>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401264:	4b3d      	ldr	r3, [pc, #244]	; (40135c <udc_process_setup+0x3fc>)
  401266:	88db      	ldrh	r3, [r3, #6]
  401268:	b95b      	cbnz	r3, 401282 <udc_process_setup+0x322>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  40126a:	4b3c      	ldr	r3, [pc, #240]	; (40135c <udc_process_setup+0x3fc>)
  40126c:	885b      	ldrh	r3, [r3, #2]
  40126e:	b953      	cbnz	r3, 401286 <udc_process_setup+0x326>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  401270:	4c3a      	ldr	r4, [pc, #232]	; (40135c <udc_process_setup+0x3fc>)
  401272:	7920      	ldrb	r0, [r4, #4]
  401274:	4b42      	ldr	r3, [pc, #264]	; (401380 <udc_process_setup+0x420>)
  401276:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401278:	7920      	ldrb	r0, [r4, #4]
  40127a:	4b42      	ldr	r3, [pc, #264]	; (401384 <udc_process_setup+0x424>)
  40127c:	4798      	blx	r3
  40127e:	4604      	mov	r4, r0
  401280:	e008      	b.n	401294 <udc_process_setup+0x334>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401282:	2400      	movs	r4, #0
  401284:	e006      	b.n	401294 <udc_process_setup+0x334>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  401286:	2400      	movs	r4, #0
  401288:	e004      	b.n	401294 <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  40128a:	2400      	movs	r4, #0
  40128c:	e002      	b.n	401294 <udc_process_setup+0x334>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  40128e:	2400      	movs	r4, #0
  401290:	e000      	b.n	401294 <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  401292:	2400      	movs	r4, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  401294:	2c00      	cmp	r4, #0
  401296:	d15d      	bne.n	401354 <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401298:	4b30      	ldr	r3, [pc, #192]	; (40135c <udc_process_setup+0x3fc>)
  40129a:	781b      	ldrb	r3, [r3, #0]
  40129c:	f003 031f 	and.w	r3, r3, #31
  4012a0:	2b01      	cmp	r3, #1
  4012a2:	d11e      	bne.n	4012e2 <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4012a4:	4b31      	ldr	r3, [pc, #196]	; (40136c <udc_process_setup+0x40c>)
  4012a6:	781b      	ldrb	r3, [r3, #0]
  4012a8:	b1db      	cbz	r3, 4012e2 <udc_process_setup+0x382>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4012aa:	4b2c      	ldr	r3, [pc, #176]	; (40135c <udc_process_setup+0x3fc>)
  4012ac:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4012ae:	4b30      	ldr	r3, [pc, #192]	; (401370 <udc_process_setup+0x410>)
  4012b0:	681d      	ldr	r5, [r3, #0]
  4012b2:	682b      	ldr	r3, [r5, #0]
  4012b4:	791b      	ldrb	r3, [r3, #4]
  4012b6:	42a3      	cmp	r3, r4
  4012b8:	d913      	bls.n	4012e2 <udc_process_setup+0x382>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4012ba:	4620      	mov	r0, r4
  4012bc:	2100      	movs	r1, #0
  4012be:	4b32      	ldr	r3, [pc, #200]	; (401388 <udc_process_setup+0x428>)
  4012c0:	4798      	blx	r3
  4012c2:	b170      	cbz	r0, 4012e2 <udc_process_setup+0x382>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4012c4:	686b      	ldr	r3, [r5, #4]
  4012c6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4012ca:	68eb      	ldr	r3, [r5, #12]
  4012cc:	4798      	blx	r3
  4012ce:	4601      	mov	r1, r0
  4012d0:	4620      	mov	r0, r4
  4012d2:	4b2d      	ldr	r3, [pc, #180]	; (401388 <udc_process_setup+0x428>)
  4012d4:	4798      	blx	r3
  4012d6:	b120      	cbz	r0, 4012e2 <udc_process_setup+0x382>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  4012d8:	68ab      	ldr	r3, [r5, #8]
  4012da:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  4012dc:	4604      	mov	r4, r0
  4012de:	2800      	cmp	r0, #0
  4012e0:	d138      	bne.n	401354 <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  4012e2:	4b1e      	ldr	r3, [pc, #120]	; (40135c <udc_process_setup+0x3fc>)
  4012e4:	781b      	ldrb	r3, [r3, #0]
  4012e6:	f003 031f 	and.w	r3, r3, #31
  4012ea:	2b02      	cmp	r3, #2
  4012ec:	d128      	bne.n	401340 <udc_process_setup+0x3e0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4012ee:	4b1f      	ldr	r3, [pc, #124]	; (40136c <udc_process_setup+0x40c>)
  4012f0:	781b      	ldrb	r3, [r3, #0]
  4012f2:	b1fb      	cbz	r3, 401334 <udc_process_setup+0x3d4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4012f4:	4b1e      	ldr	r3, [pc, #120]	; (401370 <udc_process_setup+0x410>)
  4012f6:	681b      	ldr	r3, [r3, #0]
  4012f8:	681a      	ldr	r2, [r3, #0]
  4012fa:	7912      	ldrb	r2, [r2, #4]
  4012fc:	b1e2      	cbz	r2, 401338 <udc_process_setup+0x3d8>
  4012fe:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401300:	4f21      	ldr	r7, [pc, #132]	; (401388 <udc_process_setup+0x428>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401302:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401370 <udc_process_setup+0x410>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  401306:	685b      	ldr	r3, [r3, #4]
  401308:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40130c:	68f3      	ldr	r3, [r6, #12]
  40130e:	4798      	blx	r3
  401310:	4601      	mov	r1, r0
  401312:	4628      	mov	r0, r5
  401314:	47b8      	blx	r7
  401316:	4604      	mov	r4, r0
  401318:	b1e0      	cbz	r0, 401354 <udc_process_setup+0x3f4>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  40131a:	68b3      	ldr	r3, [r6, #8]
  40131c:	4798      	blx	r3
  40131e:	4604      	mov	r4, r0
  401320:	b9c0      	cbnz	r0, 401354 <udc_process_setup+0x3f4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401322:	3501      	adds	r5, #1
  401324:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401326:	f8d8 3000 	ldr.w	r3, [r8]
  40132a:	681a      	ldr	r2, [r3, #0]
  40132c:	7912      	ldrb	r2, [r2, #4]
  40132e:	42aa      	cmp	r2, r5
  401330:	d8e9      	bhi.n	401306 <udc_process_setup+0x3a6>
  401332:	e00f      	b.n	401354 <udc_process_setup+0x3f4>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  401334:	2400      	movs	r4, #0
  401336:	e00d      	b.n	401354 <udc_process_setup+0x3f4>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  401338:	2400      	movs	r4, #0
  40133a:	e00b      	b.n	401354 <udc_process_setup+0x3f4>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  40133c:	2400      	movs	r4, #0
  40133e:	e009      	b.n	401354 <udc_process_setup+0x3f4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401340:	2400      	movs	r4, #0
  401342:	e007      	b.n	401354 <udc_process_setup+0x3f4>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401344:	f013 0f60 	tst.w	r3, #96	; 0x60
  401348:	d1a6      	bne.n	401298 <udc_process_setup+0x338>
  40134a:	e6cb      	b.n	4010e4 <udc_process_setup+0x184>
  40134c:	f013 0f60 	tst.w	r3, #96	; 0x60
  401350:	d1a2      	bne.n	401298 <udc_process_setup+0x338>
  401352:	e617      	b.n	400f84 <udc_process_setup+0x24>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  401354:	4620      	mov	r0, r4
  401356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40135a:	bf00      	nop
  40135c:	20000c3c 	.word	0x20000c3c
  401360:	004028d5 	.word	0x004028d5
  401364:	20000038 	.word	0x20000038
  401368:	00400edd 	.word	0x00400edd
  40136c:	20000b0c 	.word	0x20000b0c
  401370:	20000b04 	.word	0x20000b04
  401374:	00400e75 	.word	0x00400e75
  401378:	00400e0d 	.word	0x00400e0d
  40137c:	00402b79 	.word	0x00402b79
  401380:	00402da5 	.word	0x00402da5
  401384:	00402a8d 	.word	0x00402a8d
  401388:	00400da5 	.word	0x00400da5

0040138c <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  40138c:	2301      	movs	r3, #1
  40138e:	fa03 f101 	lsl.w	r1, r3, r1
  401392:	6101      	str	r1, [r0, #16]
  401394:	4770      	bx	lr
  401396:	bf00      	nop

00401398 <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
  401398:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40139c:	6143      	str	r3, [r0, #20]
  40139e:	4770      	bx	lr

004013a0 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
  4013a0:	6a00      	ldr	r0, [r0, #32]
}
  4013a2:	4770      	bx	lr

004013a4 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4013a4:	2301      	movs	r3, #1
  4013a6:	6003      	str	r3, [r0, #0]
  4013a8:	4770      	bx	lr
  4013aa:	bf00      	nop

004013ac <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  4013ac:	6843      	ldr	r3, [r0, #4]
  4013ae:	f023 0301 	bic.w	r3, r3, #1
  4013b2:	6043      	str	r3, [r0, #4]
  4013b4:	4770      	bx	lr
  4013b6:	bf00      	nop

004013b8 <dacc_set_writeprotect>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_enable 1 to enable, 0 to disable.
 */
void dacc_set_writeprotect(Dacc *p_dacc, uint32_t ul_enable)
{
	if (ul_enable) {
  4013b8:	b119      	cbz	r1, 4013c2 <dacc_set_writeprotect+0xa>
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY)
  4013ba:	4b04      	ldr	r3, [pc, #16]	; (4013cc <dacc_set_writeprotect+0x14>)
  4013bc:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  4013c0:	4770      	bx	lr
			          | DACC_WPMR_WPEN;
	} else {
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY);
  4013c2:	4b03      	ldr	r3, [pc, #12]	; (4013d0 <dacc_set_writeprotect+0x18>)
  4013c4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  4013c8:	4770      	bx	lr
  4013ca:	bf00      	nop
  4013cc:	44414301 	.word	0x44414301
  4013d0:	44414300 	.word	0x44414300

004013d4 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
  4013d4:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
  4013d6:	6844      	ldr	r4, [r0, #4]
  4013d8:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
  4013dc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
  4013e0:	0209      	lsls	r1, r1, #8
  4013e2:	b289      	uxth	r1, r1
  4013e4:	430c      	orrs	r4, r1
	if (ul_maxs) {
  4013e6:	b112      	cbz	r2, 4013ee <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
  4013e8:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  4013ec:	e001      	b.n	4013f2 <dacc_set_timing+0x1e>
	} else {
		mr &= ~DACC_MR_MAXS;
  4013ee:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  4013f2:	061b      	lsls	r3, r3, #24
  4013f4:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  4013f8:	431c      	orrs	r4, r3
	p_dacc->DACC_MR = mr;
  4013fa:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
  4013fc:	2000      	movs	r0, #0
  4013fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401402:	4770      	bx	lr

00401404 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  401404:	2901      	cmp	r1, #1
  401406:	d805      	bhi.n	401414 <dacc_enable_channel+0x10>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  401408:	2301      	movs	r3, #1
  40140a:	fa03 f101 	lsl.w	r1, r3, r1
  40140e:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  401410:	2000      	movs	r0, #0
  401412:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  401414:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  401416:	4770      	bx	lr

00401418 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401418:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40141a:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  40141c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401420:	d02e      	beq.n	401480 <pio_set_peripheral+0x68>
  401422:	d808      	bhi.n	401436 <pio_set_peripheral+0x1e>
  401424:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401428:	d014      	beq.n	401454 <pio_set_peripheral+0x3c>
  40142a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40142e:	d01d      	beq.n	40146c <pio_set_peripheral+0x54>
  401430:	2900      	cmp	r1, #0
  401432:	d135      	bne.n	4014a0 <pio_set_peripheral+0x88>
  401434:	e035      	b.n	4014a2 <pio_set_peripheral+0x8a>
  401436:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40143a:	d032      	beq.n	4014a2 <pio_set_peripheral+0x8a>
  40143c:	d803      	bhi.n	401446 <pio_set_peripheral+0x2e>
  40143e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401442:	d027      	beq.n	401494 <pio_set_peripheral+0x7c>
  401444:	e02c      	b.n	4014a0 <pio_set_peripheral+0x88>
  401446:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40144a:	d02a      	beq.n	4014a2 <pio_set_peripheral+0x8a>
  40144c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401450:	d027      	beq.n	4014a2 <pio_set_peripheral+0x8a>
  401452:	e025      	b.n	4014a0 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401454:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401456:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401458:	43d3      	mvns	r3, r2
  40145a:	4021      	ands	r1, r4
  40145c:	4019      	ands	r1, r3
  40145e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401460:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401462:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401464:	4021      	ands	r1, r4
  401466:	400b      	ands	r3, r1
  401468:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40146a:	e019      	b.n	4014a0 <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40146c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40146e:	4313      	orrs	r3, r2
  401470:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401472:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401474:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401476:	400b      	ands	r3, r1
  401478:	ea23 0302 	bic.w	r3, r3, r2
  40147c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40147e:	e00f      	b.n	4014a0 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401480:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401482:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401484:	400b      	ands	r3, r1
  401486:	ea23 0302 	bic.w	r3, r3, r2
  40148a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40148c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40148e:	4313      	orrs	r3, r2
  401490:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401492:	e005      	b.n	4014a0 <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401494:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401496:	4313      	orrs	r3, r2
  401498:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40149a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40149c:	4313      	orrs	r3, r2
  40149e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4014a0:	6042      	str	r2, [r0, #4]
}
  4014a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014a6:	4770      	bx	lr

004014a8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4014a8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4014aa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4014ac:	9c01      	ldr	r4, [sp, #4]
  4014ae:	b10c      	cbz	r4, 4014b4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4014b0:	6641      	str	r1, [r0, #100]	; 0x64
  4014b2:	e000      	b.n	4014b6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4014b4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4014b6:	b10b      	cbz	r3, 4014bc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4014b8:	6501      	str	r1, [r0, #80]	; 0x50
  4014ba:	e000      	b.n	4014be <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4014bc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4014be:	b10a      	cbz	r2, 4014c4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4014c0:	6301      	str	r1, [r0, #48]	; 0x30
  4014c2:	e000      	b.n	4014c6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4014c4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4014c6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4014c8:	6001      	str	r1, [r0, #0]
}
  4014ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4014ce:	4770      	bx	lr

004014d0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4014d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4014d2:	4770      	bx	lr

004014d4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4014d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4014d6:	4770      	bx	lr

004014d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4014d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014dc:	4680      	mov	r8, r0
  4014de:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4014e0:	4b12      	ldr	r3, [pc, #72]	; (40152c <pio_handler_process+0x54>)
  4014e2:	4798      	blx	r3
  4014e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4014e6:	4640      	mov	r0, r8
  4014e8:	4b11      	ldr	r3, [pc, #68]	; (401530 <pio_handler_process+0x58>)
  4014ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4014ec:	4005      	ands	r5, r0
  4014ee:	d012      	beq.n	401516 <pio_handler_process+0x3e>
  4014f0:	4c10      	ldr	r4, [pc, #64]	; (401534 <pio_handler_process+0x5c>)
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4014f2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  4014f6:	42b3      	cmp	r3, r6
  4014f8:	d10a      	bne.n	401510 <pio_handler_process+0x38>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4014fa:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4014fe:	4229      	tst	r1, r5
  401500:	d006      	beq.n	401510 <pio_handler_process+0x38>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401502:	6823      	ldr	r3, [r4, #0]
  401504:	4630      	mov	r0, r6
  401506:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401508:	f854 3c08 	ldr.w	r3, [r4, #-8]
  40150c:	ea25 0503 	bic.w	r5, r5, r3
  401510:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401512:	2d00      	cmp	r5, #0
  401514:	d1ed      	bne.n	4014f2 <pio_handler_process+0x1a>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401516:	4b08      	ldr	r3, [pc, #32]	; (401538 <pio_handler_process+0x60>)
  401518:	681b      	ldr	r3, [r3, #0]
  40151a:	b123      	cbz	r3, 401526 <pio_handler_process+0x4e>
		if (pio_capture_handler) {
  40151c:	4b07      	ldr	r3, [pc, #28]	; (40153c <pio_handler_process+0x64>)
  40151e:	681b      	ldr	r3, [r3, #0]
  401520:	b10b      	cbz	r3, 401526 <pio_handler_process+0x4e>
			pio_capture_handler(p_pio);
  401522:	4640      	mov	r0, r8
  401524:	4798      	blx	r3
  401526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40152a:	bf00      	nop
  40152c:	004014d1 	.word	0x004014d1
  401530:	004014d5 	.word	0x004014d5
  401534:	20000b24 	.word	0x20000b24
  401538:	20000c38 	.word	0x20000c38
  40153c:	20000b14 	.word	0x20000b14

00401540 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401540:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401542:	4802      	ldr	r0, [pc, #8]	; (40154c <PIOA_Handler+0xc>)
  401544:	210b      	movs	r1, #11
  401546:	4b02      	ldr	r3, [pc, #8]	; (401550 <PIOA_Handler+0x10>)
  401548:	4798      	blx	r3
  40154a:	bd08      	pop	{r3, pc}
  40154c:	400e0e00 	.word	0x400e0e00
  401550:	004014d9 	.word	0x004014d9

00401554 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401554:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401556:	4802      	ldr	r0, [pc, #8]	; (401560 <PIOB_Handler+0xc>)
  401558:	210c      	movs	r1, #12
  40155a:	4b02      	ldr	r3, [pc, #8]	; (401564 <PIOB_Handler+0x10>)
  40155c:	4798      	blx	r3
  40155e:	bd08      	pop	{r3, pc}
  401560:	400e1000 	.word	0x400e1000
  401564:	004014d9 	.word	0x004014d9

00401568 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401568:	4b17      	ldr	r3, [pc, #92]	; (4015c8 <pmc_switch_mck_to_pllack+0x60>)
  40156a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40156c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  401570:	4310      	orrs	r0, r2
  401572:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401576:	f013 0f08 	tst.w	r3, #8
  40157a:	d109      	bne.n	401590 <pmc_switch_mck_to_pllack+0x28>
  40157c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401580:	4911      	ldr	r1, [pc, #68]	; (4015c8 <pmc_switch_mck_to_pllack+0x60>)
  401582:	e001      	b.n	401588 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401584:	3b01      	subs	r3, #1
  401586:	d019      	beq.n	4015bc <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401588:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40158a:	f012 0f08 	tst.w	r2, #8
  40158e:	d0f9      	beq.n	401584 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401590:	4b0d      	ldr	r3, [pc, #52]	; (4015c8 <pmc_switch_mck_to_pllack+0x60>)
  401592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401594:	f022 0203 	bic.w	r2, r2, #3
  401598:	f042 0202 	orr.w	r2, r2, #2
  40159c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40159e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4015a0:	f010 0008 	ands.w	r0, r0, #8
  4015a4:	d10c      	bne.n	4015c0 <pmc_switch_mck_to_pllack+0x58>
  4015a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4015aa:	4907      	ldr	r1, [pc, #28]	; (4015c8 <pmc_switch_mck_to_pllack+0x60>)
  4015ac:	e001      	b.n	4015b2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4015ae:	3b01      	subs	r3, #1
  4015b0:	d008      	beq.n	4015c4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4015b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4015b4:	f012 0f08 	tst.w	r2, #8
  4015b8:	d0f9      	beq.n	4015ae <pmc_switch_mck_to_pllack+0x46>
  4015ba:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4015bc:	2001      	movs	r0, #1
  4015be:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4015c0:	2000      	movs	r0, #0
  4015c2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4015c4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4015c6:	4770      	bx	lr
  4015c8:	400e0400 	.word	0x400e0400

004015cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4015cc:	b138      	cbz	r0, 4015de <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015ce:	4911      	ldr	r1, [pc, #68]	; (401614 <pmc_switch_mainck_to_xtal+0x48>)
  4015d0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015d2:	4a11      	ldr	r2, [pc, #68]	; (401618 <pmc_switch_mainck_to_xtal+0x4c>)
  4015d4:	401a      	ands	r2, r3
  4015d6:	4b11      	ldr	r3, [pc, #68]	; (40161c <pmc_switch_mainck_to_xtal+0x50>)
  4015d8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015da:	620b      	str	r3, [r1, #32]
  4015dc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015de:	4a0d      	ldr	r2, [pc, #52]	; (401614 <pmc_switch_mainck_to_xtal+0x48>)
  4015e0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015e2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4015e6:	f023 0303 	bic.w	r3, r3, #3
  4015ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4015ee:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4015f2:	0209      	lsls	r1, r1, #8
  4015f4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4015f6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4015f8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4015fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015fc:	f013 0f01 	tst.w	r3, #1
  401600:	d0fb      	beq.n	4015fa <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401602:	4a04      	ldr	r2, [pc, #16]	; (401614 <pmc_switch_mainck_to_xtal+0x48>)
  401604:	6a13      	ldr	r3, [r2, #32]
  401606:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40160a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40160e:	6213      	str	r3, [r2, #32]
  401610:	4770      	bx	lr
  401612:	bf00      	nop
  401614:	400e0400 	.word	0x400e0400
  401618:	fec8fffc 	.word	0xfec8fffc
  40161c:	01370002 	.word	0x01370002

00401620 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401620:	4b02      	ldr	r3, [pc, #8]	; (40162c <pmc_osc_is_ready_mainck+0xc>)
  401622:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401624:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401628:	4770      	bx	lr
  40162a:	bf00      	nop
  40162c:	400e0400 	.word	0x400e0400

00401630 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401630:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401634:	4b01      	ldr	r3, [pc, #4]	; (40163c <pmc_disable_pllack+0xc>)
  401636:	629a      	str	r2, [r3, #40]	; 0x28
  401638:	4770      	bx	lr
  40163a:	bf00      	nop
  40163c:	400e0400 	.word	0x400e0400

00401640 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401640:	4b02      	ldr	r3, [pc, #8]	; (40164c <pmc_is_locked_pllack+0xc>)
  401642:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401644:	f000 0002 	and.w	r0, r0, #2
  401648:	4770      	bx	lr
  40164a:	bf00      	nop
  40164c:	400e0400 	.word	0x400e0400

00401650 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401650:	2200      	movs	r2, #0
  401652:	4b01      	ldr	r3, [pc, #4]	; (401658 <pmc_disable_pllbck+0x8>)
  401654:	62da      	str	r2, [r3, #44]	; 0x2c
  401656:	4770      	bx	lr
  401658:	400e0400 	.word	0x400e0400

0040165c <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40165c:	4b02      	ldr	r3, [pc, #8]	; (401668 <pmc_is_locked_pllbck+0xc>)
  40165e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401660:	f000 0004 	and.w	r0, r0, #4
  401664:	4770      	bx	lr
  401666:	bf00      	nop
  401668:	400e0400 	.word	0x400e0400

0040166c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40166c:	2822      	cmp	r0, #34	; 0x22
  40166e:	d820      	bhi.n	4016b2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  401670:	281f      	cmp	r0, #31
  401672:	d80d      	bhi.n	401690 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401674:	4b12      	ldr	r3, [pc, #72]	; (4016c0 <pmc_enable_periph_clk+0x54>)
  401676:	699a      	ldr	r2, [r3, #24]
  401678:	2301      	movs	r3, #1
  40167a:	4083      	lsls	r3, r0
  40167c:	401a      	ands	r2, r3
  40167e:	4293      	cmp	r3, r2
  401680:	d019      	beq.n	4016b6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  401682:	2301      	movs	r3, #1
  401684:	fa03 f000 	lsl.w	r0, r3, r0
  401688:	4b0d      	ldr	r3, [pc, #52]	; (4016c0 <pmc_enable_periph_clk+0x54>)
  40168a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40168c:	2000      	movs	r0, #0
  40168e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401690:	4b0b      	ldr	r3, [pc, #44]	; (4016c0 <pmc_enable_periph_clk+0x54>)
  401692:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  401696:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401698:	2301      	movs	r3, #1
  40169a:	4083      	lsls	r3, r0
  40169c:	401a      	ands	r2, r3
  40169e:	4293      	cmp	r3, r2
  4016a0:	d00b      	beq.n	4016ba <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  4016a2:	2301      	movs	r3, #1
  4016a4:	fa03 f000 	lsl.w	r0, r3, r0
  4016a8:	4b05      	ldr	r3, [pc, #20]	; (4016c0 <pmc_enable_periph_clk+0x54>)
  4016aa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4016ae:	2000      	movs	r0, #0
  4016b0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4016b2:	2001      	movs	r0, #1
  4016b4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4016b6:	2000      	movs	r0, #0
  4016b8:	4770      	bx	lr
  4016ba:	2000      	movs	r0, #0
}
  4016bc:	4770      	bx	lr
  4016be:	bf00      	nop
  4016c0:	400e0400 	.word	0x400e0400

004016c4 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4016c4:	2822      	cmp	r0, #34	; 0x22
  4016c6:	d820      	bhi.n	40170a <pmc_disable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  4016c8:	281f      	cmp	r0, #31
  4016ca:	d80d      	bhi.n	4016e8 <pmc_disable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  4016cc:	4b12      	ldr	r3, [pc, #72]	; (401718 <pmc_disable_periph_clk+0x54>)
  4016ce:	699a      	ldr	r2, [r3, #24]
  4016d0:	2301      	movs	r3, #1
  4016d2:	4083      	lsls	r3, r0
  4016d4:	401a      	ands	r2, r3
  4016d6:	4293      	cmp	r3, r2
  4016d8:	d119      	bne.n	40170e <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR0 = 1 << ul_id;
  4016da:	2301      	movs	r3, #1
  4016dc:	fa03 f000 	lsl.w	r0, r3, r0
  4016e0:	4b0d      	ldr	r3, [pc, #52]	; (401718 <pmc_disable_periph_clk+0x54>)
  4016e2:	6158      	str	r0, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  4016e4:	2000      	movs	r0, #0
  4016e6:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4016e8:	4b0b      	ldr	r3, [pc, #44]	; (401718 <pmc_disable_periph_clk+0x54>)
  4016ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  4016ee:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4016f0:	2301      	movs	r3, #1
  4016f2:	4083      	lsls	r3, r0
  4016f4:	401a      	ands	r2, r3
  4016f6:	4293      	cmp	r3, r2
  4016f8:	d10b      	bne.n	401712 <pmc_disable_periph_clk+0x4e>
			PMC->PMC_PCDR1 = 1 << ul_id;
  4016fa:	2301      	movs	r3, #1
  4016fc:	fa03 f000 	lsl.w	r0, r3, r0
  401700:	4b05      	ldr	r3, [pc, #20]	; (401718 <pmc_disable_periph_clk+0x54>)
  401702:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  401706:	2000      	movs	r0, #0
  401708:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40170a:	2001      	movs	r0, #1
  40170c:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  40170e:	2000      	movs	r0, #0
  401710:	4770      	bx	lr
  401712:	2000      	movs	r0, #0
}
  401714:	4770      	bx	lr
  401716:	bf00      	nop
  401718:	400e0400 	.word	0x400e0400

0040171c <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  40171c:	0200      	lsls	r0, r0, #8
  40171e:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
  401722:	f042 0201 	orr.w	r2, r2, #1
  401726:	4b01      	ldr	r3, [pc, #4]	; (40172c <pmc_switch_udpck_to_pllbck+0x10>)
  401728:	639a      	str	r2, [r3, #56]	; 0x38
  40172a:	4770      	bx	lr
  40172c:	400e0400 	.word	0x400e0400

00401730 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
  401730:	2280      	movs	r2, #128	; 0x80
  401732:	4b01      	ldr	r3, [pc, #4]	; (401738 <pmc_enable_udpck+0x8>)
  401734:	601a      	str	r2, [r3, #0]
  401736:	4770      	bx	lr
  401738:	400e0400 	.word	0x400e0400

0040173c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  40173c:	4b03      	ldr	r3, [pc, #12]	; (40174c <pmc_set_fast_startup_input+0x10>)
  40173e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  401740:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  401744:	4302      	orrs	r2, r0
  401746:	671a      	str	r2, [r3, #112]	; 0x70
  401748:	4770      	bx	lr
  40174a:	bf00      	nop
  40174c:	400e0400 	.word	0x400e0400

00401750 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  401750:	4b02      	ldr	r3, [pc, #8]	; (40175c <pmc_is_wakeup_clocks_restored+0xc>)
  401752:	7818      	ldrb	r0, [r3, #0]
}
  401754:	f080 0001 	eor.w	r0, r0, #1
  401758:	4770      	bx	lr
  40175a:	bf00      	nop
  40175c:	20000b88 	.word	0x20000b88

00401760 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  401760:	0189      	lsls	r1, r1, #6
  401762:	2302      	movs	r3, #2
  401764:	5043      	str	r3, [r0, r1]
  401766:	4770      	bx	lr

00401768 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
  401768:	4603      	mov	r3, r0
  40176a:	bb58      	cbnz	r0, 4017c4 <udd_sleep_mode+0x5c>
  40176c:	4a18      	ldr	r2, [pc, #96]	; (4017d0 <udd_sleep_mode+0x68>)
  40176e:	7812      	ldrb	r2, [r2, #0]
  401770:	b32a      	cbz	r2, 4017be <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401772:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401776:	b672      	cpsid	i
  401778:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40177c:	4a15      	ldr	r2, [pc, #84]	; (4017d4 <udd_sleep_mode+0x6c>)
  40177e:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  401780:	4a15      	ldr	r2, [pc, #84]	; (4017d8 <udd_sleep_mode+0x70>)
  401782:	7890      	ldrb	r0, [r2, #2]
  401784:	3801      	subs	r0, #1
  401786:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401788:	b9c9      	cbnz	r1, 4017be <udd_sleep_mode+0x56>
		cpu_irq_enable();
  40178a:	2101      	movs	r1, #1
  40178c:	4a11      	ldr	r2, [pc, #68]	; (4017d4 <udd_sleep_mode+0x6c>)
  40178e:	7011      	strb	r1, [r2, #0]
  401790:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401794:	b662      	cpsie	i
  401796:	e012      	b.n	4017be <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401798:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40179c:	b672      	cpsid	i
  40179e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4017a2:	2000      	movs	r0, #0
  4017a4:	4a0b      	ldr	r2, [pc, #44]	; (4017d4 <udd_sleep_mode+0x6c>)
  4017a6:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4017a8:	4a0b      	ldr	r2, [pc, #44]	; (4017d8 <udd_sleep_mode+0x70>)
  4017aa:	7890      	ldrb	r0, [r2, #2]
  4017ac:	3001      	adds	r0, #1
  4017ae:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4017b0:	b929      	cbnz	r1, 4017be <udd_sleep_mode+0x56>
		cpu_irq_enable();
  4017b2:	2101      	movs	r1, #1
  4017b4:	4a07      	ldr	r2, [pc, #28]	; (4017d4 <udd_sleep_mode+0x6c>)
  4017b6:	7011      	strb	r1, [r2, #0]
  4017b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4017bc:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4017be:	4a04      	ldr	r2, [pc, #16]	; (4017d0 <udd_sleep_mode+0x68>)
  4017c0:	7013      	strb	r3, [r2, #0]
  4017c2:	4770      	bx	lr
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  4017c4:	4a02      	ldr	r2, [pc, #8]	; (4017d0 <udd_sleep_mode+0x68>)
  4017c6:	7812      	ldrb	r2, [r2, #0]
  4017c8:	2a00      	cmp	r2, #0
  4017ca:	d0e5      	beq.n	401798 <udd_sleep_mode+0x30>
  4017cc:	e7f7      	b.n	4017be <udd_sleep_mode+0x56>
  4017ce:	bf00      	nop
  4017d0:	20000bc8 	.word	0x20000bc8
  4017d4:	200000b0 	.word	0x200000b0
  4017d8:	20000c30 	.word	0x20000c30

004017dc <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  4017dc:	4a03      	ldr	r2, [pc, #12]	; (4017ec <udd_ctrl_init+0x10>)
  4017de:	2300      	movs	r3, #0
  4017e0:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4017e2:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4017e4:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4017e6:	4a02      	ldr	r2, [pc, #8]	; (4017f0 <udd_ctrl_init+0x14>)
  4017e8:	7013      	strb	r3, [r2, #0]
  4017ea:	4770      	bx	lr
  4017ec:	20000c3c 	.word	0x20000c3c
  4017f0:	20000bcd 	.word	0x20000bcd

004017f4 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  4017f4:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4017f6:	2205      	movs	r2, #5
  4017f8:	4b0e      	ldr	r3, [pc, #56]	; (401834 <udd_ctrl_stall_data+0x40>)
  4017fa:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4017fc:	4b0e      	ldr	r3, [pc, #56]	; (401838 <udd_ctrl_stall_data+0x44>)
  4017fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401800:	9200      	str	r2, [sp, #0]
  401802:	9a00      	ldr	r2, [sp, #0]
  401804:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401808:	9200      	str	r2, [sp, #0]
  40180a:	9a00      	ldr	r2, [sp, #0]
  40180c:	f042 0220 	orr.w	r2, r2, #32
  401810:	9200      	str	r2, [sp, #0]
  401812:	9a00      	ldr	r2, [sp, #0]
  401814:	631a      	str	r2, [r3, #48]	; 0x30
  401816:	2300      	movs	r3, #0
  401818:	9301      	str	r3, [sp, #4]
  40181a:	9b01      	ldr	r3, [sp, #4]
  40181c:	2b13      	cmp	r3, #19
  40181e:	d806      	bhi.n	40182e <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401820:	bf00      	nop
  401822:	9b01      	ldr	r3, [sp, #4]
  401824:	3301      	adds	r3, #1
  401826:	9301      	str	r3, [sp, #4]
  401828:	9b01      	ldr	r3, [sp, #4]
  40182a:	2b13      	cmp	r3, #19
  40182c:	d9f8      	bls.n	401820 <udd_ctrl_stall_data+0x2c>
}
  40182e:	b002      	add	sp, #8
  401830:	4770      	bx	lr
  401832:	bf00      	nop
  401834:	20000bcd 	.word	0x20000bcd
  401838:	40034000 	.word	0x40034000

0040183c <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  40183c:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  40183e:	2203      	movs	r2, #3
  401840:	4b0e      	ldr	r3, [pc, #56]	; (40187c <udd_ctrl_send_zlp_in+0x40>)
  401842:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  401844:	4b0e      	ldr	r3, [pc, #56]	; (401880 <udd_ctrl_send_zlp_in+0x44>)
  401846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401848:	9200      	str	r2, [sp, #0]
  40184a:	9a00      	ldr	r2, [sp, #0]
  40184c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401850:	9200      	str	r2, [sp, #0]
  401852:	9a00      	ldr	r2, [sp, #0]
  401854:	f042 0210 	orr.w	r2, r2, #16
  401858:	9200      	str	r2, [sp, #0]
  40185a:	9a00      	ldr	r2, [sp, #0]
  40185c:	631a      	str	r2, [r3, #48]	; 0x30
  40185e:	2300      	movs	r3, #0
  401860:	9301      	str	r3, [sp, #4]
  401862:	9b01      	ldr	r3, [sp, #4]
  401864:	2b13      	cmp	r3, #19
  401866:	d806      	bhi.n	401876 <udd_ctrl_send_zlp_in+0x3a>
  401868:	bf00      	nop
  40186a:	9b01      	ldr	r3, [sp, #4]
  40186c:	3301      	adds	r3, #1
  40186e:	9301      	str	r3, [sp, #4]
  401870:	9b01      	ldr	r3, [sp, #4]
  401872:	2b13      	cmp	r3, #19
  401874:	d9f8      	bls.n	401868 <udd_ctrl_send_zlp_in+0x2c>
}
  401876:	b002      	add	sp, #8
  401878:	4770      	bx	lr
  40187a:	bf00      	nop
  40187c:	20000bcd 	.word	0x20000bcd
  401880:	40034000 	.word	0x40034000

00401884 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401884:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401886:	4b02      	ldr	r3, [pc, #8]	; (401890 <udd_ctrl_endofrequest+0xc>)
  401888:	691b      	ldr	r3, [r3, #16]
  40188a:	b103      	cbz	r3, 40188e <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  40188c:	4798      	blx	r3
  40188e:	bd08      	pop	{r3, pc}
  401890:	20000c3c 	.word	0x20000c3c

00401894 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  401894:	b570      	push	{r4, r5, r6, lr}
  401896:	b08a      	sub	sp, #40	; 0x28
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401898:	4b75      	ldr	r3, [pc, #468]	; (401a70 <udd_ctrl_in_sent+0x1dc>)
  40189a:	781b      	ldrb	r3, [r3, #0]
  40189c:	2b03      	cmp	r3, #3
  40189e:	d11d      	bne.n	4018dc <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  4018a0:	4b74      	ldr	r3, [pc, #464]	; (401a74 <udd_ctrl_in_sent+0x1e0>)
  4018a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4018a4:	9200      	str	r2, [sp, #0]
  4018a6:	9a00      	ldr	r2, [sp, #0]
  4018a8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4018ac:	9200      	str	r2, [sp, #0]
  4018ae:	9a00      	ldr	r2, [sp, #0]
  4018b0:	f022 0201 	bic.w	r2, r2, #1
  4018b4:	9200      	str	r2, [sp, #0]
  4018b6:	9a00      	ldr	r2, [sp, #0]
  4018b8:	631a      	str	r2, [r3, #48]	; 0x30
  4018ba:	2300      	movs	r3, #0
  4018bc:	9301      	str	r3, [sp, #4]
  4018be:	9b01      	ldr	r3, [sp, #4]
  4018c0:	2b13      	cmp	r3, #19
  4018c2:	d806      	bhi.n	4018d2 <udd_ctrl_in_sent+0x3e>
  4018c4:	bf00      	nop
  4018c6:	9b01      	ldr	r3, [sp, #4]
  4018c8:	3301      	adds	r3, #1
  4018ca:	9301      	str	r3, [sp, #4]
  4018cc:	9b01      	ldr	r3, [sp, #4]
  4018ce:	2b13      	cmp	r3, #19
  4018d0:	d9f8      	bls.n	4018c4 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  4018d2:	4b69      	ldr	r3, [pc, #420]	; (401a78 <udd_ctrl_in_sent+0x1e4>)
  4018d4:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4018d6:	4b69      	ldr	r3, [pc, #420]	; (401a7c <udd_ctrl_in_sent+0x1e8>)
  4018d8:	4798      	blx	r3
		return;
  4018da:	e0c6      	b.n	401a6a <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  4018dc:	4b68      	ldr	r3, [pc, #416]	; (401a80 <udd_ctrl_in_sent+0x1ec>)
  4018de:	881b      	ldrh	r3, [r3, #0]
  4018e0:	4a68      	ldr	r2, [pc, #416]	; (401a84 <udd_ctrl_in_sent+0x1f0>)
  4018e2:	8994      	ldrh	r4, [r2, #12]
  4018e4:	1ae4      	subs	r4, r4, r3
  4018e6:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  4018e8:	2c00      	cmp	r4, #0
  4018ea:	d133      	bne.n	401954 <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4018ec:	4a66      	ldr	r2, [pc, #408]	; (401a88 <udd_ctrl_in_sent+0x1f4>)
  4018ee:	8811      	ldrh	r1, [r2, #0]
  4018f0:	440b      	add	r3, r1
  4018f2:	b29b      	uxth	r3, r3
  4018f4:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  4018f6:	4a63      	ldr	r2, [pc, #396]	; (401a84 <udd_ctrl_in_sent+0x1f0>)
  4018f8:	88d2      	ldrh	r2, [r2, #6]
  4018fa:	429a      	cmp	r2, r3
  4018fc:	d002      	beq.n	401904 <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  4018fe:	4b63      	ldr	r3, [pc, #396]	; (401a8c <udd_ctrl_in_sent+0x1f8>)
  401900:	781b      	ldrb	r3, [r3, #0]
  401902:	b1eb      	cbz	r3, 401940 <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401904:	2204      	movs	r2, #4
  401906:	4b5a      	ldr	r3, [pc, #360]	; (401a70 <udd_ctrl_in_sent+0x1dc>)
  401908:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  40190a:	4b5a      	ldr	r3, [pc, #360]	; (401a74 <udd_ctrl_in_sent+0x1e0>)
  40190c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40190e:	9202      	str	r2, [sp, #8]
  401910:	9a02      	ldr	r2, [sp, #8]
  401912:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401916:	9202      	str	r2, [sp, #8]
  401918:	9a02      	ldr	r2, [sp, #8]
  40191a:	f022 0201 	bic.w	r2, r2, #1
  40191e:	9202      	str	r2, [sp, #8]
  401920:	9a02      	ldr	r2, [sp, #8]
  401922:	631a      	str	r2, [r3, #48]	; 0x30
  401924:	2300      	movs	r3, #0
  401926:	9303      	str	r3, [sp, #12]
  401928:	9b03      	ldr	r3, [sp, #12]
  40192a:	2b13      	cmp	r3, #19
  40192c:	f200 809d 	bhi.w	401a6a <udd_ctrl_in_sent+0x1d6>
  401930:	bf00      	nop
  401932:	9b03      	ldr	r3, [sp, #12]
  401934:	3301      	adds	r3, #1
  401936:	9303      	str	r3, [sp, #12]
  401938:	9b03      	ldr	r3, [sp, #12]
  40193a:	2b13      	cmp	r3, #19
  40193c:	d9f8      	bls.n	401930 <udd_ctrl_in_sent+0x9c>
  40193e:	e094      	b.n	401a6a <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  401940:	4b50      	ldr	r3, [pc, #320]	; (401a84 <udd_ctrl_in_sent+0x1f0>)
  401942:	695b      	ldr	r3, [r3, #20]
  401944:	b16b      	cbz	r3, 401962 <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  401946:	4798      	blx	r3
  401948:	b158      	cbz	r0, 401962 <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  40194a:	2200      	movs	r2, #0
  40194c:	4b4c      	ldr	r3, [pc, #304]	; (401a80 <udd_ctrl_in_sent+0x1ec>)
  40194e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401950:	4b4c      	ldr	r3, [pc, #304]	; (401a84 <udd_ctrl_in_sent+0x1f0>)
  401952:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401954:	2c3f      	cmp	r4, #63	; 0x3f
  401956:	d904      	bls.n	401962 <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  401958:	2200      	movs	r2, #0
  40195a:	4b4c      	ldr	r3, [pc, #304]	; (401a8c <udd_ctrl_in_sent+0x1f8>)
  40195c:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  40195e:	2440      	movs	r4, #64	; 0x40
  401960:	e002      	b.n	401968 <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  401962:	2201      	movs	r2, #1
  401964:	4b49      	ldr	r3, [pc, #292]	; (401a8c <udd_ctrl_in_sent+0x1f8>)
  401966:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401968:	4b46      	ldr	r3, [pc, #280]	; (401a84 <udd_ctrl_in_sent+0x1f0>)
  40196a:	6899      	ldr	r1, [r3, #8]
  40196c:	4b44      	ldr	r3, [pc, #272]	; (401a80 <udd_ctrl_in_sent+0x1ec>)
  40196e:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401970:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401974:	f1d0 0001 	rsbs	r0, r0, #1
  401978:	bf38      	it	cc
  40197a:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40197c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40197e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401982:	2200      	movs	r2, #0
  401984:	4b42      	ldr	r3, [pc, #264]	; (401a90 <udd_ctrl_in_sent+0x1fc>)
  401986:	701a      	strb	r2, [r3, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  401988:	4b3a      	ldr	r3, [pc, #232]	; (401a74 <udd_ctrl_in_sent+0x1e0>)
  40198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40198c:	f013 0f02 	tst.w	r3, #2
  401990:	d101      	bne.n	401996 <udd_ctrl_in_sent+0x102>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401992:	bb24      	cbnz	r4, 4019de <udd_ctrl_in_sent+0x14a>
  401994:	e02d      	b.n	4019f2 <udd_ctrl_in_sent+0x15e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401996:	b128      	cbz	r0, 4019a4 <udd_ctrl_in_sent+0x110>
		cpu_irq_enable();
  401998:	2201      	movs	r2, #1
  40199a:	4b3d      	ldr	r3, [pc, #244]	; (401a90 <udd_ctrl_in_sent+0x1fc>)
  40199c:	701a      	strb	r2, [r3, #0]
  40199e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4019a2:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  4019a4:	2204      	movs	r2, #4
  4019a6:	4b32      	ldr	r3, [pc, #200]	; (401a70 <udd_ctrl_in_sent+0x1dc>)
  4019a8:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  4019aa:	4b32      	ldr	r3, [pc, #200]	; (401a74 <udd_ctrl_in_sent+0x1e0>)
  4019ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019ae:	9204      	str	r2, [sp, #16]
  4019b0:	9a04      	ldr	r2, [sp, #16]
  4019b2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4019b6:	9204      	str	r2, [sp, #16]
  4019b8:	9a04      	ldr	r2, [sp, #16]
  4019ba:	f022 0201 	bic.w	r2, r2, #1
  4019be:	9204      	str	r2, [sp, #16]
  4019c0:	9a04      	ldr	r2, [sp, #16]
  4019c2:	631a      	str	r2, [r3, #48]	; 0x30
  4019c4:	2300      	movs	r3, #0
  4019c6:	9305      	str	r3, [sp, #20]
  4019c8:	9b05      	ldr	r3, [sp, #20]
  4019ca:	2b13      	cmp	r3, #19
  4019cc:	d84d      	bhi.n	401a6a <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4019ce:	bf00      	nop
  4019d0:	9b05      	ldr	r3, [sp, #20]
  4019d2:	3301      	adds	r3, #1
  4019d4:	9305      	str	r3, [sp, #20]
  4019d6:	9b05      	ldr	r3, [sp, #20]
  4019d8:	2b13      	cmp	r3, #19
  4019da:	d9f8      	bls.n	4019ce <udd_ctrl_in_sent+0x13a>
  4019dc:	e045      	b.n	401a6a <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4019de:	4431      	add	r1, r6
  4019e0:	460b      	mov	r3, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  4019e2:	4d24      	ldr	r5, [pc, #144]	; (401a74 <udd_ctrl_in_sent+0x1e0>)
  4019e4:	f813 2b01 	ldrb.w	r2, [r3], #1
  4019e8:	652a      	str	r2, [r5, #80]	; 0x50
  4019ea:	1a5a      	subs	r2, r3, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  4019ec:	b2d2      	uxtb	r2, r2
  4019ee:	42a2      	cmp	r2, r4
  4019f0:	d3f8      	bcc.n	4019e4 <udd_ctrl_in_sent+0x150>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  4019f2:	4434      	add	r4, r6
  4019f4:	4b22      	ldr	r3, [pc, #136]	; (401a80 <udd_ctrl_in_sent+0x1ec>)
  4019f6:	801c      	strh	r4, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  4019f8:	4b1e      	ldr	r3, [pc, #120]	; (401a74 <udd_ctrl_in_sent+0x1e0>)
  4019fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019fc:	9206      	str	r2, [sp, #24]
  4019fe:	9a06      	ldr	r2, [sp, #24]
  401a00:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a04:	9206      	str	r2, [sp, #24]
  401a06:	9a06      	ldr	r2, [sp, #24]
  401a08:	f042 0210 	orr.w	r2, r2, #16
  401a0c:	9206      	str	r2, [sp, #24]
  401a0e:	9a06      	ldr	r2, [sp, #24]
  401a10:	631a      	str	r2, [r3, #48]	; 0x30
  401a12:	2300      	movs	r3, #0
  401a14:	9307      	str	r3, [sp, #28]
  401a16:	9b07      	ldr	r3, [sp, #28]
  401a18:	2b13      	cmp	r3, #19
  401a1a:	d806      	bhi.n	401a2a <udd_ctrl_in_sent+0x196>
  401a1c:	bf00      	nop
  401a1e:	9b07      	ldr	r3, [sp, #28]
  401a20:	3301      	adds	r3, #1
  401a22:	9307      	str	r3, [sp, #28]
  401a24:	9b07      	ldr	r3, [sp, #28]
  401a26:	2b13      	cmp	r3, #19
  401a28:	d9f8      	bls.n	401a1c <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  401a2a:	4b12      	ldr	r3, [pc, #72]	; (401a74 <udd_ctrl_in_sent+0x1e0>)
  401a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a2e:	9208      	str	r2, [sp, #32]
  401a30:	9a08      	ldr	r2, [sp, #32]
  401a32:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a36:	9208      	str	r2, [sp, #32]
  401a38:	9a08      	ldr	r2, [sp, #32]
  401a3a:	f022 0201 	bic.w	r2, r2, #1
  401a3e:	9208      	str	r2, [sp, #32]
  401a40:	9a08      	ldr	r2, [sp, #32]
  401a42:	631a      	str	r2, [r3, #48]	; 0x30
  401a44:	2300      	movs	r3, #0
  401a46:	9309      	str	r3, [sp, #36]	; 0x24
  401a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a4a:	2b13      	cmp	r3, #19
  401a4c:	d806      	bhi.n	401a5c <udd_ctrl_in_sent+0x1c8>
  401a4e:	bf00      	nop
  401a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a52:	3301      	adds	r3, #1
  401a54:	9309      	str	r3, [sp, #36]	; 0x24
  401a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a58:	2b13      	cmp	r3, #19
  401a5a:	d9f8      	bls.n	401a4e <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401a5c:	b128      	cbz	r0, 401a6a <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  401a5e:	2201      	movs	r2, #1
  401a60:	4b0b      	ldr	r3, [pc, #44]	; (401a90 <udd_ctrl_in_sent+0x1fc>)
  401a62:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401a64:	f3bf 8f5f 	dmb	sy
  401a68:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  401a6a:	b00a      	add	sp, #40	; 0x28
  401a6c:	bd70      	pop	{r4, r5, r6, pc}
  401a6e:	bf00      	nop
  401a70:	20000bcd 	.word	0x20000bcd
  401a74:	40034000 	.word	0x40034000
  401a78:	00401885 	.word	0x00401885
  401a7c:	004017dd 	.word	0x004017dd
  401a80:	20000bca 	.word	0x20000bca
  401a84:	20000c3c 	.word	0x20000c3c
  401a88:	20000b8a 	.word	0x20000b8a
  401a8c:	20000bcc 	.word	0x20000bcc
  401a90:	200000b0 	.word	0x200000b0

00401a94 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401a94:	b538      	push	{r3, r4, r5, lr}
  401a96:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  401a98:	7c44      	ldrb	r4, [r0, #17]
  401a9a:	f014 0f10 	tst.w	r4, #16
  401a9e:	d015      	beq.n	401acc <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  401aa0:	7c44      	ldrb	r4, [r0, #17]
  401aa2:	f36f 1404 	bfc	r4, #4, #1
  401aa6:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401aa8:	6804      	ldr	r4, [r0, #0]
  401aaa:	b17c      	cbz	r4, 401acc <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401aac:	f102 050c 	add.w	r5, r2, #12
  401ab0:	4807      	ldr	r0, [pc, #28]	; (401ad0 <udd_ep_finish_job+0x3c>)
  401ab2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  401ab6:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401aba:	bf18      	it	ne
  401abc:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401ac0:	2901      	cmp	r1, #1
  401ac2:	bf14      	ite	ne
  401ac4:	2000      	movne	r0, #0
  401ac6:	2001      	moveq	r0, #1
  401ac8:	6899      	ldr	r1, [r3, #8]
  401aca:	47a0      	blx	r4
  401acc:	bd38      	pop	{r3, r4, r5, pc}
  401ace:	bf00      	nop
  401ad0:	40034000 	.word	0x40034000

00401ad4 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401ad4:	b084      	sub	sp, #16
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401ad6:	1e42      	subs	r2, r0, #1
  401ad8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401adc:	4b2f      	ldr	r3, [pc, #188]	; (401b9c <udd_ep_ack_out_received+0xc8>)
  401ade:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401ae2:	0083      	lsls	r3, r0, #2
  401ae4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401ae8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_all_banks_received(ep)) {
  401aec:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401aee:	f001 0142 	and.w	r1, r1, #66	; 0x42
  401af2:	2942      	cmp	r1, #66	; 0x42
  401af4:	d00e      	beq.n	401b14 <udd_ep_ack_out_received+0x40>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  401af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401af8:	f011 0f02 	tst.w	r1, #2
  401afc:	d004      	beq.n	401b08 <udd_ep_ack_out_received+0x34>
		// Must be bank0
		ptr_job->bank = 0;
  401afe:	7c51      	ldrb	r1, [r2, #17]
  401b00:	f36f 0183 	bfc	r1, #2, #2
  401b04:	7451      	strb	r1, [r2, #17]
  401b06:	e009      	b.n	401b1c <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  401b08:	7c51      	ldrb	r1, [r2, #17]
  401b0a:	2001      	movs	r0, #1
  401b0c:	f360 0183 	bfi	r1, r0, #2, #2
  401b10:	7451      	strb	r1, [r2, #17]
  401b12:	e024      	b.n	401b5e <udd_ep_ack_out_received+0x8a>
	}
	if (ptr_job->bank == 0) {
  401b14:	7c51      	ldrb	r1, [r2, #17]
  401b16:	f011 0f0c 	tst.w	r1, #12
  401b1a:	d120      	bne.n	401b5e <udd_ep_ack_out_received+0x8a>
		udd_ack_bank0_received(ep);
  401b1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401b1e:	9100      	str	r1, [sp, #0]
  401b20:	9900      	ldr	r1, [sp, #0]
  401b22:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401b26:	9100      	str	r1, [sp, #0]
  401b28:	9900      	ldr	r1, [sp, #0]
  401b2a:	f021 0102 	bic.w	r1, r1, #2
  401b2e:	9100      	str	r1, [sp, #0]
  401b30:	9900      	ldr	r1, [sp, #0]
  401b32:	6319      	str	r1, [r3, #48]	; 0x30
  401b34:	2300      	movs	r3, #0
  401b36:	9301      	str	r3, [sp, #4]
  401b38:	9b01      	ldr	r3, [sp, #4]
  401b3a:	2b13      	cmp	r3, #19
  401b3c:	d806      	bhi.n	401b4c <udd_ep_ack_out_received+0x78>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401b3e:	bf00      	nop
  401b40:	9b01      	ldr	r3, [sp, #4]
  401b42:	3301      	adds	r3, #1
  401b44:	9301      	str	r3, [sp, #4]
  401b46:	9b01      	ldr	r3, [sp, #4]
  401b48:	2b13      	cmp	r3, #19
  401b4a:	d9f8      	bls.n	401b3e <udd_ep_ack_out_received+0x6a>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401b4c:	b318      	cbz	r0, 401b96 <udd_ep_ack_out_received+0xc2>
  401b4e:	2803      	cmp	r0, #3
  401b50:	d021      	beq.n	401b96 <udd_ep_ack_out_received+0xc2>
			ptr_job->bank = 1;
  401b52:	7c53      	ldrb	r3, [r2, #17]
  401b54:	2101      	movs	r1, #1
  401b56:	f361 0383 	bfi	r3, r1, #2, #2
  401b5a:	7453      	strb	r3, [r2, #17]
  401b5c:	e01b      	b.n	401b96 <udd_ep_ack_out_received+0xc2>
		}
	} else {
		udd_ack_bank1_received(ep);
  401b5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401b60:	9102      	str	r1, [sp, #8]
  401b62:	9902      	ldr	r1, [sp, #8]
  401b64:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401b68:	9102      	str	r1, [sp, #8]
  401b6a:	9902      	ldr	r1, [sp, #8]
  401b6c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  401b70:	9102      	str	r1, [sp, #8]
  401b72:	9902      	ldr	r1, [sp, #8]
  401b74:	6319      	str	r1, [r3, #48]	; 0x30
  401b76:	2300      	movs	r3, #0
  401b78:	9303      	str	r3, [sp, #12]
  401b7a:	9b03      	ldr	r3, [sp, #12]
  401b7c:	2b13      	cmp	r3, #19
  401b7e:	d806      	bhi.n	401b8e <udd_ep_ack_out_received+0xba>
  401b80:	bf00      	nop
  401b82:	9b03      	ldr	r3, [sp, #12]
  401b84:	3301      	adds	r3, #1
  401b86:	9303      	str	r3, [sp, #12]
  401b88:	9b03      	ldr	r3, [sp, #12]
  401b8a:	2b13      	cmp	r3, #19
  401b8c:	d9f8      	bls.n	401b80 <udd_ep_ack_out_received+0xac>
		ptr_job->bank = 0;
  401b8e:	7c53      	ldrb	r3, [r2, #17]
  401b90:	f36f 0383 	bfc	r3, #2, #2
  401b94:	7453      	strb	r3, [r2, #17]
	}
}
  401b96:	b004      	add	sp, #16
  401b98:	4770      	bx	lr
  401b9a:	bf00      	nop
  401b9c:	20000b8c 	.word	0x20000b8c

00401ba0 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401ba0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  401ba4:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401ba6:	4607      	mov	r7, r0
  401ba8:	1e46      	subs	r6, r0, #1
  401baa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401bae:	4b52      	ldr	r3, [pc, #328]	; (401cf8 <udd_ep_in_sent+0x158>)
  401bb0:	eb03 0686 	add.w	r6, r3, r6, lsl #2

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401bb4:	7c73      	ldrb	r3, [r6, #17]
  401bb6:	f3c3 0381 	ubfx	r3, r3, #2, #2
  401bba:	b120      	cbz	r0, 401bc6 <udd_ep_in_sent+0x26>
  401bbc:	2803      	cmp	r0, #3
  401bbe:	bf14      	ite	ne
  401bc0:	2202      	movne	r2, #2
  401bc2:	2201      	moveq	r2, #1
  401bc4:	e000      	b.n	401bc8 <udd_ep_in_sent+0x28>
  401bc6:	2201      	movs	r2, #1
  401bc8:	429a      	cmp	r2, r3
  401bca:	f340 8089 	ble.w	401ce0 <udd_ep_in_sent+0x140>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  401bce:	68f3      	ldr	r3, [r6, #12]
  401bd0:	68b2      	ldr	r2, [r6, #8]
  401bd2:	4293      	cmp	r3, r2
  401bd4:	d304      	bcc.n	401be0 <udd_ep_in_sent+0x40>
  401bd6:	7c74      	ldrb	r4, [r6, #17]
  401bd8:	f014 0f40 	tst.w	r4, #64	; 0x40
  401bdc:	f000 8082 	beq.w	401ce4 <udd_ep_in_sent+0x144>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401be0:	6874      	ldr	r4, [r6, #4]
  401be2:	441c      	add	r4, r3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401be4:	ebc3 0902 	rsb	r9, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401be8:	8a32      	ldrh	r2, [r6, #16]
  401bea:	f3c2 0209 	ubfx	r2, r2, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  401bee:	4591      	cmp	r9, r2
static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
  401bf0:	bf26      	itte	cs
  401bf2:	4691      	movcs	r9, r2
	bool is_short_pkt = false;
  401bf4:	f04f 0800 	movcs.w	r8, #0

	// Packet size
	if (nb_remain < pkt_size) {
		pkt_size = nb_remain;
		is_short_pkt = true;
  401bf8:	f04f 0801 	movcc.w	r8, #1
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  401bfc:	444b      	add	r3, r9
  401bfe:	60f3      	str	r3, [r6, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401c00:	f1b9 0f07 	cmp.w	r9, #7
  401c04:	d926      	bls.n	401c54 <udd_ep_in_sent+0xb4>
  401c06:	4623      	mov	r3, r4
  401c08:	f1a9 0a08 	sub.w	sl, r9, #8
  401c0c:	ea4f 0ada 	mov.w	sl, sl, lsr #3
  401c10:	f104 0c08 	add.w	ip, r4, #8
  401c14:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  401c18:	0082      	lsls	r2, r0, #2
  401c1a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401c1e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401c22:	781d      	ldrb	r5, [r3, #0]
  401c24:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401c26:	785d      	ldrb	r5, [r3, #1]
  401c28:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401c2a:	789d      	ldrb	r5, [r3, #2]
  401c2c:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401c2e:	78dd      	ldrb	r5, [r3, #3]
  401c30:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401c32:	791d      	ldrb	r5, [r3, #4]
  401c34:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401c36:	795d      	ldrb	r5, [r3, #5]
  401c38:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401c3a:	799d      	ldrb	r5, [r3, #6]
  401c3c:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401c3e:	79dd      	ldrb	r5, [r3, #7]
  401c40:	6515      	str	r5, [r2, #80]	; 0x50
  401c42:	3308      	adds	r3, #8

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401c44:	4563      	cmp	r3, ip
  401c46:	d1ec      	bne.n	401c22 <udd_ep_in_sent+0x82>
  401c48:	f10a 0a01 	add.w	sl, sl, #1
  401c4c:	eb04 04ca 	add.w	r4, r4, sl, lsl #3
  401c50:	f009 0907 	and.w	r9, r9, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401c54:	f1b9 0f00 	cmp.w	r9, #0
  401c58:	d009      	beq.n	401c6e <udd_ep_in_sent+0xce>
  401c5a:	44a1      	add	r9, r4
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401c5c:	4d27      	ldr	r5, [pc, #156]	; (401cfc <udd_ep_in_sent+0x15c>)
  401c5e:	f814 2b01 	ldrb.w	r2, [r4], #1
  401c62:	f107 0314 	add.w	r3, r7, #20
  401c66:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401c6a:	454c      	cmp	r4, r9
  401c6c:	d1f7      	bne.n	401c5e <udd_ep_in_sent+0xbe>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  401c6e:	7c73      	ldrb	r3, [r6, #17]
  401c70:	f3c3 0281 	ubfx	r2, r3, #2, #2
  401c74:	3201      	adds	r2, #1
  401c76:	f362 0383 	bfi	r3, r2, #2, #2
  401c7a:	7473      	strb	r3, [r6, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401c7c:	b1e1      	cbz	r1, 401cb8 <udd_ep_in_sent+0x118>
  401c7e:	0080      	lsls	r0, r0, #2
  401c80:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  401c84:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  401c88:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c8a:	9300      	str	r3, [sp, #0]
  401c8c:	9b00      	ldr	r3, [sp, #0]
  401c8e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401c92:	9300      	str	r3, [sp, #0]
  401c94:	9b00      	ldr	r3, [sp, #0]
  401c96:	f043 0310 	orr.w	r3, r3, #16
  401c9a:	9300      	str	r3, [sp, #0]
  401c9c:	9b00      	ldr	r3, [sp, #0]
  401c9e:	6303      	str	r3, [r0, #48]	; 0x30
  401ca0:	2300      	movs	r3, #0
  401ca2:	9301      	str	r3, [sp, #4]
  401ca4:	9b01      	ldr	r3, [sp, #4]
  401ca6:	2b13      	cmp	r3, #19
  401ca8:	d806      	bhi.n	401cb8 <udd_ep_in_sent+0x118>
  401caa:	bf00      	nop
  401cac:	9b01      	ldr	r3, [sp, #4]
  401cae:	3301      	adds	r3, #1
  401cb0:	9301      	str	r3, [sp, #4]
  401cb2:	9b01      	ldr	r3, [sp, #4]
  401cb4:	2b13      	cmp	r3, #19
  401cb6:	d9f8      	bls.n	401caa <udd_ep_in_sent+0x10a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  401cb8:	f1b8 0f00 	cmp.w	r8, #0
  401cbc:	d003      	beq.n	401cc6 <udd_ep_in_sent+0x126>
		ptr_job->b_shortpacket = false;
  401cbe:	7c73      	ldrb	r3, [r6, #17]
  401cc0:	f36f 1386 	bfc	r3, #6, #1
  401cc4:	7473      	strb	r3, [r6, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401cc6:	68f2      	ldr	r2, [r6, #12]
  401cc8:	68b3      	ldr	r3, [r6, #8]
  401cca:	429a      	cmp	r2, r3
  401ccc:	d30c      	bcc.n	401ce8 <udd_ep_in_sent+0x148>
			&& (!ptr_job->b_shortpacket)) {
  401cce:	7c73      	ldrb	r3, [r6, #17]
  401cd0:	f013 0f40 	tst.w	r3, #64	; 0x40
  401cd4:	d10a      	bne.n	401cec <udd_ep_in_sent+0x14c>
		ptr_job->b_buf_end = true;
  401cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401cda:	7473      	strb	r3, [r6, #17]
		return false;
  401cdc:	2000      	movs	r0, #0
  401cde:	e006      	b.n	401cee <udd_ep_in_sent+0x14e>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  401ce0:	2001      	movs	r0, #1
  401ce2:	e004      	b.n	401cee <udd_ep_in_sent+0x14e>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  401ce4:	2000      	movs	r0, #0
  401ce6:	e002      	b.n	401cee <udd_ep_in_sent+0x14e>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  401ce8:	2001      	movs	r0, #1
  401cea:	e000      	b.n	401cee <udd_ep_in_sent+0x14e>
  401cec:	2001      	movs	r0, #1
}
  401cee:	b003      	add	sp, #12
  401cf0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  401cf4:	4770      	bx	lr
  401cf6:	bf00      	nop
  401cf8:	20000b8c 	.word	0x20000b8c
  401cfc:	40034000 	.word	0x40034000

00401d00 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d04:	b0b0      	sub	sp, #192	; 0xc0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401d06:	4b94      	ldr	r3, [pc, #592]	; (401f58 <UDP_Handler+0x258>)
  401d08:	4798      	blx	r3
  401d0a:	b960      	cbnz	r0, 401d26 <UDP_Handler+0x26>
  401d0c:	4b93      	ldr	r3, [pc, #588]	; (401f5c <UDP_Handler+0x25c>)
  401d0e:	69db      	ldr	r3, [r3, #28]
  401d10:	f413 7f80 	tst.w	r3, #256	; 0x100
  401d14:	d107      	bne.n	401d26 <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401d16:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401d18:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401d1c:	2200      	movs	r2, #0
  401d1e:	4b90      	ldr	r3, [pc, #576]	; (401f60 <UDP_Handler+0x260>)
  401d20:	701a      	strb	r2, [r3, #0]
		return;
  401d22:	f000 bd15 	b.w	402750 <UDP_Handler+0xa50>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  401d26:	2022      	movs	r0, #34	; 0x22
  401d28:	4b8e      	ldr	r3, [pc, #568]	; (401f64 <UDP_Handler+0x264>)
  401d2a:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401d2c:	4b8b      	ldr	r3, [pc, #556]	; (401f5c <UDP_Handler+0x25c>)
  401d2e:	699b      	ldr	r3, [r3, #24]
  401d30:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401d34:	d00c      	beq.n	401d50 <UDP_Handler+0x50>
  401d36:	4b89      	ldr	r3, [pc, #548]	; (401f5c <UDP_Handler+0x25c>)
  401d38:	69db      	ldr	r3, [r3, #28]
  401d3a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401d3e:	d007      	beq.n	401d50 <UDP_Handler+0x50>
		udd_ack_sof();
  401d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401d44:	4b85      	ldr	r3, [pc, #532]	; (401f5c <UDP_Handler+0x25c>)
  401d46:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401d48:	4b87      	ldr	r3, [pc, #540]	; (401f68 <UDP_Handler+0x268>)
  401d4a:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401d4c:	f000 bd00 	b.w	402750 <UDP_Handler+0xa50>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  401d50:	4b82      	ldr	r3, [pc, #520]	; (401f5c <UDP_Handler+0x25c>)
  401d52:	69db      	ldr	r3, [r3, #28]
  401d54:	f013 0f01 	tst.w	r3, #1
  401d58:	f000 81f1 	beq.w	40213e <UDP_Handler+0x43e>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  401d5c:	4b7f      	ldr	r3, [pc, #508]	; (401f5c <UDP_Handler+0x25c>)
  401d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d60:	f013 0f04 	tst.w	r3, #4
  401d64:	f000 80c0 	beq.w	401ee8 <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401d68:	4b80      	ldr	r3, [pc, #512]	; (401f6c <UDP_Handler+0x26c>)
  401d6a:	781b      	ldrb	r3, [r3, #0]
  401d6c:	b11b      	cbz	r3, 401d76 <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  401d6e:	4b80      	ldr	r3, [pc, #512]	; (401f70 <UDP_Handler+0x270>)
  401d70:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  401d72:	4b80      	ldr	r3, [pc, #512]	; (401f74 <UDP_Handler+0x274>)
  401d74:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  401d76:	4b79      	ldr	r3, [pc, #484]	; (401f5c <UDP_Handler+0x25c>)
  401d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d7a:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401d7e:	2b08      	cmp	r3, #8
  401d80:	d01c      	beq.n	401dbc <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  401d82:	4b76      	ldr	r3, [pc, #472]	; (401f5c <UDP_Handler+0x25c>)
  401d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401d86:	9202      	str	r2, [sp, #8]
  401d88:	9a02      	ldr	r2, [sp, #8]
  401d8a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401d8e:	9202      	str	r2, [sp, #8]
  401d90:	9a02      	ldr	r2, [sp, #8]
  401d92:	f022 0204 	bic.w	r2, r2, #4
  401d96:	9202      	str	r2, [sp, #8]
  401d98:	9a02      	ldr	r2, [sp, #8]
  401d9a:	631a      	str	r2, [r3, #48]	; 0x30
  401d9c:	2300      	movs	r3, #0
  401d9e:	9303      	str	r3, [sp, #12]
  401da0:	9b03      	ldr	r3, [sp, #12]
  401da2:	2b13      	cmp	r3, #19
  401da4:	d806      	bhi.n	401db4 <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401da6:	bf00      	nop
  401da8:	9b03      	ldr	r3, [sp, #12]
  401daa:	3301      	adds	r3, #1
  401dac:	9303      	str	r3, [sp, #12]
  401dae:	9b03      	ldr	r3, [sp, #12]
  401db0:	2b13      	cmp	r3, #19
  401db2:	d9f8      	bls.n	401da6 <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  401db4:	4b70      	ldr	r3, [pc, #448]	; (401f78 <UDP_Handler+0x278>)
  401db6:	4798      	blx	r3
  401db8:	f000 bcca 	b.w	402750 <UDP_Handler+0xa50>
  401dbc:	4b6f      	ldr	r3, [pc, #444]	; (401f7c <UDP_Handler+0x27c>)
  401dbe:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  401dc2:	4966      	ldr	r1, [pc, #408]	; (401f5c <UDP_Handler+0x25c>)
  401dc4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  401dca:	4283      	cmp	r3, r0
  401dcc:	d1fa      	bne.n	401dc4 <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  401dce:	4b6c      	ldr	r3, [pc, #432]	; (401f80 <UDP_Handler+0x280>)
  401dd0:	4798      	blx	r3
  401dd2:	b9e0      	cbnz	r0, 401e0e <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  401dd4:	4b61      	ldr	r3, [pc, #388]	; (401f5c <UDP_Handler+0x25c>)
  401dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401dd8:	9204      	str	r2, [sp, #16]
  401dda:	9a04      	ldr	r2, [sp, #16]
  401ddc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401de0:	9204      	str	r2, [sp, #16]
  401de2:	9a04      	ldr	r2, [sp, #16]
  401de4:	f022 0204 	bic.w	r2, r2, #4
  401de8:	9204      	str	r2, [sp, #16]
  401dea:	9a04      	ldr	r2, [sp, #16]
  401dec:	631a      	str	r2, [r3, #48]	; 0x30
  401dee:	2300      	movs	r3, #0
  401df0:	9305      	str	r3, [sp, #20]
  401df2:	9b05      	ldr	r3, [sp, #20]
  401df4:	2b13      	cmp	r3, #19
  401df6:	d806      	bhi.n	401e06 <UDP_Handler+0x106>
  401df8:	bf00      	nop
  401dfa:	9b05      	ldr	r3, [sp, #20]
  401dfc:	3301      	adds	r3, #1
  401dfe:	9305      	str	r3, [sp, #20]
  401e00:	9b05      	ldr	r3, [sp, #20]
  401e02:	2b13      	cmp	r3, #19
  401e04:	d9f8      	bls.n	401df8 <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  401e06:	4b5c      	ldr	r3, [pc, #368]	; (401f78 <UDP_Handler+0x278>)
  401e08:	4798      	blx	r3
  401e0a:	f000 bca1 	b.w	402750 <UDP_Handler+0xa50>
		return;
	}

	if (Udd_setup_is_in()) {
  401e0e:	4b5d      	ldr	r3, [pc, #372]	; (401f84 <UDP_Handler+0x284>)
  401e10:	f993 3000 	ldrsb.w	r3, [r3]
  401e14:	2b00      	cmp	r3, #0
  401e16:	da3d      	bge.n	401e94 <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  401e18:	4b50      	ldr	r3, [pc, #320]	; (401f5c <UDP_Handler+0x25c>)
  401e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e1c:	9206      	str	r2, [sp, #24]
  401e1e:	9a06      	ldr	r2, [sp, #24]
  401e20:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401e24:	9206      	str	r2, [sp, #24]
  401e26:	9a06      	ldr	r2, [sp, #24]
  401e28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  401e2c:	9206      	str	r2, [sp, #24]
  401e2e:	9a06      	ldr	r2, [sp, #24]
  401e30:	631a      	str	r2, [r3, #48]	; 0x30
  401e32:	2300      	movs	r3, #0
  401e34:	9307      	str	r3, [sp, #28]
  401e36:	9b07      	ldr	r3, [sp, #28]
  401e38:	2b13      	cmp	r3, #19
  401e3a:	d806      	bhi.n	401e4a <UDP_Handler+0x14a>
  401e3c:	bf00      	nop
  401e3e:	9b07      	ldr	r3, [sp, #28]
  401e40:	3301      	adds	r3, #1
  401e42:	9307      	str	r3, [sp, #28]
  401e44:	9b07      	ldr	r3, [sp, #28]
  401e46:	2b13      	cmp	r3, #19
  401e48:	d9f8      	bls.n	401e3c <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  401e4a:	4b44      	ldr	r3, [pc, #272]	; (401f5c <UDP_Handler+0x25c>)
  401e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e4e:	9208      	str	r2, [sp, #32]
  401e50:	9a08      	ldr	r2, [sp, #32]
  401e52:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401e56:	9208      	str	r2, [sp, #32]
  401e58:	9a08      	ldr	r2, [sp, #32]
  401e5a:	f022 0204 	bic.w	r2, r2, #4
  401e5e:	9208      	str	r2, [sp, #32]
  401e60:	9a08      	ldr	r2, [sp, #32]
  401e62:	631a      	str	r2, [r3, #48]	; 0x30
  401e64:	2300      	movs	r3, #0
  401e66:	9309      	str	r3, [sp, #36]	; 0x24
  401e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e6a:	2b13      	cmp	r3, #19
  401e6c:	d806      	bhi.n	401e7c <UDP_Handler+0x17c>
  401e6e:	bf00      	nop
  401e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e72:	3301      	adds	r3, #1
  401e74:	9309      	str	r3, [sp, #36]	; 0x24
  401e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401e78:	2b13      	cmp	r3, #19
  401e7a:	d9f8      	bls.n	401e6e <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  401e7c:	2300      	movs	r3, #0
  401e7e:	4a42      	ldr	r2, [pc, #264]	; (401f88 <UDP_Handler+0x288>)
  401e80:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401e82:	4a42      	ldr	r2, [pc, #264]	; (401f8c <UDP_Handler+0x28c>)
  401e84:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  401e86:	2202      	movs	r2, #2
  401e88:	4b38      	ldr	r3, [pc, #224]	; (401f6c <UDP_Handler+0x26c>)
  401e8a:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  401e8c:	4b40      	ldr	r3, [pc, #256]	; (401f90 <UDP_Handler+0x290>)
  401e8e:	4798      	blx	r3
  401e90:	f000 bc5e 	b.w	402750 <UDP_Handler+0xa50>
	} else {
		udd_ack_setup_received(0);
  401e94:	4b31      	ldr	r3, [pc, #196]	; (401f5c <UDP_Handler+0x25c>)
  401e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401e98:	920a      	str	r2, [sp, #40]	; 0x28
  401e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401e9c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401ea0:	920a      	str	r2, [sp, #40]	; 0x28
  401ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401ea4:	f022 0204 	bic.w	r2, r2, #4
  401ea8:	920a      	str	r2, [sp, #40]	; 0x28
  401eaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401eac:	631a      	str	r2, [r3, #48]	; 0x30
  401eae:	2300      	movs	r3, #0
  401eb0:	930b      	str	r3, [sp, #44]	; 0x2c
  401eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401eb4:	2b13      	cmp	r3, #19
  401eb6:	d806      	bhi.n	401ec6 <UDP_Handler+0x1c6>
  401eb8:	bf00      	nop
  401eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401ebc:	3301      	adds	r3, #1
  401ebe:	930b      	str	r3, [sp, #44]	; 0x2c
  401ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401ec2:	2b13      	cmp	r3, #19
  401ec4:	d9f8      	bls.n	401eb8 <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  401ec6:	4b2f      	ldr	r3, [pc, #188]	; (401f84 <UDP_Handler+0x284>)
  401ec8:	88db      	ldrh	r3, [r3, #6]
  401eca:	b91b      	cbnz	r3, 401ed4 <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  401ecc:	4b31      	ldr	r3, [pc, #196]	; (401f94 <UDP_Handler+0x294>)
  401ece:	4798      	blx	r3
  401ed0:	f000 bc3e 	b.w	402750 <UDP_Handler+0xa50>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  401ed4:	2300      	movs	r3, #0
  401ed6:	4a2c      	ldr	r2, [pc, #176]	; (401f88 <UDP_Handler+0x288>)
  401ed8:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  401eda:	4a2c      	ldr	r2, [pc, #176]	; (401f8c <UDP_Handler+0x28c>)
  401edc:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  401ede:	2201      	movs	r2, #1
  401ee0:	4b22      	ldr	r3, [pc, #136]	; (401f6c <UDP_Handler+0x26c>)
  401ee2:	701a      	strb	r2, [r3, #0]
  401ee4:	f000 bc34 	b.w	402750 <UDP_Handler+0xa50>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  401ee8:	4b1c      	ldr	r3, [pc, #112]	; (401f5c <UDP_Handler+0x25c>)
  401eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401eec:	f013 0f01 	tst.w	r3, #1
  401ef0:	d003      	beq.n	401efa <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  401ef2:	4b27      	ldr	r3, [pc, #156]	; (401f90 <UDP_Handler+0x290>)
  401ef4:	4798      	blx	r3
  401ef6:	f000 bc2b 	b.w	402750 <UDP_Handler+0xa50>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  401efa:	4b18      	ldr	r3, [pc, #96]	; (401f5c <UDP_Handler+0x25c>)
  401efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401efe:	f013 0f02 	tst.w	r3, #2
  401f02:	f000 8117 	beq.w	402134 <UDP_Handler+0x434>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  401f06:	4b19      	ldr	r3, [pc, #100]	; (401f6c <UDP_Handler+0x26c>)
  401f08:	781b      	ldrb	r3, [r3, #0]
  401f0a:	2b01      	cmp	r3, #1
  401f0c:	d044      	beq.n	401f98 <UDP_Handler+0x298>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  401f0e:	2b02      	cmp	r3, #2
  401f10:	d001      	beq.n	401f16 <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  401f12:	2b04      	cmp	r3, #4
  401f14:	d102      	bne.n	401f1c <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  401f16:	4b16      	ldr	r3, [pc, #88]	; (401f70 <UDP_Handler+0x270>)
  401f18:	4798      	blx	r3
  401f1a:	e001      	b.n	401f20 <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  401f1c:	4b16      	ldr	r3, [pc, #88]	; (401f78 <UDP_Handler+0x278>)
  401f1e:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  401f20:	4b0e      	ldr	r3, [pc, #56]	; (401f5c <UDP_Handler+0x25c>)
  401f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401f24:	920c      	str	r2, [sp, #48]	; 0x30
  401f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401f28:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401f2c:	920c      	str	r2, [sp, #48]	; 0x30
  401f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401f30:	f022 0202 	bic.w	r2, r2, #2
  401f34:	920c      	str	r2, [sp, #48]	; 0x30
  401f36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401f38:	631a      	str	r2, [r3, #48]	; 0x30
  401f3a:	2300      	movs	r3, #0
  401f3c:	930d      	str	r3, [sp, #52]	; 0x34
  401f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401f40:	2b13      	cmp	r3, #19
  401f42:	d806      	bhi.n	401f52 <UDP_Handler+0x252>
  401f44:	bf00      	nop
  401f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401f48:	3301      	adds	r3, #1
  401f4a:	930d      	str	r3, [sp, #52]	; 0x34
  401f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401f4e:	2b13      	cmp	r3, #19
  401f50:	d9f8      	bls.n	401f44 <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  401f52:	4b08      	ldr	r3, [pc, #32]	; (401f74 <UDP_Handler+0x274>)
  401f54:	4798      	blx	r3
  401f56:	e3fb      	b.n	402750 <UDP_Handler+0xa50>
  401f58:	00401751 	.word	0x00401751
  401f5c:	40034000 	.word	0x40034000
  401f60:	200000b0 	.word	0x200000b0
  401f64:	0040166d 	.word	0x0040166d
  401f68:	00400f25 	.word	0x00400f25
  401f6c:	20000bcd 	.word	0x20000bcd
  401f70:	00401885 	.word	0x00401885
  401f74:	004017dd 	.word	0x004017dd
  401f78:	004017f5 	.word	0x004017f5
  401f7c:	20000c3b 	.word	0x20000c3b
  401f80:	00400f61 	.word	0x00400f61
  401f84:	20000c3c 	.word	0x20000c3c
  401f88:	20000b8a 	.word	0x20000b8a
  401f8c:	20000bca 	.word	0x20000bca
  401f90:	00401895 	.word	0x00401895
  401f94:	0040183d 	.word	0x0040183d
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401f98:	4b90      	ldr	r3, [pc, #576]	; (4021dc <UDP_Handler+0x4dc>)
  401f9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401f9c:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  401fa0:	4b8f      	ldr	r3, [pc, #572]	; (4021e0 <UDP_Handler+0x4e0>)
  401fa2:	899b      	ldrh	r3, [r3, #12]
  401fa4:	4a8f      	ldr	r2, [pc, #572]	; (4021e4 <UDP_Handler+0x4e4>)
  401fa6:	8815      	ldrh	r5, [r2, #0]
  401fa8:	186a      	adds	r2, r5, r1
  401faa:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  401fac:	bfae      	itee	ge
  401fae:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  401fb0:	ebc5 0303 	rsblt	r3, r5, r3
  401fb4:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401fb6:	4b8a      	ldr	r3, [pc, #552]	; (4021e0 <UDP_Handler+0x4e0>)
  401fb8:	6898      	ldr	r0, [r3, #8]
  401fba:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  401fbc:	b1a9      	cbz	r1, 401fea <UDP_Handler+0x2ea>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401fbe:	4603      	mov	r3, r0
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  401fc0:	4c86      	ldr	r4, [pc, #536]	; (4021dc <UDP_Handler+0x4dc>)
  401fc2:	6d22      	ldr	r2, [r4, #80]	; 0x50
  401fc4:	f803 2b01 	strb.w	r2, [r3], #1
  401fc8:	1a1a      	subs	r2, r3, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  401fca:	b2d2      	uxtb	r2, r2
  401fcc:	428a      	cmp	r2, r1
  401fce:	d3f8      	bcc.n	401fc2 <UDP_Handler+0x2c2>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  401fd0:	440d      	add	r5, r1
  401fd2:	b2ad      	uxth	r5, r5
  401fd4:	4b83      	ldr	r3, [pc, #524]	; (4021e4 <UDP_Handler+0x4e4>)
  401fd6:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  401fd8:	2940      	cmp	r1, #64	; 0x40
  401fda:	d106      	bne.n	401fea <UDP_Handler+0x2ea>
			|| (udd_g_ctrlreq.req.wLength <=
  401fdc:	4b80      	ldr	r3, [pc, #512]	; (4021e0 <UDP_Handler+0x4e0>)
  401fde:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  401fe0:	4b81      	ldr	r3, [pc, #516]	; (4021e8 <UDP_Handler+0x4e8>)
  401fe2:	881b      	ldrh	r3, [r3, #0]
  401fe4:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  401fe6:	429a      	cmp	r2, r3
  401fe8:	dc3e      	bgt.n	402068 <UDP_Handler+0x368>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  401fea:	4b7d      	ldr	r3, [pc, #500]	; (4021e0 <UDP_Handler+0x4e0>)
  401fec:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  401fee:	695b      	ldr	r3, [r3, #20]
  401ff0:	b1f3      	cbz	r3, 402030 <UDP_Handler+0x330>
			if (!udd_g_ctrlreq.over_under_run()) {
  401ff2:	4798      	blx	r3
  401ff4:	b9e0      	cbnz	r0, 402030 <UDP_Handler+0x330>
				// Stall ZLP
				udd_ctrl_stall_data();
  401ff6:	4b7d      	ldr	r3, [pc, #500]	; (4021ec <UDP_Handler+0x4ec>)
  401ff8:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  401ffa:	4b78      	ldr	r3, [pc, #480]	; (4021dc <UDP_Handler+0x4dc>)
  401ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401ffe:	920e      	str	r2, [sp, #56]	; 0x38
  402000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402002:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402006:	920e      	str	r2, [sp, #56]	; 0x38
  402008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40200a:	f022 0202 	bic.w	r2, r2, #2
  40200e:	920e      	str	r2, [sp, #56]	; 0x38
  402010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402012:	631a      	str	r2, [r3, #48]	; 0x30
  402014:	2300      	movs	r3, #0
  402016:	930f      	str	r3, [sp, #60]	; 0x3c
  402018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40201a:	2b13      	cmp	r3, #19
  40201c:	f200 8398 	bhi.w	402750 <UDP_Handler+0xa50>
  402020:	bf00      	nop
  402022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402024:	3301      	adds	r3, #1
  402026:	930f      	str	r3, [sp, #60]	; 0x3c
  402028:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40202a:	2b13      	cmp	r3, #19
  40202c:	d9f8      	bls.n	402020 <UDP_Handler+0x320>
  40202e:	e38f      	b.n	402750 <UDP_Handler+0xa50>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  402030:	4b6a      	ldr	r3, [pc, #424]	; (4021dc <UDP_Handler+0x4dc>)
  402032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402034:	9210      	str	r2, [sp, #64]	; 0x40
  402036:	9a10      	ldr	r2, [sp, #64]	; 0x40
  402038:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40203c:	9210      	str	r2, [sp, #64]	; 0x40
  40203e:	9a10      	ldr	r2, [sp, #64]	; 0x40
  402040:	f022 0202 	bic.w	r2, r2, #2
  402044:	9210      	str	r2, [sp, #64]	; 0x40
  402046:	9a10      	ldr	r2, [sp, #64]	; 0x40
  402048:	631a      	str	r2, [r3, #48]	; 0x30
  40204a:	2300      	movs	r3, #0
  40204c:	9311      	str	r3, [sp, #68]	; 0x44
  40204e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402050:	2b13      	cmp	r3, #19
  402052:	d806      	bhi.n	402062 <UDP_Handler+0x362>
  402054:	bf00      	nop
  402056:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402058:	3301      	adds	r3, #1
  40205a:	9311      	str	r3, [sp, #68]	; 0x44
  40205c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40205e:	2b13      	cmp	r3, #19
  402060:	d9f8      	bls.n	402054 <UDP_Handler+0x354>
		udd_ctrl_send_zlp_in();
  402062:	4b63      	ldr	r3, [pc, #396]	; (4021f0 <UDP_Handler+0x4f0>)
  402064:	4798      	blx	r3
  402066:	e373      	b.n	402750 <UDP_Handler+0xa50>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  402068:	4b5d      	ldr	r3, [pc, #372]	; (4021e0 <UDP_Handler+0x4e0>)
  40206a:	899b      	ldrh	r3, [r3, #12]
  40206c:	42ab      	cmp	r3, r5
  40206e:	d146      	bne.n	4020fe <UDP_Handler+0x3fe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  402070:	4b5b      	ldr	r3, [pc, #364]	; (4021e0 <UDP_Handler+0x4e0>)
  402072:	695b      	ldr	r3, [r3, #20]
  402074:	b9e3      	cbnz	r3, 4020b0 <UDP_Handler+0x3b0>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  402076:	4b5d      	ldr	r3, [pc, #372]	; (4021ec <UDP_Handler+0x4ec>)
  402078:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  40207a:	4b58      	ldr	r3, [pc, #352]	; (4021dc <UDP_Handler+0x4dc>)
  40207c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40207e:	9212      	str	r2, [sp, #72]	; 0x48
  402080:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402082:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402086:	9212      	str	r2, [sp, #72]	; 0x48
  402088:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40208a:	f022 0202 	bic.w	r2, r2, #2
  40208e:	9212      	str	r2, [sp, #72]	; 0x48
  402090:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402092:	631a      	str	r2, [r3, #48]	; 0x30
  402094:	2300      	movs	r3, #0
  402096:	9313      	str	r3, [sp, #76]	; 0x4c
  402098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40209a:	2b13      	cmp	r3, #19
  40209c:	f200 8358 	bhi.w	402750 <UDP_Handler+0xa50>
  4020a0:	bf00      	nop
  4020a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4020a4:	3301      	adds	r3, #1
  4020a6:	9313      	str	r3, [sp, #76]	; 0x4c
  4020a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4020aa:	2b13      	cmp	r3, #19
  4020ac:	d9f8      	bls.n	4020a0 <UDP_Handler+0x3a0>
  4020ae:	e34f      	b.n	402750 <UDP_Handler+0xa50>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  4020b0:	4798      	blx	r3
  4020b2:	b9e0      	cbnz	r0, 4020ee <UDP_Handler+0x3ee>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  4020b4:	4b4d      	ldr	r3, [pc, #308]	; (4021ec <UDP_Handler+0x4ec>)
  4020b6:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4020b8:	4b48      	ldr	r3, [pc, #288]	; (4021dc <UDP_Handler+0x4dc>)
  4020ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020bc:	9214      	str	r2, [sp, #80]	; 0x50
  4020be:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4020c0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020c4:	9214      	str	r2, [sp, #80]	; 0x50
  4020c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4020c8:	f022 0202 	bic.w	r2, r2, #2
  4020cc:	9214      	str	r2, [sp, #80]	; 0x50
  4020ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4020d0:	631a      	str	r2, [r3, #48]	; 0x30
  4020d2:	2300      	movs	r3, #0
  4020d4:	9315      	str	r3, [sp, #84]	; 0x54
  4020d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4020d8:	2b13      	cmp	r3, #19
  4020da:	f200 8339 	bhi.w	402750 <UDP_Handler+0xa50>
  4020de:	bf00      	nop
  4020e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4020e2:	3301      	adds	r3, #1
  4020e4:	9315      	str	r3, [sp, #84]	; 0x54
  4020e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4020e8:	2b13      	cmp	r3, #19
  4020ea:	d9f8      	bls.n	4020de <UDP_Handler+0x3de>
  4020ec:	e330      	b.n	402750 <UDP_Handler+0xa50>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4020ee:	4a3e      	ldr	r2, [pc, #248]	; (4021e8 <UDP_Handler+0x4e8>)
  4020f0:	4b3c      	ldr	r3, [pc, #240]	; (4021e4 <UDP_Handler+0x4e4>)
  4020f2:	8818      	ldrh	r0, [r3, #0]
  4020f4:	8811      	ldrh	r1, [r2, #0]
  4020f6:	4401      	add	r1, r0
  4020f8:	8011      	strh	r1, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  4020fa:	2200      	movs	r2, #0
  4020fc:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  4020fe:	4b37      	ldr	r3, [pc, #220]	; (4021dc <UDP_Handler+0x4dc>)
  402100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402102:	9216      	str	r2, [sp, #88]	; 0x58
  402104:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402106:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40210a:	9216      	str	r2, [sp, #88]	; 0x58
  40210c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40210e:	f022 0202 	bic.w	r2, r2, #2
  402112:	9216      	str	r2, [sp, #88]	; 0x58
  402114:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402116:	631a      	str	r2, [r3, #48]	; 0x30
  402118:	2300      	movs	r3, #0
  40211a:	9317      	str	r3, [sp, #92]	; 0x5c
  40211c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40211e:	2b13      	cmp	r3, #19
  402120:	f200 8316 	bhi.w	402750 <UDP_Handler+0xa50>
  402124:	bf00      	nop
  402126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402128:	3301      	adds	r3, #1
  40212a:	9317      	str	r3, [sp, #92]	; 0x5c
  40212c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40212e:	2b13      	cmp	r3, #19
  402130:	d9f8      	bls.n	402124 <UDP_Handler+0x424>
  402132:	e30d      	b.n	402750 <UDP_Handler+0xa50>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  402134:	4b29      	ldr	r3, [pc, #164]	; (4021dc <UDP_Handler+0x4dc>)
  402136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402138:	f013 0f08 	tst.w	r3, #8
  40213c:	d106      	bne.n	40214c <UDP_Handler+0x44c>
  40213e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 4021f4 <UDP_Handler+0x4f4>
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  402142:	4664      	mov	r4, ip
  402144:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402146:	4a25      	ldr	r2, [pc, #148]	; (4021dc <UDP_Handler+0x4dc>)
  402148:	461e      	mov	r6, r3
  40214a:	e01a      	b.n	402182 <UDP_Handler+0x482>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  40214c:	4b23      	ldr	r3, [pc, #140]	; (4021dc <UDP_Handler+0x4dc>)
  40214e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402150:	9200      	str	r2, [sp, #0]
  402152:	9a00      	ldr	r2, [sp, #0]
  402154:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402158:	9200      	str	r2, [sp, #0]
  40215a:	9a00      	ldr	r2, [sp, #0]
  40215c:	f022 0208 	bic.w	r2, r2, #8
  402160:	9200      	str	r2, [sp, #0]
  402162:	9a00      	ldr	r2, [sp, #0]
  402164:	631a      	str	r2, [r3, #48]	; 0x30
  402166:	2300      	movs	r3, #0
  402168:	9301      	str	r3, [sp, #4]
  40216a:	9b01      	ldr	r3, [sp, #4]
  40216c:	2b13      	cmp	r3, #19
  40216e:	f200 82ef 	bhi.w	402750 <UDP_Handler+0xa50>
  402172:	bf00      	nop
  402174:	9b01      	ldr	r3, [sp, #4]
  402176:	3301      	adds	r3, #1
  402178:	9301      	str	r3, [sp, #4]
  40217a:	9b01      	ldr	r3, [sp, #4]
  40217c:	2b13      	cmp	r3, #19
  40217e:	d9f8      	bls.n	402172 <UDP_Handler+0x472>
  402180:	e2e6      	b.n	402750 <UDP_Handler+0xa50>
  402182:	fa5f f883 	uxtb.w	r8, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402186:	6991      	ldr	r1, [r2, #24]
  402188:	461f      	mov	r7, r3
  40218a:	fa06 f503 	lsl.w	r5, r6, r3
  40218e:	420d      	tst	r5, r1
  402190:	f000 81f1 	beq.w	402576 <UDP_Handler+0x876>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  402194:	46a1      	mov	r9, r4
  402196:	0099      	lsls	r1, r3, #2
  402198:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  40219c:	f501 3140 	add.w	r1, r1, #196608	; 0x30000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4021a0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4021a2:	f010 0f42 	tst.w	r0, #66	; 0x42
  4021a6:	d044      	beq.n	402232 <UDP_Handler+0x532>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4021a8:	68a2      	ldr	r2, [r4, #8]
  4021aa:	68e3      	ldr	r3, [r4, #12]
	uint32_t pkt_size = ptr_job->size;
  4021ac:	f8b4 a010 	ldrh.w	sl, [r4, #16]
  4021b0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4021b4:	6860      	ldr	r0, [r4, #4]
  4021b6:	4418      	add	r0, r3
  4021b8:	460c      	mov	r4, r1
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  4021ba:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  4021bc:	f3c6 460a 	ubfx	r6, r6, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  4021c0:	2e00      	cmp	r6, #0
  4021c2:	f000 82b6 	beq.w	402732 <UDP_Handler+0xa32>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4021c6:	1ad1      	subs	r1, r2, r3
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  4021c8:	42b1      	cmp	r1, r6
  4021ca:	f200 82a9 	bhi.w	402720 <UDP_Handler+0xa20>
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  4021ce:	f8c9 200c 	str.w	r2, [r9, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  4021d2:	2900      	cmp	r1, #0
  4021d4:	f040 82aa 	bne.w	40272c <UDP_Handler+0xa2c>
  4021d8:	e2b6      	b.n	402748 <UDP_Handler+0xa48>
  4021da:	bf00      	nop
  4021dc:	40034000 	.word	0x40034000
  4021e0:	20000c3c 	.word	0x20000c3c
  4021e4:	20000bca 	.word	0x20000bca
  4021e8:	20000b8a 	.word	0x20000b8a
  4021ec:	004017f5 	.word	0x004017f5
  4021f0:	0040183d 	.word	0x0040183d
  4021f4:	20000b8c 	.word	0x20000b8c
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4021f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4021fa:	54c2      	strb	r2, [r0, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  4021fc:	3301      	adds	r3, #1
  4021fe:	428b      	cmp	r3, r1
  402200:	d3fa      	bcc.n	4021f8 <UDP_Handler+0x4f8>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402202:	4640      	mov	r0, r8
  402204:	4b95      	ldr	r3, [pc, #596]	; (40245c <UDP_Handler+0x75c>)
  402206:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  402208:	b917      	cbnz	r7, 402210 <UDP_Handler+0x510>
  40220a:	45b2      	cmp	sl, r6
  40220c:	f240 82a0 	bls.w	402750 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
  402210:	6b23      	ldr	r3, [r4, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  402212:	f013 0f20 	tst.w	r3, #32
  402216:	f040 829b 	bne.w	402750 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  40221a:	4b91      	ldr	r3, [pc, #580]	; (402460 <UDP_Handler+0x760>)
  40221c:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40221e:	f8d9 300c 	ldr.w	r3, [r9, #12]
  402222:	f8c9 3008 	str.w	r3, [r9, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402226:	4648      	mov	r0, r9
  402228:	2100      	movs	r1, #0
  40222a:	4642      	mov	r2, r8
  40222c:	4b8d      	ldr	r3, [pc, #564]	; (402464 <UDP_Handler+0x764>)
  40222e:	4798      	blx	r3
  402230:	e28e      	b.n	402750 <UDP_Handler+0xa50>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  402232:	6b08      	ldr	r0, [r1, #48]	; 0x30
  402234:	f010 0f01 	tst.w	r0, #1
  402238:	f000 8173 	beq.w	402522 <UDP_Handler+0x822>

			ptr_job->bank--;
  40223c:	7c63      	ldrb	r3, [r4, #17]
  40223e:	f3c3 0281 	ubfx	r2, r3, #2, #2
  402242:	3203      	adds	r2, #3
  402244:	f002 0203 	and.w	r2, r2, #3
  402248:	f362 0383 	bfi	r3, r2, #2, #2
  40224c:	7463      	strb	r3, [r4, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  40224e:	f013 0f20 	tst.w	r3, #32
  402252:	d074      	beq.n	40233e <UDP_Handler+0x63e>
				if (ptr_job->bank) {
  402254:	2a00      	cmp	r2, #0
  402256:	d036      	beq.n	4022c6 <UDP_Handler+0x5c6>
  402258:	00ba      	lsls	r2, r7, #2
  40225a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40225e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
					// Send remaining
					udd_set_transmit_ready(ep);
  402262:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402264:	9318      	str	r3, [sp, #96]	; 0x60
  402266:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402268:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40226c:	9318      	str	r3, [sp, #96]	; 0x60
  40226e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402270:	f043 0310 	orr.w	r3, r3, #16
  402274:	9318      	str	r3, [sp, #96]	; 0x60
  402276:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402278:	6313      	str	r3, [r2, #48]	; 0x30
  40227a:	2300      	movs	r3, #0
  40227c:	9319      	str	r3, [sp, #100]	; 0x64
  40227e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402280:	2b13      	cmp	r3, #19
  402282:	d806      	bhi.n	402292 <UDP_Handler+0x592>
  402284:	bf00      	nop
  402286:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402288:	3301      	adds	r3, #1
  40228a:	9319      	str	r3, [sp, #100]	; 0x64
  40228c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40228e:	2b13      	cmp	r3, #19
  402290:	d9f8      	bls.n	402284 <UDP_Handler+0x584>
					udd_ack_in_sent(ep);
  402292:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402294:	931a      	str	r3, [sp, #104]	; 0x68
  402296:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402298:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40229c:	931a      	str	r3, [sp, #104]	; 0x68
  40229e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4022a0:	f023 0301 	bic.w	r3, r3, #1
  4022a4:	931a      	str	r3, [sp, #104]	; 0x68
  4022a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4022a8:	6313      	str	r3, [r2, #48]	; 0x30
  4022aa:	2300      	movs	r3, #0
  4022ac:	931b      	str	r3, [sp, #108]	; 0x6c
  4022ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4022b0:	2b13      	cmp	r3, #19
  4022b2:	f200 824d 	bhi.w	402750 <UDP_Handler+0xa50>
  4022b6:	bf00      	nop
  4022b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4022ba:	3301      	adds	r3, #1
  4022bc:	931b      	str	r3, [sp, #108]	; 0x6c
  4022be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4022c0:	2b13      	cmp	r3, #19
  4022c2:	d9f8      	bls.n	4022b6 <UDP_Handler+0x5b6>
  4022c4:	e244      	b.n	402750 <UDP_Handler+0xa50>
  4022c6:	00ba      	lsls	r2, r7, #2
  4022c8:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4022cc:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  4022d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4022d2:	931c      	str	r3, [sp, #112]	; 0x70
  4022d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4022d6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4022da:	931c      	str	r3, [sp, #112]	; 0x70
  4022dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4022de:	f023 0301 	bic.w	r3, r3, #1
  4022e2:	931c      	str	r3, [sp, #112]	; 0x70
  4022e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4022e6:	6313      	str	r3, [r2, #48]	; 0x30
  4022e8:	2300      	movs	r3, #0
  4022ea:	931d      	str	r3, [sp, #116]	; 0x74
  4022ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4022ee:	2b13      	cmp	r3, #19
  4022f0:	d806      	bhi.n	402300 <UDP_Handler+0x600>
  4022f2:	bf00      	nop
  4022f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4022f6:	3301      	adds	r3, #1
  4022f8:	931d      	str	r3, [sp, #116]	; 0x74
  4022fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4022fc:	2b13      	cmp	r3, #19
  4022fe:	d9f8      	bls.n	4022f2 <UDP_Handler+0x5f2>
					// Enable stall
					udd_enable_stall_handshake(ep);
  402300:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402302:	931e      	str	r3, [sp, #120]	; 0x78
  402304:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402306:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40230a:	931e      	str	r3, [sp, #120]	; 0x78
  40230c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40230e:	f043 0320 	orr.w	r3, r3, #32
  402312:	931e      	str	r3, [sp, #120]	; 0x78
  402314:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402316:	6313      	str	r3, [r2, #48]	; 0x30
  402318:	2300      	movs	r3, #0
  40231a:	931f      	str	r3, [sp, #124]	; 0x7c
  40231c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40231e:	2b13      	cmp	r3, #19
  402320:	d806      	bhi.n	402330 <UDP_Handler+0x630>
  402322:	bf00      	nop
  402324:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402326:	3301      	adds	r3, #1
  402328:	931f      	str	r3, [sp, #124]	; 0x7c
  40232a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40232c:	2b13      	cmp	r3, #19
  40232e:	d9f8      	bls.n	402322 <UDP_Handler+0x622>
					// Halt executed
					ptr_job->b_stall_requested = false;
  402330:	f899 3011 	ldrb.w	r3, [r9, #17]
  402334:	f36f 1345 	bfc	r3, #5, #1
  402338:	f889 3011 	strb.w	r3, [r9, #17]
  40233c:	e208      	b.n	402750 <UDP_Handler+0xa50>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  40233e:	7c63      	ldrb	r3, [r4, #17]
  402340:	09db      	lsrs	r3, r3, #7
  402342:	d00a      	beq.n	40235a <UDP_Handler+0x65a>
				ptr_job->b_buf_end = false;
  402344:	7c63      	ldrb	r3, [r4, #17]
  402346:	f36f 13c7 	bfc	r3, #7, #1
  40234a:	7463      	strb	r3, [r4, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40234c:	68e3      	ldr	r3, [r4, #12]
  40234e:	60a3      	str	r3, [r4, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402350:	4620      	mov	r0, r4
  402352:	2100      	movs	r1, #0
  402354:	4642      	mov	r2, r8
  402356:	4b43      	ldr	r3, [pc, #268]	; (402464 <UDP_Handler+0x764>)
  402358:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  40235a:	f8d9 200c 	ldr.w	r2, [r9, #12]
  40235e:	f8d9 3008 	ldr.w	r3, [r9, #8]
  402362:	429a      	cmp	r2, r3
  402364:	d334      	bcc.n	4023d0 <UDP_Handler+0x6d0>
					!ptr_job->b_shortpacket &&
  402366:	f899 3011 	ldrb.w	r3, [r9, #17]
  40236a:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  40236e:	d12f      	bne.n	4023d0 <UDP_Handler+0x6d0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402370:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402374:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402376:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40237a:	2100      	movs	r1, #0
  40237c:	4a3a      	ldr	r2, [pc, #232]	; (402468 <UDP_Handler+0x768>)
  40237e:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  402380:	4a37      	ldr	r2, [pc, #220]	; (402460 <UDP_Handler+0x760>)
  402382:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402384:	b92b      	cbnz	r3, 402392 <UDP_Handler+0x692>
		cpu_irq_enable();
  402386:	2201      	movs	r2, #1
  402388:	4b37      	ldr	r3, [pc, #220]	; (402468 <UDP_Handler+0x768>)
  40238a:	701a      	strb	r2, [r3, #0]
  40238c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402390:	b662      	cpsie	i
  402392:	00bb      	lsls	r3, r7, #2
  402394:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402398:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  40239c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40239e:	9220      	str	r2, [sp, #128]	; 0x80
  4023a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4023a2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4023a6:	9220      	str	r2, [sp, #128]	; 0x80
  4023a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4023aa:	f022 0201 	bic.w	r2, r2, #1
  4023ae:	9220      	str	r2, [sp, #128]	; 0x80
  4023b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4023b2:	631a      	str	r2, [r3, #48]	; 0x30
  4023b4:	2300      	movs	r3, #0
  4023b6:	9321      	str	r3, [sp, #132]	; 0x84
  4023b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4023ba:	2b13      	cmp	r3, #19
  4023bc:	f200 81c8 	bhi.w	402750 <UDP_Handler+0xa50>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4023c0:	bf00      	nop
  4023c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4023c4:	3301      	adds	r3, #1
  4023c6:	9321      	str	r3, [sp, #132]	; 0x84
  4023c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4023ca:	2b13      	cmp	r3, #19
  4023cc:	d9f8      	bls.n	4023c0 <UDP_Handler+0x6c0>
  4023ce:	e1bf      	b.n	402750 <UDP_Handler+0xa50>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  4023d0:	f1b8 0f00 	cmp.w	r8, #0
  4023d4:	f000 8082 	beq.w	4024dc <UDP_Handler+0x7dc>
  4023d8:	f1b8 0f03 	cmp.w	r8, #3
  4023dc:	d07e      	beq.n	4024dc <UDP_Handler+0x7dc>
					&& ptr_job->bank > 0) {
  4023de:	f899 3011 	ldrb.w	r3, [r9, #17]
  4023e2:	f013 0f0c 	tst.w	r3, #12
  4023e6:	d043      	beq.n	402470 <UDP_Handler+0x770>
  4023e8:	00ba      	lsls	r2, r7, #2
  4023ea:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4023ee:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  4023f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023f4:	9322      	str	r3, [sp, #136]	; 0x88
  4023f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4023f8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4023fc:	9322      	str	r3, [sp, #136]	; 0x88
  4023fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402400:	f043 0310 	orr.w	r3, r3, #16
  402404:	9322      	str	r3, [sp, #136]	; 0x88
  402406:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402408:	6313      	str	r3, [r2, #48]	; 0x30
  40240a:	2300      	movs	r3, #0
  40240c:	9323      	str	r3, [sp, #140]	; 0x8c
  40240e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402410:	2b13      	cmp	r3, #19
  402412:	d806      	bhi.n	402422 <UDP_Handler+0x722>
  402414:	bf00      	nop
  402416:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402418:	3301      	adds	r3, #1
  40241a:	9323      	str	r3, [sp, #140]	; 0x8c
  40241c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40241e:	2b13      	cmp	r3, #19
  402420:	d9f8      	bls.n	402414 <UDP_Handler+0x714>
				udd_ack_in_sent(ep);
  402422:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402424:	9324      	str	r3, [sp, #144]	; 0x90
  402426:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402428:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40242c:	9324      	str	r3, [sp, #144]	; 0x90
  40242e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402430:	f023 0301 	bic.w	r3, r3, #1
  402434:	9324      	str	r3, [sp, #144]	; 0x90
  402436:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402438:	6313      	str	r3, [r2, #48]	; 0x30
  40243a:	2300      	movs	r3, #0
  40243c:	9325      	str	r3, [sp, #148]	; 0x94
  40243e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402440:	2b13      	cmp	r3, #19
  402442:	d806      	bhi.n	402452 <UDP_Handler+0x752>
  402444:	bf00      	nop
  402446:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402448:	3301      	adds	r3, #1
  40244a:	9325      	str	r3, [sp, #148]	; 0x94
  40244c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40244e:	2b13      	cmp	r3, #19
  402450:	d9f8      	bls.n	402444 <UDP_Handler+0x744>
				udd_ep_in_sent(ep, false);
  402452:	4640      	mov	r0, r8
  402454:	2100      	movs	r1, #0
  402456:	4b05      	ldr	r3, [pc, #20]	; (40246c <UDP_Handler+0x76c>)
  402458:	4798      	blx	r3
  40245a:	e179      	b.n	402750 <UDP_Handler+0xa50>
  40245c:	00401ad5 	.word	0x00401ad5
  402460:	40034000 	.word	0x40034000
  402464:	00401a95 	.word	0x00401a95
  402468:	200000b0 	.word	0x200000b0
  40246c:	00401ba1 	.word	0x00401ba1
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  402470:	4640      	mov	r0, r8
  402472:	2101      	movs	r1, #1
  402474:	4b67      	ldr	r3, [pc, #412]	; (402614 <UDP_Handler+0x914>)
  402476:	4798      	blx	r3
  402478:	b970      	cbnz	r0, 402498 <UDP_Handler+0x798>
					ptr_job->b_buf_end = false;
  40247a:	f899 3011 	ldrb.w	r3, [r9, #17]
  40247e:	f36f 13c7 	bfc	r3, #7, #1
  402482:	f889 3011 	strb.w	r3, [r9, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402486:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40248a:	f8c9 3008 	str.w	r3, [r9, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40248e:	4648      	mov	r0, r9
  402490:	2100      	movs	r1, #0
  402492:	4642      	mov	r2, r8
  402494:	4b60      	ldr	r3, [pc, #384]	; (402618 <UDP_Handler+0x918>)
  402496:	4798      	blx	r3
  402498:	00bb      	lsls	r3, r7, #2
  40249a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40249e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				}
				udd_ack_in_sent(ep);
  4024a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4024a4:	9226      	str	r2, [sp, #152]	; 0x98
  4024a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4024a8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4024ac:	9226      	str	r2, [sp, #152]	; 0x98
  4024ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4024b0:	f022 0201 	bic.w	r2, r2, #1
  4024b4:	9226      	str	r2, [sp, #152]	; 0x98
  4024b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4024b8:	631a      	str	r2, [r3, #48]	; 0x30
  4024ba:	2300      	movs	r3, #0
  4024bc:	9327      	str	r3, [sp, #156]	; 0x9c
  4024be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4024c0:	2b13      	cmp	r3, #19
  4024c2:	d806      	bhi.n	4024d2 <UDP_Handler+0x7d2>
  4024c4:	bf00      	nop
  4024c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4024c8:	3301      	adds	r3, #1
  4024ca:	9327      	str	r3, [sp, #156]	; 0x9c
  4024cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4024ce:	2b13      	cmp	r3, #19
  4024d0:	d9f8      	bls.n	4024c4 <UDP_Handler+0x7c4>
				udd_ep_in_sent(ep, false);
  4024d2:	4640      	mov	r0, r8
  4024d4:	2100      	movs	r1, #0
  4024d6:	4b4f      	ldr	r3, [pc, #316]	; (402614 <UDP_Handler+0x914>)
  4024d8:	4798      	blx	r3
  4024da:	e139      	b.n	402750 <UDP_Handler+0xa50>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  4024dc:	4640      	mov	r0, r8
  4024de:	2101      	movs	r1, #1
  4024e0:	4b4c      	ldr	r3, [pc, #304]	; (402614 <UDP_Handler+0x914>)
  4024e2:	4798      	blx	r3
  4024e4:	00bb      	lsls	r3, r7, #2
  4024e6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4024ea:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  4024ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4024f0:	9228      	str	r2, [sp, #160]	; 0xa0
  4024f2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4024f4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4024f8:	9228      	str	r2, [sp, #160]	; 0xa0
  4024fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4024fc:	f022 0201 	bic.w	r2, r2, #1
  402500:	9228      	str	r2, [sp, #160]	; 0xa0
  402502:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402504:	631a      	str	r2, [r3, #48]	; 0x30
  402506:	2300      	movs	r3, #0
  402508:	9329      	str	r3, [sp, #164]	; 0xa4
  40250a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40250c:	2b13      	cmp	r3, #19
  40250e:	f200 811f 	bhi.w	402750 <UDP_Handler+0xa50>
  402512:	bf00      	nop
  402514:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402516:	3301      	adds	r3, #1
  402518:	9329      	str	r3, [sp, #164]	; 0xa4
  40251a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40251c:	2b13      	cmp	r3, #19
  40251e:	d9f8      	bls.n	402512 <UDP_Handler+0x812>
  402520:	e116      	b.n	402750 <UDP_Handler+0xa50>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  402522:	6b09      	ldr	r1, [r1, #48]	; 0x30
  402524:	f011 0f08 	tst.w	r1, #8
  402528:	d025      	beq.n	402576 <UDP_Handler+0x876>
  40252a:	009a      	lsls	r2, r3, #2
  40252c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402530:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
			udd_ack_stall(ep);
  402534:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402536:	932a      	str	r3, [sp, #168]	; 0xa8
  402538:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  40253a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40253e:	932a      	str	r3, [sp, #168]	; 0xa8
  402540:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  402542:	f023 0308 	bic.w	r3, r3, #8
  402546:	932a      	str	r3, [sp, #168]	; 0xa8
  402548:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  40254a:	6313      	str	r3, [r2, #48]	; 0x30
  40254c:	2300      	movs	r3, #0
  40254e:	932b      	str	r3, [sp, #172]	; 0xac
  402550:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  402552:	2b13      	cmp	r3, #19
  402554:	d806      	bhi.n	402564 <UDP_Handler+0x864>
  402556:	bf00      	nop
  402558:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  40255a:	3301      	adds	r3, #1
  40255c:	932b      	str	r3, [sp, #172]	; 0xac
  40255e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  402560:	2b13      	cmp	r3, #19
  402562:	d9f8      	bls.n	402556 <UDP_Handler+0x856>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  402564:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40256a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40256e:	f000 80ef 	beq.w	402750 <UDP_Handler+0xa50>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  402572:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402574:	e0ec      	b.n	402750 <UDP_Handler+0xa50>
  402576:	3301      	adds	r3, #1
  402578:	3414      	adds	r4, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40257a:	2b04      	cmp	r3, #4
  40257c:	f47f ae01 	bne.w	402182 <UDP_Handler+0x482>
  402580:	e0db      	b.n	40273a <UDP_Handler+0xa3a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402582:	4b26      	ldr	r3, [pc, #152]	; (40261c <UDP_Handler+0x91c>)
  402584:	69db      	ldr	r3, [r3, #28]
  402586:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40258a:	d113      	bne.n	4025b4 <UDP_Handler+0x8b4>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40258c:	4b23      	ldr	r3, [pc, #140]	; (40261c <UDP_Handler+0x91c>)
  40258e:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402590:	f413 7f00 	tst.w	r3, #512	; 0x200
  402594:	d004      	beq.n	4025a0 <UDP_Handler+0x8a0>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402596:	4b21      	ldr	r3, [pc, #132]	; (40261c <UDP_Handler+0x91c>)
  402598:	69db      	ldr	r3, [r3, #28]
  40259a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40259e:	d109      	bne.n	4025b4 <UDP_Handler+0x8b4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4025a0:	4b1e      	ldr	r3, [pc, #120]	; (40261c <UDP_Handler+0x91c>)
  4025a2:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4025a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4025a8:	d014      	beq.n	4025d4 <UDP_Handler+0x8d4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4025aa:	4b1c      	ldr	r3, [pc, #112]	; (40261c <UDP_Handler+0x91c>)
  4025ac:	69db      	ldr	r3, [r3, #28]
  4025ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4025b2:	d00f      	beq.n	4025d4 <UDP_Handler+0x8d4>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  4025b4:	4c19      	ldr	r4, [pc, #100]	; (40261c <UDP_Handler+0x91c>)
  4025b6:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  4025ba:	6223      	str	r3, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  4025bc:	6163      	str	r3, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  4025be:	2001      	movs	r0, #1
  4025c0:	4b17      	ldr	r3, [pc, #92]	; (402620 <UDP_Handler+0x920>)
  4025c2:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  4025c4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4025c8:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  4025ca:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  4025cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4025d0:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  4025d2:	e0bd      	b.n	402750 <UDP_Handler+0xa50>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  4025d4:	4b11      	ldr	r3, [pc, #68]	; (40261c <UDP_Handler+0x91c>)
  4025d6:	699b      	ldr	r3, [r3, #24]
  4025d8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4025dc:	d024      	beq.n	402628 <UDP_Handler+0x928>
  4025de:	4b0f      	ldr	r3, [pc, #60]	; (40261c <UDP_Handler+0x91c>)
  4025e0:	69db      	ldr	r3, [r3, #28]
  4025e2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4025e6:	d01f      	beq.n	402628 <UDP_Handler+0x928>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  4025e8:	4b0c      	ldr	r3, [pc, #48]	; (40261c <UDP_Handler+0x91c>)
  4025ea:	f44f 7280 	mov.w	r2, #256	; 0x100
  4025ee:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  4025f0:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4025f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4025f6:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4025f8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4025fc:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4025fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402602:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  402604:	2022      	movs	r0, #34	; 0x22
  402606:	4b07      	ldr	r3, [pc, #28]	; (402624 <UDP_Handler+0x924>)
  402608:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  40260a:	2000      	movs	r0, #0
  40260c:	4b04      	ldr	r3, [pc, #16]	; (402620 <UDP_Handler+0x920>)
  40260e:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  402610:	e09e      	b.n	402750 <UDP_Handler+0xa50>
  402612:	bf00      	nop
  402614:	00401ba1 	.word	0x00401ba1
  402618:	00401a95 	.word	0x00401a95
  40261c:	40034000 	.word	0x40034000
  402620:	00401769 	.word	0x00401769
  402624:	004016c5 	.word	0x004016c5
	}
	if (Is_udd_reset()) {
  402628:	4b4b      	ldr	r3, [pc, #300]	; (402758 <UDP_Handler+0xa58>)
  40262a:	69db      	ldr	r3, [r3, #28]
  40262c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  402630:	f000 808e 	beq.w	402750 <UDP_Handler+0xa50>
		// USB bus reset detection
		udd_ack_reset();
  402634:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402638:	4b47      	ldr	r3, [pc, #284]	; (402758 <UDP_Handler+0xa58>)
  40263a:	621a      	str	r2, [r3, #32]
  40263c:	4665      	mov	r5, ip
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40263e:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  402640:	2701      	movs	r7, #1
  402642:	4e46      	ldr	r6, [pc, #280]	; (40275c <UDP_Handler+0xa5c>)
  402644:	3401      	adds	r4, #1
  402646:	b2e4      	uxtb	r4, r4
  402648:	4628      	mov	r0, r5
  40264a:	4639      	mov	r1, r7
  40264c:	4622      	mov	r2, r4
  40264e:	47b0      	blx	r6
  402650:	3514      	adds	r5, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402652:	2c03      	cmp	r4, #3
  402654:	d1f6      	bne.n	402644 <UDP_Handler+0x944>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  402656:	4b42      	ldr	r3, [pc, #264]	; (402760 <UDP_Handler+0xa60>)
  402658:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  40265a:	4b3f      	ldr	r3, [pc, #252]	; (402758 <UDP_Handler+0xa58>)
  40265c:	685a      	ldr	r2, [r3, #4]
  40265e:	f022 0201 	bic.w	r2, r2, #1
  402662:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  402664:	685a      	ldr	r2, [r3, #4]
  402666:	f022 0202 	bic.w	r2, r2, #2
  40266a:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  40266c:	689a      	ldr	r2, [r3, #8]
  40266e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402672:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  402674:	689a      	ldr	r2, [r3, #8]
  402676:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40267a:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  40267c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40267e:	922c      	str	r2, [sp, #176]	; 0xb0
  402680:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402682:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402686:	922c      	str	r2, [sp, #176]	; 0xb0
  402688:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40268a:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  40268e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402692:	922c      	str	r2, [sp, #176]	; 0xb0
  402694:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40269a:	922c      	str	r2, [sp, #176]	; 0xb0
  40269c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40269e:	631a      	str	r2, [r3, #48]	; 0x30
  4026a0:	2300      	movs	r3, #0
  4026a2:	932d      	str	r3, [sp, #180]	; 0xb4
  4026a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4026a6:	2b13      	cmp	r3, #19
  4026a8:	d806      	bhi.n	4026b8 <UDP_Handler+0x9b8>
  4026aa:	bf00      	nop
  4026ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4026ae:	3301      	adds	r3, #1
  4026b0:	932d      	str	r3, [sp, #180]	; 0xb4
  4026b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4026b4:	2b13      	cmp	r3, #19
  4026b6:	d9f8      	bls.n	4026aa <UDP_Handler+0x9aa>
	udd_enable_endpoint(0);
  4026b8:	4b27      	ldr	r3, [pc, #156]	; (402758 <UDP_Handler+0xa58>)
  4026ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026bc:	922e      	str	r2, [sp, #184]	; 0xb8
  4026be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  4026c0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4026c4:	922e      	str	r2, [sp, #184]	; 0xb8
  4026c6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  4026c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4026cc:	922e      	str	r2, [sp, #184]	; 0xb8
  4026ce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  4026d0:	631a      	str	r2, [r3, #48]	; 0x30
  4026d2:	2300      	movs	r3, #0
  4026d4:	932f      	str	r3, [sp, #188]	; 0xbc
  4026d6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4026d8:	2b13      	cmp	r3, #19
  4026da:	d806      	bhi.n	4026ea <UDP_Handler+0x9ea>
  4026dc:	bf00      	nop
  4026de:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4026e0:	3301      	adds	r3, #1
  4026e2:	932f      	str	r3, [sp, #188]	; 0xbc
  4026e4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4026e6:	2b13      	cmp	r3, #19
  4026e8:	d9f8      	bls.n	4026dc <UDP_Handler+0x9dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4026ea:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4026ee:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4026f0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4026f4:	2100      	movs	r1, #0
  4026f6:	4a1b      	ldr	r2, [pc, #108]	; (402764 <UDP_Handler+0xa64>)
  4026f8:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  4026fa:	2101      	movs	r1, #1
  4026fc:	4a16      	ldr	r2, [pc, #88]	; (402758 <UDP_Handler+0xa58>)
  4026fe:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402700:	b923      	cbnz	r3, 40270c <UDP_Handler+0xa0c>
		cpu_irq_enable();
  402702:	4b18      	ldr	r3, [pc, #96]	; (402764 <UDP_Handler+0xa64>)
  402704:	7019      	strb	r1, [r3, #0]
  402706:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40270a:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  40270c:	4b16      	ldr	r3, [pc, #88]	; (402768 <UDP_Handler+0xa68>)
  40270e:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  402710:	4b11      	ldr	r3, [pc, #68]	; (402758 <UDP_Handler+0xa58>)
  402712:	f44f 7280 	mov.w	r2, #256	; 0x100
  402716:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  402718:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40271c:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  40271e:	e017      	b.n	402750 <UDP_Handler+0xa50>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  402720:	4433      	add	r3, r6
  402722:	f8c9 300c 	str.w	r3, [r9, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  402726:	4631      	mov	r1, r6
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  402728:	2700      	movs	r7, #0
  40272a:	e000      	b.n	40272e <UDP_Handler+0xa2e>

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
  40272c:	2701      	movs	r7, #1
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  40272e:	2300      	movs	r3, #0
  402730:	e562      	b.n	4021f8 <UDP_Handler+0x4f8>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402732:	4640      	mov	r0, r8
  402734:	4b0d      	ldr	r3, [pc, #52]	; (40276c <UDP_Handler+0xa6c>)
  402736:	4798      	blx	r3
  402738:	e567      	b.n	40220a <UDP_Handler+0x50a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40273a:	4b07      	ldr	r3, [pc, #28]	; (402758 <UDP_Handler+0xa58>)
  40273c:	699b      	ldr	r3, [r3, #24]
  40273e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402742:	f47f af1e 	bne.w	402582 <UDP_Handler+0x882>
  402746:	e721      	b.n	40258c <UDP_Handler+0x88c>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402748:	4640      	mov	r0, r8
  40274a:	4b08      	ldr	r3, [pc, #32]	; (40276c <UDP_Handler+0xa6c>)
  40274c:	4798      	blx	r3
  40274e:	e55f      	b.n	402210 <UDP_Handler+0x510>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  402750:	b030      	add	sp, #192	; 0xc0
  402752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402756:	bf00      	nop
  402758:	40034000 	.word	0x40034000
  40275c:	00401a95 	.word	0x00401a95
  402760:	00400edd 	.word	0x00400edd
  402764:	200000b0 	.word	0x200000b0
  402768:	004017dd 	.word	0x004017dd
  40276c:	00401ad5 	.word	0x00401ad5

00402770 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  402770:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402772:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402776:	b672      	cpsid	i
  402778:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40277c:	2200      	movs	r2, #0
  40277e:	4b14      	ldr	r3, [pc, #80]	; (4027d0 <udd_attach+0x60>)
  402780:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  402782:	2001      	movs	r0, #1
  402784:	4b13      	ldr	r3, [pc, #76]	; (4027d4 <udd_attach+0x64>)
  402786:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  402788:	2022      	movs	r0, #34	; 0x22
  40278a:	4b13      	ldr	r3, [pc, #76]	; (4027d8 <udd_attach+0x68>)
  40278c:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  40278e:	4b13      	ldr	r3, [pc, #76]	; (4027dc <udd_attach+0x6c>)
  402790:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402796:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  402798:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  40279e:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  4027a0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4027a4:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  4027a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4027aa:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  4027ac:	f44f 7200 	mov.w	r2, #512	; 0x200
  4027b0:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  4027b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4027b6:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  4027b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4027bc:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4027be:	b92c      	cbnz	r4, 4027cc <udd_attach+0x5c>
		cpu_irq_enable();
  4027c0:	2201      	movs	r2, #1
  4027c2:	4b03      	ldr	r3, [pc, #12]	; (4027d0 <udd_attach+0x60>)
  4027c4:	701a      	strb	r2, [r3, #0]
  4027c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4027ca:	b662      	cpsie	i
  4027cc:	bd10      	pop	{r4, pc}
  4027ce:	bf00      	nop
  4027d0:	200000b0 	.word	0x200000b0
  4027d4:	00401769 	.word	0x00401769
  4027d8:	0040166d 	.word	0x0040166d
  4027dc:	40034000 	.word	0x40034000

004027e0 <udd_enable>:
#endif
}


void udd_enable(void)
{
  4027e0:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4027e2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4027e6:	b672      	cpsid	i
  4027e8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4027ec:	2500      	movs	r5, #0
  4027ee:	4b21      	ldr	r3, [pc, #132]	; (402874 <udd_enable+0x94>)
  4027f0:	701d      	strb	r5, [r3, #0]
	irqflags_t flags;

	flags = cpu_irq_save();

	// Enable USB hardware
	udd_enable_periph_ck();
  4027f2:	2022      	movs	r0, #34	; 0x22
  4027f4:	4b20      	ldr	r3, [pc, #128]	; (402878 <udd_enable+0x98>)
  4027f6:	4798      	blx	r3
	sysclk_enable_usb();
  4027f8:	4b20      	ldr	r3, [pc, #128]	; (40287c <udd_enable+0x9c>)
  4027fa:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4027fc:	4b20      	ldr	r3, [pc, #128]	; (402880 <udd_enable+0xa0>)
  4027fe:	2250      	movs	r2, #80	; 0x50
  402800:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  402804:	2204      	movs	r2, #4
  402806:	605a      	str	r2, [r3, #4]
  402808:	462b      	mov	r3, r5

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].bank = 0;
  40280a:	481e      	ldr	r0, [pc, #120]	; (402884 <udd_enable+0xa4>)
  40280c:	0099      	lsls	r1, r3, #2
  40280e:	18ca      	adds	r2, r1, r3
  402810:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402814:	7c52      	ldrb	r2, [r2, #17]
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
  402816:	4419      	add	r1, r3
  402818:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  40281c:	f002 0283 	and.w	r2, r2, #131	; 0x83
  402820:	f36f 12c7 	bfc	r2, #7, #1
  402824:	744a      	strb	r2, [r1, #17]
  402826:	3301      	adds	r3, #1
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402828:	2b03      	cmp	r3, #3
  40282a:	d1ef      	bne.n	40280c <udd_enable+0x2c>
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  40282c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402830:	4b15      	ldr	r3, [pc, #84]	; (402888 <udd_enable+0xa8>)
  402832:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  402834:	2200      	movs	r2, #0
  402836:	4b15      	ldr	r3, [pc, #84]	; (40288c <udd_enable+0xac>)
  402838:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40283a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40283e:	b672      	cpsid	i
  402840:	f3bf 8f5f 	dmb	sy
  402844:	2100      	movs	r1, #0
  402846:	4b0b      	ldr	r3, [pc, #44]	; (402874 <udd_enable+0x94>)
  402848:	7019      	strb	r1, [r3, #0]
  40284a:	4b11      	ldr	r3, [pc, #68]	; (402890 <udd_enable+0xb0>)
  40284c:	78d9      	ldrb	r1, [r3, #3]
  40284e:	3101      	adds	r1, #1
  402850:	70d9      	strb	r1, [r3, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402852:	b92a      	cbnz	r2, 402860 <udd_enable+0x80>
		cpu_irq_enable();
  402854:	2201      	movs	r2, #1
  402856:	4b07      	ldr	r3, [pc, #28]	; (402874 <udd_enable+0x94>)
  402858:	701a      	strb	r2, [r3, #0]
  40285a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40285e:	b662      	cpsie	i
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  402860:	4b0c      	ldr	r3, [pc, #48]	; (402894 <udd_enable+0xb4>)
  402862:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402864:	b92c      	cbnz	r4, 402872 <udd_enable+0x92>
		cpu_irq_enable();
  402866:	2201      	movs	r2, #1
  402868:	4b02      	ldr	r3, [pc, #8]	; (402874 <udd_enable+0x94>)
  40286a:	701a      	strb	r2, [r3, #0]
  40286c:	f3bf 8f5f 	dmb	sy
  402870:	b662      	cpsie	i
  402872:	bd38      	pop	{r3, r4, r5, pc}
  402874:	200000b0 	.word	0x200000b0
  402878:	0040166d 	.word	0x0040166d
  40287c:	00400549 	.word	0x00400549
  402880:	e000e100 	.word	0xe000e100
  402884:	20000b8c 	.word	0x20000b8c
  402888:	0040173d 	.word	0x0040173d
  40288c:	20000bc8 	.word	0x20000bc8
  402890:	20000c30 	.word	0x20000c30
  402894:	00402771 	.word	0x00402771

00402898 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
	return false;
}
  402898:	2000      	movs	r0, #0
  40289a:	4770      	bx	lr

0040289c <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  40289c:	4b0c      	ldr	r3, [pc, #48]	; (4028d0 <udd_set_address+0x34>)
  40289e:	685a      	ldr	r2, [r3, #4]
  4028a0:	f022 0201 	bic.w	r2, r2, #1
  4028a4:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  4028a6:	689a      	ldr	r2, [r3, #8]
  4028a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  4028ac:	609a      	str	r2, [r3, #8]
	if (address) {
  4028ae:	b170      	cbz	r0, 4028ce <udd_set_address+0x32>
		udd_configure_address(address);
  4028b0:	6899      	ldr	r1, [r3, #8]
  4028b2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  4028b6:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
  4028ba:	430a      	orrs	r2, r1
  4028bc:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  4028be:	689a      	ldr	r2, [r3, #8]
  4028c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4028c4:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  4028c6:	685a      	ldr	r2, [r3, #4]
  4028c8:	f042 0201 	orr.w	r2, r2, #1
  4028cc:	605a      	str	r2, [r3, #4]
  4028ce:	4770      	bx	lr
  4028d0:	40034000 	.word	0x40034000

004028d4 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  4028d4:	4b05      	ldr	r3, [pc, #20]	; (4028ec <udd_getaddress+0x18>)
  4028d6:	685b      	ldr	r3, [r3, #4]
  4028d8:	f013 0f01 	tst.w	r3, #1
  4028dc:	d004      	beq.n	4028e8 <udd_getaddress+0x14>
		return udd_get_configured_address();
  4028de:	4b03      	ldr	r3, [pc, #12]	; (4028ec <udd_getaddress+0x18>)
  4028e0:	6898      	ldr	r0, [r3, #8]
  4028e2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4028e6:	4770      	bx	lr
	return 0;
  4028e8:	2000      	movs	r0, #0
}
  4028ea:	4770      	bx	lr
  4028ec:	40034000 	.word	0x40034000

004028f0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
  4028f0:	4b02      	ldr	r3, [pc, #8]	; (4028fc <udd_get_frame_number+0xc>)
  4028f2:	6818      	ldr	r0, [r3, #0]
}
  4028f4:	f3c0 000a 	ubfx	r0, r0, #0, #11
  4028f8:	4770      	bx	lr
  4028fa:	bf00      	nop
  4028fc:	40034000 	.word	0x40034000

00402900 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
  402900:	2000      	movs	r0, #0
  402902:	4770      	bx	lr

00402904 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  402904:	4b01      	ldr	r3, [pc, #4]	; (40290c <udd_set_setup_payload+0x8>)
  402906:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402908:	8199      	strh	r1, [r3, #12]
  40290a:	4770      	bx	lr
  40290c:	20000c3c 	.word	0x20000c3c

00402910 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402910:	b470      	push	{r4, r5, r6}
  402912:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  402914:	f000 030f 	and.w	r3, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  402918:	2b03      	cmp	r3, #3
  40291a:	d866      	bhi.n	4029ea <udd_ep_alloc+0xda>
  40291c:	009c      	lsls	r4, r3, #2
  40291e:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402922:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  402926:	6b25      	ldr	r5, [r4, #48]	; 0x30
  402928:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  40292c:	d15f      	bne.n	4029ee <udd_ep_alloc+0xde>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  40292e:	f001 0503 	and.w	r5, r1, #3
  402932:	2d01      	cmp	r5, #1
  402934:	d103      	bne.n	40293e <udd_ep_alloc+0x2e>
  402936:	2b00      	cmp	r3, #0
  402938:	d05b      	beq.n	4029f2 <udd_ep_alloc+0xe2>
  40293a:	2b03      	cmp	r3, #3
  40293c:	d05b      	beq.n	4029f6 <udd_ep_alloc+0xe6>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  40293e:	1f1d      	subs	r5, r3, #4
  402940:	b2ed      	uxtb	r5, r5
  402942:	2d01      	cmp	r5, #1
  402944:	bf8c      	ite	hi
  402946:	2540      	movhi	r5, #64	; 0x40
  402948:	f44f 7500 	movls.w	r5, #512	; 0x200
  40294c:	4295      	cmp	r5, r2
  40294e:	db54      	blt.n	4029fa <udd_ep_alloc+0xea>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  402950:	1e5d      	subs	r5, r3, #1
  402952:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402956:	4e2d      	ldr	r6, [pc, #180]	; (402a0c <udd_ep_alloc+0xfc>)
  402958:	eb06 0585 	add.w	r5, r6, r5, lsl #2

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  40295c:	8a2e      	ldrh	r6, [r5, #16]
  40295e:	f362 0609 	bfi	r6, r2, #0, #10
  402962:	822e      	strh	r6, [r5, #16]
	ptr_job->b_buf_end = false;
  402964:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  402966:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  40296a:	f36f 1245 	bfc	r2, #5, #1
  40296e:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  402970:	09c0      	lsrs	r0, r0, #7
  402972:	d003      	beq.n	40297c <udd_ep_alloc+0x6c>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  402974:	b2d2      	uxtb	r2, r2
  402976:	f36f 0283 	bfc	r2, #2, #2
  40297a:	746a      	strb	r2, [r5, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  40297c:	4a24      	ldr	r2, [pc, #144]	; (402a10 <udd_ep_alloc+0x100>)
  40297e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402980:	2601      	movs	r6, #1
  402982:	fa06 f303 	lsl.w	r3, r6, r3
  402986:	431d      	orrs	r5, r3
  402988:	6295      	str	r5, [r2, #40]	; 0x28
  40298a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  40298c:	ea25 0303 	bic.w	r3, r5, r3
  402990:	6293      	str	r3, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  402992:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402994:	9300      	str	r3, [sp, #0]
  402996:	9b00      	ldr	r3, [sp, #0]
  402998:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40299c:	9300      	str	r3, [sp, #0]
  40299e:	9b00      	ldr	r3, [sp, #0]
  4029a0:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  4029a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4029a8:	9300      	str	r3, [sp, #0]
  4029aa:	b138      	cbz	r0, 4029bc <udd_ep_alloc+0xac>
  4029ac:	f041 0204 	orr.w	r2, r1, #4
  4029b0:	0212      	lsls	r2, r2, #8
  4029b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4029b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4029ba:	e004      	b.n	4029c6 <udd_ep_alloc+0xb6>
  4029bc:	020a      	lsls	r2, r1, #8
  4029be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4029c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4029c6:	9b00      	ldr	r3, [sp, #0]
  4029c8:	4313      	orrs	r3, r2
  4029ca:	9300      	str	r3, [sp, #0]
  4029cc:	9b00      	ldr	r3, [sp, #0]
  4029ce:	6323      	str	r3, [r4, #48]	; 0x30
  4029d0:	2300      	movs	r3, #0
  4029d2:	9301      	str	r3, [sp, #4]
  4029d4:	9b01      	ldr	r3, [sp, #4]
  4029d6:	2b13      	cmp	r3, #19
  4029d8:	d811      	bhi.n	4029fe <udd_ep_alloc+0xee>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4029da:	bf00      	nop
  4029dc:	9b01      	ldr	r3, [sp, #4]
  4029de:	3301      	adds	r3, #1
  4029e0:	9301      	str	r3, [sp, #4]
  4029e2:	9b01      	ldr	r3, [sp, #4]
  4029e4:	2b13      	cmp	r3, #19
  4029e6:	d9f8      	bls.n	4029da <udd_ep_alloc+0xca>
  4029e8:	e00b      	b.n	402a02 <udd_ep_alloc+0xf2>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  4029ea:	2000      	movs	r0, #0
  4029ec:	e00a      	b.n	402a04 <udd_ep_alloc+0xf4>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  4029ee:	2000      	movs	r0, #0
  4029f0:	e008      	b.n	402a04 <udd_ep_alloc+0xf4>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  4029f2:	2000      	movs	r0, #0
  4029f4:	e006      	b.n	402a04 <udd_ep_alloc+0xf4>
  4029f6:	2000      	movs	r0, #0
  4029f8:	e004      	b.n	402a04 <udd_ep_alloc+0xf4>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  4029fa:	2000      	movs	r0, #0
  4029fc:	e002      	b.n	402a04 <udd_ep_alloc+0xf4>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  4029fe:	2001      	movs	r0, #1
  402a00:	e000      	b.n	402a04 <udd_ep_alloc+0xf4>
  402a02:	2001      	movs	r0, #1
}
  402a04:	b003      	add	sp, #12
  402a06:	bc70      	pop	{r4, r5, r6}
  402a08:	4770      	bx	lr
  402a0a:	bf00      	nop
  402a0c:	20000b8c 	.word	0x20000b8c
  402a10:	40034000 	.word	0x40034000

00402a14 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  402a14:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402a16:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402a1a:	2a03      	cmp	r2, #3
  402a1c:	d811      	bhi.n	402a42 <udd_ep_free+0x2e>
  402a1e:	0093      	lsls	r3, r2, #2
  402a20:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402a24:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		return;
	}
	udd_disable_endpoint(ep_index);
  402a28:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402a2a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  402a2e:	6319      	str	r1, [r3, #48]	; 0x30
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402a30:	1e50      	subs	r0, r2, #1
  402a32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a36:	4b03      	ldr	r3, [pc, #12]	; (402a44 <udd_ep_free+0x30>)
  402a38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402a3c:	2101      	movs	r1, #1
  402a3e:	4b02      	ldr	r3, [pc, #8]	; (402a48 <udd_ep_free+0x34>)
  402a40:	4798      	blx	r3
  402a42:	bd08      	pop	{r3, pc}
  402a44:	20000b8c 	.word	0x20000b8c
  402a48:	00401a95 	.word	0x00401a95

00402a4c <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402a4c:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  402a50:	2803      	cmp	r0, #3
  402a52:	d815      	bhi.n	402a80 <udd_ep_is_halted+0x34>


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402a54:	1e43      	subs	r3, r0, #1
  402a56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402a5a:	4a0a      	ldr	r2, [pc, #40]	; (402a84 <udd_ep_is_halted+0x38>)
  402a5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402a60:	7c5b      	ldrb	r3, [r3, #17]
  402a62:	f013 0f20 	tst.w	r3, #32
  402a66:	d109      	bne.n	402a7c <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402a68:	300c      	adds	r0, #12
  402a6a:	4b07      	ldr	r3, [pc, #28]	; (402a88 <udd_ep_is_halted+0x3c>)
  402a6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402a70:	f013 0f28 	tst.w	r3, #40	; 0x28
  402a74:	bf0c      	ite	eq
  402a76:	2000      	moveq	r0, #0
  402a78:	2001      	movne	r0, #1
  402a7a:	4770      	bx	lr
  402a7c:	2001      	movs	r0, #1
  402a7e:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402a80:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  402a82:	4770      	bx	lr
  402a84:	20000b8c 	.word	0x20000b8c
  402a88:	40034000 	.word	0x40034000

00402a8c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  402a8c:	b410      	push	{r4}
  402a8e:	b083      	sub	sp, #12
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402a90:	f000 020f 	and.w	r2, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  402a94:	2a03      	cmp	r2, #3
  402a96:	d85f      	bhi.n	402b58 <udd_ep_set_halt+0xcc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402a98:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402a9c:	f1d1 0101 	rsbs	r1, r1, #1
  402aa0:	bf38      	it	cc
  402aa2:	2100      	movcc	r1, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402aa4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402aa6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402aaa:	2400      	movs	r4, #0
  402aac:	4b2f      	ldr	r3, [pc, #188]	; (402b6c <udd_ep_set_halt+0xe0>)
  402aae:	701c      	strb	r4, [r3, #0]
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402ab0:	f010 0f80 	tst.w	r0, #128	; 0x80
  402ab4:	d025      	beq.n	402b02 <udd_ep_set_halt+0x76>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402ab6:	1e53      	subs	r3, r2, #1
  402ab8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402abc:	482c      	ldr	r0, [pc, #176]	; (402b70 <udd_ep_set_halt+0xe4>)
  402abe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402ac2:	f102 040c 	add.w	r4, r2, #12
  402ac6:	482b      	ldr	r0, [pc, #172]	; (402b74 <udd_ep_set_halt+0xe8>)
  402ac8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  402acc:	f010 0f10 	tst.w	r0, #16
  402ad0:	d104      	bne.n	402adc <udd_ep_set_halt+0x50>
				|| ptr_job->bank > 1)) {
  402ad2:	7c58      	ldrb	r0, [r3, #17]
  402ad4:	f3c0 0081 	ubfx	r0, r0, #2, #2
  402ad8:	2801      	cmp	r0, #1
  402ada:	dd12      	ble.n	402b02 <udd_ep_set_halt+0x76>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  402adc:	7c58      	ldrb	r0, [r3, #17]
  402ade:	f040 0020 	orr.w	r0, r0, #32
  402ae2:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402ae4:	2301      	movs	r3, #1
  402ae6:	fa03 f202 	lsl.w	r2, r3, r2
  402aea:	4b22      	ldr	r3, [pc, #136]	; (402b74 <udd_ep_set_halt+0xe8>)
  402aec:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402aee:	2900      	cmp	r1, #0
  402af0:	d034      	beq.n	402b5c <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  402af2:	2201      	movs	r2, #1
  402af4:	4b1d      	ldr	r3, [pc, #116]	; (402b6c <udd_ep_set_halt+0xe0>)
  402af6:	701a      	strb	r2, [r3, #0]
  402af8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402afc:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return true;
  402afe:	2001      	movs	r0, #1
  402b00:	e02f      	b.n	402b62 <udd_ep_set_halt+0xd6>
  402b02:	0093      	lsls	r3, r2, #2
  402b04:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402b08:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  402b0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
  402b0e:	9000      	str	r0, [sp, #0]
  402b10:	9800      	ldr	r0, [sp, #0]
  402b12:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  402b16:	9000      	str	r0, [sp, #0]
  402b18:	9800      	ldr	r0, [sp, #0]
  402b1a:	f040 0020 	orr.w	r0, r0, #32
  402b1e:	9000      	str	r0, [sp, #0]
  402b20:	9800      	ldr	r0, [sp, #0]
  402b22:	6318      	str	r0, [r3, #48]	; 0x30
  402b24:	2300      	movs	r3, #0
  402b26:	9301      	str	r3, [sp, #4]
  402b28:	9b01      	ldr	r3, [sp, #4]
  402b2a:	2b13      	cmp	r3, #19
  402b2c:	d806      	bhi.n	402b3c <udd_ep_set_halt+0xb0>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402b2e:	bf00      	nop
  402b30:	9b01      	ldr	r3, [sp, #4]
  402b32:	3301      	adds	r3, #1
  402b34:	9301      	str	r3, [sp, #4]
  402b36:	9b01      	ldr	r3, [sp, #4]
  402b38:	2b13      	cmp	r3, #19
  402b3a:	d9f8      	bls.n	402b2e <udd_ep_set_halt+0xa2>
		udd_enable_endpoint_interrupt(ep_index);
  402b3c:	2301      	movs	r3, #1
  402b3e:	fa03 f202 	lsl.w	r2, r3, r2
  402b42:	4b0c      	ldr	r3, [pc, #48]	; (402b74 <udd_ep_set_halt+0xe8>)
  402b44:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402b46:	b159      	cbz	r1, 402b60 <udd_ep_set_halt+0xd4>
		cpu_irq_enable();
  402b48:	2201      	movs	r2, #1
  402b4a:	4b08      	ldr	r3, [pc, #32]	; (402b6c <udd_ep_set_halt+0xe0>)
  402b4c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402b4e:	f3bf 8f5f 	dmb	sy
  402b52:	b662      	cpsie	i
		cpu_irq_restore(flags);
	}
	return true;
  402b54:	2001      	movs	r0, #1
  402b56:	e004      	b.n	402b62 <udd_ep_set_halt+0xd6>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402b58:	2000      	movs	r0, #0
  402b5a:	e002      	b.n	402b62 <udd_ep_set_halt+0xd6>
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  402b5c:	2001      	movs	r0, #1
  402b5e:	e000      	b.n	402b62 <udd_ep_set_halt+0xd6>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  402b60:	2001      	movs	r0, #1
}
  402b62:	b003      	add	sp, #12
  402b64:	f85d 4b04 	ldr.w	r4, [sp], #4
  402b68:	4770      	bx	lr
  402b6a:	bf00      	nop
  402b6c:	200000b0 	.word	0x200000b0
  402b70:	20000b8c 	.word	0x20000b8c
  402b74:	40034000 	.word	0x40034000

00402b78 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b7a:	b085      	sub	sp, #20
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402b7c:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402b80:	2803      	cmp	r0, #3
  402b82:	d859      	bhi.n	402c38 <udd_ep_clear_halt+0xc0>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  402b84:	4c30      	ldr	r4, [pc, #192]	; (402c48 <udd_ep_clear_halt+0xd0>)
  402b86:	1e43      	subs	r3, r0, #1
  402b88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b8c:	009d      	lsls	r5, r3, #2
  402b8e:	1961      	adds	r1, r4, r5

	ptr_job->b_stall_requested = false;
  402b90:	7c4b      	ldrb	r3, [r1, #17]
  402b92:	f36f 1345 	bfc	r3, #5, #1
  402b96:	744b      	strb	r3, [r1, #17]
  402b98:	0082      	lsls	r2, r0, #2
  402b9a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402b9e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402ba2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ba4:	f013 0f20 	tst.w	r3, #32
  402ba8:	d048      	beq.n	402c3c <udd_ep_clear_halt+0xc4>
		// Remove stall
		udd_disable_stall_handshake(ep);
  402baa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402bac:	9300      	str	r3, [sp, #0]
  402bae:	9b00      	ldr	r3, [sp, #0]
  402bb0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402bb4:	9300      	str	r3, [sp, #0]
  402bb6:	9b00      	ldr	r3, [sp, #0]
  402bb8:	f023 0320 	bic.w	r3, r3, #32
  402bbc:	9300      	str	r3, [sp, #0]
  402bbe:	9b00      	ldr	r3, [sp, #0]
  402bc0:	6313      	str	r3, [r2, #48]	; 0x30
  402bc2:	2300      	movs	r3, #0
  402bc4:	9301      	str	r3, [sp, #4]
  402bc6:	9b01      	ldr	r3, [sp, #4]
  402bc8:	2b13      	cmp	r3, #19
  402bca:	d806      	bhi.n	402bda <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402bcc:	bf00      	nop
  402bce:	9b01      	ldr	r3, [sp, #4]
  402bd0:	3301      	adds	r3, #1
  402bd2:	9301      	str	r3, [sp, #4]
  402bd4:	9b01      	ldr	r3, [sp, #4]
  402bd6:	2b13      	cmp	r3, #19
  402bd8:	d9f8      	bls.n	402bcc <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  402bda:	4b1c      	ldr	r3, [pc, #112]	; (402c4c <udd_ep_clear_halt+0xd4>)
  402bdc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  402bde:	2701      	movs	r7, #1
  402be0:	fa07 f000 	lsl.w	r0, r7, r0
  402be4:	4306      	orrs	r6, r0
  402be6:	629e      	str	r6, [r3, #40]	; 0x28
  402be8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  402bea:	ea26 0000 	bic.w	r0, r6, r0
  402bee:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  402bf0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402bf2:	9302      	str	r3, [sp, #8]
  402bf4:	9b02      	ldr	r3, [sp, #8]
  402bf6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402bfa:	9302      	str	r3, [sp, #8]
  402bfc:	9b02      	ldr	r3, [sp, #8]
  402bfe:	f023 0308 	bic.w	r3, r3, #8
  402c02:	9302      	str	r3, [sp, #8]
  402c04:	9b02      	ldr	r3, [sp, #8]
  402c06:	6313      	str	r3, [r2, #48]	; 0x30
  402c08:	2300      	movs	r3, #0
  402c0a:	9303      	str	r3, [sp, #12]
  402c0c:	9b03      	ldr	r3, [sp, #12]
  402c0e:	2b13      	cmp	r3, #19
  402c10:	d806      	bhi.n	402c20 <udd_ep_clear_halt+0xa8>
  402c12:	bf00      	nop
  402c14:	9b03      	ldr	r3, [sp, #12]
  402c16:	3301      	adds	r3, #1
  402c18:	9303      	str	r3, [sp, #12]
  402c1a:	9b03      	ldr	r3, [sp, #12]
  402c1c:	2b13      	cmp	r3, #19
  402c1e:	d9f8      	bls.n	402c12 <udd_ep_clear_halt+0x9a>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  402c20:	7c4b      	ldrb	r3, [r1, #17]
  402c22:	f013 0f10 	tst.w	r3, #16
  402c26:	d00b      	beq.n	402c40 <udd_ep_clear_halt+0xc8>
			ptr_job->busy = false;
  402c28:	7c4b      	ldrb	r3, [r1, #17]
  402c2a:	f36f 1304 	bfc	r3, #4, #1
  402c2e:	744b      	strb	r3, [r1, #17]
			ptr_job->call_nohalt();
  402c30:	5963      	ldr	r3, [r4, r5]
  402c32:	4798      	blx	r3
		}
	}
	return true;
  402c34:	2001      	movs	r0, #1
  402c36:	e004      	b.n	402c42 <udd_ep_clear_halt+0xca>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  402c38:	2000      	movs	r0, #0
  402c3a:	e002      	b.n	402c42 <udd_ep_clear_halt+0xca>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  402c3c:	2001      	movs	r0, #1
  402c3e:	e000      	b.n	402c42 <udd_ep_clear_halt+0xca>
  402c40:	2001      	movs	r0, #1
}
  402c42:	b005      	add	sp, #20
  402c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402c46:	bf00      	nop
  402c48:	20000b8c 	.word	0x20000b8c
  402c4c:	40034000 	.word	0x40034000

00402c50 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  402c54:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402c58:	2c03      	cmp	r4, #3
  402c5a:	f200 8089 	bhi.w	402d70 <udd_ep_run+0x120>
  402c5e:	00a5      	lsls	r5, r4, #2
  402c60:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402c64:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  402c68:	6b2e      	ldr	r6, [r5, #48]	; 0x30
  402c6a:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  402c6e:	f000 8082 	beq.w	402d76 <udd_ep_run+0x126>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  402c72:	f8df c12c 	ldr.w	ip, [pc, #300]	; 402da0 <udd_ep_run+0x150>
  402c76:	1e66      	subs	r6, r4, #1
  402c78:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402c7c:	00b7      	lsls	r7, r6, #2
  402c7e:	eb0c 0607 	add.w	r6, ip, r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  402c82:	f896 8011 	ldrb.w	r8, [r6, #17]
  402c86:	f018 0f20 	tst.w	r8, #32
  402c8a:	d177      	bne.n	402d7c <udd_ep_run+0x12c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402c8c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
  402c90:	f018 0f20 	tst.w	r8, #32
  402c94:	d175      	bne.n	402d82 <udd_ep_run+0x132>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402c96:	f3ef 8810 	mrs	r8, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402c9a:	f1d8 0a01 	rsbs	sl, r8, #1
  402c9e:	bf38      	it	cc
  402ca0:	f04f 0a00 	movcc.w	sl, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402ca4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402ca6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402caa:	f04f 0900 	mov.w	r9, #0
  402cae:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 402d94 <udd_ep_run+0x144>
  402cb2:	f888 9000 	strb.w	r9, [r8]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  402cb6:	f896 8011 	ldrb.w	r8, [r6, #17]
  402cba:	f018 0f10 	tst.w	r8, #16
  402cbe:	d00b      	beq.n	402cd8 <udd_ep_run+0x88>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402cc0:	f1ba 0f00 	cmp.w	sl, #0
  402cc4:	d060      	beq.n	402d88 <udd_ep_run+0x138>
		cpu_irq_enable();
  402cc6:	2201      	movs	r2, #1
  402cc8:	4b32      	ldr	r3, [pc, #200]	; (402d94 <udd_ep_run+0x144>)
  402cca:	701a      	strb	r2, [r3, #0]
  402ccc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402cd0:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  402cd2:	2000      	movs	r0, #0
  402cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	ptr_job->busy = true;
  402cd8:	f896 8011 	ldrb.w	r8, [r6, #17]
  402cdc:	f048 0810 	orr.w	r8, r8, #16
  402ce0:	f886 8011 	strb.w	r8, [r6, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402ce4:	f1ba 0f00 	cmp.w	sl, #0
  402ce8:	d008      	beq.n	402cfc <udd_ep_run+0xac>
		cpu_irq_enable();
  402cea:	f04f 0901 	mov.w	r9, #1
  402cee:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 402d94 <udd_ep_run+0x144>
  402cf2:	f888 9000 	strb.w	r9, [r8]
  402cf6:	f3bf 8f5f 	dmb	sy
  402cfa:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  402cfc:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
  402cfe:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
  402d00:	2200      	movs	r2, #0
  402d02:	60f2      	str	r2, [r6, #12]
	ptr_job->call_trans = callback;
  402d04:	9a08      	ldr	r2, [sp, #32]
  402d06:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402d0a:	b921      	cbnz	r1, 402d16 <udd_ep_run+0xc6>
  402d0c:	f1d3 0201 	rsbs	r2, r3, #1
  402d10:	bf38      	it	cc
  402d12:	2200      	movcc	r2, #0
  402d14:	e000      	b.n	402d18 <udd_ep_run+0xc8>
  402d16:	2201      	movs	r2, #1
  402d18:	7c73      	ldrb	r3, [r6, #17]
  402d1a:	f362 1386 	bfi	r3, r2, #6, #1
	ptr_job->b_buf_end = false;
  402d1e:	f36f 13c7 	bfc	r3, #7, #1
  402d22:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402d24:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402d28:	b672      	cpsid	i
  402d2a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402d2e:	2200      	movs	r2, #0
  402d30:	4b18      	ldr	r3, [pc, #96]	; (402d94 <udd_ep_run+0x144>)
  402d32:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  402d34:	2201      	movs	r2, #1
  402d36:	40a2      	lsls	r2, r4
  402d38:	4b17      	ldr	r3, [pc, #92]	; (402d98 <udd_ep_run+0x148>)
  402d3a:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  402d3c:	f010 0f80 	tst.w	r0, #128	; 0x80
  402d40:	d00c      	beq.n	402d5c <udd_ep_run+0x10c>
		if (Is_udd_in_pending(ep)) {
  402d42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402d44:	f013 0f11 	tst.w	r3, #17
  402d48:	d108      	bne.n	402d5c <udd_ep_run+0x10c>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  402d4a:	4620      	mov	r0, r4
  402d4c:	2101      	movs	r1, #1
  402d4e:	4b13      	ldr	r3, [pc, #76]	; (402d9c <udd_ep_run+0x14c>)
  402d50:	4798      	blx	r3
  402d52:	b118      	cbz	r0, 402d5c <udd_ep_run+0x10c>
				// Over one bank
				udd_ep_in_sent(ep, false);
  402d54:	4620      	mov	r0, r4
  402d56:	2100      	movs	r1, #0
  402d58:	4b10      	ldr	r3, [pc, #64]	; (402d9c <udd_ep_run+0x14c>)
  402d5a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402d5c:	b9be      	cbnz	r6, 402d8e <udd_ep_run+0x13e>
		cpu_irq_enable();
  402d5e:	2201      	movs	r2, #1
  402d60:	4b0c      	ldr	r3, [pc, #48]	; (402d94 <udd_ep_run+0x144>)
  402d62:	701a      	strb	r2, [r3, #0]
  402d64:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402d68:	b662      	cpsie	i
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402d6a:	2001      	movs	r0, #1
  402d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  402d70:	2000      	movs	r0, #0
  402d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  402d76:	2000      	movs	r0, #0
  402d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d7c:	2000      	movs	r0, #0
  402d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d82:	2000      	movs	r0, #0
  402d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  402d88:	2000      	movs	r0, #0
  402d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402d8e:	2001      	movs	r0, #1
}
  402d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d94:	200000b0 	.word	0x200000b0
  402d98:	40034000 	.word	0x40034000
  402d9c:	00401ba1 	.word	0x00401ba1
  402da0:	20000b8c 	.word	0x20000b8c

00402da4 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  402da4:	b5f0      	push	{r4, r5, r6, r7, lr}
  402da6:	b085      	sub	sp, #20
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  402da8:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402dac:	2c03      	cmp	r4, #3
  402dae:	f200 8090 	bhi.w	402ed2 <udd_ep_abort+0x12e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402db2:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402db6:	b672      	cpsid	i
  402db8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402dbc:	2100      	movs	r1, #0
  402dbe:	4a46      	ldr	r2, [pc, #280]	; (402ed8 <udd_ep_abort+0x134>)
  402dc0:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  402dc2:	2601      	movs	r6, #1
  402dc4:	40a6      	lsls	r6, r4
  402dc6:	4a45      	ldr	r2, [pc, #276]	; (402edc <udd_ep_abort+0x138>)
  402dc8:	6156      	str	r6, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402dca:	b92b      	cbnz	r3, 402dd8 <udd_ep_abort+0x34>
		cpu_irq_enable();
  402dcc:	2201      	movs	r2, #1
  402dce:	4b42      	ldr	r3, [pc, #264]	; (402ed8 <udd_ep_abort+0x134>)
  402dd0:	701a      	strb	r2, [r3, #0]
  402dd2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402dd6:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  402dd8:	f010 0f80 	tst.w	r0, #128	; 0x80
  402ddc:	d109      	bne.n	402df2 <udd_ep_abort+0x4e>
  402dde:	00a5      	lsls	r5, r4, #2
  402de0:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402de4:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402de8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402dea:	f013 0f42 	tst.w	r3, #66	; 0x42
  402dee:	d157      	bne.n	402ea0 <udd_ep_abort+0xfc>
  402df0:	e05d      	b.n	402eae <udd_ep_abort+0x10a>
  402df2:	00a3      	lsls	r3, r4, #2
  402df4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402df8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  402dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402dfe:	f012 0f10 	tst.w	r2, #16
  402e02:	d02a      	beq.n	402e5a <udd_ep_abort+0xb6>
			udd_kill_data_in_fifo(ep,
  402e04:	b18c      	cbz	r4, 402e2a <udd_ep_abort+0x86>
  402e06:	2c03      	cmp	r4, #3
  402e08:	d00f      	beq.n	402e2a <udd_ep_abort+0x86>
  402e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e0c:	f022 0210 	bic.w	r2, r2, #16
  402e10:	631a      	str	r2, [r3, #48]	; 0x30
  402e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e14:	f012 0f10 	tst.w	r2, #16
  402e18:	d1fb      	bne.n	402e12 <udd_ep_abort+0x6e>
  402e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e1c:	f042 0210 	orr.w	r2, r2, #16
  402e20:	631a      	str	r2, [r3, #48]	; 0x30
  402e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e24:	f012 0f10 	tst.w	r2, #16
  402e28:	d0fb      	beq.n	402e22 <udd_ep_abort+0x7e>
  402e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e2c:	9200      	str	r2, [sp, #0]
  402e2e:	9a00      	ldr	r2, [sp, #0]
  402e30:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402e34:	9200      	str	r2, [sp, #0]
  402e36:	9a00      	ldr	r2, [sp, #0]
  402e38:	f022 0210 	bic.w	r2, r2, #16
  402e3c:	9200      	str	r2, [sp, #0]
  402e3e:	9a00      	ldr	r2, [sp, #0]
  402e40:	631a      	str	r2, [r3, #48]	; 0x30
  402e42:	2200      	movs	r2, #0
  402e44:	9201      	str	r2, [sp, #4]
  402e46:	9a01      	ldr	r2, [sp, #4]
  402e48:	2a13      	cmp	r2, #19
  402e4a:	d806      	bhi.n	402e5a <udd_ep_abort+0xb6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402e4c:	bf00      	nop
  402e4e:	9a01      	ldr	r2, [sp, #4]
  402e50:	3201      	adds	r2, #1
  402e52:	9201      	str	r2, [sp, #4]
  402e54:	9a01      	ldr	r2, [sp, #4]
  402e56:	2a13      	cmp	r2, #19
  402e58:	d9f8      	bls.n	402e4c <udd_ep_abort+0xa8>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  402e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402e5c:	9202      	str	r2, [sp, #8]
  402e5e:	9a02      	ldr	r2, [sp, #8]
  402e60:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402e64:	9202      	str	r2, [sp, #8]
  402e66:	9a02      	ldr	r2, [sp, #8]
  402e68:	f022 0201 	bic.w	r2, r2, #1
  402e6c:	9202      	str	r2, [sp, #8]
  402e6e:	9a02      	ldr	r2, [sp, #8]
  402e70:	631a      	str	r2, [r3, #48]	; 0x30
  402e72:	2300      	movs	r3, #0
  402e74:	9303      	str	r3, [sp, #12]
  402e76:	9b03      	ldr	r3, [sp, #12]
  402e78:	2b13      	cmp	r3, #19
  402e7a:	d806      	bhi.n	402e8a <udd_ep_abort+0xe6>
  402e7c:	bf00      	nop
  402e7e:	9b03      	ldr	r3, [sp, #12]
  402e80:	3301      	adds	r3, #1
  402e82:	9303      	str	r3, [sp, #12]
  402e84:	9b03      	ldr	r3, [sp, #12]
  402e86:	2b13      	cmp	r3, #19
  402e88:	d9f8      	bls.n	402e7c <udd_ep_abort+0xd8>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  402e8a:	1e63      	subs	r3, r4, #1
  402e8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402e90:	4a13      	ldr	r2, [pc, #76]	; (402ee0 <udd_ep_abort+0x13c>)
  402e92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402e96:	7c5a      	ldrb	r2, [r3, #17]
  402e98:	f36f 0283 	bfc	r2, #2, #2
  402e9c:	745a      	strb	r2, [r3, #17]
  402e9e:	e006      	b.n	402eae <udd_ep_abort+0x10a>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  402ea0:	4f10      	ldr	r7, [pc, #64]	; (402ee4 <udd_ep_abort+0x140>)
  402ea2:	4620      	mov	r0, r4
  402ea4:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402ea6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402ea8:	f013 0f42 	tst.w	r3, #66	; 0x42
  402eac:	d1f9      	bne.n	402ea2 <udd_ep_abort+0xfe>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  402eae:	4b0b      	ldr	r3, [pc, #44]	; (402edc <udd_ep_abort+0x138>)
  402eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402eb2:	4332      	orrs	r2, r6
  402eb4:	629a      	str	r2, [r3, #40]	; 0x28
  402eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402eb8:	ea22 0606 	bic.w	r6, r2, r6
  402ebc:	629e      	str	r6, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402ebe:	1e60      	subs	r0, r4, #1
  402ec0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ec4:	4b06      	ldr	r3, [pc, #24]	; (402ee0 <udd_ep_abort+0x13c>)
  402ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402eca:	2101      	movs	r1, #1
  402ecc:	4622      	mov	r2, r4
  402ece:	4b06      	ldr	r3, [pc, #24]	; (402ee8 <udd_ep_abort+0x144>)
  402ed0:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  402ed2:	b005      	add	sp, #20
  402ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ed6:	bf00      	nop
  402ed8:	200000b0 	.word	0x200000b0
  402edc:	40034000 	.word	0x40034000
  402ee0:	20000b8c 	.word	0x20000b8c
  402ee4:	00401ad5 	.word	0x00401ad5
  402ee8:	00401a95 	.word	0x00401a95

00402eec <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  402eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402ef0:	6043      	str	r3, [r0, #4]
  402ef2:	4770      	bx	lr

00402ef4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402ef4:	e7fe      	b.n	402ef4 <Dummy_Handler>
  402ef6:	bf00      	nop

00402ef8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402ef8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  402efa:	4b1e      	ldr	r3, [pc, #120]	; (402f74 <Reset_Handler+0x7c>)
  402efc:	4a1e      	ldr	r2, [pc, #120]	; (402f78 <Reset_Handler+0x80>)
  402efe:	429a      	cmp	r2, r3
  402f00:	d003      	beq.n	402f0a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  402f02:	4b1e      	ldr	r3, [pc, #120]	; (402f7c <Reset_Handler+0x84>)
  402f04:	4a1b      	ldr	r2, [pc, #108]	; (402f74 <Reset_Handler+0x7c>)
  402f06:	429a      	cmp	r2, r3
  402f08:	d304      	bcc.n	402f14 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402f0a:	4b1d      	ldr	r3, [pc, #116]	; (402f80 <Reset_Handler+0x88>)
  402f0c:	4a1d      	ldr	r2, [pc, #116]	; (402f84 <Reset_Handler+0x8c>)
  402f0e:	429a      	cmp	r2, r3
  402f10:	d30f      	bcc.n	402f32 <Reset_Handler+0x3a>
  402f12:	e01a      	b.n	402f4a <Reset_Handler+0x52>
  402f14:	4b1c      	ldr	r3, [pc, #112]	; (402f88 <Reset_Handler+0x90>)
  402f16:	4c1d      	ldr	r4, [pc, #116]	; (402f8c <Reset_Handler+0x94>)
  402f18:	1ae4      	subs	r4, r4, r3
  402f1a:	f024 0403 	bic.w	r4, r4, #3
  402f1e:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  402f20:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  402f22:	4814      	ldr	r0, [pc, #80]	; (402f74 <Reset_Handler+0x7c>)
  402f24:	4914      	ldr	r1, [pc, #80]	; (402f78 <Reset_Handler+0x80>)
  402f26:	585a      	ldr	r2, [r3, r1]
  402f28:	501a      	str	r2, [r3, r0]
  402f2a:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  402f2c:	42a3      	cmp	r3, r4
  402f2e:	d1fa      	bne.n	402f26 <Reset_Handler+0x2e>
  402f30:	e7eb      	b.n	402f0a <Reset_Handler+0x12>
  402f32:	4b17      	ldr	r3, [pc, #92]	; (402f90 <Reset_Handler+0x98>)
  402f34:	4917      	ldr	r1, [pc, #92]	; (402f94 <Reset_Handler+0x9c>)
  402f36:	1ac9      	subs	r1, r1, r3
  402f38:	f021 0103 	bic.w	r1, r1, #3
  402f3c:	1d1a      	adds	r2, r3, #4
  402f3e:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  402f40:	2200      	movs	r2, #0
  402f42:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402f46:	428b      	cmp	r3, r1
  402f48:	d1fb      	bne.n	402f42 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402f4a:	4a13      	ldr	r2, [pc, #76]	; (402f98 <Reset_Handler+0xa0>)
  402f4c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
  402f50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402f54:	4911      	ldr	r1, [pc, #68]	; (402f9c <Reset_Handler+0xa4>)
  402f56:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  402f58:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  402f5c:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
  402f60:	d203      	bcs.n	402f6a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  402f62:	688a      	ldr	r2, [r1, #8]
  402f64:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  402f68:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  402f6a:	4b0d      	ldr	r3, [pc, #52]	; (402fa0 <Reset_Handler+0xa8>)
  402f6c:	4798      	blx	r3

	/* Branch to main function */
	main();
  402f6e:	4b0d      	ldr	r3, [pc, #52]	; (402fa4 <Reset_Handler+0xac>)
  402f70:	4798      	blx	r3
  402f72:	e7fe      	b.n	402f72 <Reset_Handler+0x7a>
  402f74:	20000000 	.word	0x20000000
  402f78:	00407e84 	.word	0x00407e84
  402f7c:	20000978 	.word	0x20000978
  402f80:	20000c58 	.word	0x20000c58
  402f84:	20000978 	.word	0x20000978
  402f88:	20000004 	.word	0x20000004
  402f8c:	2000097b 	.word	0x2000097b
  402f90:	20000974 	.word	0x20000974
  402f94:	20000c53 	.word	0x20000c53
  402f98:	00400000 	.word	0x00400000
  402f9c:	e000ed00 	.word	0xe000ed00
  402fa0:	00403179 	.word	0x00403179
  402fa4:	00403135 	.word	0x00403135

00402fa8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  402fa8:	4b3d      	ldr	r3, [pc, #244]	; (4030a0 <SystemCoreClockUpdate+0xf8>)
  402faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402fac:	f003 0303 	and.w	r3, r3, #3
  402fb0:	2b03      	cmp	r3, #3
  402fb2:	d85d      	bhi.n	403070 <SystemCoreClockUpdate+0xc8>
  402fb4:	e8df f003 	tbb	[pc, r3]
  402fb8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  402fbc:	4b39      	ldr	r3, [pc, #228]	; (4030a4 <SystemCoreClockUpdate+0xfc>)
  402fbe:	695b      	ldr	r3, [r3, #20]
  402fc0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402fc4:	bf14      	ite	ne
  402fc6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402fca:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402fce:	4b36      	ldr	r3, [pc, #216]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  402fd0:	601a      	str	r2, [r3, #0]
  402fd2:	e04d      	b.n	403070 <SystemCoreClockUpdate+0xc8>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  402fd4:	4b32      	ldr	r3, [pc, #200]	; (4030a0 <SystemCoreClockUpdate+0xf8>)
  402fd6:	6a1b      	ldr	r3, [r3, #32]
  402fd8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402fdc:	d003      	beq.n	402fe6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402fde:	4a33      	ldr	r2, [pc, #204]	; (4030ac <SystemCoreClockUpdate+0x104>)
  402fe0:	4b31      	ldr	r3, [pc, #196]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  402fe2:	601a      	str	r2, [r3, #0]
  402fe4:	e044      	b.n	403070 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402fe6:	4a32      	ldr	r2, [pc, #200]	; (4030b0 <SystemCoreClockUpdate+0x108>)
  402fe8:	4b2f      	ldr	r3, [pc, #188]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  402fea:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  402fec:	4b2c      	ldr	r3, [pc, #176]	; (4030a0 <SystemCoreClockUpdate+0xf8>)
  402fee:	6a1b      	ldr	r3, [r3, #32]
  402ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402ff4:	2b10      	cmp	r3, #16
  402ff6:	d002      	beq.n	402ffe <SystemCoreClockUpdate+0x56>
  402ff8:	2b20      	cmp	r3, #32
  402ffa:	d004      	beq.n	403006 <SystemCoreClockUpdate+0x5e>
  402ffc:	e038      	b.n	403070 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  402ffe:	4a2d      	ldr	r2, [pc, #180]	; (4030b4 <SystemCoreClockUpdate+0x10c>)
  403000:	4b29      	ldr	r3, [pc, #164]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  403002:	601a      	str	r2, [r3, #0]
				break;
  403004:	e034      	b.n	403070 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  403006:	4a29      	ldr	r2, [pc, #164]	; (4030ac <SystemCoreClockUpdate+0x104>)
  403008:	4b27      	ldr	r3, [pc, #156]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  40300a:	601a      	str	r2, [r3, #0]
				break;
  40300c:	e030      	b.n	403070 <SystemCoreClockUpdate+0xc8>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40300e:	4b24      	ldr	r3, [pc, #144]	; (4030a0 <SystemCoreClockUpdate+0xf8>)
  403010:	6a1b      	ldr	r3, [r3, #32]
  403012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403016:	d003      	beq.n	403020 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403018:	4a24      	ldr	r2, [pc, #144]	; (4030ac <SystemCoreClockUpdate+0x104>)
  40301a:	4b23      	ldr	r3, [pc, #140]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  40301c:	601a      	str	r2, [r3, #0]
  40301e:	e012      	b.n	403046 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403020:	4a23      	ldr	r2, [pc, #140]	; (4030b0 <SystemCoreClockUpdate+0x108>)
  403022:	4b21      	ldr	r3, [pc, #132]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  403024:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  403026:	4b1e      	ldr	r3, [pc, #120]	; (4030a0 <SystemCoreClockUpdate+0xf8>)
  403028:	6a1b      	ldr	r3, [r3, #32]
  40302a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40302e:	2b10      	cmp	r3, #16
  403030:	d002      	beq.n	403038 <SystemCoreClockUpdate+0x90>
  403032:	2b20      	cmp	r3, #32
  403034:	d004      	beq.n	403040 <SystemCoreClockUpdate+0x98>
  403036:	e006      	b.n	403046 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  403038:	4a1e      	ldr	r2, [pc, #120]	; (4030b4 <SystemCoreClockUpdate+0x10c>)
  40303a:	4b1b      	ldr	r3, [pc, #108]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  40303c:	601a      	str	r2, [r3, #0]
				break;
  40303e:	e002      	b.n	403046 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  403040:	4a1a      	ldr	r2, [pc, #104]	; (4030ac <SystemCoreClockUpdate+0x104>)
  403042:	4b19      	ldr	r3, [pc, #100]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  403044:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  403046:	4b16      	ldr	r3, [pc, #88]	; (4030a0 <SystemCoreClockUpdate+0xf8>)
  403048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40304a:	f003 0303 	and.w	r3, r3, #3
  40304e:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  403050:	4b13      	ldr	r3, [pc, #76]	; (4030a0 <SystemCoreClockUpdate+0xf8>)
  403052:	bf07      	ittee	eq
  403054:	6a98      	ldreq	r0, [r3, #40]	; 0x28
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  403056:	6a99      	ldreq	r1, [r3, #40]	; 0x28
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  403058:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  40305a:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  40305c:	4b12      	ldr	r3, [pc, #72]	; (4030a8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  40305e:	f3c0 400a 	ubfx	r0, r0, #16, #11
  403062:	681a      	ldr	r2, [r3, #0]
  403064:	fb00 2202 	mla	r2, r0, r2, r2
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  403068:	b2c9      	uxtb	r1, r1
  40306a:	fbb2 f2f1 	udiv	r2, r2, r1
  40306e:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  403070:	4b0b      	ldr	r3, [pc, #44]	; (4030a0 <SystemCoreClockUpdate+0xf8>)
  403072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403074:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403078:	2b70      	cmp	r3, #112	; 0x70
  40307a:	d107      	bne.n	40308c <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  40307c:	4b0a      	ldr	r3, [pc, #40]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  40307e:	681a      	ldr	r2, [r3, #0]
  403080:	490d      	ldr	r1, [pc, #52]	; (4030b8 <SystemCoreClockUpdate+0x110>)
  403082:	fba1 0202 	umull	r0, r2, r1, r2
  403086:	0852      	lsrs	r2, r2, #1
  403088:	601a      	str	r2, [r3, #0]
  40308a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40308c:	4b04      	ldr	r3, [pc, #16]	; (4030a0 <SystemCoreClockUpdate+0xf8>)
  40308e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  403090:	4b05      	ldr	r3, [pc, #20]	; (4030a8 <SystemCoreClockUpdate+0x100>)
  403092:	f3c1 1102 	ubfx	r1, r1, #4, #3
  403096:	681a      	ldr	r2, [r3, #0]
  403098:	40ca      	lsrs	r2, r1
  40309a:	601a      	str	r2, [r3, #0]
  40309c:	4770      	bx	lr
  40309e:	bf00      	nop
  4030a0:	400e0400 	.word	0x400e0400
  4030a4:	400e1410 	.word	0x400e1410
  4030a8:	200000b4 	.word	0x200000b4
  4030ac:	00b71b00 	.word	0x00b71b00
  4030b0:	003d0900 	.word	0x003d0900
  4030b4:	007a1200 	.word	0x007a1200
  4030b8:	aaaaaaab 	.word	0xaaaaaaab

004030bc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  4030bc:	4b0c      	ldr	r3, [pc, #48]	; (4030f0 <system_init_flash+0x34>)
  4030be:	4298      	cmp	r0, r3
  4030c0:	d803      	bhi.n	4030ca <system_init_flash+0xe>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
  4030c2:	2200      	movs	r2, #0
  4030c4:	4b0b      	ldr	r3, [pc, #44]	; (4030f4 <system_init_flash+0x38>)
  4030c6:	601a      	str	r2, [r3, #0]
  4030c8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  4030ca:	4b0b      	ldr	r3, [pc, #44]	; (4030f8 <system_init_flash+0x3c>)
  4030cc:	4298      	cmp	r0, r3
  4030ce:	d804      	bhi.n	4030da <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
  4030d0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4030d4:	4b07      	ldr	r3, [pc, #28]	; (4030f4 <system_init_flash+0x38>)
  4030d6:	601a      	str	r2, [r3, #0]
  4030d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  4030da:	4b08      	ldr	r3, [pc, #32]	; (4030fc <system_init_flash+0x40>)
  4030dc:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
  4030de:	bf94      	ite	ls
  4030e0:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
  4030e4:	f44f 7240 	movhi.w	r2, #768	; 0x300
  4030e8:	4b02      	ldr	r3, [pc, #8]	; (4030f4 <system_init_flash+0x38>)
  4030ea:	601a      	str	r2, [r3, #0]
  4030ec:	4770      	bx	lr
  4030ee:	bf00      	nop
  4030f0:	0103663f 	.word	0x0103663f
  4030f4:	400e0a00 	.word	0x400e0a00
  4030f8:	01c9c37f 	.word	0x01c9c37f
  4030fc:	0337f97f 	.word	0x0337f97f

00403100 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403100:	4b09      	ldr	r3, [pc, #36]	; (403128 <_sbrk+0x28>)
  403102:	681b      	ldr	r3, [r3, #0]
  403104:	b913      	cbnz	r3, 40310c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  403106:	4a09      	ldr	r2, [pc, #36]	; (40312c <_sbrk+0x2c>)
  403108:	4b07      	ldr	r3, [pc, #28]	; (403128 <_sbrk+0x28>)
  40310a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  40310c:	4b06      	ldr	r3, [pc, #24]	; (403128 <_sbrk+0x28>)
  40310e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403110:	181a      	adds	r2, r3, r0
  403112:	4907      	ldr	r1, [pc, #28]	; (403130 <_sbrk+0x30>)
  403114:	4291      	cmp	r1, r2
  403116:	db04      	blt.n	403122 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403118:	4610      	mov	r0, r2
  40311a:	4a03      	ldr	r2, [pc, #12]	; (403128 <_sbrk+0x28>)
  40311c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40311e:	4618      	mov	r0, r3
  403120:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403122:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  403126:	4770      	bx	lr
  403128:	20000bd0 	.word	0x20000bd0
  40312c:	20002c58 	.word	0x20002c58
  403130:	2000bffc 	.word	0x2000bffc

00403134 <main>:


uint16_t angle;

int main (void)
{
  403134:	b508      	push	{r3, lr}
	// Insert system clock initialization code here (sysclk_init()).
	

	board_init();
  403136:	4b07      	ldr	r3, [pc, #28]	; (403154 <main+0x20>)
  403138:	4798      	blx	r3
	sysclk_init();
  40313a:	4b07      	ldr	r3, [pc, #28]	; (403158 <main+0x24>)
  40313c:	4798      	blx	r3
	/*
	ADC_init();
	timer_init();
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
	*/
	udc_start();
  40313e:	4b07      	ldr	r3, [pc, #28]	; (40315c <main+0x28>)
  403140:	4798      	blx	r3
	
	
	while(1)
	{
		parse_comands();
  403142:	4e07      	ldr	r6, [pc, #28]	; (403160 <main+0x2c>)
		delay_ms(10);
  403144:	f24b 2593 	movw	r5, #45715	; 0xb293
  403148:	4c06      	ldr	r4, [pc, #24]	; (403164 <main+0x30>)
	udc_start();
	
	
	while(1)
	{
		parse_comands();
  40314a:	47b0      	blx	r6
		delay_ms(10);
  40314c:	4628      	mov	r0, r5
  40314e:	47a0      	blx	r4
  403150:	e7fb      	b.n	40314a <main+0x16>
  403152:	bf00      	nop
  403154:	004004ed 	.word	0x004004ed
  403158:	00400599 	.word	0x00400599
  40315c:	00400ed1 	.word	0x00400ed1
  403160:	00400295 	.word	0x00400295
  403164:	20000001 	.word	0x20000001

00403168 <atoi>:
  403168:	2100      	movs	r1, #0
  40316a:	220a      	movs	r2, #10
  40316c:	f000 b922 	b.w	4033b4 <strtol>

00403170 <_atoi_r>:
  403170:	2200      	movs	r2, #0
  403172:	230a      	movs	r3, #10
  403174:	f000 b89c 	b.w	4032b0 <_strtol_r>

00403178 <__libc_init_array>:
  403178:	b570      	push	{r4, r5, r6, lr}
  40317a:	4b0e      	ldr	r3, [pc, #56]	; (4031b4 <__libc_init_array+0x3c>)
  40317c:	4d0e      	ldr	r5, [pc, #56]	; (4031b8 <__libc_init_array+0x40>)
  40317e:	2400      	movs	r4, #0
  403180:	1aed      	subs	r5, r5, r3
  403182:	10ad      	asrs	r5, r5, #2
  403184:	461e      	mov	r6, r3
  403186:	42ac      	cmp	r4, r5
  403188:	d004      	beq.n	403194 <__libc_init_array+0x1c>
  40318a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  40318e:	4790      	blx	r2
  403190:	3401      	adds	r4, #1
  403192:	e7f8      	b.n	403186 <__libc_init_array+0xe>
  403194:	f004 fe60 	bl	407e58 <_init>
  403198:	4d08      	ldr	r5, [pc, #32]	; (4031bc <__libc_init_array+0x44>)
  40319a:	4b09      	ldr	r3, [pc, #36]	; (4031c0 <__libc_init_array+0x48>)
  40319c:	2400      	movs	r4, #0
  40319e:	1aed      	subs	r5, r5, r3
  4031a0:	10ad      	asrs	r5, r5, #2
  4031a2:	461e      	mov	r6, r3
  4031a4:	42ac      	cmp	r4, r5
  4031a6:	d004      	beq.n	4031b2 <__libc_init_array+0x3a>
  4031a8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  4031ac:	4790      	blx	r2
  4031ae:	3401      	adds	r4, #1
  4031b0:	e7f8      	b.n	4031a4 <__libc_init_array+0x2c>
  4031b2:	bd70      	pop	{r4, r5, r6, pc}
  4031b4:	00407e64 	.word	0x00407e64
  4031b8:	00407e64 	.word	0x00407e64
  4031bc:	00407e6c 	.word	0x00407e6c
  4031c0:	00407e64 	.word	0x00407e64

004031c4 <memcpy>:
  4031c4:	b510      	push	{r4, lr}
  4031c6:	2300      	movs	r3, #0
  4031c8:	4293      	cmp	r3, r2
  4031ca:	d003      	beq.n	4031d4 <memcpy+0x10>
  4031cc:	5ccc      	ldrb	r4, [r1, r3]
  4031ce:	54c4      	strb	r4, [r0, r3]
  4031d0:	3301      	adds	r3, #1
  4031d2:	e7f9      	b.n	4031c8 <memcpy+0x4>
  4031d4:	bd10      	pop	{r4, pc}

004031d6 <memset>:
  4031d6:	4402      	add	r2, r0
  4031d8:	4603      	mov	r3, r0
  4031da:	4293      	cmp	r3, r2
  4031dc:	d002      	beq.n	4031e4 <memset+0xe>
  4031de:	f803 1b01 	strb.w	r1, [r3], #1
  4031e2:	e7fa      	b.n	4031da <memset+0x4>
  4031e4:	4770      	bx	lr
	...

004031e8 <_sprintf_r>:
  4031e8:	b40c      	push	{r2, r3}
  4031ea:	b510      	push	{r4, lr}
  4031ec:	b09c      	sub	sp, #112	; 0x70
  4031ee:	ab1e      	add	r3, sp, #120	; 0x78
  4031f0:	9102      	str	r1, [sp, #8]
  4031f2:	9106      	str	r1, [sp, #24]
  4031f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4031f8:	f853 2b04 	ldr.w	r2, [r3], #4
  4031fc:	9104      	str	r1, [sp, #16]
  4031fe:	9107      	str	r1, [sp, #28]
  403200:	f64f 71ff 	movw	r1, #65535	; 0xffff
  403204:	f8ad 1016 	strh.w	r1, [sp, #22]
  403208:	f44f 7402 	mov.w	r4, #520	; 0x208
  40320c:	a902      	add	r1, sp, #8
  40320e:	9301      	str	r3, [sp, #4]
  403210:	f8ad 4014 	strh.w	r4, [sp, #20]
  403214:	f000 f8dc 	bl	4033d0 <_svfprintf_r>
  403218:	9b02      	ldr	r3, [sp, #8]
  40321a:	2200      	movs	r2, #0
  40321c:	701a      	strb	r2, [r3, #0]
  40321e:	b01c      	add	sp, #112	; 0x70
  403220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403224:	b002      	add	sp, #8
  403226:	4770      	bx	lr

00403228 <sprintf>:
  403228:	b40e      	push	{r1, r2, r3}
  40322a:	b500      	push	{lr}
  40322c:	f44f 7102 	mov.w	r1, #520	; 0x208
  403230:	b09c      	sub	sp, #112	; 0x70
  403232:	f8ad 1014 	strh.w	r1, [sp, #20]
  403236:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40323a:	9104      	str	r1, [sp, #16]
  40323c:	9107      	str	r1, [sp, #28]
  40323e:	f64f 71ff 	movw	r1, #65535	; 0xffff
  403242:	ab1d      	add	r3, sp, #116	; 0x74
  403244:	f8ad 1016 	strh.w	r1, [sp, #22]
  403248:	4908      	ldr	r1, [pc, #32]	; (40326c <sprintf+0x44>)
  40324a:	f853 2b04 	ldr.w	r2, [r3], #4
  40324e:	9002      	str	r0, [sp, #8]
  403250:	9006      	str	r0, [sp, #24]
  403252:	6808      	ldr	r0, [r1, #0]
  403254:	a902      	add	r1, sp, #8
  403256:	9301      	str	r3, [sp, #4]
  403258:	f000 f8ba 	bl	4033d0 <_svfprintf_r>
  40325c:	9b02      	ldr	r3, [sp, #8]
  40325e:	2200      	movs	r2, #0
  403260:	701a      	strb	r2, [r3, #0]
  403262:	b01c      	add	sp, #112	; 0x70
  403264:	f85d eb04 	ldr.w	lr, [sp], #4
  403268:	b003      	add	sp, #12
  40326a:	4770      	bx	lr
  40326c:	200000b8 	.word	0x200000b8

00403270 <strlen>:
  403270:	4603      	mov	r3, r0
  403272:	f813 2b01 	ldrb.w	r2, [r3], #1
  403276:	2a00      	cmp	r2, #0
  403278:	d1fb      	bne.n	403272 <strlen+0x2>
  40327a:	1a18      	subs	r0, r3, r0
  40327c:	3801      	subs	r0, #1
  40327e:	4770      	bx	lr

00403280 <strpbrk>:
  403280:	b570      	push	{r4, r5, r6, lr}
  403282:	7803      	ldrb	r3, [r0, #0]
  403284:	460a      	mov	r2, r1
  403286:	b18b      	cbz	r3, 4032ac <strpbrk+0x2c>
  403288:	4606      	mov	r6, r0
  40328a:	f810 4b01 	ldrb.w	r4, [r0], #1
  40328e:	b13c      	cbz	r4, 4032a0 <strpbrk+0x20>
  403290:	460b      	mov	r3, r1
  403292:	461a      	mov	r2, r3
  403294:	f813 5b01 	ldrb.w	r5, [r3], #1
  403298:	2d00      	cmp	r5, #0
  40329a:	d0f5      	beq.n	403288 <strpbrk+0x8>
  40329c:	42ac      	cmp	r4, r5
  40329e:	d1f8      	bne.n	403292 <strpbrk+0x12>
  4032a0:	7813      	ldrb	r3, [r2, #0]
  4032a2:	2b00      	cmp	r3, #0
  4032a4:	bf14      	ite	ne
  4032a6:	4630      	movne	r0, r6
  4032a8:	2000      	moveq	r0, #0
  4032aa:	bd70      	pop	{r4, r5, r6, pc}
  4032ac:	4618      	mov	r0, r3
  4032ae:	bd70      	pop	{r4, r5, r6, pc}

004032b0 <_strtol_r>:
  4032b0:	4684      	mov	ip, r0
  4032b2:	483f      	ldr	r0, [pc, #252]	; (4033b0 <_strtol_r+0x100>)
  4032b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4032b8:	f8d0 8000 	ldr.w	r8, [r0]
  4032bc:	460e      	mov	r6, r1
  4032be:	4634      	mov	r4, r6
  4032c0:	f814 5b01 	ldrb.w	r5, [r4], #1
  4032c4:	eb08 0005 	add.w	r0, r8, r5
  4032c8:	7840      	ldrb	r0, [r0, #1]
  4032ca:	f000 0008 	and.w	r0, r0, #8
  4032ce:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  4032d2:	b108      	cbz	r0, 4032d8 <_strtol_r+0x28>
  4032d4:	4626      	mov	r6, r4
  4032d6:	e7f2      	b.n	4032be <_strtol_r+0xe>
  4032d8:	2d2d      	cmp	r5, #45	; 0x2d
  4032da:	d103      	bne.n	4032e4 <_strtol_r+0x34>
  4032dc:	1cb4      	adds	r4, r6, #2
  4032de:	7875      	ldrb	r5, [r6, #1]
  4032e0:	2701      	movs	r7, #1
  4032e2:	e003      	b.n	4032ec <_strtol_r+0x3c>
  4032e4:	2d2b      	cmp	r5, #43	; 0x2b
  4032e6:	bf04      	itt	eq
  4032e8:	7875      	ldrbeq	r5, [r6, #1]
  4032ea:	1cb4      	addeq	r4, r6, #2
  4032ec:	f033 0010 	bics.w	r0, r3, #16
  4032f0:	d10d      	bne.n	40330e <_strtol_r+0x5e>
  4032f2:	2d30      	cmp	r5, #48	; 0x30
  4032f4:	d108      	bne.n	403308 <_strtol_r+0x58>
  4032f6:	7820      	ldrb	r0, [r4, #0]
  4032f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  4032fc:	2858      	cmp	r0, #88	; 0x58
  4032fe:	d151      	bne.n	4033a4 <_strtol_r+0xf4>
  403300:	7865      	ldrb	r5, [r4, #1]
  403302:	2310      	movs	r3, #16
  403304:	3402      	adds	r4, #2
  403306:	e002      	b.n	40330e <_strtol_r+0x5e>
  403308:	2b00      	cmp	r3, #0
  40330a:	bf08      	it	eq
  40330c:	230a      	moveq	r3, #10
  40330e:	2f00      	cmp	r7, #0
  403310:	bf0c      	ite	eq
  403312:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
  403316:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
  40331a:	fbba f9f3 	udiv	r9, sl, r3
  40331e:	fb03 aa19 	mls	sl, r3, r9, sl
  403322:	2600      	movs	r6, #0
  403324:	4630      	mov	r0, r6
  403326:	eb08 0b05 	add.w	fp, r8, r5
  40332a:	f89b b001 	ldrb.w	fp, [fp, #1]
  40332e:	f01b 0f04 	tst.w	fp, #4
  403332:	d001      	beq.n	403338 <_strtol_r+0x88>
  403334:	3d30      	subs	r5, #48	; 0x30
  403336:	e00b      	b.n	403350 <_strtol_r+0xa0>
  403338:	f01b 0b03 	ands.w	fp, fp, #3
  40333c:	d01b      	beq.n	403376 <_strtol_r+0xc6>
  40333e:	f1bb 0f01 	cmp.w	fp, #1
  403342:	bf14      	ite	ne
  403344:	f04f 0b57 	movne.w	fp, #87	; 0x57
  403348:	f04f 0b37 	moveq.w	fp, #55	; 0x37
  40334c:	ebcb 0505 	rsb	r5, fp, r5
  403350:	429d      	cmp	r5, r3
  403352:	da10      	bge.n	403376 <_strtol_r+0xc6>
  403354:	f1b6 3fff 	cmp.w	r6, #4294967295
  403358:	d00a      	beq.n	403370 <_strtol_r+0xc0>
  40335a:	4548      	cmp	r0, r9
  40335c:	d806      	bhi.n	40336c <_strtol_r+0xbc>
  40335e:	d101      	bne.n	403364 <_strtol_r+0xb4>
  403360:	4555      	cmp	r5, sl
  403362:	dc03      	bgt.n	40336c <_strtol_r+0xbc>
  403364:	fb03 5000 	mla	r0, r3, r0, r5
  403368:	2601      	movs	r6, #1
  40336a:	e001      	b.n	403370 <_strtol_r+0xc0>
  40336c:	f04f 36ff 	mov.w	r6, #4294967295
  403370:	f814 5b01 	ldrb.w	r5, [r4], #1
  403374:	e7d7      	b.n	403326 <_strtol_r+0x76>
  403376:	1c73      	adds	r3, r6, #1
  403378:	d10c      	bne.n	403394 <_strtol_r+0xe4>
  40337a:	2f00      	cmp	r7, #0
  40337c:	f04f 0322 	mov.w	r3, #34	; 0x22
  403380:	bf0c      	ite	eq
  403382:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  403386:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  40338a:	f8cc 3000 	str.w	r3, [ip]
  40338e:	b92a      	cbnz	r2, 40339c <_strtol_r+0xec>
  403390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403394:	b107      	cbz	r7, 403398 <_strtol_r+0xe8>
  403396:	4240      	negs	r0, r0
  403398:	b142      	cbz	r2, 4033ac <_strtol_r+0xfc>
  40339a:	b106      	cbz	r6, 40339e <_strtol_r+0xee>
  40339c:	1e61      	subs	r1, r4, #1
  40339e:	6011      	str	r1, [r2, #0]
  4033a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033a4:	2b00      	cmp	r3, #0
  4033a6:	bf08      	it	eq
  4033a8:	2308      	moveq	r3, #8
  4033aa:	e7b0      	b.n	40330e <_strtol_r+0x5e>
  4033ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4033b0:	200004e8 	.word	0x200004e8

004033b4 <strtol>:
  4033b4:	b530      	push	{r4, r5, lr}
  4033b6:	4613      	mov	r3, r2
  4033b8:	4a04      	ldr	r2, [pc, #16]	; (4033cc <strtol+0x18>)
  4033ba:	4605      	mov	r5, r0
  4033bc:	460c      	mov	r4, r1
  4033be:	6810      	ldr	r0, [r2, #0]
  4033c0:	4629      	mov	r1, r5
  4033c2:	4622      	mov	r2, r4
  4033c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  4033c8:	f7ff bf72 	b.w	4032b0 <_strtol_r>
  4033cc:	200000b8 	.word	0x200000b8

004033d0 <_svfprintf_r>:
  4033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033d4:	b0c3      	sub	sp, #268	; 0x10c
  4033d6:	468b      	mov	fp, r1
  4033d8:	4698      	mov	r8, r3
  4033da:	920b      	str	r2, [sp, #44]	; 0x2c
  4033dc:	4682      	mov	sl, r0
  4033de:	f001 ff2b 	bl	405238 <_localeconv_r>
  4033e2:	6800      	ldr	r0, [r0, #0]
  4033e4:	9018      	str	r0, [sp, #96]	; 0x60
  4033e6:	f7ff ff43 	bl	403270 <strlen>
  4033ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4033ee:	9010      	str	r0, [sp, #64]	; 0x40
  4033f0:	0619      	lsls	r1, r3, #24
  4033f2:	d515      	bpl.n	403420 <_svfprintf_r+0x50>
  4033f4:	f8db 3010 	ldr.w	r3, [fp, #16]
  4033f8:	b993      	cbnz	r3, 403420 <_svfprintf_r+0x50>
  4033fa:	4650      	mov	r0, sl
  4033fc:	2140      	movs	r1, #64	; 0x40
  4033fe:	f001 ff2d 	bl	40525c <_malloc_r>
  403402:	f8cb 0000 	str.w	r0, [fp]
  403406:	f8cb 0010 	str.w	r0, [fp, #16]
  40340a:	b930      	cbnz	r0, 40341a <_svfprintf_r+0x4a>
  40340c:	230c      	movs	r3, #12
  40340e:	f8ca 3000 	str.w	r3, [sl]
  403412:	f04f 30ff 	mov.w	r0, #4294967295
  403416:	f000 bf6e 	b.w	4042f6 <_svfprintf_r+0xf26>
  40341a:	2340      	movs	r3, #64	; 0x40
  40341c:	f8cb 3014 	str.w	r3, [fp, #20]
  403420:	2400      	movs	r4, #0
  403422:	2500      	movs	r5, #0
  403424:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  403428:	2300      	movs	r3, #0
  40342a:	ae32      	add	r6, sp, #200	; 0xc8
  40342c:	9625      	str	r6, [sp, #148]	; 0x94
  40342e:	9327      	str	r3, [sp, #156]	; 0x9c
  403430:	9326      	str	r3, [sp, #152]	; 0x98
  403432:	9309      	str	r3, [sp, #36]	; 0x24
  403434:	931b      	str	r3, [sp, #108]	; 0x6c
  403436:	931a      	str	r3, [sp, #104]	; 0x68
  403438:	930f      	str	r3, [sp, #60]	; 0x3c
  40343a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40343c:	461c      	mov	r4, r3
  40343e:	f813 2b01 	ldrb.w	r2, [r3], #1
  403442:	b91a      	cbnz	r2, 40344c <_svfprintf_r+0x7c>
  403444:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403446:	1a25      	subs	r5, r4, r0
  403448:	d103      	bne.n	403452 <_svfprintf_r+0x82>
  40344a:	e01b      	b.n	403484 <_svfprintf_r+0xb4>
  40344c:	2a25      	cmp	r2, #37	; 0x25
  40344e:	d1f5      	bne.n	40343c <_svfprintf_r+0x6c>
  403450:	e7f8      	b.n	403444 <_svfprintf_r+0x74>
  403452:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403454:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403456:	442b      	add	r3, r5
  403458:	9327      	str	r3, [sp, #156]	; 0x9c
  40345a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40345c:	e886 0022 	stmia.w	r6, {r1, r5}
  403460:	3301      	adds	r3, #1
  403462:	2b07      	cmp	r3, #7
  403464:	9326      	str	r3, [sp, #152]	; 0x98
  403466:	dc01      	bgt.n	40346c <_svfprintf_r+0x9c>
  403468:	3608      	adds	r6, #8
  40346a:	e008      	b.n	40347e <_svfprintf_r+0xae>
  40346c:	4650      	mov	r0, sl
  40346e:	4659      	mov	r1, fp
  403470:	aa25      	add	r2, sp, #148	; 0x94
  403472:	f002 fef7 	bl	406264 <__ssprint_r>
  403476:	2800      	cmp	r0, #0
  403478:	f040 8735 	bne.w	4042e6 <_svfprintf_r+0xf16>
  40347c:	ae32      	add	r6, sp, #200	; 0xc8
  40347e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403480:	442a      	add	r2, r5
  403482:	920f      	str	r2, [sp, #60]	; 0x3c
  403484:	7823      	ldrb	r3, [r4, #0]
  403486:	2b00      	cmp	r3, #0
  403488:	f000 8726 	beq.w	4042d8 <_svfprintf_r+0xf08>
  40348c:	2300      	movs	r3, #0
  40348e:	3401      	adds	r4, #1
  403490:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403494:	f04f 39ff 	mov.w	r9, #4294967295
  403498:	930e      	str	r3, [sp, #56]	; 0x38
  40349a:	461f      	mov	r7, r3
  40349c:	1c65      	adds	r5, r4, #1
  40349e:	7824      	ldrb	r4, [r4, #0]
  4034a0:	950b      	str	r5, [sp, #44]	; 0x2c
  4034a2:	9408      	str	r4, [sp, #32]
  4034a4:	9c08      	ldr	r4, [sp, #32]
  4034a6:	f1a4 0220 	sub.w	r2, r4, #32
  4034aa:	2a58      	cmp	r2, #88	; 0x58
  4034ac:	f200 8385 	bhi.w	403bba <_svfprintf_r+0x7ea>
  4034b0:	e8df f012 	tbh	[pc, r2, lsl #1]
  4034b4:	0383006d 	.word	0x0383006d
  4034b8:	00710383 	.word	0x00710383
  4034bc:	03830383 	.word	0x03830383
  4034c0:	03830383 	.word	0x03830383
  4034c4:	03830383 	.word	0x03830383
  4034c8:	0059005b 	.word	0x0059005b
  4034cc:	00770383 	.word	0x00770383
  4034d0:	0383007a 	.word	0x0383007a
  4034d4:	00a2009f 	.word	0x00a2009f
  4034d8:	00a200a2 	.word	0x00a200a2
  4034dc:	00a200a2 	.word	0x00a200a2
  4034e0:	00a200a2 	.word	0x00a200a2
  4034e4:	00a200a2 	.word	0x00a200a2
  4034e8:	03830383 	.word	0x03830383
  4034ec:	03830383 	.word	0x03830383
  4034f0:	03830383 	.word	0x03830383
  4034f4:	03830383 	.word	0x03830383
  4034f8:	03830383 	.word	0x03830383
  4034fc:	00fe00d3 	.word	0x00fe00d3
  403500:	00fe0383 	.word	0x00fe0383
  403504:	03830383 	.word	0x03830383
  403508:	03830383 	.word	0x03830383
  40350c:	038300b6 	.word	0x038300b6
  403510:	026b0383 	.word	0x026b0383
  403514:	03830383 	.word	0x03830383
  403518:	03830383 	.word	0x03830383
  40351c:	02bb0383 	.word	0x02bb0383
  403520:	03830383 	.word	0x03830383
  403524:	03830068 	.word	0x03830068
  403528:	03830383 	.word	0x03830383
  40352c:	03830383 	.word	0x03830383
  403530:	03830383 	.word	0x03830383
  403534:	03830383 	.word	0x03830383
  403538:	00c90383 	.word	0x00c90383
  40353c:	00fe0065 	.word	0x00fe0065
  403540:	00fe00fe 	.word	0x00fe00fe
  403544:	006500b9 	.word	0x006500b9
  403548:	03830383 	.word	0x03830383
  40354c:	038300bc 	.word	0x038300bc
  403550:	026d024c 	.word	0x026d024c
  403554:	00c6028c 	.word	0x00c6028c
  403558:	029e0383 	.word	0x029e0383
  40355c:	02bd0383 	.word	0x02bd0383
  403560:	03830383 	.word	0x03830383
  403564:	02d8      	.short	0x02d8
  403566:	232b      	movs	r3, #43	; 0x2b
  403568:	e007      	b.n	40357a <_svfprintf_r+0x1aa>
  40356a:	f8d8 5000 	ldr.w	r5, [r8]
  40356e:	f108 0204 	add.w	r2, r8, #4
  403572:	2d00      	cmp	r5, #0
  403574:	950e      	str	r5, [sp, #56]	; 0x38
  403576:	db11      	blt.n	40359c <_svfprintf_r+0x1cc>
  403578:	4690      	mov	r8, r2
  40357a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40357c:	e78e      	b.n	40349c <_svfprintf_r+0xcc>
  40357e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403582:	e06e      	b.n	403662 <_svfprintf_r+0x292>
  403584:	4cab      	ldr	r4, [pc, #684]	; (403834 <_svfprintf_r+0x464>)
  403586:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40358a:	941b      	str	r4, [sp, #108]	; 0x6c
  40358c:	e26e      	b.n	403a6c <_svfprintf_r+0x69c>
  40358e:	2b00      	cmp	r3, #0
  403590:	bf08      	it	eq
  403592:	2320      	moveq	r3, #32
  403594:	e7f1      	b.n	40357a <_svfprintf_r+0x1aa>
  403596:	f047 0701 	orr.w	r7, r7, #1
  40359a:	e7ee      	b.n	40357a <_svfprintf_r+0x1aa>
  40359c:	426d      	negs	r5, r5
  40359e:	950e      	str	r5, [sp, #56]	; 0x38
  4035a0:	4690      	mov	r8, r2
  4035a2:	f047 0704 	orr.w	r7, r7, #4
  4035a6:	e7e8      	b.n	40357a <_svfprintf_r+0x1aa>
  4035a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4035aa:	7825      	ldrb	r5, [r4, #0]
  4035ac:	1c62      	adds	r2, r4, #1
  4035ae:	2d2a      	cmp	r5, #42	; 0x2a
  4035b0:	9508      	str	r5, [sp, #32]
  4035b2:	d002      	beq.n	4035ba <_svfprintf_r+0x1ea>
  4035b4:	f04f 0900 	mov.w	r9, #0
  4035b8:	e00b      	b.n	4035d2 <_svfprintf_r+0x202>
  4035ba:	f8d8 9000 	ldr.w	r9, [r8]
  4035be:	f108 0104 	add.w	r1, r8, #4
  4035c2:	f1b9 0f00 	cmp.w	r9, #0
  4035c6:	4688      	mov	r8, r1
  4035c8:	920b      	str	r2, [sp, #44]	; 0x2c
  4035ca:	dad6      	bge.n	40357a <_svfprintf_r+0x1aa>
  4035cc:	f04f 39ff 	mov.w	r9, #4294967295
  4035d0:	e7d3      	b.n	40357a <_svfprintf_r+0x1aa>
  4035d2:	9d08      	ldr	r5, [sp, #32]
  4035d4:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  4035d8:	2909      	cmp	r1, #9
  4035da:	d806      	bhi.n	4035ea <_svfprintf_r+0x21a>
  4035dc:	f812 4b01 	ldrb.w	r4, [r2], #1
  4035e0:	200a      	movs	r0, #10
  4035e2:	fb00 1909 	mla	r9, r0, r9, r1
  4035e6:	9408      	str	r4, [sp, #32]
  4035e8:	e7f3      	b.n	4035d2 <_svfprintf_r+0x202>
  4035ea:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
  4035ee:	920b      	str	r2, [sp, #44]	; 0x2c
  4035f0:	e758      	b.n	4034a4 <_svfprintf_r+0xd4>
  4035f2:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  4035f6:	e7c0      	b.n	40357a <_svfprintf_r+0x1aa>
  4035f8:	2400      	movs	r4, #0
  4035fa:	940e      	str	r4, [sp, #56]	; 0x38
  4035fc:	9d08      	ldr	r5, [sp, #32]
  4035fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403600:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
  403604:	210a      	movs	r1, #10
  403606:	fb01 2404 	mla	r4, r1, r4, r2
  40360a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40360c:	940e      	str	r4, [sp, #56]	; 0x38
  40360e:	f812 5b01 	ldrb.w	r5, [r2], #1
  403612:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  403616:	2909      	cmp	r1, #9
  403618:	9508      	str	r5, [sp, #32]
  40361a:	d8e8      	bhi.n	4035ee <_svfprintf_r+0x21e>
  40361c:	920b      	str	r2, [sp, #44]	; 0x2c
  40361e:	e7ed      	b.n	4035fc <_svfprintf_r+0x22c>
  403620:	f047 0708 	orr.w	r7, r7, #8
  403624:	e7a9      	b.n	40357a <_svfprintf_r+0x1aa>
  403626:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40362a:	e7a6      	b.n	40357a <_svfprintf_r+0x1aa>
  40362c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40362e:	7822      	ldrb	r2, [r4, #0]
  403630:	2a6c      	cmp	r2, #108	; 0x6c
  403632:	d102      	bne.n	40363a <_svfprintf_r+0x26a>
  403634:	3401      	adds	r4, #1
  403636:	940b      	str	r4, [sp, #44]	; 0x2c
  403638:	e002      	b.n	403640 <_svfprintf_r+0x270>
  40363a:	f047 0710 	orr.w	r7, r7, #16
  40363e:	e79c      	b.n	40357a <_svfprintf_r+0x1aa>
  403640:	f047 0720 	orr.w	r7, r7, #32
  403644:	e799      	b.n	40357a <_svfprintf_r+0x1aa>
  403646:	f8d8 3000 	ldr.w	r3, [r8]
  40364a:	2500      	movs	r5, #0
  40364c:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  403650:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  403654:	f108 0804 	add.w	r8, r8, #4
  403658:	e2ba      	b.n	403bd0 <_svfprintf_r+0x800>
  40365a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40365e:	f047 0710 	orr.w	r7, r7, #16
  403662:	06ba      	lsls	r2, r7, #26
  403664:	d508      	bpl.n	403678 <_svfprintf_r+0x2a8>
  403666:	f108 0807 	add.w	r8, r8, #7
  40366a:	f028 0307 	bic.w	r3, r8, #7
  40366e:	f103 0808 	add.w	r8, r3, #8
  403672:	e9d3 4500 	ldrd	r4, r5, [r3]
  403676:	e00f      	b.n	403698 <_svfprintf_r+0x2c8>
  403678:	f017 0f10 	tst.w	r7, #16
  40367c:	f108 0304 	add.w	r3, r8, #4
  403680:	d002      	beq.n	403688 <_svfprintf_r+0x2b8>
  403682:	f8d8 4000 	ldr.w	r4, [r8]
  403686:	e005      	b.n	403694 <_svfprintf_r+0x2c4>
  403688:	f8d8 4000 	ldr.w	r4, [r8]
  40368c:	f017 0f40 	tst.w	r7, #64	; 0x40
  403690:	bf18      	it	ne
  403692:	b224      	sxthne	r4, r4
  403694:	17e5      	asrs	r5, r4, #31
  403696:	4698      	mov	r8, r3
  403698:	2c00      	cmp	r4, #0
  40369a:	f175 0100 	sbcs.w	r1, r5, #0
  40369e:	f280 8210 	bge.w	403ac2 <_svfprintf_r+0x6f2>
  4036a2:	232d      	movs	r3, #45	; 0x2d
  4036a4:	4264      	negs	r4, r4
  4036a6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4036aa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4036ae:	e208      	b.n	403ac2 <_svfprintf_r+0x6f2>
  4036b0:	9c08      	ldr	r4, [sp, #32]
  4036b2:	f108 0807 	add.w	r8, r8, #7
  4036b6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4036ba:	970a      	str	r7, [sp, #40]	; 0x28
  4036bc:	f028 0307 	bic.w	r3, r8, #7
  4036c0:	9411      	str	r4, [sp, #68]	; 0x44
  4036c2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4036c6:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  4036ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4036ce:	f103 0808 	add.w	r8, r3, #8
  4036d2:	f002 fd8b 	bl	4061ec <__fpclassifyd>
  4036d6:	2801      	cmp	r0, #1
  4036d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4036dc:	d114      	bne.n	403708 <_svfprintf_r+0x338>
  4036de:	2200      	movs	r2, #0
  4036e0:	2300      	movs	r3, #0
  4036e2:	f003 fecf 	bl	407484 <__aeabi_dcmplt>
  4036e6:	b110      	cbz	r0, 4036ee <_svfprintf_r+0x31e>
  4036e8:	232d      	movs	r3, #45	; 0x2d
  4036ea:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4036ee:	9d08      	ldr	r5, [sp, #32]
  4036f0:	4b51      	ldr	r3, [pc, #324]	; (403838 <_svfprintf_r+0x468>)
  4036f2:	4a52      	ldr	r2, [pc, #328]	; (40383c <_svfprintf_r+0x46c>)
  4036f4:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  4036f8:	2d47      	cmp	r5, #71	; 0x47
  4036fa:	bfd8      	it	le
  4036fc:	461a      	movle	r2, r3
  4036fe:	9207      	str	r2, [sp, #28]
  403700:	f04f 0903 	mov.w	r9, #3
  403704:	2500      	movs	r5, #0
  403706:	e26a      	b.n	403bde <_svfprintf_r+0x80e>
  403708:	f002 fd70 	bl	4061ec <__fpclassifyd>
  40370c:	b958      	cbnz	r0, 403726 <_svfprintf_r+0x356>
  40370e:	4b4c      	ldr	r3, [pc, #304]	; (403840 <_svfprintf_r+0x470>)
  403710:	4a4c      	ldr	r2, [pc, #304]	; (403844 <_svfprintf_r+0x474>)
  403712:	9c08      	ldr	r4, [sp, #32]
  403714:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  403718:	2c47      	cmp	r4, #71	; 0x47
  40371a:	bfd8      	it	le
  40371c:	461a      	movle	r2, r3
  40371e:	9207      	str	r2, [sp, #28]
  403720:	f04f 0903 	mov.w	r9, #3
  403724:	e25a      	b.n	403bdc <_svfprintf_r+0x80c>
  403726:	f1b9 3fff 	cmp.w	r9, #4294967295
  40372a:	d00a      	beq.n	403742 <_svfprintf_r+0x372>
  40372c:	9d08      	ldr	r5, [sp, #32]
  40372e:	f025 0320 	bic.w	r3, r5, #32
  403732:	2b47      	cmp	r3, #71	; 0x47
  403734:	d107      	bne.n	403746 <_svfprintf_r+0x376>
  403736:	f1b9 0f00 	cmp.w	r9, #0
  40373a:	bf08      	it	eq
  40373c:	f04f 0901 	moveq.w	r9, #1
  403740:	e001      	b.n	403746 <_svfprintf_r+0x376>
  403742:	f04f 0906 	mov.w	r9, #6
  403746:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40374a:	2b00      	cmp	r3, #0
  40374c:	f447 7780 	orr.w	r7, r7, #256	; 0x100
  403750:	da08      	bge.n	403764 <_svfprintf_r+0x394>
  403752:	990d      	ldr	r1, [sp, #52]	; 0x34
  403754:	980c      	ldr	r0, [sp, #48]	; 0x30
  403756:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  40375a:	242d      	movs	r4, #45	; 0x2d
  40375c:	9012      	str	r0, [sp, #72]	; 0x48
  40375e:	9113      	str	r1, [sp, #76]	; 0x4c
  403760:	9419      	str	r4, [sp, #100]	; 0x64
  403762:	e005      	b.n	403770 <_svfprintf_r+0x3a0>
  403764:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  403768:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  40376c:	2500      	movs	r5, #0
  40376e:	9519      	str	r5, [sp, #100]	; 0x64
  403770:	9d08      	ldr	r5, [sp, #32]
  403772:	f025 0420 	bic.w	r4, r5, #32
  403776:	2c46      	cmp	r4, #70	; 0x46
  403778:	d004      	beq.n	403784 <_svfprintf_r+0x3b4>
  40377a:	2c45      	cmp	r4, #69	; 0x45
  40377c:	d105      	bne.n	40378a <_svfprintf_r+0x3ba>
  40377e:	f109 0501 	add.w	r5, r9, #1
  403782:	e003      	b.n	40378c <_svfprintf_r+0x3bc>
  403784:	464d      	mov	r5, r9
  403786:	2303      	movs	r3, #3
  403788:	e001      	b.n	40378e <_svfprintf_r+0x3be>
  40378a:	464d      	mov	r5, r9
  40378c:	2302      	movs	r3, #2
  40378e:	e88d 0028 	stmia.w	sp, {r3, r5}
  403792:	ab1f      	add	r3, sp, #124	; 0x7c
  403794:	9302      	str	r3, [sp, #8]
  403796:	ab20      	add	r3, sp, #128	; 0x80
  403798:	9303      	str	r3, [sp, #12]
  40379a:	ab23      	add	r3, sp, #140	; 0x8c
  40379c:	9304      	str	r3, [sp, #16]
  40379e:	4650      	mov	r0, sl
  4037a0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4037a4:	f000 fe4b 	bl	40443e <_dtoa_r>
  4037a8:	2c47      	cmp	r4, #71	; 0x47
  4037aa:	9007      	str	r0, [sp, #28]
  4037ac:	d10a      	bne.n	4037c4 <_svfprintf_r+0x3f4>
  4037ae:	980a      	ldr	r0, [sp, #40]	; 0x28
  4037b0:	07c3      	lsls	r3, r0, #31
  4037b2:	d407      	bmi.n	4037c4 <_svfprintf_r+0x3f4>
  4037b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4037b6:	9d07      	ldr	r5, [sp, #28]
  4037b8:	2c47      	cmp	r4, #71	; 0x47
  4037ba:	ebc5 0303 	rsb	r3, r5, r3
  4037be:	9309      	str	r3, [sp, #36]	; 0x24
  4037c0:	d142      	bne.n	403848 <_svfprintf_r+0x478>
  4037c2:	e02d      	b.n	403820 <_svfprintf_r+0x450>
  4037c4:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4037c8:	2c46      	cmp	r4, #70	; 0x46
  4037ca:	44ac      	add	ip, r5
  4037cc:	d113      	bne.n	4037f6 <_svfprintf_r+0x426>
  4037ce:	9807      	ldr	r0, [sp, #28]
  4037d0:	7803      	ldrb	r3, [r0, #0]
  4037d2:	2b30      	cmp	r3, #48	; 0x30
  4037d4:	d10d      	bne.n	4037f2 <_svfprintf_r+0x422>
  4037d6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4037da:	2200      	movs	r2, #0
  4037dc:	2300      	movs	r3, #0
  4037de:	f8cd c018 	str.w	ip, [sp, #24]
  4037e2:	f003 fe45 	bl	407470 <__aeabi_dcmpeq>
  4037e6:	f8dd c018 	ldr.w	ip, [sp, #24]
  4037ea:	b910      	cbnz	r0, 4037f2 <_svfprintf_r+0x422>
  4037ec:	f1c5 0501 	rsb	r5, r5, #1
  4037f0:	951f      	str	r5, [sp, #124]	; 0x7c
  4037f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4037f4:	449c      	add	ip, r3
  4037f6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4037fa:	2200      	movs	r2, #0
  4037fc:	2300      	movs	r3, #0
  4037fe:	f8cd c018 	str.w	ip, [sp, #24]
  403802:	f003 fe35 	bl	407470 <__aeabi_dcmpeq>
  403806:	f8dd c018 	ldr.w	ip, [sp, #24]
  40380a:	b108      	cbz	r0, 403810 <_svfprintf_r+0x440>
  40380c:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
  403810:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403812:	4563      	cmp	r3, ip
  403814:	d2ce      	bcs.n	4037b4 <_svfprintf_r+0x3e4>
  403816:	1c5a      	adds	r2, r3, #1
  403818:	9223      	str	r2, [sp, #140]	; 0x8c
  40381a:	2230      	movs	r2, #48	; 0x30
  40381c:	701a      	strb	r2, [r3, #0]
  40381e:	e7f7      	b.n	403810 <_svfprintf_r+0x440>
  403820:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403822:	1cdc      	adds	r4, r3, #3
  403824:	db01      	blt.n	40382a <_svfprintf_r+0x45a>
  403826:	454b      	cmp	r3, r9
  403828:	dd6e      	ble.n	403908 <_svfprintf_r+0x538>
  40382a:	9c08      	ldr	r4, [sp, #32]
  40382c:	3c02      	subs	r4, #2
  40382e:	9408      	str	r4, [sp, #32]
  403830:	e00d      	b.n	40384e <_svfprintf_r+0x47e>
  403832:	bf00      	nop
  403834:	00407bd6 	.word	0x00407bd6
  403838:	00407bc6 	.word	0x00407bc6
  40383c:	00407bca 	.word	0x00407bca
  403840:	00407bce 	.word	0x00407bce
  403844:	00407bd2 	.word	0x00407bd2
  403848:	9d08      	ldr	r5, [sp, #32]
  40384a:	2d65      	cmp	r5, #101	; 0x65
  40384c:	dc43      	bgt.n	4038d6 <_svfprintf_r+0x506>
  40384e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403850:	9c08      	ldr	r4, [sp, #32]
  403852:	3b01      	subs	r3, #1
  403854:	2b00      	cmp	r3, #0
  403856:	931f      	str	r3, [sp, #124]	; 0x7c
  403858:	bfba      	itte	lt
  40385a:	425b      	neglt	r3, r3
  40385c:	222d      	movlt	r2, #45	; 0x2d
  40385e:	222b      	movge	r2, #43	; 0x2b
  403860:	2b09      	cmp	r3, #9
  403862:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  403866:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40386a:	dd1d      	ble.n	4038a8 <_svfprintf_r+0x4d8>
  40386c:	f10d 0292 	add.w	r2, sp, #146	; 0x92
  403870:	200a      	movs	r0, #10
  403872:	fb93 f1f0 	sdiv	r1, r3, r0
  403876:	fb00 3311 	mls	r3, r0, r1, r3
  40387a:	2909      	cmp	r1, #9
  40387c:	f103 0330 	add.w	r3, r3, #48	; 0x30
  403880:	4614      	mov	r4, r2
  403882:	f802 3901 	strb.w	r3, [r2], #-1
  403886:	460b      	mov	r3, r1
  403888:	dcf2      	bgt.n	403870 <_svfprintf_r+0x4a0>
  40388a:	f101 0330 	add.w	r3, r1, #48	; 0x30
  40388e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  403892:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403896:	f10d 0293 	add.w	r2, sp, #147	; 0x93
  40389a:	4294      	cmp	r4, r2
  40389c:	d20b      	bcs.n	4038b6 <_svfprintf_r+0x4e6>
  40389e:	f814 2b01 	ldrb.w	r2, [r4], #1
  4038a2:	f803 2b01 	strb.w	r2, [r3], #1
  4038a6:	e7f6      	b.n	403896 <_svfprintf_r+0x4c6>
  4038a8:	2230      	movs	r2, #48	; 0x30
  4038aa:	4413      	add	r3, r2
  4038ac:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4038b0:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4038b4:	ab22      	add	r3, sp, #136	; 0x88
  4038b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4038b8:	aa21      	add	r2, sp, #132	; 0x84
  4038ba:	1a9a      	subs	r2, r3, r2
  4038bc:	4691      	mov	r9, r2
  4038be:	2d01      	cmp	r5, #1
  4038c0:	921a      	str	r2, [sp, #104]	; 0x68
  4038c2:	44a9      	add	r9, r5
  4038c4:	dc03      	bgt.n	4038ce <_svfprintf_r+0x4fe>
  4038c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4038c8:	f015 0401 	ands.w	r4, r5, #1
  4038cc:	d037      	beq.n	40393e <_svfprintf_r+0x56e>
  4038ce:	f109 0901 	add.w	r9, r9, #1
  4038d2:	2400      	movs	r4, #0
  4038d4:	e033      	b.n	40393e <_svfprintf_r+0x56e>
  4038d6:	9c08      	ldr	r4, [sp, #32]
  4038d8:	2c66      	cmp	r4, #102	; 0x66
  4038da:	d115      	bne.n	403908 <_svfprintf_r+0x538>
  4038dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4038de:	2b00      	cmp	r3, #0
  4038e0:	dd09      	ble.n	4038f6 <_svfprintf_r+0x526>
  4038e2:	f1b9 0f00 	cmp.w	r9, #0
  4038e6:	d102      	bne.n	4038ee <_svfprintf_r+0x51e>
  4038e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4038ea:	07e8      	lsls	r0, r5, #31
  4038ec:	d523      	bpl.n	403936 <_svfprintf_r+0x566>
  4038ee:	f109 0901 	add.w	r9, r9, #1
  4038f2:	444b      	add	r3, r9
  4038f4:	e01f      	b.n	403936 <_svfprintf_r+0x566>
  4038f6:	f1b9 0f00 	cmp.w	r9, #0
  4038fa:	d102      	bne.n	403902 <_svfprintf_r+0x532>
  4038fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4038fe:	07e1      	lsls	r1, r4, #31
  403900:	d515      	bpl.n	40392e <_svfprintf_r+0x55e>
  403902:	f109 0302 	add.w	r3, r9, #2
  403906:	e016      	b.n	403936 <_svfprintf_r+0x566>
  403908:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40390a:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40390c:	42ab      	cmp	r3, r5
  40390e:	db04      	blt.n	40391a <_svfprintf_r+0x54a>
  403910:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403912:	07e2      	lsls	r2, r4, #31
  403914:	d50d      	bpl.n	403932 <_svfprintf_r+0x562>
  403916:	3301      	adds	r3, #1
  403918:	e006      	b.n	403928 <_svfprintf_r+0x558>
  40391a:	2b00      	cmp	r3, #0
  40391c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40391e:	bfd4      	ite	le
  403920:	f1c3 0302 	rsble	r3, r3, #2
  403924:	2301      	movgt	r3, #1
  403926:	4423      	add	r3, r4
  403928:	2567      	movs	r5, #103	; 0x67
  40392a:	9511      	str	r5, [sp, #68]	; 0x44
  40392c:	e003      	b.n	403936 <_svfprintf_r+0x566>
  40392e:	2301      	movs	r3, #1
  403930:	e001      	b.n	403936 <_svfprintf_r+0x566>
  403932:	2467      	movs	r4, #103	; 0x67
  403934:	9411      	str	r4, [sp, #68]	; 0x44
  403936:	9d11      	ldr	r5, [sp, #68]	; 0x44
  403938:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  40393a:	9508      	str	r5, [sp, #32]
  40393c:	4699      	mov	r9, r3
  40393e:	9d19      	ldr	r5, [sp, #100]	; 0x64
  403940:	b115      	cbz	r5, 403948 <_svfprintf_r+0x578>
  403942:	232d      	movs	r3, #45	; 0x2d
  403944:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403948:	2500      	movs	r5, #0
  40394a:	e149      	b.n	403be0 <_svfprintf_r+0x810>
  40394c:	f017 0f20 	tst.w	r7, #32
  403950:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403954:	f108 0104 	add.w	r1, r8, #4
  403958:	d008      	beq.n	40396c <_svfprintf_r+0x59c>
  40395a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40395c:	f8d8 0000 	ldr.w	r0, [r8]
  403960:	17e5      	asrs	r5, r4, #31
  403962:	4622      	mov	r2, r4
  403964:	462b      	mov	r3, r5
  403966:	e9c0 2300 	strd	r2, r3, [r0]
  40396a:	e00c      	b.n	403986 <_svfprintf_r+0x5b6>
  40396c:	06fb      	lsls	r3, r7, #27
  40396e:	d406      	bmi.n	40397e <_svfprintf_r+0x5ae>
  403970:	067d      	lsls	r5, r7, #25
  403972:	d504      	bpl.n	40397e <_svfprintf_r+0x5ae>
  403974:	f8d8 3000 	ldr.w	r3, [r8]
  403978:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40397a:	801c      	strh	r4, [r3, #0]
  40397c:	e003      	b.n	403986 <_svfprintf_r+0x5b6>
  40397e:	f8d8 3000 	ldr.w	r3, [r8]
  403982:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403984:	601d      	str	r5, [r3, #0]
  403986:	4688      	mov	r8, r1
  403988:	e557      	b.n	40343a <_svfprintf_r+0x6a>
  40398a:	f047 0710 	orr.w	r7, r7, #16
  40398e:	f017 0320 	ands.w	r3, r7, #32
  403992:	d009      	beq.n	4039a8 <_svfprintf_r+0x5d8>
  403994:	f108 0807 	add.w	r8, r8, #7
  403998:	f028 0307 	bic.w	r3, r8, #7
  40399c:	f103 0808 	add.w	r8, r3, #8
  4039a0:	e9d3 4500 	ldrd	r4, r5, [r3]
  4039a4:	2300      	movs	r3, #0
  4039a6:	e088      	b.n	403aba <_svfprintf_r+0x6ea>
  4039a8:	f017 0110 	ands.w	r1, r7, #16
  4039ac:	f108 0204 	add.w	r2, r8, #4
  4039b0:	d107      	bne.n	4039c2 <_svfprintf_r+0x5f2>
  4039b2:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  4039b6:	d004      	beq.n	4039c2 <_svfprintf_r+0x5f2>
  4039b8:	f8b8 4000 	ldrh.w	r4, [r8]
  4039bc:	2500      	movs	r5, #0
  4039be:	4690      	mov	r8, r2
  4039c0:	e7f0      	b.n	4039a4 <_svfprintf_r+0x5d4>
  4039c2:	f8d8 4000 	ldr.w	r4, [r8]
  4039c6:	2500      	movs	r5, #0
  4039c8:	4690      	mov	r8, r2
  4039ca:	e076      	b.n	403aba <_svfprintf_r+0x6ea>
  4039cc:	48a9      	ldr	r0, [pc, #676]	; (403c74 <_svfprintf_r+0x8a4>)
  4039ce:	2330      	movs	r3, #48	; 0x30
  4039d0:	2278      	movs	r2, #120	; 0x78
  4039d2:	f8d8 4000 	ldr.w	r4, [r8]
  4039d6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4039da:	2500      	movs	r5, #0
  4039dc:	f047 0702 	orr.w	r7, r7, #2
  4039e0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4039e4:	f108 0804 	add.w	r8, r8, #4
  4039e8:	901b      	str	r0, [sp, #108]	; 0x6c
  4039ea:	2302      	movs	r3, #2
  4039ec:	9208      	str	r2, [sp, #32]
  4039ee:	e064      	b.n	403aba <_svfprintf_r+0x6ea>
  4039f0:	4643      	mov	r3, r8
  4039f2:	2500      	movs	r5, #0
  4039f4:	681b      	ldr	r3, [r3, #0]
  4039f6:	45a9      	cmp	r9, r5
  4039f8:	9307      	str	r3, [sp, #28]
  4039fa:	f108 0804 	add.w	r8, r8, #4
  4039fe:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  403a02:	db0d      	blt.n	403a20 <_svfprintf_r+0x650>
  403a04:	4618      	mov	r0, r3
  403a06:	4629      	mov	r1, r5
  403a08:	464a      	mov	r2, r9
  403a0a:	f001 fe2f 	bl	40566c <memchr>
  403a0e:	2800      	cmp	r0, #0
  403a10:	f000 80e4 	beq.w	403bdc <_svfprintf_r+0x80c>
  403a14:	9c07      	ldr	r4, [sp, #28]
  403a16:	1b00      	subs	r0, r0, r4
  403a18:	4548      	cmp	r0, r9
  403a1a:	bfb8      	it	lt
  403a1c:	4681      	movlt	r9, r0
  403a1e:	e0de      	b.n	403bde <_svfprintf_r+0x80e>
  403a20:	9807      	ldr	r0, [sp, #28]
  403a22:	f7ff fc25 	bl	403270 <strlen>
  403a26:	4681      	mov	r9, r0
  403a28:	e0d9      	b.n	403bde <_svfprintf_r+0x80e>
  403a2a:	f047 0710 	orr.w	r7, r7, #16
  403a2e:	06bc      	lsls	r4, r7, #26
  403a30:	d508      	bpl.n	403a44 <_svfprintf_r+0x674>
  403a32:	f108 0807 	add.w	r8, r8, #7
  403a36:	f028 0307 	bic.w	r3, r8, #7
  403a3a:	f103 0808 	add.w	r8, r3, #8
  403a3e:	e9d3 4500 	ldrd	r4, r5, [r3]
  403a42:	e00d      	b.n	403a60 <_svfprintf_r+0x690>
  403a44:	f017 0f10 	tst.w	r7, #16
  403a48:	f108 0304 	add.w	r3, r8, #4
  403a4c:	d104      	bne.n	403a58 <_svfprintf_r+0x688>
  403a4e:	0678      	lsls	r0, r7, #25
  403a50:	d502      	bpl.n	403a58 <_svfprintf_r+0x688>
  403a52:	f8b8 4000 	ldrh.w	r4, [r8]
  403a56:	e001      	b.n	403a5c <_svfprintf_r+0x68c>
  403a58:	f8d8 4000 	ldr.w	r4, [r8]
  403a5c:	2500      	movs	r5, #0
  403a5e:	4698      	mov	r8, r3
  403a60:	2301      	movs	r3, #1
  403a62:	e02a      	b.n	403aba <_svfprintf_r+0x6ea>
  403a64:	4d83      	ldr	r5, [pc, #524]	; (403c74 <_svfprintf_r+0x8a4>)
  403a66:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403a6a:	951b      	str	r5, [sp, #108]	; 0x6c
  403a6c:	06b9      	lsls	r1, r7, #26
  403a6e:	d508      	bpl.n	403a82 <_svfprintf_r+0x6b2>
  403a70:	f108 0807 	add.w	r8, r8, #7
  403a74:	f028 0307 	bic.w	r3, r8, #7
  403a78:	f103 0808 	add.w	r8, r3, #8
  403a7c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403a80:	e00d      	b.n	403a9e <_svfprintf_r+0x6ce>
  403a82:	f017 0f10 	tst.w	r7, #16
  403a86:	f108 0304 	add.w	r3, r8, #4
  403a8a:	d104      	bne.n	403a96 <_svfprintf_r+0x6c6>
  403a8c:	067a      	lsls	r2, r7, #25
  403a8e:	d502      	bpl.n	403a96 <_svfprintf_r+0x6c6>
  403a90:	f8b8 4000 	ldrh.w	r4, [r8]
  403a94:	e001      	b.n	403a9a <_svfprintf_r+0x6ca>
  403a96:	f8d8 4000 	ldr.w	r4, [r8]
  403a9a:	2500      	movs	r5, #0
  403a9c:	4698      	mov	r8, r3
  403a9e:	07fb      	lsls	r3, r7, #31
  403aa0:	d50a      	bpl.n	403ab8 <_svfprintf_r+0x6e8>
  403aa2:	ea54 0005 	orrs.w	r0, r4, r5
  403aa6:	d007      	beq.n	403ab8 <_svfprintf_r+0x6e8>
  403aa8:	9908      	ldr	r1, [sp, #32]
  403aaa:	2330      	movs	r3, #48	; 0x30
  403aac:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403ab0:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
  403ab4:	f047 0702 	orr.w	r7, r7, #2
  403ab8:	2302      	movs	r3, #2
  403aba:	2200      	movs	r2, #0
  403abc:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  403ac0:	e000      	b.n	403ac4 <_svfprintf_r+0x6f4>
  403ac2:	2301      	movs	r3, #1
  403ac4:	f1b9 0f00 	cmp.w	r9, #0
  403ac8:	bfa8      	it	ge
  403aca:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  403ace:	ea54 0205 	orrs.w	r2, r4, r5
  403ad2:	d102      	bne.n	403ada <_svfprintf_r+0x70a>
  403ad4:	f1b9 0f00 	cmp.w	r9, #0
  403ad8:	d05a      	beq.n	403b90 <_svfprintf_r+0x7c0>
  403ada:	2b01      	cmp	r3, #1
  403adc:	d01f      	beq.n	403b1e <_svfprintf_r+0x74e>
  403ade:	2b02      	cmp	r3, #2
  403ae0:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
  403ae4:	d041      	beq.n	403b6a <_svfprintf_r+0x79a>
  403ae6:	08e1      	lsrs	r1, r4, #3
  403ae8:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
  403aec:	08e9      	lsrs	r1, r5, #3
  403aee:	f004 0207 	and.w	r2, r4, #7
  403af2:	9014      	str	r0, [sp, #80]	; 0x50
  403af4:	9115      	str	r1, [sp, #84]	; 0x54
  403af6:	3230      	adds	r2, #48	; 0x30
  403af8:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  403afc:	ea54 0005 	orrs.w	r0, r4, r5
  403b00:	9307      	str	r3, [sp, #28]
  403b02:	701a      	strb	r2, [r3, #0]
  403b04:	f103 33ff 	add.w	r3, r3, #4294967295
  403b08:	d1ed      	bne.n	403ae6 <_svfprintf_r+0x716>
  403b0a:	07f8      	lsls	r0, r7, #31
  403b0c:	9907      	ldr	r1, [sp, #28]
  403b0e:	d54c      	bpl.n	403baa <_svfprintf_r+0x7da>
  403b10:	2a30      	cmp	r2, #48	; 0x30
  403b12:	d04a      	beq.n	403baa <_svfprintf_r+0x7da>
  403b14:	9307      	str	r3, [sp, #28]
  403b16:	2330      	movs	r3, #48	; 0x30
  403b18:	f801 3c01 	strb.w	r3, [r1, #-1]
  403b1c:	e045      	b.n	403baa <_svfprintf_r+0x7da>
  403b1e:	2d00      	cmp	r5, #0
  403b20:	bf08      	it	eq
  403b22:	2c0a      	cmpeq	r4, #10
  403b24:	d205      	bcs.n	403b32 <_svfprintf_r+0x762>
  403b26:	3430      	adds	r4, #48	; 0x30
  403b28:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
  403b2c:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
  403b30:	e03a      	b.n	403ba8 <_svfprintf_r+0x7d8>
  403b32:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
  403b36:	900a      	str	r0, [sp, #40]	; 0x28
  403b38:	990a      	ldr	r1, [sp, #40]	; 0x28
  403b3a:	4620      	mov	r0, r4
  403b3c:	9107      	str	r1, [sp, #28]
  403b3e:	220a      	movs	r2, #10
  403b40:	4629      	mov	r1, r5
  403b42:	2300      	movs	r3, #0
  403b44:	f003 fcee 	bl	407524 <__aeabi_uldivmod>
  403b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403b4a:	3230      	adds	r2, #48	; 0x30
  403b4c:	f803 2901 	strb.w	r2, [r3], #-1
  403b50:	930a      	str	r3, [sp, #40]	; 0x28
  403b52:	4620      	mov	r0, r4
  403b54:	4629      	mov	r1, r5
  403b56:	220a      	movs	r2, #10
  403b58:	2300      	movs	r3, #0
  403b5a:	f003 fce3 	bl	407524 <__aeabi_uldivmod>
  403b5e:	4604      	mov	r4, r0
  403b60:	460d      	mov	r5, r1
  403b62:	ea54 0005 	orrs.w	r0, r4, r5
  403b66:	d1e7      	bne.n	403b38 <_svfprintf_r+0x768>
  403b68:	e01f      	b.n	403baa <_svfprintf_r+0x7da>
  403b6a:	991b      	ldr	r1, [sp, #108]	; 0x6c
  403b6c:	f004 020f 	and.w	r2, r4, #15
  403b70:	5c8a      	ldrb	r2, [r1, r2]
  403b72:	9307      	str	r3, [sp, #28]
  403b74:	f803 2901 	strb.w	r2, [r3], #-1
  403b78:	0922      	lsrs	r2, r4, #4
  403b7a:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  403b7e:	0929      	lsrs	r1, r5, #4
  403b80:	9016      	str	r0, [sp, #88]	; 0x58
  403b82:	9117      	str	r1, [sp, #92]	; 0x5c
  403b84:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  403b88:	ea54 0205 	orrs.w	r2, r4, r5
  403b8c:	d1ed      	bne.n	403b6a <_svfprintf_r+0x79a>
  403b8e:	e00c      	b.n	403baa <_svfprintf_r+0x7da>
  403b90:	b933      	cbnz	r3, 403ba0 <_svfprintf_r+0x7d0>
  403b92:	07fb      	lsls	r3, r7, #31
  403b94:	d507      	bpl.n	403ba6 <_svfprintf_r+0x7d6>
  403b96:	ac42      	add	r4, sp, #264	; 0x108
  403b98:	2330      	movs	r3, #48	; 0x30
  403b9a:	f804 3d41 	strb.w	r3, [r4, #-65]!
  403b9e:	e003      	b.n	403ba8 <_svfprintf_r+0x7d8>
  403ba0:	ad32      	add	r5, sp, #200	; 0xc8
  403ba2:	9507      	str	r5, [sp, #28]
  403ba4:	e001      	b.n	403baa <_svfprintf_r+0x7da>
  403ba6:	ac32      	add	r4, sp, #200	; 0xc8
  403ba8:	9407      	str	r4, [sp, #28]
  403baa:	9c07      	ldr	r4, [sp, #28]
  403bac:	464d      	mov	r5, r9
  403bae:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403bb2:	ebc4 0909 	rsb	r9, r4, r9
  403bb6:	2400      	movs	r4, #0
  403bb8:	e012      	b.n	403be0 <_svfprintf_r+0x810>
  403bba:	9d08      	ldr	r5, [sp, #32]
  403bbc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403bc0:	2d00      	cmp	r5, #0
  403bc2:	f000 8389 	beq.w	4042d8 <_svfprintf_r+0xf08>
  403bc6:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
  403bca:	2500      	movs	r5, #0
  403bcc:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  403bd0:	a828      	add	r0, sp, #160	; 0xa0
  403bd2:	f04f 0901 	mov.w	r9, #1
  403bd6:	462c      	mov	r4, r5
  403bd8:	9007      	str	r0, [sp, #28]
  403bda:	e001      	b.n	403be0 <_svfprintf_r+0x810>
  403bdc:	4605      	mov	r5, r0
  403bde:	462c      	mov	r4, r5
  403be0:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  403be4:	45a9      	cmp	r9, r5
  403be6:	bfac      	ite	ge
  403be8:	4649      	movge	r1, r9
  403bea:	4629      	movlt	r1, r5
  403bec:	910a      	str	r1, [sp, #40]	; 0x28
  403bee:	b10b      	cbz	r3, 403bf4 <_svfprintf_r+0x824>
  403bf0:	3101      	adds	r1, #1
  403bf2:	910a      	str	r1, [sp, #40]	; 0x28
  403bf4:	f017 0302 	ands.w	r3, r7, #2
  403bf8:	9311      	str	r3, [sp, #68]	; 0x44
  403bfa:	d002      	beq.n	403c02 <_svfprintf_r+0x832>
  403bfc:	980a      	ldr	r0, [sp, #40]	; 0x28
  403bfe:	3002      	adds	r0, #2
  403c00:	900a      	str	r0, [sp, #40]	; 0x28
  403c02:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  403c06:	9319      	str	r3, [sp, #100]	; 0x64
  403c08:	d141      	bne.n	403c8e <_svfprintf_r+0x8be>
  403c0a:	980e      	ldr	r0, [sp, #56]	; 0x38
  403c0c:	990a      	ldr	r1, [sp, #40]	; 0x28
  403c0e:	ebc1 0c00 	rsb	ip, r1, r0
  403c12:	f1bc 0f00 	cmp.w	ip, #0
  403c16:	dd3a      	ble.n	403c8e <_svfprintf_r+0x8be>
  403c18:	4b17      	ldr	r3, [pc, #92]	; (403c78 <_svfprintf_r+0x8a8>)
  403c1a:	f1bc 0f10 	cmp.w	ip, #16
  403c1e:	6033      	str	r3, [r6, #0]
  403c20:	dd1b      	ble.n	403c5a <_svfprintf_r+0x88a>
  403c22:	2310      	movs	r3, #16
  403c24:	6073      	str	r3, [r6, #4]
  403c26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403c28:	3310      	adds	r3, #16
  403c2a:	9327      	str	r3, [sp, #156]	; 0x9c
  403c2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c2e:	3301      	adds	r3, #1
  403c30:	2b07      	cmp	r3, #7
  403c32:	9326      	str	r3, [sp, #152]	; 0x98
  403c34:	dc01      	bgt.n	403c3a <_svfprintf_r+0x86a>
  403c36:	3608      	adds	r6, #8
  403c38:	e00c      	b.n	403c54 <_svfprintf_r+0x884>
  403c3a:	4650      	mov	r0, sl
  403c3c:	4659      	mov	r1, fp
  403c3e:	aa25      	add	r2, sp, #148	; 0x94
  403c40:	f8cd c018 	str.w	ip, [sp, #24]
  403c44:	f002 fb0e 	bl	406264 <__ssprint_r>
  403c48:	f8dd c018 	ldr.w	ip, [sp, #24]
  403c4c:	2800      	cmp	r0, #0
  403c4e:	f040 834a 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403c52:	ae32      	add	r6, sp, #200	; 0xc8
  403c54:	f1ac 0c10 	sub.w	ip, ip, #16
  403c58:	e7de      	b.n	403c18 <_svfprintf_r+0x848>
  403c5a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403c5c:	f8c6 c004 	str.w	ip, [r6, #4]
  403c60:	4463      	add	r3, ip
  403c62:	9327      	str	r3, [sp, #156]	; 0x9c
  403c64:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403c66:	3301      	adds	r3, #1
  403c68:	2b07      	cmp	r3, #7
  403c6a:	9326      	str	r3, [sp, #152]	; 0x98
  403c6c:	dc06      	bgt.n	403c7c <_svfprintf_r+0x8ac>
  403c6e:	3608      	adds	r6, #8
  403c70:	e00d      	b.n	403c8e <_svfprintf_r+0x8be>
  403c72:	bf00      	nop
  403c74:	00407be7 	.word	0x00407be7
  403c78:	00407ba6 	.word	0x00407ba6
  403c7c:	4650      	mov	r0, sl
  403c7e:	4659      	mov	r1, fp
  403c80:	aa25      	add	r2, sp, #148	; 0x94
  403c82:	f002 faef 	bl	406264 <__ssprint_r>
  403c86:	2800      	cmp	r0, #0
  403c88:	f040 832d 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403c8c:	ae32      	add	r6, sp, #200	; 0xc8
  403c8e:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  403c92:	b1bb      	cbz	r3, 403cc4 <_svfprintf_r+0x8f4>
  403c94:	f10d 0377 	add.w	r3, sp, #119	; 0x77
  403c98:	6033      	str	r3, [r6, #0]
  403c9a:	2301      	movs	r3, #1
  403c9c:	6073      	str	r3, [r6, #4]
  403c9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403ca0:	3301      	adds	r3, #1
  403ca2:	9327      	str	r3, [sp, #156]	; 0x9c
  403ca4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ca6:	3301      	adds	r3, #1
  403ca8:	2b07      	cmp	r3, #7
  403caa:	9326      	str	r3, [sp, #152]	; 0x98
  403cac:	dc01      	bgt.n	403cb2 <_svfprintf_r+0x8e2>
  403cae:	3608      	adds	r6, #8
  403cb0:	e008      	b.n	403cc4 <_svfprintf_r+0x8f4>
  403cb2:	4650      	mov	r0, sl
  403cb4:	4659      	mov	r1, fp
  403cb6:	aa25      	add	r2, sp, #148	; 0x94
  403cb8:	f002 fad4 	bl	406264 <__ssprint_r>
  403cbc:	2800      	cmp	r0, #0
  403cbe:	f040 8312 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403cc2:	ae32      	add	r6, sp, #200	; 0xc8
  403cc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403cc6:	b1b3      	cbz	r3, 403cf6 <_svfprintf_r+0x926>
  403cc8:	ab1e      	add	r3, sp, #120	; 0x78
  403cca:	6033      	str	r3, [r6, #0]
  403ccc:	2302      	movs	r3, #2
  403cce:	6073      	str	r3, [r6, #4]
  403cd0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403cd2:	3302      	adds	r3, #2
  403cd4:	9327      	str	r3, [sp, #156]	; 0x9c
  403cd6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403cd8:	3301      	adds	r3, #1
  403cda:	2b07      	cmp	r3, #7
  403cdc:	9326      	str	r3, [sp, #152]	; 0x98
  403cde:	dc01      	bgt.n	403ce4 <_svfprintf_r+0x914>
  403ce0:	3608      	adds	r6, #8
  403ce2:	e008      	b.n	403cf6 <_svfprintf_r+0x926>
  403ce4:	4650      	mov	r0, sl
  403ce6:	4659      	mov	r1, fp
  403ce8:	aa25      	add	r2, sp, #148	; 0x94
  403cea:	f002 fabb 	bl	406264 <__ssprint_r>
  403cee:	2800      	cmp	r0, #0
  403cf0:	f040 82f9 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403cf4:	ae32      	add	r6, sp, #200	; 0xc8
  403cf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403cf8:	2b80      	cmp	r3, #128	; 0x80
  403cfa:	d13c      	bne.n	403d76 <_svfprintf_r+0x9a6>
  403cfc:	980e      	ldr	r0, [sp, #56]	; 0x38
  403cfe:	990a      	ldr	r1, [sp, #40]	; 0x28
  403d00:	ebc1 0c00 	rsb	ip, r1, r0
  403d04:	f1bc 0f00 	cmp.w	ip, #0
  403d08:	dd35      	ble.n	403d76 <_svfprintf_r+0x9a6>
  403d0a:	4b9c      	ldr	r3, [pc, #624]	; (403f7c <_svfprintf_r+0xbac>)
  403d0c:	f1bc 0f10 	cmp.w	ip, #16
  403d10:	6033      	str	r3, [r6, #0]
  403d12:	dd1b      	ble.n	403d4c <_svfprintf_r+0x97c>
  403d14:	2310      	movs	r3, #16
  403d16:	6073      	str	r3, [r6, #4]
  403d18:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403d1a:	3310      	adds	r3, #16
  403d1c:	9327      	str	r3, [sp, #156]	; 0x9c
  403d1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d20:	3301      	adds	r3, #1
  403d22:	2b07      	cmp	r3, #7
  403d24:	9326      	str	r3, [sp, #152]	; 0x98
  403d26:	dc01      	bgt.n	403d2c <_svfprintf_r+0x95c>
  403d28:	3608      	adds	r6, #8
  403d2a:	e00c      	b.n	403d46 <_svfprintf_r+0x976>
  403d2c:	4650      	mov	r0, sl
  403d2e:	4659      	mov	r1, fp
  403d30:	aa25      	add	r2, sp, #148	; 0x94
  403d32:	f8cd c018 	str.w	ip, [sp, #24]
  403d36:	f002 fa95 	bl	406264 <__ssprint_r>
  403d3a:	f8dd c018 	ldr.w	ip, [sp, #24]
  403d3e:	2800      	cmp	r0, #0
  403d40:	f040 82d1 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403d44:	ae32      	add	r6, sp, #200	; 0xc8
  403d46:	f1ac 0c10 	sub.w	ip, ip, #16
  403d4a:	e7de      	b.n	403d0a <_svfprintf_r+0x93a>
  403d4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403d4e:	f8c6 c004 	str.w	ip, [r6, #4]
  403d52:	4463      	add	r3, ip
  403d54:	9327      	str	r3, [sp, #156]	; 0x9c
  403d56:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d58:	3301      	adds	r3, #1
  403d5a:	2b07      	cmp	r3, #7
  403d5c:	9326      	str	r3, [sp, #152]	; 0x98
  403d5e:	dc01      	bgt.n	403d64 <_svfprintf_r+0x994>
  403d60:	3608      	adds	r6, #8
  403d62:	e008      	b.n	403d76 <_svfprintf_r+0x9a6>
  403d64:	4650      	mov	r0, sl
  403d66:	4659      	mov	r1, fp
  403d68:	aa25      	add	r2, sp, #148	; 0x94
  403d6a:	f002 fa7b 	bl	406264 <__ssprint_r>
  403d6e:	2800      	cmp	r0, #0
  403d70:	f040 82b9 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403d74:	ae32      	add	r6, sp, #200	; 0xc8
  403d76:	ebc9 0505 	rsb	r5, r9, r5
  403d7a:	2d00      	cmp	r5, #0
  403d7c:	dd2e      	ble.n	403ddc <_svfprintf_r+0xa0c>
  403d7e:	4b7f      	ldr	r3, [pc, #508]	; (403f7c <_svfprintf_r+0xbac>)
  403d80:	2d10      	cmp	r5, #16
  403d82:	6033      	str	r3, [r6, #0]
  403d84:	dd16      	ble.n	403db4 <_svfprintf_r+0x9e4>
  403d86:	2310      	movs	r3, #16
  403d88:	6073      	str	r3, [r6, #4]
  403d8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403d8c:	3310      	adds	r3, #16
  403d8e:	9327      	str	r3, [sp, #156]	; 0x9c
  403d90:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403d92:	3301      	adds	r3, #1
  403d94:	2b07      	cmp	r3, #7
  403d96:	9326      	str	r3, [sp, #152]	; 0x98
  403d98:	dc01      	bgt.n	403d9e <_svfprintf_r+0x9ce>
  403d9a:	3608      	adds	r6, #8
  403d9c:	e008      	b.n	403db0 <_svfprintf_r+0x9e0>
  403d9e:	4650      	mov	r0, sl
  403da0:	4659      	mov	r1, fp
  403da2:	aa25      	add	r2, sp, #148	; 0x94
  403da4:	f002 fa5e 	bl	406264 <__ssprint_r>
  403da8:	2800      	cmp	r0, #0
  403daa:	f040 829c 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403dae:	ae32      	add	r6, sp, #200	; 0xc8
  403db0:	3d10      	subs	r5, #16
  403db2:	e7e4      	b.n	403d7e <_svfprintf_r+0x9ae>
  403db4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403db6:	6075      	str	r5, [r6, #4]
  403db8:	441d      	add	r5, r3
  403dba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403dbc:	9527      	str	r5, [sp, #156]	; 0x9c
  403dbe:	3301      	adds	r3, #1
  403dc0:	2b07      	cmp	r3, #7
  403dc2:	9326      	str	r3, [sp, #152]	; 0x98
  403dc4:	dc01      	bgt.n	403dca <_svfprintf_r+0x9fa>
  403dc6:	3608      	adds	r6, #8
  403dc8:	e008      	b.n	403ddc <_svfprintf_r+0xa0c>
  403dca:	4650      	mov	r0, sl
  403dcc:	4659      	mov	r1, fp
  403dce:	aa25      	add	r2, sp, #148	; 0x94
  403dd0:	f002 fa48 	bl	406264 <__ssprint_r>
  403dd4:	2800      	cmp	r0, #0
  403dd6:	f040 8286 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403dda:	ae32      	add	r6, sp, #200	; 0xc8
  403ddc:	05fd      	lsls	r5, r7, #23
  403dde:	d405      	bmi.n	403dec <_svfprintf_r+0xa1c>
  403de0:	9c07      	ldr	r4, [sp, #28]
  403de2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403de4:	e886 0210 	stmia.w	r6, {r4, r9}
  403de8:	444b      	add	r3, r9
  403dea:	e0da      	b.n	403fa2 <_svfprintf_r+0xbd2>
  403dec:	9d08      	ldr	r5, [sp, #32]
  403dee:	2d65      	cmp	r5, #101	; 0x65
  403df0:	f340 81a7 	ble.w	404142 <_svfprintf_r+0xd72>
  403df4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403df8:	2200      	movs	r2, #0
  403dfa:	2300      	movs	r3, #0
  403dfc:	f003 fb38 	bl	407470 <__aeabi_dcmpeq>
  403e00:	2800      	cmp	r0, #0
  403e02:	d059      	beq.n	403eb8 <_svfprintf_r+0xae8>
  403e04:	4b5e      	ldr	r3, [pc, #376]	; (403f80 <_svfprintf_r+0xbb0>)
  403e06:	6033      	str	r3, [r6, #0]
  403e08:	2301      	movs	r3, #1
  403e0a:	6073      	str	r3, [r6, #4]
  403e0c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403e0e:	3301      	adds	r3, #1
  403e10:	9327      	str	r3, [sp, #156]	; 0x9c
  403e12:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e14:	3301      	adds	r3, #1
  403e16:	2b07      	cmp	r3, #7
  403e18:	9326      	str	r3, [sp, #152]	; 0x98
  403e1a:	dc01      	bgt.n	403e20 <_svfprintf_r+0xa50>
  403e1c:	3608      	adds	r6, #8
  403e1e:	e008      	b.n	403e32 <_svfprintf_r+0xa62>
  403e20:	4650      	mov	r0, sl
  403e22:	4659      	mov	r1, fp
  403e24:	aa25      	add	r2, sp, #148	; 0x94
  403e26:	f002 fa1d 	bl	406264 <__ssprint_r>
  403e2a:	2800      	cmp	r0, #0
  403e2c:	f040 825b 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403e30:	ae32      	add	r6, sp, #200	; 0xc8
  403e32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403e34:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403e36:	42a3      	cmp	r3, r4
  403e38:	db02      	blt.n	403e40 <_svfprintf_r+0xa70>
  403e3a:	07fc      	lsls	r4, r7, #31
  403e3c:	f140 8202 	bpl.w	404244 <_svfprintf_r+0xe74>
  403e40:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403e42:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403e44:	9d18      	ldr	r5, [sp, #96]	; 0x60
  403e46:	4423      	add	r3, r4
  403e48:	9327      	str	r3, [sp, #156]	; 0x9c
  403e4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e4c:	6035      	str	r5, [r6, #0]
  403e4e:	3301      	adds	r3, #1
  403e50:	2b07      	cmp	r3, #7
  403e52:	6074      	str	r4, [r6, #4]
  403e54:	9326      	str	r3, [sp, #152]	; 0x98
  403e56:	dc01      	bgt.n	403e5c <_svfprintf_r+0xa8c>
  403e58:	3608      	adds	r6, #8
  403e5a:	e008      	b.n	403e6e <_svfprintf_r+0xa9e>
  403e5c:	4650      	mov	r0, sl
  403e5e:	4659      	mov	r1, fp
  403e60:	aa25      	add	r2, sp, #148	; 0x94
  403e62:	f002 f9ff 	bl	406264 <__ssprint_r>
  403e66:	2800      	cmp	r0, #0
  403e68:	f040 823d 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403e6c:	ae32      	add	r6, sp, #200	; 0xc8
  403e6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403e70:	1e6c      	subs	r4, r5, #1
  403e72:	2c00      	cmp	r4, #0
  403e74:	f340 81e6 	ble.w	404244 <_svfprintf_r+0xe74>
  403e78:	4b40      	ldr	r3, [pc, #256]	; (403f7c <_svfprintf_r+0xbac>)
  403e7a:	2c10      	cmp	r4, #16
  403e7c:	6033      	str	r3, [r6, #0]
  403e7e:	dd16      	ble.n	403eae <_svfprintf_r+0xade>
  403e80:	2310      	movs	r3, #16
  403e82:	6073      	str	r3, [r6, #4]
  403e84:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403e86:	3310      	adds	r3, #16
  403e88:	9327      	str	r3, [sp, #156]	; 0x9c
  403e8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e8c:	3301      	adds	r3, #1
  403e8e:	2b07      	cmp	r3, #7
  403e90:	9326      	str	r3, [sp, #152]	; 0x98
  403e92:	dc01      	bgt.n	403e98 <_svfprintf_r+0xac8>
  403e94:	3608      	adds	r6, #8
  403e96:	e008      	b.n	403eaa <_svfprintf_r+0xada>
  403e98:	4650      	mov	r0, sl
  403e9a:	4659      	mov	r1, fp
  403e9c:	aa25      	add	r2, sp, #148	; 0x94
  403e9e:	f002 f9e1 	bl	406264 <__ssprint_r>
  403ea2:	2800      	cmp	r0, #0
  403ea4:	f040 821f 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403ea8:	ae32      	add	r6, sp, #200	; 0xc8
  403eaa:	3c10      	subs	r4, #16
  403eac:	e7e4      	b.n	403e78 <_svfprintf_r+0xaa8>
  403eae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403eb0:	6074      	str	r4, [r6, #4]
  403eb2:	441c      	add	r4, r3
  403eb4:	9427      	str	r4, [sp, #156]	; 0x9c
  403eb6:	e134      	b.n	404122 <_svfprintf_r+0xd52>
  403eb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403eba:	2b00      	cmp	r3, #0
  403ebc:	dc73      	bgt.n	403fa6 <_svfprintf_r+0xbd6>
  403ebe:	4b30      	ldr	r3, [pc, #192]	; (403f80 <_svfprintf_r+0xbb0>)
  403ec0:	6033      	str	r3, [r6, #0]
  403ec2:	2301      	movs	r3, #1
  403ec4:	6073      	str	r3, [r6, #4]
  403ec6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403ec8:	3301      	adds	r3, #1
  403eca:	9327      	str	r3, [sp, #156]	; 0x9c
  403ecc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ece:	3301      	adds	r3, #1
  403ed0:	2b07      	cmp	r3, #7
  403ed2:	9326      	str	r3, [sp, #152]	; 0x98
  403ed4:	dc01      	bgt.n	403eda <_svfprintf_r+0xb0a>
  403ed6:	3608      	adds	r6, #8
  403ed8:	e008      	b.n	403eec <_svfprintf_r+0xb1c>
  403eda:	4650      	mov	r0, sl
  403edc:	4659      	mov	r1, fp
  403ede:	aa25      	add	r2, sp, #148	; 0x94
  403ee0:	f002 f9c0 	bl	406264 <__ssprint_r>
  403ee4:	2800      	cmp	r0, #0
  403ee6:	f040 81fe 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403eea:	ae32      	add	r6, sp, #200	; 0xc8
  403eec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403eee:	b923      	cbnz	r3, 403efa <_svfprintf_r+0xb2a>
  403ef0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403ef2:	b914      	cbnz	r4, 403efa <_svfprintf_r+0xb2a>
  403ef4:	07f8      	lsls	r0, r7, #31
  403ef6:	f140 81a5 	bpl.w	404244 <_svfprintf_r+0xe74>
  403efa:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403efc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403efe:	9d18      	ldr	r5, [sp, #96]	; 0x60
  403f00:	4423      	add	r3, r4
  403f02:	9327      	str	r3, [sp, #156]	; 0x9c
  403f04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f06:	6035      	str	r5, [r6, #0]
  403f08:	3301      	adds	r3, #1
  403f0a:	2b07      	cmp	r3, #7
  403f0c:	6074      	str	r4, [r6, #4]
  403f0e:	9326      	str	r3, [sp, #152]	; 0x98
  403f10:	dc01      	bgt.n	403f16 <_svfprintf_r+0xb46>
  403f12:	3608      	adds	r6, #8
  403f14:	e008      	b.n	403f28 <_svfprintf_r+0xb58>
  403f16:	4650      	mov	r0, sl
  403f18:	4659      	mov	r1, fp
  403f1a:	aa25      	add	r2, sp, #148	; 0x94
  403f1c:	f002 f9a2 	bl	406264 <__ssprint_r>
  403f20:	2800      	cmp	r0, #0
  403f22:	f040 81e0 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403f26:	ae32      	add	r6, sp, #200	; 0xc8
  403f28:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  403f2a:	4264      	negs	r4, r4
  403f2c:	2c00      	cmp	r4, #0
  403f2e:	dd32      	ble.n	403f96 <_svfprintf_r+0xbc6>
  403f30:	4b12      	ldr	r3, [pc, #72]	; (403f7c <_svfprintf_r+0xbac>)
  403f32:	2c10      	cmp	r4, #16
  403f34:	6033      	str	r3, [r6, #0]
  403f36:	dd16      	ble.n	403f66 <_svfprintf_r+0xb96>
  403f38:	2310      	movs	r3, #16
  403f3a:	6073      	str	r3, [r6, #4]
  403f3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403f3e:	3310      	adds	r3, #16
  403f40:	9327      	str	r3, [sp, #156]	; 0x9c
  403f42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f44:	3301      	adds	r3, #1
  403f46:	2b07      	cmp	r3, #7
  403f48:	9326      	str	r3, [sp, #152]	; 0x98
  403f4a:	dc01      	bgt.n	403f50 <_svfprintf_r+0xb80>
  403f4c:	3608      	adds	r6, #8
  403f4e:	e008      	b.n	403f62 <_svfprintf_r+0xb92>
  403f50:	4650      	mov	r0, sl
  403f52:	4659      	mov	r1, fp
  403f54:	aa25      	add	r2, sp, #148	; 0x94
  403f56:	f002 f985 	bl	406264 <__ssprint_r>
  403f5a:	2800      	cmp	r0, #0
  403f5c:	f040 81c3 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403f60:	ae32      	add	r6, sp, #200	; 0xc8
  403f62:	3c10      	subs	r4, #16
  403f64:	e7e4      	b.n	403f30 <_svfprintf_r+0xb60>
  403f66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403f68:	6074      	str	r4, [r6, #4]
  403f6a:	441c      	add	r4, r3
  403f6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f6e:	9427      	str	r4, [sp, #156]	; 0x9c
  403f70:	3301      	adds	r3, #1
  403f72:	2b07      	cmp	r3, #7
  403f74:	9326      	str	r3, [sp, #152]	; 0x98
  403f76:	dc05      	bgt.n	403f84 <_svfprintf_r+0xbb4>
  403f78:	3608      	adds	r6, #8
  403f7a:	e00c      	b.n	403f96 <_svfprintf_r+0xbc6>
  403f7c:	00407bb6 	.word	0x00407bb6
  403f80:	00407bf8 	.word	0x00407bf8
  403f84:	4650      	mov	r0, sl
  403f86:	4659      	mov	r1, fp
  403f88:	aa25      	add	r2, sp, #148	; 0x94
  403f8a:	f002 f96b 	bl	406264 <__ssprint_r>
  403f8e:	2800      	cmp	r0, #0
  403f90:	f040 81a9 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403f94:	ae32      	add	r6, sp, #200	; 0xc8
  403f96:	9d07      	ldr	r5, [sp, #28]
  403f98:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403f9a:	6035      	str	r5, [r6, #0]
  403f9c:	6074      	str	r4, [r6, #4]
  403f9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403fa0:	4423      	add	r3, r4
  403fa2:	9327      	str	r3, [sp, #156]	; 0x9c
  403fa4:	e0bd      	b.n	404122 <_svfprintf_r+0xd52>
  403fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
  403fa8:	9d07      	ldr	r5, [sp, #28]
  403faa:	4681      	mov	r9, r0
  403fac:	45a1      	cmp	r9, r4
  403fae:	bfa8      	it	ge
  403fb0:	46a1      	movge	r9, r4
  403fb2:	f1b9 0f00 	cmp.w	r9, #0
  403fb6:	4405      	add	r5, r0
  403fb8:	dd15      	ble.n	403fe6 <_svfprintf_r+0xc16>
  403fba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403fbc:	9907      	ldr	r1, [sp, #28]
  403fbe:	444b      	add	r3, r9
  403fc0:	9327      	str	r3, [sp, #156]	; 0x9c
  403fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fc4:	e886 0202 	stmia.w	r6, {r1, r9}
  403fc8:	3301      	adds	r3, #1
  403fca:	2b07      	cmp	r3, #7
  403fcc:	9326      	str	r3, [sp, #152]	; 0x98
  403fce:	dc01      	bgt.n	403fd4 <_svfprintf_r+0xc04>
  403fd0:	3608      	adds	r6, #8
  403fd2:	e008      	b.n	403fe6 <_svfprintf_r+0xc16>
  403fd4:	4650      	mov	r0, sl
  403fd6:	4659      	mov	r1, fp
  403fd8:	aa25      	add	r2, sp, #148	; 0x94
  403fda:	f002 f943 	bl	406264 <__ssprint_r>
  403fde:	2800      	cmp	r0, #0
  403fe0:	f040 8181 	bne.w	4042e6 <_svfprintf_r+0xf16>
  403fe4:	ae32      	add	r6, sp, #200	; 0xc8
  403fe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  403fea:	ebc9 0904 	rsb	r9, r9, r4
  403fee:	f1b9 0f00 	cmp.w	r9, #0
  403ff2:	dd31      	ble.n	404058 <_svfprintf_r+0xc88>
  403ff4:	4b9a      	ldr	r3, [pc, #616]	; (404260 <_svfprintf_r+0xe90>)
  403ff6:	f1b9 0f10 	cmp.w	r9, #16
  403ffa:	6033      	str	r3, [r6, #0]
  403ffc:	dd17      	ble.n	40402e <_svfprintf_r+0xc5e>
  403ffe:	2310      	movs	r3, #16
  404000:	6073      	str	r3, [r6, #4]
  404002:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404004:	3310      	adds	r3, #16
  404006:	9327      	str	r3, [sp, #156]	; 0x9c
  404008:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40400a:	3301      	adds	r3, #1
  40400c:	2b07      	cmp	r3, #7
  40400e:	9326      	str	r3, [sp, #152]	; 0x98
  404010:	dc01      	bgt.n	404016 <_svfprintf_r+0xc46>
  404012:	3608      	adds	r6, #8
  404014:	e008      	b.n	404028 <_svfprintf_r+0xc58>
  404016:	4650      	mov	r0, sl
  404018:	4659      	mov	r1, fp
  40401a:	aa25      	add	r2, sp, #148	; 0x94
  40401c:	f002 f922 	bl	406264 <__ssprint_r>
  404020:	2800      	cmp	r0, #0
  404022:	f040 8160 	bne.w	4042e6 <_svfprintf_r+0xf16>
  404026:	ae32      	add	r6, sp, #200	; 0xc8
  404028:	f1a9 0910 	sub.w	r9, r9, #16
  40402c:	e7e2      	b.n	403ff4 <_svfprintf_r+0xc24>
  40402e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404030:	f8c6 9004 	str.w	r9, [r6, #4]
  404034:	444b      	add	r3, r9
  404036:	9327      	str	r3, [sp, #156]	; 0x9c
  404038:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40403a:	3301      	adds	r3, #1
  40403c:	2b07      	cmp	r3, #7
  40403e:	9326      	str	r3, [sp, #152]	; 0x98
  404040:	dc01      	bgt.n	404046 <_svfprintf_r+0xc76>
  404042:	3608      	adds	r6, #8
  404044:	e008      	b.n	404058 <_svfprintf_r+0xc88>
  404046:	4650      	mov	r0, sl
  404048:	4659      	mov	r1, fp
  40404a:	aa25      	add	r2, sp, #148	; 0x94
  40404c:	f002 f90a 	bl	406264 <__ssprint_r>
  404050:	2800      	cmp	r0, #0
  404052:	f040 8148 	bne.w	4042e6 <_svfprintf_r+0xf16>
  404056:	ae32      	add	r6, sp, #200	; 0xc8
  404058:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40405a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40405c:	9a07      	ldr	r2, [sp, #28]
  40405e:	4283      	cmp	r3, r0
  404060:	4414      	add	r4, r2
  404062:	db01      	blt.n	404068 <_svfprintf_r+0xc98>
  404064:	07f9      	lsls	r1, r7, #31
  404066:	d516      	bpl.n	404096 <_svfprintf_r+0xcc6>
  404068:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40406a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40406c:	9918      	ldr	r1, [sp, #96]	; 0x60
  40406e:	4413      	add	r3, r2
  404070:	9327      	str	r3, [sp, #156]	; 0x9c
  404072:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404074:	6031      	str	r1, [r6, #0]
  404076:	3301      	adds	r3, #1
  404078:	2b07      	cmp	r3, #7
  40407a:	6072      	str	r2, [r6, #4]
  40407c:	9326      	str	r3, [sp, #152]	; 0x98
  40407e:	dc01      	bgt.n	404084 <_svfprintf_r+0xcb4>
  404080:	3608      	adds	r6, #8
  404082:	e008      	b.n	404096 <_svfprintf_r+0xcc6>
  404084:	4650      	mov	r0, sl
  404086:	4659      	mov	r1, fp
  404088:	aa25      	add	r2, sp, #148	; 0x94
  40408a:	f002 f8eb 	bl	406264 <__ssprint_r>
  40408e:	2800      	cmp	r0, #0
  404090:	f040 8129 	bne.w	4042e6 <_svfprintf_r+0xf16>
  404094:	ae32      	add	r6, sp, #200	; 0xc8
  404096:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404098:	9809      	ldr	r0, [sp, #36]	; 0x24
  40409a:	1b2d      	subs	r5, r5, r4
  40409c:	1ac3      	subs	r3, r0, r3
  40409e:	429d      	cmp	r5, r3
  4040a0:	bfa8      	it	ge
  4040a2:	461d      	movge	r5, r3
  4040a4:	2d00      	cmp	r5, #0
  4040a6:	dd14      	ble.n	4040d2 <_svfprintf_r+0xd02>
  4040a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4040aa:	e886 0030 	stmia.w	r6, {r4, r5}
  4040ae:	442b      	add	r3, r5
  4040b0:	9327      	str	r3, [sp, #156]	; 0x9c
  4040b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040b4:	3301      	adds	r3, #1
  4040b6:	2b07      	cmp	r3, #7
  4040b8:	9326      	str	r3, [sp, #152]	; 0x98
  4040ba:	dc01      	bgt.n	4040c0 <_svfprintf_r+0xcf0>
  4040bc:	3608      	adds	r6, #8
  4040be:	e008      	b.n	4040d2 <_svfprintf_r+0xd02>
  4040c0:	4650      	mov	r0, sl
  4040c2:	4659      	mov	r1, fp
  4040c4:	aa25      	add	r2, sp, #148	; 0x94
  4040c6:	f002 f8cd 	bl	406264 <__ssprint_r>
  4040ca:	2800      	cmp	r0, #0
  4040cc:	f040 810b 	bne.w	4042e6 <_svfprintf_r+0xf16>
  4040d0:	ae32      	add	r6, sp, #200	; 0xc8
  4040d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4040d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4040d6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  4040da:	1ae3      	subs	r3, r4, r3
  4040dc:	1b5d      	subs	r5, r3, r5
  4040de:	2d00      	cmp	r5, #0
  4040e0:	f340 80b0 	ble.w	404244 <_svfprintf_r+0xe74>
  4040e4:	4b5e      	ldr	r3, [pc, #376]	; (404260 <_svfprintf_r+0xe90>)
  4040e6:	2d10      	cmp	r5, #16
  4040e8:	6033      	str	r3, [r6, #0]
  4040ea:	dd16      	ble.n	40411a <_svfprintf_r+0xd4a>
  4040ec:	2310      	movs	r3, #16
  4040ee:	6073      	str	r3, [r6, #4]
  4040f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4040f2:	3310      	adds	r3, #16
  4040f4:	9327      	str	r3, [sp, #156]	; 0x9c
  4040f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040f8:	3301      	adds	r3, #1
  4040fa:	2b07      	cmp	r3, #7
  4040fc:	9326      	str	r3, [sp, #152]	; 0x98
  4040fe:	dc01      	bgt.n	404104 <_svfprintf_r+0xd34>
  404100:	3608      	adds	r6, #8
  404102:	e008      	b.n	404116 <_svfprintf_r+0xd46>
  404104:	4650      	mov	r0, sl
  404106:	4659      	mov	r1, fp
  404108:	aa25      	add	r2, sp, #148	; 0x94
  40410a:	f002 f8ab 	bl	406264 <__ssprint_r>
  40410e:	2800      	cmp	r0, #0
  404110:	f040 80e9 	bne.w	4042e6 <_svfprintf_r+0xf16>
  404114:	ae32      	add	r6, sp, #200	; 0xc8
  404116:	3d10      	subs	r5, #16
  404118:	e7e4      	b.n	4040e4 <_svfprintf_r+0xd14>
  40411a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40411c:	6075      	str	r5, [r6, #4]
  40411e:	441d      	add	r5, r3
  404120:	9527      	str	r5, [sp, #156]	; 0x9c
  404122:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404124:	3301      	adds	r3, #1
  404126:	2b07      	cmp	r3, #7
  404128:	9326      	str	r3, [sp, #152]	; 0x98
  40412a:	f340 808a 	ble.w	404242 <_svfprintf_r+0xe72>
  40412e:	4650      	mov	r0, sl
  404130:	4659      	mov	r1, fp
  404132:	aa25      	add	r2, sp, #148	; 0x94
  404134:	f002 f896 	bl	406264 <__ssprint_r>
  404138:	2800      	cmp	r0, #0
  40413a:	f040 80d4 	bne.w	4042e6 <_svfprintf_r+0xf16>
  40413e:	ae32      	add	r6, sp, #200	; 0xc8
  404140:	e080      	b.n	404244 <_svfprintf_r+0xe74>
  404142:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404144:	2d01      	cmp	r5, #1
  404146:	dc01      	bgt.n	40414c <_svfprintf_r+0xd7c>
  404148:	07fa      	lsls	r2, r7, #31
  40414a:	d56d      	bpl.n	404228 <_svfprintf_r+0xe58>
  40414c:	2301      	movs	r3, #1
  40414e:	6073      	str	r3, [r6, #4]
  404150:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404152:	9c07      	ldr	r4, [sp, #28]
  404154:	3301      	adds	r3, #1
  404156:	9327      	str	r3, [sp, #156]	; 0x9c
  404158:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40415a:	6034      	str	r4, [r6, #0]
  40415c:	3301      	adds	r3, #1
  40415e:	2b07      	cmp	r3, #7
  404160:	9326      	str	r3, [sp, #152]	; 0x98
  404162:	dc01      	bgt.n	404168 <_svfprintf_r+0xd98>
  404164:	3608      	adds	r6, #8
  404166:	e008      	b.n	40417a <_svfprintf_r+0xdaa>
  404168:	4650      	mov	r0, sl
  40416a:	4659      	mov	r1, fp
  40416c:	aa25      	add	r2, sp, #148	; 0x94
  40416e:	f002 f879 	bl	406264 <__ssprint_r>
  404172:	2800      	cmp	r0, #0
  404174:	f040 80b7 	bne.w	4042e6 <_svfprintf_r+0xf16>
  404178:	ae32      	add	r6, sp, #200	; 0xc8
  40417a:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40417c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40417e:	9d18      	ldr	r5, [sp, #96]	; 0x60
  404180:	4423      	add	r3, r4
  404182:	9327      	str	r3, [sp, #156]	; 0x9c
  404184:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404186:	6035      	str	r5, [r6, #0]
  404188:	3301      	adds	r3, #1
  40418a:	2b07      	cmp	r3, #7
  40418c:	6074      	str	r4, [r6, #4]
  40418e:	9326      	str	r3, [sp, #152]	; 0x98
  404190:	dc01      	bgt.n	404196 <_svfprintf_r+0xdc6>
  404192:	3608      	adds	r6, #8
  404194:	e008      	b.n	4041a8 <_svfprintf_r+0xdd8>
  404196:	4650      	mov	r0, sl
  404198:	4659      	mov	r1, fp
  40419a:	aa25      	add	r2, sp, #148	; 0x94
  40419c:	f002 f862 	bl	406264 <__ssprint_r>
  4041a0:	2800      	cmp	r0, #0
  4041a2:	f040 80a0 	bne.w	4042e6 <_svfprintf_r+0xf16>
  4041a6:	ae32      	add	r6, sp, #200	; 0xc8
  4041a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  4041ac:	2200      	movs	r2, #0
  4041ae:	2300      	movs	r3, #0
  4041b0:	f003 f95e 	bl	407470 <__aeabi_dcmpeq>
  4041b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4041b6:	1e6c      	subs	r4, r5, #1
  4041b8:	b940      	cbnz	r0, 4041cc <_svfprintf_r+0xdfc>
  4041ba:	9d07      	ldr	r5, [sp, #28]
  4041bc:	1c6b      	adds	r3, r5, #1
  4041be:	e886 0018 	stmia.w	r6, {r3, r4}
  4041c2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4041c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4041c6:	3b01      	subs	r3, #1
  4041c8:	4423      	add	r3, r4
  4041ca:	e033      	b.n	404234 <_svfprintf_r+0xe64>
  4041cc:	2c00      	cmp	r4, #0
  4041ce:	dd34      	ble.n	40423a <_svfprintf_r+0xe6a>
  4041d0:	4b23      	ldr	r3, [pc, #140]	; (404260 <_svfprintf_r+0xe90>)
  4041d2:	2c10      	cmp	r4, #16
  4041d4:	6033      	str	r3, [r6, #0]
  4041d6:	dd15      	ble.n	404204 <_svfprintf_r+0xe34>
  4041d8:	2310      	movs	r3, #16
  4041da:	6073      	str	r3, [r6, #4]
  4041dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4041de:	3310      	adds	r3, #16
  4041e0:	9327      	str	r3, [sp, #156]	; 0x9c
  4041e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041e4:	3301      	adds	r3, #1
  4041e6:	2b07      	cmp	r3, #7
  4041e8:	9326      	str	r3, [sp, #152]	; 0x98
  4041ea:	dc01      	bgt.n	4041f0 <_svfprintf_r+0xe20>
  4041ec:	3608      	adds	r6, #8
  4041ee:	e007      	b.n	404200 <_svfprintf_r+0xe30>
  4041f0:	4650      	mov	r0, sl
  4041f2:	4659      	mov	r1, fp
  4041f4:	aa25      	add	r2, sp, #148	; 0x94
  4041f6:	f002 f835 	bl	406264 <__ssprint_r>
  4041fa:	2800      	cmp	r0, #0
  4041fc:	d173      	bne.n	4042e6 <_svfprintf_r+0xf16>
  4041fe:	ae32      	add	r6, sp, #200	; 0xc8
  404200:	3c10      	subs	r4, #16
  404202:	e7e5      	b.n	4041d0 <_svfprintf_r+0xe00>
  404204:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404206:	6074      	str	r4, [r6, #4]
  404208:	441c      	add	r4, r3
  40420a:	9427      	str	r4, [sp, #156]	; 0x9c
  40420c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40420e:	3301      	adds	r3, #1
  404210:	2b07      	cmp	r3, #7
  404212:	9326      	str	r3, [sp, #152]	; 0x98
  404214:	dd10      	ble.n	404238 <_svfprintf_r+0xe68>
  404216:	4650      	mov	r0, sl
  404218:	4659      	mov	r1, fp
  40421a:	aa25      	add	r2, sp, #148	; 0x94
  40421c:	f002 f822 	bl	406264 <__ssprint_r>
  404220:	2800      	cmp	r0, #0
  404222:	d160      	bne.n	4042e6 <_svfprintf_r+0xf16>
  404224:	ae32      	add	r6, sp, #200	; 0xc8
  404226:	e008      	b.n	40423a <_svfprintf_r+0xe6a>
  404228:	2301      	movs	r3, #1
  40422a:	9d07      	ldr	r5, [sp, #28]
  40422c:	6073      	str	r3, [r6, #4]
  40422e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404230:	6035      	str	r5, [r6, #0]
  404232:	3301      	adds	r3, #1
  404234:	9327      	str	r3, [sp, #156]	; 0x9c
  404236:	e7e9      	b.n	40420c <_svfprintf_r+0xe3c>
  404238:	3608      	adds	r6, #8
  40423a:	ab21      	add	r3, sp, #132	; 0x84
  40423c:	6033      	str	r3, [r6, #0]
  40423e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  404240:	e6ac      	b.n	403f9c <_svfprintf_r+0xbcc>
  404242:	3608      	adds	r6, #8
  404244:	077b      	lsls	r3, r7, #29
  404246:	d40d      	bmi.n	404264 <_svfprintf_r+0xe94>
  404248:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40424a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40424c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  40424e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404250:	42a0      	cmp	r0, r4
  404252:	bfac      	ite	ge
  404254:	182d      	addge	r5, r5, r0
  404256:	192d      	addlt	r5, r5, r4
  404258:	950f      	str	r5, [sp, #60]	; 0x3c
  40425a:	2b00      	cmp	r3, #0
  40425c:	d037      	beq.n	4042ce <_svfprintf_r+0xefe>
  40425e:	e030      	b.n	4042c2 <_svfprintf_r+0xef2>
  404260:	00407bb6 	.word	0x00407bb6
  404264:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404266:	980a      	ldr	r0, [sp, #40]	; 0x28
  404268:	1a2c      	subs	r4, r5, r0
  40426a:	2c00      	cmp	r4, #0
  40426c:	ddec      	ble.n	404248 <_svfprintf_r+0xe78>
  40426e:	4b23      	ldr	r3, [pc, #140]	; (4042fc <_svfprintf_r+0xf2c>)
  404270:	2c10      	cmp	r4, #16
  404272:	6033      	str	r3, [r6, #0]
  404274:	dd14      	ble.n	4042a0 <_svfprintf_r+0xed0>
  404276:	2310      	movs	r3, #16
  404278:	6073      	str	r3, [r6, #4]
  40427a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40427c:	3310      	adds	r3, #16
  40427e:	9327      	str	r3, [sp, #156]	; 0x9c
  404280:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404282:	3301      	adds	r3, #1
  404284:	2b07      	cmp	r3, #7
  404286:	9326      	str	r3, [sp, #152]	; 0x98
  404288:	dc01      	bgt.n	40428e <_svfprintf_r+0xebe>
  40428a:	3608      	adds	r6, #8
  40428c:	e006      	b.n	40429c <_svfprintf_r+0xecc>
  40428e:	4650      	mov	r0, sl
  404290:	4659      	mov	r1, fp
  404292:	aa25      	add	r2, sp, #148	; 0x94
  404294:	f001 ffe6 	bl	406264 <__ssprint_r>
  404298:	bb28      	cbnz	r0, 4042e6 <_svfprintf_r+0xf16>
  40429a:	ae32      	add	r6, sp, #200	; 0xc8
  40429c:	3c10      	subs	r4, #16
  40429e:	e7e6      	b.n	40426e <_svfprintf_r+0xe9e>
  4042a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4042a2:	6074      	str	r4, [r6, #4]
  4042a4:	441c      	add	r4, r3
  4042a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4042aa:	3301      	adds	r3, #1
  4042ac:	2b07      	cmp	r3, #7
  4042ae:	9326      	str	r3, [sp, #152]	; 0x98
  4042b0:	ddca      	ble.n	404248 <_svfprintf_r+0xe78>
  4042b2:	4650      	mov	r0, sl
  4042b4:	4659      	mov	r1, fp
  4042b6:	aa25      	add	r2, sp, #148	; 0x94
  4042b8:	f001 ffd4 	bl	406264 <__ssprint_r>
  4042bc:	2800      	cmp	r0, #0
  4042be:	d0c3      	beq.n	404248 <_svfprintf_r+0xe78>
  4042c0:	e011      	b.n	4042e6 <_svfprintf_r+0xf16>
  4042c2:	4650      	mov	r0, sl
  4042c4:	4659      	mov	r1, fp
  4042c6:	aa25      	add	r2, sp, #148	; 0x94
  4042c8:	f001 ffcc 	bl	406264 <__ssprint_r>
  4042cc:	b958      	cbnz	r0, 4042e6 <_svfprintf_r+0xf16>
  4042ce:	2300      	movs	r3, #0
  4042d0:	9326      	str	r3, [sp, #152]	; 0x98
  4042d2:	ae32      	add	r6, sp, #200	; 0xc8
  4042d4:	f7ff b8b1 	b.w	40343a <_svfprintf_r+0x6a>
  4042d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4042da:	b123      	cbz	r3, 4042e6 <_svfprintf_r+0xf16>
  4042dc:	4650      	mov	r0, sl
  4042de:	4659      	mov	r1, fp
  4042e0:	aa25      	add	r2, sp, #148	; 0x94
  4042e2:	f001 ffbf 	bl	406264 <__ssprint_r>
  4042e6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4042ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
  4042ec:	f013 0f40 	tst.w	r3, #64	; 0x40
  4042f0:	bf18      	it	ne
  4042f2:	f04f 30ff 	movne.w	r0, #4294967295
  4042f6:	b043      	add	sp, #268	; 0x10c
  4042f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042fc:	00407ba6 	.word	0x00407ba6

00404300 <register_fini>:
  404300:	4b02      	ldr	r3, [pc, #8]	; (40430c <register_fini+0xc>)
  404302:	b113      	cbz	r3, 40430a <register_fini+0xa>
  404304:	4802      	ldr	r0, [pc, #8]	; (404310 <register_fini+0x10>)
  404306:	f000 b805 	b.w	404314 <atexit>
  40430a:	4770      	bx	lr
  40430c:	00000000 	.word	0x00000000
  404310:	00404fa1 	.word	0x00404fa1

00404314 <atexit>:
  404314:	4601      	mov	r1, r0
  404316:	2000      	movs	r0, #0
  404318:	4602      	mov	r2, r0
  40431a:	4603      	mov	r3, r0
  40431c:	f002 bc0e 	b.w	406b3c <__register_exitproc>

00404320 <quorem>:
  404320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404324:	6903      	ldr	r3, [r0, #16]
  404326:	690c      	ldr	r4, [r1, #16]
  404328:	4680      	mov	r8, r0
  40432a:	42a3      	cmp	r3, r4
  40432c:	f2c0 8083 	blt.w	404436 <quorem+0x116>
  404330:	3c01      	subs	r4, #1
  404332:	00a2      	lsls	r2, r4, #2
  404334:	f101 0714 	add.w	r7, r1, #20
  404338:	f100 0514 	add.w	r5, r0, #20
  40433c:	4691      	mov	r9, r2
  40433e:	9200      	str	r2, [sp, #0]
  404340:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
  404344:	442a      	add	r2, r5
  404346:	9201      	str	r2, [sp, #4]
  404348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  40434c:	3601      	adds	r6, #1
  40434e:	fbb2 f6f6 	udiv	r6, r2, r6
  404352:	44b9      	add	r9, r7
  404354:	2e00      	cmp	r6, #0
  404356:	d03b      	beq.n	4043d0 <quorem+0xb0>
  404358:	f04f 0e00 	mov.w	lr, #0
  40435c:	463a      	mov	r2, r7
  40435e:	4628      	mov	r0, r5
  404360:	46f3      	mov	fp, lr
  404362:	f852 cb04 	ldr.w	ip, [r2], #4
  404366:	6803      	ldr	r3, [r0, #0]
  404368:	fa1f fa8c 	uxth.w	sl, ip
  40436c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  404370:	fb0a ea06 	mla	sl, sl, r6, lr
  404374:	fb0c fc06 	mul.w	ip, ip, r6
  404378:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
  40437c:	fa1f fa8a 	uxth.w	sl, sl
  404380:	ebca 0b0b 	rsb	fp, sl, fp
  404384:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
  404388:	fa1f fa83 	uxth.w	sl, r3
  40438c:	fa1f fc8c 	uxth.w	ip, ip
  404390:	44da      	add	sl, fp
  404392:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
  404396:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
  40439a:	fa1f fa8a 	uxth.w	sl, sl
  40439e:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
  4043a2:	454a      	cmp	r2, r9
  4043a4:	ea4f 4b2c 	mov.w	fp, ip, asr #16
  4043a8:	f840 ab04 	str.w	sl, [r0], #4
  4043ac:	d9d9      	bls.n	404362 <quorem+0x42>
  4043ae:	9a00      	ldr	r2, [sp, #0]
  4043b0:	58ab      	ldr	r3, [r5, r2]
  4043b2:	b96b      	cbnz	r3, 4043d0 <quorem+0xb0>
  4043b4:	9a01      	ldr	r2, [sp, #4]
  4043b6:	1f13      	subs	r3, r2, #4
  4043b8:	42ab      	cmp	r3, r5
  4043ba:	461a      	mov	r2, r3
  4043bc:	d802      	bhi.n	4043c4 <quorem+0xa4>
  4043be:	f8c8 4010 	str.w	r4, [r8, #16]
  4043c2:	e005      	b.n	4043d0 <quorem+0xb0>
  4043c4:	6812      	ldr	r2, [r2, #0]
  4043c6:	3b04      	subs	r3, #4
  4043c8:	2a00      	cmp	r2, #0
  4043ca:	d1f8      	bne.n	4043be <quorem+0x9e>
  4043cc:	3c01      	subs	r4, #1
  4043ce:	e7f3      	b.n	4043b8 <quorem+0x98>
  4043d0:	4640      	mov	r0, r8
  4043d2:	f001 fba2 	bl	405b1a <__mcmp>
  4043d6:	2800      	cmp	r0, #0
  4043d8:	db2b      	blt.n	404432 <quorem+0x112>
  4043da:	3601      	adds	r6, #1
  4043dc:	462b      	mov	r3, r5
  4043de:	2000      	movs	r0, #0
  4043e0:	f857 cb04 	ldr.w	ip, [r7], #4
  4043e4:	681a      	ldr	r2, [r3, #0]
  4043e6:	fa1f f18c 	uxth.w	r1, ip
  4043ea:	1a41      	subs	r1, r0, r1
  4043ec:	fa1f fa82 	uxth.w	sl, r2
  4043f0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  4043f4:	4451      	add	r1, sl
  4043f6:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
  4043fa:	eb02 4221 	add.w	r2, r2, r1, asr #16
  4043fe:	b289      	uxth	r1, r1
  404400:	1410      	asrs	r0, r2, #16
  404402:	454f      	cmp	r7, r9
  404404:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  404408:	f843 2b04 	str.w	r2, [r3], #4
  40440c:	d9e8      	bls.n	4043e0 <quorem+0xc0>
  40440e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  404412:	eb05 0384 	add.w	r3, r5, r4, lsl #2
  404416:	b962      	cbnz	r2, 404432 <quorem+0x112>
  404418:	3b04      	subs	r3, #4
  40441a:	42ab      	cmp	r3, r5
  40441c:	461a      	mov	r2, r3
  40441e:	d802      	bhi.n	404426 <quorem+0x106>
  404420:	f8c8 4010 	str.w	r4, [r8, #16]
  404424:	e005      	b.n	404432 <quorem+0x112>
  404426:	6812      	ldr	r2, [r2, #0]
  404428:	3b04      	subs	r3, #4
  40442a:	2a00      	cmp	r2, #0
  40442c:	d1f8      	bne.n	404420 <quorem+0x100>
  40442e:	3c01      	subs	r4, #1
  404430:	e7f3      	b.n	40441a <quorem+0xfa>
  404432:	4630      	mov	r0, r6
  404434:	e000      	b.n	404438 <quorem+0x118>
  404436:	2000      	movs	r0, #0
  404438:	b003      	add	sp, #12
  40443a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040443e <_dtoa_r>:
  40443e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404442:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404444:	b09b      	sub	sp, #108	; 0x6c
  404446:	4682      	mov	sl, r0
  404448:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40444a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  40444e:	b151      	cbz	r1, 404466 <_dtoa_r+0x28>
  404450:	6c43      	ldr	r3, [r0, #68]	; 0x44
  404452:	2201      	movs	r2, #1
  404454:	604b      	str	r3, [r1, #4]
  404456:	fa02 f303 	lsl.w	r3, r2, r3
  40445a:	608b      	str	r3, [r1, #8]
  40445c:	f001 f958 	bl	405710 <_Bfree>
  404460:	2300      	movs	r3, #0
  404462:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
  404466:	9805      	ldr	r0, [sp, #20]
  404468:	2800      	cmp	r0, #0
  40446a:	da05      	bge.n	404478 <_dtoa_r+0x3a>
  40446c:	2301      	movs	r3, #1
  40446e:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  404472:	6023      	str	r3, [r4, #0]
  404474:	9105      	str	r1, [sp, #20]
  404476:	e001      	b.n	40447c <_dtoa_r+0x3e>
  404478:	2300      	movs	r3, #0
  40447a:	6023      	str	r3, [r4, #0]
  40447c:	9f05      	ldr	r7, [sp, #20]
  40447e:	4a9c      	ldr	r2, [pc, #624]	; (4046f0 <_dtoa_r+0x2b2>)
  404480:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
  404484:	0d1b      	lsrs	r3, r3, #20
  404486:	051b      	lsls	r3, r3, #20
  404488:	4293      	cmp	r3, r2
  40448a:	d11d      	bne.n	4044c8 <_dtoa_r+0x8a>
  40448c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40448e:	f242 730f 	movw	r3, #9999	; 0x270f
  404492:	6013      	str	r3, [r2, #0]
  404494:	9b04      	ldr	r3, [sp, #16]
  404496:	b943      	cbnz	r3, 4044aa <_dtoa_r+0x6c>
  404498:	4b96      	ldr	r3, [pc, #600]	; (4046f4 <_dtoa_r+0x2b6>)
  40449a:	4a97      	ldr	r2, [pc, #604]	; (4046f8 <_dtoa_r+0x2ba>)
  40449c:	f3c7 0013 	ubfx	r0, r7, #0, #20
  4044a0:	2800      	cmp	r0, #0
  4044a2:	bf0c      	ite	eq
  4044a4:	4610      	moveq	r0, r2
  4044a6:	4618      	movne	r0, r3
  4044a8:	e000      	b.n	4044ac <_dtoa_r+0x6e>
  4044aa:	4892      	ldr	r0, [pc, #584]	; (4046f4 <_dtoa_r+0x2b6>)
  4044ac:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  4044ae:	2f00      	cmp	r7, #0
  4044b0:	f000 856f 	beq.w	404f92 <_dtoa_r+0xb54>
  4044b4:	78c3      	ldrb	r3, [r0, #3]
  4044b6:	b113      	cbz	r3, 4044be <_dtoa_r+0x80>
  4044b8:	f100 0308 	add.w	r3, r0, #8
  4044bc:	e000      	b.n	4044c0 <_dtoa_r+0x82>
  4044be:	1cc3      	adds	r3, r0, #3
  4044c0:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  4044c2:	603b      	str	r3, [r7, #0]
  4044c4:	f000 bd65 	b.w	404f92 <_dtoa_r+0xb54>
  4044c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4044cc:	2200      	movs	r2, #0
  4044ce:	4620      	mov	r0, r4
  4044d0:	4629      	mov	r1, r5
  4044d2:	2300      	movs	r3, #0
  4044d4:	f002 ffcc 	bl	407470 <__aeabi_dcmpeq>
  4044d8:	4680      	mov	r8, r0
  4044da:	b158      	cbz	r0, 4044f4 <_dtoa_r+0xb6>
  4044dc:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4044de:	2301      	movs	r3, #1
  4044e0:	603b      	str	r3, [r7, #0]
  4044e2:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  4044e4:	2f00      	cmp	r7, #0
  4044e6:	f000 8551 	beq.w	404f8c <_dtoa_r+0xb4e>
  4044ea:	4884      	ldr	r0, [pc, #528]	; (4046fc <_dtoa_r+0x2be>)
  4044ec:	6038      	str	r0, [r7, #0]
  4044ee:	3801      	subs	r0, #1
  4044f0:	f000 bd4f 	b.w	404f92 <_dtoa_r+0xb54>
  4044f4:	ab19      	add	r3, sp, #100	; 0x64
  4044f6:	9300      	str	r3, [sp, #0]
  4044f8:	ab18      	add	r3, sp, #96	; 0x60
  4044fa:	9301      	str	r3, [sp, #4]
  4044fc:	4650      	mov	r0, sl
  4044fe:	4622      	mov	r2, r4
  404500:	462b      	mov	r3, r5
  404502:	f001 fbfa 	bl	405cfa <__d2b>
  404506:	f3c7 560a 	ubfx	r6, r7, #20, #11
  40450a:	4683      	mov	fp, r0
  40450c:	b15e      	cbz	r6, 404526 <_dtoa_r+0xe8>
  40450e:	f3c5 0313 	ubfx	r3, r5, #0, #20
  404512:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404516:	4620      	mov	r0, r4
  404518:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40451c:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  404520:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  404524:	e01c      	b.n	404560 <_dtoa_r+0x122>
  404526:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404528:	9e18      	ldr	r6, [sp, #96]	; 0x60
  40452a:	441e      	add	r6, r3
  40452c:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  404530:	429e      	cmp	r6, r3
  404532:	db09      	blt.n	404548 <_dtoa_r+0x10a>
  404534:	9904      	ldr	r1, [sp, #16]
  404536:	331f      	adds	r3, #31
  404538:	f206 4012 	addw	r0, r6, #1042	; 0x412
  40453c:	1b9b      	subs	r3, r3, r6
  40453e:	fa21 f000 	lsr.w	r0, r1, r0
  404542:	409f      	lsls	r7, r3
  404544:	4338      	orrs	r0, r7
  404546:	e004      	b.n	404552 <_dtoa_r+0x114>
  404548:	486d      	ldr	r0, [pc, #436]	; (404700 <_dtoa_r+0x2c2>)
  40454a:	9a04      	ldr	r2, [sp, #16]
  40454c:	1b80      	subs	r0, r0, r6
  40454e:	fa02 f000 	lsl.w	r0, r2, r0
  404552:	f002 fcaf 	bl	406eb4 <__aeabi_ui2d>
  404556:	2701      	movs	r7, #1
  404558:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  40455c:	3e01      	subs	r6, #1
  40455e:	9715      	str	r7, [sp, #84]	; 0x54
  404560:	2200      	movs	r2, #0
  404562:	4b68      	ldr	r3, [pc, #416]	; (404704 <_dtoa_r+0x2c6>)
  404564:	f002 fb68 	bl	406c38 <__aeabi_dsub>
  404568:	a35b      	add	r3, pc, #364	; (adr r3, 4046d8 <_dtoa_r+0x29a>)
  40456a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40456e:	f002 fd17 	bl	406fa0 <__aeabi_dmul>
  404572:	a35b      	add	r3, pc, #364	; (adr r3, 4046e0 <_dtoa_r+0x2a2>)
  404574:	e9d3 2300 	ldrd	r2, r3, [r3]
  404578:	f002 fb60 	bl	406c3c <__adddf3>
  40457c:	4604      	mov	r4, r0
  40457e:	4630      	mov	r0, r6
  404580:	460d      	mov	r5, r1
  404582:	f002 fca7 	bl	406ed4 <__aeabi_i2d>
  404586:	a358      	add	r3, pc, #352	; (adr r3, 4046e8 <_dtoa_r+0x2aa>)
  404588:	e9d3 2300 	ldrd	r2, r3, [r3]
  40458c:	f002 fd08 	bl	406fa0 <__aeabi_dmul>
  404590:	4602      	mov	r2, r0
  404592:	460b      	mov	r3, r1
  404594:	4620      	mov	r0, r4
  404596:	4629      	mov	r1, r5
  404598:	f002 fb50 	bl	406c3c <__adddf3>
  40459c:	4604      	mov	r4, r0
  40459e:	460d      	mov	r5, r1
  4045a0:	f002 ff98 	bl	4074d4 <__aeabi_d2iz>
  4045a4:	4629      	mov	r1, r5
  4045a6:	4681      	mov	r9, r0
  4045a8:	2200      	movs	r2, #0
  4045aa:	4620      	mov	r0, r4
  4045ac:	2300      	movs	r3, #0
  4045ae:	f002 ff69 	bl	407484 <__aeabi_dcmplt>
  4045b2:	b158      	cbz	r0, 4045cc <_dtoa_r+0x18e>
  4045b4:	4648      	mov	r0, r9
  4045b6:	f002 fc8d 	bl	406ed4 <__aeabi_i2d>
  4045ba:	4602      	mov	r2, r0
  4045bc:	460b      	mov	r3, r1
  4045be:	4620      	mov	r0, r4
  4045c0:	4629      	mov	r1, r5
  4045c2:	f002 ff55 	bl	407470 <__aeabi_dcmpeq>
  4045c6:	b908      	cbnz	r0, 4045cc <_dtoa_r+0x18e>
  4045c8:	f109 39ff 	add.w	r9, r9, #4294967295
  4045cc:	f1b9 0f16 	cmp.w	r9, #22
  4045d0:	d80d      	bhi.n	4045ee <_dtoa_r+0x1b0>
  4045d2:	4b4d      	ldr	r3, [pc, #308]	; (404708 <_dtoa_r+0x2ca>)
  4045d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  4045d8:	e9d3 0100 	ldrd	r0, r1, [r3]
  4045dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4045e0:	f002 ff6e 	bl	4074c0 <__aeabi_dcmpgt>
  4045e4:	b130      	cbz	r0, 4045f4 <_dtoa_r+0x1b6>
  4045e6:	f109 39ff 	add.w	r9, r9, #4294967295
  4045ea:	2700      	movs	r7, #0
  4045ec:	e000      	b.n	4045f0 <_dtoa_r+0x1b2>
  4045ee:	2701      	movs	r7, #1
  4045f0:	9714      	str	r7, [sp, #80]	; 0x50
  4045f2:	e000      	b.n	4045f6 <_dtoa_r+0x1b8>
  4045f4:	9014      	str	r0, [sp, #80]	; 0x50
  4045f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4045f8:	1b9e      	subs	r6, r3, r6
  4045fa:	3e01      	subs	r6, #1
  4045fc:	960a      	str	r6, [sp, #40]	; 0x28
  4045fe:	d504      	bpl.n	40460a <_dtoa_r+0x1cc>
  404600:	4277      	negs	r7, r6
  404602:	9708      	str	r7, [sp, #32]
  404604:	2700      	movs	r7, #0
  404606:	970a      	str	r7, [sp, #40]	; 0x28
  404608:	e001      	b.n	40460e <_dtoa_r+0x1d0>
  40460a:	2700      	movs	r7, #0
  40460c:	9708      	str	r7, [sp, #32]
  40460e:	f1b9 0f00 	cmp.w	r9, #0
  404612:	db07      	blt.n	404624 <_dtoa_r+0x1e6>
  404614:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404616:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  40461a:	444f      	add	r7, r9
  40461c:	970a      	str	r7, [sp, #40]	; 0x28
  40461e:	2700      	movs	r7, #0
  404620:	970e      	str	r7, [sp, #56]	; 0x38
  404622:	e008      	b.n	404636 <_dtoa_r+0x1f8>
  404624:	9f08      	ldr	r7, [sp, #32]
  404626:	ebc9 0707 	rsb	r7, r9, r7
  40462a:	9708      	str	r7, [sp, #32]
  40462c:	f1c9 0700 	rsb	r7, r9, #0
  404630:	970e      	str	r7, [sp, #56]	; 0x38
  404632:	2700      	movs	r7, #0
  404634:	9711      	str	r7, [sp, #68]	; 0x44
  404636:	9f24      	ldr	r7, [sp, #144]	; 0x90
  404638:	2f09      	cmp	r7, #9
  40463a:	d829      	bhi.n	404690 <_dtoa_r+0x252>
  40463c:	2f05      	cmp	r7, #5
  40463e:	bfc4      	itt	gt
  404640:	3f04      	subgt	r7, #4
  404642:	9724      	strgt	r7, [sp, #144]	; 0x90
  404644:	9f24      	ldr	r7, [sp, #144]	; 0x90
  404646:	bfc8      	it	gt
  404648:	2400      	movgt	r4, #0
  40464a:	f1a7 0302 	sub.w	r3, r7, #2
  40464e:	bfd8      	it	le
  404650:	2401      	movle	r4, #1
  404652:	2b03      	cmp	r3, #3
  404654:	d821      	bhi.n	40469a <_dtoa_r+0x25c>
  404656:	e8df f003 	tbb	[pc, r3]
  40465a:	0f06      	.short	0x0f06
  40465c:	0402      	.short	0x0402
  40465e:	2701      	movs	r7, #1
  404660:	e002      	b.n	404668 <_dtoa_r+0x22a>
  404662:	2701      	movs	r7, #1
  404664:	e009      	b.n	40467a <_dtoa_r+0x23c>
  404666:	2700      	movs	r7, #0
  404668:	970f      	str	r7, [sp, #60]	; 0x3c
  40466a:	9f25      	ldr	r7, [sp, #148]	; 0x94
  40466c:	2f00      	cmp	r7, #0
  40466e:	dd1e      	ble.n	4046ae <_dtoa_r+0x270>
  404670:	970b      	str	r7, [sp, #44]	; 0x2c
  404672:	9707      	str	r7, [sp, #28]
  404674:	463b      	mov	r3, r7
  404676:	e01f      	b.n	4046b8 <_dtoa_r+0x27a>
  404678:	2700      	movs	r7, #0
  40467a:	970f      	str	r7, [sp, #60]	; 0x3c
  40467c:	9f25      	ldr	r7, [sp, #148]	; 0x94
  40467e:	444f      	add	r7, r9
  404680:	970b      	str	r7, [sp, #44]	; 0x2c
  404682:	3701      	adds	r7, #1
  404684:	463b      	mov	r3, r7
  404686:	9707      	str	r7, [sp, #28]
  404688:	2b01      	cmp	r3, #1
  40468a:	bfb8      	it	lt
  40468c:	2301      	movlt	r3, #1
  40468e:	e013      	b.n	4046b8 <_dtoa_r+0x27a>
  404690:	2401      	movs	r4, #1
  404692:	2700      	movs	r7, #0
  404694:	9724      	str	r7, [sp, #144]	; 0x90
  404696:	940f      	str	r4, [sp, #60]	; 0x3c
  404698:	e001      	b.n	40469e <_dtoa_r+0x260>
  40469a:	2701      	movs	r7, #1
  40469c:	970f      	str	r7, [sp, #60]	; 0x3c
  40469e:	f04f 37ff 	mov.w	r7, #4294967295
  4046a2:	970b      	str	r7, [sp, #44]	; 0x2c
  4046a4:	9707      	str	r7, [sp, #28]
  4046a6:	2700      	movs	r7, #0
  4046a8:	2312      	movs	r3, #18
  4046aa:	9725      	str	r7, [sp, #148]	; 0x94
  4046ac:	e004      	b.n	4046b8 <_dtoa_r+0x27a>
  4046ae:	2701      	movs	r7, #1
  4046b0:	970b      	str	r7, [sp, #44]	; 0x2c
  4046b2:	9707      	str	r7, [sp, #28]
  4046b4:	463b      	mov	r3, r7
  4046b6:	9725      	str	r7, [sp, #148]	; 0x94
  4046b8:	2200      	movs	r2, #0
  4046ba:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
  4046be:	2204      	movs	r2, #4
  4046c0:	f102 0114 	add.w	r1, r2, #20
  4046c4:	4299      	cmp	r1, r3
  4046c6:	d821      	bhi.n	40470c <_dtoa_r+0x2ce>
  4046c8:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  4046cc:	0052      	lsls	r2, r2, #1
  4046ce:	3101      	adds	r1, #1
  4046d0:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
  4046d4:	e7f4      	b.n	4046c0 <_dtoa_r+0x282>
  4046d6:	bf00      	nop
  4046d8:	636f4361 	.word	0x636f4361
  4046dc:	3fd287a7 	.word	0x3fd287a7
  4046e0:	8b60c8b3 	.word	0x8b60c8b3
  4046e4:	3fc68a28 	.word	0x3fc68a28
  4046e8:	509f79fb 	.word	0x509f79fb
  4046ec:	3fd34413 	.word	0x3fd34413
  4046f0:	7ff00000 	.word	0x7ff00000
  4046f4:	00407d04 	.word	0x00407d04
  4046f8:	00407cfb 	.word	0x00407cfb
  4046fc:	00407bf9 	.word	0x00407bf9
  404700:	fffffbee 	.word	0xfffffbee
  404704:	3ff80000 	.word	0x3ff80000
  404708:	00407d20 	.word	0x00407d20
  40470c:	4650      	mov	r0, sl
  40470e:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  404712:	f000 ffd7 	bl	4056c4 <_Balloc>
  404716:	9f07      	ldr	r7, [sp, #28]
  404718:	9009      	str	r0, [sp, #36]	; 0x24
  40471a:	2f0e      	cmp	r7, #14
  40471c:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
  404720:	f200 816a 	bhi.w	4049f8 <_dtoa_r+0x5ba>
  404724:	2c00      	cmp	r4, #0
  404726:	f000 8167 	beq.w	4049f8 <_dtoa_r+0x5ba>
  40472a:	f1b9 0f00 	cmp.w	r9, #0
  40472e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404732:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  404736:	dd31      	ble.n	40479c <_dtoa_r+0x35e>
  404738:	4a80      	ldr	r2, [pc, #512]	; (40493c <_dtoa_r+0x4fe>)
  40473a:	f009 030f 	and.w	r3, r9, #15
  40473e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404742:	ea4f 1429 	mov.w	r4, r9, asr #4
  404746:	e9d3 0100 	ldrd	r0, r1, [r3]
  40474a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40474e:	06e0      	lsls	r0, r4, #27
  404750:	d50c      	bpl.n	40476c <_dtoa_r+0x32e>
  404752:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404756:	4b7a      	ldr	r3, [pc, #488]	; (404940 <_dtoa_r+0x502>)
  404758:	f004 040f 	and.w	r4, r4, #15
  40475c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  404760:	f002 fd48 	bl	4071f4 <__aeabi_ddiv>
  404764:	2703      	movs	r7, #3
  404766:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40476a:	e000      	b.n	40476e <_dtoa_r+0x330>
  40476c:	2702      	movs	r7, #2
  40476e:	4d74      	ldr	r5, [pc, #464]	; (404940 <_dtoa_r+0x502>)
  404770:	b16c      	cbz	r4, 40478e <_dtoa_r+0x350>
  404772:	07e1      	lsls	r1, r4, #31
  404774:	d508      	bpl.n	404788 <_dtoa_r+0x34a>
  404776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  40477a:	e9d5 2300 	ldrd	r2, r3, [r5]
  40477e:	f002 fc0f 	bl	406fa0 <__aeabi_dmul>
  404782:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  404786:	3701      	adds	r7, #1
  404788:	1064      	asrs	r4, r4, #1
  40478a:	3508      	adds	r5, #8
  40478c:	e7f0      	b.n	404770 <_dtoa_r+0x332>
  40478e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404792:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  404796:	f002 fd2d 	bl	4071f4 <__aeabi_ddiv>
  40479a:	e01b      	b.n	4047d4 <_dtoa_r+0x396>
  40479c:	f1c9 0400 	rsb	r4, r9, #0
  4047a0:	b1dc      	cbz	r4, 4047da <_dtoa_r+0x39c>
  4047a2:	4b66      	ldr	r3, [pc, #408]	; (40493c <_dtoa_r+0x4fe>)
  4047a4:	f004 020f 	and.w	r2, r4, #15
  4047a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4047ac:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4047b4:	f002 fbf4 	bl	406fa0 <__aeabi_dmul>
  4047b8:	4d61      	ldr	r5, [pc, #388]	; (404940 <_dtoa_r+0x502>)
  4047ba:	1124      	asrs	r4, r4, #4
  4047bc:	2702      	movs	r7, #2
  4047be:	b14c      	cbz	r4, 4047d4 <_dtoa_r+0x396>
  4047c0:	07e2      	lsls	r2, r4, #31
  4047c2:	d504      	bpl.n	4047ce <_dtoa_r+0x390>
  4047c4:	e9d5 2300 	ldrd	r2, r3, [r5]
  4047c8:	3701      	adds	r7, #1
  4047ca:	f002 fbe9 	bl	406fa0 <__aeabi_dmul>
  4047ce:	1064      	asrs	r4, r4, #1
  4047d0:	3508      	adds	r5, #8
  4047d2:	e7f4      	b.n	4047be <_dtoa_r+0x380>
  4047d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4047d8:	e000      	b.n	4047dc <_dtoa_r+0x39e>
  4047da:	2702      	movs	r7, #2
  4047dc:	9914      	ldr	r1, [sp, #80]	; 0x50
  4047de:	b1e9      	cbz	r1, 40481c <_dtoa_r+0x3de>
  4047e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  4047e4:	2200      	movs	r2, #0
  4047e6:	4620      	mov	r0, r4
  4047e8:	4629      	mov	r1, r5
  4047ea:	4b56      	ldr	r3, [pc, #344]	; (404944 <_dtoa_r+0x506>)
  4047ec:	f002 fe4a 	bl	407484 <__aeabi_dcmplt>
  4047f0:	b1c8      	cbz	r0, 404826 <_dtoa_r+0x3e8>
  4047f2:	9a07      	ldr	r2, [sp, #28]
  4047f4:	b1e2      	cbz	r2, 404830 <_dtoa_r+0x3f2>
  4047f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4047f8:	2b00      	cmp	r3, #0
  4047fa:	f340 80f9 	ble.w	4049f0 <_dtoa_r+0x5b2>
  4047fe:	f109 30ff 	add.w	r0, r9, #4294967295
  404802:	9010      	str	r0, [sp, #64]	; 0x40
  404804:	4629      	mov	r1, r5
  404806:	4620      	mov	r0, r4
  404808:	2200      	movs	r2, #0
  40480a:	4b4f      	ldr	r3, [pc, #316]	; (404948 <_dtoa_r+0x50a>)
  40480c:	f002 fbc8 	bl	406fa0 <__aeabi_dmul>
  404810:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404814:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404816:	3701      	adds	r7, #1
  404818:	910c      	str	r1, [sp, #48]	; 0x30
  40481a:	e00d      	b.n	404838 <_dtoa_r+0x3fa>
  40481c:	9a07      	ldr	r2, [sp, #28]
  40481e:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  404822:	920c      	str	r2, [sp, #48]	; 0x30
  404824:	e008      	b.n	404838 <_dtoa_r+0x3fa>
  404826:	9b07      	ldr	r3, [sp, #28]
  404828:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  40482c:	930c      	str	r3, [sp, #48]	; 0x30
  40482e:	e003      	b.n	404838 <_dtoa_r+0x3fa>
  404830:	9807      	ldr	r0, [sp, #28]
  404832:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  404836:	900c      	str	r0, [sp, #48]	; 0x30
  404838:	4638      	mov	r0, r7
  40483a:	f002 fb4b 	bl	406ed4 <__aeabi_i2d>
  40483e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404842:	f002 fbad 	bl	406fa0 <__aeabi_dmul>
  404846:	2200      	movs	r2, #0
  404848:	4b40      	ldr	r3, [pc, #256]	; (40494c <_dtoa_r+0x50e>)
  40484a:	f002 f9f7 	bl	406c3c <__adddf3>
  40484e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404850:	4604      	mov	r4, r0
  404852:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  404856:	b9cf      	cbnz	r7, 40488c <_dtoa_r+0x44e>
  404858:	2200      	movs	r2, #0
  40485a:	4b3d      	ldr	r3, [pc, #244]	; (404950 <_dtoa_r+0x512>)
  40485c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404860:	f002 f9ea 	bl	406c38 <__aeabi_dsub>
  404864:	4622      	mov	r2, r4
  404866:	462b      	mov	r3, r5
  404868:	4606      	mov	r6, r0
  40486a:	460f      	mov	r7, r1
  40486c:	f002 fe28 	bl	4074c0 <__aeabi_dcmpgt>
  404870:	2800      	cmp	r0, #0
  404872:	f040 8252 	bne.w	404d1a <_dtoa_r+0x8dc>
  404876:	4622      	mov	r2, r4
  404878:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  40487c:	4630      	mov	r0, r6
  40487e:	4639      	mov	r1, r7
  404880:	f002 fe00 	bl	407484 <__aeabi_dcmplt>
  404884:	2800      	cmp	r0, #0
  404886:	f040 823e 	bne.w	404d06 <_dtoa_r+0x8c8>
  40488a:	e0b1      	b.n	4049f0 <_dtoa_r+0x5b2>
  40488c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40488e:	4b2b      	ldr	r3, [pc, #172]	; (40493c <_dtoa_r+0x4fe>)
  404890:	1e7a      	subs	r2, r7, #1
  404892:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  404894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404898:	2f00      	cmp	r7, #0
  40489a:	d05d      	beq.n	404958 <_dtoa_r+0x51a>
  40489c:	e9d3 2300 	ldrd	r2, r3, [r3]
  4048a0:	2000      	movs	r0, #0
  4048a2:	492c      	ldr	r1, [pc, #176]	; (404954 <_dtoa_r+0x516>)
  4048a4:	f002 fca6 	bl	4071f4 <__aeabi_ddiv>
  4048a8:	4622      	mov	r2, r4
  4048aa:	462b      	mov	r3, r5
  4048ac:	f002 f9c4 	bl	406c38 <__aeabi_dsub>
  4048b0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  4048b4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  4048b8:	4604      	mov	r4, r0
  4048ba:	460d      	mov	r5, r1
  4048bc:	4639      	mov	r1, r7
  4048be:	4630      	mov	r0, r6
  4048c0:	f002 fe08 	bl	4074d4 <__aeabi_d2iz>
  4048c4:	9002      	str	r0, [sp, #8]
  4048c6:	f002 fb05 	bl	406ed4 <__aeabi_i2d>
  4048ca:	4602      	mov	r2, r0
  4048cc:	460b      	mov	r3, r1
  4048ce:	4630      	mov	r0, r6
  4048d0:	4639      	mov	r1, r7
  4048d2:	f002 f9b1 	bl	406c38 <__aeabi_dsub>
  4048d6:	f8dd c008 	ldr.w	ip, [sp, #8]
  4048da:	4622      	mov	r2, r4
  4048dc:	f10c 0330 	add.w	r3, ip, #48	; 0x30
  4048e0:	f808 3b01 	strb.w	r3, [r8], #1
  4048e4:	462b      	mov	r3, r5
  4048e6:	4606      	mov	r6, r0
  4048e8:	460f      	mov	r7, r1
  4048ea:	f002 fdcb 	bl	407484 <__aeabi_dcmplt>
  4048ee:	2800      	cmp	r0, #0
  4048f0:	f040 833a 	bne.w	404f68 <_dtoa_r+0xb2a>
  4048f4:	4632      	mov	r2, r6
  4048f6:	463b      	mov	r3, r7
  4048f8:	2000      	movs	r0, #0
  4048fa:	4912      	ldr	r1, [pc, #72]	; (404944 <_dtoa_r+0x506>)
  4048fc:	f002 f99c 	bl	406c38 <__aeabi_dsub>
  404900:	4622      	mov	r2, r4
  404902:	462b      	mov	r3, r5
  404904:	f002 fdbe 	bl	407484 <__aeabi_dcmplt>
  404908:	2800      	cmp	r0, #0
  40490a:	f040 80d4 	bne.w	404ab6 <_dtoa_r+0x678>
  40490e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404910:	990c      	ldr	r1, [sp, #48]	; 0x30
  404912:	ebc0 0308 	rsb	r3, r0, r8
  404916:	428b      	cmp	r3, r1
  404918:	da6a      	bge.n	4049f0 <_dtoa_r+0x5b2>
  40491a:	4620      	mov	r0, r4
  40491c:	4629      	mov	r1, r5
  40491e:	2200      	movs	r2, #0
  404920:	4b09      	ldr	r3, [pc, #36]	; (404948 <_dtoa_r+0x50a>)
  404922:	f002 fb3d 	bl	406fa0 <__aeabi_dmul>
  404926:	2200      	movs	r2, #0
  404928:	4604      	mov	r4, r0
  40492a:	460d      	mov	r5, r1
  40492c:	4630      	mov	r0, r6
  40492e:	4639      	mov	r1, r7
  404930:	4b05      	ldr	r3, [pc, #20]	; (404948 <_dtoa_r+0x50a>)
  404932:	f002 fb35 	bl	406fa0 <__aeabi_dmul>
  404936:	4606      	mov	r6, r0
  404938:	460f      	mov	r7, r1
  40493a:	e7bf      	b.n	4048bc <_dtoa_r+0x47e>
  40493c:	00407d20 	.word	0x00407d20
  404940:	00407e10 	.word	0x00407e10
  404944:	3ff00000 	.word	0x3ff00000
  404948:	40240000 	.word	0x40240000
  40494c:	401c0000 	.word	0x401c0000
  404950:	40140000 	.word	0x40140000
  404954:	3fe00000 	.word	0x3fe00000
  404958:	4622      	mov	r2, r4
  40495a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40495e:	462b      	mov	r3, r5
  404960:	f002 fb1e 	bl	406fa0 <__aeabi_dmul>
  404964:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  404968:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  40496c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40496e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404972:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404974:	4490      	add	r8, r2
  404976:	4639      	mov	r1, r7
  404978:	4630      	mov	r0, r6
  40497a:	f002 fdab 	bl	4074d4 <__aeabi_d2iz>
  40497e:	4605      	mov	r5, r0
  404980:	f002 faa8 	bl	406ed4 <__aeabi_i2d>
  404984:	4602      	mov	r2, r0
  404986:	460b      	mov	r3, r1
  404988:	4630      	mov	r0, r6
  40498a:	4639      	mov	r1, r7
  40498c:	f002 f954 	bl	406c38 <__aeabi_dsub>
  404990:	3530      	adds	r5, #48	; 0x30
  404992:	f804 5b01 	strb.w	r5, [r4], #1
  404996:	4544      	cmp	r4, r8
  404998:	4606      	mov	r6, r0
  40499a:	460f      	mov	r7, r1
  40499c:	d121      	bne.n	4049e2 <_dtoa_r+0x5a4>
  40499e:	2200      	movs	r2, #0
  4049a0:	4b87      	ldr	r3, [pc, #540]	; (404bc0 <_dtoa_r+0x782>)
  4049a2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4049a6:	f002 f949 	bl	406c3c <__adddf3>
  4049aa:	4602      	mov	r2, r0
  4049ac:	460b      	mov	r3, r1
  4049ae:	4630      	mov	r0, r6
  4049b0:	4639      	mov	r1, r7
  4049b2:	f002 fd85 	bl	4074c0 <__aeabi_dcmpgt>
  4049b6:	2800      	cmp	r0, #0
  4049b8:	d17d      	bne.n	404ab6 <_dtoa_r+0x678>
  4049ba:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4049be:	2000      	movs	r0, #0
  4049c0:	497f      	ldr	r1, [pc, #508]	; (404bc0 <_dtoa_r+0x782>)
  4049c2:	f002 f939 	bl	406c38 <__aeabi_dsub>
  4049c6:	4602      	mov	r2, r0
  4049c8:	460b      	mov	r3, r1
  4049ca:	4630      	mov	r0, r6
  4049cc:	4639      	mov	r1, r7
  4049ce:	f002 fd59 	bl	407484 <__aeabi_dcmplt>
  4049d2:	b168      	cbz	r0, 4049f0 <_dtoa_r+0x5b2>
  4049d4:	46a0      	mov	r8, r4
  4049d6:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  4049da:	3c01      	subs	r4, #1
  4049dc:	2b30      	cmp	r3, #48	; 0x30
  4049de:	d0f9      	beq.n	4049d4 <_dtoa_r+0x596>
  4049e0:	e2c2      	b.n	404f68 <_dtoa_r+0xb2a>
  4049e2:	2200      	movs	r2, #0
  4049e4:	4b77      	ldr	r3, [pc, #476]	; (404bc4 <_dtoa_r+0x786>)
  4049e6:	f002 fadb 	bl	406fa0 <__aeabi_dmul>
  4049ea:	4606      	mov	r6, r0
  4049ec:	460f      	mov	r7, r1
  4049ee:	e7c2      	b.n	404976 <_dtoa_r+0x538>
  4049f0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4049f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4049f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4049fa:	2b00      	cmp	r3, #0
  4049fc:	db7c      	blt.n	404af8 <_dtoa_r+0x6ba>
  4049fe:	f1b9 0f0e 	cmp.w	r9, #14
  404a02:	dc79      	bgt.n	404af8 <_dtoa_r+0x6ba>
  404a04:	4b70      	ldr	r3, [pc, #448]	; (404bc8 <_dtoa_r+0x78a>)
  404a06:	9f25      	ldr	r7, [sp, #148]	; 0x94
  404a08:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  404a0c:	2f00      	cmp	r7, #0
  404a0e:	e9d3 4500 	ldrd	r4, r5, [r3]
  404a12:	da14      	bge.n	404a3e <_dtoa_r+0x600>
  404a14:	9f07      	ldr	r7, [sp, #28]
  404a16:	2f00      	cmp	r7, #0
  404a18:	dc11      	bgt.n	404a3e <_dtoa_r+0x600>
  404a1a:	f040 8176 	bne.w	404d0a <_dtoa_r+0x8cc>
  404a1e:	4620      	mov	r0, r4
  404a20:	4629      	mov	r1, r5
  404a22:	2200      	movs	r2, #0
  404a24:	4b69      	ldr	r3, [pc, #420]	; (404bcc <_dtoa_r+0x78e>)
  404a26:	f002 fabb 	bl	406fa0 <__aeabi_dmul>
  404a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404a2e:	f002 fd3d 	bl	4074ac <__aeabi_dcmpge>
  404a32:	9d07      	ldr	r5, [sp, #28]
  404a34:	462c      	mov	r4, r5
  404a36:	2800      	cmp	r0, #0
  404a38:	f040 8169 	bne.w	404d0e <_dtoa_r+0x8d0>
  404a3c:	e171      	b.n	404d22 <_dtoa_r+0x8e4>
  404a3e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404a42:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  404a46:	4622      	mov	r2, r4
  404a48:	462b      	mov	r3, r5
  404a4a:	4630      	mov	r0, r6
  404a4c:	4639      	mov	r1, r7
  404a4e:	f002 fbd1 	bl	4071f4 <__aeabi_ddiv>
  404a52:	f002 fd3f 	bl	4074d4 <__aeabi_d2iz>
  404a56:	9004      	str	r0, [sp, #16]
  404a58:	f002 fa3c 	bl	406ed4 <__aeabi_i2d>
  404a5c:	4622      	mov	r2, r4
  404a5e:	462b      	mov	r3, r5
  404a60:	f002 fa9e 	bl	406fa0 <__aeabi_dmul>
  404a64:	4602      	mov	r2, r0
  404a66:	460b      	mov	r3, r1
  404a68:	4630      	mov	r0, r6
  404a6a:	4639      	mov	r1, r7
  404a6c:	f002 f8e4 	bl	406c38 <__aeabi_dsub>
  404a70:	9f04      	ldr	r7, [sp, #16]
  404a72:	4602      	mov	r2, r0
  404a74:	f107 0630 	add.w	r6, r7, #48	; 0x30
  404a78:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404a7a:	f808 6b01 	strb.w	r6, [r8], #1
  404a7e:	ebc7 0608 	rsb	r6, r7, r8
  404a82:	9f07      	ldr	r7, [sp, #28]
  404a84:	460b      	mov	r3, r1
  404a86:	42be      	cmp	r6, r7
  404a88:	d129      	bne.n	404ade <_dtoa_r+0x6a0>
  404a8a:	f002 f8d7 	bl	406c3c <__adddf3>
  404a8e:	4622      	mov	r2, r4
  404a90:	462b      	mov	r3, r5
  404a92:	4606      	mov	r6, r0
  404a94:	460f      	mov	r7, r1
  404a96:	f002 fd13 	bl	4074c0 <__aeabi_dcmpgt>
  404a9a:	b970      	cbnz	r0, 404aba <_dtoa_r+0x67c>
  404a9c:	4630      	mov	r0, r6
  404a9e:	4639      	mov	r1, r7
  404aa0:	4622      	mov	r2, r4
  404aa2:	462b      	mov	r3, r5
  404aa4:	f002 fce4 	bl	407470 <__aeabi_dcmpeq>
  404aa8:	2800      	cmp	r0, #0
  404aaa:	f000 825f 	beq.w	404f6c <_dtoa_r+0xb2e>
  404aae:	9f04      	ldr	r7, [sp, #16]
  404ab0:	07fb      	lsls	r3, r7, #31
  404ab2:	d402      	bmi.n	404aba <_dtoa_r+0x67c>
  404ab4:	e25a      	b.n	404f6c <_dtoa_r+0xb2e>
  404ab6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  404aba:	4643      	mov	r3, r8
  404abc:	4698      	mov	r8, r3
  404abe:	f818 2c01 	ldrb.w	r2, [r8, #-1]
  404ac2:	3b01      	subs	r3, #1
  404ac4:	2a39      	cmp	r2, #57	; 0x39
  404ac6:	d106      	bne.n	404ad6 <_dtoa_r+0x698>
  404ac8:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404aca:	429f      	cmp	r7, r3
  404acc:	d1f6      	bne.n	404abc <_dtoa_r+0x67e>
  404ace:	2230      	movs	r2, #48	; 0x30
  404ad0:	f109 0901 	add.w	r9, r9, #1
  404ad4:	703a      	strb	r2, [r7, #0]
  404ad6:	781a      	ldrb	r2, [r3, #0]
  404ad8:	3201      	adds	r2, #1
  404ada:	701a      	strb	r2, [r3, #0]
  404adc:	e246      	b.n	404f6c <_dtoa_r+0xb2e>
  404ade:	2200      	movs	r2, #0
  404ae0:	4b38      	ldr	r3, [pc, #224]	; (404bc4 <_dtoa_r+0x786>)
  404ae2:	f002 fa5d 	bl	406fa0 <__aeabi_dmul>
  404ae6:	2200      	movs	r2, #0
  404ae8:	2300      	movs	r3, #0
  404aea:	4606      	mov	r6, r0
  404aec:	460f      	mov	r7, r1
  404aee:	f002 fcbf 	bl	407470 <__aeabi_dcmpeq>
  404af2:	2800      	cmp	r0, #0
  404af4:	d0a7      	beq.n	404a46 <_dtoa_r+0x608>
  404af6:	e239      	b.n	404f6c <_dtoa_r+0xb2e>
  404af8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  404afa:	2f00      	cmp	r7, #0
  404afc:	d030      	beq.n	404b60 <_dtoa_r+0x722>
  404afe:	9f24      	ldr	r7, [sp, #144]	; 0x90
  404b00:	2f01      	cmp	r7, #1
  404b02:	dc0a      	bgt.n	404b1a <_dtoa_r+0x6dc>
  404b04:	9f15      	ldr	r7, [sp, #84]	; 0x54
  404b06:	b117      	cbz	r7, 404b0e <_dtoa_r+0x6d0>
  404b08:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404b0c:	e002      	b.n	404b14 <_dtoa_r+0x6d6>
  404b0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404b10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404b14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404b16:	9e08      	ldr	r6, [sp, #32]
  404b18:	e016      	b.n	404b48 <_dtoa_r+0x70a>
  404b1a:	9f07      	ldr	r7, [sp, #28]
  404b1c:	1e7d      	subs	r5, r7, #1
  404b1e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404b20:	42af      	cmp	r7, r5
  404b22:	db01      	blt.n	404b28 <_dtoa_r+0x6ea>
  404b24:	1b7d      	subs	r5, r7, r5
  404b26:	e006      	b.n	404b36 <_dtoa_r+0x6f8>
  404b28:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404b2a:	950e      	str	r5, [sp, #56]	; 0x38
  404b2c:	1beb      	subs	r3, r5, r7
  404b2e:	9f11      	ldr	r7, [sp, #68]	; 0x44
  404b30:	2500      	movs	r5, #0
  404b32:	441f      	add	r7, r3
  404b34:	9711      	str	r7, [sp, #68]	; 0x44
  404b36:	9f07      	ldr	r7, [sp, #28]
  404b38:	2f00      	cmp	r7, #0
  404b3a:	da03      	bge.n	404b44 <_dtoa_r+0x706>
  404b3c:	9808      	ldr	r0, [sp, #32]
  404b3e:	2300      	movs	r3, #0
  404b40:	1bc6      	subs	r6, r0, r7
  404b42:	e001      	b.n	404b48 <_dtoa_r+0x70a>
  404b44:	9e08      	ldr	r6, [sp, #32]
  404b46:	9b07      	ldr	r3, [sp, #28]
  404b48:	9f08      	ldr	r7, [sp, #32]
  404b4a:	4650      	mov	r0, sl
  404b4c:	441f      	add	r7, r3
  404b4e:	9708      	str	r7, [sp, #32]
  404b50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404b52:	2101      	movs	r1, #1
  404b54:	441f      	add	r7, r3
  404b56:	970a      	str	r7, [sp, #40]	; 0x28
  404b58:	f000 feac 	bl	4058b4 <__i2b>
  404b5c:	4604      	mov	r4, r0
  404b5e:	e002      	b.n	404b66 <_dtoa_r+0x728>
  404b60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404b62:	9e08      	ldr	r6, [sp, #32]
  404b64:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404b66:	b16e      	cbz	r6, 404b84 <_dtoa_r+0x746>
  404b68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404b6a:	2f00      	cmp	r7, #0
  404b6c:	dd0a      	ble.n	404b84 <_dtoa_r+0x746>
  404b6e:	463b      	mov	r3, r7
  404b70:	9f08      	ldr	r7, [sp, #32]
  404b72:	42b3      	cmp	r3, r6
  404b74:	bfa8      	it	ge
  404b76:	4633      	movge	r3, r6
  404b78:	1aff      	subs	r7, r7, r3
  404b7a:	9708      	str	r7, [sp, #32]
  404b7c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404b7e:	1af6      	subs	r6, r6, r3
  404b80:	1aff      	subs	r7, r7, r3
  404b82:	970a      	str	r7, [sp, #40]	; 0x28
  404b84:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404b86:	2f00      	cmp	r7, #0
  404b88:	dd28      	ble.n	404bdc <_dtoa_r+0x79e>
  404b8a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  404b8c:	b307      	cbz	r7, 404bd0 <_dtoa_r+0x792>
  404b8e:	2d00      	cmp	r5, #0
  404b90:	dd10      	ble.n	404bb4 <_dtoa_r+0x776>
  404b92:	4621      	mov	r1, r4
  404b94:	462a      	mov	r2, r5
  404b96:	4650      	mov	r0, sl
  404b98:	f000 ff2d 	bl	4059f6 <__pow5mult>
  404b9c:	4604      	mov	r4, r0
  404b9e:	465a      	mov	r2, fp
  404ba0:	4621      	mov	r1, r4
  404ba2:	4650      	mov	r0, sl
  404ba4:	f000 fe8f 	bl	4058c6 <__multiply>
  404ba8:	4659      	mov	r1, fp
  404baa:	4607      	mov	r7, r0
  404bac:	4650      	mov	r0, sl
  404bae:	f000 fdaf 	bl	405710 <_Bfree>
  404bb2:	46bb      	mov	fp, r7
  404bb4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404bb6:	1b7a      	subs	r2, r7, r5
  404bb8:	d010      	beq.n	404bdc <_dtoa_r+0x79e>
  404bba:	4650      	mov	r0, sl
  404bbc:	4659      	mov	r1, fp
  404bbe:	e00a      	b.n	404bd6 <_dtoa_r+0x798>
  404bc0:	3fe00000 	.word	0x3fe00000
  404bc4:	40240000 	.word	0x40240000
  404bc8:	00407d20 	.word	0x00407d20
  404bcc:	40140000 	.word	0x40140000
  404bd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404bd2:	4650      	mov	r0, sl
  404bd4:	4659      	mov	r1, fp
  404bd6:	f000 ff0e 	bl	4059f6 <__pow5mult>
  404bda:	4683      	mov	fp, r0
  404bdc:	4650      	mov	r0, sl
  404bde:	2101      	movs	r1, #1
  404be0:	f000 fe68 	bl	4058b4 <__i2b>
  404be4:	9f11      	ldr	r7, [sp, #68]	; 0x44
  404be6:	4605      	mov	r5, r0
  404be8:	2f00      	cmp	r7, #0
  404bea:	dd05      	ble.n	404bf8 <_dtoa_r+0x7ba>
  404bec:	4629      	mov	r1, r5
  404bee:	4650      	mov	r0, sl
  404bf0:	463a      	mov	r2, r7
  404bf2:	f000 ff00 	bl	4059f6 <__pow5mult>
  404bf6:	4605      	mov	r5, r0
  404bf8:	9f24      	ldr	r7, [sp, #144]	; 0x90
  404bfa:	2f01      	cmp	r7, #1
  404bfc:	dc12      	bgt.n	404c24 <_dtoa_r+0x7e6>
  404bfe:	9804      	ldr	r0, [sp, #16]
  404c00:	b980      	cbnz	r0, 404c24 <_dtoa_r+0x7e6>
  404c02:	9905      	ldr	r1, [sp, #20]
  404c04:	f3c1 0313 	ubfx	r3, r1, #0, #20
  404c08:	b973      	cbnz	r3, 404c28 <_dtoa_r+0x7ea>
  404c0a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  404c0e:	0d3f      	lsrs	r7, r7, #20
  404c10:	053f      	lsls	r7, r7, #20
  404c12:	b157      	cbz	r7, 404c2a <_dtoa_r+0x7ec>
  404c14:	9f08      	ldr	r7, [sp, #32]
  404c16:	3701      	adds	r7, #1
  404c18:	9708      	str	r7, [sp, #32]
  404c1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404c1c:	3701      	adds	r7, #1
  404c1e:	970a      	str	r7, [sp, #40]	; 0x28
  404c20:	2701      	movs	r7, #1
  404c22:	e002      	b.n	404c2a <_dtoa_r+0x7ec>
  404c24:	2700      	movs	r7, #0
  404c26:	e000      	b.n	404c2a <_dtoa_r+0x7ec>
  404c28:	9f04      	ldr	r7, [sp, #16]
  404c2a:	9811      	ldr	r0, [sp, #68]	; 0x44
  404c2c:	b140      	cbz	r0, 404c40 <_dtoa_r+0x802>
  404c2e:	692b      	ldr	r3, [r5, #16]
  404c30:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  404c34:	6918      	ldr	r0, [r3, #16]
  404c36:	f000 fdf0 	bl	40581a <__hi0bits>
  404c3a:	f1c0 0020 	rsb	r0, r0, #32
  404c3e:	e000      	b.n	404c42 <_dtoa_r+0x804>
  404c40:	2001      	movs	r0, #1
  404c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c44:	4403      	add	r3, r0
  404c46:	f013 031f 	ands.w	r3, r3, #31
  404c4a:	d00f      	beq.n	404c6c <_dtoa_r+0x82e>
  404c4c:	f1c3 0220 	rsb	r2, r3, #32
  404c50:	2a04      	cmp	r2, #4
  404c52:	dd09      	ble.n	404c68 <_dtoa_r+0x82a>
  404c54:	9908      	ldr	r1, [sp, #32]
  404c56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404c58:	f1c3 031c 	rsb	r3, r3, #28
  404c5c:	4419      	add	r1, r3
  404c5e:	441a      	add	r2, r3
  404c60:	9108      	str	r1, [sp, #32]
  404c62:	441e      	add	r6, r3
  404c64:	920a      	str	r2, [sp, #40]	; 0x28
  404c66:	e009      	b.n	404c7c <_dtoa_r+0x83e>
  404c68:	d008      	beq.n	404c7c <_dtoa_r+0x83e>
  404c6a:	4613      	mov	r3, r2
  404c6c:	9808      	ldr	r0, [sp, #32]
  404c6e:	990a      	ldr	r1, [sp, #40]	; 0x28
  404c70:	331c      	adds	r3, #28
  404c72:	4418      	add	r0, r3
  404c74:	4419      	add	r1, r3
  404c76:	9008      	str	r0, [sp, #32]
  404c78:	441e      	add	r6, r3
  404c7a:	910a      	str	r1, [sp, #40]	; 0x28
  404c7c:	9a08      	ldr	r2, [sp, #32]
  404c7e:	2a00      	cmp	r2, #0
  404c80:	dd04      	ble.n	404c8c <_dtoa_r+0x84e>
  404c82:	4659      	mov	r1, fp
  404c84:	4650      	mov	r0, sl
  404c86:	f000 fef5 	bl	405a74 <__lshift>
  404c8a:	4683      	mov	fp, r0
  404c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404c8e:	2b00      	cmp	r3, #0
  404c90:	dd05      	ble.n	404c9e <_dtoa_r+0x860>
  404c92:	4629      	mov	r1, r5
  404c94:	4650      	mov	r0, sl
  404c96:	461a      	mov	r2, r3
  404c98:	f000 feec 	bl	405a74 <__lshift>
  404c9c:	4605      	mov	r5, r0
  404c9e:	9814      	ldr	r0, [sp, #80]	; 0x50
  404ca0:	b1e0      	cbz	r0, 404cdc <_dtoa_r+0x89e>
  404ca2:	4658      	mov	r0, fp
  404ca4:	4629      	mov	r1, r5
  404ca6:	f000 ff38 	bl	405b1a <__mcmp>
  404caa:	2800      	cmp	r0, #0
  404cac:	da16      	bge.n	404cdc <_dtoa_r+0x89e>
  404cae:	4659      	mov	r1, fp
  404cb0:	4650      	mov	r0, sl
  404cb2:	220a      	movs	r2, #10
  404cb4:	2300      	movs	r3, #0
  404cb6:	f000 fd34 	bl	405722 <__multadd>
  404cba:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404cbc:	f109 39ff 	add.w	r9, r9, #4294967295
  404cc0:	4683      	mov	fp, r0
  404cc2:	b149      	cbz	r1, 404cd8 <_dtoa_r+0x89a>
  404cc4:	4621      	mov	r1, r4
  404cc6:	220a      	movs	r2, #10
  404cc8:	4650      	mov	r0, sl
  404cca:	2300      	movs	r3, #0
  404ccc:	f000 fd29 	bl	405722 <__multadd>
  404cd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404cd2:	4604      	mov	r4, r0
  404cd4:	9207      	str	r2, [sp, #28]
  404cd6:	e001      	b.n	404cdc <_dtoa_r+0x89e>
  404cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404cda:	9307      	str	r3, [sp, #28]
  404cdc:	9807      	ldr	r0, [sp, #28]
  404cde:	2800      	cmp	r0, #0
  404ce0:	dc29      	bgt.n	404d36 <_dtoa_r+0x8f8>
  404ce2:	9924      	ldr	r1, [sp, #144]	; 0x90
  404ce4:	2902      	cmp	r1, #2
  404ce6:	dd26      	ble.n	404d36 <_dtoa_r+0x8f8>
  404ce8:	b988      	cbnz	r0, 404d0e <_dtoa_r+0x8d0>
  404cea:	4629      	mov	r1, r5
  404cec:	2205      	movs	r2, #5
  404cee:	9b07      	ldr	r3, [sp, #28]
  404cf0:	4650      	mov	r0, sl
  404cf2:	f000 fd16 	bl	405722 <__multadd>
  404cf6:	4605      	mov	r5, r0
  404cf8:	4629      	mov	r1, r5
  404cfa:	4658      	mov	r0, fp
  404cfc:	f000 ff0d 	bl	405b1a <__mcmp>
  404d00:	2800      	cmp	r0, #0
  404d02:	dc0e      	bgt.n	404d22 <_dtoa_r+0x8e4>
  404d04:	e003      	b.n	404d0e <_dtoa_r+0x8d0>
  404d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404d08:	e000      	b.n	404d0c <_dtoa_r+0x8ce>
  404d0a:	2500      	movs	r5, #0
  404d0c:	462c      	mov	r4, r5
  404d0e:	9f25      	ldr	r7, [sp, #148]	; 0x94
  404d10:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404d14:	ea6f 0907 	mvn.w	r9, r7
  404d18:	e00a      	b.n	404d30 <_dtoa_r+0x8f2>
  404d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404d1c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  404d20:	462c      	mov	r4, r5
  404d22:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404d24:	2331      	movs	r3, #49	; 0x31
  404d26:	f107 0801 	add.w	r8, r7, #1
  404d2a:	703b      	strb	r3, [r7, #0]
  404d2c:	f109 0901 	add.w	r9, r9, #1
  404d30:	4627      	mov	r7, r4
  404d32:	2400      	movs	r4, #0
  404d34:	e107      	b.n	404f46 <_dtoa_r+0xb08>
  404d36:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404d38:	2800      	cmp	r0, #0
  404d3a:	f000 80bb 	beq.w	404eb4 <_dtoa_r+0xa76>
  404d3e:	2e00      	cmp	r6, #0
  404d40:	dd05      	ble.n	404d4e <_dtoa_r+0x910>
  404d42:	4621      	mov	r1, r4
  404d44:	4650      	mov	r0, sl
  404d46:	4632      	mov	r2, r6
  404d48:	f000 fe94 	bl	405a74 <__lshift>
  404d4c:	4604      	mov	r4, r0
  404d4e:	b19f      	cbz	r7, 404d78 <_dtoa_r+0x93a>
  404d50:	6861      	ldr	r1, [r4, #4]
  404d52:	4650      	mov	r0, sl
  404d54:	f000 fcb6 	bl	4056c4 <_Balloc>
  404d58:	6922      	ldr	r2, [r4, #16]
  404d5a:	4606      	mov	r6, r0
  404d5c:	3202      	adds	r2, #2
  404d5e:	f104 010c 	add.w	r1, r4, #12
  404d62:	0092      	lsls	r2, r2, #2
  404d64:	300c      	adds	r0, #12
  404d66:	f7fe fa2d 	bl	4031c4 <memcpy>
  404d6a:	4650      	mov	r0, sl
  404d6c:	4631      	mov	r1, r6
  404d6e:	2201      	movs	r2, #1
  404d70:	f000 fe80 	bl	405a74 <__lshift>
  404d74:	4607      	mov	r7, r0
  404d76:	e000      	b.n	404d7a <_dtoa_r+0x93c>
  404d78:	4627      	mov	r7, r4
  404d7a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404d7c:	4629      	mov	r1, r5
  404d7e:	4658      	mov	r0, fp
  404d80:	f7ff face 	bl	404320 <quorem>
  404d84:	4621      	mov	r1, r4
  404d86:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  404d8a:	4680      	mov	r8, r0
  404d8c:	4658      	mov	r0, fp
  404d8e:	f8cd c008 	str.w	ip, [sp, #8]
  404d92:	f000 fec2 	bl	405b1a <__mcmp>
  404d96:	463a      	mov	r2, r7
  404d98:	9008      	str	r0, [sp, #32]
  404d9a:	4629      	mov	r1, r5
  404d9c:	4650      	mov	r0, sl
  404d9e:	f000 fed9 	bl	405b54 <__mdiff>
  404da2:	68c3      	ldr	r3, [r0, #12]
  404da4:	4602      	mov	r2, r0
  404da6:	f8dd c008 	ldr.w	ip, [sp, #8]
  404daa:	b94b      	cbnz	r3, 404dc0 <_dtoa_r+0x982>
  404dac:	4611      	mov	r1, r2
  404dae:	4658      	mov	r0, fp
  404db0:	9203      	str	r2, [sp, #12]
  404db2:	f000 feb2 	bl	405b1a <__mcmp>
  404db6:	9a03      	ldr	r2, [sp, #12]
  404db8:	4603      	mov	r3, r0
  404dba:	f8dd c008 	ldr.w	ip, [sp, #8]
  404dbe:	e000      	b.n	404dc2 <_dtoa_r+0x984>
  404dc0:	2301      	movs	r3, #1
  404dc2:	4650      	mov	r0, sl
  404dc4:	4611      	mov	r1, r2
  404dc6:	9303      	str	r3, [sp, #12]
  404dc8:	f8cd c008 	str.w	ip, [sp, #8]
  404dcc:	f000 fca0 	bl	405710 <_Bfree>
  404dd0:	9b03      	ldr	r3, [sp, #12]
  404dd2:	f8dd c008 	ldr.w	ip, [sp, #8]
  404dd6:	b963      	cbnz	r3, 404df2 <_dtoa_r+0x9b4>
  404dd8:	9924      	ldr	r1, [sp, #144]	; 0x90
  404dda:	b951      	cbnz	r1, 404df2 <_dtoa_r+0x9b4>
  404ddc:	9804      	ldr	r0, [sp, #16]
  404dde:	f000 0201 	and.w	r2, r0, #1
  404de2:	b932      	cbnz	r2, 404df2 <_dtoa_r+0x9b4>
  404de4:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  404de8:	d035      	beq.n	404e56 <_dtoa_r+0xa18>
  404dea:	9b08      	ldr	r3, [sp, #32]
  404dec:	2b00      	cmp	r3, #0
  404dee:	dc24      	bgt.n	404e3a <_dtoa_r+0x9fc>
  404df0:	e025      	b.n	404e3e <_dtoa_r+0xa00>
  404df2:	9808      	ldr	r0, [sp, #32]
  404df4:	2800      	cmp	r0, #0
  404df6:	da02      	bge.n	404dfe <_dtoa_r+0x9c0>
  404df8:	2b00      	cmp	r3, #0
  404dfa:	dc08      	bgt.n	404e0e <_dtoa_r+0x9d0>
  404dfc:	e01f      	b.n	404e3e <_dtoa_r+0xa00>
  404dfe:	d123      	bne.n	404e48 <_dtoa_r+0xa0a>
  404e00:	9924      	ldr	r1, [sp, #144]	; 0x90
  404e02:	bb09      	cbnz	r1, 404e48 <_dtoa_r+0xa0a>
  404e04:	9804      	ldr	r0, [sp, #16]
  404e06:	f000 0201 	and.w	r2, r0, #1
  404e0a:	b9ea      	cbnz	r2, 404e48 <_dtoa_r+0xa0a>
  404e0c:	e7f4      	b.n	404df8 <_dtoa_r+0x9ba>
  404e0e:	4659      	mov	r1, fp
  404e10:	2201      	movs	r2, #1
  404e12:	4650      	mov	r0, sl
  404e14:	f8cd c008 	str.w	ip, [sp, #8]
  404e18:	f000 fe2c 	bl	405a74 <__lshift>
  404e1c:	4629      	mov	r1, r5
  404e1e:	4683      	mov	fp, r0
  404e20:	f000 fe7b 	bl	405b1a <__mcmp>
  404e24:	2800      	cmp	r0, #0
  404e26:	f8dd c008 	ldr.w	ip, [sp, #8]
  404e2a:	dc03      	bgt.n	404e34 <_dtoa_r+0x9f6>
  404e2c:	d107      	bne.n	404e3e <_dtoa_r+0xa00>
  404e2e:	f01c 0f01 	tst.w	ip, #1
  404e32:	d004      	beq.n	404e3e <_dtoa_r+0xa00>
  404e34:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  404e38:	d00d      	beq.n	404e56 <_dtoa_r+0xa18>
  404e3a:	f108 0c31 	add.w	ip, r8, #49	; 0x31
  404e3e:	f106 0801 	add.w	r8, r6, #1
  404e42:	f886 c000 	strb.w	ip, [r6]
  404e46:	e07e      	b.n	404f46 <_dtoa_r+0xb08>
  404e48:	2b00      	cmp	r3, #0
  404e4a:	f106 0801 	add.w	r8, r6, #1
  404e4e:	dd09      	ble.n	404e64 <_dtoa_r+0xa26>
  404e50:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  404e54:	d103      	bne.n	404e5e <_dtoa_r+0xa20>
  404e56:	2339      	movs	r3, #57	; 0x39
  404e58:	7033      	strb	r3, [r6, #0]
  404e5a:	3601      	adds	r6, #1
  404e5c:	e05b      	b.n	404f16 <_dtoa_r+0xad8>
  404e5e:	f10c 0301 	add.w	r3, ip, #1
  404e62:	e068      	b.n	404f36 <_dtoa_r+0xaf8>
  404e64:	9909      	ldr	r1, [sp, #36]	; 0x24
  404e66:	9a07      	ldr	r2, [sp, #28]
  404e68:	ebc1 0308 	rsb	r3, r1, r8
  404e6c:	4646      	mov	r6, r8
  404e6e:	4293      	cmp	r3, r2
  404e70:	f806 cc01 	strb.w	ip, [r6, #-1]
  404e74:	d03c      	beq.n	404ef0 <_dtoa_r+0xab2>
  404e76:	4659      	mov	r1, fp
  404e78:	220a      	movs	r2, #10
  404e7a:	2300      	movs	r3, #0
  404e7c:	4650      	mov	r0, sl
  404e7e:	f000 fc50 	bl	405722 <__multadd>
  404e82:	42bc      	cmp	r4, r7
  404e84:	4683      	mov	fp, r0
  404e86:	4621      	mov	r1, r4
  404e88:	4650      	mov	r0, sl
  404e8a:	f04f 020a 	mov.w	r2, #10
  404e8e:	f04f 0300 	mov.w	r3, #0
  404e92:	d104      	bne.n	404e9e <_dtoa_r+0xa60>
  404e94:	f000 fc45 	bl	405722 <__multadd>
  404e98:	4604      	mov	r4, r0
  404e9a:	4607      	mov	r7, r0
  404e9c:	e76e      	b.n	404d7c <_dtoa_r+0x93e>
  404e9e:	f000 fc40 	bl	405722 <__multadd>
  404ea2:	4639      	mov	r1, r7
  404ea4:	4604      	mov	r4, r0
  404ea6:	220a      	movs	r2, #10
  404ea8:	4650      	mov	r0, sl
  404eaa:	2300      	movs	r3, #0
  404eac:	f000 fc39 	bl	405722 <__multadd>
  404eb0:	4607      	mov	r7, r0
  404eb2:	e763      	b.n	404d7c <_dtoa_r+0x93e>
  404eb4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  404eb6:	4658      	mov	r0, fp
  404eb8:	4629      	mov	r1, r5
  404eba:	f7ff fa31 	bl	404320 <quorem>
  404ebe:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404ec0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  404ec4:	f807 c006 	strb.w	ip, [r7, r6]
  404ec8:	9f07      	ldr	r7, [sp, #28]
  404eca:	3601      	adds	r6, #1
  404ecc:	42be      	cmp	r6, r7
  404ece:	db07      	blt.n	404ee0 <_dtoa_r+0xaa2>
  404ed0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404ed2:	2f01      	cmp	r7, #1
  404ed4:	bfac      	ite	ge
  404ed6:	19f6      	addge	r6, r6, r7
  404ed8:	3601      	addlt	r6, #1
  404eda:	4627      	mov	r7, r4
  404edc:	2400      	movs	r4, #0
  404ede:	e007      	b.n	404ef0 <_dtoa_r+0xab2>
  404ee0:	4659      	mov	r1, fp
  404ee2:	4650      	mov	r0, sl
  404ee4:	220a      	movs	r2, #10
  404ee6:	2300      	movs	r3, #0
  404ee8:	f000 fc1b 	bl	405722 <__multadd>
  404eec:	4683      	mov	fp, r0
  404eee:	e7e2      	b.n	404eb6 <_dtoa_r+0xa78>
  404ef0:	4659      	mov	r1, fp
  404ef2:	2201      	movs	r2, #1
  404ef4:	4650      	mov	r0, sl
  404ef6:	f8cd c008 	str.w	ip, [sp, #8]
  404efa:	f000 fdbb 	bl	405a74 <__lshift>
  404efe:	4629      	mov	r1, r5
  404f00:	4683      	mov	fp, r0
  404f02:	f000 fe0a 	bl	405b1a <__mcmp>
  404f06:	2800      	cmp	r0, #0
  404f08:	f8dd c008 	ldr.w	ip, [sp, #8]
  404f0c:	dc03      	bgt.n	404f16 <_dtoa_r+0xad8>
  404f0e:	d114      	bne.n	404f3a <_dtoa_r+0xafc>
  404f10:	f01c 0f01 	tst.w	ip, #1
  404f14:	d011      	beq.n	404f3a <_dtoa_r+0xafc>
  404f16:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  404f1a:	46b0      	mov	r8, r6
  404f1c:	2b39      	cmp	r3, #57	; 0x39
  404f1e:	f106 36ff 	add.w	r6, r6, #4294967295
  404f22:	d107      	bne.n	404f34 <_dtoa_r+0xaf6>
  404f24:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f26:	42b0      	cmp	r0, r6
  404f28:	d1f5      	bne.n	404f16 <_dtoa_r+0xad8>
  404f2a:	2331      	movs	r3, #49	; 0x31
  404f2c:	f109 0901 	add.w	r9, r9, #1
  404f30:	7003      	strb	r3, [r0, #0]
  404f32:	e008      	b.n	404f46 <_dtoa_r+0xb08>
  404f34:	3301      	adds	r3, #1
  404f36:	7033      	strb	r3, [r6, #0]
  404f38:	e005      	b.n	404f46 <_dtoa_r+0xb08>
  404f3a:	46b0      	mov	r8, r6
  404f3c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  404f40:	3e01      	subs	r6, #1
  404f42:	2b30      	cmp	r3, #48	; 0x30
  404f44:	d0f9      	beq.n	404f3a <_dtoa_r+0xafc>
  404f46:	4650      	mov	r0, sl
  404f48:	4629      	mov	r1, r5
  404f4a:	f000 fbe1 	bl	405710 <_Bfree>
  404f4e:	b16f      	cbz	r7, 404f6c <_dtoa_r+0xb2e>
  404f50:	b12c      	cbz	r4, 404f5e <_dtoa_r+0xb20>
  404f52:	42bc      	cmp	r4, r7
  404f54:	d003      	beq.n	404f5e <_dtoa_r+0xb20>
  404f56:	4650      	mov	r0, sl
  404f58:	4621      	mov	r1, r4
  404f5a:	f000 fbd9 	bl	405710 <_Bfree>
  404f5e:	4650      	mov	r0, sl
  404f60:	4639      	mov	r1, r7
  404f62:	f000 fbd5 	bl	405710 <_Bfree>
  404f66:	e001      	b.n	404f6c <_dtoa_r+0xb2e>
  404f68:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  404f6c:	4650      	mov	r0, sl
  404f6e:	4659      	mov	r1, fp
  404f70:	f000 fbce 	bl	405710 <_Bfree>
  404f74:	2300      	movs	r3, #0
  404f76:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404f78:	f888 3000 	strb.w	r3, [r8]
  404f7c:	f109 0301 	add.w	r3, r9, #1
  404f80:	603b      	str	r3, [r7, #0]
  404f82:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  404f84:	b127      	cbz	r7, 404f90 <_dtoa_r+0xb52>
  404f86:	f8c7 8000 	str.w	r8, [r7]
  404f8a:	e001      	b.n	404f90 <_dtoa_r+0xb52>
  404f8c:	4802      	ldr	r0, [pc, #8]	; (404f98 <_dtoa_r+0xb5a>)
  404f8e:	e000      	b.n	404f92 <_dtoa_r+0xb54>
  404f90:	9809      	ldr	r0, [sp, #36]	; 0x24
  404f92:	b01b      	add	sp, #108	; 0x6c
  404f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f98:	00407bf8 	.word	0x00407bf8
  404f9c:	f3af 8000 	nop.w

00404fa0 <__libc_fini_array>:
  404fa0:	b538      	push	{r3, r4, r5, lr}
  404fa2:	4d08      	ldr	r5, [pc, #32]	; (404fc4 <__libc_fini_array+0x24>)
  404fa4:	4c08      	ldr	r4, [pc, #32]	; (404fc8 <__libc_fini_array+0x28>)
  404fa6:	1b64      	subs	r4, r4, r5
  404fa8:	10a4      	asrs	r4, r4, #2
  404faa:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  404fae:	b124      	cbz	r4, 404fba <__libc_fini_array+0x1a>
  404fb0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404fb4:	3c01      	subs	r4, #1
  404fb6:	4798      	blx	r3
  404fb8:	e7f9      	b.n	404fae <__libc_fini_array+0xe>
  404fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404fbe:	f002 bf55 	b.w	407e6c <_fini>
  404fc2:	bf00      	nop
  404fc4:	00407e78 	.word	0x00407e78
  404fc8:	00407e7c 	.word	0x00407e7c

00404fcc <_malloc_trim_r>:
  404fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fce:	4d23      	ldr	r5, [pc, #140]	; (40505c <_malloc_trim_r+0x90>)
  404fd0:	460e      	mov	r6, r1
  404fd2:	4604      	mov	r4, r0
  404fd4:	f000 fb73 	bl	4056be <__malloc_lock>
  404fd8:	68ab      	ldr	r3, [r5, #8]
  404fda:	685f      	ldr	r7, [r3, #4]
  404fdc:	f027 0703 	bic.w	r7, r7, #3
  404fe0:	1bbe      	subs	r6, r7, r6
  404fe2:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
  404fe6:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
  404fea:	f026 060f 	bic.w	r6, r6, #15
  404fee:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
  404ff2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  404ff6:	da04      	bge.n	405002 <_malloc_trim_r+0x36>
  404ff8:	4620      	mov	r0, r4
  404ffa:	f000 fb61 	bl	4056c0 <__malloc_unlock>
  404ffe:	2000      	movs	r0, #0
  405000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405002:	4620      	mov	r0, r4
  405004:	2100      	movs	r1, #0
  405006:	f001 f913 	bl	406230 <_sbrk_r>
  40500a:	68ab      	ldr	r3, [r5, #8]
  40500c:	443b      	add	r3, r7
  40500e:	4298      	cmp	r0, r3
  405010:	d1f2      	bne.n	404ff8 <_malloc_trim_r+0x2c>
  405012:	4620      	mov	r0, r4
  405014:	4271      	negs	r1, r6
  405016:	f001 f90b 	bl	406230 <_sbrk_r>
  40501a:	3001      	adds	r0, #1
  40501c:	d110      	bne.n	405040 <_malloc_trim_r+0x74>
  40501e:	4620      	mov	r0, r4
  405020:	2100      	movs	r1, #0
  405022:	f001 f905 	bl	406230 <_sbrk_r>
  405026:	68ab      	ldr	r3, [r5, #8]
  405028:	1ac2      	subs	r2, r0, r3
  40502a:	2a0f      	cmp	r2, #15
  40502c:	dde4      	ble.n	404ff8 <_malloc_trim_r+0x2c>
  40502e:	490c      	ldr	r1, [pc, #48]	; (405060 <_malloc_trim_r+0x94>)
  405030:	f042 0201 	orr.w	r2, r2, #1
  405034:	6809      	ldr	r1, [r1, #0]
  405036:	605a      	str	r2, [r3, #4]
  405038:	1a40      	subs	r0, r0, r1
  40503a:	490a      	ldr	r1, [pc, #40]	; (405064 <_malloc_trim_r+0x98>)
  40503c:	6008      	str	r0, [r1, #0]
  40503e:	e7db      	b.n	404ff8 <_malloc_trim_r+0x2c>
  405040:	68ab      	ldr	r3, [r5, #8]
  405042:	1bbf      	subs	r7, r7, r6
  405044:	f047 0701 	orr.w	r7, r7, #1
  405048:	605f      	str	r7, [r3, #4]
  40504a:	4b06      	ldr	r3, [pc, #24]	; (405064 <_malloc_trim_r+0x98>)
  40504c:	4620      	mov	r0, r4
  40504e:	681a      	ldr	r2, [r3, #0]
  405050:	1b96      	subs	r6, r2, r6
  405052:	601e      	str	r6, [r3, #0]
  405054:	f000 fb34 	bl	4056c0 <__malloc_unlock>
  405058:	2001      	movs	r0, #1
  40505a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40505c:	20000568 	.word	0x20000568
  405060:	20000970 	.word	0x20000970
  405064:	20000bd8 	.word	0x20000bd8

00405068 <_free_r>:
  405068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40506a:	4606      	mov	r6, r0
  40506c:	460d      	mov	r5, r1
  40506e:	2900      	cmp	r1, #0
  405070:	f000 80a9 	beq.w	4051c6 <_free_r+0x15e>
  405074:	f000 fb23 	bl	4056be <__malloc_lock>
  405078:	f855 cc04 	ldr.w	ip, [r5, #-4]
  40507c:	4c52      	ldr	r4, [pc, #328]	; (4051c8 <_free_r+0x160>)
  40507e:	f1a5 0308 	sub.w	r3, r5, #8
  405082:	f02c 0201 	bic.w	r2, ip, #1
  405086:	1898      	adds	r0, r3, r2
  405088:	68a1      	ldr	r1, [r4, #8]
  40508a:	6847      	ldr	r7, [r0, #4]
  40508c:	4288      	cmp	r0, r1
  40508e:	f027 0703 	bic.w	r7, r7, #3
  405092:	f00c 0101 	and.w	r1, ip, #1
  405096:	d11b      	bne.n	4050d0 <_free_r+0x68>
  405098:	443a      	add	r2, r7
  40509a:	b939      	cbnz	r1, 4050ac <_free_r+0x44>
  40509c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4050a0:	1a5b      	subs	r3, r3, r1
  4050a2:	6898      	ldr	r0, [r3, #8]
  4050a4:	440a      	add	r2, r1
  4050a6:	68d9      	ldr	r1, [r3, #12]
  4050a8:	60c1      	str	r1, [r0, #12]
  4050aa:	6088      	str	r0, [r1, #8]
  4050ac:	f042 0101 	orr.w	r1, r2, #1
  4050b0:	6059      	str	r1, [r3, #4]
  4050b2:	60a3      	str	r3, [r4, #8]
  4050b4:	4b45      	ldr	r3, [pc, #276]	; (4051cc <_free_r+0x164>)
  4050b6:	681b      	ldr	r3, [r3, #0]
  4050b8:	429a      	cmp	r2, r3
  4050ba:	d304      	bcc.n	4050c6 <_free_r+0x5e>
  4050bc:	4b44      	ldr	r3, [pc, #272]	; (4051d0 <_free_r+0x168>)
  4050be:	4630      	mov	r0, r6
  4050c0:	6819      	ldr	r1, [r3, #0]
  4050c2:	f7ff ff83 	bl	404fcc <_malloc_trim_r>
  4050c6:	4630      	mov	r0, r6
  4050c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  4050cc:	f000 baf8 	b.w	4056c0 <__malloc_unlock>
  4050d0:	6047      	str	r7, [r0, #4]
  4050d2:	b979      	cbnz	r1, 4050f4 <_free_r+0x8c>
  4050d4:	f855 5c08 	ldr.w	r5, [r5, #-8]
  4050d8:	f104 0c08 	add.w	ip, r4, #8
  4050dc:	1b5b      	subs	r3, r3, r5
  4050de:	442a      	add	r2, r5
  4050e0:	689d      	ldr	r5, [r3, #8]
  4050e2:	4565      	cmp	r5, ip
  4050e4:	d008      	beq.n	4050f8 <_free_r+0x90>
  4050e6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4050ea:	f8c5 c00c 	str.w	ip, [r5, #12]
  4050ee:	f8cc 5008 	str.w	r5, [ip, #8]
  4050f2:	e002      	b.n	4050fa <_free_r+0x92>
  4050f4:	2100      	movs	r1, #0
  4050f6:	e000      	b.n	4050fa <_free_r+0x92>
  4050f8:	2101      	movs	r1, #1
  4050fa:	19c5      	adds	r5, r0, r7
  4050fc:	686d      	ldr	r5, [r5, #4]
  4050fe:	07ed      	lsls	r5, r5, #31
  405100:	d40e      	bmi.n	405120 <_free_r+0xb8>
  405102:	443a      	add	r2, r7
  405104:	6885      	ldr	r5, [r0, #8]
  405106:	b941      	cbnz	r1, 40511a <_free_r+0xb2>
  405108:	4f32      	ldr	r7, [pc, #200]	; (4051d4 <_free_r+0x16c>)
  40510a:	42bd      	cmp	r5, r7
  40510c:	d105      	bne.n	40511a <_free_r+0xb2>
  40510e:	6163      	str	r3, [r4, #20]
  405110:	6123      	str	r3, [r4, #16]
  405112:	2101      	movs	r1, #1
  405114:	60dd      	str	r5, [r3, #12]
  405116:	609d      	str	r5, [r3, #8]
  405118:	e002      	b.n	405120 <_free_r+0xb8>
  40511a:	68c0      	ldr	r0, [r0, #12]
  40511c:	60e8      	str	r0, [r5, #12]
  40511e:	6085      	str	r5, [r0, #8]
  405120:	f042 0001 	orr.w	r0, r2, #1
  405124:	6058      	str	r0, [r3, #4]
  405126:	509a      	str	r2, [r3, r2]
  405128:	2900      	cmp	r1, #0
  40512a:	d1cc      	bne.n	4050c6 <_free_r+0x5e>
  40512c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405130:	d20e      	bcs.n	405150 <_free_r+0xe8>
  405132:	08d2      	lsrs	r2, r2, #3
  405134:	1091      	asrs	r1, r2, #2
  405136:	2001      	movs	r0, #1
  405138:	4088      	lsls	r0, r1
  40513a:	6861      	ldr	r1, [r4, #4]
  40513c:	4301      	orrs	r1, r0
  40513e:	6061      	str	r1, [r4, #4]
  405140:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
  405144:	68a2      	ldr	r2, [r4, #8]
  405146:	60dc      	str	r4, [r3, #12]
  405148:	609a      	str	r2, [r3, #8]
  40514a:	60a3      	str	r3, [r4, #8]
  40514c:	60d3      	str	r3, [r2, #12]
  40514e:	e7ba      	b.n	4050c6 <_free_r+0x5e>
  405150:	0a51      	lsrs	r1, r2, #9
  405152:	2904      	cmp	r1, #4
  405154:	d802      	bhi.n	40515c <_free_r+0xf4>
  405156:	0991      	lsrs	r1, r2, #6
  405158:	3138      	adds	r1, #56	; 0x38
  40515a:	e015      	b.n	405188 <_free_r+0x120>
  40515c:	2914      	cmp	r1, #20
  40515e:	d801      	bhi.n	405164 <_free_r+0xfc>
  405160:	315b      	adds	r1, #91	; 0x5b
  405162:	e011      	b.n	405188 <_free_r+0x120>
  405164:	2954      	cmp	r1, #84	; 0x54
  405166:	d802      	bhi.n	40516e <_free_r+0x106>
  405168:	0b11      	lsrs	r1, r2, #12
  40516a:	316e      	adds	r1, #110	; 0x6e
  40516c:	e00c      	b.n	405188 <_free_r+0x120>
  40516e:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  405172:	d802      	bhi.n	40517a <_free_r+0x112>
  405174:	0bd1      	lsrs	r1, r2, #15
  405176:	3177      	adds	r1, #119	; 0x77
  405178:	e006      	b.n	405188 <_free_r+0x120>
  40517a:	f240 5054 	movw	r0, #1364	; 0x554
  40517e:	4281      	cmp	r1, r0
  405180:	bf9a      	itte	ls
  405182:	0c91      	lsrls	r1, r2, #18
  405184:	317c      	addls	r1, #124	; 0x7c
  405186:	217e      	movhi	r1, #126	; 0x7e
  405188:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
  40518c:	68a5      	ldr	r5, [r4, #8]
  40518e:	480e      	ldr	r0, [pc, #56]	; (4051c8 <_free_r+0x160>)
  405190:	42a5      	cmp	r5, r4
  405192:	d001      	beq.n	405198 <_free_r+0x130>
  405194:	4629      	mov	r1, r5
  405196:	e00b      	b.n	4051b0 <_free_r+0x148>
  405198:	2201      	movs	r2, #1
  40519a:	1089      	asrs	r1, r1, #2
  40519c:	fa02 f101 	lsl.w	r1, r2, r1
  4051a0:	6842      	ldr	r2, [r0, #4]
  4051a2:	430a      	orrs	r2, r1
  4051a4:	6042      	str	r2, [r0, #4]
  4051a6:	4629      	mov	r1, r5
  4051a8:	e008      	b.n	4051bc <_free_r+0x154>
  4051aa:	6889      	ldr	r1, [r1, #8]
  4051ac:	42a1      	cmp	r1, r4
  4051ae:	d004      	beq.n	4051ba <_free_r+0x152>
  4051b0:	6848      	ldr	r0, [r1, #4]
  4051b2:	f020 0003 	bic.w	r0, r0, #3
  4051b6:	4282      	cmp	r2, r0
  4051b8:	d3f7      	bcc.n	4051aa <_free_r+0x142>
  4051ba:	68cd      	ldr	r5, [r1, #12]
  4051bc:	60dd      	str	r5, [r3, #12]
  4051be:	6099      	str	r1, [r3, #8]
  4051c0:	60ab      	str	r3, [r5, #8]
  4051c2:	60cb      	str	r3, [r1, #12]
  4051c4:	e77f      	b.n	4050c6 <_free_r+0x5e>
  4051c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4051c8:	20000568 	.word	0x20000568
  4051cc:	20000974 	.word	0x20000974
  4051d0:	20000bd4 	.word	0x20000bd4
  4051d4:	20000570 	.word	0x20000570

004051d8 <_setlocale_r>:
  4051d8:	b510      	push	{r4, lr}
  4051da:	4614      	mov	r4, r2
  4051dc:	b90a      	cbnz	r2, 4051e2 <_setlocale_r+0xa>
  4051de:	480b      	ldr	r0, [pc, #44]	; (40520c <_setlocale_r+0x34>)
  4051e0:	bd10      	pop	{r4, pc}
  4051e2:	4610      	mov	r0, r2
  4051e4:	490a      	ldr	r1, [pc, #40]	; (405210 <_setlocale_r+0x38>)
  4051e6:	f001 f833 	bl	406250 <strcmp>
  4051ea:	2800      	cmp	r0, #0
  4051ec:	d0f7      	beq.n	4051de <_setlocale_r+0x6>
  4051ee:	4620      	mov	r0, r4
  4051f0:	4906      	ldr	r1, [pc, #24]	; (40520c <_setlocale_r+0x34>)
  4051f2:	f001 f82d 	bl	406250 <strcmp>
  4051f6:	2800      	cmp	r0, #0
  4051f8:	d0f1      	beq.n	4051de <_setlocale_r+0x6>
  4051fa:	4620      	mov	r0, r4
  4051fc:	4905      	ldr	r1, [pc, #20]	; (405214 <_setlocale_r+0x3c>)
  4051fe:	f001 f827 	bl	406250 <strcmp>
  405202:	2800      	cmp	r0, #0
  405204:	4801      	ldr	r0, [pc, #4]	; (40520c <_setlocale_r+0x34>)
  405206:	bf18      	it	ne
  405208:	2000      	movne	r0, #0
  40520a:	bd10      	pop	{r4, pc}
  40520c:	00407ba4 	.word	0x00407ba4
  405210:	00407d08 	.word	0x00407d08
  405214:	00407d0f 	.word	0x00407d0f

00405218 <__locale_charset>:
  405218:	4800      	ldr	r0, [pc, #0]	; (40521c <__locale_charset+0x4>)
  40521a:	4770      	bx	lr
  40521c:	200004ec 	.word	0x200004ec

00405220 <__locale_mb_cur_max>:
  405220:	4b01      	ldr	r3, [pc, #4]	; (405228 <__locale_mb_cur_max+0x8>)
  405222:	6a18      	ldr	r0, [r3, #32]
  405224:	4770      	bx	lr
  405226:	bf00      	nop
  405228:	200004ec 	.word	0x200004ec

0040522c <__locale_msgcharset>:
  40522c:	4800      	ldr	r0, [pc, #0]	; (405230 <__locale_msgcharset+0x4>)
  40522e:	4770      	bx	lr
  405230:	20000510 	.word	0x20000510

00405234 <__locale_cjk_lang>:
  405234:	2000      	movs	r0, #0
  405236:	4770      	bx	lr

00405238 <_localeconv_r>:
  405238:	4800      	ldr	r0, [pc, #0]	; (40523c <_localeconv_r+0x4>)
  40523a:	4770      	bx	lr
  40523c:	20000530 	.word	0x20000530

00405240 <setlocale>:
  405240:	460a      	mov	r2, r1
  405242:	4903      	ldr	r1, [pc, #12]	; (405250 <setlocale+0x10>)
  405244:	4603      	mov	r3, r0
  405246:	6808      	ldr	r0, [r1, #0]
  405248:	4619      	mov	r1, r3
  40524a:	f7ff bfc5 	b.w	4051d8 <_setlocale_r>
  40524e:	bf00      	nop
  405250:	200000b8 	.word	0x200000b8

00405254 <localeconv>:
  405254:	4800      	ldr	r0, [pc, #0]	; (405258 <localeconv+0x4>)
  405256:	4770      	bx	lr
  405258:	20000530 	.word	0x20000530

0040525c <_malloc_r>:
  40525c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405260:	f101 040b 	add.w	r4, r1, #11
  405264:	2c16      	cmp	r4, #22
  405266:	4607      	mov	r7, r0
  405268:	d903      	bls.n	405272 <_malloc_r+0x16>
  40526a:	f034 0407 	bics.w	r4, r4, #7
  40526e:	d501      	bpl.n	405274 <_malloc_r+0x18>
  405270:	e002      	b.n	405278 <_malloc_r+0x1c>
  405272:	2410      	movs	r4, #16
  405274:	428c      	cmp	r4, r1
  405276:	d202      	bcs.n	40527e <_malloc_r+0x22>
  405278:	230c      	movs	r3, #12
  40527a:	603b      	str	r3, [r7, #0]
  40527c:	e1de      	b.n	40563c <_malloc_r+0x3e0>
  40527e:	4638      	mov	r0, r7
  405280:	f000 fa1d 	bl	4056be <__malloc_lock>
  405284:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  405288:	4da3      	ldr	r5, [pc, #652]	; (405518 <_malloc_r+0x2bc>)
  40528a:	d214      	bcs.n	4052b6 <_malloc_r+0x5a>
  40528c:	08e2      	lsrs	r2, r4, #3
  40528e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  405292:	68de      	ldr	r6, [r3, #12]
  405294:	429e      	cmp	r6, r3
  405296:	d106      	bne.n	4052a6 <_malloc_r+0x4a>
  405298:	f106 0308 	add.w	r3, r6, #8
  40529c:	6976      	ldr	r6, [r6, #20]
  40529e:	429e      	cmp	r6, r3
  4052a0:	bf08      	it	eq
  4052a2:	3202      	addeq	r2, #2
  4052a4:	d043      	beq.n	40532e <_malloc_r+0xd2>
  4052a6:	6873      	ldr	r3, [r6, #4]
  4052a8:	68f2      	ldr	r2, [r6, #12]
  4052aa:	68b1      	ldr	r1, [r6, #8]
  4052ac:	f023 0303 	bic.w	r3, r3, #3
  4052b0:	60ca      	str	r2, [r1, #12]
  4052b2:	6091      	str	r1, [r2, #8]
  4052b4:	e05d      	b.n	405372 <_malloc_r+0x116>
  4052b6:	0a62      	lsrs	r2, r4, #9
  4052b8:	d01a      	beq.n	4052f0 <_malloc_r+0x94>
  4052ba:	2a04      	cmp	r2, #4
  4052bc:	d802      	bhi.n	4052c4 <_malloc_r+0x68>
  4052be:	09a2      	lsrs	r2, r4, #6
  4052c0:	3238      	adds	r2, #56	; 0x38
  4052c2:	e018      	b.n	4052f6 <_malloc_r+0x9a>
  4052c4:	2a14      	cmp	r2, #20
  4052c6:	d801      	bhi.n	4052cc <_malloc_r+0x70>
  4052c8:	325b      	adds	r2, #91	; 0x5b
  4052ca:	e014      	b.n	4052f6 <_malloc_r+0x9a>
  4052cc:	2a54      	cmp	r2, #84	; 0x54
  4052ce:	d802      	bhi.n	4052d6 <_malloc_r+0x7a>
  4052d0:	0b22      	lsrs	r2, r4, #12
  4052d2:	326e      	adds	r2, #110	; 0x6e
  4052d4:	e00f      	b.n	4052f6 <_malloc_r+0x9a>
  4052d6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4052da:	d802      	bhi.n	4052e2 <_malloc_r+0x86>
  4052dc:	0be2      	lsrs	r2, r4, #15
  4052de:	3277      	adds	r2, #119	; 0x77
  4052e0:	e009      	b.n	4052f6 <_malloc_r+0x9a>
  4052e2:	f240 5354 	movw	r3, #1364	; 0x554
  4052e6:	429a      	cmp	r2, r3
  4052e8:	d804      	bhi.n	4052f4 <_malloc_r+0x98>
  4052ea:	0ca2      	lsrs	r2, r4, #18
  4052ec:	327c      	adds	r2, #124	; 0x7c
  4052ee:	e002      	b.n	4052f6 <_malloc_r+0x9a>
  4052f0:	223f      	movs	r2, #63	; 0x3f
  4052f2:	e000      	b.n	4052f6 <_malloc_r+0x9a>
  4052f4:	227e      	movs	r2, #126	; 0x7e
  4052f6:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  4052fa:	68de      	ldr	r6, [r3, #12]
  4052fc:	429e      	cmp	r6, r3
  4052fe:	d015      	beq.n	40532c <_malloc_r+0xd0>
  405300:	6871      	ldr	r1, [r6, #4]
  405302:	f021 0103 	bic.w	r1, r1, #3
  405306:	1b08      	subs	r0, r1, r4
  405308:	280f      	cmp	r0, #15
  40530a:	dd01      	ble.n	405310 <_malloc_r+0xb4>
  40530c:	3a01      	subs	r2, #1
  40530e:	e00d      	b.n	40532c <_malloc_r+0xd0>
  405310:	2800      	cmp	r0, #0
  405312:	db09      	blt.n	405328 <_malloc_r+0xcc>
  405314:	68f3      	ldr	r3, [r6, #12]
  405316:	68b2      	ldr	r2, [r6, #8]
  405318:	60d3      	str	r3, [r2, #12]
  40531a:	609a      	str	r2, [r3, #8]
  40531c:	1873      	adds	r3, r6, r1
  40531e:	685a      	ldr	r2, [r3, #4]
  405320:	f042 0201 	orr.w	r2, r2, #1
  405324:	605a      	str	r2, [r3, #4]
  405326:	e194      	b.n	405652 <_malloc_r+0x3f6>
  405328:	68f6      	ldr	r6, [r6, #12]
  40532a:	e7e7      	b.n	4052fc <_malloc_r+0xa0>
  40532c:	3201      	adds	r2, #1
  40532e:	497a      	ldr	r1, [pc, #488]	; (405518 <_malloc_r+0x2bc>)
  405330:	692e      	ldr	r6, [r5, #16]
  405332:	f101 0008 	add.w	r0, r1, #8
  405336:	4286      	cmp	r6, r0
  405338:	4686      	mov	lr, r0
  40533a:	d06d      	beq.n	405418 <_malloc_r+0x1bc>
  40533c:	6873      	ldr	r3, [r6, #4]
  40533e:	f023 0303 	bic.w	r3, r3, #3
  405342:	ebc4 0c03 	rsb	ip, r4, r3
  405346:	f1bc 0f0f 	cmp.w	ip, #15
  40534a:	dd0d      	ble.n	405368 <_malloc_r+0x10c>
  40534c:	1933      	adds	r3, r6, r4
  40534e:	f04c 0201 	orr.w	r2, ip, #1
  405352:	f044 0401 	orr.w	r4, r4, #1
  405356:	6074      	str	r4, [r6, #4]
  405358:	614b      	str	r3, [r1, #20]
  40535a:	610b      	str	r3, [r1, #16]
  40535c:	60d8      	str	r0, [r3, #12]
  40535e:	6098      	str	r0, [r3, #8]
  405360:	605a      	str	r2, [r3, #4]
  405362:	f843 c00c 	str.w	ip, [r3, ip]
  405366:	e174      	b.n	405652 <_malloc_r+0x3f6>
  405368:	f1bc 0f00 	cmp.w	ip, #0
  40536c:	6148      	str	r0, [r1, #20]
  40536e:	6108      	str	r0, [r1, #16]
  405370:	db01      	blt.n	405376 <_malloc_r+0x11a>
  405372:	4433      	add	r3, r6
  405374:	e7d3      	b.n	40531e <_malloc_r+0xc2>
  405376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40537a:	d211      	bcs.n	4053a0 <_malloc_r+0x144>
  40537c:	08db      	lsrs	r3, r3, #3
  40537e:	1098      	asrs	r0, r3, #2
  405380:	f04f 0c01 	mov.w	ip, #1
  405384:	fa0c fc00 	lsl.w	ip, ip, r0
  405388:	6848      	ldr	r0, [r1, #4]
  40538a:	ea4c 0000 	orr.w	r0, ip, r0
  40538e:	6048      	str	r0, [r1, #4]
  405390:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405394:	688b      	ldr	r3, [r1, #8]
  405396:	60f1      	str	r1, [r6, #12]
  405398:	60b3      	str	r3, [r6, #8]
  40539a:	608e      	str	r6, [r1, #8]
  40539c:	60de      	str	r6, [r3, #12]
  40539e:	e03b      	b.n	405418 <_malloc_r+0x1bc>
  4053a0:	0a58      	lsrs	r0, r3, #9
  4053a2:	2804      	cmp	r0, #4
  4053a4:	d802      	bhi.n	4053ac <_malloc_r+0x150>
  4053a6:	0998      	lsrs	r0, r3, #6
  4053a8:	3038      	adds	r0, #56	; 0x38
  4053aa:	e015      	b.n	4053d8 <_malloc_r+0x17c>
  4053ac:	2814      	cmp	r0, #20
  4053ae:	d801      	bhi.n	4053b4 <_malloc_r+0x158>
  4053b0:	305b      	adds	r0, #91	; 0x5b
  4053b2:	e011      	b.n	4053d8 <_malloc_r+0x17c>
  4053b4:	2854      	cmp	r0, #84	; 0x54
  4053b6:	d802      	bhi.n	4053be <_malloc_r+0x162>
  4053b8:	0b18      	lsrs	r0, r3, #12
  4053ba:	306e      	adds	r0, #110	; 0x6e
  4053bc:	e00c      	b.n	4053d8 <_malloc_r+0x17c>
  4053be:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  4053c2:	d802      	bhi.n	4053ca <_malloc_r+0x16e>
  4053c4:	0bd8      	lsrs	r0, r3, #15
  4053c6:	3077      	adds	r0, #119	; 0x77
  4053c8:	e006      	b.n	4053d8 <_malloc_r+0x17c>
  4053ca:	f240 5154 	movw	r1, #1364	; 0x554
  4053ce:	4288      	cmp	r0, r1
  4053d0:	bf9a      	itte	ls
  4053d2:	0c98      	lsrls	r0, r3, #18
  4053d4:	307c      	addls	r0, #124	; 0x7c
  4053d6:	207e      	movhi	r0, #126	; 0x7e
  4053d8:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
  4053dc:	f8dc 1008 	ldr.w	r1, [ip, #8]
  4053e0:	f8df 8134 	ldr.w	r8, [pc, #308]	; 405518 <_malloc_r+0x2bc>
  4053e4:	4561      	cmp	r1, ip
  4053e6:	d10d      	bne.n	405404 <_malloc_r+0x1a8>
  4053e8:	2301      	movs	r3, #1
  4053ea:	1080      	asrs	r0, r0, #2
  4053ec:	fa03 f000 	lsl.w	r0, r3, r0
  4053f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4053f4:	4303      	orrs	r3, r0
  4053f6:	f8c8 3004 	str.w	r3, [r8, #4]
  4053fa:	460b      	mov	r3, r1
  4053fc:	e008      	b.n	405410 <_malloc_r+0x1b4>
  4053fe:	6889      	ldr	r1, [r1, #8]
  405400:	4561      	cmp	r1, ip
  405402:	d004      	beq.n	40540e <_malloc_r+0x1b2>
  405404:	6848      	ldr	r0, [r1, #4]
  405406:	f020 0003 	bic.w	r0, r0, #3
  40540a:	4283      	cmp	r3, r0
  40540c:	d3f7      	bcc.n	4053fe <_malloc_r+0x1a2>
  40540e:	68cb      	ldr	r3, [r1, #12]
  405410:	60f3      	str	r3, [r6, #12]
  405412:	60b1      	str	r1, [r6, #8]
  405414:	609e      	str	r6, [r3, #8]
  405416:	60ce      	str	r6, [r1, #12]
  405418:	2101      	movs	r1, #1
  40541a:	1093      	asrs	r3, r2, #2
  40541c:	fa01 f303 	lsl.w	r3, r1, r3
  405420:	6869      	ldr	r1, [r5, #4]
  405422:	428b      	cmp	r3, r1
  405424:	d85d      	bhi.n	4054e2 <_malloc_r+0x286>
  405426:	420b      	tst	r3, r1
  405428:	d106      	bne.n	405438 <_malloc_r+0x1dc>
  40542a:	f022 0203 	bic.w	r2, r2, #3
  40542e:	005b      	lsls	r3, r3, #1
  405430:	420b      	tst	r3, r1
  405432:	f102 0204 	add.w	r2, r2, #4
  405436:	d0fa      	beq.n	40542e <_malloc_r+0x1d2>
  405438:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
  40543c:	4680      	mov	r8, r0
  40543e:	4694      	mov	ip, r2
  405440:	f8d8 600c 	ldr.w	r6, [r8, #12]
  405444:	4546      	cmp	r6, r8
  405446:	d02d      	beq.n	4054a4 <_malloc_r+0x248>
  405448:	6871      	ldr	r1, [r6, #4]
  40544a:	f021 0903 	bic.w	r9, r1, #3
  40544e:	ebc4 0109 	rsb	r1, r4, r9
  405452:	290f      	cmp	r1, #15
  405454:	dd13      	ble.n	40547e <_malloc_r+0x222>
  405456:	1933      	adds	r3, r6, r4
  405458:	f044 0401 	orr.w	r4, r4, #1
  40545c:	68f2      	ldr	r2, [r6, #12]
  40545e:	6074      	str	r4, [r6, #4]
  405460:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405464:	60c2      	str	r2, [r0, #12]
  405466:	6090      	str	r0, [r2, #8]
  405468:	f041 0201 	orr.w	r2, r1, #1
  40546c:	616b      	str	r3, [r5, #20]
  40546e:	612b      	str	r3, [r5, #16]
  405470:	f8c3 e00c 	str.w	lr, [r3, #12]
  405474:	f8c3 e008 	str.w	lr, [r3, #8]
  405478:	605a      	str	r2, [r3, #4]
  40547a:	5059      	str	r1, [r3, r1]
  40547c:	e00c      	b.n	405498 <_malloc_r+0x23c>
  40547e:	2900      	cmp	r1, #0
  405480:	db0e      	blt.n	4054a0 <_malloc_r+0x244>
  405482:	eb06 0109 	add.w	r1, r6, r9
  405486:	684b      	ldr	r3, [r1, #4]
  405488:	f043 0301 	orr.w	r3, r3, #1
  40548c:	604b      	str	r3, [r1, #4]
  40548e:	68f3      	ldr	r3, [r6, #12]
  405490:	f856 2f08 	ldr.w	r2, [r6, #8]!
  405494:	60d3      	str	r3, [r2, #12]
  405496:	609a      	str	r2, [r3, #8]
  405498:	4638      	mov	r0, r7
  40549a:	f000 f911 	bl	4056c0 <__malloc_unlock>
  40549e:	e0dc      	b.n	40565a <_malloc_r+0x3fe>
  4054a0:	68f6      	ldr	r6, [r6, #12]
  4054a2:	e7cf      	b.n	405444 <_malloc_r+0x1e8>
  4054a4:	f10c 0c01 	add.w	ip, ip, #1
  4054a8:	f01c 0f03 	tst.w	ip, #3
  4054ac:	f108 0808 	add.w	r8, r8, #8
  4054b0:	d1c6      	bne.n	405440 <_malloc_r+0x1e4>
  4054b2:	0791      	lsls	r1, r2, #30
  4054b4:	d104      	bne.n	4054c0 <_malloc_r+0x264>
  4054b6:	686a      	ldr	r2, [r5, #4]
  4054b8:	ea22 0203 	bic.w	r2, r2, r3
  4054bc:	606a      	str	r2, [r5, #4]
  4054be:	e005      	b.n	4054cc <_malloc_r+0x270>
  4054c0:	f1a0 0108 	sub.w	r1, r0, #8
  4054c4:	6800      	ldr	r0, [r0, #0]
  4054c6:	3a01      	subs	r2, #1
  4054c8:	4288      	cmp	r0, r1
  4054ca:	d0f2      	beq.n	4054b2 <_malloc_r+0x256>
  4054cc:	6869      	ldr	r1, [r5, #4]
  4054ce:	005b      	lsls	r3, r3, #1
  4054d0:	428b      	cmp	r3, r1
  4054d2:	d806      	bhi.n	4054e2 <_malloc_r+0x286>
  4054d4:	b12b      	cbz	r3, 4054e2 <_malloc_r+0x286>
  4054d6:	4662      	mov	r2, ip
  4054d8:	420b      	tst	r3, r1
  4054da:	d1ad      	bne.n	405438 <_malloc_r+0x1dc>
  4054dc:	3204      	adds	r2, #4
  4054de:	005b      	lsls	r3, r3, #1
  4054e0:	e7fa      	b.n	4054d8 <_malloc_r+0x27c>
  4054e2:	f8d5 9008 	ldr.w	r9, [r5, #8]
  4054e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4054ea:	f023 0b03 	bic.w	fp, r3, #3
  4054ee:	45a3      	cmp	fp, r4
  4054f0:	d304      	bcc.n	4054fc <_malloc_r+0x2a0>
  4054f2:	ebc4 030b 	rsb	r3, r4, fp
  4054f6:	2b0f      	cmp	r3, #15
  4054f8:	f300 80a2 	bgt.w	405640 <_malloc_r+0x3e4>
  4054fc:	4907      	ldr	r1, [pc, #28]	; (40551c <_malloc_r+0x2c0>)
  4054fe:	eb09 030b 	add.w	r3, r9, fp
  405502:	680a      	ldr	r2, [r1, #0]
  405504:	4688      	mov	r8, r1
  405506:	eb04 0a02 	add.w	sl, r4, r2
  40550a:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
  40550e:	3201      	adds	r2, #1
  405510:	d106      	bne.n	405520 <_malloc_r+0x2c4>
  405512:	f10a 0a10 	add.w	sl, sl, #16
  405516:	e00b      	b.n	405530 <_malloc_r+0x2d4>
  405518:	20000568 	.word	0x20000568
  40551c:	20000bd4 	.word	0x20000bd4
  405520:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  405524:	f10a 0a0f 	add.w	sl, sl, #15
  405528:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  40552c:	f02a 0a0f 	bic.w	sl, sl, #15
  405530:	4638      	mov	r0, r7
  405532:	4651      	mov	r1, sl
  405534:	9301      	str	r3, [sp, #4]
  405536:	f000 fe7b 	bl	406230 <_sbrk_r>
  40553a:	1c42      	adds	r2, r0, #1
  40553c:	4606      	mov	r6, r0
  40553e:	9b01      	ldr	r3, [sp, #4]
  405540:	d06f      	beq.n	405622 <_malloc_r+0x3c6>
  405542:	4298      	cmp	r0, r3
  405544:	d201      	bcs.n	40554a <_malloc_r+0x2ee>
  405546:	45a9      	cmp	r9, r5
  405548:	d16b      	bne.n	405622 <_malloc_r+0x3c6>
  40554a:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40554e:	429e      	cmp	r6, r3
  405550:	4452      	add	r2, sl
  405552:	f8c8 2004 	str.w	r2, [r8, #4]
  405556:	d108      	bne.n	40556a <_malloc_r+0x30e>
  405558:	f3c6 010b 	ubfx	r1, r6, #0, #12
  40555c:	b929      	cbnz	r1, 40556a <_malloc_r+0x30e>
  40555e:	68ab      	ldr	r3, [r5, #8]
  405560:	44da      	add	sl, fp
  405562:	f04a 0201 	orr.w	r2, sl, #1
  405566:	605a      	str	r2, [r3, #4]
  405568:	e04d      	b.n	405606 <_malloc_r+0x3aa>
  40556a:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
  40556e:	3101      	adds	r1, #1
  405570:	d103      	bne.n	40557a <_malloc_r+0x31e>
  405572:	4b3c      	ldr	r3, [pc, #240]	; (405664 <_malloc_r+0x408>)
  405574:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
  405578:	e003      	b.n	405582 <_malloc_r+0x326>
  40557a:	1af3      	subs	r3, r6, r3
  40557c:	441a      	add	r2, r3
  40557e:	f8c8 2004 	str.w	r2, [r8, #4]
  405582:	f016 0307 	ands.w	r3, r6, #7
  405586:	bf1c      	itt	ne
  405588:	f1c3 0308 	rsbne	r3, r3, #8
  40558c:	18f6      	addne	r6, r6, r3
  40558e:	44b2      	add	sl, r6
  405590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405594:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  405598:	ebca 0a03 	rsb	sl, sl, r3
  40559c:	4651      	mov	r1, sl
  40559e:	4638      	mov	r0, r7
  4055a0:	f000 fe46 	bl	406230 <_sbrk_r>
  4055a4:	1c43      	adds	r3, r0, #1
  4055a6:	bf04      	itt	eq
  4055a8:	4630      	moveq	r0, r6
  4055aa:	f04f 0a00 	moveq.w	sl, #0
  4055ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4055b2:	1b80      	subs	r0, r0, r6
  4055b4:	4450      	add	r0, sl
  4055b6:	4453      	add	r3, sl
  4055b8:	f040 0001 	orr.w	r0, r0, #1
  4055bc:	45a9      	cmp	r9, r5
  4055be:	60ae      	str	r6, [r5, #8]
  4055c0:	f8c8 3004 	str.w	r3, [r8, #4]
  4055c4:	6070      	str	r0, [r6, #4]
  4055c6:	d01e      	beq.n	405606 <_malloc_r+0x3aa>
  4055c8:	f1bb 0f0f 	cmp.w	fp, #15
  4055cc:	d802      	bhi.n	4055d4 <_malloc_r+0x378>
  4055ce:	2301      	movs	r3, #1
  4055d0:	6073      	str	r3, [r6, #4]
  4055d2:	e026      	b.n	405622 <_malloc_r+0x3c6>
  4055d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4055d8:	f1ab 0b0c 	sub.w	fp, fp, #12
  4055dc:	f02b 0b07 	bic.w	fp, fp, #7
  4055e0:	f003 0301 	and.w	r3, r3, #1
  4055e4:	ea4b 0303 	orr.w	r3, fp, r3
  4055e8:	f8c9 3004 	str.w	r3, [r9, #4]
  4055ec:	2205      	movs	r2, #5
  4055ee:	eb09 030b 	add.w	r3, r9, fp
  4055f2:	f1bb 0f0f 	cmp.w	fp, #15
  4055f6:	605a      	str	r2, [r3, #4]
  4055f8:	609a      	str	r2, [r3, #8]
  4055fa:	d904      	bls.n	405606 <_malloc_r+0x3aa>
  4055fc:	4638      	mov	r0, r7
  4055fe:	f109 0108 	add.w	r1, r9, #8
  405602:	f7ff fd31 	bl	405068 <_free_r>
  405606:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40560a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
  40560e:	4293      	cmp	r3, r2
  405610:	bf84      	itt	hi
  405612:	4a15      	ldrhi	r2, [pc, #84]	; (405668 <_malloc_r+0x40c>)
  405614:	62d3      	strhi	r3, [r2, #44]	; 0x2c
  405616:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  40561a:	4293      	cmp	r3, r2
  40561c:	bf84      	itt	hi
  40561e:	4a12      	ldrhi	r2, [pc, #72]	; (405668 <_malloc_r+0x40c>)
  405620:	6313      	strhi	r3, [r2, #48]	; 0x30
  405622:	68ab      	ldr	r3, [r5, #8]
  405624:	685a      	ldr	r2, [r3, #4]
  405626:	f022 0203 	bic.w	r2, r2, #3
  40562a:	42a2      	cmp	r2, r4
  40562c:	ebc4 0302 	rsb	r3, r4, r2
  405630:	d301      	bcc.n	405636 <_malloc_r+0x3da>
  405632:	2b0f      	cmp	r3, #15
  405634:	dc04      	bgt.n	405640 <_malloc_r+0x3e4>
  405636:	4638      	mov	r0, r7
  405638:	f000 f842 	bl	4056c0 <__malloc_unlock>
  40563c:	2600      	movs	r6, #0
  40563e:	e00c      	b.n	40565a <_malloc_r+0x3fe>
  405640:	68ae      	ldr	r6, [r5, #8]
  405642:	f044 0201 	orr.w	r2, r4, #1
  405646:	f043 0301 	orr.w	r3, r3, #1
  40564a:	4434      	add	r4, r6
  40564c:	6072      	str	r2, [r6, #4]
  40564e:	60ac      	str	r4, [r5, #8]
  405650:	6063      	str	r3, [r4, #4]
  405652:	4638      	mov	r0, r7
  405654:	f000 f834 	bl	4056c0 <__malloc_unlock>
  405658:	3608      	adds	r6, #8
  40565a:	4630      	mov	r0, r6
  40565c:	b003      	add	sp, #12
  40565e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405662:	bf00      	nop
  405664:	20000568 	.word	0x20000568
  405668:	20000bd4 	.word	0x20000bd4

0040566c <memchr>:
  40566c:	b510      	push	{r4, lr}
  40566e:	b2c9      	uxtb	r1, r1
  405670:	4402      	add	r2, r0
  405672:	4290      	cmp	r0, r2
  405674:	4603      	mov	r3, r0
  405676:	d005      	beq.n	405684 <memchr+0x18>
  405678:	781c      	ldrb	r4, [r3, #0]
  40567a:	3001      	adds	r0, #1
  40567c:	428c      	cmp	r4, r1
  40567e:	d1f8      	bne.n	405672 <memchr+0x6>
  405680:	4618      	mov	r0, r3
  405682:	bd10      	pop	{r4, pc}
  405684:	2000      	movs	r0, #0
  405686:	bd10      	pop	{r4, pc}

00405688 <memmove>:
  405688:	4281      	cmp	r1, r0
  40568a:	b570      	push	{r4, r5, r6, lr}
  40568c:	d301      	bcc.n	405692 <memmove+0xa>
  40568e:	2300      	movs	r3, #0
  405690:	e00e      	b.n	4056b0 <memmove+0x28>
  405692:	188c      	adds	r4, r1, r2
  405694:	42a0      	cmp	r0, r4
  405696:	d2fa      	bcs.n	40568e <memmove+0x6>
  405698:	1885      	adds	r5, r0, r2
  40569a:	4613      	mov	r3, r2
  40569c:	f113 33ff 	adds.w	r3, r3, #4294967295
  4056a0:	d305      	bcc.n	4056ae <memmove+0x26>
  4056a2:	4251      	negs	r1, r2
  4056a4:	1866      	adds	r6, r4, r1
  4056a6:	5cf6      	ldrb	r6, [r6, r3]
  4056a8:	4429      	add	r1, r5
  4056aa:	54ce      	strb	r6, [r1, r3]
  4056ac:	e7f6      	b.n	40569c <memmove+0x14>
  4056ae:	bd70      	pop	{r4, r5, r6, pc}
  4056b0:	4293      	cmp	r3, r2
  4056b2:	d003      	beq.n	4056bc <memmove+0x34>
  4056b4:	5ccc      	ldrb	r4, [r1, r3]
  4056b6:	54c4      	strb	r4, [r0, r3]
  4056b8:	3301      	adds	r3, #1
  4056ba:	e7f9      	b.n	4056b0 <memmove+0x28>
  4056bc:	bd70      	pop	{r4, r5, r6, pc}

004056be <__malloc_lock>:
  4056be:	4770      	bx	lr

004056c0 <__malloc_unlock>:
  4056c0:	4770      	bx	lr
	...

004056c4 <_Balloc>:
  4056c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4056c6:	b570      	push	{r4, r5, r6, lr}
  4056c8:	4605      	mov	r5, r0
  4056ca:	460c      	mov	r4, r1
  4056cc:	b13b      	cbz	r3, 4056de <_Balloc+0x1a>
  4056ce:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  4056d0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  4056d4:	b160      	cbz	r0, 4056f0 <_Balloc+0x2c>
  4056d6:	6801      	ldr	r1, [r0, #0]
  4056d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  4056dc:	e014      	b.n	405708 <_Balloc+0x44>
  4056de:	2104      	movs	r1, #4
  4056e0:	2221      	movs	r2, #33	; 0x21
  4056e2:	f001 fa77 	bl	406bd4 <_calloc_r>
  4056e6:	64e8      	str	r0, [r5, #76]	; 0x4c
  4056e8:	2800      	cmp	r0, #0
  4056ea:	d1f0      	bne.n	4056ce <_Balloc+0xa>
  4056ec:	2000      	movs	r0, #0
  4056ee:	bd70      	pop	{r4, r5, r6, pc}
  4056f0:	2101      	movs	r1, #1
  4056f2:	fa01 f604 	lsl.w	r6, r1, r4
  4056f6:	1d72      	adds	r2, r6, #5
  4056f8:	4628      	mov	r0, r5
  4056fa:	0092      	lsls	r2, r2, #2
  4056fc:	f001 fa6a 	bl	406bd4 <_calloc_r>
  405700:	2800      	cmp	r0, #0
  405702:	d0f3      	beq.n	4056ec <_Balloc+0x28>
  405704:	6044      	str	r4, [r0, #4]
  405706:	6086      	str	r6, [r0, #8]
  405708:	2200      	movs	r2, #0
  40570a:	6102      	str	r2, [r0, #16]
  40570c:	60c2      	str	r2, [r0, #12]
  40570e:	bd70      	pop	{r4, r5, r6, pc}

00405710 <_Bfree>:
  405710:	b131      	cbz	r1, 405720 <_Bfree+0x10>
  405712:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  405714:	684a      	ldr	r2, [r1, #4]
  405716:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40571a:	6008      	str	r0, [r1, #0]
  40571c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  405720:	4770      	bx	lr

00405722 <__multadd>:
  405722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405726:	460c      	mov	r4, r1
  405728:	461e      	mov	r6, r3
  40572a:	690d      	ldr	r5, [r1, #16]
  40572c:	4607      	mov	r7, r0
  40572e:	3114      	adds	r1, #20
  405730:	2300      	movs	r3, #0
  405732:	6808      	ldr	r0, [r1, #0]
  405734:	3301      	adds	r3, #1
  405736:	fa1f fc80 	uxth.w	ip, r0
  40573a:	0c00      	lsrs	r0, r0, #16
  40573c:	fb02 6c0c 	mla	ip, r2, ip, r6
  405740:	4350      	muls	r0, r2
  405742:	eb00 401c 	add.w	r0, r0, ip, lsr #16
  405746:	fa1f fc8c 	uxth.w	ip, ip
  40574a:	0c06      	lsrs	r6, r0, #16
  40574c:	42ab      	cmp	r3, r5
  40574e:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
  405752:	f841 0b04 	str.w	r0, [r1], #4
  405756:	dbec      	blt.n	405732 <__multadd+0x10>
  405758:	b1d6      	cbz	r6, 405790 <__multadd+0x6e>
  40575a:	68a3      	ldr	r3, [r4, #8]
  40575c:	429d      	cmp	r5, r3
  40575e:	db12      	blt.n	405786 <__multadd+0x64>
  405760:	6861      	ldr	r1, [r4, #4]
  405762:	4638      	mov	r0, r7
  405764:	3101      	adds	r1, #1
  405766:	f7ff ffad 	bl	4056c4 <_Balloc>
  40576a:	6922      	ldr	r2, [r4, #16]
  40576c:	f104 010c 	add.w	r1, r4, #12
  405770:	3202      	adds	r2, #2
  405772:	4680      	mov	r8, r0
  405774:	0092      	lsls	r2, r2, #2
  405776:	300c      	adds	r0, #12
  405778:	f7fd fd24 	bl	4031c4 <memcpy>
  40577c:	4621      	mov	r1, r4
  40577e:	4638      	mov	r0, r7
  405780:	f7ff ffc6 	bl	405710 <_Bfree>
  405784:	4644      	mov	r4, r8
  405786:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  40578a:	3501      	adds	r5, #1
  40578c:	615e      	str	r6, [r3, #20]
  40578e:	6125      	str	r5, [r4, #16]
  405790:	4620      	mov	r0, r4
  405792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405796 <__s2b>:
  405796:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40579a:	4614      	mov	r4, r2
  40579c:	4698      	mov	r8, r3
  40579e:	f103 0208 	add.w	r2, r3, #8
  4057a2:	2309      	movs	r3, #9
  4057a4:	460d      	mov	r5, r1
  4057a6:	fb92 f2f3 	sdiv	r2, r2, r3
  4057aa:	4606      	mov	r6, r0
  4057ac:	2301      	movs	r3, #1
  4057ae:	2100      	movs	r1, #0
  4057b0:	429a      	cmp	r2, r3
  4057b2:	dd02      	ble.n	4057ba <__s2b+0x24>
  4057b4:	005b      	lsls	r3, r3, #1
  4057b6:	3101      	adds	r1, #1
  4057b8:	e7fa      	b.n	4057b0 <__s2b+0x1a>
  4057ba:	4630      	mov	r0, r6
  4057bc:	f7ff ff82 	bl	4056c4 <_Balloc>
  4057c0:	9b08      	ldr	r3, [sp, #32]
  4057c2:	2c09      	cmp	r4, #9
  4057c4:	6143      	str	r3, [r0, #20]
  4057c6:	f04f 0301 	mov.w	r3, #1
  4057ca:	4601      	mov	r1, r0
  4057cc:	6103      	str	r3, [r0, #16]
  4057ce:	dd11      	ble.n	4057f4 <__s2b+0x5e>
  4057d0:	f105 0909 	add.w	r9, r5, #9
  4057d4:	464f      	mov	r7, r9
  4057d6:	4425      	add	r5, r4
  4057d8:	f817 3b01 	ldrb.w	r3, [r7], #1
  4057dc:	4630      	mov	r0, r6
  4057de:	220a      	movs	r2, #10
  4057e0:	3b30      	subs	r3, #48	; 0x30
  4057e2:	f7ff ff9e 	bl	405722 <__multadd>
  4057e6:	42af      	cmp	r7, r5
  4057e8:	4601      	mov	r1, r0
  4057ea:	d1f5      	bne.n	4057d8 <__s2b+0x42>
  4057ec:	eb09 0704 	add.w	r7, r9, r4
  4057f0:	3f08      	subs	r7, #8
  4057f2:	e002      	b.n	4057fa <__s2b+0x64>
  4057f4:	f105 070a 	add.w	r7, r5, #10
  4057f8:	2409      	movs	r4, #9
  4057fa:	4625      	mov	r5, r4
  4057fc:	4545      	cmp	r5, r8
  4057fe:	da09      	bge.n	405814 <__s2b+0x7e>
  405800:	1b3b      	subs	r3, r7, r4
  405802:	5d5b      	ldrb	r3, [r3, r5]
  405804:	4630      	mov	r0, r6
  405806:	220a      	movs	r2, #10
  405808:	3b30      	subs	r3, #48	; 0x30
  40580a:	f7ff ff8a 	bl	405722 <__multadd>
  40580e:	3501      	adds	r5, #1
  405810:	4601      	mov	r1, r0
  405812:	e7f3      	b.n	4057fc <__s2b+0x66>
  405814:	4608      	mov	r0, r1
  405816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040581a <__hi0bits>:
  40581a:	0c03      	lsrs	r3, r0, #16
  40581c:	041b      	lsls	r3, r3, #16
  40581e:	b913      	cbnz	r3, 405826 <__hi0bits+0xc>
  405820:	0400      	lsls	r0, r0, #16
  405822:	2310      	movs	r3, #16
  405824:	e000      	b.n	405828 <__hi0bits+0xe>
  405826:	2300      	movs	r3, #0
  405828:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40582c:	bf04      	itt	eq
  40582e:	0200      	lsleq	r0, r0, #8
  405830:	3308      	addeq	r3, #8
  405832:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  405836:	bf04      	itt	eq
  405838:	0100      	lsleq	r0, r0, #4
  40583a:	3304      	addeq	r3, #4
  40583c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  405840:	bf04      	itt	eq
  405842:	0080      	lsleq	r0, r0, #2
  405844:	3302      	addeq	r3, #2
  405846:	2800      	cmp	r0, #0
  405848:	db03      	blt.n	405852 <__hi0bits+0x38>
  40584a:	0042      	lsls	r2, r0, #1
  40584c:	d503      	bpl.n	405856 <__hi0bits+0x3c>
  40584e:	1c58      	adds	r0, r3, #1
  405850:	4770      	bx	lr
  405852:	4618      	mov	r0, r3
  405854:	4770      	bx	lr
  405856:	2020      	movs	r0, #32
  405858:	4770      	bx	lr

0040585a <__lo0bits>:
  40585a:	6803      	ldr	r3, [r0, #0]
  40585c:	f013 0207 	ands.w	r2, r3, #7
  405860:	d00b      	beq.n	40587a <__lo0bits+0x20>
  405862:	07d9      	lsls	r1, r3, #31
  405864:	d422      	bmi.n	4058ac <__lo0bits+0x52>
  405866:	079a      	lsls	r2, r3, #30
  405868:	d503      	bpl.n	405872 <__lo0bits+0x18>
  40586a:	085b      	lsrs	r3, r3, #1
  40586c:	6003      	str	r3, [r0, #0]
  40586e:	2001      	movs	r0, #1
  405870:	4770      	bx	lr
  405872:	089b      	lsrs	r3, r3, #2
  405874:	6003      	str	r3, [r0, #0]
  405876:	2002      	movs	r0, #2
  405878:	4770      	bx	lr
  40587a:	b299      	uxth	r1, r3
  40587c:	b909      	cbnz	r1, 405882 <__lo0bits+0x28>
  40587e:	0c1b      	lsrs	r3, r3, #16
  405880:	2210      	movs	r2, #16
  405882:	f013 0fff 	tst.w	r3, #255	; 0xff
  405886:	bf04      	itt	eq
  405888:	0a1b      	lsreq	r3, r3, #8
  40588a:	3208      	addeq	r2, #8
  40588c:	0719      	lsls	r1, r3, #28
  40588e:	bf04      	itt	eq
  405890:	091b      	lsreq	r3, r3, #4
  405892:	3204      	addeq	r2, #4
  405894:	0799      	lsls	r1, r3, #30
  405896:	bf04      	itt	eq
  405898:	089b      	lsreq	r3, r3, #2
  40589a:	3202      	addeq	r2, #2
  40589c:	07d9      	lsls	r1, r3, #31
  40589e:	d402      	bmi.n	4058a6 <__lo0bits+0x4c>
  4058a0:	085b      	lsrs	r3, r3, #1
  4058a2:	d005      	beq.n	4058b0 <__lo0bits+0x56>
  4058a4:	3201      	adds	r2, #1
  4058a6:	6003      	str	r3, [r0, #0]
  4058a8:	4610      	mov	r0, r2
  4058aa:	4770      	bx	lr
  4058ac:	2000      	movs	r0, #0
  4058ae:	4770      	bx	lr
  4058b0:	2020      	movs	r0, #32
  4058b2:	4770      	bx	lr

004058b4 <__i2b>:
  4058b4:	b510      	push	{r4, lr}
  4058b6:	460c      	mov	r4, r1
  4058b8:	2101      	movs	r1, #1
  4058ba:	f7ff ff03 	bl	4056c4 <_Balloc>
  4058be:	2201      	movs	r2, #1
  4058c0:	6144      	str	r4, [r0, #20]
  4058c2:	6102      	str	r2, [r0, #16]
  4058c4:	bd10      	pop	{r4, pc}

004058c6 <__multiply>:
  4058c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058ca:	4616      	mov	r6, r2
  4058cc:	6933      	ldr	r3, [r6, #16]
  4058ce:	690a      	ldr	r2, [r1, #16]
  4058d0:	b085      	sub	sp, #20
  4058d2:	429a      	cmp	r2, r3
  4058d4:	460d      	mov	r5, r1
  4058d6:	da01      	bge.n	4058dc <__multiply+0x16>
  4058d8:	4635      	mov	r5, r6
  4058da:	460e      	mov	r6, r1
  4058dc:	f8d5 8010 	ldr.w	r8, [r5, #16]
  4058e0:	6937      	ldr	r7, [r6, #16]
  4058e2:	68ab      	ldr	r3, [r5, #8]
  4058e4:	6869      	ldr	r1, [r5, #4]
  4058e6:	eb08 0407 	add.w	r4, r8, r7
  4058ea:	429c      	cmp	r4, r3
  4058ec:	bfc8      	it	gt
  4058ee:	3101      	addgt	r1, #1
  4058f0:	f7ff fee8 	bl	4056c4 <_Balloc>
  4058f4:	f100 0314 	add.w	r3, r0, #20
  4058f8:	eb03 0184 	add.w	r1, r3, r4, lsl #2
  4058fc:	9101      	str	r1, [sp, #4]
  4058fe:	461a      	mov	r2, r3
  405900:	f8dd a004 	ldr.w	sl, [sp, #4]
  405904:	4552      	cmp	r2, sl
  405906:	d203      	bcs.n	405910 <__multiply+0x4a>
  405908:	2100      	movs	r1, #0
  40590a:	f842 1b04 	str.w	r1, [r2], #4
  40590e:	e7f7      	b.n	405900 <__multiply+0x3a>
  405910:	f105 0114 	add.w	r1, r5, #20
  405914:	f106 0214 	add.w	r2, r6, #20
  405918:	eb01 0888 	add.w	r8, r1, r8, lsl #2
  40591c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  405920:	f8cd 8008 	str.w	r8, [sp, #8]
  405924:	9703      	str	r7, [sp, #12]
  405926:	9e03      	ldr	r6, [sp, #12]
  405928:	4615      	mov	r5, r2
  40592a:	42b2      	cmp	r2, r6
  40592c:	d256      	bcs.n	4059dc <__multiply+0x116>
  40592e:	f8b5 c000 	ldrh.w	ip, [r5]
  405932:	3204      	adds	r2, #4
  405934:	f1bc 0f00 	cmp.w	ip, #0
  405938:	d025      	beq.n	405986 <__multiply+0xc0>
  40593a:	460f      	mov	r7, r1
  40593c:	461d      	mov	r5, r3
  40593e:	2600      	movs	r6, #0
  405940:	f857 9b04 	ldr.w	r9, [r7], #4
  405944:	f8d5 8000 	ldr.w	r8, [r5]
  405948:	fa1f fb89 	uxth.w	fp, r9
  40594c:	fa1f fa88 	uxth.w	sl, r8
  405950:	fb0c aa0b 	mla	sl, ip, fp, sl
  405954:	ea4f 4919 	mov.w	r9, r9, lsr #16
  405958:	ea4f 4818 	mov.w	r8, r8, lsr #16
  40595c:	fb0c 8809 	mla	r8, ip, r9, r8
  405960:	44b2      	add	sl, r6
  405962:	eb08 481a 	add.w	r8, r8, sl, lsr #16
  405966:	fa1f fa8a 	uxth.w	sl, sl
  40596a:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
  40596e:	ea4f 4618 	mov.w	r6, r8, lsr #16
  405972:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405976:	46ab      	mov	fp, r5
  405978:	45b8      	cmp	r8, r7
  40597a:	f84b ab04 	str.w	sl, [fp], #4
  40597e:	d901      	bls.n	405984 <__multiply+0xbe>
  405980:	465d      	mov	r5, fp
  405982:	e7dd      	b.n	405940 <__multiply+0x7a>
  405984:	606e      	str	r6, [r5, #4]
  405986:	f832 8c02 	ldrh.w	r8, [r2, #-2]
  40598a:	f1b8 0f00 	cmp.w	r8, #0
  40598e:	d023      	beq.n	4059d8 <__multiply+0x112>
  405990:	681e      	ldr	r6, [r3, #0]
  405992:	460f      	mov	r7, r1
  405994:	461d      	mov	r5, r3
  405996:	f04f 0900 	mov.w	r9, #0
  40599a:	f8b7 a000 	ldrh.w	sl, [r7]
  40599e:	f8b5 c002 	ldrh.w	ip, [r5, #2]
  4059a2:	b2b6      	uxth	r6, r6
  4059a4:	fb08 cc0a 	mla	ip, r8, sl, ip
  4059a8:	44e1      	add	r9, ip
  4059aa:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  4059ae:	46ac      	mov	ip, r5
  4059b0:	f84c 6b04 	str.w	r6, [ip], #4
  4059b4:	f857 6b04 	ldr.w	r6, [r7], #4
  4059b8:	f8b5 a004 	ldrh.w	sl, [r5, #4]
  4059bc:	0c36      	lsrs	r6, r6, #16
  4059be:	fb08 a606 	mla	r6, r8, r6, sl
  4059c2:	f8dd a008 	ldr.w	sl, [sp, #8]
  4059c6:	eb06 4619 	add.w	r6, r6, r9, lsr #16
  4059ca:	4557      	cmp	r7, sl
  4059cc:	ea4f 4916 	mov.w	r9, r6, lsr #16
  4059d0:	d201      	bcs.n	4059d6 <__multiply+0x110>
  4059d2:	4665      	mov	r5, ip
  4059d4:	e7e1      	b.n	40599a <__multiply+0xd4>
  4059d6:	606e      	str	r6, [r5, #4]
  4059d8:	3304      	adds	r3, #4
  4059da:	e7a4      	b.n	405926 <__multiply+0x60>
  4059dc:	9b01      	ldr	r3, [sp, #4]
  4059de:	2c00      	cmp	r4, #0
  4059e0:	dc03      	bgt.n	4059ea <__multiply+0x124>
  4059e2:	6104      	str	r4, [r0, #16]
  4059e4:	b005      	add	sp, #20
  4059e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059ea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4059ee:	2a00      	cmp	r2, #0
  4059f0:	d1f7      	bne.n	4059e2 <__multiply+0x11c>
  4059f2:	3c01      	subs	r4, #1
  4059f4:	e7f3      	b.n	4059de <__multiply+0x118>

004059f6 <__pow5mult>:
  4059f6:	f012 0303 	ands.w	r3, r2, #3
  4059fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059fe:	4605      	mov	r5, r0
  405a00:	460e      	mov	r6, r1
  405a02:	4617      	mov	r7, r2
  405a04:	d007      	beq.n	405a16 <__pow5mult+0x20>
  405a06:	4a1a      	ldr	r2, [pc, #104]	; (405a70 <__pow5mult+0x7a>)
  405a08:	3b01      	subs	r3, #1
  405a0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  405a0e:	2300      	movs	r3, #0
  405a10:	f7ff fe87 	bl	405722 <__multadd>
  405a14:	4606      	mov	r6, r0
  405a16:	10bf      	asrs	r7, r7, #2
  405a18:	d027      	beq.n	405a6a <__pow5mult+0x74>
  405a1a:	6cac      	ldr	r4, [r5, #72]	; 0x48
  405a1c:	b974      	cbnz	r4, 405a3c <__pow5mult+0x46>
  405a1e:	4628      	mov	r0, r5
  405a20:	f240 2171 	movw	r1, #625	; 0x271
  405a24:	f7ff ff46 	bl	4058b4 <__i2b>
  405a28:	2300      	movs	r3, #0
  405a2a:	64a8      	str	r0, [r5, #72]	; 0x48
  405a2c:	4604      	mov	r4, r0
  405a2e:	6003      	str	r3, [r0, #0]
  405a30:	e004      	b.n	405a3c <__pow5mult+0x46>
  405a32:	107f      	asrs	r7, r7, #1
  405a34:	d019      	beq.n	405a6a <__pow5mult+0x74>
  405a36:	6820      	ldr	r0, [r4, #0]
  405a38:	b170      	cbz	r0, 405a58 <__pow5mult+0x62>
  405a3a:	4604      	mov	r4, r0
  405a3c:	07fb      	lsls	r3, r7, #31
  405a3e:	d5f8      	bpl.n	405a32 <__pow5mult+0x3c>
  405a40:	4631      	mov	r1, r6
  405a42:	4622      	mov	r2, r4
  405a44:	4628      	mov	r0, r5
  405a46:	f7ff ff3e 	bl	4058c6 <__multiply>
  405a4a:	4631      	mov	r1, r6
  405a4c:	4680      	mov	r8, r0
  405a4e:	4628      	mov	r0, r5
  405a50:	f7ff fe5e 	bl	405710 <_Bfree>
  405a54:	4646      	mov	r6, r8
  405a56:	e7ec      	b.n	405a32 <__pow5mult+0x3c>
  405a58:	4628      	mov	r0, r5
  405a5a:	4621      	mov	r1, r4
  405a5c:	4622      	mov	r2, r4
  405a5e:	f7ff ff32 	bl	4058c6 <__multiply>
  405a62:	2300      	movs	r3, #0
  405a64:	6020      	str	r0, [r4, #0]
  405a66:	6003      	str	r3, [r0, #0]
  405a68:	e7e7      	b.n	405a3a <__pow5mult+0x44>
  405a6a:	4630      	mov	r0, r6
  405a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a70:	00407d10 	.word	0x00407d10

00405a74 <__lshift>:
  405a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405a78:	460c      	mov	r4, r1
  405a7a:	6923      	ldr	r3, [r4, #16]
  405a7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
  405a80:	eb0a 0903 	add.w	r9, sl, r3
  405a84:	6849      	ldr	r1, [r1, #4]
  405a86:	68a3      	ldr	r3, [r4, #8]
  405a88:	4680      	mov	r8, r0
  405a8a:	4615      	mov	r5, r2
  405a8c:	f109 0701 	add.w	r7, r9, #1
  405a90:	429f      	cmp	r7, r3
  405a92:	dd02      	ble.n	405a9a <__lshift+0x26>
  405a94:	3101      	adds	r1, #1
  405a96:	005b      	lsls	r3, r3, #1
  405a98:	e7fa      	b.n	405a90 <__lshift+0x1c>
  405a9a:	4640      	mov	r0, r8
  405a9c:	f7ff fe12 	bl	4056c4 <_Balloc>
  405aa0:	2300      	movs	r3, #0
  405aa2:	4606      	mov	r6, r0
  405aa4:	f100 0214 	add.w	r2, r0, #20
  405aa8:	4553      	cmp	r3, sl
  405aaa:	da04      	bge.n	405ab6 <__lshift+0x42>
  405aac:	2100      	movs	r1, #0
  405aae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  405ab2:	3301      	adds	r3, #1
  405ab4:	e7f8      	b.n	405aa8 <__lshift+0x34>
  405ab6:	6920      	ldr	r0, [r4, #16]
  405ab8:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
  405abc:	f104 0314 	add.w	r3, r4, #20
  405ac0:	f015 0c1f 	ands.w	ip, r5, #31
  405ac4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  405ac8:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
  405acc:	d016      	beq.n	405afc <__lshift+0x88>
  405ace:	f1cc 0a20 	rsb	sl, ip, #32
  405ad2:	2500      	movs	r5, #0
  405ad4:	6818      	ldr	r0, [r3, #0]
  405ad6:	460a      	mov	r2, r1
  405ad8:	fa00 f00c 	lsl.w	r0, r0, ip
  405adc:	4305      	orrs	r5, r0
  405ade:	f842 5b04 	str.w	r5, [r2], #4
  405ae2:	f853 5b04 	ldr.w	r5, [r3], #4
  405ae6:	4573      	cmp	r3, lr
  405ae8:	fa25 f50a 	lsr.w	r5, r5, sl
  405aec:	d201      	bcs.n	405af2 <__lshift+0x7e>
  405aee:	4611      	mov	r1, r2
  405af0:	e7f0      	b.n	405ad4 <__lshift+0x60>
  405af2:	604d      	str	r5, [r1, #4]
  405af4:	b145      	cbz	r5, 405b08 <__lshift+0x94>
  405af6:	f109 0702 	add.w	r7, r9, #2
  405afa:	e005      	b.n	405b08 <__lshift+0x94>
  405afc:	f853 2b04 	ldr.w	r2, [r3], #4
  405b00:	4573      	cmp	r3, lr
  405b02:	f841 2b04 	str.w	r2, [r1], #4
  405b06:	d3f9      	bcc.n	405afc <__lshift+0x88>
  405b08:	3f01      	subs	r7, #1
  405b0a:	4640      	mov	r0, r8
  405b0c:	6137      	str	r7, [r6, #16]
  405b0e:	4621      	mov	r1, r4
  405b10:	f7ff fdfe 	bl	405710 <_Bfree>
  405b14:	4630      	mov	r0, r6
  405b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00405b1a <__mcmp>:
  405b1a:	6902      	ldr	r2, [r0, #16]
  405b1c:	690b      	ldr	r3, [r1, #16]
  405b1e:	b510      	push	{r4, lr}
  405b20:	1ad2      	subs	r2, r2, r3
  405b22:	d113      	bne.n	405b4c <__mcmp+0x32>
  405b24:	009c      	lsls	r4, r3, #2
  405b26:	3014      	adds	r0, #20
  405b28:	f101 0214 	add.w	r2, r1, #20
  405b2c:	1903      	adds	r3, r0, r4
  405b2e:	4422      	add	r2, r4
  405b30:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405b34:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  405b38:	428c      	cmp	r4, r1
  405b3a:	d003      	beq.n	405b44 <__mcmp+0x2a>
  405b3c:	d208      	bcs.n	405b50 <__mcmp+0x36>
  405b3e:	f04f 30ff 	mov.w	r0, #4294967295
  405b42:	bd10      	pop	{r4, pc}
  405b44:	4298      	cmp	r0, r3
  405b46:	d3f3      	bcc.n	405b30 <__mcmp+0x16>
  405b48:	2000      	movs	r0, #0
  405b4a:	bd10      	pop	{r4, pc}
  405b4c:	4610      	mov	r0, r2
  405b4e:	bd10      	pop	{r4, pc}
  405b50:	2001      	movs	r0, #1
  405b52:	bd10      	pop	{r4, pc}

00405b54 <__mdiff>:
  405b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405b58:	4606      	mov	r6, r0
  405b5a:	460c      	mov	r4, r1
  405b5c:	4608      	mov	r0, r1
  405b5e:	4611      	mov	r1, r2
  405b60:	4615      	mov	r5, r2
  405b62:	f7ff ffda 	bl	405b1a <__mcmp>
  405b66:	1e07      	subs	r7, r0, #0
  405b68:	d108      	bne.n	405b7c <__mdiff+0x28>
  405b6a:	4630      	mov	r0, r6
  405b6c:	4639      	mov	r1, r7
  405b6e:	f7ff fda9 	bl	4056c4 <_Balloc>
  405b72:	2301      	movs	r3, #1
  405b74:	6103      	str	r3, [r0, #16]
  405b76:	6147      	str	r7, [r0, #20]
  405b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405b7c:	db01      	blt.n	405b82 <__mdiff+0x2e>
  405b7e:	2700      	movs	r7, #0
  405b80:	e003      	b.n	405b8a <__mdiff+0x36>
  405b82:	4623      	mov	r3, r4
  405b84:	2701      	movs	r7, #1
  405b86:	462c      	mov	r4, r5
  405b88:	461d      	mov	r5, r3
  405b8a:	6861      	ldr	r1, [r4, #4]
  405b8c:	4630      	mov	r0, r6
  405b8e:	f7ff fd99 	bl	4056c4 <_Balloc>
  405b92:	6922      	ldr	r2, [r4, #16]
  405b94:	692b      	ldr	r3, [r5, #16]
  405b96:	3414      	adds	r4, #20
  405b98:	f105 0614 	add.w	r6, r5, #20
  405b9c:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
  405ba0:	60c7      	str	r7, [r0, #12]
  405ba2:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
  405ba6:	f100 0314 	add.w	r3, r0, #20
  405baa:	2100      	movs	r1, #0
  405bac:	f854 7b04 	ldr.w	r7, [r4], #4
  405bb0:	f856 9b04 	ldr.w	r9, [r6], #4
  405bb4:	fa1f f887 	uxth.w	r8, r7
  405bb8:	fa1f f589 	uxth.w	r5, r9
  405bbc:	4441      	add	r1, r8
  405bbe:	ea4f 4919 	mov.w	r9, r9, lsr #16
  405bc2:	ebc5 0801 	rsb	r8, r5, r1
  405bc6:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
  405bca:	eb07 4728 	add.w	r7, r7, r8, asr #16
  405bce:	fa1f f888 	uxth.w	r8, r8
  405bd2:	1439      	asrs	r1, r7, #16
  405bd4:	45b2      	cmp	sl, r6
  405bd6:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  405bda:	4625      	mov	r5, r4
  405bdc:	f843 7b04 	str.w	r7, [r3], #4
  405be0:	d8e4      	bhi.n	405bac <__mdiff+0x58>
  405be2:	4565      	cmp	r5, ip
  405be4:	d20d      	bcs.n	405c02 <__mdiff+0xae>
  405be6:	f855 4b04 	ldr.w	r4, [r5], #4
  405bea:	b2a6      	uxth	r6, r4
  405bec:	440e      	add	r6, r1
  405bee:	0c24      	lsrs	r4, r4, #16
  405bf0:	eb04 4426 	add.w	r4, r4, r6, asr #16
  405bf4:	b2b6      	uxth	r6, r6
  405bf6:	1421      	asrs	r1, r4, #16
  405bf8:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  405bfc:	f843 4b04 	str.w	r4, [r3], #4
  405c00:	e7ef      	b.n	405be2 <__mdiff+0x8e>
  405c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  405c06:	b909      	cbnz	r1, 405c0c <__mdiff+0xb8>
  405c08:	3a01      	subs	r2, #1
  405c0a:	e7fa      	b.n	405c02 <__mdiff+0xae>
  405c0c:	6102      	str	r2, [r0, #16]
  405c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00405c12 <__ulp>:
  405c12:	4b0f      	ldr	r3, [pc, #60]	; (405c50 <__ulp+0x3e>)
  405c14:	400b      	ands	r3, r1
  405c16:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  405c1a:	2b00      	cmp	r3, #0
  405c1c:	dd01      	ble.n	405c22 <__ulp+0x10>
  405c1e:	4619      	mov	r1, r3
  405c20:	e009      	b.n	405c36 <__ulp+0x24>
  405c22:	425b      	negs	r3, r3
  405c24:	151b      	asrs	r3, r3, #20
  405c26:	2b13      	cmp	r3, #19
  405c28:	f04f 0100 	mov.w	r1, #0
  405c2c:	dc05      	bgt.n	405c3a <__ulp+0x28>
  405c2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405c32:	fa42 f103 	asr.w	r1, r2, r3
  405c36:	2000      	movs	r0, #0
  405c38:	4770      	bx	lr
  405c3a:	2b32      	cmp	r3, #50	; 0x32
  405c3c:	f04f 0201 	mov.w	r2, #1
  405c40:	bfda      	itte	le
  405c42:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  405c46:	fa02 f303 	lslle.w	r3, r2, r3
  405c4a:	4613      	movgt	r3, r2
  405c4c:	4618      	mov	r0, r3
  405c4e:	4770      	bx	lr
  405c50:	7ff00000 	.word	0x7ff00000

00405c54 <__b2d>:
  405c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405c58:	6906      	ldr	r6, [r0, #16]
  405c5a:	f100 0714 	add.w	r7, r0, #20
  405c5e:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  405c62:	f856 4c04 	ldr.w	r4, [r6, #-4]
  405c66:	4688      	mov	r8, r1
  405c68:	4620      	mov	r0, r4
  405c6a:	f7ff fdd6 	bl	40581a <__hi0bits>
  405c6e:	f1c0 0320 	rsb	r3, r0, #32
  405c72:	280a      	cmp	r0, #10
  405c74:	f1a6 0504 	sub.w	r5, r6, #4
  405c78:	f8c8 3000 	str.w	r3, [r8]
  405c7c:	dc14      	bgt.n	405ca8 <__b2d+0x54>
  405c7e:	42bd      	cmp	r5, r7
  405c80:	f1c0 010b 	rsb	r1, r0, #11
  405c84:	bf88      	it	hi
  405c86:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
  405c8a:	fa24 fc01 	lsr.w	ip, r4, r1
  405c8e:	bf98      	it	ls
  405c90:	2500      	movls	r5, #0
  405c92:	3015      	adds	r0, #21
  405c94:	fa25 f101 	lsr.w	r1, r5, r1
  405c98:	4084      	lsls	r4, r0
  405c9a:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  405c9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  405ca2:	ea41 0204 	orr.w	r2, r1, r4
  405ca6:	e024      	b.n	405cf2 <__b2d+0x9e>
  405ca8:	42bd      	cmp	r5, r7
  405caa:	bf86      	itte	hi
  405cac:	f1a6 0508 	subhi.w	r5, r6, #8
  405cb0:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
  405cb4:	2100      	movls	r1, #0
  405cb6:	f1b0 060b 	subs.w	r6, r0, #11
  405cba:	d015      	beq.n	405ce8 <__b2d+0x94>
  405cbc:	40b4      	lsls	r4, r6
  405cbe:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  405cc2:	fa21 fc00 	lsr.w	ip, r1, r0
  405cc6:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  405cca:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  405cce:	42bd      	cmp	r5, r7
  405cd0:	ea44 030c 	orr.w	r3, r4, ip
  405cd4:	bf8c      	ite	hi
  405cd6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
  405cda:	2400      	movls	r4, #0
  405cdc:	fa24 f000 	lsr.w	r0, r4, r0
  405ce0:	40b1      	lsls	r1, r6
  405ce2:	ea40 0201 	orr.w	r2, r0, r1
  405ce6:	e004      	b.n	405cf2 <__b2d+0x9e>
  405ce8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  405cec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  405cf0:	460a      	mov	r2, r1
  405cf2:	4610      	mov	r0, r2
  405cf4:	4619      	mov	r1, r3
  405cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405cfa <__d2b>:
  405cfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  405cfe:	2101      	movs	r1, #1
  405d00:	461d      	mov	r5, r3
  405d02:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  405d06:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  405d0a:	4614      	mov	r4, r2
  405d0c:	f7ff fcda 	bl	4056c4 <_Balloc>
  405d10:	f3c5 570a 	ubfx	r7, r5, #20, #11
  405d14:	4606      	mov	r6, r0
  405d16:	f3c5 0313 	ubfx	r3, r5, #0, #20
  405d1a:	b10f      	cbz	r7, 405d20 <__d2b+0x26>
  405d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405d20:	9301      	str	r3, [sp, #4]
  405d22:	b1d4      	cbz	r4, 405d5a <__d2b+0x60>
  405d24:	a802      	add	r0, sp, #8
  405d26:	f840 4d08 	str.w	r4, [r0, #-8]!
  405d2a:	4668      	mov	r0, sp
  405d2c:	f7ff fd95 	bl	40585a <__lo0bits>
  405d30:	9b00      	ldr	r3, [sp, #0]
  405d32:	b148      	cbz	r0, 405d48 <__d2b+0x4e>
  405d34:	9a01      	ldr	r2, [sp, #4]
  405d36:	f1c0 0120 	rsb	r1, r0, #32
  405d3a:	fa02 f101 	lsl.w	r1, r2, r1
  405d3e:	40c2      	lsrs	r2, r0
  405d40:	430b      	orrs	r3, r1
  405d42:	6173      	str	r3, [r6, #20]
  405d44:	9201      	str	r2, [sp, #4]
  405d46:	e000      	b.n	405d4a <__d2b+0x50>
  405d48:	6173      	str	r3, [r6, #20]
  405d4a:	9b01      	ldr	r3, [sp, #4]
  405d4c:	2b00      	cmp	r3, #0
  405d4e:	bf0c      	ite	eq
  405d50:	2401      	moveq	r4, #1
  405d52:	2402      	movne	r4, #2
  405d54:	61b3      	str	r3, [r6, #24]
  405d56:	6134      	str	r4, [r6, #16]
  405d58:	e007      	b.n	405d6a <__d2b+0x70>
  405d5a:	a801      	add	r0, sp, #4
  405d5c:	f7ff fd7d 	bl	40585a <__lo0bits>
  405d60:	9b01      	ldr	r3, [sp, #4]
  405d62:	2401      	movs	r4, #1
  405d64:	6173      	str	r3, [r6, #20]
  405d66:	6134      	str	r4, [r6, #16]
  405d68:	3020      	adds	r0, #32
  405d6a:	b13f      	cbz	r7, 405d7c <__d2b+0x82>
  405d6c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405d70:	4407      	add	r7, r0
  405d72:	f8c9 7000 	str.w	r7, [r9]
  405d76:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405d7a:	e00a      	b.n	405d92 <__d2b+0x98>
  405d7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405d80:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  405d84:	f8c9 0000 	str.w	r0, [r9]
  405d88:	6918      	ldr	r0, [r3, #16]
  405d8a:	f7ff fd46 	bl	40581a <__hi0bits>
  405d8e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  405d92:	f8c8 0000 	str.w	r0, [r8]
  405d96:	4630      	mov	r0, r6
  405d98:	b003      	add	sp, #12
  405d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00405d9e <__ratio>:
  405d9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405da2:	460e      	mov	r6, r1
  405da4:	4669      	mov	r1, sp
  405da6:	4680      	mov	r8, r0
  405da8:	f7ff ff54 	bl	405c54 <__b2d>
  405dac:	460d      	mov	r5, r1
  405dae:	4604      	mov	r4, r0
  405db0:	a901      	add	r1, sp, #4
  405db2:	4630      	mov	r0, r6
  405db4:	f7ff ff4e 	bl	405c54 <__b2d>
  405db8:	9f00      	ldr	r7, [sp, #0]
  405dba:	460b      	mov	r3, r1
  405dbc:	9901      	ldr	r1, [sp, #4]
  405dbe:	4602      	mov	r2, r0
  405dc0:	1a7f      	subs	r7, r7, r1
  405dc2:	f8d8 0010 	ldr.w	r0, [r8, #16]
  405dc6:	6931      	ldr	r1, [r6, #16]
  405dc8:	1a41      	subs	r1, r0, r1
  405dca:	eb07 1141 	add.w	r1, r7, r1, lsl #5
  405dce:	2900      	cmp	r1, #0
  405dd0:	bfcc      	ite	gt
  405dd2:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
  405dd6:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
  405dda:	4620      	mov	r0, r4
  405ddc:	4629      	mov	r1, r5
  405dde:	f001 fa09 	bl	4071f4 <__aeabi_ddiv>
  405de2:	b002      	add	sp, #8
  405de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405de8 <_mprec_log10>:
  405de8:	2817      	cmp	r0, #23
  405dea:	b510      	push	{r4, lr}
  405dec:	4604      	mov	r4, r0
  405dee:	dc05      	bgt.n	405dfc <_mprec_log10+0x14>
  405df0:	4b07      	ldr	r3, [pc, #28]	; (405e10 <_mprec_log10+0x28>)
  405df2:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
  405df6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  405dfa:	bd10      	pop	{r4, pc}
  405dfc:	4905      	ldr	r1, [pc, #20]	; (405e14 <_mprec_log10+0x2c>)
  405dfe:	2000      	movs	r0, #0
  405e00:	2200      	movs	r2, #0
  405e02:	4b05      	ldr	r3, [pc, #20]	; (405e18 <_mprec_log10+0x30>)
  405e04:	f001 f8cc 	bl	406fa0 <__aeabi_dmul>
  405e08:	3c01      	subs	r4, #1
  405e0a:	d1f9      	bne.n	405e00 <_mprec_log10+0x18>
  405e0c:	bd10      	pop	{r4, pc}
  405e0e:	bf00      	nop
  405e10:	00407d10 	.word	0x00407d10
  405e14:	3ff00000 	.word	0x3ff00000
  405e18:	40240000 	.word	0x40240000

00405e1c <__copybits>:
  405e1c:	b510      	push	{r4, lr}
  405e1e:	3901      	subs	r1, #1
  405e20:	f102 0314 	add.w	r3, r2, #20
  405e24:	1149      	asrs	r1, r1, #5
  405e26:	6912      	ldr	r2, [r2, #16]
  405e28:	3101      	adds	r1, #1
  405e2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  405e2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  405e32:	4293      	cmp	r3, r2
  405e34:	d204      	bcs.n	405e40 <__copybits+0x24>
  405e36:	f853 4b04 	ldr.w	r4, [r3], #4
  405e3a:	f840 4b04 	str.w	r4, [r0], #4
  405e3e:	e7f8      	b.n	405e32 <__copybits+0x16>
  405e40:	4288      	cmp	r0, r1
  405e42:	d203      	bcs.n	405e4c <__copybits+0x30>
  405e44:	2300      	movs	r3, #0
  405e46:	f840 3b04 	str.w	r3, [r0], #4
  405e4a:	e7f9      	b.n	405e40 <__copybits+0x24>
  405e4c:	bd10      	pop	{r4, pc}

00405e4e <__any_on>:
  405e4e:	f100 0214 	add.w	r2, r0, #20
  405e52:	6900      	ldr	r0, [r0, #16]
  405e54:	114b      	asrs	r3, r1, #5
  405e56:	4283      	cmp	r3, r0
  405e58:	b510      	push	{r4, lr}
  405e5a:	dc0c      	bgt.n	405e76 <__any_on+0x28>
  405e5c:	da0c      	bge.n	405e78 <__any_on+0x2a>
  405e5e:	f011 011f 	ands.w	r1, r1, #31
  405e62:	d009      	beq.n	405e78 <__any_on+0x2a>
  405e64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  405e68:	fa20 f401 	lsr.w	r4, r0, r1
  405e6c:	fa04 f101 	lsl.w	r1, r4, r1
  405e70:	4281      	cmp	r1, r0
  405e72:	d10e      	bne.n	405e92 <__any_on+0x44>
  405e74:	e000      	b.n	405e78 <__any_on+0x2a>
  405e76:	4603      	mov	r3, r0
  405e78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  405e7c:	4293      	cmp	r3, r2
  405e7e:	4619      	mov	r1, r3
  405e80:	d905      	bls.n	405e8e <__any_on+0x40>
  405e82:	f851 1c04 	ldr.w	r1, [r1, #-4]
  405e86:	3b04      	subs	r3, #4
  405e88:	2900      	cmp	r1, #0
  405e8a:	d0f7      	beq.n	405e7c <__any_on+0x2e>
  405e8c:	e001      	b.n	405e92 <__any_on+0x44>
  405e8e:	2000      	movs	r0, #0
  405e90:	bd10      	pop	{r4, pc}
  405e92:	2001      	movs	r0, #1
  405e94:	bd10      	pop	{r4, pc}
  405e96:	bf00      	nop

00405e98 <_realloc_r>:
  405e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e9c:	4681      	mov	r9, r0
  405e9e:	460c      	mov	r4, r1
  405ea0:	b929      	cbnz	r1, 405eae <_realloc_r+0x16>
  405ea2:	4611      	mov	r1, r2
  405ea4:	b003      	add	sp, #12
  405ea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405eaa:	f7ff b9d7 	b.w	40525c <_malloc_r>
  405eae:	9201      	str	r2, [sp, #4]
  405eb0:	f7ff fc05 	bl	4056be <__malloc_lock>
  405eb4:	9a01      	ldr	r2, [sp, #4]
  405eb6:	f854 5c04 	ldr.w	r5, [r4, #-4]
  405eba:	f102 070b 	add.w	r7, r2, #11
  405ebe:	2f16      	cmp	r7, #22
  405ec0:	f1a4 0808 	sub.w	r8, r4, #8
  405ec4:	f025 0603 	bic.w	r6, r5, #3
  405ec8:	d903      	bls.n	405ed2 <_realloc_r+0x3a>
  405eca:	f037 0707 	bics.w	r7, r7, #7
  405ece:	d501      	bpl.n	405ed4 <_realloc_r+0x3c>
  405ed0:	e002      	b.n	405ed8 <_realloc_r+0x40>
  405ed2:	2710      	movs	r7, #16
  405ed4:	4297      	cmp	r7, r2
  405ed6:	d204      	bcs.n	405ee2 <_realloc_r+0x4a>
  405ed8:	230c      	movs	r3, #12
  405eda:	f8c9 3000 	str.w	r3, [r9]
  405ede:	2000      	movs	r0, #0
  405ee0:	e180      	b.n	4061e4 <_realloc_r+0x34c>
  405ee2:	42be      	cmp	r6, r7
  405ee4:	f280 8156 	bge.w	406194 <_realloc_r+0x2fc>
  405ee8:	49a3      	ldr	r1, [pc, #652]	; (406178 <_realloc_r+0x2e0>)
  405eea:	eb08 0306 	add.w	r3, r8, r6
  405eee:	f8d1 e008 	ldr.w	lr, [r1, #8]
  405ef2:	468b      	mov	fp, r1
  405ef4:	4573      	cmp	r3, lr
  405ef6:	6858      	ldr	r0, [r3, #4]
  405ef8:	d005      	beq.n	405f06 <_realloc_r+0x6e>
  405efa:	f020 0101 	bic.w	r1, r0, #1
  405efe:	4419      	add	r1, r3
  405f00:	6849      	ldr	r1, [r1, #4]
  405f02:	07c9      	lsls	r1, r1, #31
  405f04:	d425      	bmi.n	405f52 <_realloc_r+0xba>
  405f06:	f020 0003 	bic.w	r0, r0, #3
  405f0a:	4573      	cmp	r3, lr
  405f0c:	eb00 0106 	add.w	r1, r0, r6
  405f10:	d117      	bne.n	405f42 <_realloc_r+0xaa>
  405f12:	f107 0c10 	add.w	ip, r7, #16
  405f16:	4561      	cmp	r1, ip
  405f18:	db1d      	blt.n	405f56 <_realloc_r+0xbe>
  405f1a:	1bc9      	subs	r1, r1, r7
  405f1c:	eb08 0507 	add.w	r5, r8, r7
  405f20:	f041 0101 	orr.w	r1, r1, #1
  405f24:	f8cb 5008 	str.w	r5, [fp, #8]
  405f28:	6069      	str	r1, [r5, #4]
  405f2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405f2e:	4648      	mov	r0, r9
  405f30:	f003 0301 	and.w	r3, r3, #1
  405f34:	431f      	orrs	r7, r3
  405f36:	f844 7c04 	str.w	r7, [r4, #-4]
  405f3a:	f7ff fbc1 	bl	4056c0 <__malloc_unlock>
  405f3e:	4620      	mov	r0, r4
  405f40:	e150      	b.n	4061e4 <_realloc_r+0x34c>
  405f42:	42b9      	cmp	r1, r7
  405f44:	db07      	blt.n	405f56 <_realloc_r+0xbe>
  405f46:	68da      	ldr	r2, [r3, #12]
  405f48:	689b      	ldr	r3, [r3, #8]
  405f4a:	460e      	mov	r6, r1
  405f4c:	60da      	str	r2, [r3, #12]
  405f4e:	6093      	str	r3, [r2, #8]
  405f50:	e120      	b.n	406194 <_realloc_r+0x2fc>
  405f52:	2000      	movs	r0, #0
  405f54:	4603      	mov	r3, r0
  405f56:	07e9      	lsls	r1, r5, #31
  405f58:	f100 80cb 	bmi.w	4060f2 <_realloc_r+0x25a>
  405f5c:	f854 5c08 	ldr.w	r5, [r4, #-8]
  405f60:	ebc5 0508 	rsb	r5, r5, r8
  405f64:	6869      	ldr	r1, [r5, #4]
  405f66:	f021 0103 	bic.w	r1, r1, #3
  405f6a:	eb01 0a06 	add.w	sl, r1, r6
  405f6e:	2b00      	cmp	r3, #0
  405f70:	f000 808a 	beq.w	406088 <_realloc_r+0x1f0>
  405f74:	4573      	cmp	r3, lr
  405f76:	d14d      	bne.n	406014 <_realloc_r+0x17c>
  405f78:	eb0a 0300 	add.w	r3, sl, r0
  405f7c:	f107 0110 	add.w	r1, r7, #16
  405f80:	428b      	cmp	r3, r1
  405f82:	f2c0 8081 	blt.w	406088 <_realloc_r+0x1f0>
  405f86:	46a8      	mov	r8, r5
  405f88:	68ea      	ldr	r2, [r5, #12]
  405f8a:	f858 1f08 	ldr.w	r1, [r8, #8]!
  405f8e:	60ca      	str	r2, [r1, #12]
  405f90:	6091      	str	r1, [r2, #8]
  405f92:	1f32      	subs	r2, r6, #4
  405f94:	2a24      	cmp	r2, #36	; 0x24
  405f96:	d826      	bhi.n	405fe6 <_realloc_r+0x14e>
  405f98:	2a13      	cmp	r2, #19
  405f9a:	d91c      	bls.n	405fd6 <_realloc_r+0x13e>
  405f9c:	6821      	ldr	r1, [r4, #0]
  405f9e:	2a1b      	cmp	r2, #27
  405fa0:	60a9      	str	r1, [r5, #8]
  405fa2:	6861      	ldr	r1, [r4, #4]
  405fa4:	60e9      	str	r1, [r5, #12]
  405fa6:	d803      	bhi.n	405fb0 <_realloc_r+0x118>
  405fa8:	f105 0210 	add.w	r2, r5, #16
  405fac:	3408      	adds	r4, #8
  405fae:	e013      	b.n	405fd8 <_realloc_r+0x140>
  405fb0:	68a1      	ldr	r1, [r4, #8]
  405fb2:	2a24      	cmp	r2, #36	; 0x24
  405fb4:	6129      	str	r1, [r5, #16]
  405fb6:	68e1      	ldr	r1, [r4, #12]
  405fb8:	6169      	str	r1, [r5, #20]
  405fba:	d003      	beq.n	405fc4 <_realloc_r+0x12c>
  405fbc:	f105 0218 	add.w	r2, r5, #24
  405fc0:	3410      	adds	r4, #16
  405fc2:	e009      	b.n	405fd8 <_realloc_r+0x140>
  405fc4:	6922      	ldr	r2, [r4, #16]
  405fc6:	3418      	adds	r4, #24
  405fc8:	61aa      	str	r2, [r5, #24]
  405fca:	f854 1c04 	ldr.w	r1, [r4, #-4]
  405fce:	f105 0220 	add.w	r2, r5, #32
  405fd2:	61e9      	str	r1, [r5, #28]
  405fd4:	e000      	b.n	405fd8 <_realloc_r+0x140>
  405fd6:	4642      	mov	r2, r8
  405fd8:	6821      	ldr	r1, [r4, #0]
  405fda:	6011      	str	r1, [r2, #0]
  405fdc:	6861      	ldr	r1, [r4, #4]
  405fde:	6051      	str	r1, [r2, #4]
  405fe0:	68a1      	ldr	r1, [r4, #8]
  405fe2:	6091      	str	r1, [r2, #8]
  405fe4:	e005      	b.n	405ff2 <_realloc_r+0x15a>
  405fe6:	4640      	mov	r0, r8
  405fe8:	4621      	mov	r1, r4
  405fea:	9301      	str	r3, [sp, #4]
  405fec:	f7ff fb4c 	bl	405688 <memmove>
  405ff0:	9b01      	ldr	r3, [sp, #4]
  405ff2:	1bdb      	subs	r3, r3, r7
  405ff4:	19ea      	adds	r2, r5, r7
  405ff6:	f043 0301 	orr.w	r3, r3, #1
  405ffa:	f8cb 2008 	str.w	r2, [fp, #8]
  405ffe:	6053      	str	r3, [r2, #4]
  406000:	686b      	ldr	r3, [r5, #4]
  406002:	4648      	mov	r0, r9
  406004:	f003 0301 	and.w	r3, r3, #1
  406008:	431f      	orrs	r7, r3
  40600a:	606f      	str	r7, [r5, #4]
  40600c:	f7ff fb58 	bl	4056c0 <__malloc_unlock>
  406010:	4640      	mov	r0, r8
  406012:	e0e7      	b.n	4061e4 <_realloc_r+0x34c>
  406014:	eb0a 0b00 	add.w	fp, sl, r0
  406018:	45bb      	cmp	fp, r7
  40601a:	db35      	blt.n	406088 <_realloc_r+0x1f0>
  40601c:	68da      	ldr	r2, [r3, #12]
  40601e:	689b      	ldr	r3, [r3, #8]
  406020:	4628      	mov	r0, r5
  406022:	60da      	str	r2, [r3, #12]
  406024:	6093      	str	r3, [r2, #8]
  406026:	f850 2f08 	ldr.w	r2, [r0, #8]!
  40602a:	68eb      	ldr	r3, [r5, #12]
  40602c:	60d3      	str	r3, [r2, #12]
  40602e:	609a      	str	r2, [r3, #8]
  406030:	1f32      	subs	r2, r6, #4
  406032:	2a24      	cmp	r2, #36	; 0x24
  406034:	d823      	bhi.n	40607e <_realloc_r+0x1e6>
  406036:	2a13      	cmp	r2, #19
  406038:	d91a      	bls.n	406070 <_realloc_r+0x1d8>
  40603a:	6823      	ldr	r3, [r4, #0]
  40603c:	2a1b      	cmp	r2, #27
  40603e:	60ab      	str	r3, [r5, #8]
  406040:	6863      	ldr	r3, [r4, #4]
  406042:	60eb      	str	r3, [r5, #12]
  406044:	d803      	bhi.n	40604e <_realloc_r+0x1b6>
  406046:	f105 0010 	add.w	r0, r5, #16
  40604a:	3408      	adds	r4, #8
  40604c:	e010      	b.n	406070 <_realloc_r+0x1d8>
  40604e:	68a3      	ldr	r3, [r4, #8]
  406050:	2a24      	cmp	r2, #36	; 0x24
  406052:	612b      	str	r3, [r5, #16]
  406054:	68e3      	ldr	r3, [r4, #12]
  406056:	616b      	str	r3, [r5, #20]
  406058:	d003      	beq.n	406062 <_realloc_r+0x1ca>
  40605a:	f105 0018 	add.w	r0, r5, #24
  40605e:	3410      	adds	r4, #16
  406060:	e006      	b.n	406070 <_realloc_r+0x1d8>
  406062:	6923      	ldr	r3, [r4, #16]
  406064:	f105 0020 	add.w	r0, r5, #32
  406068:	61ab      	str	r3, [r5, #24]
  40606a:	6963      	ldr	r3, [r4, #20]
  40606c:	3418      	adds	r4, #24
  40606e:	61eb      	str	r3, [r5, #28]
  406070:	6823      	ldr	r3, [r4, #0]
  406072:	6003      	str	r3, [r0, #0]
  406074:	6863      	ldr	r3, [r4, #4]
  406076:	6043      	str	r3, [r0, #4]
  406078:	68a3      	ldr	r3, [r4, #8]
  40607a:	6083      	str	r3, [r0, #8]
  40607c:	e002      	b.n	406084 <_realloc_r+0x1ec>
  40607e:	4621      	mov	r1, r4
  406080:	f7ff fb02 	bl	405688 <memmove>
  406084:	465e      	mov	r6, fp
  406086:	e02e      	b.n	4060e6 <_realloc_r+0x24e>
  406088:	45ba      	cmp	sl, r7
  40608a:	db32      	blt.n	4060f2 <_realloc_r+0x25a>
  40608c:	4628      	mov	r0, r5
  40608e:	f850 2f08 	ldr.w	r2, [r0, #8]!
  406092:	68eb      	ldr	r3, [r5, #12]
  406094:	60d3      	str	r3, [r2, #12]
  406096:	609a      	str	r2, [r3, #8]
  406098:	1f32      	subs	r2, r6, #4
  40609a:	2a24      	cmp	r2, #36	; 0x24
  40609c:	d825      	bhi.n	4060ea <_realloc_r+0x252>
  40609e:	2a13      	cmp	r2, #19
  4060a0:	d91a      	bls.n	4060d8 <_realloc_r+0x240>
  4060a2:	6823      	ldr	r3, [r4, #0]
  4060a4:	2a1b      	cmp	r2, #27
  4060a6:	60ab      	str	r3, [r5, #8]
  4060a8:	6863      	ldr	r3, [r4, #4]
  4060aa:	60eb      	str	r3, [r5, #12]
  4060ac:	d803      	bhi.n	4060b6 <_realloc_r+0x21e>
  4060ae:	f105 0010 	add.w	r0, r5, #16
  4060b2:	3408      	adds	r4, #8
  4060b4:	e010      	b.n	4060d8 <_realloc_r+0x240>
  4060b6:	68a3      	ldr	r3, [r4, #8]
  4060b8:	2a24      	cmp	r2, #36	; 0x24
  4060ba:	612b      	str	r3, [r5, #16]
  4060bc:	68e3      	ldr	r3, [r4, #12]
  4060be:	616b      	str	r3, [r5, #20]
  4060c0:	d003      	beq.n	4060ca <_realloc_r+0x232>
  4060c2:	f105 0018 	add.w	r0, r5, #24
  4060c6:	3410      	adds	r4, #16
  4060c8:	e006      	b.n	4060d8 <_realloc_r+0x240>
  4060ca:	6923      	ldr	r3, [r4, #16]
  4060cc:	f105 0020 	add.w	r0, r5, #32
  4060d0:	61ab      	str	r3, [r5, #24]
  4060d2:	6963      	ldr	r3, [r4, #20]
  4060d4:	3418      	adds	r4, #24
  4060d6:	61eb      	str	r3, [r5, #28]
  4060d8:	6823      	ldr	r3, [r4, #0]
  4060da:	6003      	str	r3, [r0, #0]
  4060dc:	6863      	ldr	r3, [r4, #4]
  4060de:	6043      	str	r3, [r0, #4]
  4060e0:	68a3      	ldr	r3, [r4, #8]
  4060e2:	6083      	str	r3, [r0, #8]
  4060e4:	4656      	mov	r6, sl
  4060e6:	46a8      	mov	r8, r5
  4060e8:	e054      	b.n	406194 <_realloc_r+0x2fc>
  4060ea:	4621      	mov	r1, r4
  4060ec:	f7ff facc 	bl	405688 <memmove>
  4060f0:	e7f8      	b.n	4060e4 <_realloc_r+0x24c>
  4060f2:	4648      	mov	r0, r9
  4060f4:	4611      	mov	r1, r2
  4060f6:	f7ff f8b1 	bl	40525c <_malloc_r>
  4060fa:	4605      	mov	r5, r0
  4060fc:	2800      	cmp	r0, #0
  4060fe:	d044      	beq.n	40618a <_realloc_r+0x2f2>
  406100:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406104:	f1a0 0208 	sub.w	r2, r0, #8
  406108:	f023 0301 	bic.w	r3, r3, #1
  40610c:	4443      	add	r3, r8
  40610e:	429a      	cmp	r2, r3
  406110:	d105      	bne.n	40611e <_realloc_r+0x286>
  406112:	f850 3c04 	ldr.w	r3, [r0, #-4]
  406116:	f023 0303 	bic.w	r3, r3, #3
  40611a:	441e      	add	r6, r3
  40611c:	e03a      	b.n	406194 <_realloc_r+0x2fc>
  40611e:	1f32      	subs	r2, r6, #4
  406120:	2a24      	cmp	r2, #36	; 0x24
  406122:	d82b      	bhi.n	40617c <_realloc_r+0x2e4>
  406124:	2a13      	cmp	r2, #19
  406126:	d91e      	bls.n	406166 <_realloc_r+0x2ce>
  406128:	6823      	ldr	r3, [r4, #0]
  40612a:	2a1b      	cmp	r2, #27
  40612c:	6003      	str	r3, [r0, #0]
  40612e:	6863      	ldr	r3, [r4, #4]
  406130:	6043      	str	r3, [r0, #4]
  406132:	d804      	bhi.n	40613e <_realloc_r+0x2a6>
  406134:	f100 0308 	add.w	r3, r0, #8
  406138:	f104 0208 	add.w	r2, r4, #8
  40613c:	e015      	b.n	40616a <_realloc_r+0x2d2>
  40613e:	68a3      	ldr	r3, [r4, #8]
  406140:	2a24      	cmp	r2, #36	; 0x24
  406142:	6083      	str	r3, [r0, #8]
  406144:	68e3      	ldr	r3, [r4, #12]
  406146:	60c3      	str	r3, [r0, #12]
  406148:	d004      	beq.n	406154 <_realloc_r+0x2bc>
  40614a:	f100 0310 	add.w	r3, r0, #16
  40614e:	f104 0210 	add.w	r2, r4, #16
  406152:	e00a      	b.n	40616a <_realloc_r+0x2d2>
  406154:	6923      	ldr	r3, [r4, #16]
  406156:	f104 0218 	add.w	r2, r4, #24
  40615a:	6103      	str	r3, [r0, #16]
  40615c:	6961      	ldr	r1, [r4, #20]
  40615e:	f100 0318 	add.w	r3, r0, #24
  406162:	6141      	str	r1, [r0, #20]
  406164:	e001      	b.n	40616a <_realloc_r+0x2d2>
  406166:	4603      	mov	r3, r0
  406168:	4622      	mov	r2, r4
  40616a:	6811      	ldr	r1, [r2, #0]
  40616c:	6019      	str	r1, [r3, #0]
  40616e:	6851      	ldr	r1, [r2, #4]
  406170:	6059      	str	r1, [r3, #4]
  406172:	6892      	ldr	r2, [r2, #8]
  406174:	609a      	str	r2, [r3, #8]
  406176:	e004      	b.n	406182 <_realloc_r+0x2ea>
  406178:	20000568 	.word	0x20000568
  40617c:	4621      	mov	r1, r4
  40617e:	f7ff fa83 	bl	405688 <memmove>
  406182:	4648      	mov	r0, r9
  406184:	4621      	mov	r1, r4
  406186:	f7fe ff6f 	bl	405068 <_free_r>
  40618a:	4648      	mov	r0, r9
  40618c:	f7ff fa98 	bl	4056c0 <__malloc_unlock>
  406190:	4628      	mov	r0, r5
  406192:	e027      	b.n	4061e4 <_realloc_r+0x34c>
  406194:	1bf3      	subs	r3, r6, r7
  406196:	2b0f      	cmp	r3, #15
  406198:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40619c:	d913      	bls.n	4061c6 <_realloc_r+0x32e>
  40619e:	f002 0201 	and.w	r2, r2, #1
  4061a2:	eb08 0107 	add.w	r1, r8, r7
  4061a6:	4317      	orrs	r7, r2
  4061a8:	f043 0201 	orr.w	r2, r3, #1
  4061ac:	f8c8 7004 	str.w	r7, [r8, #4]
  4061b0:	440b      	add	r3, r1
  4061b2:	604a      	str	r2, [r1, #4]
  4061b4:	685a      	ldr	r2, [r3, #4]
  4061b6:	4648      	mov	r0, r9
  4061b8:	f042 0201 	orr.w	r2, r2, #1
  4061bc:	605a      	str	r2, [r3, #4]
  4061be:	3108      	adds	r1, #8
  4061c0:	f7fe ff52 	bl	405068 <_free_r>
  4061c4:	e009      	b.n	4061da <_realloc_r+0x342>
  4061c6:	f002 0201 	and.w	r2, r2, #1
  4061ca:	4332      	orrs	r2, r6
  4061cc:	f8c8 2004 	str.w	r2, [r8, #4]
  4061d0:	4446      	add	r6, r8
  4061d2:	6873      	ldr	r3, [r6, #4]
  4061d4:	f043 0301 	orr.w	r3, r3, #1
  4061d8:	6073      	str	r3, [r6, #4]
  4061da:	4648      	mov	r0, r9
  4061dc:	f7ff fa70 	bl	4056c0 <__malloc_unlock>
  4061e0:	f108 0008 	add.w	r0, r8, #8
  4061e4:	b003      	add	sp, #12
  4061e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4061ea:	bf00      	nop

004061ec <__fpclassifyd>:
  4061ec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4061f0:	b510      	push	{r4, lr}
  4061f2:	d100      	bne.n	4061f6 <__fpclassifyd+0xa>
  4061f4:	b178      	cbz	r0, 406216 <__fpclassifyd+0x2a>
  4061f6:	4a0c      	ldr	r2, [pc, #48]	; (406228 <__fpclassifyd+0x3c>)
  4061f8:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  4061fc:	4294      	cmp	r4, r2
  4061fe:	d90c      	bls.n	40621a <__fpclassifyd+0x2e>
  406200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  406204:	d30b      	bcc.n	40621e <__fpclassifyd+0x32>
  406206:	4a09      	ldr	r2, [pc, #36]	; (40622c <__fpclassifyd+0x40>)
  406208:	4293      	cmp	r3, r2
  40620a:	d10a      	bne.n	406222 <__fpclassifyd+0x36>
  40620c:	f1d0 0001 	rsbs	r0, r0, #1
  406210:	bf38      	it	cc
  406212:	2000      	movcc	r0, #0
  406214:	bd10      	pop	{r4, pc}
  406216:	2002      	movs	r0, #2
  406218:	bd10      	pop	{r4, pc}
  40621a:	2004      	movs	r0, #4
  40621c:	bd10      	pop	{r4, pc}
  40621e:	2003      	movs	r0, #3
  406220:	bd10      	pop	{r4, pc}
  406222:	2000      	movs	r0, #0
  406224:	bd10      	pop	{r4, pc}
  406226:	bf00      	nop
  406228:	7fdfffff 	.word	0x7fdfffff
  40622c:	7ff00000 	.word	0x7ff00000

00406230 <_sbrk_r>:
  406230:	b538      	push	{r3, r4, r5, lr}
  406232:	4c06      	ldr	r4, [pc, #24]	; (40624c <_sbrk_r+0x1c>)
  406234:	2300      	movs	r3, #0
  406236:	4605      	mov	r5, r0
  406238:	4608      	mov	r0, r1
  40623a:	6023      	str	r3, [r4, #0]
  40623c:	f7fc ff60 	bl	403100 <_sbrk>
  406240:	1c43      	adds	r3, r0, #1
  406242:	d102      	bne.n	40624a <_sbrk_r+0x1a>
  406244:	6823      	ldr	r3, [r4, #0]
  406246:	b103      	cbz	r3, 40624a <_sbrk_r+0x1a>
  406248:	602b      	str	r3, [r5, #0]
  40624a:	bd38      	pop	{r3, r4, r5, pc}
  40624c:	20000c54 	.word	0x20000c54

00406250 <strcmp>:
  406250:	f810 2b01 	ldrb.w	r2, [r0], #1
  406254:	f811 3b01 	ldrb.w	r3, [r1], #1
  406258:	2a01      	cmp	r2, #1
  40625a:	bf28      	it	cs
  40625c:	429a      	cmpcs	r2, r3
  40625e:	d0f7      	beq.n	406250 <strcmp>
  406260:	1ad0      	subs	r0, r2, r3
  406262:	4770      	bx	lr

00406264 <__ssprint_r>:
  406264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406268:	4680      	mov	r8, r0
  40626a:	6890      	ldr	r0, [r2, #8]
  40626c:	460c      	mov	r4, r1
  40626e:	4615      	mov	r5, r2
  406270:	f8d2 9000 	ldr.w	r9, [r2]
  406274:	b118      	cbz	r0, 40627e <__ssprint_r+0x1a>
  406276:	2300      	movs	r3, #0
  406278:	9301      	str	r3, [sp, #4]
  40627a:	461e      	mov	r6, r3
  40627c:	e008      	b.n	406290 <__ssprint_r+0x2c>
  40627e:	6050      	str	r0, [r2, #4]
  406280:	e066      	b.n	406350 <__ssprint_r+0xec>
  406282:	f8d9 3000 	ldr.w	r3, [r9]
  406286:	f8d9 6004 	ldr.w	r6, [r9, #4]
  40628a:	9301      	str	r3, [sp, #4]
  40628c:	f109 0908 	add.w	r9, r9, #8
  406290:	2e00      	cmp	r6, #0
  406292:	d0f6      	beq.n	406282 <__ssprint_r+0x1e>
  406294:	68a7      	ldr	r7, [r4, #8]
  406296:	42be      	cmp	r6, r7
  406298:	d347      	bcc.n	40632a <__ssprint_r+0xc6>
  40629a:	89a2      	ldrh	r2, [r4, #12]
  40629c:	f412 6f90 	tst.w	r2, #1152	; 0x480
  4062a0:	d041      	beq.n	406326 <__ssprint_r+0xc2>
  4062a2:	6823      	ldr	r3, [r4, #0]
  4062a4:	6921      	ldr	r1, [r4, #16]
  4062a6:	2002      	movs	r0, #2
  4062a8:	ebc1 0a03 	rsb	sl, r1, r3
  4062ac:	6963      	ldr	r3, [r4, #20]
  4062ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4062b2:	fb93 fbf0 	sdiv	fp, r3, r0
  4062b6:	f10a 0001 	add.w	r0, sl, #1
  4062ba:	4430      	add	r0, r6
  4062bc:	4583      	cmp	fp, r0
  4062be:	bf38      	it	cc
  4062c0:	4683      	movcc	fp, r0
  4062c2:	0553      	lsls	r3, r2, #21
  4062c4:	4640      	mov	r0, r8
  4062c6:	d50f      	bpl.n	4062e8 <__ssprint_r+0x84>
  4062c8:	4659      	mov	r1, fp
  4062ca:	f7fe ffc7 	bl	40525c <_malloc_r>
  4062ce:	4607      	mov	r7, r0
  4062d0:	b198      	cbz	r0, 4062fa <__ssprint_r+0x96>
  4062d2:	4652      	mov	r2, sl
  4062d4:	6921      	ldr	r1, [r4, #16]
  4062d6:	f7fc ff75 	bl	4031c4 <memcpy>
  4062da:	89a2      	ldrh	r2, [r4, #12]
  4062dc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  4062e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  4062e4:	81a2      	strh	r2, [r4, #12]
  4062e6:	e015      	b.n	406314 <__ssprint_r+0xb0>
  4062e8:	465a      	mov	r2, fp
  4062ea:	f7ff fdd5 	bl	405e98 <_realloc_r>
  4062ee:	4607      	mov	r7, r0
  4062f0:	b980      	cbnz	r0, 406314 <__ssprint_r+0xb0>
  4062f2:	4640      	mov	r0, r8
  4062f4:	6921      	ldr	r1, [r4, #16]
  4062f6:	f7fe feb7 	bl	405068 <_free_r>
  4062fa:	230c      	movs	r3, #12
  4062fc:	f8c8 3000 	str.w	r3, [r8]
  406300:	89a3      	ldrh	r3, [r4, #12]
  406302:	f04f 30ff 	mov.w	r0, #4294967295
  406306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40630a:	81a3      	strh	r3, [r4, #12]
  40630c:	2300      	movs	r3, #0
  40630e:	60ab      	str	r3, [r5, #8]
  406310:	606b      	str	r3, [r5, #4]
  406312:	e01d      	b.n	406350 <__ssprint_r+0xec>
  406314:	6127      	str	r7, [r4, #16]
  406316:	ebca 030b 	rsb	r3, sl, fp
  40631a:	4457      	add	r7, sl
  40631c:	6027      	str	r7, [r4, #0]
  40631e:	f8c4 b014 	str.w	fp, [r4, #20]
  406322:	4637      	mov	r7, r6
  406324:	60a3      	str	r3, [r4, #8]
  406326:	42be      	cmp	r6, r7
  406328:	d200      	bcs.n	40632c <__ssprint_r+0xc8>
  40632a:	4637      	mov	r7, r6
  40632c:	463a      	mov	r2, r7
  40632e:	6820      	ldr	r0, [r4, #0]
  406330:	9901      	ldr	r1, [sp, #4]
  406332:	f7ff f9a9 	bl	405688 <memmove>
  406336:	68a3      	ldr	r3, [r4, #8]
  406338:	1bdb      	subs	r3, r3, r7
  40633a:	60a3      	str	r3, [r4, #8]
  40633c:	6823      	ldr	r3, [r4, #0]
  40633e:	441f      	add	r7, r3
  406340:	68ab      	ldr	r3, [r5, #8]
  406342:	6027      	str	r7, [r4, #0]
  406344:	1b9e      	subs	r6, r3, r6
  406346:	60ae      	str	r6, [r5, #8]
  406348:	2e00      	cmp	r6, #0
  40634a:	d19a      	bne.n	406282 <__ssprint_r+0x1e>
  40634c:	606e      	str	r6, [r5, #4]
  40634e:	4630      	mov	r0, r6
  406350:	b003      	add	sp, #12
  406352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406356 <_svfiprintf_r>:
  406356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40635a:	461e      	mov	r6, r3
  40635c:	898b      	ldrh	r3, [r1, #12]
  40635e:	b0ad      	sub	sp, #180	; 0xb4
  406360:	4688      	mov	r8, r1
  406362:	0619      	lsls	r1, r3, #24
  406364:	4683      	mov	fp, r0
  406366:	9202      	str	r2, [sp, #8]
  406368:	d513      	bpl.n	406392 <_svfiprintf_r+0x3c>
  40636a:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40636e:	b983      	cbnz	r3, 406392 <_svfiprintf_r+0x3c>
  406370:	2140      	movs	r1, #64	; 0x40
  406372:	f7fe ff73 	bl	40525c <_malloc_r>
  406376:	f8c8 0000 	str.w	r0, [r8]
  40637a:	f8c8 0010 	str.w	r0, [r8, #16]
  40637e:	b928      	cbnz	r0, 40638c <_svfiprintf_r+0x36>
  406380:	230c      	movs	r3, #12
  406382:	f8cb 3000 	str.w	r3, [fp]
  406386:	f04f 30ff 	mov.w	r0, #4294967295
  40638a:	e3d4      	b.n	406b36 <_svfiprintf_r+0x7e0>
  40638c:	2340      	movs	r3, #64	; 0x40
  40638e:	f8c8 3014 	str.w	r3, [r8, #20]
  406392:	2300      	movs	r3, #0
  406394:	aa1c      	add	r2, sp, #112	; 0x70
  406396:	920f      	str	r2, [sp, #60]	; 0x3c
  406398:	9311      	str	r3, [sp, #68]	; 0x44
  40639a:	9310      	str	r3, [sp, #64]	; 0x40
  40639c:	4694      	mov	ip, r2
  40639e:	930a      	str	r3, [sp, #40]	; 0x28
  4063a0:	9305      	str	r3, [sp, #20]
  4063a2:	9b02      	ldr	r3, [sp, #8]
  4063a4:	461c      	mov	r4, r3
  4063a6:	f813 2b01 	ldrb.w	r2, [r3], #1
  4063aa:	b91a      	cbnz	r2, 4063b4 <_svfiprintf_r+0x5e>
  4063ac:	9802      	ldr	r0, [sp, #8]
  4063ae:	1a25      	subs	r5, r4, r0
  4063b0:	d103      	bne.n	4063ba <_svfiprintf_r+0x64>
  4063b2:	e01d      	b.n	4063f0 <_svfiprintf_r+0x9a>
  4063b4:	2a25      	cmp	r2, #37	; 0x25
  4063b6:	d1f5      	bne.n	4063a4 <_svfiprintf_r+0x4e>
  4063b8:	e7f8      	b.n	4063ac <_svfiprintf_r+0x56>
  4063ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4063bc:	9902      	ldr	r1, [sp, #8]
  4063be:	442b      	add	r3, r5
  4063c0:	9311      	str	r3, [sp, #68]	; 0x44
  4063c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4063c4:	e88c 0022 	stmia.w	ip, {r1, r5}
  4063c8:	3301      	adds	r3, #1
  4063ca:	2b07      	cmp	r3, #7
  4063cc:	9310      	str	r3, [sp, #64]	; 0x40
  4063ce:	dc02      	bgt.n	4063d6 <_svfiprintf_r+0x80>
  4063d0:	f10c 0c08 	add.w	ip, ip, #8
  4063d4:	e009      	b.n	4063ea <_svfiprintf_r+0x94>
  4063d6:	4658      	mov	r0, fp
  4063d8:	4641      	mov	r1, r8
  4063da:	aa0f      	add	r2, sp, #60	; 0x3c
  4063dc:	f7ff ff42 	bl	406264 <__ssprint_r>
  4063e0:	2800      	cmp	r0, #0
  4063e2:	f040 83a0 	bne.w	406b26 <_svfiprintf_r+0x7d0>
  4063e6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4063ea:	9a05      	ldr	r2, [sp, #20]
  4063ec:	442a      	add	r2, r5
  4063ee:	9205      	str	r2, [sp, #20]
  4063f0:	7823      	ldrb	r3, [r4, #0]
  4063f2:	2b00      	cmp	r3, #0
  4063f4:	f000 8390 	beq.w	406b18 <_svfiprintf_r+0x7c2>
  4063f8:	2200      	movs	r2, #0
  4063fa:	3401      	adds	r4, #1
  4063fc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406400:	f04f 3aff 	mov.w	sl, #4294967295
  406404:	9204      	str	r2, [sp, #16]
  406406:	4617      	mov	r7, r2
  406408:	1c65      	adds	r5, r4, #1
  40640a:	7823      	ldrb	r3, [r4, #0]
  40640c:	9502      	str	r5, [sp, #8]
  40640e:	2b58      	cmp	r3, #88	; 0x58
  406410:	d064      	beq.n	4064dc <_svfiprintf_r+0x186>
  406412:	dc2d      	bgt.n	406470 <_svfiprintf_r+0x11a>
  406414:	2b2e      	cmp	r3, #46	; 0x2e
  406416:	d076      	beq.n	406506 <_svfiprintf_r+0x1b0>
  406418:	dc12      	bgt.n	406440 <_svfiprintf_r+0xea>
  40641a:	2b2a      	cmp	r3, #42	; 0x2a
  40641c:	d066      	beq.n	4064ec <_svfiprintf_r+0x196>
  40641e:	dc08      	bgt.n	406432 <_svfiprintf_r+0xdc>
  406420:	2b20      	cmp	r3, #32
  406422:	d05f      	beq.n	4064e4 <_svfiprintf_r+0x18e>
  406424:	2b23      	cmp	r3, #35	; 0x23
  406426:	f040 8201 	bne.w	40682c <_svfiprintf_r+0x4d6>
  40642a:	f047 0701 	orr.w	r7, r7, #1
  40642e:	9c02      	ldr	r4, [sp, #8]
  406430:	e7ea      	b.n	406408 <_svfiprintf_r+0xb2>
  406432:	2b2b      	cmp	r3, #43	; 0x2b
  406434:	d101      	bne.n	40643a <_svfiprintf_r+0xe4>
  406436:	461a      	mov	r2, r3
  406438:	e7f9      	b.n	40642e <_svfiprintf_r+0xd8>
  40643a:	2b2d      	cmp	r3, #45	; 0x2d
  40643c:	d060      	beq.n	406500 <_svfiprintf_r+0x1aa>
  40643e:	e1f5      	b.n	40682c <_svfiprintf_r+0x4d6>
  406440:	2b39      	cmp	r3, #57	; 0x39
  406442:	dc07      	bgt.n	406454 <_svfiprintf_r+0xfe>
  406444:	2b31      	cmp	r3, #49	; 0x31
  406446:	da7f      	bge.n	406548 <_svfiprintf_r+0x1f2>
  406448:	2b30      	cmp	r3, #48	; 0x30
  40644a:	f040 81ef 	bne.w	40682c <_svfiprintf_r+0x4d6>
  40644e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  406452:	e7ec      	b.n	40642e <_svfiprintf_r+0xd8>
  406454:	2b4f      	cmp	r3, #79	; 0x4f
  406456:	f000 80e0 	beq.w	40661a <_svfiprintf_r+0x2c4>
  40645a:	2b55      	cmp	r3, #85	; 0x55
  40645c:	f000 8120 	beq.w	4066a0 <_svfiprintf_r+0x34a>
  406460:	2b44      	cmp	r3, #68	; 0x44
  406462:	f040 81e3 	bne.w	40682c <_svfiprintf_r+0x4d6>
  406466:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40646a:	f047 0710 	orr.w	r7, r7, #16
  40646e:	e094      	b.n	40659a <_svfiprintf_r+0x244>
  406470:	2b6e      	cmp	r3, #110	; 0x6e
  406472:	f000 80b6 	beq.w	4065e2 <_svfiprintf_r+0x28c>
  406476:	dc0d      	bgt.n	406494 <_svfiprintf_r+0x13e>
  406478:	2b68      	cmp	r3, #104	; 0x68
  40647a:	d076      	beq.n	40656a <_svfiprintf_r+0x214>
  40647c:	dc05      	bgt.n	40648a <_svfiprintf_r+0x134>
  40647e:	2b63      	cmp	r3, #99	; 0x63
  406480:	f000 8083 	beq.w	40658a <_svfiprintf_r+0x234>
  406484:	2b64      	cmp	r3, #100	; 0x64
  406486:	d026      	beq.n	4064d6 <_svfiprintf_r+0x180>
  406488:	e1d0      	b.n	40682c <_svfiprintf_r+0x4d6>
  40648a:	2b69      	cmp	r3, #105	; 0x69
  40648c:	d023      	beq.n	4064d6 <_svfiprintf_r+0x180>
  40648e:	2b6c      	cmp	r3, #108	; 0x6c
  406490:	d06e      	beq.n	406570 <_svfiprintf_r+0x21a>
  406492:	e1cb      	b.n	40682c <_svfiprintf_r+0x4d6>
  406494:	2b71      	cmp	r3, #113	; 0x71
  406496:	d075      	beq.n	406584 <_svfiprintf_r+0x22e>
  406498:	dc13      	bgt.n	4064c2 <_svfiprintf_r+0x16c>
  40649a:	2b6f      	cmp	r3, #111	; 0x6f
  40649c:	f000 80bf 	beq.w	40661e <_svfiprintf_r+0x2c8>
  4064a0:	2b70      	cmp	r3, #112	; 0x70
  4064a2:	f040 81c3 	bne.w	40682c <_svfiprintf_r+0x4d6>
  4064a6:	2330      	movs	r3, #48	; 0x30
  4064a8:	48a0      	ldr	r0, [pc, #640]	; (40672c <_svfiprintf_r+0x3d6>)
  4064aa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  4064ae:	2378      	movs	r3, #120	; 0x78
  4064b0:	6834      	ldr	r4, [r6, #0]
  4064b2:	2500      	movs	r5, #0
  4064b4:	f047 0702 	orr.w	r7, r7, #2
  4064b8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  4064bc:	3604      	adds	r6, #4
  4064be:	900a      	str	r0, [sp, #40]	; 0x28
  4064c0:	e12e      	b.n	406720 <_svfiprintf_r+0x3ca>
  4064c2:	2b75      	cmp	r3, #117	; 0x75
  4064c4:	f000 80ee 	beq.w	4066a4 <_svfiprintf_r+0x34e>
  4064c8:	2b78      	cmp	r3, #120	; 0x78
  4064ca:	f000 8103 	beq.w	4066d4 <_svfiprintf_r+0x37e>
  4064ce:	2b73      	cmp	r3, #115	; 0x73
  4064d0:	f040 81ac 	bne.w	40682c <_svfiprintf_r+0x4d6>
  4064d4:	e0bf      	b.n	406656 <_svfiprintf_r+0x300>
  4064d6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4064da:	e05e      	b.n	40659a <_svfiprintf_r+0x244>
  4064dc:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4064e0:	4c93      	ldr	r4, [pc, #588]	; (406730 <_svfiprintf_r+0x3da>)
  4064e2:	e0fa      	b.n	4066da <_svfiprintf_r+0x384>
  4064e4:	2a00      	cmp	r2, #0
  4064e6:	bf08      	it	eq
  4064e8:	2220      	moveq	r2, #32
  4064ea:	e7a0      	b.n	40642e <_svfiprintf_r+0xd8>
  4064ec:	1d33      	adds	r3, r6, #4
  4064ee:	6836      	ldr	r6, [r6, #0]
  4064f0:	2e00      	cmp	r6, #0
  4064f2:	9604      	str	r6, [sp, #16]
  4064f4:	db01      	blt.n	4064fa <_svfiprintf_r+0x1a4>
  4064f6:	461e      	mov	r6, r3
  4064f8:	e799      	b.n	40642e <_svfiprintf_r+0xd8>
  4064fa:	4275      	negs	r5, r6
  4064fc:	9504      	str	r5, [sp, #16]
  4064fe:	461e      	mov	r6, r3
  406500:	f047 0704 	orr.w	r7, r7, #4
  406504:	e793      	b.n	40642e <_svfiprintf_r+0xd8>
  406506:	9c02      	ldr	r4, [sp, #8]
  406508:	7823      	ldrb	r3, [r4, #0]
  40650a:	1c61      	adds	r1, r4, #1
  40650c:	2b2a      	cmp	r3, #42	; 0x2a
  40650e:	d002      	beq.n	406516 <_svfiprintf_r+0x1c0>
  406510:	f04f 0a00 	mov.w	sl, #0
  406514:	e00a      	b.n	40652c <_svfiprintf_r+0x1d6>
  406516:	f8d6 a000 	ldr.w	sl, [r6]
  40651a:	1d33      	adds	r3, r6, #4
  40651c:	f1ba 0f00 	cmp.w	sl, #0
  406520:	461e      	mov	r6, r3
  406522:	9102      	str	r1, [sp, #8]
  406524:	da83      	bge.n	40642e <_svfiprintf_r+0xd8>
  406526:	f04f 3aff 	mov.w	sl, #4294967295
  40652a:	e780      	b.n	40642e <_svfiprintf_r+0xd8>
  40652c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406530:	2809      	cmp	r0, #9
  406532:	d805      	bhi.n	406540 <_svfiprintf_r+0x1ea>
  406534:	230a      	movs	r3, #10
  406536:	fb03 0a0a 	mla	sl, r3, sl, r0
  40653a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40653e:	e7f5      	b.n	40652c <_svfiprintf_r+0x1d6>
  406540:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  406544:	9102      	str	r1, [sp, #8]
  406546:	e762      	b.n	40640e <_svfiprintf_r+0xb8>
  406548:	2500      	movs	r5, #0
  40654a:	9504      	str	r5, [sp, #16]
  40654c:	9c04      	ldr	r4, [sp, #16]
  40654e:	3b30      	subs	r3, #48	; 0x30
  406550:	210a      	movs	r1, #10
  406552:	fb01 3404 	mla	r4, r1, r4, r3
  406556:	9902      	ldr	r1, [sp, #8]
  406558:	9404      	str	r4, [sp, #16]
  40655a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40655e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406562:	2809      	cmp	r0, #9
  406564:	d8ee      	bhi.n	406544 <_svfiprintf_r+0x1ee>
  406566:	9102      	str	r1, [sp, #8]
  406568:	e7f0      	b.n	40654c <_svfiprintf_r+0x1f6>
  40656a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  40656e:	e75e      	b.n	40642e <_svfiprintf_r+0xd8>
  406570:	9d02      	ldr	r5, [sp, #8]
  406572:	782b      	ldrb	r3, [r5, #0]
  406574:	2b6c      	cmp	r3, #108	; 0x6c
  406576:	d102      	bne.n	40657e <_svfiprintf_r+0x228>
  406578:	3501      	adds	r5, #1
  40657a:	9502      	str	r5, [sp, #8]
  40657c:	e002      	b.n	406584 <_svfiprintf_r+0x22e>
  40657e:	f047 0710 	orr.w	r7, r7, #16
  406582:	e754      	b.n	40642e <_svfiprintf_r+0xd8>
  406584:	f047 0720 	orr.w	r7, r7, #32
  406588:	e751      	b.n	40642e <_svfiprintf_r+0xd8>
  40658a:	6833      	ldr	r3, [r6, #0]
  40658c:	2500      	movs	r5, #0
  40658e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  406592:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406596:	3604      	adds	r6, #4
  406598:	e152      	b.n	406840 <_svfiprintf_r+0x4ea>
  40659a:	06ba      	lsls	r2, r7, #26
  40659c:	d507      	bpl.n	4065ae <_svfiprintf_r+0x258>
  40659e:	3607      	adds	r6, #7
  4065a0:	f026 0307 	bic.w	r3, r6, #7
  4065a4:	f103 0608 	add.w	r6, r3, #8
  4065a8:	e9d3 4500 	ldrd	r4, r5, [r3]
  4065ac:	e00d      	b.n	4065ca <_svfiprintf_r+0x274>
  4065ae:	f017 0f10 	tst.w	r7, #16
  4065b2:	f106 0304 	add.w	r3, r6, #4
  4065b6:	d001      	beq.n	4065bc <_svfiprintf_r+0x266>
  4065b8:	6834      	ldr	r4, [r6, #0]
  4065ba:	e004      	b.n	4065c6 <_svfiprintf_r+0x270>
  4065bc:	6834      	ldr	r4, [r6, #0]
  4065be:	f017 0f40 	tst.w	r7, #64	; 0x40
  4065c2:	bf18      	it	ne
  4065c4:	b224      	sxthne	r4, r4
  4065c6:	17e5      	asrs	r5, r4, #31
  4065c8:	461e      	mov	r6, r3
  4065ca:	2c00      	cmp	r4, #0
  4065cc:	f175 0000 	sbcs.w	r0, r5, #0
  4065d0:	f280 80b0 	bge.w	406734 <_svfiprintf_r+0x3de>
  4065d4:	232d      	movs	r3, #45	; 0x2d
  4065d6:	4264      	negs	r4, r4
  4065d8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4065dc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4065e0:	e0a8      	b.n	406734 <_svfiprintf_r+0x3de>
  4065e2:	f017 0f20 	tst.w	r7, #32
  4065e6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4065ea:	f106 0104 	add.w	r1, r6, #4
  4065ee:	d007      	beq.n	406600 <_svfiprintf_r+0x2aa>
  4065f0:	9c05      	ldr	r4, [sp, #20]
  4065f2:	6830      	ldr	r0, [r6, #0]
  4065f4:	17e5      	asrs	r5, r4, #31
  4065f6:	4622      	mov	r2, r4
  4065f8:	462b      	mov	r3, r5
  4065fa:	e9c0 2300 	strd	r2, r3, [r0]
  4065fe:	e00a      	b.n	406616 <_svfiprintf_r+0x2c0>
  406600:	06fb      	lsls	r3, r7, #27
  406602:	d405      	bmi.n	406610 <_svfiprintf_r+0x2ba>
  406604:	067f      	lsls	r7, r7, #25
  406606:	d503      	bpl.n	406610 <_svfiprintf_r+0x2ba>
  406608:	6833      	ldr	r3, [r6, #0]
  40660a:	9c05      	ldr	r4, [sp, #20]
  40660c:	801c      	strh	r4, [r3, #0]
  40660e:	e002      	b.n	406616 <_svfiprintf_r+0x2c0>
  406610:	6833      	ldr	r3, [r6, #0]
  406612:	9d05      	ldr	r5, [sp, #20]
  406614:	601d      	str	r5, [r3, #0]
  406616:	460e      	mov	r6, r1
  406618:	e6c3      	b.n	4063a2 <_svfiprintf_r+0x4c>
  40661a:	f047 0710 	orr.w	r7, r7, #16
  40661e:	f017 0320 	ands.w	r3, r7, #32
  406622:	d008      	beq.n	406636 <_svfiprintf_r+0x2e0>
  406624:	3607      	adds	r6, #7
  406626:	f026 0307 	bic.w	r3, r6, #7
  40662a:	f103 0608 	add.w	r6, r3, #8
  40662e:	e9d3 4500 	ldrd	r4, r5, [r3]
  406632:	2300      	movs	r3, #0
  406634:	e075      	b.n	406722 <_svfiprintf_r+0x3cc>
  406636:	f017 0110 	ands.w	r1, r7, #16
  40663a:	f106 0204 	add.w	r2, r6, #4
  40663e:	d106      	bne.n	40664e <_svfiprintf_r+0x2f8>
  406640:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  406644:	d003      	beq.n	40664e <_svfiprintf_r+0x2f8>
  406646:	8834      	ldrh	r4, [r6, #0]
  406648:	2500      	movs	r5, #0
  40664a:	4616      	mov	r6, r2
  40664c:	e7f1      	b.n	406632 <_svfiprintf_r+0x2dc>
  40664e:	6834      	ldr	r4, [r6, #0]
  406650:	2500      	movs	r5, #0
  406652:	4616      	mov	r6, r2
  406654:	e065      	b.n	406722 <_svfiprintf_r+0x3cc>
  406656:	f8d6 9000 	ldr.w	r9, [r6]
  40665a:	2300      	movs	r3, #0
  40665c:	459a      	cmp	sl, r3
  40665e:	f106 0604 	add.w	r6, r6, #4
  406662:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  406666:	4648      	mov	r0, r9
  406668:	db11      	blt.n	40668e <_svfiprintf_r+0x338>
  40666a:	4619      	mov	r1, r3
  40666c:	4652      	mov	r2, sl
  40666e:	f8cd c004 	str.w	ip, [sp, #4]
  406672:	f7fe fffb 	bl	40566c <memchr>
  406676:	f8dd c004 	ldr.w	ip, [sp, #4]
  40667a:	2800      	cmp	r0, #0
  40667c:	f000 80e5 	beq.w	40684a <_svfiprintf_r+0x4f4>
  406680:	ebc9 0000 	rsb	r0, r9, r0
  406684:	4550      	cmp	r0, sl
  406686:	bfb8      	it	lt
  406688:	4682      	movlt	sl, r0
  40668a:	2500      	movs	r5, #0
  40668c:	e0de      	b.n	40684c <_svfiprintf_r+0x4f6>
  40668e:	f8cd c004 	str.w	ip, [sp, #4]
  406692:	f7fc fded 	bl	403270 <strlen>
  406696:	2500      	movs	r5, #0
  406698:	4682      	mov	sl, r0
  40669a:	f8dd c004 	ldr.w	ip, [sp, #4]
  40669e:	e0d5      	b.n	40684c <_svfiprintf_r+0x4f6>
  4066a0:	f047 0710 	orr.w	r7, r7, #16
  4066a4:	06bd      	lsls	r5, r7, #26
  4066a6:	d507      	bpl.n	4066b8 <_svfiprintf_r+0x362>
  4066a8:	3607      	adds	r6, #7
  4066aa:	f026 0307 	bic.w	r3, r6, #7
  4066ae:	f103 0608 	add.w	r6, r3, #8
  4066b2:	e9d3 4500 	ldrd	r4, r5, [r3]
  4066b6:	e00b      	b.n	4066d0 <_svfiprintf_r+0x37a>
  4066b8:	f017 0f10 	tst.w	r7, #16
  4066bc:	f106 0304 	add.w	r3, r6, #4
  4066c0:	d103      	bne.n	4066ca <_svfiprintf_r+0x374>
  4066c2:	067c      	lsls	r4, r7, #25
  4066c4:	d501      	bpl.n	4066ca <_svfiprintf_r+0x374>
  4066c6:	8834      	ldrh	r4, [r6, #0]
  4066c8:	e000      	b.n	4066cc <_svfiprintf_r+0x376>
  4066ca:	6834      	ldr	r4, [r6, #0]
  4066cc:	2500      	movs	r5, #0
  4066ce:	461e      	mov	r6, r3
  4066d0:	2301      	movs	r3, #1
  4066d2:	e026      	b.n	406722 <_svfiprintf_r+0x3cc>
  4066d4:	4c15      	ldr	r4, [pc, #84]	; (40672c <_svfiprintf_r+0x3d6>)
  4066d6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4066da:	06b8      	lsls	r0, r7, #26
  4066dc:	940a      	str	r4, [sp, #40]	; 0x28
  4066de:	d507      	bpl.n	4066f0 <_svfiprintf_r+0x39a>
  4066e0:	3607      	adds	r6, #7
  4066e2:	f026 0207 	bic.w	r2, r6, #7
  4066e6:	f102 0608 	add.w	r6, r2, #8
  4066ea:	e9d2 4500 	ldrd	r4, r5, [r2]
  4066ee:	e00b      	b.n	406708 <_svfiprintf_r+0x3b2>
  4066f0:	f017 0f10 	tst.w	r7, #16
  4066f4:	f106 0204 	add.w	r2, r6, #4
  4066f8:	d103      	bne.n	406702 <_svfiprintf_r+0x3ac>
  4066fa:	0679      	lsls	r1, r7, #25
  4066fc:	d501      	bpl.n	406702 <_svfiprintf_r+0x3ac>
  4066fe:	8834      	ldrh	r4, [r6, #0]
  406700:	e000      	b.n	406704 <_svfiprintf_r+0x3ae>
  406702:	6834      	ldr	r4, [r6, #0]
  406704:	2500      	movs	r5, #0
  406706:	4616      	mov	r6, r2
  406708:	07fa      	lsls	r2, r7, #31
  40670a:	d509      	bpl.n	406720 <_svfiprintf_r+0x3ca>
  40670c:	ea54 0005 	orrs.w	r0, r4, r5
  406710:	d006      	beq.n	406720 <_svfiprintf_r+0x3ca>
  406712:	2230      	movs	r2, #48	; 0x30
  406714:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  406718:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  40671c:	f047 0702 	orr.w	r7, r7, #2
  406720:	2302      	movs	r3, #2
  406722:	2200      	movs	r2, #0
  406724:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406728:	e005      	b.n	406736 <_svfiprintf_r+0x3e0>
  40672a:	bf00      	nop
  40672c:	00407be7 	.word	0x00407be7
  406730:	00407bd6 	.word	0x00407bd6
  406734:	2301      	movs	r3, #1
  406736:	f1ba 0f00 	cmp.w	sl, #0
  40673a:	bfa8      	it	ge
  40673c:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  406740:	ea54 0105 	orrs.w	r1, r4, r5
  406744:	d102      	bne.n	40674c <_svfiprintf_r+0x3f6>
  406746:	f1ba 0f00 	cmp.w	sl, #0
  40674a:	d05e      	beq.n	40680a <_svfiprintf_r+0x4b4>
  40674c:	2b01      	cmp	r3, #1
  40674e:	d01f      	beq.n	406790 <_svfiprintf_r+0x43a>
  406750:	2b02      	cmp	r3, #2
  406752:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
  406756:	d045      	beq.n	4067e4 <_svfiprintf_r+0x48e>
  406758:	08e0      	lsrs	r0, r4, #3
  40675a:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
  40675e:	08e8      	lsrs	r0, r5, #3
  406760:	f004 0207 	and.w	r2, r4, #7
  406764:	9106      	str	r1, [sp, #24]
  406766:	9007      	str	r0, [sp, #28]
  406768:	3230      	adds	r2, #48	; 0x30
  40676a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  40676e:	ea54 0105 	orrs.w	r1, r4, r5
  406772:	4699      	mov	r9, r3
  406774:	701a      	strb	r2, [r3, #0]
  406776:	f103 33ff 	add.w	r3, r3, #4294967295
  40677a:	d1ed      	bne.n	406758 <_svfiprintf_r+0x402>
  40677c:	07f8      	lsls	r0, r7, #31
  40677e:	4649      	mov	r1, r9
  406780:	d54e      	bpl.n	406820 <_svfiprintf_r+0x4ca>
  406782:	2a30      	cmp	r2, #48	; 0x30
  406784:	d04c      	beq.n	406820 <_svfiprintf_r+0x4ca>
  406786:	4699      	mov	r9, r3
  406788:	2330      	movs	r3, #48	; 0x30
  40678a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40678e:	e047      	b.n	406820 <_svfiprintf_r+0x4ca>
  406790:	2d00      	cmp	r5, #0
  406792:	bf08      	it	eq
  406794:	2c0a      	cmpeq	r4, #10
  406796:	d205      	bcs.n	4067a4 <_svfiprintf_r+0x44e>
  406798:	3430      	adds	r4, #48	; 0x30
  40679a:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  40679e:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
  4067a2:	e03d      	b.n	406820 <_svfiprintf_r+0x4ca>
  4067a4:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
  4067a8:	9203      	str	r2, [sp, #12]
  4067aa:	4620      	mov	r0, r4
  4067ac:	4629      	mov	r1, r5
  4067ae:	220a      	movs	r2, #10
  4067b0:	2300      	movs	r3, #0
  4067b2:	f8cd c004 	str.w	ip, [sp, #4]
  4067b6:	f000 feb5 	bl	407524 <__aeabi_uldivmod>
  4067ba:	9b03      	ldr	r3, [sp, #12]
  4067bc:	3230      	adds	r2, #48	; 0x30
  4067be:	f803 2901 	strb.w	r2, [r3], #-1
  4067c2:	4620      	mov	r0, r4
  4067c4:	4629      	mov	r1, r5
  4067c6:	f8dd 900c 	ldr.w	r9, [sp, #12]
  4067ca:	220a      	movs	r2, #10
  4067cc:	9303      	str	r3, [sp, #12]
  4067ce:	2300      	movs	r3, #0
  4067d0:	f000 fea8 	bl	407524 <__aeabi_uldivmod>
  4067d4:	4604      	mov	r4, r0
  4067d6:	460d      	mov	r5, r1
  4067d8:	ea54 0005 	orrs.w	r0, r4, r5
  4067dc:	f8dd c004 	ldr.w	ip, [sp, #4]
  4067e0:	d1e3      	bne.n	4067aa <_svfiprintf_r+0x454>
  4067e2:	e01d      	b.n	406820 <_svfiprintf_r+0x4ca>
  4067e4:	990a      	ldr	r1, [sp, #40]	; 0x28
  4067e6:	f004 020f 	and.w	r2, r4, #15
  4067ea:	5c8a      	ldrb	r2, [r1, r2]
  4067ec:	4699      	mov	r9, r3
  4067ee:	f803 2901 	strb.w	r2, [r3], #-1
  4067f2:	0922      	lsrs	r2, r4, #4
  4067f4:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  4067f8:	0929      	lsrs	r1, r5, #4
  4067fa:	9008      	str	r0, [sp, #32]
  4067fc:	9109      	str	r1, [sp, #36]	; 0x24
  4067fe:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
  406802:	ea54 0205 	orrs.w	r2, r4, r5
  406806:	d1ed      	bne.n	4067e4 <_svfiprintf_r+0x48e>
  406808:	e00a      	b.n	406820 <_svfiprintf_r+0x4ca>
  40680a:	b93b      	cbnz	r3, 40681c <_svfiprintf_r+0x4c6>
  40680c:	07f9      	lsls	r1, r7, #31
  40680e:	d505      	bpl.n	40681c <_svfiprintf_r+0x4c6>
  406810:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
  406814:	2330      	movs	r3, #48	; 0x30
  406816:	f809 3d41 	strb.w	r3, [r9, #-65]!
  40681a:	e001      	b.n	406820 <_svfiprintf_r+0x4ca>
  40681c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  406820:	4655      	mov	r5, sl
  406822:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
  406826:	ebc9 0a0a 	rsb	sl, r9, sl
  40682a:	e00f      	b.n	40684c <_svfiprintf_r+0x4f6>
  40682c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406830:	2b00      	cmp	r3, #0
  406832:	f000 8171 	beq.w	406b18 <_svfiprintf_r+0x7c2>
  406836:	2500      	movs	r5, #0
  406838:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40683c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406840:	f04f 0a01 	mov.w	sl, #1
  406844:	f10d 0948 	add.w	r9, sp, #72	; 0x48
  406848:	e000      	b.n	40684c <_svfiprintf_r+0x4f6>
  40684a:	4605      	mov	r5, r0
  40684c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  406850:	45aa      	cmp	sl, r5
  406852:	bfac      	ite	ge
  406854:	4654      	movge	r4, sl
  406856:	462c      	movlt	r4, r5
  406858:	b103      	cbz	r3, 40685c <_svfiprintf_r+0x506>
  40685a:	3401      	adds	r4, #1
  40685c:	f017 0302 	ands.w	r3, r7, #2
  406860:	9303      	str	r3, [sp, #12]
  406862:	bf18      	it	ne
  406864:	3402      	addne	r4, #2
  406866:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  40686a:	930b      	str	r3, [sp, #44]	; 0x2c
  40686c:	d13b      	bne.n	4068e6 <_svfiprintf_r+0x590>
  40686e:	9804      	ldr	r0, [sp, #16]
  406870:	1b03      	subs	r3, r0, r4
  406872:	2b00      	cmp	r3, #0
  406874:	dd37      	ble.n	4068e6 <_svfiprintf_r+0x590>
  406876:	4aa6      	ldr	r2, [pc, #664]	; (406b10 <_svfiprintf_r+0x7ba>)
  406878:	2b10      	cmp	r3, #16
  40687a:	f8cc 2000 	str.w	r2, [ip]
  40687e:	dd1b      	ble.n	4068b8 <_svfiprintf_r+0x562>
  406880:	2210      	movs	r2, #16
  406882:	f8cc 2004 	str.w	r2, [ip, #4]
  406886:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406888:	3210      	adds	r2, #16
  40688a:	9211      	str	r2, [sp, #68]	; 0x44
  40688c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40688e:	3201      	adds	r2, #1
  406890:	2a07      	cmp	r2, #7
  406892:	9210      	str	r2, [sp, #64]	; 0x40
  406894:	dc02      	bgt.n	40689c <_svfiprintf_r+0x546>
  406896:	f10c 0c08 	add.w	ip, ip, #8
  40689a:	e00b      	b.n	4068b4 <_svfiprintf_r+0x55e>
  40689c:	4658      	mov	r0, fp
  40689e:	4641      	mov	r1, r8
  4068a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4068a2:	9301      	str	r3, [sp, #4]
  4068a4:	f7ff fcde 	bl	406264 <__ssprint_r>
  4068a8:	9b01      	ldr	r3, [sp, #4]
  4068aa:	2800      	cmp	r0, #0
  4068ac:	f040 813b 	bne.w	406b26 <_svfiprintf_r+0x7d0>
  4068b0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4068b4:	3b10      	subs	r3, #16
  4068b6:	e7de      	b.n	406876 <_svfiprintf_r+0x520>
  4068b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4068ba:	f8cc 3004 	str.w	r3, [ip, #4]
  4068be:	4413      	add	r3, r2
  4068c0:	9311      	str	r3, [sp, #68]	; 0x44
  4068c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4068c4:	3301      	adds	r3, #1
  4068c6:	2b07      	cmp	r3, #7
  4068c8:	9310      	str	r3, [sp, #64]	; 0x40
  4068ca:	dc02      	bgt.n	4068d2 <_svfiprintf_r+0x57c>
  4068cc:	f10c 0c08 	add.w	ip, ip, #8
  4068d0:	e009      	b.n	4068e6 <_svfiprintf_r+0x590>
  4068d2:	4658      	mov	r0, fp
  4068d4:	4641      	mov	r1, r8
  4068d6:	aa0f      	add	r2, sp, #60	; 0x3c
  4068d8:	f7ff fcc4 	bl	406264 <__ssprint_r>
  4068dc:	2800      	cmp	r0, #0
  4068de:	f040 8122 	bne.w	406b26 <_svfiprintf_r+0x7d0>
  4068e2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4068e6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  4068ea:	b1db      	cbz	r3, 406924 <_svfiprintf_r+0x5ce>
  4068ec:	f10d 0337 	add.w	r3, sp, #55	; 0x37
  4068f0:	f8cc 3000 	str.w	r3, [ip]
  4068f4:	2301      	movs	r3, #1
  4068f6:	f8cc 3004 	str.w	r3, [ip, #4]
  4068fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4068fc:	3301      	adds	r3, #1
  4068fe:	9311      	str	r3, [sp, #68]	; 0x44
  406900:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406902:	3301      	adds	r3, #1
  406904:	2b07      	cmp	r3, #7
  406906:	9310      	str	r3, [sp, #64]	; 0x40
  406908:	dc02      	bgt.n	406910 <_svfiprintf_r+0x5ba>
  40690a:	f10c 0c08 	add.w	ip, ip, #8
  40690e:	e009      	b.n	406924 <_svfiprintf_r+0x5ce>
  406910:	4658      	mov	r0, fp
  406912:	4641      	mov	r1, r8
  406914:	aa0f      	add	r2, sp, #60	; 0x3c
  406916:	f7ff fca5 	bl	406264 <__ssprint_r>
  40691a:	2800      	cmp	r0, #0
  40691c:	f040 8103 	bne.w	406b26 <_svfiprintf_r+0x7d0>
  406920:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406924:	9b03      	ldr	r3, [sp, #12]
  406926:	b1d3      	cbz	r3, 40695e <_svfiprintf_r+0x608>
  406928:	ab0e      	add	r3, sp, #56	; 0x38
  40692a:	f8cc 3000 	str.w	r3, [ip]
  40692e:	2302      	movs	r3, #2
  406930:	f8cc 3004 	str.w	r3, [ip, #4]
  406934:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406936:	3302      	adds	r3, #2
  406938:	9311      	str	r3, [sp, #68]	; 0x44
  40693a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40693c:	3301      	adds	r3, #1
  40693e:	2b07      	cmp	r3, #7
  406940:	9310      	str	r3, [sp, #64]	; 0x40
  406942:	dc02      	bgt.n	40694a <_svfiprintf_r+0x5f4>
  406944:	f10c 0c08 	add.w	ip, ip, #8
  406948:	e009      	b.n	40695e <_svfiprintf_r+0x608>
  40694a:	4658      	mov	r0, fp
  40694c:	4641      	mov	r1, r8
  40694e:	aa0f      	add	r2, sp, #60	; 0x3c
  406950:	f7ff fc88 	bl	406264 <__ssprint_r>
  406954:	2800      	cmp	r0, #0
  406956:	f040 80e6 	bne.w	406b26 <_svfiprintf_r+0x7d0>
  40695a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  40695e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406960:	2b80      	cmp	r3, #128	; 0x80
  406962:	d13f      	bne.n	4069e4 <_svfiprintf_r+0x68e>
  406964:	9b04      	ldr	r3, [sp, #16]
  406966:	1b1b      	subs	r3, r3, r4
  406968:	2b00      	cmp	r3, #0
  40696a:	9303      	str	r3, [sp, #12]
  40696c:	dd3a      	ble.n	4069e4 <_svfiprintf_r+0x68e>
  40696e:	9b03      	ldr	r3, [sp, #12]
  406970:	2b10      	cmp	r3, #16
  406972:	4b68      	ldr	r3, [pc, #416]	; (406b14 <_svfiprintf_r+0x7be>)
  406974:	f8cc 3000 	str.w	r3, [ip]
  406978:	dd1b      	ble.n	4069b2 <_svfiprintf_r+0x65c>
  40697a:	2310      	movs	r3, #16
  40697c:	f8cc 3004 	str.w	r3, [ip, #4]
  406980:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406982:	3310      	adds	r3, #16
  406984:	9311      	str	r3, [sp, #68]	; 0x44
  406986:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406988:	3301      	adds	r3, #1
  40698a:	2b07      	cmp	r3, #7
  40698c:	9310      	str	r3, [sp, #64]	; 0x40
  40698e:	dc02      	bgt.n	406996 <_svfiprintf_r+0x640>
  406990:	f10c 0c08 	add.w	ip, ip, #8
  406994:	e009      	b.n	4069aa <_svfiprintf_r+0x654>
  406996:	4658      	mov	r0, fp
  406998:	4641      	mov	r1, r8
  40699a:	aa0f      	add	r2, sp, #60	; 0x3c
  40699c:	f7ff fc62 	bl	406264 <__ssprint_r>
  4069a0:	2800      	cmp	r0, #0
  4069a2:	f040 80c0 	bne.w	406b26 <_svfiprintf_r+0x7d0>
  4069a6:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4069aa:	9b03      	ldr	r3, [sp, #12]
  4069ac:	3b10      	subs	r3, #16
  4069ae:	9303      	str	r3, [sp, #12]
  4069b0:	e7dd      	b.n	40696e <_svfiprintf_r+0x618>
  4069b2:	9b03      	ldr	r3, [sp, #12]
  4069b4:	9803      	ldr	r0, [sp, #12]
  4069b6:	f8cc 3004 	str.w	r3, [ip, #4]
  4069ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4069bc:	4403      	add	r3, r0
  4069be:	9311      	str	r3, [sp, #68]	; 0x44
  4069c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4069c2:	3301      	adds	r3, #1
  4069c4:	2b07      	cmp	r3, #7
  4069c6:	9310      	str	r3, [sp, #64]	; 0x40
  4069c8:	dc02      	bgt.n	4069d0 <_svfiprintf_r+0x67a>
  4069ca:	f10c 0c08 	add.w	ip, ip, #8
  4069ce:	e009      	b.n	4069e4 <_svfiprintf_r+0x68e>
  4069d0:	4658      	mov	r0, fp
  4069d2:	4641      	mov	r1, r8
  4069d4:	aa0f      	add	r2, sp, #60	; 0x3c
  4069d6:	f7ff fc45 	bl	406264 <__ssprint_r>
  4069da:	2800      	cmp	r0, #0
  4069dc:	f040 80a3 	bne.w	406b26 <_svfiprintf_r+0x7d0>
  4069e0:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  4069e4:	ebca 0505 	rsb	r5, sl, r5
  4069e8:	2d00      	cmp	r5, #0
  4069ea:	dd34      	ble.n	406a56 <_svfiprintf_r+0x700>
  4069ec:	4b49      	ldr	r3, [pc, #292]	; (406b14 <_svfiprintf_r+0x7be>)
  4069ee:	2d10      	cmp	r5, #16
  4069f0:	f8cc 3000 	str.w	r3, [ip]
  4069f4:	dd19      	ble.n	406a2a <_svfiprintf_r+0x6d4>
  4069f6:	2310      	movs	r3, #16
  4069f8:	f8cc 3004 	str.w	r3, [ip, #4]
  4069fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4069fe:	3310      	adds	r3, #16
  406a00:	9311      	str	r3, [sp, #68]	; 0x44
  406a02:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406a04:	3301      	adds	r3, #1
  406a06:	2b07      	cmp	r3, #7
  406a08:	9310      	str	r3, [sp, #64]	; 0x40
  406a0a:	dc02      	bgt.n	406a12 <_svfiprintf_r+0x6bc>
  406a0c:	f10c 0c08 	add.w	ip, ip, #8
  406a10:	e009      	b.n	406a26 <_svfiprintf_r+0x6d0>
  406a12:	4658      	mov	r0, fp
  406a14:	4641      	mov	r1, r8
  406a16:	aa0f      	add	r2, sp, #60	; 0x3c
  406a18:	f7ff fc24 	bl	406264 <__ssprint_r>
  406a1c:	2800      	cmp	r0, #0
  406a1e:	f040 8082 	bne.w	406b26 <_svfiprintf_r+0x7d0>
  406a22:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406a26:	3d10      	subs	r5, #16
  406a28:	e7e0      	b.n	4069ec <_svfiprintf_r+0x696>
  406a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a2c:	f8cc 5004 	str.w	r5, [ip, #4]
  406a30:	441d      	add	r5, r3
  406a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406a34:	9511      	str	r5, [sp, #68]	; 0x44
  406a36:	3301      	adds	r3, #1
  406a38:	2b07      	cmp	r3, #7
  406a3a:	9310      	str	r3, [sp, #64]	; 0x40
  406a3c:	dc02      	bgt.n	406a44 <_svfiprintf_r+0x6ee>
  406a3e:	f10c 0c08 	add.w	ip, ip, #8
  406a42:	e008      	b.n	406a56 <_svfiprintf_r+0x700>
  406a44:	4658      	mov	r0, fp
  406a46:	4641      	mov	r1, r8
  406a48:	aa0f      	add	r2, sp, #60	; 0x3c
  406a4a:	f7ff fc0b 	bl	406264 <__ssprint_r>
  406a4e:	2800      	cmp	r0, #0
  406a50:	d169      	bne.n	406b26 <_svfiprintf_r+0x7d0>
  406a52:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406a56:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a58:	e88c 0600 	stmia.w	ip, {r9, sl}
  406a5c:	4453      	add	r3, sl
  406a5e:	9311      	str	r3, [sp, #68]	; 0x44
  406a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406a62:	3301      	adds	r3, #1
  406a64:	2b07      	cmp	r3, #7
  406a66:	9310      	str	r3, [sp, #64]	; 0x40
  406a68:	dc02      	bgt.n	406a70 <_svfiprintf_r+0x71a>
  406a6a:	f10c 0308 	add.w	r3, ip, #8
  406a6e:	e007      	b.n	406a80 <_svfiprintf_r+0x72a>
  406a70:	4658      	mov	r0, fp
  406a72:	4641      	mov	r1, r8
  406a74:	aa0f      	add	r2, sp, #60	; 0x3c
  406a76:	f7ff fbf5 	bl	406264 <__ssprint_r>
  406a7a:	2800      	cmp	r0, #0
  406a7c:	d153      	bne.n	406b26 <_svfiprintf_r+0x7d0>
  406a7e:	ab1c      	add	r3, sp, #112	; 0x70
  406a80:	077a      	lsls	r2, r7, #29
  406a82:	d40a      	bmi.n	406a9a <_svfiprintf_r+0x744>
  406a84:	9d05      	ldr	r5, [sp, #20]
  406a86:	9804      	ldr	r0, [sp, #16]
  406a88:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a8a:	4284      	cmp	r4, r0
  406a8c:	bfac      	ite	ge
  406a8e:	192d      	addge	r5, r5, r4
  406a90:	182d      	addlt	r5, r5, r0
  406a92:	9505      	str	r5, [sp, #20]
  406a94:	2b00      	cmp	r3, #0
  406a96:	d035      	beq.n	406b04 <_svfiprintf_r+0x7ae>
  406a98:	e02e      	b.n	406af8 <_svfiprintf_r+0x7a2>
  406a9a:	9904      	ldr	r1, [sp, #16]
  406a9c:	1b0d      	subs	r5, r1, r4
  406a9e:	2d00      	cmp	r5, #0
  406aa0:	ddf0      	ble.n	406a84 <_svfiprintf_r+0x72e>
  406aa2:	4a1b      	ldr	r2, [pc, #108]	; (406b10 <_svfiprintf_r+0x7ba>)
  406aa4:	2d10      	cmp	r5, #16
  406aa6:	601a      	str	r2, [r3, #0]
  406aa8:	dd15      	ble.n	406ad6 <_svfiprintf_r+0x780>
  406aaa:	2210      	movs	r2, #16
  406aac:	605a      	str	r2, [r3, #4]
  406aae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406ab0:	3210      	adds	r2, #16
  406ab2:	9211      	str	r2, [sp, #68]	; 0x44
  406ab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406ab6:	3201      	adds	r2, #1
  406ab8:	2a07      	cmp	r2, #7
  406aba:	9210      	str	r2, [sp, #64]	; 0x40
  406abc:	dc01      	bgt.n	406ac2 <_svfiprintf_r+0x76c>
  406abe:	3308      	adds	r3, #8
  406ac0:	e007      	b.n	406ad2 <_svfiprintf_r+0x77c>
  406ac2:	4658      	mov	r0, fp
  406ac4:	4641      	mov	r1, r8
  406ac6:	aa0f      	add	r2, sp, #60	; 0x3c
  406ac8:	f7ff fbcc 	bl	406264 <__ssprint_r>
  406acc:	2800      	cmp	r0, #0
  406ace:	d12a      	bne.n	406b26 <_svfiprintf_r+0x7d0>
  406ad0:	ab1c      	add	r3, sp, #112	; 0x70
  406ad2:	3d10      	subs	r5, #16
  406ad4:	e7e5      	b.n	406aa2 <_svfiprintf_r+0x74c>
  406ad6:	605d      	str	r5, [r3, #4]
  406ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406ada:	441d      	add	r5, r3
  406adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406ade:	9511      	str	r5, [sp, #68]	; 0x44
  406ae0:	3301      	adds	r3, #1
  406ae2:	2b07      	cmp	r3, #7
  406ae4:	9310      	str	r3, [sp, #64]	; 0x40
  406ae6:	ddcd      	ble.n	406a84 <_svfiprintf_r+0x72e>
  406ae8:	4658      	mov	r0, fp
  406aea:	4641      	mov	r1, r8
  406aec:	aa0f      	add	r2, sp, #60	; 0x3c
  406aee:	f7ff fbb9 	bl	406264 <__ssprint_r>
  406af2:	2800      	cmp	r0, #0
  406af4:	d0c6      	beq.n	406a84 <_svfiprintf_r+0x72e>
  406af6:	e016      	b.n	406b26 <_svfiprintf_r+0x7d0>
  406af8:	4658      	mov	r0, fp
  406afa:	4641      	mov	r1, r8
  406afc:	aa0f      	add	r2, sp, #60	; 0x3c
  406afe:	f7ff fbb1 	bl	406264 <__ssprint_r>
  406b02:	b980      	cbnz	r0, 406b26 <_svfiprintf_r+0x7d0>
  406b04:	2300      	movs	r3, #0
  406b06:	9310      	str	r3, [sp, #64]	; 0x40
  406b08:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406b0c:	e449      	b.n	4063a2 <_svfiprintf_r+0x4c>
  406b0e:	bf00      	nop
  406b10:	00407e38 	.word	0x00407e38
  406b14:	00407e48 	.word	0x00407e48
  406b18:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406b1a:	b123      	cbz	r3, 406b26 <_svfiprintf_r+0x7d0>
  406b1c:	4658      	mov	r0, fp
  406b1e:	4641      	mov	r1, r8
  406b20:	aa0f      	add	r2, sp, #60	; 0x3c
  406b22:	f7ff fb9f 	bl	406264 <__ssprint_r>
  406b26:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  406b2a:	9805      	ldr	r0, [sp, #20]
  406b2c:	f013 0f40 	tst.w	r3, #64	; 0x40
  406b30:	bf18      	it	ne
  406b32:	f04f 30ff 	movne.w	r0, #4294967295
  406b36:	b02d      	add	sp, #180	; 0xb4
  406b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406b3c <__register_exitproc>:
  406b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406b40:	4698      	mov	r8, r3
  406b42:	4b22      	ldr	r3, [pc, #136]	; (406bcc <__register_exitproc+0x90>)
  406b44:	4606      	mov	r6, r0
  406b46:	681c      	ldr	r4, [r3, #0]
  406b48:	460f      	mov	r7, r1
  406b4a:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  406b4e:	4691      	mov	r9, r2
  406b50:	b918      	cbnz	r0, 406b5a <__register_exitproc+0x1e>
  406b52:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  406b56:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406b5a:	6843      	ldr	r3, [r0, #4]
  406b5c:	2b1f      	cmp	r3, #31
  406b5e:	dd16      	ble.n	406b8e <__register_exitproc+0x52>
  406b60:	4b1b      	ldr	r3, [pc, #108]	; (406bd0 <__register_exitproc+0x94>)
  406b62:	b91b      	cbnz	r3, 406b6c <__register_exitproc+0x30>
  406b64:	f04f 30ff 	mov.w	r0, #4294967295
  406b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406b70:	f3af 8000 	nop.w
  406b74:	2800      	cmp	r0, #0
  406b76:	d0f5      	beq.n	406b64 <__register_exitproc+0x28>
  406b78:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  406b7c:	2500      	movs	r5, #0
  406b7e:	6045      	str	r5, [r0, #4]
  406b80:	6001      	str	r1, [r0, #0]
  406b82:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406b86:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  406b8a:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  406b8e:	6844      	ldr	r4, [r0, #4]
  406b90:	b1a6      	cbz	r6, 406bbc <__register_exitproc+0x80>
  406b92:	2201      	movs	r2, #1
  406b94:	40a2      	lsls	r2, r4
  406b96:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  406b9a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  406b9e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  406ba2:	2e02      	cmp	r6, #2
  406ba4:	ea41 0102 	orr.w	r1, r1, r2
  406ba8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406bac:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
  406bb0:	d104      	bne.n	406bbc <__register_exitproc+0x80>
  406bb2:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  406bb6:	431a      	orrs	r2, r3
  406bb8:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  406bbc:	1c63      	adds	r3, r4, #1
  406bbe:	3402      	adds	r4, #2
  406bc0:	6043      	str	r3, [r0, #4]
  406bc2:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
  406bc6:	2000      	movs	r0, #0
  406bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406bcc:	00407ba0 	.word	0x00407ba0
  406bd0:	00000000 	.word	0x00000000

00406bd4 <_calloc_r>:
  406bd4:	b510      	push	{r4, lr}
  406bd6:	4351      	muls	r1, r2
  406bd8:	f7fe fb40 	bl	40525c <_malloc_r>
  406bdc:	4604      	mov	r4, r0
  406bde:	b320      	cbz	r0, 406c2a <_calloc_r+0x56>
  406be0:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406be4:	f022 0203 	bic.w	r2, r2, #3
  406be8:	3a04      	subs	r2, #4
  406bea:	2a24      	cmp	r2, #36	; 0x24
  406bec:	d81a      	bhi.n	406c24 <_calloc_r+0x50>
  406bee:	2a13      	cmp	r2, #19
  406bf0:	d912      	bls.n	406c18 <_calloc_r+0x44>
  406bf2:	2100      	movs	r1, #0
  406bf4:	2a1b      	cmp	r2, #27
  406bf6:	6001      	str	r1, [r0, #0]
  406bf8:	6041      	str	r1, [r0, #4]
  406bfa:	d802      	bhi.n	406c02 <_calloc_r+0x2e>
  406bfc:	f100 0308 	add.w	r3, r0, #8
  406c00:	e00b      	b.n	406c1a <_calloc_r+0x46>
  406c02:	2a24      	cmp	r2, #36	; 0x24
  406c04:	6081      	str	r1, [r0, #8]
  406c06:	60c1      	str	r1, [r0, #12]
  406c08:	bf11      	iteee	ne
  406c0a:	f100 0310 	addne.w	r3, r0, #16
  406c0e:	6101      	streq	r1, [r0, #16]
  406c10:	f100 0318 	addeq.w	r3, r0, #24
  406c14:	6141      	streq	r1, [r0, #20]
  406c16:	e000      	b.n	406c1a <_calloc_r+0x46>
  406c18:	4603      	mov	r3, r0
  406c1a:	2200      	movs	r2, #0
  406c1c:	601a      	str	r2, [r3, #0]
  406c1e:	605a      	str	r2, [r3, #4]
  406c20:	609a      	str	r2, [r3, #8]
  406c22:	e002      	b.n	406c2a <_calloc_r+0x56>
  406c24:	2100      	movs	r1, #0
  406c26:	f7fc fad6 	bl	4031d6 <memset>
  406c2a:	4620      	mov	r0, r4
  406c2c:	bd10      	pop	{r4, pc}
	...

00406c30 <__aeabi_drsub>:
  406c30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406c34:	e002      	b.n	406c3c <__adddf3>
  406c36:	bf00      	nop

00406c38 <__aeabi_dsub>:
  406c38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406c3c <__adddf3>:
  406c3c:	b530      	push	{r4, r5, lr}
  406c3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406c42:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406c46:	ea94 0f05 	teq	r4, r5
  406c4a:	bf08      	it	eq
  406c4c:	ea90 0f02 	teqeq	r0, r2
  406c50:	bf1f      	itttt	ne
  406c52:	ea54 0c00 	orrsne.w	ip, r4, r0
  406c56:	ea55 0c02 	orrsne.w	ip, r5, r2
  406c5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406c5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406c62:	f000 80e2 	beq.w	406e2a <__adddf3+0x1ee>
  406c66:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406c6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406c6e:	bfb8      	it	lt
  406c70:	426d      	neglt	r5, r5
  406c72:	dd0c      	ble.n	406c8e <__adddf3+0x52>
  406c74:	442c      	add	r4, r5
  406c76:	ea80 0202 	eor.w	r2, r0, r2
  406c7a:	ea81 0303 	eor.w	r3, r1, r3
  406c7e:	ea82 0000 	eor.w	r0, r2, r0
  406c82:	ea83 0101 	eor.w	r1, r3, r1
  406c86:	ea80 0202 	eor.w	r2, r0, r2
  406c8a:	ea81 0303 	eor.w	r3, r1, r3
  406c8e:	2d36      	cmp	r5, #54	; 0x36
  406c90:	bf88      	it	hi
  406c92:	bd30      	pophi	{r4, r5, pc}
  406c94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406c98:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406c9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406ca0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406ca4:	d002      	beq.n	406cac <__adddf3+0x70>
  406ca6:	4240      	negs	r0, r0
  406ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406cac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406cb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406cb4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406cb8:	d002      	beq.n	406cc0 <__adddf3+0x84>
  406cba:	4252      	negs	r2, r2
  406cbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406cc0:	ea94 0f05 	teq	r4, r5
  406cc4:	f000 80a7 	beq.w	406e16 <__adddf3+0x1da>
  406cc8:	f1a4 0401 	sub.w	r4, r4, #1
  406ccc:	f1d5 0e20 	rsbs	lr, r5, #32
  406cd0:	db0d      	blt.n	406cee <__adddf3+0xb2>
  406cd2:	fa02 fc0e 	lsl.w	ip, r2, lr
  406cd6:	fa22 f205 	lsr.w	r2, r2, r5
  406cda:	1880      	adds	r0, r0, r2
  406cdc:	f141 0100 	adc.w	r1, r1, #0
  406ce0:	fa03 f20e 	lsl.w	r2, r3, lr
  406ce4:	1880      	adds	r0, r0, r2
  406ce6:	fa43 f305 	asr.w	r3, r3, r5
  406cea:	4159      	adcs	r1, r3
  406cec:	e00e      	b.n	406d0c <__adddf3+0xd0>
  406cee:	f1a5 0520 	sub.w	r5, r5, #32
  406cf2:	f10e 0e20 	add.w	lr, lr, #32
  406cf6:	2a01      	cmp	r2, #1
  406cf8:	fa03 fc0e 	lsl.w	ip, r3, lr
  406cfc:	bf28      	it	cs
  406cfe:	f04c 0c02 	orrcs.w	ip, ip, #2
  406d02:	fa43 f305 	asr.w	r3, r3, r5
  406d06:	18c0      	adds	r0, r0, r3
  406d08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406d0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406d10:	d507      	bpl.n	406d22 <__adddf3+0xe6>
  406d12:	f04f 0e00 	mov.w	lr, #0
  406d16:	f1dc 0c00 	rsbs	ip, ip, #0
  406d1a:	eb7e 0000 	sbcs.w	r0, lr, r0
  406d1e:	eb6e 0101 	sbc.w	r1, lr, r1
  406d22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406d26:	d31b      	bcc.n	406d60 <__adddf3+0x124>
  406d28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406d2c:	d30c      	bcc.n	406d48 <__adddf3+0x10c>
  406d2e:	0849      	lsrs	r1, r1, #1
  406d30:	ea5f 0030 	movs.w	r0, r0, rrx
  406d34:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406d38:	f104 0401 	add.w	r4, r4, #1
  406d3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406d40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406d44:	f080 809a 	bcs.w	406e7c <__adddf3+0x240>
  406d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406d4c:	bf08      	it	eq
  406d4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406d52:	f150 0000 	adcs.w	r0, r0, #0
  406d56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406d5a:	ea41 0105 	orr.w	r1, r1, r5
  406d5e:	bd30      	pop	{r4, r5, pc}
  406d60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406d64:	4140      	adcs	r0, r0
  406d66:	eb41 0101 	adc.w	r1, r1, r1
  406d6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406d6e:	f1a4 0401 	sub.w	r4, r4, #1
  406d72:	d1e9      	bne.n	406d48 <__adddf3+0x10c>
  406d74:	f091 0f00 	teq	r1, #0
  406d78:	bf04      	itt	eq
  406d7a:	4601      	moveq	r1, r0
  406d7c:	2000      	moveq	r0, #0
  406d7e:	fab1 f381 	clz	r3, r1
  406d82:	bf08      	it	eq
  406d84:	3320      	addeq	r3, #32
  406d86:	f1a3 030b 	sub.w	r3, r3, #11
  406d8a:	f1b3 0220 	subs.w	r2, r3, #32
  406d8e:	da0c      	bge.n	406daa <__adddf3+0x16e>
  406d90:	320c      	adds	r2, #12
  406d92:	dd08      	ble.n	406da6 <__adddf3+0x16a>
  406d94:	f102 0c14 	add.w	ip, r2, #20
  406d98:	f1c2 020c 	rsb	r2, r2, #12
  406d9c:	fa01 f00c 	lsl.w	r0, r1, ip
  406da0:	fa21 f102 	lsr.w	r1, r1, r2
  406da4:	e00c      	b.n	406dc0 <__adddf3+0x184>
  406da6:	f102 0214 	add.w	r2, r2, #20
  406daa:	bfd8      	it	le
  406dac:	f1c2 0c20 	rsble	ip, r2, #32
  406db0:	fa01 f102 	lsl.w	r1, r1, r2
  406db4:	fa20 fc0c 	lsr.w	ip, r0, ip
  406db8:	bfdc      	itt	le
  406dba:	ea41 010c 	orrle.w	r1, r1, ip
  406dbe:	4090      	lslle	r0, r2
  406dc0:	1ae4      	subs	r4, r4, r3
  406dc2:	bfa2      	ittt	ge
  406dc4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406dc8:	4329      	orrge	r1, r5
  406dca:	bd30      	popge	{r4, r5, pc}
  406dcc:	ea6f 0404 	mvn.w	r4, r4
  406dd0:	3c1f      	subs	r4, #31
  406dd2:	da1c      	bge.n	406e0e <__adddf3+0x1d2>
  406dd4:	340c      	adds	r4, #12
  406dd6:	dc0e      	bgt.n	406df6 <__adddf3+0x1ba>
  406dd8:	f104 0414 	add.w	r4, r4, #20
  406ddc:	f1c4 0220 	rsb	r2, r4, #32
  406de0:	fa20 f004 	lsr.w	r0, r0, r4
  406de4:	fa01 f302 	lsl.w	r3, r1, r2
  406de8:	ea40 0003 	orr.w	r0, r0, r3
  406dec:	fa21 f304 	lsr.w	r3, r1, r4
  406df0:	ea45 0103 	orr.w	r1, r5, r3
  406df4:	bd30      	pop	{r4, r5, pc}
  406df6:	f1c4 040c 	rsb	r4, r4, #12
  406dfa:	f1c4 0220 	rsb	r2, r4, #32
  406dfe:	fa20 f002 	lsr.w	r0, r0, r2
  406e02:	fa01 f304 	lsl.w	r3, r1, r4
  406e06:	ea40 0003 	orr.w	r0, r0, r3
  406e0a:	4629      	mov	r1, r5
  406e0c:	bd30      	pop	{r4, r5, pc}
  406e0e:	fa21 f004 	lsr.w	r0, r1, r4
  406e12:	4629      	mov	r1, r5
  406e14:	bd30      	pop	{r4, r5, pc}
  406e16:	f094 0f00 	teq	r4, #0
  406e1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406e1e:	bf06      	itte	eq
  406e20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406e24:	3401      	addeq	r4, #1
  406e26:	3d01      	subne	r5, #1
  406e28:	e74e      	b.n	406cc8 <__adddf3+0x8c>
  406e2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406e2e:	bf18      	it	ne
  406e30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406e34:	d029      	beq.n	406e8a <__adddf3+0x24e>
  406e36:	ea94 0f05 	teq	r4, r5
  406e3a:	bf08      	it	eq
  406e3c:	ea90 0f02 	teqeq	r0, r2
  406e40:	d005      	beq.n	406e4e <__adddf3+0x212>
  406e42:	ea54 0c00 	orrs.w	ip, r4, r0
  406e46:	bf04      	itt	eq
  406e48:	4619      	moveq	r1, r3
  406e4a:	4610      	moveq	r0, r2
  406e4c:	bd30      	pop	{r4, r5, pc}
  406e4e:	ea91 0f03 	teq	r1, r3
  406e52:	bf1e      	ittt	ne
  406e54:	2100      	movne	r1, #0
  406e56:	2000      	movne	r0, #0
  406e58:	bd30      	popne	{r4, r5, pc}
  406e5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406e5e:	d105      	bne.n	406e6c <__adddf3+0x230>
  406e60:	0040      	lsls	r0, r0, #1
  406e62:	4149      	adcs	r1, r1
  406e64:	bf28      	it	cs
  406e66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406e6a:	bd30      	pop	{r4, r5, pc}
  406e6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406e70:	bf3c      	itt	cc
  406e72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406e76:	bd30      	popcc	{r4, r5, pc}
  406e78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406e7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  406e80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406e84:	f04f 0000 	mov.w	r0, #0
  406e88:	bd30      	pop	{r4, r5, pc}
  406e8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406e8e:	bf1a      	itte	ne
  406e90:	4619      	movne	r1, r3
  406e92:	4610      	movne	r0, r2
  406e94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  406e98:	bf1c      	itt	ne
  406e9a:	460b      	movne	r3, r1
  406e9c:	4602      	movne	r2, r0
  406e9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406ea2:	bf06      	itte	eq
  406ea4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  406ea8:	ea91 0f03 	teqeq	r1, r3
  406eac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406eb0:	bd30      	pop	{r4, r5, pc}
  406eb2:	bf00      	nop

00406eb4 <__aeabi_ui2d>:
  406eb4:	f090 0f00 	teq	r0, #0
  406eb8:	bf04      	itt	eq
  406eba:	2100      	moveq	r1, #0
  406ebc:	4770      	bxeq	lr
  406ebe:	b530      	push	{r4, r5, lr}
  406ec0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406ec4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406ec8:	f04f 0500 	mov.w	r5, #0
  406ecc:	f04f 0100 	mov.w	r1, #0
  406ed0:	e750      	b.n	406d74 <__adddf3+0x138>
  406ed2:	bf00      	nop

00406ed4 <__aeabi_i2d>:
  406ed4:	f090 0f00 	teq	r0, #0
  406ed8:	bf04      	itt	eq
  406eda:	2100      	moveq	r1, #0
  406edc:	4770      	bxeq	lr
  406ede:	b530      	push	{r4, r5, lr}
  406ee0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406ee4:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406ee8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406eec:	bf48      	it	mi
  406eee:	4240      	negmi	r0, r0
  406ef0:	f04f 0100 	mov.w	r1, #0
  406ef4:	e73e      	b.n	406d74 <__adddf3+0x138>
  406ef6:	bf00      	nop

00406ef8 <__aeabi_f2d>:
  406ef8:	0042      	lsls	r2, r0, #1
  406efa:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406efe:	ea4f 0131 	mov.w	r1, r1, rrx
  406f02:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406f06:	bf1f      	itttt	ne
  406f08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406f0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406f10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406f14:	4770      	bxne	lr
  406f16:	f092 0f00 	teq	r2, #0
  406f1a:	bf14      	ite	ne
  406f1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406f20:	4770      	bxeq	lr
  406f22:	b530      	push	{r4, r5, lr}
  406f24:	f44f 7460 	mov.w	r4, #896	; 0x380
  406f28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406f2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406f30:	e720      	b.n	406d74 <__adddf3+0x138>
  406f32:	bf00      	nop

00406f34 <__aeabi_ul2d>:
  406f34:	ea50 0201 	orrs.w	r2, r0, r1
  406f38:	bf08      	it	eq
  406f3a:	4770      	bxeq	lr
  406f3c:	b530      	push	{r4, r5, lr}
  406f3e:	f04f 0500 	mov.w	r5, #0
  406f42:	e00a      	b.n	406f5a <__aeabi_l2d+0x16>

00406f44 <__aeabi_l2d>:
  406f44:	ea50 0201 	orrs.w	r2, r0, r1
  406f48:	bf08      	it	eq
  406f4a:	4770      	bxeq	lr
  406f4c:	b530      	push	{r4, r5, lr}
  406f4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  406f52:	d502      	bpl.n	406f5a <__aeabi_l2d+0x16>
  406f54:	4240      	negs	r0, r0
  406f56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406f5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406f5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406f62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  406f66:	f43f aedc 	beq.w	406d22 <__adddf3+0xe6>
  406f6a:	f04f 0203 	mov.w	r2, #3
  406f6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406f72:	bf18      	it	ne
  406f74:	3203      	addne	r2, #3
  406f76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  406f7a:	bf18      	it	ne
  406f7c:	3203      	addne	r2, #3
  406f7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  406f82:	f1c2 0320 	rsb	r3, r2, #32
  406f86:	fa00 fc03 	lsl.w	ip, r0, r3
  406f8a:	fa20 f002 	lsr.w	r0, r0, r2
  406f8e:	fa01 fe03 	lsl.w	lr, r1, r3
  406f92:	ea40 000e 	orr.w	r0, r0, lr
  406f96:	fa21 f102 	lsr.w	r1, r1, r2
  406f9a:	4414      	add	r4, r2
  406f9c:	e6c1      	b.n	406d22 <__adddf3+0xe6>
  406f9e:	bf00      	nop

00406fa0 <__aeabi_dmul>:
  406fa0:	b570      	push	{r4, r5, r6, lr}
  406fa2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406fa6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406faa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406fae:	bf1d      	ittte	ne
  406fb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406fb4:	ea94 0f0c 	teqne	r4, ip
  406fb8:	ea95 0f0c 	teqne	r5, ip
  406fbc:	f000 f8de 	bleq	40717c <__aeabi_dmul+0x1dc>
  406fc0:	442c      	add	r4, r5
  406fc2:	ea81 0603 	eor.w	r6, r1, r3
  406fc6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  406fca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  406fce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  406fd2:	bf18      	it	ne
  406fd4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  406fd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406fe0:	d038      	beq.n	407054 <__aeabi_dmul+0xb4>
  406fe2:	fba0 ce02 	umull	ip, lr, r0, r2
  406fe6:	f04f 0500 	mov.w	r5, #0
  406fea:	fbe1 e502 	umlal	lr, r5, r1, r2
  406fee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  406ff2:	fbe0 e503 	umlal	lr, r5, r0, r3
  406ff6:	f04f 0600 	mov.w	r6, #0
  406ffa:	fbe1 5603 	umlal	r5, r6, r1, r3
  406ffe:	f09c 0f00 	teq	ip, #0
  407002:	bf18      	it	ne
  407004:	f04e 0e01 	orrne.w	lr, lr, #1
  407008:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40700c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407010:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407014:	d204      	bcs.n	407020 <__aeabi_dmul+0x80>
  407016:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40701a:	416d      	adcs	r5, r5
  40701c:	eb46 0606 	adc.w	r6, r6, r6
  407020:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407024:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407028:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40702c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407030:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407034:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407038:	bf88      	it	hi
  40703a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40703e:	d81e      	bhi.n	40707e <__aeabi_dmul+0xde>
  407040:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407044:	bf08      	it	eq
  407046:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40704a:	f150 0000 	adcs.w	r0, r0, #0
  40704e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407052:	bd70      	pop	{r4, r5, r6, pc}
  407054:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407058:	ea46 0101 	orr.w	r1, r6, r1
  40705c:	ea40 0002 	orr.w	r0, r0, r2
  407060:	ea81 0103 	eor.w	r1, r1, r3
  407064:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407068:	bfc2      	ittt	gt
  40706a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40706e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407072:	bd70      	popgt	{r4, r5, r6, pc}
  407074:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407078:	f04f 0e00 	mov.w	lr, #0
  40707c:	3c01      	subs	r4, #1
  40707e:	f300 80ab 	bgt.w	4071d8 <__aeabi_dmul+0x238>
  407082:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407086:	bfde      	ittt	le
  407088:	2000      	movle	r0, #0
  40708a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40708e:	bd70      	pople	{r4, r5, r6, pc}
  407090:	f1c4 0400 	rsb	r4, r4, #0
  407094:	3c20      	subs	r4, #32
  407096:	da35      	bge.n	407104 <__aeabi_dmul+0x164>
  407098:	340c      	adds	r4, #12
  40709a:	dc1b      	bgt.n	4070d4 <__aeabi_dmul+0x134>
  40709c:	f104 0414 	add.w	r4, r4, #20
  4070a0:	f1c4 0520 	rsb	r5, r4, #32
  4070a4:	fa00 f305 	lsl.w	r3, r0, r5
  4070a8:	fa20 f004 	lsr.w	r0, r0, r4
  4070ac:	fa01 f205 	lsl.w	r2, r1, r5
  4070b0:	ea40 0002 	orr.w	r0, r0, r2
  4070b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4070b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4070bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4070c0:	fa21 f604 	lsr.w	r6, r1, r4
  4070c4:	eb42 0106 	adc.w	r1, r2, r6
  4070c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4070cc:	bf08      	it	eq
  4070ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4070d2:	bd70      	pop	{r4, r5, r6, pc}
  4070d4:	f1c4 040c 	rsb	r4, r4, #12
  4070d8:	f1c4 0520 	rsb	r5, r4, #32
  4070dc:	fa00 f304 	lsl.w	r3, r0, r4
  4070e0:	fa20 f005 	lsr.w	r0, r0, r5
  4070e4:	fa01 f204 	lsl.w	r2, r1, r4
  4070e8:	ea40 0002 	orr.w	r0, r0, r2
  4070ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4070f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4070f4:	f141 0100 	adc.w	r1, r1, #0
  4070f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4070fc:	bf08      	it	eq
  4070fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407102:	bd70      	pop	{r4, r5, r6, pc}
  407104:	f1c4 0520 	rsb	r5, r4, #32
  407108:	fa00 f205 	lsl.w	r2, r0, r5
  40710c:	ea4e 0e02 	orr.w	lr, lr, r2
  407110:	fa20 f304 	lsr.w	r3, r0, r4
  407114:	fa01 f205 	lsl.w	r2, r1, r5
  407118:	ea43 0302 	orr.w	r3, r3, r2
  40711c:	fa21 f004 	lsr.w	r0, r1, r4
  407120:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407124:	fa21 f204 	lsr.w	r2, r1, r4
  407128:	ea20 0002 	bic.w	r0, r0, r2
  40712c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407130:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407134:	bf08      	it	eq
  407136:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40713a:	bd70      	pop	{r4, r5, r6, pc}
  40713c:	f094 0f00 	teq	r4, #0
  407140:	d10f      	bne.n	407162 <__aeabi_dmul+0x1c2>
  407142:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407146:	0040      	lsls	r0, r0, #1
  407148:	eb41 0101 	adc.w	r1, r1, r1
  40714c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407150:	bf08      	it	eq
  407152:	3c01      	subeq	r4, #1
  407154:	d0f7      	beq.n	407146 <__aeabi_dmul+0x1a6>
  407156:	ea41 0106 	orr.w	r1, r1, r6
  40715a:	f095 0f00 	teq	r5, #0
  40715e:	bf18      	it	ne
  407160:	4770      	bxne	lr
  407162:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407166:	0052      	lsls	r2, r2, #1
  407168:	eb43 0303 	adc.w	r3, r3, r3
  40716c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407170:	bf08      	it	eq
  407172:	3d01      	subeq	r5, #1
  407174:	d0f7      	beq.n	407166 <__aeabi_dmul+0x1c6>
  407176:	ea43 0306 	orr.w	r3, r3, r6
  40717a:	4770      	bx	lr
  40717c:	ea94 0f0c 	teq	r4, ip
  407180:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407184:	bf18      	it	ne
  407186:	ea95 0f0c 	teqne	r5, ip
  40718a:	d00c      	beq.n	4071a6 <__aeabi_dmul+0x206>
  40718c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407190:	bf18      	it	ne
  407192:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407196:	d1d1      	bne.n	40713c <__aeabi_dmul+0x19c>
  407198:	ea81 0103 	eor.w	r1, r1, r3
  40719c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4071a0:	f04f 0000 	mov.w	r0, #0
  4071a4:	bd70      	pop	{r4, r5, r6, pc}
  4071a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4071aa:	bf06      	itte	eq
  4071ac:	4610      	moveq	r0, r2
  4071ae:	4619      	moveq	r1, r3
  4071b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4071b4:	d019      	beq.n	4071ea <__aeabi_dmul+0x24a>
  4071b6:	ea94 0f0c 	teq	r4, ip
  4071ba:	d102      	bne.n	4071c2 <__aeabi_dmul+0x222>
  4071bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4071c0:	d113      	bne.n	4071ea <__aeabi_dmul+0x24a>
  4071c2:	ea95 0f0c 	teq	r5, ip
  4071c6:	d105      	bne.n	4071d4 <__aeabi_dmul+0x234>
  4071c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4071cc:	bf1c      	itt	ne
  4071ce:	4610      	movne	r0, r2
  4071d0:	4619      	movne	r1, r3
  4071d2:	d10a      	bne.n	4071ea <__aeabi_dmul+0x24a>
  4071d4:	ea81 0103 	eor.w	r1, r1, r3
  4071d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4071dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4071e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4071e4:	f04f 0000 	mov.w	r0, #0
  4071e8:	bd70      	pop	{r4, r5, r6, pc}
  4071ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4071ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4071f2:	bd70      	pop	{r4, r5, r6, pc}

004071f4 <__aeabi_ddiv>:
  4071f4:	b570      	push	{r4, r5, r6, lr}
  4071f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4071fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4071fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407202:	bf1d      	ittte	ne
  407204:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407208:	ea94 0f0c 	teqne	r4, ip
  40720c:	ea95 0f0c 	teqne	r5, ip
  407210:	f000 f8a7 	bleq	407362 <__aeabi_ddiv+0x16e>
  407214:	eba4 0405 	sub.w	r4, r4, r5
  407218:	ea81 0e03 	eor.w	lr, r1, r3
  40721c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407220:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407224:	f000 8088 	beq.w	407338 <__aeabi_ddiv+0x144>
  407228:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40722c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407230:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407234:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407238:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40723c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407240:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407244:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407248:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40724c:	429d      	cmp	r5, r3
  40724e:	bf08      	it	eq
  407250:	4296      	cmpeq	r6, r2
  407252:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407256:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40725a:	d202      	bcs.n	407262 <__aeabi_ddiv+0x6e>
  40725c:	085b      	lsrs	r3, r3, #1
  40725e:	ea4f 0232 	mov.w	r2, r2, rrx
  407262:	1ab6      	subs	r6, r6, r2
  407264:	eb65 0503 	sbc.w	r5, r5, r3
  407268:	085b      	lsrs	r3, r3, #1
  40726a:	ea4f 0232 	mov.w	r2, r2, rrx
  40726e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407272:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407276:	ebb6 0e02 	subs.w	lr, r6, r2
  40727a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40727e:	bf22      	ittt	cs
  407280:	1ab6      	subcs	r6, r6, r2
  407282:	4675      	movcs	r5, lr
  407284:	ea40 000c 	orrcs.w	r0, r0, ip
  407288:	085b      	lsrs	r3, r3, #1
  40728a:	ea4f 0232 	mov.w	r2, r2, rrx
  40728e:	ebb6 0e02 	subs.w	lr, r6, r2
  407292:	eb75 0e03 	sbcs.w	lr, r5, r3
  407296:	bf22      	ittt	cs
  407298:	1ab6      	subcs	r6, r6, r2
  40729a:	4675      	movcs	r5, lr
  40729c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4072a0:	085b      	lsrs	r3, r3, #1
  4072a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4072a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4072aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4072ae:	bf22      	ittt	cs
  4072b0:	1ab6      	subcs	r6, r6, r2
  4072b2:	4675      	movcs	r5, lr
  4072b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4072b8:	085b      	lsrs	r3, r3, #1
  4072ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4072be:	ebb6 0e02 	subs.w	lr, r6, r2
  4072c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4072c6:	bf22      	ittt	cs
  4072c8:	1ab6      	subcs	r6, r6, r2
  4072ca:	4675      	movcs	r5, lr
  4072cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4072d0:	ea55 0e06 	orrs.w	lr, r5, r6
  4072d4:	d018      	beq.n	407308 <__aeabi_ddiv+0x114>
  4072d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4072da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4072de:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4072e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4072e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4072ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4072ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4072f2:	d1c0      	bne.n	407276 <__aeabi_ddiv+0x82>
  4072f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4072f8:	d10b      	bne.n	407312 <__aeabi_ddiv+0x11e>
  4072fa:	ea41 0100 	orr.w	r1, r1, r0
  4072fe:	f04f 0000 	mov.w	r0, #0
  407302:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407306:	e7b6      	b.n	407276 <__aeabi_ddiv+0x82>
  407308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40730c:	bf04      	itt	eq
  40730e:	4301      	orreq	r1, r0
  407310:	2000      	moveq	r0, #0
  407312:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407316:	bf88      	it	hi
  407318:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40731c:	f63f aeaf 	bhi.w	40707e <__aeabi_dmul+0xde>
  407320:	ebb5 0c03 	subs.w	ip, r5, r3
  407324:	bf04      	itt	eq
  407326:	ebb6 0c02 	subseq.w	ip, r6, r2
  40732a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40732e:	f150 0000 	adcs.w	r0, r0, #0
  407332:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407336:	bd70      	pop	{r4, r5, r6, pc}
  407338:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40733c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407340:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407344:	bfc2      	ittt	gt
  407346:	ebd4 050c 	rsbsgt	r5, r4, ip
  40734a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40734e:	bd70      	popgt	{r4, r5, r6, pc}
  407350:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407354:	f04f 0e00 	mov.w	lr, #0
  407358:	3c01      	subs	r4, #1
  40735a:	e690      	b.n	40707e <__aeabi_dmul+0xde>
  40735c:	ea45 0e06 	orr.w	lr, r5, r6
  407360:	e68d      	b.n	40707e <__aeabi_dmul+0xde>
  407362:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407366:	ea94 0f0c 	teq	r4, ip
  40736a:	bf08      	it	eq
  40736c:	ea95 0f0c 	teqeq	r5, ip
  407370:	f43f af3b 	beq.w	4071ea <__aeabi_dmul+0x24a>
  407374:	ea94 0f0c 	teq	r4, ip
  407378:	d10a      	bne.n	407390 <__aeabi_ddiv+0x19c>
  40737a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40737e:	f47f af34 	bne.w	4071ea <__aeabi_dmul+0x24a>
  407382:	ea95 0f0c 	teq	r5, ip
  407386:	f47f af25 	bne.w	4071d4 <__aeabi_dmul+0x234>
  40738a:	4610      	mov	r0, r2
  40738c:	4619      	mov	r1, r3
  40738e:	e72c      	b.n	4071ea <__aeabi_dmul+0x24a>
  407390:	ea95 0f0c 	teq	r5, ip
  407394:	d106      	bne.n	4073a4 <__aeabi_ddiv+0x1b0>
  407396:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40739a:	f43f aefd 	beq.w	407198 <__aeabi_dmul+0x1f8>
  40739e:	4610      	mov	r0, r2
  4073a0:	4619      	mov	r1, r3
  4073a2:	e722      	b.n	4071ea <__aeabi_dmul+0x24a>
  4073a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4073a8:	bf18      	it	ne
  4073aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4073ae:	f47f aec5 	bne.w	40713c <__aeabi_dmul+0x19c>
  4073b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4073b6:	f47f af0d 	bne.w	4071d4 <__aeabi_dmul+0x234>
  4073ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4073be:	f47f aeeb 	bne.w	407198 <__aeabi_dmul+0x1f8>
  4073c2:	e712      	b.n	4071ea <__aeabi_dmul+0x24a>

004073c4 <__gedf2>:
  4073c4:	f04f 3cff 	mov.w	ip, #4294967295
  4073c8:	e006      	b.n	4073d8 <__cmpdf2+0x4>
  4073ca:	bf00      	nop

004073cc <__ledf2>:
  4073cc:	f04f 0c01 	mov.w	ip, #1
  4073d0:	e002      	b.n	4073d8 <__cmpdf2+0x4>
  4073d2:	bf00      	nop

004073d4 <__cmpdf2>:
  4073d4:	f04f 0c01 	mov.w	ip, #1
  4073d8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4073dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4073e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4073e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4073e8:	bf18      	it	ne
  4073ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4073ee:	d01b      	beq.n	407428 <__cmpdf2+0x54>
  4073f0:	b001      	add	sp, #4
  4073f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4073f6:	bf0c      	ite	eq
  4073f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4073fc:	ea91 0f03 	teqne	r1, r3
  407400:	bf02      	ittt	eq
  407402:	ea90 0f02 	teqeq	r0, r2
  407406:	2000      	moveq	r0, #0
  407408:	4770      	bxeq	lr
  40740a:	f110 0f00 	cmn.w	r0, #0
  40740e:	ea91 0f03 	teq	r1, r3
  407412:	bf58      	it	pl
  407414:	4299      	cmppl	r1, r3
  407416:	bf08      	it	eq
  407418:	4290      	cmpeq	r0, r2
  40741a:	bf2c      	ite	cs
  40741c:	17d8      	asrcs	r0, r3, #31
  40741e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  407422:	f040 0001 	orr.w	r0, r0, #1
  407426:	4770      	bx	lr
  407428:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40742c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407430:	d102      	bne.n	407438 <__cmpdf2+0x64>
  407432:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407436:	d107      	bne.n	407448 <__cmpdf2+0x74>
  407438:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40743c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407440:	d1d6      	bne.n	4073f0 <__cmpdf2+0x1c>
  407442:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407446:	d0d3      	beq.n	4073f0 <__cmpdf2+0x1c>
  407448:	f85d 0b04 	ldr.w	r0, [sp], #4
  40744c:	4770      	bx	lr
  40744e:	bf00      	nop

00407450 <__aeabi_cdrcmple>:
  407450:	4684      	mov	ip, r0
  407452:	4610      	mov	r0, r2
  407454:	4662      	mov	r2, ip
  407456:	468c      	mov	ip, r1
  407458:	4619      	mov	r1, r3
  40745a:	4663      	mov	r3, ip
  40745c:	e000      	b.n	407460 <__aeabi_cdcmpeq>
  40745e:	bf00      	nop

00407460 <__aeabi_cdcmpeq>:
  407460:	b501      	push	{r0, lr}
  407462:	f7ff ffb7 	bl	4073d4 <__cmpdf2>
  407466:	2800      	cmp	r0, #0
  407468:	bf48      	it	mi
  40746a:	f110 0f00 	cmnmi.w	r0, #0
  40746e:	bd01      	pop	{r0, pc}

00407470 <__aeabi_dcmpeq>:
  407470:	f84d ed08 	str.w	lr, [sp, #-8]!
  407474:	f7ff fff4 	bl	407460 <__aeabi_cdcmpeq>
  407478:	bf0c      	ite	eq
  40747a:	2001      	moveq	r0, #1
  40747c:	2000      	movne	r0, #0
  40747e:	f85d fb08 	ldr.w	pc, [sp], #8
  407482:	bf00      	nop

00407484 <__aeabi_dcmplt>:
  407484:	f84d ed08 	str.w	lr, [sp, #-8]!
  407488:	f7ff ffea 	bl	407460 <__aeabi_cdcmpeq>
  40748c:	bf34      	ite	cc
  40748e:	2001      	movcc	r0, #1
  407490:	2000      	movcs	r0, #0
  407492:	f85d fb08 	ldr.w	pc, [sp], #8
  407496:	bf00      	nop

00407498 <__aeabi_dcmple>:
  407498:	f84d ed08 	str.w	lr, [sp, #-8]!
  40749c:	f7ff ffe0 	bl	407460 <__aeabi_cdcmpeq>
  4074a0:	bf94      	ite	ls
  4074a2:	2001      	movls	r0, #1
  4074a4:	2000      	movhi	r0, #0
  4074a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4074aa:	bf00      	nop

004074ac <__aeabi_dcmpge>:
  4074ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4074b0:	f7ff ffce 	bl	407450 <__aeabi_cdrcmple>
  4074b4:	bf94      	ite	ls
  4074b6:	2001      	movls	r0, #1
  4074b8:	2000      	movhi	r0, #0
  4074ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4074be:	bf00      	nop

004074c0 <__aeabi_dcmpgt>:
  4074c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4074c4:	f7ff ffc4 	bl	407450 <__aeabi_cdrcmple>
  4074c8:	bf34      	ite	cc
  4074ca:	2001      	movcc	r0, #1
  4074cc:	2000      	movcs	r0, #0
  4074ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4074d2:	bf00      	nop

004074d4 <__aeabi_d2iz>:
  4074d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4074d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4074dc:	d215      	bcs.n	40750a <__aeabi_d2iz+0x36>
  4074de:	d511      	bpl.n	407504 <__aeabi_d2iz+0x30>
  4074e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4074e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4074e8:	d912      	bls.n	407510 <__aeabi_d2iz+0x3c>
  4074ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4074ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4074f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4074f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4074fa:	fa23 f002 	lsr.w	r0, r3, r2
  4074fe:	bf18      	it	ne
  407500:	4240      	negne	r0, r0
  407502:	4770      	bx	lr
  407504:	f04f 0000 	mov.w	r0, #0
  407508:	4770      	bx	lr
  40750a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40750e:	d105      	bne.n	40751c <__aeabi_d2iz+0x48>
  407510:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407514:	bf08      	it	eq
  407516:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40751a:	4770      	bx	lr
  40751c:	f04f 0000 	mov.w	r0, #0
  407520:	4770      	bx	lr
  407522:	bf00      	nop

00407524 <__aeabi_uldivmod>:
  407524:	b94b      	cbnz	r3, 40753a <__aeabi_uldivmod+0x16>
  407526:	b942      	cbnz	r2, 40753a <__aeabi_uldivmod+0x16>
  407528:	2900      	cmp	r1, #0
  40752a:	bf08      	it	eq
  40752c:	2800      	cmpeq	r0, #0
  40752e:	d002      	beq.n	407536 <__aeabi_uldivmod+0x12>
  407530:	f04f 31ff 	mov.w	r1, #4294967295
  407534:	4608      	mov	r0, r1
  407536:	f000 b83b 	b.w	4075b0 <__aeabi_idiv0>
  40753a:	b082      	sub	sp, #8
  40753c:	46ec      	mov	ip, sp
  40753e:	e92d 5000 	stmdb	sp!, {ip, lr}
  407542:	f000 f81d 	bl	407580 <__gnu_uldivmod_helper>
  407546:	f8dd e004 	ldr.w	lr, [sp, #4]
  40754a:	b002      	add	sp, #8
  40754c:	bc0c      	pop	{r2, r3}
  40754e:	4770      	bx	lr

00407550 <__gnu_ldivmod_helper>:
  407550:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  407554:	9e08      	ldr	r6, [sp, #32]
  407556:	4614      	mov	r4, r2
  407558:	461d      	mov	r5, r3
  40755a:	4680      	mov	r8, r0
  40755c:	4689      	mov	r9, r1
  40755e:	f000 f829 	bl	4075b4 <__divdi3>
  407562:	fb04 f301 	mul.w	r3, r4, r1
  407566:	fba4 ab00 	umull	sl, fp, r4, r0
  40756a:	fb00 3205 	mla	r2, r0, r5, r3
  40756e:	4493      	add	fp, r2
  407570:	ebb8 080a 	subs.w	r8, r8, sl
  407574:	eb69 090b 	sbc.w	r9, r9, fp
  407578:	e9c6 8900 	strd	r8, r9, [r6]
  40757c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00407580 <__gnu_uldivmod_helper>:
  407580:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  407584:	9e08      	ldr	r6, [sp, #32]
  407586:	4614      	mov	r4, r2
  407588:	461d      	mov	r5, r3
  40758a:	4680      	mov	r8, r0
  40758c:	4689      	mov	r9, r1
  40758e:	f000 f961 	bl	407854 <__udivdi3>
  407592:	fb00 f505 	mul.w	r5, r0, r5
  407596:	fba0 ab04 	umull	sl, fp, r0, r4
  40759a:	fb04 5401 	mla	r4, r4, r1, r5
  40759e:	44a3      	add	fp, r4
  4075a0:	ebb8 080a 	subs.w	r8, r8, sl
  4075a4:	eb69 090b 	sbc.w	r9, r9, fp
  4075a8:	e9c6 8900 	strd	r8, r9, [r6]
  4075ac:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

004075b0 <__aeabi_idiv0>:
  4075b0:	4770      	bx	lr
  4075b2:	bf00      	nop

004075b4 <__divdi3>:
  4075b4:	2900      	cmp	r1, #0
  4075b6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4075ba:	f2c0 80a1 	blt.w	407700 <__divdi3+0x14c>
  4075be:	2400      	movs	r4, #0
  4075c0:	2b00      	cmp	r3, #0
  4075c2:	f2c0 8098 	blt.w	4076f6 <__divdi3+0x142>
  4075c6:	4615      	mov	r5, r2
  4075c8:	4606      	mov	r6, r0
  4075ca:	460f      	mov	r7, r1
  4075cc:	2b00      	cmp	r3, #0
  4075ce:	d13f      	bne.n	407650 <__divdi3+0x9c>
  4075d0:	428a      	cmp	r2, r1
  4075d2:	d958      	bls.n	407686 <__divdi3+0xd2>
  4075d4:	fab2 f382 	clz	r3, r2
  4075d8:	b14b      	cbz	r3, 4075ee <__divdi3+0x3a>
  4075da:	f1c3 0220 	rsb	r2, r3, #32
  4075de:	fa01 f703 	lsl.w	r7, r1, r3
  4075e2:	fa20 f202 	lsr.w	r2, r0, r2
  4075e6:	409d      	lsls	r5, r3
  4075e8:	fa00 f603 	lsl.w	r6, r0, r3
  4075ec:	4317      	orrs	r7, r2
  4075ee:	0c29      	lsrs	r1, r5, #16
  4075f0:	fbb7 f2f1 	udiv	r2, r7, r1
  4075f4:	fb01 7712 	mls	r7, r1, r2, r7
  4075f8:	b2a8      	uxth	r0, r5
  4075fa:	fb00 f302 	mul.w	r3, r0, r2
  4075fe:	ea4f 4c16 	mov.w	ip, r6, lsr #16
  407602:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
  407606:	42bb      	cmp	r3, r7
  407608:	d909      	bls.n	40761e <__divdi3+0x6a>
  40760a:	197f      	adds	r7, r7, r5
  40760c:	f102 3cff 	add.w	ip, r2, #4294967295
  407610:	f080 8105 	bcs.w	40781e <__divdi3+0x26a>
  407614:	42bb      	cmp	r3, r7
  407616:	f240 8102 	bls.w	40781e <__divdi3+0x26a>
  40761a:	3a02      	subs	r2, #2
  40761c:	442f      	add	r7, r5
  40761e:	1aff      	subs	r7, r7, r3
  407620:	fbb7 f3f1 	udiv	r3, r7, r1
  407624:	fb01 7113 	mls	r1, r1, r3, r7
  407628:	fb00 f003 	mul.w	r0, r0, r3
  40762c:	b2b6      	uxth	r6, r6
  40762e:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  407632:	4288      	cmp	r0, r1
  407634:	d908      	bls.n	407648 <__divdi3+0x94>
  407636:	1949      	adds	r1, r1, r5
  407638:	f103 37ff 	add.w	r7, r3, #4294967295
  40763c:	f080 80f1 	bcs.w	407822 <__divdi3+0x26e>
  407640:	4288      	cmp	r0, r1
  407642:	f240 80ee 	bls.w	407822 <__divdi3+0x26e>
  407646:	3b02      	subs	r3, #2
  407648:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40764c:	2300      	movs	r3, #0
  40764e:	e003      	b.n	407658 <__divdi3+0xa4>
  407650:	428b      	cmp	r3, r1
  407652:	d90a      	bls.n	40766a <__divdi3+0xb6>
  407654:	2300      	movs	r3, #0
  407656:	461a      	mov	r2, r3
  407658:	4610      	mov	r0, r2
  40765a:	4619      	mov	r1, r3
  40765c:	b114      	cbz	r4, 407664 <__divdi3+0xb0>
  40765e:	4240      	negs	r0, r0
  407660:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407664:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407668:	4770      	bx	lr
  40766a:	fab3 f883 	clz	r8, r3
  40766e:	f1b8 0f00 	cmp.w	r8, #0
  407672:	f040 8088 	bne.w	407786 <__divdi3+0x1d2>
  407676:	428b      	cmp	r3, r1
  407678:	d302      	bcc.n	407680 <__divdi3+0xcc>
  40767a:	4282      	cmp	r2, r0
  40767c:	f200 80e2 	bhi.w	407844 <__divdi3+0x290>
  407680:	2300      	movs	r3, #0
  407682:	2201      	movs	r2, #1
  407684:	e7e8      	b.n	407658 <__divdi3+0xa4>
  407686:	b912      	cbnz	r2, 40768e <__divdi3+0xda>
  407688:	2301      	movs	r3, #1
  40768a:	fbb3 f5f2 	udiv	r5, r3, r2
  40768e:	fab5 f285 	clz	r2, r5
  407692:	2a00      	cmp	r2, #0
  407694:	d13a      	bne.n	40770c <__divdi3+0x158>
  407696:	1b7f      	subs	r7, r7, r5
  407698:	0c28      	lsrs	r0, r5, #16
  40769a:	fa1f fc85 	uxth.w	ip, r5
  40769e:	2301      	movs	r3, #1
  4076a0:	fbb7 f1f0 	udiv	r1, r7, r0
  4076a4:	fb00 7711 	mls	r7, r0, r1, r7
  4076a8:	fb0c f201 	mul.w	r2, ip, r1
  4076ac:	ea4f 4816 	mov.w	r8, r6, lsr #16
  4076b0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  4076b4:	42ba      	cmp	r2, r7
  4076b6:	d907      	bls.n	4076c8 <__divdi3+0x114>
  4076b8:	197f      	adds	r7, r7, r5
  4076ba:	f101 38ff 	add.w	r8, r1, #4294967295
  4076be:	d202      	bcs.n	4076c6 <__divdi3+0x112>
  4076c0:	42ba      	cmp	r2, r7
  4076c2:	f200 80c4 	bhi.w	40784e <__divdi3+0x29a>
  4076c6:	4641      	mov	r1, r8
  4076c8:	1abf      	subs	r7, r7, r2
  4076ca:	fbb7 f2f0 	udiv	r2, r7, r0
  4076ce:	fb00 7012 	mls	r0, r0, r2, r7
  4076d2:	fb0c fc02 	mul.w	ip, ip, r2
  4076d6:	b2b6      	uxth	r6, r6
  4076d8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  4076dc:	4584      	cmp	ip, r0
  4076de:	d907      	bls.n	4076f0 <__divdi3+0x13c>
  4076e0:	1940      	adds	r0, r0, r5
  4076e2:	f102 37ff 	add.w	r7, r2, #4294967295
  4076e6:	d202      	bcs.n	4076ee <__divdi3+0x13a>
  4076e8:	4584      	cmp	ip, r0
  4076ea:	f200 80ae 	bhi.w	40784a <__divdi3+0x296>
  4076ee:	463a      	mov	r2, r7
  4076f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  4076f4:	e7b0      	b.n	407658 <__divdi3+0xa4>
  4076f6:	43e4      	mvns	r4, r4
  4076f8:	4252      	negs	r2, r2
  4076fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4076fe:	e762      	b.n	4075c6 <__divdi3+0x12>
  407700:	4240      	negs	r0, r0
  407702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407706:	f04f 34ff 	mov.w	r4, #4294967295
  40770a:	e759      	b.n	4075c0 <__divdi3+0xc>
  40770c:	4095      	lsls	r5, r2
  40770e:	f1c2 0920 	rsb	r9, r2, #32
  407712:	fa27 f109 	lsr.w	r1, r7, r9
  407716:	fa26 f909 	lsr.w	r9, r6, r9
  40771a:	4097      	lsls	r7, r2
  40771c:	0c28      	lsrs	r0, r5, #16
  40771e:	fbb1 f8f0 	udiv	r8, r1, r0
  407722:	fb00 1118 	mls	r1, r0, r8, r1
  407726:	fa1f fc85 	uxth.w	ip, r5
  40772a:	fb0c f308 	mul.w	r3, ip, r8
  40772e:	ea49 0907 	orr.w	r9, r9, r7
  407732:	ea4f 4719 	mov.w	r7, r9, lsr #16
  407736:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
  40773a:	428b      	cmp	r3, r1
  40773c:	fa06 f602 	lsl.w	r6, r6, r2
  407740:	d908      	bls.n	407754 <__divdi3+0x1a0>
  407742:	1949      	adds	r1, r1, r5
  407744:	f108 32ff 	add.w	r2, r8, #4294967295
  407748:	d27a      	bcs.n	407840 <__divdi3+0x28c>
  40774a:	428b      	cmp	r3, r1
  40774c:	d978      	bls.n	407840 <__divdi3+0x28c>
  40774e:	f1a8 0802 	sub.w	r8, r8, #2
  407752:	4429      	add	r1, r5
  407754:	1ac9      	subs	r1, r1, r3
  407756:	fbb1 f3f0 	udiv	r3, r1, r0
  40775a:	fb00 1713 	mls	r7, r0, r3, r1
  40775e:	fb0c f203 	mul.w	r2, ip, r3
  407762:	fa1f f989 	uxth.w	r9, r9
  407766:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
  40776a:	42ba      	cmp	r2, r7
  40776c:	d907      	bls.n	40777e <__divdi3+0x1ca>
  40776e:	197f      	adds	r7, r7, r5
  407770:	f103 31ff 	add.w	r1, r3, #4294967295
  407774:	d260      	bcs.n	407838 <__divdi3+0x284>
  407776:	42ba      	cmp	r2, r7
  407778:	d95e      	bls.n	407838 <__divdi3+0x284>
  40777a:	3b02      	subs	r3, #2
  40777c:	442f      	add	r7, r5
  40777e:	1abf      	subs	r7, r7, r2
  407780:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  407784:	e78c      	b.n	4076a0 <__divdi3+0xec>
  407786:	f1c8 0220 	rsb	r2, r8, #32
  40778a:	fa25 f102 	lsr.w	r1, r5, r2
  40778e:	fa03 fc08 	lsl.w	ip, r3, r8
  407792:	fa27 f302 	lsr.w	r3, r7, r2
  407796:	fa20 f202 	lsr.w	r2, r0, r2
  40779a:	fa07 f708 	lsl.w	r7, r7, r8
  40779e:	ea41 0c0c 	orr.w	ip, r1, ip
  4077a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
  4077a6:	fbb3 f1f9 	udiv	r1, r3, r9
  4077aa:	fb09 3311 	mls	r3, r9, r1, r3
  4077ae:	fa1f fa8c 	uxth.w	sl, ip
  4077b2:	fb0a fb01 	mul.w	fp, sl, r1
  4077b6:	4317      	orrs	r7, r2
  4077b8:	0c3a      	lsrs	r2, r7, #16
  4077ba:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  4077be:	459b      	cmp	fp, r3
  4077c0:	fa05 f008 	lsl.w	r0, r5, r8
  4077c4:	d908      	bls.n	4077d8 <__divdi3+0x224>
  4077c6:	eb13 030c 	adds.w	r3, r3, ip
  4077ca:	f101 32ff 	add.w	r2, r1, #4294967295
  4077ce:	d235      	bcs.n	40783c <__divdi3+0x288>
  4077d0:	459b      	cmp	fp, r3
  4077d2:	d933      	bls.n	40783c <__divdi3+0x288>
  4077d4:	3902      	subs	r1, #2
  4077d6:	4463      	add	r3, ip
  4077d8:	ebcb 0303 	rsb	r3, fp, r3
  4077dc:	fbb3 f2f9 	udiv	r2, r3, r9
  4077e0:	fb09 3312 	mls	r3, r9, r2, r3
  4077e4:	fb0a fa02 	mul.w	sl, sl, r2
  4077e8:	b2bf      	uxth	r7, r7
  4077ea:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  4077ee:	45ba      	cmp	sl, r7
  4077f0:	d908      	bls.n	407804 <__divdi3+0x250>
  4077f2:	eb17 070c 	adds.w	r7, r7, ip
  4077f6:	f102 33ff 	add.w	r3, r2, #4294967295
  4077fa:	d21b      	bcs.n	407834 <__divdi3+0x280>
  4077fc:	45ba      	cmp	sl, r7
  4077fe:	d919      	bls.n	407834 <__divdi3+0x280>
  407800:	3a02      	subs	r2, #2
  407802:	4467      	add	r7, ip
  407804:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  407808:	fba5 0100 	umull	r0, r1, r5, r0
  40780c:	ebca 0707 	rsb	r7, sl, r7
  407810:	428f      	cmp	r7, r1
  407812:	f04f 0300 	mov.w	r3, #0
  407816:	d30a      	bcc.n	40782e <__divdi3+0x27a>
  407818:	d005      	beq.n	407826 <__divdi3+0x272>
  40781a:	462a      	mov	r2, r5
  40781c:	e71c      	b.n	407658 <__divdi3+0xa4>
  40781e:	4662      	mov	r2, ip
  407820:	e6fd      	b.n	40761e <__divdi3+0x6a>
  407822:	463b      	mov	r3, r7
  407824:	e710      	b.n	407648 <__divdi3+0x94>
  407826:	fa06 f608 	lsl.w	r6, r6, r8
  40782a:	4286      	cmp	r6, r0
  40782c:	d2f5      	bcs.n	40781a <__divdi3+0x266>
  40782e:	1e6a      	subs	r2, r5, #1
  407830:	2300      	movs	r3, #0
  407832:	e711      	b.n	407658 <__divdi3+0xa4>
  407834:	461a      	mov	r2, r3
  407836:	e7e5      	b.n	407804 <__divdi3+0x250>
  407838:	460b      	mov	r3, r1
  40783a:	e7a0      	b.n	40777e <__divdi3+0x1ca>
  40783c:	4611      	mov	r1, r2
  40783e:	e7cb      	b.n	4077d8 <__divdi3+0x224>
  407840:	4690      	mov	r8, r2
  407842:	e787      	b.n	407754 <__divdi3+0x1a0>
  407844:	4643      	mov	r3, r8
  407846:	4642      	mov	r2, r8
  407848:	e706      	b.n	407658 <__divdi3+0xa4>
  40784a:	3a02      	subs	r2, #2
  40784c:	e750      	b.n	4076f0 <__divdi3+0x13c>
  40784e:	3902      	subs	r1, #2
  407850:	442f      	add	r7, r5
  407852:	e739      	b.n	4076c8 <__divdi3+0x114>

00407854 <__udivdi3>:
  407854:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407858:	4614      	mov	r4, r2
  40785a:	4605      	mov	r5, r0
  40785c:	460e      	mov	r6, r1
  40785e:	2b00      	cmp	r3, #0
  407860:	d143      	bne.n	4078ea <__udivdi3+0x96>
  407862:	428a      	cmp	r2, r1
  407864:	d953      	bls.n	40790e <__udivdi3+0xba>
  407866:	fab2 f782 	clz	r7, r2
  40786a:	b157      	cbz	r7, 407882 <__udivdi3+0x2e>
  40786c:	f1c7 0620 	rsb	r6, r7, #32
  407870:	fa20 f606 	lsr.w	r6, r0, r6
  407874:	fa01 f307 	lsl.w	r3, r1, r7
  407878:	fa02 f407 	lsl.w	r4, r2, r7
  40787c:	fa00 f507 	lsl.w	r5, r0, r7
  407880:	431e      	orrs	r6, r3
  407882:	0c21      	lsrs	r1, r4, #16
  407884:	fbb6 f2f1 	udiv	r2, r6, r1
  407888:	fb01 6612 	mls	r6, r1, r2, r6
  40788c:	b2a0      	uxth	r0, r4
  40788e:	fb00 f302 	mul.w	r3, r0, r2
  407892:	0c2f      	lsrs	r7, r5, #16
  407894:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  407898:	42b3      	cmp	r3, r6
  40789a:	d909      	bls.n	4078b0 <__udivdi3+0x5c>
  40789c:	1936      	adds	r6, r6, r4
  40789e:	f102 37ff 	add.w	r7, r2, #4294967295
  4078a2:	f080 80fd 	bcs.w	407aa0 <__udivdi3+0x24c>
  4078a6:	42b3      	cmp	r3, r6
  4078a8:	f240 80fa 	bls.w	407aa0 <__udivdi3+0x24c>
  4078ac:	3a02      	subs	r2, #2
  4078ae:	4426      	add	r6, r4
  4078b0:	1af6      	subs	r6, r6, r3
  4078b2:	fbb6 f3f1 	udiv	r3, r6, r1
  4078b6:	fb01 6113 	mls	r1, r1, r3, r6
  4078ba:	fb00 f003 	mul.w	r0, r0, r3
  4078be:	b2ad      	uxth	r5, r5
  4078c0:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  4078c4:	4288      	cmp	r0, r1
  4078c6:	d908      	bls.n	4078da <__udivdi3+0x86>
  4078c8:	1909      	adds	r1, r1, r4
  4078ca:	f103 36ff 	add.w	r6, r3, #4294967295
  4078ce:	f080 80e9 	bcs.w	407aa4 <__udivdi3+0x250>
  4078d2:	4288      	cmp	r0, r1
  4078d4:	f240 80e6 	bls.w	407aa4 <__udivdi3+0x250>
  4078d8:	3b02      	subs	r3, #2
  4078da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4078de:	2300      	movs	r3, #0
  4078e0:	4610      	mov	r0, r2
  4078e2:	4619      	mov	r1, r3
  4078e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4078e8:	4770      	bx	lr
  4078ea:	428b      	cmp	r3, r1
  4078ec:	d84c      	bhi.n	407988 <__udivdi3+0x134>
  4078ee:	fab3 f683 	clz	r6, r3
  4078f2:	2e00      	cmp	r6, #0
  4078f4:	d14f      	bne.n	407996 <__udivdi3+0x142>
  4078f6:	428b      	cmp	r3, r1
  4078f8:	d302      	bcc.n	407900 <__udivdi3+0xac>
  4078fa:	4282      	cmp	r2, r0
  4078fc:	f200 80dd 	bhi.w	407aba <__udivdi3+0x266>
  407900:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407904:	2300      	movs	r3, #0
  407906:	2201      	movs	r2, #1
  407908:	4610      	mov	r0, r2
  40790a:	4619      	mov	r1, r3
  40790c:	4770      	bx	lr
  40790e:	b912      	cbnz	r2, 407916 <__udivdi3+0xc2>
  407910:	2401      	movs	r4, #1
  407912:	fbb4 f4f2 	udiv	r4, r4, r2
  407916:	fab4 f284 	clz	r2, r4
  40791a:	2a00      	cmp	r2, #0
  40791c:	f040 8082 	bne.w	407a24 <__udivdi3+0x1d0>
  407920:	1b09      	subs	r1, r1, r4
  407922:	0c26      	lsrs	r6, r4, #16
  407924:	b2a7      	uxth	r7, r4
  407926:	2301      	movs	r3, #1
  407928:	fbb1 f0f6 	udiv	r0, r1, r6
  40792c:	fb06 1110 	mls	r1, r6, r0, r1
  407930:	fb07 f200 	mul.w	r2, r7, r0
  407934:	ea4f 4c15 	mov.w	ip, r5, lsr #16
  407938:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
  40793c:	428a      	cmp	r2, r1
  40793e:	d907      	bls.n	407950 <__udivdi3+0xfc>
  407940:	1909      	adds	r1, r1, r4
  407942:	f100 3cff 	add.w	ip, r0, #4294967295
  407946:	d202      	bcs.n	40794e <__udivdi3+0xfa>
  407948:	428a      	cmp	r2, r1
  40794a:	f200 80c8 	bhi.w	407ade <__udivdi3+0x28a>
  40794e:	4660      	mov	r0, ip
  407950:	1a89      	subs	r1, r1, r2
  407952:	fbb1 f2f6 	udiv	r2, r1, r6
  407956:	fb06 1112 	mls	r1, r6, r2, r1
  40795a:	fb07 f702 	mul.w	r7, r7, r2
  40795e:	b2ad      	uxth	r5, r5
  407960:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  407964:	42af      	cmp	r7, r5
  407966:	d908      	bls.n	40797a <__udivdi3+0x126>
  407968:	192c      	adds	r4, r5, r4
  40796a:	f102 31ff 	add.w	r1, r2, #4294967295
  40796e:	f080 809b 	bcs.w	407aa8 <__udivdi3+0x254>
  407972:	42a7      	cmp	r7, r4
  407974:	f240 8098 	bls.w	407aa8 <__udivdi3+0x254>
  407978:	3a02      	subs	r2, #2
  40797a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  40797e:	4610      	mov	r0, r2
  407980:	4619      	mov	r1, r3
  407982:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407986:	4770      	bx	lr
  407988:	2300      	movs	r3, #0
  40798a:	461a      	mov	r2, r3
  40798c:	4610      	mov	r0, r2
  40798e:	4619      	mov	r1, r3
  407990:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407994:	4770      	bx	lr
  407996:	f1c6 0520 	rsb	r5, r6, #32
  40799a:	fa22 f705 	lsr.w	r7, r2, r5
  40799e:	fa03 f406 	lsl.w	r4, r3, r6
  4079a2:	fa21 f305 	lsr.w	r3, r1, r5
  4079a6:	fa01 fb06 	lsl.w	fp, r1, r6
  4079aa:	fa20 f505 	lsr.w	r5, r0, r5
  4079ae:	433c      	orrs	r4, r7
  4079b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
  4079b4:	fbb3 fcf8 	udiv	ip, r3, r8
  4079b8:	fb08 331c 	mls	r3, r8, ip, r3
  4079bc:	fa1f f984 	uxth.w	r9, r4
  4079c0:	fb09 fa0c 	mul.w	sl, r9, ip
  4079c4:	ea45 0b0b 	orr.w	fp, r5, fp
  4079c8:	ea4f 451b 	mov.w	r5, fp, lsr #16
  4079cc:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  4079d0:	459a      	cmp	sl, r3
  4079d2:	fa02 f206 	lsl.w	r2, r2, r6
  4079d6:	d904      	bls.n	4079e2 <__udivdi3+0x18e>
  4079d8:	191b      	adds	r3, r3, r4
  4079da:	f10c 35ff 	add.w	r5, ip, #4294967295
  4079de:	d36f      	bcc.n	407ac0 <__udivdi3+0x26c>
  4079e0:	46ac      	mov	ip, r5
  4079e2:	ebca 0303 	rsb	r3, sl, r3
  4079e6:	fbb3 f5f8 	udiv	r5, r3, r8
  4079ea:	fb08 3315 	mls	r3, r8, r5, r3
  4079ee:	fb09 f905 	mul.w	r9, r9, r5
  4079f2:	fa1f fb8b 	uxth.w	fp, fp
  4079f6:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
  4079fa:	45b9      	cmp	r9, r7
  4079fc:	d904      	bls.n	407a08 <__udivdi3+0x1b4>
  4079fe:	193f      	adds	r7, r7, r4
  407a00:	f105 33ff 	add.w	r3, r5, #4294967295
  407a04:	d362      	bcc.n	407acc <__udivdi3+0x278>
  407a06:	461d      	mov	r5, r3
  407a08:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  407a0c:	fbac 2302 	umull	r2, r3, ip, r2
  407a10:	ebc9 0707 	rsb	r7, r9, r7
  407a14:	429f      	cmp	r7, r3
  407a16:	f04f 0500 	mov.w	r5, #0
  407a1a:	d34a      	bcc.n	407ab2 <__udivdi3+0x25e>
  407a1c:	d046      	beq.n	407aac <__udivdi3+0x258>
  407a1e:	4662      	mov	r2, ip
  407a20:	462b      	mov	r3, r5
  407a22:	e75d      	b.n	4078e0 <__udivdi3+0x8c>
  407a24:	4094      	lsls	r4, r2
  407a26:	f1c2 0920 	rsb	r9, r2, #32
  407a2a:	fa21 fc09 	lsr.w	ip, r1, r9
  407a2e:	4091      	lsls	r1, r2
  407a30:	fa20 f909 	lsr.w	r9, r0, r9
  407a34:	0c26      	lsrs	r6, r4, #16
  407a36:	fbbc f8f6 	udiv	r8, ip, r6
  407a3a:	fb06 cc18 	mls	ip, r6, r8, ip
  407a3e:	b2a7      	uxth	r7, r4
  407a40:	fb07 f308 	mul.w	r3, r7, r8
  407a44:	ea49 0901 	orr.w	r9, r9, r1
  407a48:	ea4f 4119 	mov.w	r1, r9, lsr #16
  407a4c:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
  407a50:	4563      	cmp	r3, ip
  407a52:	fa00 f502 	lsl.w	r5, r0, r2
  407a56:	d909      	bls.n	407a6c <__udivdi3+0x218>
  407a58:	eb1c 0c04 	adds.w	ip, ip, r4
  407a5c:	f108 32ff 	add.w	r2, r8, #4294967295
  407a60:	d23b      	bcs.n	407ada <__udivdi3+0x286>
  407a62:	4563      	cmp	r3, ip
  407a64:	d939      	bls.n	407ada <__udivdi3+0x286>
  407a66:	f1a8 0802 	sub.w	r8, r8, #2
  407a6a:	44a4      	add	ip, r4
  407a6c:	ebc3 0c0c 	rsb	ip, r3, ip
  407a70:	fbbc f3f6 	udiv	r3, ip, r6
  407a74:	fb06 c113 	mls	r1, r6, r3, ip
  407a78:	fb07 f203 	mul.w	r2, r7, r3
  407a7c:	fa1f f989 	uxth.w	r9, r9
  407a80:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
  407a84:	428a      	cmp	r2, r1
  407a86:	d907      	bls.n	407a98 <__udivdi3+0x244>
  407a88:	1909      	adds	r1, r1, r4
  407a8a:	f103 30ff 	add.w	r0, r3, #4294967295
  407a8e:	d222      	bcs.n	407ad6 <__udivdi3+0x282>
  407a90:	428a      	cmp	r2, r1
  407a92:	d920      	bls.n	407ad6 <__udivdi3+0x282>
  407a94:	3b02      	subs	r3, #2
  407a96:	4421      	add	r1, r4
  407a98:	1a89      	subs	r1, r1, r2
  407a9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  407a9e:	e743      	b.n	407928 <__udivdi3+0xd4>
  407aa0:	463a      	mov	r2, r7
  407aa2:	e705      	b.n	4078b0 <__udivdi3+0x5c>
  407aa4:	4633      	mov	r3, r6
  407aa6:	e718      	b.n	4078da <__udivdi3+0x86>
  407aa8:	460a      	mov	r2, r1
  407aaa:	e766      	b.n	40797a <__udivdi3+0x126>
  407aac:	40b0      	lsls	r0, r6
  407aae:	4290      	cmp	r0, r2
  407ab0:	d2b5      	bcs.n	407a1e <__udivdi3+0x1ca>
  407ab2:	f10c 32ff 	add.w	r2, ip, #4294967295
  407ab6:	2300      	movs	r3, #0
  407ab8:	e712      	b.n	4078e0 <__udivdi3+0x8c>
  407aba:	4633      	mov	r3, r6
  407abc:	4632      	mov	r2, r6
  407abe:	e70f      	b.n	4078e0 <__udivdi3+0x8c>
  407ac0:	459a      	cmp	sl, r3
  407ac2:	d98d      	bls.n	4079e0 <__udivdi3+0x18c>
  407ac4:	f1ac 0c02 	sub.w	ip, ip, #2
  407ac8:	4423      	add	r3, r4
  407aca:	e78a      	b.n	4079e2 <__udivdi3+0x18e>
  407acc:	45b9      	cmp	r9, r7
  407ace:	d99a      	bls.n	407a06 <__udivdi3+0x1b2>
  407ad0:	3d02      	subs	r5, #2
  407ad2:	4427      	add	r7, r4
  407ad4:	e798      	b.n	407a08 <__udivdi3+0x1b4>
  407ad6:	4603      	mov	r3, r0
  407ad8:	e7de      	b.n	407a98 <__udivdi3+0x244>
  407ada:	4690      	mov	r8, r2
  407adc:	e7c6      	b.n	407a6c <__udivdi3+0x218>
  407ade:	3802      	subs	r0, #2
  407ae0:	4421      	add	r1, r4
  407ae2:	e735      	b.n	407950 <__udivdi3+0xfc>
  407ae4:	41525453 	.word	0x41525453
  407ae8:	00444546 	.word	0x00444546
  407aec:	75716341 	.word	0x75716341
  407af0:	74697369 	.word	0x74697369
  407af4:	206e6f69 	.word	0x206e6f69
  407af8:	72617473 	.word	0x72617473
  407afc:	0a646574 	.word	0x0a646574
  407b00:	0000000d 	.word	0x0000000d
  407b04:	75716341 	.word	0x75716341
  407b08:	74697369 	.word	0x74697369
  407b0c:	206e6f69 	.word	0x206e6f69
  407b10:	706f7473 	.word	0x706f7473
  407b14:	0d0a6465 	.word	0x0d0a6465
  407b18:	00000000 	.word	0x00000000
  407b1c:	706d6153 	.word	0x706d6153
  407b20:	7020656c 	.word	0x7020656c
  407b24:	6f697265 	.word	0x6f697265
  407b28:	65732064 	.word	0x65732064
  407b2c:	6f742074 	.word	0x6f742074
  407b30:	20752520 	.word	0x20752520
  407b34:	0d0a5375 	.word	0x0d0a5375
  407b38:	00000000 	.word	0x00000000
  407b3c:	20514144 	.word	0x20514144
  407b40:	6c6c6977 	.word	0x6c6c6977
  407b44:	65746120 	.word	0x65746120
  407b48:	2074706d 	.word	0x2074706d
  407b4c:	74206f74 	.word	0x74206f74
  407b50:	20656b61 	.word	0x20656b61
  407b54:	73207525 	.word	0x73207525
  407b58:	6c706d61 	.word	0x6c706d61
  407b5c:	70207365 	.word	0x70207365
  407b60:	63207265 	.word	0x63207265
  407b64:	6e6e6168 	.word	0x6e6e6168
  407b68:	0d0a6c65 	.word	0x0d0a6c65
  407b6c:	00000000 	.word	0x00000000
  407b70:	20514144 	.word	0x20514144
  407b74:	6c6c6977 	.word	0x6c6c6977
  407b78:	6d617320 	.word	0x6d617320
  407b7c:	20656c70 	.word	0x20656c70
  407b80:	206c6c61 	.word	0x206c6c61
  407b84:	62656e65 	.word	0x62656e65
  407b88:	2064656c 	.word	0x2064656c
  407b8c:	6e616863 	.word	0x6e616863
  407b90:	736c656e 	.word	0x736c656e
  407b94:	20752520 	.word	0x20752520
  407b98:	656d6974 	.word	0x656d6974
  407b9c:	000d0a73 	.word	0x000d0a73

00407ba0 <_global_impure_ptr>:
  407ba0:	200000c0 20200043                                ... C.

00407ba6 <blanks.6743>:
  407ba6:	20202020 20202020 20202020 20202020                     

00407bb6 <zeroes.6744>:
  407bb6:	30303030 30303030 30303030 30303030     0000000000000000
  407bc6:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  407bd6:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  407be6:	32313000 36353433 61393837 65646362     .0123456789abcde
  407bf6:	00300066                                f.0.

00407bfa <_ctype_>:
  407bfa:	20202000 20202020 28282020 20282828     .         ((((( 
  407c0a:	20202020 20202020 20202020 20202020                     
  407c1a:	10108820 10101010 10101010 10101010      ...............
  407c2a:	04040410 04040404 10040404 10101010     ................
  407c3a:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407c4a:	01010101 01010101 01010101 10101010     ................
  407c5a:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407c6a:	02020202 02020202 02020202 10101010     ................
  407c7a:	00000020 00000000 00000000 00000000      ...............
	...
  407cfa:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
  407d0a:	00584953 0005002e                                SIX...

00407d10 <p05.5289>:
  407d10:	00000005 00000019 0000007d 00000000     ........}.......

00407d20 <__mprec_tens>:
  407d20:	00000000 3ff00000 00000000 40240000     .......?......$@
  407d30:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407d40:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407d50:	00000000 412e8480 00000000 416312d0     .......A......cA
  407d60:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407d70:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407d80:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407d90:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407da0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407db0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407dc0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407dd0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407de0:	79d99db4 44ea7843                       ...yCx.D

00407de8 <__mprec_tinytens>:
  407de8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  407df8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  407e08:	64ac6f43 0ac80628                       Co.d(...

00407e10 <__mprec_bigtens>:
  407e10:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407e20:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  407e30:	7f73bf3c 75154fdd                       <.s..O.u

00407e38 <blanks.6687>:
  407e38:	20202020 20202020 20202020 20202020                     

00407e48 <zeroes.6688>:
  407e48:	30303030 30303030 30303030 30303030     0000000000000000

00407e58 <_init>:
  407e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407e5a:	bf00      	nop
  407e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407e5e:	bc08      	pop	{r3}
  407e60:	469e      	mov	lr, r3
  407e62:	4770      	bx	lr

00407e64 <__init_array_start>:
  407e64:	00404301 	.word	0x00404301

00407e68 <__frame_dummy_init_array_entry>:
  407e68:	00400149                                I.@.

00407e6c <_fini>:
  407e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407e6e:	bf00      	nop
  407e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407e72:	bc08      	pop	{r3}
  407e74:	469e      	mov	lr, r3
  407e76:	4770      	bx	lr

00407e78 <__fini_array_start>:
  407e78:	00400121 	.word	0x00400121

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <sequencePosition>:
2000000c:	0001 0000                                   ....

20000010 <udi_api_cdc_data>:
20000010:	09a1 0040 0655 0040 0671 0040 0675 0040     ..@.U.@.q.@.u.@.
20000020:	0881 0040                                   ..@.

20000024 <udi_api_cdc_comm>:
20000024:	05f9 0040 0645 0040 0679 0040 0675 0040     ..@.E.@.y.@.u.@.
20000034:	0000 0000                                   ....

20000038 <udc_config>:
20000038:	0054 2000 004c 2000 0000 0000               T.. L.. ....

20000044 <udi_apis>:
20000044:	0024 2000 0010 2000                         $.. ... 

2000004c <udc_config_fs>:
2000004c:	0068 2000 0044 2000                         h.. D.. 

20000054 <udc_device_desc>:
20000054:	0112 0200 0002 4000 03eb 2404 0100 0000     .......@...$....
20000064:	0100 0000                                   ....

20000068 <udc_desc_fs>:
20000068:	0209 0043 0102 8000 0932 0004 0100 0202     ..C.....2.......
20000078:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000088:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000098:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
200000a8:	0040 0000                                   @...

200000ac <udc_string_desc_languageid>:
200000ac:	0304 0409                                   ....

200000b0 <g_interrupt_enabled>:
200000b0:	0001 0000                                   ....

200000b4 <SystemCoreClock>:
200000b4:	0900 003d                                   ..=.

200000b8 <_impure_ptr>:
200000b8:	00c0 2000 0000 0000                         ... ....

200000c0 <impure_data>:
200000c0:	0000 0000 03ac 2000 0414 2000 047c 2000     ....... ... |.. 
	...
200000f4:	7ba4 0040 0000 0000 0000 0000 0000 0000     .{@.............
	...
20000168:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000178:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004e8 <__ctype_ptr__>:
200004e8:	7bfa 0040                                   .{@.

200004ec <lc_ctype_charset>:
200004ec:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2000050c <__mb_cur_max>:
2000050c:	0001 0000                                   ....

20000510 <lc_message_charset>:
20000510:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000530 <lconv>:
20000530:	7d0e 0040 7d0f 0040 7d0f 0040 7d0f 0040     .}@..}@..}@..}@.
20000540:	7d0f 0040 7d0f 0040 7d0f 0040 7d0f 0040     .}@..}@..}@..}@.
20000550:	7d0f 0040 7d0f 0040 ffff ffff ffff ffff     .}@..}@.........
20000560:	ffff ffff ffff 0000                         ........

20000568 <__malloc_av_>:
	...
20000570:	0568 2000 0568 2000 0570 2000 0570 2000     h.. h.. p.. p.. 
20000580:	0578 2000 0578 2000 0580 2000 0580 2000     x.. x.. ... ... 
20000590:	0588 2000 0588 2000 0590 2000 0590 2000     ... ... ... ... 
200005a0:	0598 2000 0598 2000 05a0 2000 05a0 2000     ... ... ... ... 
200005b0:	05a8 2000 05a8 2000 05b0 2000 05b0 2000     ... ... ... ... 
200005c0:	05b8 2000 05b8 2000 05c0 2000 05c0 2000     ... ... ... ... 
200005d0:	05c8 2000 05c8 2000 05d0 2000 05d0 2000     ... ... ... ... 
200005e0:	05d8 2000 05d8 2000 05e0 2000 05e0 2000     ... ... ... ... 
200005f0:	05e8 2000 05e8 2000 05f0 2000 05f0 2000     ... ... ... ... 
20000600:	05f8 2000 05f8 2000 0600 2000 0600 2000     ... ... ... ... 
20000610:	0608 2000 0608 2000 0610 2000 0610 2000     ... ... ... ... 
20000620:	0618 2000 0618 2000 0620 2000 0620 2000     ... ...  ..  .. 
20000630:	0628 2000 0628 2000 0630 2000 0630 2000     (.. (.. 0.. 0.. 
20000640:	0638 2000 0638 2000 0640 2000 0640 2000     8.. 8.. @.. @.. 
20000650:	0648 2000 0648 2000 0650 2000 0650 2000     H.. H.. P.. P.. 
20000660:	0658 2000 0658 2000 0660 2000 0660 2000     X.. X.. `.. `.. 
20000670:	0668 2000 0668 2000 0670 2000 0670 2000     h.. h.. p.. p.. 
20000680:	0678 2000 0678 2000 0680 2000 0680 2000     x.. x.. ... ... 
20000690:	0688 2000 0688 2000 0690 2000 0690 2000     ... ... ... ... 
200006a0:	0698 2000 0698 2000 06a0 2000 06a0 2000     ... ... ... ... 
200006b0:	06a8 2000 06a8 2000 06b0 2000 06b0 2000     ... ... ... ... 
200006c0:	06b8 2000 06b8 2000 06c0 2000 06c0 2000     ... ... ... ... 
200006d0:	06c8 2000 06c8 2000 06d0 2000 06d0 2000     ... ... ... ... 
200006e0:	06d8 2000 06d8 2000 06e0 2000 06e0 2000     ... ... ... ... 
200006f0:	06e8 2000 06e8 2000 06f0 2000 06f0 2000     ... ... ... ... 
20000700:	06f8 2000 06f8 2000 0700 2000 0700 2000     ... ... ... ... 
20000710:	0708 2000 0708 2000 0710 2000 0710 2000     ... ... ... ... 
20000720:	0718 2000 0718 2000 0720 2000 0720 2000     ... ...  ..  .. 
20000730:	0728 2000 0728 2000 0730 2000 0730 2000     (.. (.. 0.. 0.. 
20000740:	0738 2000 0738 2000 0740 2000 0740 2000     8.. 8.. @.. @.. 
20000750:	0748 2000 0748 2000 0750 2000 0750 2000     H.. H.. P.. P.. 
20000760:	0758 2000 0758 2000 0760 2000 0760 2000     X.. X.. `.. `.. 
20000770:	0768 2000 0768 2000 0770 2000 0770 2000     h.. h.. p.. p.. 
20000780:	0778 2000 0778 2000 0780 2000 0780 2000     x.. x.. ... ... 
20000790:	0788 2000 0788 2000 0790 2000 0790 2000     ... ... ... ... 
200007a0:	0798 2000 0798 2000 07a0 2000 07a0 2000     ... ... ... ... 
200007b0:	07a8 2000 07a8 2000 07b0 2000 07b0 2000     ... ... ... ... 
200007c0:	07b8 2000 07b8 2000 07c0 2000 07c0 2000     ... ... ... ... 
200007d0:	07c8 2000 07c8 2000 07d0 2000 07d0 2000     ... ... ... ... 
200007e0:	07d8 2000 07d8 2000 07e0 2000 07e0 2000     ... ... ... ... 
200007f0:	07e8 2000 07e8 2000 07f0 2000 07f0 2000     ... ... ... ... 
20000800:	07f8 2000 07f8 2000 0800 2000 0800 2000     ... ... ... ... 
20000810:	0808 2000 0808 2000 0810 2000 0810 2000     ... ... ... ... 
20000820:	0818 2000 0818 2000 0820 2000 0820 2000     ... ...  ..  .. 
20000830:	0828 2000 0828 2000 0830 2000 0830 2000     (.. (.. 0.. 0.. 
20000840:	0838 2000 0838 2000 0840 2000 0840 2000     8.. 8.. @.. @.. 
20000850:	0848 2000 0848 2000 0850 2000 0850 2000     H.. H.. P.. P.. 
20000860:	0858 2000 0858 2000 0860 2000 0860 2000     X.. X.. `.. `.. 
20000870:	0868 2000 0868 2000 0870 2000 0870 2000     h.. h.. p.. p.. 
20000880:	0878 2000 0878 2000 0880 2000 0880 2000     x.. x.. ... ... 
20000890:	0888 2000 0888 2000 0890 2000 0890 2000     ... ... ... ... 
200008a0:	0898 2000 0898 2000 08a0 2000 08a0 2000     ... ... ... ... 
200008b0:	08a8 2000 08a8 2000 08b0 2000 08b0 2000     ... ... ... ... 
200008c0:	08b8 2000 08b8 2000 08c0 2000 08c0 2000     ... ... ... ... 
200008d0:	08c8 2000 08c8 2000 08d0 2000 08d0 2000     ... ... ... ... 
200008e0:	08d8 2000 08d8 2000 08e0 2000 08e0 2000     ... ... ... ... 
200008f0:	08e8 2000 08e8 2000 08f0 2000 08f0 2000     ... ... ... ... 
20000900:	08f8 2000 08f8 2000 0900 2000 0900 2000     ... ... ... ... 
20000910:	0908 2000 0908 2000 0910 2000 0910 2000     ... ... ... ... 
20000920:	0918 2000 0918 2000 0920 2000 0920 2000     ... ...  ..  .. 
20000930:	0928 2000 0928 2000 0930 2000 0930 2000     (.. (.. 0.. 0.. 
20000940:	0938 2000 0938 2000 0940 2000 0940 2000     8.. 8.. @.. @.. 
20000950:	0948 2000 0948 2000 0950 2000 0950 2000     H.. H.. P.. P.. 
20000960:	0958 2000 0958 2000 0960 2000 0960 2000     X.. X.. `.. `.. 

20000970 <__malloc_sbrk_base>:
20000970:	ffff ffff                                   ....

20000974 <__malloc_trim_threshold>:
20000974:	0000 0002                                   ....
