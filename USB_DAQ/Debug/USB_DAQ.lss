
USB_DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008054  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408054  00408054  00010054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000978  20000000  0040805c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002e0  20000978  004089d4  00018978  2**2
                  ALLOC
  4 .stack        00002000  20000c58  00408cb4  00018978  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018978  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000189a1  2**0
                  CONTENTS, READONLY
  7 .debug_info   00020869  00000000  00000000  00018a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005c3e  00000000  00000000  0003927b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000efaf  00000000  00000000  0003eeb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001068  00000000  00000000  0004de68  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cc8  00000000  00000000  0004eed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000155cd  00000000  00000000  0004fb98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016e95  00000000  00000000  00065165  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00051c86  00000000  00000000  0007bffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000023b8  00000000  00000000  000cdc80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20002c58 	.word	0x20002c58
  400004:	00403081 	.word	0x00403081
  400008:	0040307d 	.word	0x0040307d
  40000c:	0040307d 	.word	0x0040307d
  400010:	0040307d 	.word	0x0040307d
  400014:	0040307d 	.word	0x0040307d
  400018:	0040307d 	.word	0x0040307d
	...
  40002c:	0040307d 	.word	0x0040307d
  400030:	0040307d 	.word	0x0040307d
  400034:	00000000 	.word	0x00000000
  400038:	0040307d 	.word	0x0040307d
  40003c:	0040307d 	.word	0x0040307d
  400040:	0040307d 	.word	0x0040307d
  400044:	0040307d 	.word	0x0040307d
  400048:	0040307d 	.word	0x0040307d
  40004c:	0040307d 	.word	0x0040307d
  400050:	0040307d 	.word	0x0040307d
  400054:	0040307d 	.word	0x0040307d
  400058:	0040307d 	.word	0x0040307d
  40005c:	0040307d 	.word	0x0040307d
  400060:	0040307d 	.word	0x0040307d
  400064:	0040307d 	.word	0x0040307d
  400068:	0040307d 	.word	0x0040307d
  40006c:	004016c9 	.word	0x004016c9
  400070:	004016dd 	.word	0x004016dd
  400074:	0040307d 	.word	0x0040307d
  400078:	0040307d 	.word	0x0040307d
  40007c:	0040307d 	.word	0x0040307d
  400080:	0040307d 	.word	0x0040307d
  400084:	0040307d 	.word	0x0040307d
  400088:	0040307d 	.word	0x0040307d
  40008c:	0040307d 	.word	0x0040307d
  400090:	0040307d 	.word	0x0040307d
  400094:	0040307d 	.word	0x0040307d
  400098:	0040307d 	.word	0x0040307d
  40009c:	0040307d 	.word	0x0040307d
  4000a0:	0040307d 	.word	0x0040307d
  4000a4:	0040307d 	.word	0x0040307d
  4000a8:	0040307d 	.word	0x0040307d
  4000ac:	0040307d 	.word	0x0040307d
  4000b0:	0040307d 	.word	0x0040307d
  4000b4:	00400181 	.word	0x00400181
  4000b8:	0040307d 	.word	0x0040307d
  4000bc:	0040307d 	.word	0x0040307d
  4000c0:	0040307d 	.word	0x0040307d
  4000c4:	0040307d 	.word	0x0040307d
  4000c8:	00401e89 	.word	0x00401e89
  4000cc:	0040307d 	.word	0x0040307d

004000d0 <deregister_tm_clones>:
  4000d0:	b508      	push	{r3, lr}
  4000d2:	4805      	ldr	r0, [pc, #20]	; (4000e8 <deregister_tm_clones+0x18>)
  4000d4:	4b05      	ldr	r3, [pc, #20]	; (4000ec <deregister_tm_clones+0x1c>)
  4000d6:	1a1b      	subs	r3, r3, r0
  4000d8:	2b06      	cmp	r3, #6
  4000da:	d800      	bhi.n	4000de <deregister_tm_clones+0xe>
  4000dc:	bd08      	pop	{r3, pc}
  4000de:	4b04      	ldr	r3, [pc, #16]	; (4000f0 <deregister_tm_clones+0x20>)
  4000e0:	2b00      	cmp	r3, #0
  4000e2:	d0fb      	beq.n	4000dc <deregister_tm_clones+0xc>
  4000e4:	4798      	blx	r3
  4000e6:	e7f9      	b.n	4000dc <deregister_tm_clones+0xc>
  4000e8:	0040805c 	.word	0x0040805c
  4000ec:	0040805f 	.word	0x0040805f
  4000f0:	00000000 	.word	0x00000000

004000f4 <register_tm_clones>:
  4000f4:	b508      	push	{r3, lr}
  4000f6:	4807      	ldr	r0, [pc, #28]	; (400114 <register_tm_clones+0x20>)
  4000f8:	4b07      	ldr	r3, [pc, #28]	; (400118 <register_tm_clones+0x24>)
  4000fa:	1a1b      	subs	r3, r3, r0
  4000fc:	109b      	asrs	r3, r3, #2
  4000fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  400102:	1059      	asrs	r1, r3, #1
  400104:	d100      	bne.n	400108 <register_tm_clones+0x14>
  400106:	bd08      	pop	{r3, pc}
  400108:	4a04      	ldr	r2, [pc, #16]	; (40011c <register_tm_clones+0x28>)
  40010a:	2a00      	cmp	r2, #0
  40010c:	d0fb      	beq.n	400106 <register_tm_clones+0x12>
  40010e:	4790      	blx	r2
  400110:	e7f9      	b.n	400106 <register_tm_clones+0x12>
  400112:	bf00      	nop
  400114:	0040805c 	.word	0x0040805c
  400118:	0040805c 	.word	0x0040805c
  40011c:	00000000 	.word	0x00000000

00400120 <__do_global_dtors_aux>:
  400120:	b510      	push	{r4, lr}
  400122:	4c06      	ldr	r4, [pc, #24]	; (40013c <__do_global_dtors_aux+0x1c>)
  400124:	7823      	ldrb	r3, [r4, #0]
  400126:	b943      	cbnz	r3, 40013a <__do_global_dtors_aux+0x1a>
  400128:	f7ff ffd2 	bl	4000d0 <deregister_tm_clones>
  40012c:	4b04      	ldr	r3, [pc, #16]	; (400140 <__do_global_dtors_aux+0x20>)
  40012e:	b113      	cbz	r3, 400136 <__do_global_dtors_aux+0x16>
  400130:	4804      	ldr	r0, [pc, #16]	; (400144 <__do_global_dtors_aux+0x24>)
  400132:	f3af 8000 	nop.w
  400136:	2301      	movs	r3, #1
  400138:	7023      	strb	r3, [r4, #0]
  40013a:	bd10      	pop	{r4, pc}
  40013c:	20000978 	.word	0x20000978
  400140:	00000000 	.word	0x00000000
  400144:	0040805c 	.word	0x0040805c

00400148 <frame_dummy>:
  400148:	b508      	push	{r3, lr}
  40014a:	4b08      	ldr	r3, [pc, #32]	; (40016c <frame_dummy+0x24>)
  40014c:	b11b      	cbz	r3, 400156 <frame_dummy+0xe>
  40014e:	4808      	ldr	r0, [pc, #32]	; (400170 <frame_dummy+0x28>)
  400150:	4908      	ldr	r1, [pc, #32]	; (400174 <frame_dummy+0x2c>)
  400152:	f3af 8000 	nop.w
  400156:	4808      	ldr	r0, [pc, #32]	; (400178 <frame_dummy+0x30>)
  400158:	6803      	ldr	r3, [r0, #0]
  40015a:	b113      	cbz	r3, 400162 <frame_dummy+0x1a>
  40015c:	4b07      	ldr	r3, [pc, #28]	; (40017c <frame_dummy+0x34>)
  40015e:	b103      	cbz	r3, 400162 <frame_dummy+0x1a>
  400160:	4798      	blx	r3
  400162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  400166:	f7ff bfc5 	b.w	4000f4 <register_tm_clones>
  40016a:	bf00      	nop
  40016c:	00000000 	.word	0x00000000
  400170:	0040805c 	.word	0x0040805c
  400174:	2000097c 	.word	0x2000097c
  400178:	0040805c 	.word	0x0040805c
  40017c:	00000000 	.word	0x00000000

00400180 <ADC_Handler>:
	//Setup adc and start the timer. Everithing else happens in ADC ISR
}


void ADC_Handler (void)
{ 
  400180:	b510      	push	{r4, lr}
	DAQSettingsPtr = get_current_DAQ_settings();
  400182:	4b18      	ldr	r3, [pc, #96]	; (4001e4 <ADC_Handler+0x64>)
  400184:	4798      	blx	r3
  400186:	4b18      	ldr	r3, [pc, #96]	; (4001e8 <ADC_Handler+0x68>)
  400188:	6018      	str	r0, [r3, #0]

	result = adc_get_latest_value(ADC);
  40018a:	4c18      	ldr	r4, [pc, #96]	; (4001ec <ADC_Handler+0x6c>)
  40018c:	4620      	mov	r0, r4
  40018e:	4b18      	ldr	r3, [pc, #96]	; (4001f0 <ADC_Handler+0x70>)
  400190:	4798      	blx	r3
  400192:	4b18      	ldr	r3, [pc, #96]	; (4001f4 <ADC_Handler+0x74>)
  400194:	6018      	str	r0, [r3, #0]
	//todo: convert and print measured result
	adc_disable_all_channel(ADC);
  400196:	4620      	mov	r0, r4
  400198:	4b17      	ldr	r3, [pc, #92]	; (4001f8 <ADC_Handler+0x78>)
  40019a:	4798      	blx	r3
	if(repetitionCounter)
  40019c:	4b17      	ldr	r3, [pc, #92]	; (4001fc <ADC_Handler+0x7c>)
  40019e:	681b      	ldr	r3, [r3, #0]
  4001a0:	b1db      	cbz	r3, 4001da <ADC_Handler+0x5a>
	{
		if(sampleCounter)
  4001a2:	4a17      	ldr	r2, [pc, #92]	; (400200 <ADC_Handler+0x80>)
  4001a4:	6812      	ldr	r2, [r2, #0]
  4001a6:	b11a      	cbz	r2, 4001b0 <ADC_Handler+0x30>
		{
			sampleCounter--;
  4001a8:	3a01      	subs	r2, #1
  4001aa:	4b15      	ldr	r3, [pc, #84]	; (400200 <ADC_Handler+0x80>)
  4001ac:	601a      	str	r2, [r3, #0]
  4001ae:	e00a      	b.n	4001c6 <ADC_Handler+0x46>
		}
		else
		{
			sampleCounter = DAQSettingsPtr->samplesNbr;
  4001b0:	4a0d      	ldr	r2, [pc, #52]	; (4001e8 <ADC_Handler+0x68>)
  4001b2:	6812      	ldr	r2, [r2, #0]
  4001b4:	8a11      	ldrh	r1, [r2, #16]
  4001b6:	4a12      	ldr	r2, [pc, #72]	; (400200 <ADC_Handler+0x80>)
  4001b8:	6011      	str	r1, [r2, #0]
			sequencePosition++;
			if(DAQSettingsPtr->sequence[sequencePosition] == 0);
			{
				sequencePosition = 0;
  4001ba:	2100      	movs	r1, #0
  4001bc:	4a11      	ldr	r2, [pc, #68]	; (400204 <ADC_Handler+0x84>)
  4001be:	6011      	str	r1, [r2, #0]
				repetitionCounter--;
  4001c0:	3b01      	subs	r3, #1
  4001c2:	4a0e      	ldr	r2, [pc, #56]	; (4001fc <ADC_Handler+0x7c>)
  4001c4:	6013      	str	r3, [r2, #0]
			}
		}
		adc_enable_channel(ADC, DAQSettingsPtr->sequence[sequencePosition]); // todo: channel maping
  4001c6:	4b08      	ldr	r3, [pc, #32]	; (4001e8 <ADC_Handler+0x68>)
  4001c8:	681a      	ldr	r2, [r3, #0]
  4001ca:	4b0e      	ldr	r3, [pc, #56]	; (400204 <ADC_Handler+0x84>)
  4001cc:	681b      	ldr	r3, [r3, #0]
  4001ce:	4413      	add	r3, r2
  4001d0:	4806      	ldr	r0, [pc, #24]	; (4001ec <ADC_Handler+0x6c>)
  4001d2:	7a19      	ldrb	r1, [r3, #8]
  4001d4:	4b0c      	ldr	r3, [pc, #48]	; (400208 <ADC_Handler+0x88>)
  4001d6:	4798      	blx	r3
  4001d8:	bd10      	pop	{r4, pc}
	}
	else
	{
		tc_stop(TC0, 0);
  4001da:	480c      	ldr	r0, [pc, #48]	; (40020c <ADC_Handler+0x8c>)
  4001dc:	2100      	movs	r1, #0
  4001de:	4b0c      	ldr	r3, [pc, #48]	; (400210 <ADC_Handler+0x90>)
  4001e0:	4798      	blx	r3
  4001e2:	bd10      	pop	{r4, pc}
  4001e4:	00400661 	.word	0x00400661
  4001e8:	20000c14 	.word	0x20000c14
  4001ec:	40038000 	.word	0x40038000
  4001f0:	00401529 	.word	0x00401529
  4001f4:	20000c10 	.word	0x20000c10
  4001f8:	00401521 	.word	0x00401521
  4001fc:	20000c0c 	.word	0x20000c0c
  400200:	20000c08 	.word	0x20000c08
  400204:	2000000c 	.word	0x2000000c
  400208:	00401515 	.word	0x00401515
  40020c:	40010000 	.word	0x40010000
  400210:	004018e9 	.word	0x004018e9

00400214 <dac_init>:
#include "pmc.h"
#include "pio.h"
#include "stdint-gcc.h"

void dac_init (void)
{
  400214:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
  400216:	201e      	movs	r0, #30
  400218:	4c15      	ldr	r4, [pc, #84]	; (400270 <dac_init+0x5c>)
  40021a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  40021c:	200c      	movs	r0, #12
  40021e:	47a0      	blx	r4
	
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB13);
  400220:	4d14      	ldr	r5, [pc, #80]	; (400274 <dac_init+0x60>)
  400222:	4628      	mov	r0, r5
  400224:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40022c:	4c12      	ldr	r4, [pc, #72]	; (400278 <dac_init+0x64>)
  40022e:	47a0      	blx	r4
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB14);
  400230:	4628      	mov	r0, r5
  400232:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40023a:	47a0      	blx	r4
	dacc_reset(DACC);
  40023c:	4c0f      	ldr	r4, [pc, #60]	; (40027c <dac_init+0x68>)
  40023e:	4620      	mov	r0, r4
  400240:	4b0f      	ldr	r3, [pc, #60]	; (400280 <dac_init+0x6c>)
  400242:	4798      	blx	r3
	dacc_set_writeprotect(DACC, 0);
  400244:	4620      	mov	r0, r4
  400246:	2100      	movs	r1, #0
  400248:	4b0e      	ldr	r3, [pc, #56]	; (400284 <dac_init+0x70>)
  40024a:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);
  40024c:	4620      	mov	r0, r4
  40024e:	2100      	movs	r1, #0
  400250:	4d0d      	ldr	r5, [pc, #52]	; (400288 <dac_init+0x74>)
  400252:	47a8      	blx	r5
	dacc_enable_channel(DACC, 1);	
  400254:	4620      	mov	r0, r4
  400256:	2101      	movs	r1, #1
  400258:	47a8      	blx	r5
	dacc_set_timing(DACC, 1, 0, 15);
  40025a:	4620      	mov	r0, r4
  40025c:	2101      	movs	r1, #1
  40025e:	2200      	movs	r2, #0
  400260:	230f      	movs	r3, #15
  400262:	4d0a      	ldr	r5, [pc, #40]	; (40028c <dac_init+0x78>)
  400264:	47a8      	blx	r5
	dacc_disable_trigger(DACC);
  400266:	4620      	mov	r0, r4
  400268:	4b09      	ldr	r3, [pc, #36]	; (400290 <dac_init+0x7c>)
  40026a:	4798      	blx	r3
  40026c:	bd38      	pop	{r3, r4, r5, pc}
  40026e:	bf00      	nop
  400270:	004017f5 	.word	0x004017f5
  400274:	400e1000 	.word	0x400e1000
  400278:	004015a1 	.word	0x004015a1
  40027c:	4003c000 	.word	0x4003c000
  400280:	0040152d 	.word	0x0040152d
  400284:	00401541 	.word	0x00401541
  400288:	0040158d 	.word	0x0040158d
  40028c:	0040155d 	.word	0x0040155d
  400290:	00401535 	.word	0x00401535

00400294 <print_formating_error>:
	}
}


void print_formating_error(void)
{
  400294:	b530      	push	{r4, r5, lr}
  400296:	b087      	sub	sp, #28
	uint32_t charsPrinted;
	uint8_t printBuffer[20];
	
	charsPrinted = sprintf(printBuffer, "Comand format error!\n\r");
  400298:	ac01      	add	r4, sp, #4
  40029a:	4d08      	ldr	r5, [pc, #32]	; (4002bc <print_formating_error+0x28>)
  40029c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40029e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4002a0:	e895 0003 	ldmia.w	r5, {r0, r1}
  4002a4:	f844 0b04 	str.w	r0, [r4], #4
  4002a8:	f824 1b02 	strh.w	r1, [r4], #2
  4002ac:	0c09      	lsrs	r1, r1, #16
  4002ae:	7021      	strb	r1, [r4, #0]
	udi_cdc_write_buf(printBuffer, charsPrinted);
  4002b0:	a801      	add	r0, sp, #4
  4002b2:	2116      	movs	r1, #22
  4002b4:	4b02      	ldr	r3, [pc, #8]	; (4002c0 <print_formating_error+0x2c>)
  4002b6:	4798      	blx	r3
}
  4002b8:	b007      	add	sp, #28
  4002ba:	bd30      	pop	{r4, r5, pc}
  4002bc:	00407c6c 	.word	0x00407c6c
  4002c0:	00400ebd 	.word	0x00400ebd

004002c4 <parse_comands>:

void parse_comands (void)
{
  4002c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002c8:	b090      	sub	sp, #64	; 0x40
	static uint8_t holdingBuffer[HOLDING_BUFFER_SIZE];
	static uint8_t tempBuffer[10];
	uint8_t *startOfData;
	uint8_t printBuffer [50];
	uint32_t charsPrinted, entryCounter;
	volatile uint32_t a, dacCh = 0;
  4002ca:	2300      	movs	r3, #0
  4002cc:	9301      	str	r3, [sp, #4]
	
	if(udi_cdc_is_rx_ready())
  4002ce:	4b86      	ldr	r3, [pc, #536]	; (4004e8 <parse_comands+0x224>)
  4002d0:	4798      	blx	r3
  4002d2:	2800      	cmp	r0, #0
  4002d4:	f000 81a8 	beq.w	400628 <parse_comands+0x364>
	{
		temp = udi_cdc_getc();
  4002d8:	4b84      	ldr	r3, [pc, #528]	; (4004ec <parse_comands+0x228>)
  4002da:	4798      	blx	r3
  4002dc:	b2c4      	uxtb	r4, r0
		udi_cdc_putc(temp);
  4002de:	4620      	mov	r0, r4
  4002e0:	4b83      	ldr	r3, [pc, #524]	; (4004f0 <parse_comands+0x22c>)
  4002e2:	4798      	blx	r3
		
		if(temp == 127) // 127 = backspace in ASCII?? (sholud be DELITE)
  4002e4:	2c7f      	cmp	r4, #127	; 0x7f
  4002e6:	d108      	bne.n	4002fa <parse_comands+0x36>
		{
			if(insertPointer)
  4002e8:	4b82      	ldr	r3, [pc, #520]	; (4004f4 <parse_comands+0x230>)
  4002ea:	781b      	ldrb	r3, [r3, #0]
  4002ec:	2b00      	cmp	r3, #0
  4002ee:	f000 819b 	beq.w	400628 <parse_comands+0x364>
			{
				insertPointer--;
  4002f2:	3b01      	subs	r3, #1
  4002f4:	4a7f      	ldr	r2, [pc, #508]	; (4004f4 <parse_comands+0x230>)
  4002f6:	7013      	strb	r3, [r2, #0]
  4002f8:	e196      	b.n	400628 <parse_comands+0x364>
			}
		}
		else if(insertPointer < (HOLDING_BUFFER_SIZE - 2))
  4002fa:	4b7e      	ldr	r3, [pc, #504]	; (4004f4 <parse_comands+0x230>)
  4002fc:	781b      	ldrb	r3, [r3, #0]
  4002fe:	2b11      	cmp	r3, #17
  400300:	d804      	bhi.n	40030c <parse_comands+0x48>
		{
			holdingBuffer[insertPointer] = temp;
  400302:	4a7d      	ldr	r2, [pc, #500]	; (4004f8 <parse_comands+0x234>)
  400304:	54d4      	strb	r4, [r2, r3]
			insertPointer++;
  400306:	3301      	adds	r3, #1
  400308:	4a7a      	ldr	r2, [pc, #488]	; (4004f4 <parse_comands+0x230>)
  40030a:	7013      	strb	r3, [r2, #0]
		}	
		
		if(temp == '\r')
  40030c:	2c0d      	cmp	r4, #13
  40030e:	f040 818b 	bne.w	400628 <parse_comands+0x364>
		{
			udi_cdc_putc('\n');
  400312:	200a      	movs	r0, #10
  400314:	4c76      	ldr	r4, [pc, #472]	; (4004f0 <parse_comands+0x22c>)
  400316:	47a0      	blx	r4
			udi_cdc_putc('\r');
  400318:	200d      	movs	r0, #13
  40031a:	47a0      	blx	r4
			
			holdingBuffer[insertPointer] = 0;
  40031c:	4876      	ldr	r0, [pc, #472]	; (4004f8 <parse_comands+0x234>)
  40031e:	4b75      	ldr	r3, [pc, #468]	; (4004f4 <parse_comands+0x230>)
  400320:	781b      	ldrb	r3, [r3, #0]
  400322:	2200      	movs	r2, #0
  400324:	54c2      	strb	r2, [r0, r3]
			startOfData = strpbrk(holdingBuffer, LIST_OF_KNOWN_COMANDS);
  400326:	4975      	ldr	r1, [pc, #468]	; (4004fc <parse_comands+0x238>)
  400328:	4b75      	ldr	r3, [pc, #468]	; (400500 <parse_comands+0x23c>)
  40032a:	4798      	blx	r3
			//after this executes startOfData should point to first know character in string
			switch (*(startOfData))
  40032c:	7804      	ldrb	r4, [r0, #0]
  40032e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  400332:	2b13      	cmp	r3, #19
  400334:	f200 8175 	bhi.w	400622 <parse_comands+0x35e>
  400338:	e8df f013 	tbh	[pc, r3, lsl #1]
  40033c:	01730036 	.word	0x01730036
  400340:	01290173 	.word	0x01290173
  400344:	003600a5 	.word	0x003600a5
  400348:	01730173 	.word	0x01730173
  40034c:	01730173 	.word	0x01730173
  400350:	01730173 	.word	0x01730173
  400354:	01730173 	.word	0x01730173
  400358:	01730173 	.word	0x01730173
  40035c:	00360173 	.word	0x00360173
  400360:	00250014 	.word	0x00250014
			{
				case COMAND_START_ACQ:
					daqSettings.startAcq = 1;
  400364:	2201      	movs	r2, #1
  400366:	4b67      	ldr	r3, [pc, #412]	; (400504 <parse_comands+0x240>)
  400368:	751a      	strb	r2, [r3, #20]
					charsPrinted = sprintf(printBuffer, "Acquisition started\n\r");
  40036a:	ac03      	add	r4, sp, #12
  40036c:	4d66      	ldr	r5, [pc, #408]	; (400508 <parse_comands+0x244>)
  40036e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400372:	e895 0003 	ldmia.w	r5, {r0, r1}
  400376:	f844 0b04 	str.w	r0, [r4], #4
  40037a:	8021      	strh	r1, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  40037c:	a803      	add	r0, sp, #12
  40037e:	2115      	movs	r1, #21
  400380:	4b62      	ldr	r3, [pc, #392]	; (40050c <parse_comands+0x248>)
  400382:	4798      	blx	r3
					break;
  400384:	e14d      	b.n	400622 <parse_comands+0x35e>
				
				case COMAND_STOP_ACQ:
					daqSettings.stopAcq = 1;
  400386:	2201      	movs	r2, #1
  400388:	4b5e      	ldr	r3, [pc, #376]	; (400504 <parse_comands+0x240>)
  40038a:	755a      	strb	r2, [r3, #21]
					charsPrinted = sprintf(printBuffer, "Acquisition stoped\n\r");
  40038c:	ac03      	add	r4, sp, #12
  40038e:	4d60      	ldr	r5, [pc, #384]	; (400510 <parse_comands+0x24c>)
  400390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400394:	e895 0003 	ldmia.w	r5, {r0, r1}
  400398:	f844 0b04 	str.w	r0, [r4], #4
  40039c:	7021      	strb	r1, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  40039e:	a803      	add	r0, sp, #12
  4003a0:	2114      	movs	r1, #20
  4003a2:	4b5a      	ldr	r3, [pc, #360]	; (40050c <parse_comands+0x248>)
  4003a4:	4798      	blx	r3
					break;
  4003a6:	e13c      	b.n	400622 <parse_comands+0x35e>
					
				case COMAND_SET_SAMPLE_PERIOD:
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
  4003a8:	4b5a      	ldr	r3, [pc, #360]	; (400514 <parse_comands+0x250>)
  4003aa:	701c      	strb	r4, [r3, #0]
					//skip_blank_chars(startOfData);
					startOfData++;
  4003ac:	1c42      	adds	r2, r0, #1
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  4003ae:	7843      	ldrb	r3, [r0, #1]
  4003b0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  4003b4:	b2c9      	uxtb	r1, r1
  4003b6:	2909      	cmp	r1, #9
  4003b8:	d814      	bhi.n	4003e4 <parse_comands+0x120>
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  4003ba:	4957      	ldr	r1, [pc, #348]	; (400518 <parse_comands+0x254>)
  4003bc:	428a      	cmp	r2, r1
  4003be:	d813      	bhi.n	4003e8 <parse_comands+0x124>
  4003c0:	1c4e      	adds	r6, r1, #1
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
  4003c2:	2100      	movs	r1, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
  4003c4:	4d55      	ldr	r5, [pc, #340]	; (40051c <parse_comands+0x258>)
  4003c6:	e002      	b.n	4003ce <parse_comands+0x10a>
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  4003c8:	42b2      	cmp	r2, r6
  4003ca:	d00e      	beq.n	4003ea <parse_comands+0x126>
						tempBuffer[n++] = *startOfData++;
  4003cc:	4601      	mov	r1, r0
  4003ce:	1c48      	adds	r0, r1, #1
  4003d0:	b2c0      	uxtb	r0, r0
  4003d2:	546b      	strb	r3, [r5, r1]
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  4003d4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4003d8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  4003dc:	b2c9      	uxtb	r1, r1
  4003de:	2909      	cmp	r1, #9
  4003e0:	d9f2      	bls.n	4003c8 <parse_comands+0x104>
  4003e2:	e002      	b.n	4003ea <parse_comands+0x126>
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
  4003e4:	2000      	movs	r0, #0
  4003e6:	e000      	b.n	4003ea <parse_comands+0x126>
  4003e8:	2000      	movs	r0, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
					}
					if(comandByte == COMAND_SET_SAMPLE_PERIOD)
  4003ea:	2c52      	cmp	r4, #82	; 0x52
  4003ec:	d116      	bne.n	40041c <parse_comands+0x158>
					{
						if(*startOfData == '\r')
  4003ee:	2b0d      	cmp	r3, #13
  4003f0:	d111      	bne.n	400416 <parse_comands+0x152>
						{
							tempBuffer[n] = 0;
  4003f2:	4b4a      	ldr	r3, [pc, #296]	; (40051c <parse_comands+0x258>)
  4003f4:	2200      	movs	r2, #0
  4003f6:	541a      	strb	r2, [r3, r0]
							daqSettings.timerBase = atoi(tempBuffer);
  4003f8:	4618      	mov	r0, r3
  4003fa:	4b49      	ldr	r3, [pc, #292]	; (400520 <parse_comands+0x25c>)
  4003fc:	4798      	blx	r3
  4003fe:	4602      	mov	r2, r0
  400400:	4b40      	ldr	r3, [pc, #256]	; (400504 <parse_comands+0x240>)
  400402:	6058      	str	r0, [r3, #4]
							charsPrinted = sprintf(printBuffer, "Sample period set to %u uS\n\r", daqSettings.timerBase);
  400404:	a803      	add	r0, sp, #12
  400406:	4947      	ldr	r1, [pc, #284]	; (400524 <parse_comands+0x260>)
  400408:	4b47      	ldr	r3, [pc, #284]	; (400528 <parse_comands+0x264>)
  40040a:	4798      	blx	r3
  40040c:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  40040e:	a803      	add	r0, sp, #12
  400410:	4b3e      	ldr	r3, [pc, #248]	; (40050c <parse_comands+0x248>)
  400412:	4798      	blx	r3
  400414:	e105      	b.n	400622 <parse_comands+0x35e>
							//todo: limit sample rate period
							//todo: calcualte timeer base based on sample period
						}
						else
						{
							print_formating_error();
  400416:	4b45      	ldr	r3, [pc, #276]	; (40052c <parse_comands+0x268>)
  400418:	4798      	blx	r3
  40041a:	e102      	b.n	400622 <parse_comands+0x35e>
						}	
					}
					else if(comandByte == COMAND_SET_AVERAGE_COUNT)
  40041c:	2c41      	cmp	r4, #65	; 0x41
  40041e:	d117      	bne.n	400450 <parse_comands+0x18c>
					{
						if(*startOfData == '\r')
  400420:	2b0d      	cmp	r3, #13
  400422:	d112      	bne.n	40044a <parse_comands+0x186>
						{
							tempBuffer[n] = 0;
  400424:	4b3d      	ldr	r3, [pc, #244]	; (40051c <parse_comands+0x258>)
  400426:	2200      	movs	r2, #0
  400428:	541a      	strb	r2, [r3, r0]
							daqSettings.samplesNbr = atoi(tempBuffer);
  40042a:	4618      	mov	r0, r3
  40042c:	4b3c      	ldr	r3, [pc, #240]	; (400520 <parse_comands+0x25c>)
  40042e:	4798      	blx	r3
  400430:	4602      	mov	r2, r0
  400432:	4b34      	ldr	r3, [pc, #208]	; (400504 <parse_comands+0x240>)
  400434:	8218      	strh	r0, [r3, #16]
							charsPrinted = sprintf(printBuffer, "DAQ will atempt to take %u samples per channel\n\r", daqSettings.samplesNbr);
  400436:	a803      	add	r0, sp, #12
  400438:	493d      	ldr	r1, [pc, #244]	; (400530 <parse_comands+0x26c>)
  40043a:	b292      	uxth	r2, r2
  40043c:	4b3a      	ldr	r3, [pc, #232]	; (400528 <parse_comands+0x264>)
  40043e:	4798      	blx	r3
  400440:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  400442:	a803      	add	r0, sp, #12
  400444:	4b31      	ldr	r3, [pc, #196]	; (40050c <parse_comands+0x248>)
  400446:	4798      	blx	r3
  400448:	e0eb      	b.n	400622 <parse_comands+0x35e>
							//todo: limit samples per channel
						}
						else
						{
							print_formating_error();
  40044a:	4b38      	ldr	r3, [pc, #224]	; (40052c <parse_comands+0x268>)
  40044c:	4798      	blx	r3
  40044e:	e0e8      	b.n	400622 <parse_comands+0x35e>
						}
					}
					else if(comandByte == COMAND_SET_MEASURMENT_NBR_COUNT)
  400450:	2c46      	cmp	r4, #70	; 0x46
  400452:	f040 80e6 	bne.w	400622 <parse_comands+0x35e>
					{
						if(*startOfData == '\r')
  400456:	2b0d      	cmp	r3, #13
  400458:	d112      	bne.n	400480 <parse_comands+0x1bc>
						{
							tempBuffer[n] = 0;
  40045a:	4b30      	ldr	r3, [pc, #192]	; (40051c <parse_comands+0x258>)
  40045c:	2200      	movs	r2, #0
  40045e:	541a      	strb	r2, [r3, r0]
							daqSettings.cycles = atoi(tempBuffer);
  400460:	4618      	mov	r0, r3
  400462:	4b2f      	ldr	r3, [pc, #188]	; (400520 <parse_comands+0x25c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4b26      	ldr	r3, [pc, #152]	; (400504 <parse_comands+0x240>)
  40046a:	8258      	strh	r0, [r3, #18]
							charsPrinted = sprintf(printBuffer, "DAQ will sample all enebled channels %u times\n\r", daqSettings.cycles);
  40046c:	a803      	add	r0, sp, #12
  40046e:	4931      	ldr	r1, [pc, #196]	; (400534 <parse_comands+0x270>)
  400470:	b292      	uxth	r2, r2
  400472:	4b2d      	ldr	r3, [pc, #180]	; (400528 <parse_comands+0x264>)
  400474:	4798      	blx	r3
  400476:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  400478:	a803      	add	r0, sp, #12
  40047a:	4b24      	ldr	r3, [pc, #144]	; (40050c <parse_comands+0x248>)
  40047c:	4798      	blx	r3
  40047e:	e0d0      	b.n	400622 <parse_comands+0x35e>
							//todo: limit samples per channel
						}
						else
						{
							print_formating_error();
  400480:	4b2a      	ldr	r3, [pc, #168]	; (40052c <parse_comands+0x268>)
  400482:	4798      	blx	r3
  400484:	e0cd      	b.n	400622 <parse_comands+0x35e>
					}
					break;
				
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
  400486:	1c43      	adds	r3, r0, #1
					entryCounter = 0;
  400488:	2600      	movs	r6, #0
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  40048a:	4d24      	ldr	r5, [pc, #144]	; (40051c <parse_comands+0x258>)
  40048c:	46a8      	mov	r8, r5
							if(*startOfData == '\r') break;
						}
						tempBuffer[n]  = 0;
						a = atoi(tempBuffer);
  40048e:	4f24      	ldr	r7, [pc, #144]	; (400520 <parse_comands+0x25c>)
  400490:	e008      	b.n	4004a4 <parse_comands+0x1e0>
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  400492:	1c50      	adds	r0, r2, #1
  400494:	b2c0      	uxtb	r0, r0
  400496:	461c      	mov	r4, r3
  400498:	54a9      	strb	r1, [r5, r2]
							if(*startOfData == '\r') break;
  40049a:	781a      	ldrb	r2, [r3, #0]
  40049c:	2a0d      	cmp	r2, #13
  40049e:	d008      	beq.n	4004b2 <parse_comands+0x1ee>
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  4004a0:	4602      	mov	r2, r0
  4004a2:	e000      	b.n	4004a6 <parse_comands+0x1e2>
					break;
				
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
					entryCounter = 0;
  4004a4:	2200      	movs	r2, #0
  4004a6:	461c      	mov	r4, r3
					n = 0;
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
  4004a8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4004ac:	292c      	cmp	r1, #44	; 0x2c
  4004ae:	d1f0      	bne.n	400492 <parse_comands+0x1ce>
  4004b0:	e000      	b.n	4004b4 <parse_comands+0x1f0>
						{
							tempBuffer[n++] = *startOfData++;
  4004b2:	4602      	mov	r2, r0
							if(*startOfData == '\r') break;
						}
						tempBuffer[n]  = 0;
  4004b4:	2300      	movs	r3, #0
  4004b6:	54ab      	strb	r3, [r5, r2]
						a = atoi(tempBuffer);
  4004b8:	4640      	mov	r0, r8
  4004ba:	47b8      	blx	r7
  4004bc:	9002      	str	r0, [sp, #8]
						if(a)
  4004be:	9b02      	ldr	r3, [sp, #8]
  4004c0:	b163      	cbz	r3, 4004dc <parse_comands+0x218>
						{
							if(a > 4) {a = 4;} // we only have 4 channels
  4004c2:	9b02      	ldr	r3, [sp, #8]
  4004c4:	2b04      	cmp	r3, #4
  4004c6:	bf84      	itt	hi
  4004c8:	2304      	movhi	r3, #4
  4004ca:	9302      	strhi	r3, [sp, #8]
							daqSettings.sequence[entryCounter] = a;
  4004cc:	9a02      	ldr	r2, [sp, #8]
  4004ce:	4b0d      	ldr	r3, [pc, #52]	; (400504 <parse_comands+0x240>)
  4004d0:	4433      	add	r3, r6
  4004d2:	721a      	strb	r2, [r3, #8]
						else
						{
							daqSettings.sequence[entryCounter] = 0;
							break;
						}
						if(*startOfData == '\r') break;
  4004d4:	7823      	ldrb	r3, [r4, #0]
  4004d6:	2b0d      	cmp	r3, #13
  4004d8:	d12e      	bne.n	400538 <parse_comands+0x274>
  4004da:	e031      	b.n	400540 <parse_comands+0x27c>
							if(a > 4) {a = 4;} // we only have 4 channels
							daqSettings.sequence[entryCounter] = a;
						}
						else
						{
							daqSettings.sequence[entryCounter] = 0;
  4004dc:	4b09      	ldr	r3, [pc, #36]	; (400504 <parse_comands+0x240>)
  4004de:	4433      	add	r3, r6
  4004e0:	2200      	movs	r2, #0
  4004e2:	721a      	strb	r2, [r3, #8]
							break;
  4004e4:	e02c      	b.n	400540 <parse_comands+0x27c>
  4004e6:	bf00      	nop
  4004e8:	00400c15 	.word	0x00400c15
  4004ec:	00400cd1 	.word	0x00400cd1
  4004f0:	00400e05 	.word	0x00400e05
  4004f4:	200009a9 	.word	0x200009a9
  4004f8:	20000994 	.word	0x20000994
  4004fc:	00407c84 	.word	0x00407c84
  400500:	00403409 	.word	0x00403409
  400504:	20000c18 	.word	0x20000c18
  400508:	00407c8c 	.word	0x00407c8c
  40050c:	00400ebd 	.word	0x00400ebd
  400510:	00407ca4 	.word	0x00407ca4
  400514:	200009a8 	.word	0x200009a8
  400518:	200009a7 	.word	0x200009a7
  40051c:	200009ac 	.word	0x200009ac
  400520:	004032f1 	.word	0x004032f1
  400524:	00407cbc 	.word	0x00407cbc
  400528:	004033b1 	.word	0x004033b1
  40052c:	00400295 	.word	0x00400295
  400530:	00407cdc 	.word	0x00407cdc
  400534:	00407d10 	.word	0x00407d10
						}
						if(*startOfData == '\r') break;
						entryCounter++;
  400538:	3601      	adds	r6, #1
						startOfData++;
  40053a:	1c63      	adds	r3, r4, #1
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
					entryCounter = 0;
					n = 0;
					while(entryCounter < 8)
  40053c:	2e08      	cmp	r6, #8
  40053e:	d1b1      	bne.n	4004a4 <parse_comands+0x1e0>
						if(*startOfData == '\r') break;
						entryCounter++;
						startOfData++;
					}
					entryCounter++;
					daqSettings.sequence[entryCounter] = 0;
  400540:	4f3b      	ldr	r7, [pc, #236]	; (400630 <parse_comands+0x36c>)
  400542:	443e      	add	r6, r7
  400544:	2300      	movs	r3, #0
  400546:	7273      	strb	r3, [r6, #9]
					charsPrinted = sprintf(printBuffer, "Sequence set to: ");
  400548:	ac03      	add	r4, sp, #12
  40054a:	4d3a      	ldr	r5, [pc, #232]	; (400634 <parse_comands+0x370>)
  40054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400550:	682b      	ldr	r3, [r5, #0]
  400552:	8023      	strh	r3, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  400554:	a803      	add	r0, sp, #12
  400556:	2111      	movs	r1, #17
  400558:	4b37      	ldr	r3, [pc, #220]	; (400638 <parse_comands+0x374>)
  40055a:	4798      	blx	r3
  40055c:	f107 0408 	add.w	r4, r7, #8
  400560:	f107 0810 	add.w	r8, r7, #16
					for(n = 0; n < 8; n++)
					{
						charsPrinted = sprintf(printBuffer, "%u ", daqSettings.sequence[n]);
  400564:	4f35      	ldr	r7, [pc, #212]	; (40063c <parse_comands+0x378>)
  400566:	4e36      	ldr	r6, [pc, #216]	; (400640 <parse_comands+0x37c>)
						udi_cdc_write_buf(printBuffer, charsPrinted);
  400568:	4d33      	ldr	r5, [pc, #204]	; (400638 <parse_comands+0x374>)
					daqSettings.sequence[entryCounter] = 0;
					charsPrinted = sprintf(printBuffer, "Sequence set to: ");
					udi_cdc_write_buf(printBuffer, charsPrinted);
					for(n = 0; n < 8; n++)
					{
						charsPrinted = sprintf(printBuffer, "%u ", daqSettings.sequence[n]);
  40056a:	a803      	add	r0, sp, #12
  40056c:	4639      	mov	r1, r7
  40056e:	7822      	ldrb	r2, [r4, #0]
  400570:	47b0      	blx	r6
  400572:	4601      	mov	r1, r0
						udi_cdc_write_buf(printBuffer, charsPrinted);
  400574:	a803      	add	r0, sp, #12
  400576:	47a8      	blx	r5
						if(daqSettings.sequence[n] == 0) break;	
  400578:	f814 3b01 	ldrb.w	r3, [r4], #1
  40057c:	b10b      	cbz	r3, 400582 <parse_comands+0x2be>
					}
					entryCounter++;
					daqSettings.sequence[entryCounter] = 0;
					charsPrinted = sprintf(printBuffer, "Sequence set to: ");
					udi_cdc_write_buf(printBuffer, charsPrinted);
					for(n = 0; n < 8; n++)
  40057e:	4544      	cmp	r4, r8
  400580:	d1f3      	bne.n	40056a <parse_comands+0x2a6>
					{
						charsPrinted = sprintf(printBuffer, "%u ", daqSettings.sequence[n]);
						udi_cdc_write_buf(printBuffer, charsPrinted);
						if(daqSettings.sequence[n] == 0) break;	
					}
					udi_cdc_putc('\n');
  400582:	200a      	movs	r0, #10
  400584:	4c2f      	ldr	r4, [pc, #188]	; (400644 <parse_comands+0x380>)
  400586:	47a0      	blx	r4
					udi_cdc_putc('\r');
  400588:	200d      	movs	r0, #13
  40058a:	47a0      	blx	r4
					
					break;
  40058c:	e049      	b.n	400622 <parse_comands+0x35e>
					
				case COMAND_SET_DAC_VALUE:
					n = 0;
					startOfData++;
					if(*startOfData == '0') {dacCh = 0;}
  40058e:	7843      	ldrb	r3, [r0, #1]
  400590:	2b30      	cmp	r3, #48	; 0x30
  400592:	d102      	bne.n	40059a <parse_comands+0x2d6>
  400594:	2300      	movs	r3, #0
  400596:	9301      	str	r3, [sp, #4]
  400598:	e004      	b.n	4005a4 <parse_comands+0x2e0>
					else if(*startOfData == '1') {dacCh = 1;}
  40059a:	2b31      	cmp	r3, #49	; 0x31
  40059c:	bf0c      	ite	eq
  40059e:	2301      	moveq	r3, #1
					else {dacCh = 0;}
  4005a0:	2300      	movne	r3, #0
  4005a2:	9301      	str	r3, [sp, #4]
					startOfData++;
					if(*startOfData != ',') 
  4005a4:	7883      	ldrb	r3, [r0, #2]
  4005a6:	2b2c      	cmp	r3, #44	; 0x2c
  4005a8:	d002      	beq.n	4005b0 <parse_comands+0x2ec>
					{
						print_formating_error();
  4005aa:	4b27      	ldr	r3, [pc, #156]	; (400648 <parse_comands+0x384>)
  4005ac:	4798      	blx	r3
						break;
  4005ae:	e038      	b.n	400622 <parse_comands+0x35e>
					}

					startOfData++;
  4005b0:	1cc5      	adds	r5, r0, #3
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  4005b2:	78c2      	ldrb	r2, [r0, #3]
  4005b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
  4005b8:	b2db      	uxtb	r3, r3
  4005ba:	2b09      	cmp	r3, #9
  4005bc:	d817      	bhi.n	4005ee <parse_comands+0x32a>
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  4005be:	4b23      	ldr	r3, [pc, #140]	; (40064c <parse_comands+0x388>)
  4005c0:	429d      	cmp	r5, r3
  4005c2:	d816      	bhi.n	4005f2 <parse_comands+0x32e>
  4005c4:	4628      	mov	r0, r5
						print_formating_error();
						break;
					}

					startOfData++;
					n = 0;
  4005c6:	2100      	movs	r1, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
  4005c8:	4e21      	ldr	r6, [pc, #132]	; (400650 <parse_comands+0x38c>)

					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  4005ca:	461f      	mov	r7, r3
  4005cc:	e003      	b.n	4005d6 <parse_comands+0x312>
  4005ce:	42bb      	cmp	r3, r7
  4005d0:	d810      	bhi.n	4005f4 <parse_comands+0x330>
  4005d2:	4618      	mov	r0, r3
						tempBuffer[n++] = *startOfData++;
  4005d4:	4621      	mov	r1, r4
  4005d6:	1c4c      	adds	r4, r1, #1
  4005d8:	b2e4      	uxtb	r4, r4
  4005da:	1c43      	adds	r3, r0, #1
  4005dc:	461d      	mov	r5, r3
  4005de:	5472      	strb	r2, [r6, r1]
						break;
					}

					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  4005e0:	7842      	ldrb	r2, [r0, #1]
  4005e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4005e6:	b2c9      	uxtb	r1, r1
  4005e8:	2909      	cmp	r1, #9
  4005ea:	d9f0      	bls.n	4005ce <parse_comands+0x30a>
  4005ec:	e002      	b.n	4005f4 <parse_comands+0x330>
						print_formating_error();
						break;
					}

					startOfData++;
					n = 0;
  4005ee:	2400      	movs	r4, #0
  4005f0:	e000      	b.n	4005f4 <parse_comands+0x330>
  4005f2:	2400      	movs	r4, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
					}
					tempBuffer[n] = 0;
  4005f4:	2200      	movs	r2, #0
  4005f6:	4b16      	ldr	r3, [pc, #88]	; (400650 <parse_comands+0x38c>)
  4005f8:	551a      	strb	r2, [r3, r4]
					if(*startOfData == '\r')
  4005fa:	782b      	ldrb	r3, [r5, #0]
  4005fc:	2b0d      	cmp	r3, #13
  4005fe:	d10e      	bne.n	40061e <parse_comands+0x35a>
					{
						a = atoi(tempBuffer);
  400600:	4813      	ldr	r0, [pc, #76]	; (400650 <parse_comands+0x38c>)
  400602:	4b14      	ldr	r3, [pc, #80]	; (400654 <parse_comands+0x390>)
  400604:	4798      	blx	r3
  400606:	9002      	str	r0, [sp, #8]
						charsPrinted = sprintf(printBuffer, "DAC channel %u set to %u mV\n\r", dacCh, a);
  400608:	9a01      	ldr	r2, [sp, #4]
  40060a:	9b02      	ldr	r3, [sp, #8]
  40060c:	a803      	add	r0, sp, #12
  40060e:	4912      	ldr	r1, [pc, #72]	; (400658 <parse_comands+0x394>)
  400610:	4c0b      	ldr	r4, [pc, #44]	; (400640 <parse_comands+0x37c>)
  400612:	47a0      	blx	r4
  400614:	4601      	mov	r1, r0
						udi_cdc_write_buf(printBuffer, charsPrinted);
  400616:	a803      	add	r0, sp, #12
  400618:	4b07      	ldr	r3, [pc, #28]	; (400638 <parse_comands+0x374>)
  40061a:	4798      	blx	r3
					else
					{
						print_formating_error();
						break;
					}
					break;
  40061c:	e001      	b.n	400622 <parse_comands+0x35e>
						udi_cdc_write_buf(printBuffer, charsPrinted);
						
					}
					else
					{
						print_formating_error();
  40061e:	4b0a      	ldr	r3, [pc, #40]	; (400648 <parse_comands+0x384>)
  400620:	4798      	blx	r3
					break;
					
					
			}
			
			insertPointer = 0;
  400622:	2200      	movs	r2, #0
  400624:	4b0d      	ldr	r3, [pc, #52]	; (40065c <parse_comands+0x398>)
  400626:	701a      	strb	r2, [r3, #0]
		}
	
	}
}
  400628:	b010      	add	sp, #64	; 0x40
  40062a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40062e:	bf00      	nop
  400630:	20000c18 	.word	0x20000c18
  400634:	00407d40 	.word	0x00407d40
  400638:	00400ebd 	.word	0x00400ebd
  40063c:	00407d54 	.word	0x00407d54
  400640:	004033b1 	.word	0x004033b1
  400644:	00400e05 	.word	0x00400e05
  400648:	00400295 	.word	0x00400295
  40064c:	200009a7 	.word	0x200009a7
  400650:	200009ac 	.word	0x200009ac
  400654:	004032f1 	.word	0x004032f1
  400658:	00407d58 	.word	0x00407d58
  40065c:	200009a9 	.word	0x200009a9

00400660 <get_current_DAQ_settings>:



daq_settings_t * get_current_DAQ_settings (void)
{
		daqSettings.sequence[0]= 1;
  400660:	4803      	ldr	r0, [pc, #12]	; (400670 <get_current_DAQ_settings+0x10>)
  400662:	2301      	movs	r3, #1
  400664:	7203      	strb	r3, [r0, #8]
		daqSettings.sequence[1]= 2;
  400666:	2302      	movs	r3, #2
  400668:	7243      	strb	r3, [r0, #9]
		daqSettings.sequence[2]= 3;
  40066a:	2303      	movs	r3, #3
  40066c:	7283      	strb	r3, [r0, #10]

	return (&daqSettings);
}
  40066e:	4770      	bx	lr
  400670:	20000c18 	.word	0x20000c18

00400674 <board_init>:
#include <conf_board.h>
#include "wdt.h"
#include "DAC.h"

void board_init(void)
{
  400674:	b570      	push	{r4, r5, r6, lr}
  400676:	b082      	sub	sp, #8
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	sysclk_init();
  400678:	4b0e      	ldr	r3, [pc, #56]	; (4006b4 <board_init+0x40>)
  40067a:	4798      	blx	r3
	wdt_disable(WDT);
  40067c:	480e      	ldr	r0, [pc, #56]	; (4006b8 <board_init+0x44>)
  40067e:	4b0f      	ldr	r3, [pc, #60]	; (4006bc <board_init+0x48>)
  400680:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
  400682:	200b      	movs	r0, #11
  400684:	4b0e      	ldr	r3, [pc, #56]	; (4006c0 <board_init+0x4c>)
  400686:	4798      	blx	r3
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
  400688:	4e0e      	ldr	r6, [pc, #56]	; (4006c4 <board_init+0x50>)
  40068a:	2400      	movs	r4, #0
  40068c:	9400      	str	r4, [sp, #0]
  40068e:	4630      	mov	r0, r6
  400690:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400694:	4622      	mov	r2, r4
  400696:	4623      	mov	r3, r4
  400698:	4d0b      	ldr	r5, [pc, #44]	; (4006c8 <board_init+0x54>)
  40069a:	47a8      	blx	r5
	pio_set_output(PIOA, PIO_PA18, LOW, DISABLE, DISABLE);
  40069c:	9400      	str	r4, [sp, #0]
  40069e:	4630      	mov	r0, r6
  4006a0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  4006a4:	4622      	mov	r2, r4
  4006a6:	4623      	mov	r3, r4
  4006a8:	47a8      	blx	r5
	dac_init();
  4006aa:	4b08      	ldr	r3, [pc, #32]	; (4006cc <board_init+0x58>)
  4006ac:	4798      	blx	r3
	
}
  4006ae:	b002      	add	sp, #8
  4006b0:	bd70      	pop	{r4, r5, r6, pc}
  4006b2:	bf00      	nop
  4006b4:	00400721 	.word	0x00400721
  4006b8:	400e1450 	.word	0x400e1450
  4006bc:	00403075 	.word	0x00403075
  4006c0:	004017f5 	.word	0x004017f5
  4006c4:	400e0e00 	.word	0x400e0e00
  4006c8:	00401631 	.word	0x00401631
  4006cc:	00400215 	.word	0x00400215

004006d0 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  4006d0:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4006d2:	2000      	movs	r0, #0
  4006d4:	213e      	movs	r1, #62	; 0x3e
  4006d6:	4b0a      	ldr	r3, [pc, #40]	; (400700 <sysclk_enable_usb+0x30>)
  4006d8:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4006da:	4c0a      	ldr	r4, [pc, #40]	; (400704 <sysclk_enable_usb+0x34>)
  4006dc:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4006de:	2800      	cmp	r0, #0
  4006e0:	d0fc      	beq.n	4006dc <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4006e2:	4b09      	ldr	r3, [pc, #36]	; (400708 <sysclk_enable_usb+0x38>)
  4006e4:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4006e6:	4a09      	ldr	r2, [pc, #36]	; (40070c <sysclk_enable_usb+0x3c>)
  4006e8:	4b09      	ldr	r3, [pc, #36]	; (400710 <sysclk_enable_usb+0x40>)
  4006ea:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  4006ec:	4c09      	ldr	r4, [pc, #36]	; (400714 <sysclk_enable_usb+0x44>)
  4006ee:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4006f0:	2800      	cmp	r0, #0
  4006f2:	d0fc      	beq.n	4006ee <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  4006f4:	2001      	movs	r0, #1
  4006f6:	4b08      	ldr	r3, [pc, #32]	; (400718 <sysclk_enable_usb+0x48>)
  4006f8:	4798      	blx	r3
		pmc_enable_udpck();
  4006fa:	4b08      	ldr	r3, [pc, #32]	; (40071c <sysclk_enable_usb+0x4c>)
  4006fc:	4798      	blx	r3
  4006fe:	bd10      	pop	{r4, pc}
  400700:	00401755 	.word	0x00401755
  400704:	004017a9 	.word	0x004017a9
  400708:	004017d9 	.word	0x004017d9
  40070c:	000f3f02 	.word	0x000f3f02
  400710:	400e0400 	.word	0x400e0400
  400714:	004017e5 	.word	0x004017e5
  400718:	004018a5 	.word	0x004018a5
  40071c:	004018b9 	.word	0x004018b9

00400720 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400720:	b510      	push	{r4, lr}
	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400722:	480d      	ldr	r0, [pc, #52]	; (400758 <sysclk_init+0x38>)
  400724:	4b0d      	ldr	r3, [pc, #52]	; (40075c <sysclk_init+0x3c>)
  400726:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400728:	2000      	movs	r0, #0
  40072a:	213e      	movs	r1, #62	; 0x3e
  40072c:	4b0c      	ldr	r3, [pc, #48]	; (400760 <sysclk_init+0x40>)
  40072e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400730:	4c0c      	ldr	r4, [pc, #48]	; (400764 <sysclk_init+0x44>)
  400732:	47a0      	blx	r4
  400734:	2800      	cmp	r0, #0
  400736:	d0fc      	beq.n	400732 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400738:	4b0b      	ldr	r3, [pc, #44]	; (400768 <sysclk_init+0x48>)
  40073a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40073c:	4a0b      	ldr	r2, [pc, #44]	; (40076c <sysclk_init+0x4c>)
  40073e:	4b0c      	ldr	r3, [pc, #48]	; (400770 <sysclk_init+0x50>)
  400740:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400742:	4c0c      	ldr	r4, [pc, #48]	; (400774 <sysclk_init+0x54>)
  400744:	47a0      	blx	r4
  400746:	2800      	cmp	r0, #0
  400748:	d0fc      	beq.n	400744 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40074a:	2010      	movs	r0, #16
  40074c:	4b0a      	ldr	r3, [pc, #40]	; (400778 <sysclk_init+0x58>)
  40074e:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400750:	4b0a      	ldr	r3, [pc, #40]	; (40077c <sysclk_init+0x5c>)
  400752:	4798      	blx	r3
  400754:	bd10      	pop	{r4, pc}
  400756:	bf00      	nop
  400758:	03d09000 	.word	0x03d09000
  40075c:	00403245 	.word	0x00403245
  400760:	00401755 	.word	0x00401755
  400764:	004017a9 	.word	0x004017a9
  400768:	004017b9 	.word	0x004017b9
  40076c:	201f3f03 	.word	0x201f3f03
  400770:	400e0400 	.word	0x400e0400
  400774:	004017c9 	.word	0x004017c9
  400778:	004016f1 	.word	0x004016f1
  40077c:	00403131 	.word	0x00403131

00400780 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400780:	490e      	ldr	r1, [pc, #56]	; (4007bc <udi_cdc_comm_enable+0x3c>)
  400782:	2300      	movs	r3, #0
  400784:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  400786:	4a0e      	ldr	r2, [pc, #56]	; (4007c0 <udi_cdc_comm_enable+0x40>)
  400788:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  40078a:	4a0e      	ldr	r2, [pc, #56]	; (4007c4 <udi_cdc_comm_enable+0x44>)
  40078c:	20a1      	movs	r0, #161	; 0xa1
  40078e:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400790:	2020      	movs	r0, #32
  400792:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400794:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400796:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400798:	2002      	movs	r0, #2
  40079a:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  40079c:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  40079e:	4a0a      	ldr	r2, [pc, #40]	; (4007c8 <udi_cdc_comm_enable+0x48>)
  4007a0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  4007a4:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  4007a6:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  4007a8:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  4007aa:	2308      	movs	r3, #8
  4007ac:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  4007ae:	780b      	ldrb	r3, [r1, #0]
  4007b0:	3301      	adds	r3, #1
  4007b2:	b2db      	uxtb	r3, r3
  4007b4:	700b      	strb	r3, [r1, #0]
	return true;
}
  4007b6:	2001      	movs	r0, #1
  4007b8:	4770      	bx	lr
  4007ba:	bf00      	nop
  4007bc:	20000a50 	.word	0x20000a50
  4007c0:	20000afc 	.word	0x20000afc
  4007c4:	20000a68 	.word	0x20000a68
  4007c8:	200009b8 	.word	0x200009b8

004007cc <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  4007cc:	4b02      	ldr	r3, [pc, #8]	; (4007d8 <udi_cdc_comm_disable+0xc>)
  4007ce:	781a      	ldrb	r2, [r3, #0]
  4007d0:	3a01      	subs	r2, #1
  4007d2:	b2d2      	uxtb	r2, r2
  4007d4:	701a      	strb	r2, [r3, #0]
  4007d6:	4770      	bx	lr
  4007d8:	20000a50 	.word	0x20000a50

004007dc <udi_cdc_data_disable>:
{
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  4007dc:	4b04      	ldr	r3, [pc, #16]	; (4007f0 <udi_cdc_data_disable+0x14>)
  4007de:	781a      	ldrb	r2, [r3, #0]
  4007e0:	3a01      	subs	r2, #1
  4007e2:	b2d2      	uxtb	r2, r2
  4007e4:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  4007e6:	781b      	ldrb	r3, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  4007e8:	2200      	movs	r2, #0
  4007ea:	4b02      	ldr	r3, [pc, #8]	; (4007f4 <udi_cdc_data_disable+0x18>)
  4007ec:	701a      	strb	r2, [r3, #0]
  4007ee:	4770      	bx	lr
  4007f0:	200009c0 	.word	0x200009c0
  4007f4:	20000a5c 	.word	0x20000a5c

004007f8 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  4007f8:	2000      	movs	r0, #0
  4007fa:	4770      	bx	lr

004007fc <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  4007fc:	2000      	movs	r0, #0
  4007fe:	4770      	bx	lr

00400800 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
  400800:	4b1d      	ldr	r3, [pc, #116]	; (400878 <udi_cdc_comm_setup+0x78>)
  400802:	781b      	ldrb	r3, [r3, #0]
  400804:	f013 0f80 	tst.w	r3, #128	; 0x80
  400808:	d012      	beq.n	400830 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40080a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  40080e:	2b20      	cmp	r3, #32
  400810:	d128      	bne.n	400864 <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  400812:	4b19      	ldr	r3, [pc, #100]	; (400878 <udi_cdc_comm_setup+0x78>)
  400814:	785b      	ldrb	r3, [r3, #1]
  400816:	2b21      	cmp	r3, #33	; 0x21
  400818:	d126      	bne.n	400868 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40081a:	4b17      	ldr	r3, [pc, #92]	; (400878 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  40081c:	88db      	ldrh	r3, [r3, #6]
  40081e:	2b07      	cmp	r3, #7
  400820:	d124      	bne.n	40086c <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  400822:	4b15      	ldr	r3, [pc, #84]	; (400878 <udi_cdc_comm_setup+0x78>)
  400824:	4a15      	ldr	r2, [pc, #84]	; (40087c <udi_cdc_comm_setup+0x7c>)
  400826:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  400828:	2207      	movs	r2, #7
  40082a:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  40082c:	2001      	movs	r0, #1
  40082e:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400830:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400834:	2b20      	cmp	r3, #32
  400836:	d11b      	bne.n	400870 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  400838:	4b0f      	ldr	r3, [pc, #60]	; (400878 <udi_cdc_comm_setup+0x78>)
  40083a:	7858      	ldrb	r0, [r3, #1]
  40083c:	2820      	cmp	r0, #32
  40083e:	d004      	beq.n	40084a <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400840:	2822      	cmp	r0, #34	; 0x22
  400842:	bf14      	ite	ne
  400844:	2000      	movne	r0, #0
  400846:	2001      	moveq	r0, #1
  400848:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  40084a:	4b0b      	ldr	r3, [pc, #44]	; (400878 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  40084c:	88db      	ldrh	r3, [r3, #6]
  40084e:	2b07      	cmp	r3, #7
  400850:	d110      	bne.n	400874 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
  400852:	4b09      	ldr	r3, [pc, #36]	; (400878 <udi_cdc_comm_setup+0x78>)
  400854:	4a0a      	ldr	r2, [pc, #40]	; (400880 <udi_cdc_comm_setup+0x80>)
  400856:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  400858:	4a08      	ldr	r2, [pc, #32]	; (40087c <udi_cdc_comm_setup+0x7c>)
  40085a:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  40085c:	2207      	movs	r2, #7
  40085e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  400860:	2001      	movs	r0, #1
  400862:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400864:	2000      	movs	r0, #0
  400866:	4770      	bx	lr
  400868:	2000      	movs	r0, #0
  40086a:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  40086c:	2000      	movs	r0, #0
  40086e:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400870:	2000      	movs	r0, #0
  400872:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  400874:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
  400876:	4770      	bx	lr
  400878:	20000c3c 	.word	0x20000c3c
  40087c:	200009b8 	.word	0x200009b8
  400880:	00400885 	.word	0x00400885

00400884 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  400884:	4770      	bx	lr
  400886:	bf00      	nop

00400888 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
  400888:	b530      	push	{r4, r5, lr}
  40088a:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  40088c:	4b42      	ldr	r3, [pc, #264]	; (400998 <udi_cdc_tx_send+0x110>)
  40088e:	781b      	ldrb	r3, [r3, #0]
  400890:	f013 0fff 	tst.w	r3, #255	; 0xff
  400894:	d17e      	bne.n	400994 <udi_cdc_tx_send+0x10c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  400896:	4b41      	ldr	r3, [pc, #260]	; (40099c <udi_cdc_tx_send+0x114>)
  400898:	4798      	blx	r3
  40089a:	b130      	cbz	r0, 4008aa <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  40089c:	4b40      	ldr	r3, [pc, #256]	; (4009a0 <udi_cdc_tx_send+0x118>)
  40089e:	881c      	ldrh	r4, [r3, #0]
  4008a0:	4b40      	ldr	r3, [pc, #256]	; (4009a4 <udi_cdc_tx_send+0x11c>)
  4008a2:	4798      	blx	r3
  4008a4:	4284      	cmp	r4, r0
  4008a6:	d106      	bne.n	4008b6 <udi_cdc_tx_send+0x2e>
  4008a8:	e074      	b.n	400994 <udi_cdc_tx_send+0x10c>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  4008aa:	4b3d      	ldr	r3, [pc, #244]	; (4009a0 <udi_cdc_tx_send+0x118>)
  4008ac:	881c      	ldrh	r4, [r3, #0]
  4008ae:	4b3e      	ldr	r3, [pc, #248]	; (4009a8 <udi_cdc_tx_send+0x120>)
  4008b0:	4798      	blx	r3
  4008b2:	4284      	cmp	r4, r0
  4008b4:	d06e      	beq.n	400994 <udi_cdc_tx_send+0x10c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4008b6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  4008ba:	f1d3 0501 	rsbs	r5, r3, #1
  4008be:	bf38      	it	cc
  4008c0:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4008c2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4008c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008c8:	2200      	movs	r2, #0
  4008ca:	4b38      	ldr	r3, [pc, #224]	; (4009ac <udi_cdc_tx_send+0x124>)
  4008cc:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  4008ce:	4b38      	ldr	r3, [pc, #224]	; (4009b0 <udi_cdc_tx_send+0x128>)
  4008d0:	781c      	ldrb	r4, [r3, #0]
  4008d2:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  4008d4:	4b37      	ldr	r3, [pc, #220]	; (4009b4 <udi_cdc_tx_send+0x12c>)
  4008d6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  4008da:	b9db      	cbnz	r3, 400914 <udi_cdc_tx_send+0x8c>
		sof_zlp_counter++;
  4008dc:	4b36      	ldr	r3, [pc, #216]	; (4009b8 <udi_cdc_tx_send+0x130>)
  4008de:	881a      	ldrh	r2, [r3, #0]
  4008e0:	3201      	adds	r2, #1
  4008e2:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  4008e4:	4b2d      	ldr	r3, [pc, #180]	; (40099c <udi_cdc_tx_send+0x114>)
  4008e6:	4798      	blx	r3
  4008e8:	b918      	cbnz	r0, 4008f2 <udi_cdc_tx_send+0x6a>
  4008ea:	4b33      	ldr	r3, [pc, #204]	; (4009b8 <udi_cdc_tx_send+0x130>)
  4008ec:	881b      	ldrh	r3, [r3, #0]
  4008ee:	2b63      	cmp	r3, #99	; 0x63
  4008f0:	d907      	bls.n	400902 <udi_cdc_tx_send+0x7a>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  4008f2:	4b2a      	ldr	r3, [pc, #168]	; (40099c <udi_cdc_tx_send+0x114>)
  4008f4:	4798      	blx	r3
  4008f6:	b168      	cbz	r0, 400914 <udi_cdc_tx_send+0x8c>
  4008f8:	4b2f      	ldr	r3, [pc, #188]	; (4009b8 <udi_cdc_tx_send+0x130>)
  4008fa:	881b      	ldrh	r3, [r3, #0]
  4008fc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400900:	d208      	bcs.n	400914 <udi_cdc_tx_send+0x8c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400902:	2d00      	cmp	r5, #0
  400904:	d046      	beq.n	400994 <udi_cdc_tx_send+0x10c>
		cpu_irq_enable();
  400906:	2201      	movs	r2, #1
  400908:	4b28      	ldr	r3, [pc, #160]	; (4009ac <udi_cdc_tx_send+0x124>)
  40090a:	701a      	strb	r2, [r3, #0]
  40090c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400910:	b662      	cpsie	i
  400912:	e03f      	b.n	400994 <udi_cdc_tx_send+0x10c>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  400914:	2200      	movs	r2, #0
  400916:	4b28      	ldr	r3, [pc, #160]	; (4009b8 <udi_cdc_tx_send+0x130>)
  400918:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  40091a:	4b28      	ldr	r3, [pc, #160]	; (4009bc <udi_cdc_tx_send+0x134>)
  40091c:	781b      	ldrb	r3, [r3, #0]
  40091e:	f013 0fff 	tst.w	r3, #255	; 0xff
  400922:	d106      	bne.n	400932 <udi_cdc_tx_send+0xaa>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400924:	4294      	cmp	r4, r2
  400926:	bf14      	ite	ne
  400928:	2200      	movne	r2, #0
  40092a:	2201      	moveq	r2, #1
  40092c:	4b20      	ldr	r3, [pc, #128]	; (4009b0 <udi_cdc_tx_send+0x128>)
  40092e:	701a      	strb	r2, [r3, #0]
  400930:	e003      	b.n	40093a <udi_cdc_tx_send+0xb2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400932:	f1d4 0401 	rsbs	r4, r4, #1
  400936:	bf38      	it	cc
  400938:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  40093a:	2201      	movs	r2, #1
  40093c:	4b16      	ldr	r3, [pc, #88]	; (400998 <udi_cdc_tx_send+0x110>)
  40093e:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400940:	b125      	cbz	r5, 40094c <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
  400942:	4b1a      	ldr	r3, [pc, #104]	; (4009ac <udi_cdc_tx_send+0x124>)
  400944:	701a      	strb	r2, [r3, #0]
  400946:	f3bf 8f5f 	dmb	sy
  40094a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  40094c:	4625      	mov	r5, r4
  40094e:	4b19      	ldr	r3, [pc, #100]	; (4009b4 <udi_cdc_tx_send+0x12c>)
  400950:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
  400954:	3c40      	subs	r4, #64	; 0x40
  400956:	bf18      	it	ne
  400958:	2401      	movne	r4, #1
	if (b_short_packet) {
  40095a:	b164      	cbz	r4, 400976 <udi_cdc_tx_send+0xee>
		if (udd_is_high_speed()) {
  40095c:	4b0f      	ldr	r3, [pc, #60]	; (40099c <udi_cdc_tx_send+0x114>)
  40095e:	4798      	blx	r3
  400960:	b120      	cbz	r0, 40096c <udi_cdc_tx_send+0xe4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400962:	4b10      	ldr	r3, [pc, #64]	; (4009a4 <udi_cdc_tx_send+0x11c>)
  400964:	4798      	blx	r3
  400966:	4b0e      	ldr	r3, [pc, #56]	; (4009a0 <udi_cdc_tx_send+0x118>)
  400968:	8018      	strh	r0, [r3, #0]
  40096a:	e007      	b.n	40097c <udi_cdc_tx_send+0xf4>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  40096c:	4b0e      	ldr	r3, [pc, #56]	; (4009a8 <udi_cdc_tx_send+0x120>)
  40096e:	4798      	blx	r3
  400970:	4b0b      	ldr	r3, [pc, #44]	; (4009a0 <udi_cdc_tx_send+0x118>)
  400972:	8018      	strh	r0, [r3, #0]
  400974:	e002      	b.n	40097c <udi_cdc_tx_send+0xf4>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400976:	2200      	movs	r2, #0
  400978:	4b09      	ldr	r3, [pc, #36]	; (4009a0 <udi_cdc_tx_send+0x118>)
  40097a:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  40097c:	4b0d      	ldr	r3, [pc, #52]	; (4009b4 <udi_cdc_tx_send+0x12c>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  40097e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  400982:	4a0f      	ldr	r2, [pc, #60]	; (4009c0 <udi_cdc_tx_send+0x138>)
  400984:	9200      	str	r2, [sp, #0]
  400986:	2081      	movs	r0, #129	; 0x81
  400988:	4621      	mov	r1, r4
  40098a:	4a0e      	ldr	r2, [pc, #56]	; (4009c4 <udi_cdc_tx_send+0x13c>)
  40098c:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  400990:	4c0d      	ldr	r4, [pc, #52]	; (4009c8 <udi_cdc_tx_send+0x140>)
  400992:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  400994:	b003      	add	sp, #12
  400996:	bd30      	pop	{r4, r5, pc}
  400998:	20000a64 	.word	0x20000a64
  40099c:	00402a21 	.word	0x00402a21
  4009a0:	20000a58 	.word	0x20000a58
  4009a4:	00402a89 	.word	0x00402a89
  4009a8:	00402a79 	.word	0x00402a79
  4009ac:	200000b0 	.word	0x200000b0
  4009b0:	200009c4 	.word	0x200009c4
  4009b4:	200009c8 	.word	0x200009c8
  4009b8:	20000a5e 	.word	0x20000a5e
  4009bc:	20000af8 	.word	0x20000af8
  4009c0:	004009cd 	.word	0x004009cd
  4009c4:	200009cc 	.word	0x200009cc
  4009c8:	00402dd9 	.word	0x00402dd9

004009cc <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  4009cc:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  4009ce:	b978      	cbnz	r0, 4009f0 <udi_cdc_data_sent+0x24>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  4009d0:	4b08      	ldr	r3, [pc, #32]	; (4009f4 <udi_cdc_data_sent+0x28>)
  4009d2:	781b      	ldrb	r3, [r3, #0]
  4009d4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4009d8:	bf14      	ite	ne
  4009da:	2200      	movne	r2, #0
  4009dc:	2201      	moveq	r2, #1
  4009de:	4b06      	ldr	r3, [pc, #24]	; (4009f8 <udi_cdc_data_sent+0x2c>)
  4009e0:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  4009e4:	4b05      	ldr	r3, [pc, #20]	; (4009fc <udi_cdc_data_sent+0x30>)
  4009e6:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  4009e8:	4b05      	ldr	r3, [pc, #20]	; (400a00 <udi_cdc_data_sent+0x34>)
  4009ea:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  4009ec:	4b05      	ldr	r3, [pc, #20]	; (400a04 <udi_cdc_data_sent+0x38>)
  4009ee:	4798      	blx	r3
  4009f0:	bd08      	pop	{r3, pc}
  4009f2:	bf00      	nop
  4009f4:	200009c4 	.word	0x200009c4
  4009f8:	200009c8 	.word	0x200009c8
  4009fc:	20000af8 	.word	0x20000af8
  400a00:	20000a64 	.word	0x20000a64
  400a04:	00400889 	.word	0x00400889

00400a08 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
  400a08:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  400a0a:	2000      	movs	r0, #0
  400a0c:	4b01      	ldr	r3, [pc, #4]	; (400a14 <udi_cdc_data_sof_notify+0xc>)
  400a0e:	4798      	blx	r3
  400a10:	bd08      	pop	{r3, pc}
  400a12:	bf00      	nop
  400a14:	00400889 	.word	0x00400889

00400a18 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a18:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400a1c:	b672      	cpsid	i
  400a1e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400a22:	2100      	movs	r1, #0
  400a24:	4a09      	ldr	r2, [pc, #36]	; (400a4c <udi_cdc_multi_get_nb_received_data+0x34>)
  400a26:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400a28:	4a09      	ldr	r2, [pc, #36]	; (400a50 <udi_cdc_multi_get_nb_received_data+0x38>)
  400a2a:	8810      	ldrh	r0, [r2, #0]
  400a2c:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400a2e:	4a09      	ldr	r2, [pc, #36]	; (400a54 <udi_cdc_multi_get_nb_received_data+0x3c>)
  400a30:	7811      	ldrb	r1, [r2, #0]
  400a32:	4a09      	ldr	r2, [pc, #36]	; (400a58 <udi_cdc_multi_get_nb_received_data+0x40>)
  400a34:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  400a38:	1a10      	subs	r0, r2, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400a3a:	b92b      	cbnz	r3, 400a48 <udi_cdc_multi_get_nb_received_data+0x30>
		cpu_irq_enable();
  400a3c:	2201      	movs	r2, #1
  400a3e:	4b03      	ldr	r3, [pc, #12]	; (400a4c <udi_cdc_multi_get_nb_received_data+0x34>)
  400a40:	701a      	strb	r2, [r3, #0]
  400a42:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400a46:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400a48:	4770      	bx	lr
  400a4a:	bf00      	nop
  400a4c:	200000b0 	.word	0x200000b0
  400a50:	20000a54 	.word	0x20000a54
  400a54:	20000a60 	.word	0x20000a60
  400a58:	20000a4c 	.word	0x20000a4c

00400a5c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400a5c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400a5e:	4b03      	ldr	r3, [pc, #12]	; (400a6c <udi_cdc_multi_is_rx_ready+0x10>)
  400a60:	4798      	blx	r3
}
  400a62:	3000      	adds	r0, #0
  400a64:	bf18      	it	ne
  400a66:	2001      	movne	r0, #1
  400a68:	bd08      	pop	{r3, pc}
  400a6a:	bf00      	nop
  400a6c:	00400a19 	.word	0x00400a19

00400a70 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400a70:	b510      	push	{r4, lr}
  400a72:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a74:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400a78:	f1d3 0301 	rsbs	r3, r3, #1
  400a7c:	bf38      	it	cc
  400a7e:	2300      	movcc	r3, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400a80:	b672      	cpsid	i
  400a82:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400a86:	2100      	movs	r1, #0
  400a88:	4a1e      	ldr	r2, [pc, #120]	; (400b04 <udi_cdc_rx_start+0x94>)
  400a8a:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400a8c:	4a1e      	ldr	r2, [pc, #120]	; (400b08 <udi_cdc_rx_start+0x98>)
  400a8e:	7814      	ldrb	r4, [r2, #0]
  400a90:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
  400a92:	4a1e      	ldr	r2, [pc, #120]	; (400b0c <udi_cdc_rx_start+0x9c>)
  400a94:	7812      	ldrb	r2, [r2, #0]
  400a96:	f012 0fff 	tst.w	r2, #255	; 0xff
  400a9a:	d107      	bne.n	400aac <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400a9c:	4a1c      	ldr	r2, [pc, #112]	; (400b10 <udi_cdc_rx_start+0xa0>)
  400a9e:	8812      	ldrh	r2, [r2, #0]
  400aa0:	b292      	uxth	r2, r2
  400aa2:	491c      	ldr	r1, [pc, #112]	; (400b14 <udi_cdc_rx_start+0xa4>)
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  400aa4:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
  400aa8:	4291      	cmp	r1, r2
  400aaa:	d908      	bls.n	400abe <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400aac:	b33b      	cbz	r3, 400afe <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400aae:	2201      	movs	r2, #1
  400ab0:	4b14      	ldr	r3, [pc, #80]	; (400b04 <udi_cdc_rx_start+0x94>)
  400ab2:	701a      	strb	r2, [r3, #0]
  400ab4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400ab8:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400aba:	2000      	movs	r0, #0
  400abc:	e020      	b.n	400b00 <udi_cdc_rx_start+0x90>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  400abe:	2100      	movs	r1, #0
  400ac0:	4a13      	ldr	r2, [pc, #76]	; (400b10 <udi_cdc_rx_start+0xa0>)
  400ac2:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400ac4:	428c      	cmp	r4, r1
  400ac6:	bf14      	ite	ne
  400ac8:	2100      	movne	r1, #0
  400aca:	2101      	moveq	r1, #1
  400acc:	4a0e      	ldr	r2, [pc, #56]	; (400b08 <udi_cdc_rx_start+0x98>)
  400ace:	7011      	strb	r1, [r2, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  400ad0:	2101      	movs	r1, #1
  400ad2:	4a0e      	ldr	r2, [pc, #56]	; (400b0c <udi_cdc_rx_start+0x9c>)
  400ad4:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400ad6:	b123      	cbz	r3, 400ae2 <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  400ad8:	4b0a      	ldr	r3, [pc, #40]	; (400b04 <udi_cdc_rx_start+0x94>)
  400ada:	7019      	strb	r1, [r3, #0]
  400adc:	f3bf 8f5f 	dmb	sy
  400ae0:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
  400ae2:	2000      	movs	r0, #0
  400ae4:	4b0c      	ldr	r3, [pc, #48]	; (400b18 <udi_cdc_rx_start+0xa8>)
  400ae6:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  400ae8:	4b0c      	ldr	r3, [pc, #48]	; (400b1c <udi_cdc_rx_start+0xac>)
  400aea:	9300      	str	r3, [sp, #0]
  400aec:	2002      	movs	r0, #2
  400aee:	2101      	movs	r1, #1
  400af0:	4a0b      	ldr	r2, [pc, #44]	; (400b20 <udi_cdc_rx_start+0xb0>)
  400af2:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400af6:	2340      	movs	r3, #64	; 0x40
  400af8:	4c0a      	ldr	r4, [pc, #40]	; (400b24 <udi_cdc_rx_start+0xb4>)
  400afa:	47a0      	blx	r4
  400afc:	e000      	b.n	400b00 <udi_cdc_rx_start+0x90>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400afe:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  400b00:	b002      	add	sp, #8
  400b02:	bd10      	pop	{r4, pc}
  400b04:	200000b0 	.word	0x200000b0
  400b08:	20000a60 	.word	0x20000a60
  400b0c:	20000af4 	.word	0x20000af4
  400b10:	20000a54 	.word	0x20000a54
  400b14:	20000a4c 	.word	0x20000a4c
  400b18:	00400a5d 	.word	0x00400a5d
  400b1c:	00400bb9 	.word	0x00400bb9
  400b20:	20000a74 	.word	0x20000a74
  400b24:	00402dd9 	.word	0x00402dd9

00400b28 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
  400b28:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
  400b2a:	2400      	movs	r4, #0
  400b2c:	4b15      	ldr	r3, [pc, #84]	; (400b84 <udi_cdc_data_enable+0x5c>)
  400b2e:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  400b30:	4b15      	ldr	r3, [pc, #84]	; (400b88 <udi_cdc_data_enable+0x60>)
  400b32:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400b34:	4b15      	ldr	r3, [pc, #84]	; (400b8c <udi_cdc_data_enable+0x64>)
  400b36:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400b38:	4b15      	ldr	r3, [pc, #84]	; (400b90 <udi_cdc_data_enable+0x68>)
  400b3a:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400b3c:	4b15      	ldr	r3, [pc, #84]	; (400b94 <udi_cdc_data_enable+0x6c>)
  400b3e:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400b40:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400b42:	4b15      	ldr	r3, [pc, #84]	; (400b98 <udi_cdc_data_enable+0x70>)
  400b44:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  400b46:	4620      	mov	r0, r4
  400b48:	4b14      	ldr	r3, [pc, #80]	; (400b9c <udi_cdc_data_enable+0x74>)
  400b4a:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400b4c:	4b14      	ldr	r3, [pc, #80]	; (400ba0 <udi_cdc_data_enable+0x78>)
  400b4e:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400b50:	4b14      	ldr	r3, [pc, #80]	; (400ba4 <udi_cdc_data_enable+0x7c>)
  400b52:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400b54:	4b14      	ldr	r3, [pc, #80]	; (400ba8 <udi_cdc_data_enable+0x80>)
  400b56:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
  400b58:	4b14      	ldr	r3, [pc, #80]	; (400bac <udi_cdc_data_enable+0x84>)
  400b5a:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400b5c:	4620      	mov	r0, r4
  400b5e:	4b14      	ldr	r3, [pc, #80]	; (400bb0 <udi_cdc_data_enable+0x88>)
  400b60:	4798      	blx	r3
  400b62:	4602      	mov	r2, r0
  400b64:	b158      	cbz	r0, 400b7e <udi_cdc_data_enable+0x56>
		return false;
	}
	udi_cdc_nb_data_enabled++;
  400b66:	4b07      	ldr	r3, [pc, #28]	; (400b84 <udi_cdc_data_enable+0x5c>)
  400b68:	7819      	ldrb	r1, [r3, #0]
  400b6a:	3101      	adds	r1, #1
  400b6c:	b2c9      	uxtb	r1, r1
  400b6e:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  400b70:	781b      	ldrb	r3, [r3, #0]
  400b72:	b2db      	uxtb	r3, r3
  400b74:	2b01      	cmp	r3, #1
  400b76:	d102      	bne.n	400b7e <udi_cdc_data_enable+0x56>
		udi_cdc_data_running = true;
  400b78:	2101      	movs	r1, #1
  400b7a:	4b0e      	ldr	r3, [pc, #56]	; (400bb4 <udi_cdc_data_enable+0x8c>)
  400b7c:	7019      	strb	r1, [r3, #0]
	}
	return true;
}
  400b7e:	4610      	mov	r0, r2
  400b80:	bd10      	pop	{r4, pc}
  400b82:	bf00      	nop
  400b84:	200009c0 	.word	0x200009c0
  400b88:	20000a64 	.word	0x20000a64
  400b8c:	20000af8 	.word	0x20000af8
  400b90:	200009c4 	.word	0x200009c4
  400b94:	200009c8 	.word	0x200009c8
  400b98:	20000a58 	.word	0x20000a58
  400b9c:	00400889 	.word	0x00400889
  400ba0:	20000af4 	.word	0x20000af4
  400ba4:	20000a60 	.word	0x20000a60
  400ba8:	20000a4c 	.word	0x20000a4c
  400bac:	20000a54 	.word	0x20000a54
  400bb0:	00400a71 	.word	0x00400a71
  400bb4:	20000a5c 	.word	0x20000a5c

00400bb8 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400bb8:	b510      	push	{r4, lr}
  400bba:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400bbc:	b9d0      	cbnz	r0, 400bf4 <udi_cdc_data_received+0x3c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400bbe:	4b0e      	ldr	r3, [pc, #56]	; (400bf8 <udi_cdc_data_received+0x40>)
  400bc0:	781b      	ldrb	r3, [r3, #0]
  400bc2:	f013 0fff 	tst.w	r3, #255	; 0xff
  400bc6:	bf14      	ite	ne
  400bc8:	2300      	movne	r3, #0
  400bca:	2301      	moveq	r3, #1
	if (!n) {
  400bcc:	b951      	cbnz	r1, 400be4 <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
  400bce:	490b      	ldr	r1, [pc, #44]	; (400bfc <udi_cdc_data_received+0x44>)
  400bd0:	9100      	str	r1, [sp, #0]
  400bd2:	4610      	mov	r0, r2
  400bd4:	2101      	movs	r1, #1
  400bd6:	4a0a      	ldr	r2, [pc, #40]	; (400c00 <udi_cdc_data_received+0x48>)
  400bd8:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  400bdc:	2340      	movs	r3, #64	; 0x40
  400bde:	4c09      	ldr	r4, [pc, #36]	; (400c04 <udi_cdc_data_received+0x4c>)
  400be0:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  400be2:	e007      	b.n	400bf4 <udi_cdc_data_received+0x3c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400be4:	4a08      	ldr	r2, [pc, #32]	; (400c08 <udi_cdc_data_received+0x50>)
  400be6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  400bea:	2000      	movs	r0, #0
  400bec:	4b07      	ldr	r3, [pc, #28]	; (400c0c <udi_cdc_data_received+0x54>)
  400bee:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  400bf0:	4b07      	ldr	r3, [pc, #28]	; (400c10 <udi_cdc_data_received+0x58>)
  400bf2:	4798      	blx	r3
}
  400bf4:	b002      	add	sp, #8
  400bf6:	bd10      	pop	{r4, pc}
  400bf8:	20000a60 	.word	0x20000a60
  400bfc:	00400bb9 	.word	0x00400bb9
  400c00:	20000a74 	.word	0x20000a74
  400c04:	00402dd9 	.word	0x00402dd9
  400c08:	20000a4c 	.word	0x20000a4c
  400c0c:	20000af4 	.word	0x20000af4
  400c10:	00400a71 	.word	0x00400a71

00400c14 <udi_cdc_is_rx_ready>:
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
  400c14:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
  400c16:	2000      	movs	r0, #0
  400c18:	4b01      	ldr	r3, [pc, #4]	; (400c20 <udi_cdc_is_rx_ready+0xc>)
  400c1a:	4798      	blx	r3
}
  400c1c:	bd08      	pop	{r3, pc}
  400c1e:	bf00      	nop
  400c20:	00400a5d 	.word	0x00400a5d

00400c24 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  400c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400c28:	4b21      	ldr	r3, [pc, #132]	; (400cb0 <udi_cdc_multi_getc+0x8c>)
  400c2a:	f893 9006 	ldrb.w	r9, [r3, #6]
  400c2e:	f1b9 0f09 	cmp.w	r9, #9
  400c32:	bf14      	ite	ne
  400c34:	f04f 0900 	movne.w	r9, #0
  400c38:	f04f 0901 	moveq.w	r9, #1
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
  400c3c:	2000      	movs	r0, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400c3e:	4c1d      	ldr	r4, [pc, #116]	; (400cb4 <udi_cdc_multi_getc+0x90>)
  400c40:	4680      	mov	r8, r0
  400c42:	4607      	mov	r7, r0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400c44:	4d1c      	ldr	r5, [pc, #112]	; (400cb8 <udi_cdc_multi_getc+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  400c46:	4e1d      	ldr	r6, [pc, #116]	; (400cbc <udi_cdc_multi_getc+0x98>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400c48:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400c4c:	b672      	cpsid	i
  400c4e:	f3bf 8f5f 	dmb	sy
  400c52:	7027      	strb	r7, [r4, #0]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400c54:	882b      	ldrh	r3, [r5, #0]
  400c56:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400c58:	7832      	ldrb	r2, [r6, #0]
  400c5a:	b2d2      	uxtb	r2, r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400c5c:	b921      	cbnz	r1, 400c68 <udi_cdc_multi_getc+0x44>
		cpu_irq_enable();
  400c5e:	2101      	movs	r1, #1
  400c60:	7021      	strb	r1, [r4, #0]
  400c62:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400c66:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
  400c68:	4915      	ldr	r1, [pc, #84]	; (400cc0 <udi_cdc_multi_getc+0x9c>)
  400c6a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  400c6e:	4299      	cmp	r1, r3
  400c70:	d807      	bhi.n	400c82 <udi_cdc_multi_getc+0x5e>
		if (!udi_cdc_data_running) {
  400c72:	4b14      	ldr	r3, [pc, #80]	; (400cc4 <udi_cdc_multi_getc+0xa0>)
  400c74:	781b      	ldrb	r3, [r3, #0]
  400c76:	f013 0fff 	tst.w	r3, #255	; 0xff
  400c7a:	d1e5      	bne.n	400c48 <udi_cdc_multi_getc+0x24>
			return 0;
  400c7c:	2000      	movs	r0, #0
  400c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400c82:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  400c86:	4910      	ldr	r1, [pc, #64]	; (400cc8 <udi_cdc_multi_getc+0xa4>)
  400c88:	f811 a002 	ldrb.w	sl, [r1, r2]
  400c8c:	ea40 0a0a 	orr.w	sl, r0, sl
	udi_cdc_rx_pos[port] = pos+1;
  400c90:	3301      	adds	r3, #1
  400c92:	b29b      	uxth	r3, r3
  400c94:	802b      	strh	r3, [r5, #0]

	udi_cdc_rx_start(port);
  400c96:	4640      	mov	r0, r8
  400c98:	4b0c      	ldr	r3, [pc, #48]	; (400ccc <udi_cdc_multi_getc+0xa8>)
  400c9a:	4798      	blx	r3

	if (b_databit_9) {
  400c9c:	f1b9 0f00 	cmp.w	r9, #0
  400ca0:	d003      	beq.n	400caa <udi_cdc_multi_getc+0x86>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
  400ca2:	ea4f 200a 	mov.w	r0, sl, lsl #8

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
  400ca6:	46c1      	mov	r9, r8
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
  400ca8:	e7ce      	b.n	400c48 <udi_cdc_multi_getc+0x24>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400caa:	4650      	mov	r0, sl
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  400cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400cb0:	200009b8 	.word	0x200009b8
  400cb4:	200000b0 	.word	0x200000b0
  400cb8:	20000a54 	.word	0x20000a54
  400cbc:	20000a60 	.word	0x20000a60
  400cc0:	20000a4c 	.word	0x20000a4c
  400cc4:	20000a5c 	.word	0x20000a5c
  400cc8:	20000a74 	.word	0x20000a74
  400ccc:	00400a71 	.word	0x00400a71

00400cd0 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400cd0:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  400cd2:	2000      	movs	r0, #0
  400cd4:	4b01      	ldr	r3, [pc, #4]	; (400cdc <udi_cdc_getc+0xc>)
  400cd6:	4798      	blx	r3
}
  400cd8:	bd08      	pop	{r3, pc}
  400cda:	bf00      	nop
  400cdc:	00400c25 	.word	0x00400c25

00400ce0 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400ce0:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ce2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400ce6:	b672      	cpsid	i
  400ce8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400cec:	2200      	movs	r2, #0
  400cee:	4b17      	ldr	r3, [pc, #92]	; (400d4c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400cf0:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400cf2:	4b17      	ldr	r3, [pc, #92]	; (400d50 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400cf4:	7819      	ldrb	r1, [r3, #0]
  400cf6:	b2c9      	uxtb	r1, r1
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400cf8:	4a16      	ldr	r2, [pc, #88]	; (400d54 <udi_cdc_multi_get_free_tx_buffer+0x74>)
  400cfa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
  400cfe:	f1d1 0101 	rsbs	r1, r1, #1
  400d02:	bf38      	it	cc
  400d04:	2100      	movcc	r1, #0
  400d06:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400d0a:	2b40      	cmp	r3, #64	; 0x40
  400d0c:	d110      	bne.n	400d30 <udi_cdc_multi_get_free_tx_buffer+0x50>
		if ((!udi_cdc_tx_trans_ongoing[port])
  400d0e:	4a12      	ldr	r2, [pc, #72]	; (400d58 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400d10:	7812      	ldrb	r2, [r2, #0]
  400d12:	f012 0fff 	tst.w	r2, #255	; 0xff
  400d16:	d10b      	bne.n	400d30 <udi_cdc_multi_get_free_tx_buffer+0x50>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400d18:	4a10      	ldr	r2, [pc, #64]	; (400d5c <udi_cdc_multi_get_free_tx_buffer+0x7c>)
  400d1a:	7812      	ldrb	r2, [r2, #0]
  400d1c:	f012 0fff 	tst.w	r2, #255	; 0xff
  400d20:	d106      	bne.n	400d30 <udi_cdc_multi_get_free_tx_buffer+0x50>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  400d22:	2201      	movs	r2, #1
  400d24:	4b0d      	ldr	r3, [pc, #52]	; (400d5c <udi_cdc_multi_get_free_tx_buffer+0x7c>)
  400d26:	701a      	strb	r2, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400d28:	4b09      	ldr	r3, [pc, #36]	; (400d50 <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400d2a:	7019      	strb	r1, [r3, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
  400d2c:	2040      	movs	r0, #64	; 0x40
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
  400d2e:	2300      	movs	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400d30:	b92c      	cbnz	r4, 400d3e <udi_cdc_multi_get_free_tx_buffer+0x5e>
		cpu_irq_enable();
  400d32:	2101      	movs	r1, #1
  400d34:	4a05      	ldr	r2, [pc, #20]	; (400d4c <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400d36:	7011      	strb	r1, [r2, #0]
  400d38:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400d3c:	b662      	cpsie	i
  400d3e:	4418      	add	r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
  400d40:	f1c0 0080 	rsb	r0, r0, #128	; 0x80
  400d44:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d48:	4770      	bx	lr
  400d4a:	bf00      	nop
  400d4c:	200000b0 	.word	0x200000b0
  400d50:	200009c4 	.word	0x200009c4
  400d54:	200009c8 	.word	0x200009c8
  400d58:	20000a64 	.word	0x20000a64
  400d5c:	20000af8 	.word	0x20000af8

00400d60 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400d60:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  400d62:	4b03      	ldr	r3, [pc, #12]	; (400d70 <udi_cdc_multi_is_tx_ready+0x10>)
  400d64:	4798      	blx	r3
}
  400d66:	3000      	adds	r0, #0
  400d68:	bf18      	it	ne
  400d6a:	2001      	movne	r0, #1
  400d6c:	bd08      	pop	{r3, pc}
  400d6e:	bf00      	nop
  400d70:	00400ce1 	.word	0x00400ce1

00400d74 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d78:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400d7a:	4b1b      	ldr	r3, [pc, #108]	; (400de8 <udi_cdc_multi_putc+0x74>)
  400d7c:	799e      	ldrb	r6, [r3, #6]
  400d7e:	2e09      	cmp	r6, #9
  400d80:	bf14      	ite	ne
  400d82:	2600      	movne	r6, #0
  400d84:	2601      	moveq	r6, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400d86:	4d19      	ldr	r5, [pc, #100]	; (400dec <udi_cdc_multi_putc+0x78>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400d88:	4f19      	ldr	r7, [pc, #100]	; (400df0 <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400d8a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 400e00 <udi_cdc_multi_putc+0x8c>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400d8e:	2000      	movs	r0, #0
  400d90:	47a8      	blx	r5
  400d92:	b930      	cbnz	r0, 400da2 <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
  400d94:	4b17      	ldr	r3, [pc, #92]	; (400df4 <udi_cdc_multi_putc+0x80>)
  400d96:	781b      	ldrb	r3, [r3, #0]
  400d98:	f013 0fff 	tst.w	r3, #255	; 0xff
  400d9c:	d1f7      	bne.n	400d8e <udi_cdc_multi_putc+0x1a>
  400d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400da2:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400da6:	b672      	cpsid	i
  400da8:	f3bf 8f5f 	dmb	sy
  400dac:	2300      	movs	r3, #0
  400dae:	703b      	strb	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400db0:	f898 3000 	ldrb.w	r3, [r8]
  400db4:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400db6:	4810      	ldr	r0, [pc, #64]	; (400df8 <udi_cdc_multi_putc+0x84>)
  400db8:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
  400dbc:	f102 0c01 	add.w	ip, r2, #1
  400dc0:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
  400dc4:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  400dc8:	4a0c      	ldr	r2, [pc, #48]	; (400dfc <udi_cdc_multi_putc+0x88>)
  400dca:	54d4      	strb	r4, [r2, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400dcc:	b921      	cbnz	r1, 400dd8 <udi_cdc_multi_putc+0x64>
		cpu_irq_enable();
  400dce:	2301      	movs	r3, #1
  400dd0:	703b      	strb	r3, [r7, #0]
  400dd2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400dd6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  400dd8:	b116      	cbz	r6, 400de0 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  400dda:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
  400ddc:	2600      	movs	r6, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
  400dde:	e7d6      	b.n	400d8e <udi_cdc_multi_putc+0x1a>
	}
	return true;
  400de0:	2001      	movs	r0, #1
}
  400de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400de6:	bf00      	nop
  400de8:	200009b8 	.word	0x200009b8
  400dec:	00400d61 	.word	0x00400d61
  400df0:	200000b0 	.word	0x200000b0
  400df4:	20000a5c 	.word	0x20000a5c
  400df8:	200009c8 	.word	0x200009c8
  400dfc:	200009cc 	.word	0x200009cc
  400e00:	200009c4 	.word	0x200009c4

00400e04 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400e04:	b508      	push	{r3, lr}
  400e06:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
  400e08:	2000      	movs	r0, #0
  400e0a:	4b01      	ldr	r3, [pc, #4]	; (400e10 <udi_cdc_putc+0xc>)
  400e0c:	4798      	blx	r3
}
  400e0e:	bd08      	pop	{r3, pc}
  400e10:	00400d75 	.word	0x00400d75

00400e14 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  400e14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e18:	4688      	mov	r8, r1
  400e1a:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  400e1c:	4b1f      	ldr	r3, [pc, #124]	; (400e9c <udi_cdc_multi_write_buf+0x88>)
  400e1e:	799b      	ldrb	r3, [r3, #6]
  400e20:	2b09      	cmp	r3, #9
		size *=2;
  400e22:	bf08      	it	eq
  400e24:	0055      	lsleq	r5, r2, #1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400e26:	f8df a08c 	ldr.w	sl, [pc, #140]	; 400eb4 <udi_cdc_multi_write_buf+0xa0>
  400e2a:	2000      	movs	r0, #0
  400e2c:	47d0      	blx	sl
  400e2e:	b938      	cbnz	r0, 400e40 <udi_cdc_multi_write_buf+0x2c>
		if (!udi_cdc_data_running) {
  400e30:	4b1b      	ldr	r3, [pc, #108]	; (400ea0 <udi_cdc_multi_write_buf+0x8c>)
  400e32:	781b      	ldrb	r3, [r3, #0]
  400e34:	f013 0fff 	tst.w	r3, #255	; 0xff
  400e38:	d1f7      	bne.n	400e2a <udi_cdc_multi_write_buf+0x16>
  400e3a:	4628      	mov	r0, r5
  400e3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e40:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400e44:	b672      	cpsid	i
  400e46:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400e4a:	2300      	movs	r3, #0
  400e4c:	4a15      	ldr	r2, [pc, #84]	; (400ea4 <udi_cdc_multi_write_buf+0x90>)
  400e4e:	7013      	strb	r3, [r2, #0]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400e50:	4b15      	ldr	r3, [pc, #84]	; (400ea8 <udi_cdc_multi_write_buf+0x94>)
  400e52:	781e      	ldrb	r6, [r3, #0]
  400e54:	b2f6      	uxtb	r6, r6
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400e56:	f8df 9060 	ldr.w	r9, [pc, #96]	; 400eb8 <udi_cdc_multi_write_buf+0xa4>
  400e5a:	f839 7016 	ldrh.w	r7, [r9, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  400e5e:	f1c7 0440 	rsb	r4, r7, #64	; 0x40
  400e62:	42a5      	cmp	r5, r4
  400e64:	bf38      	it	cc
  400e66:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  400e68:	eb07 1386 	add.w	r3, r7, r6, lsl #6
  400e6c:	480f      	ldr	r0, [pc, #60]	; (400eac <udi_cdc_multi_write_buf+0x98>)
  400e6e:	4418      	add	r0, r3
  400e70:	4641      	mov	r1, r8
  400e72:	4622      	mov	r2, r4
  400e74:	4b0e      	ldr	r3, [pc, #56]	; (400eb0 <udi_cdc_multi_write_buf+0x9c>)
  400e76:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  400e78:	4427      	add	r7, r4
  400e7a:	f829 7016 	strh.w	r7, [r9, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400e7e:	465b      	mov	r3, fp
  400e80:	b92b      	cbnz	r3, 400e8e <udi_cdc_multi_write_buf+0x7a>
		cpu_irq_enable();
  400e82:	2301      	movs	r3, #1
  400e84:	4a07      	ldr	r2, [pc, #28]	; (400ea4 <udi_cdc_multi_write_buf+0x90>)
  400e86:	7013      	strb	r3, [r2, #0]
  400e88:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400e8c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  400e8e:	44a0      	add	r8, r4
	size -= copy_nb;

	if (size) {
  400e90:	1b2d      	subs	r5, r5, r4
  400e92:	d1ca      	bne.n	400e2a <udi_cdc_multi_write_buf+0x16>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
  400e94:	2000      	movs	r0, #0
}
  400e96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400e9a:	bf00      	nop
  400e9c:	200009b8 	.word	0x200009b8
  400ea0:	20000a5c 	.word	0x20000a5c
  400ea4:	200000b0 	.word	0x200000b0
  400ea8:	200009c4 	.word	0x200009c4
  400eac:	200009cc 	.word	0x200009cc
  400eb0:	0040334d 	.word	0x0040334d
  400eb4:	00400d61 	.word	0x00400d61
  400eb8:	200009c8 	.word	0x200009c8

00400ebc <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  400ebc:	b508      	push	{r3, lr}
  400ebe:	4603      	mov	r3, r0
  400ec0:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
  400ec2:	2000      	movs	r0, #0
  400ec4:	4619      	mov	r1, r3
  400ec6:	4b01      	ldr	r3, [pc, #4]	; (400ecc <udi_cdc_write_buf+0x10>)
  400ec8:	4798      	blx	r3
}
  400eca:	bd08      	pop	{r3, pc}
  400ecc:	00400e15 	.word	0x00400e15

00400ed0 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400ed0:	4b0f      	ldr	r3, [pc, #60]	; (400f10 <udc_next_desc_in_iface+0x40>)
  400ed2:	681b      	ldr	r3, [r3, #0]
  400ed4:	681b      	ldr	r3, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400ed6:	885a      	ldrh	r2, [r3, #2]
  400ed8:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400eda:	7803      	ldrb	r3, [r0, #0]
  400edc:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400ede:	4290      	cmp	r0, r2
  400ee0:	d210      	bcs.n	400f04 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400ee2:	7843      	ldrb	r3, [r0, #1]
  400ee4:	2b04      	cmp	r3, #4
  400ee6:	d00f      	beq.n	400f08 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400ee8:	428b      	cmp	r3, r1
  400eea:	d105      	bne.n	400ef8 <udc_next_desc_in_iface+0x28>
  400eec:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400eee:	7843      	ldrb	r3, [r0, #1]
  400ef0:	2b04      	cmp	r3, #4
  400ef2:	d00b      	beq.n	400f0c <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400ef4:	428b      	cmp	r3, r1
  400ef6:	d00a      	beq.n	400f0e <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400ef8:	7803      	ldrb	r3, [r0, #0]
  400efa:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400efc:	4290      	cmp	r0, r2
  400efe:	d3f6      	bcc.n	400eee <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  400f00:	2000      	movs	r0, #0
  400f02:	4770      	bx	lr
  400f04:	2000      	movs	r0, #0
  400f06:	4770      	bx	lr
  400f08:	2000      	movs	r0, #0
  400f0a:	4770      	bx	lr
  400f0c:	2000      	movs	r0, #0
}
  400f0e:	4770      	bx	lr
  400f10:	20000b04 	.word	0x20000b04

00400f14 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400f14:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400f16:	4b03      	ldr	r3, [pc, #12]	; (400f24 <udc_valid_address+0x10>)
  400f18:	7898      	ldrb	r0, [r3, #2]
  400f1a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400f1e:	4b02      	ldr	r3, [pc, #8]	; (400f28 <udc_valid_address+0x14>)
  400f20:	4798      	blx	r3
  400f22:	bd08      	pop	{r3, pc}
  400f24:	20000c3c 	.word	0x20000c3c
  400f28:	00402a25 	.word	0x00402a25

00400f2c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  400f2c:	b410      	push	{r4}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  400f2e:	4b16      	ldr	r3, [pc, #88]	; (400f88 <udc_update_iface_desc+0x5c>)
  400f30:	781b      	ldrb	r3, [r3, #0]
  400f32:	b303      	cbz	r3, 400f76 <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400f34:	4b15      	ldr	r3, [pc, #84]	; (400f8c <udc_update_iface_desc+0x60>)
  400f36:	681b      	ldr	r3, [r3, #0]
  400f38:	681b      	ldr	r3, [r3, #0]
  400f3a:	791a      	ldrb	r2, [r3, #4]
  400f3c:	4282      	cmp	r2, r0
  400f3e:	d91c      	bls.n	400f7a <udc_update_iface_desc+0x4e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400f40:	4a13      	ldr	r2, [pc, #76]	; (400f90 <udc_update_iface_desc+0x64>)
  400f42:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400f44:	885c      	ldrh	r4, [r3, #2]
  400f46:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400f48:	42a3      	cmp	r3, r4
  400f4a:	d218      	bcs.n	400f7e <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400f4c:	785a      	ldrb	r2, [r3, #1]
  400f4e:	2a04      	cmp	r2, #4
  400f50:	d109      	bne.n	400f66 <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400f52:	789a      	ldrb	r2, [r3, #2]
  400f54:	4282      	cmp	r2, r0
  400f56:	d106      	bne.n	400f66 <udc_update_iface_desc+0x3a>
  400f58:	78da      	ldrb	r2, [r3, #3]
  400f5a:	428a      	cmp	r2, r1
  400f5c:	d103      	bne.n	400f66 <udc_update_iface_desc+0x3a>
  400f5e:	4a0c      	ldr	r2, [pc, #48]	; (400f90 <udc_update_iface_desc+0x64>)
  400f60:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  400f62:	2001      	movs	r0, #1
  400f64:	e00c      	b.n	400f80 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400f66:	781a      	ldrb	r2, [r3, #0]
  400f68:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400f6a:	42a3      	cmp	r3, r4
  400f6c:	d3ee      	bcc.n	400f4c <udc_update_iface_desc+0x20>
  400f6e:	4a08      	ldr	r2, [pc, #32]	; (400f90 <udc_update_iface_desc+0x64>)
  400f70:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400f72:	2000      	movs	r0, #0
  400f74:	e004      	b.n	400f80 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  400f76:	2000      	movs	r0, #0
  400f78:	e002      	b.n	400f80 <udc_update_iface_desc+0x54>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  400f7a:	2000      	movs	r0, #0
  400f7c:	e000      	b.n	400f80 <udc_update_iface_desc+0x54>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400f7e:	2000      	movs	r0, #0
}
  400f80:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f84:	4770      	bx	lr
  400f86:	bf00      	nop
  400f88:	20000b0c 	.word	0x20000b0c
  400f8c:	20000b04 	.word	0x20000b04
  400f90:	20000b10 	.word	0x20000b10

00400f94 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  400f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400f98:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400f9a:	2100      	movs	r1, #0
  400f9c:	4b12      	ldr	r3, [pc, #72]	; (400fe8 <udc_iface_disable+0x54>)
  400f9e:	4798      	blx	r3
  400fa0:	4680      	mov	r8, r0
  400fa2:	b1e8      	cbz	r0, 400fe0 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  400fa4:	4b11      	ldr	r3, [pc, #68]	; (400fec <udc_iface_disable+0x58>)
  400fa6:	681b      	ldr	r3, [r3, #0]
  400fa8:	685b      	ldr	r3, [r3, #4]
  400faa:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  400fae:	f8d9 300c 	ldr.w	r3, [r9, #12]
  400fb2:	4798      	blx	r3
  400fb4:	4601      	mov	r1, r0
  400fb6:	4620      	mov	r0, r4
  400fb8:	4b0b      	ldr	r3, [pc, #44]	; (400fe8 <udc_iface_disable+0x54>)
  400fba:	4798      	blx	r3
  400fbc:	4680      	mov	r8, r0
  400fbe:	b178      	cbz	r0, 400fe0 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  400fc0:	4b0b      	ldr	r3, [pc, #44]	; (400ff0 <udc_iface_disable+0x5c>)
  400fc2:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400fc4:	2605      	movs	r6, #5
  400fc6:	4d0b      	ldr	r5, [pc, #44]	; (400ff4 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400fc8:	4f0b      	ldr	r7, [pc, #44]	; (400ff8 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  400fca:	4620      	mov	r0, r4
  400fcc:	4631      	mov	r1, r6
  400fce:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  400fd0:	4604      	mov	r4, r0
  400fd2:	b110      	cbz	r0, 400fda <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  400fd4:	7880      	ldrb	r0, [r0, #2]
  400fd6:	47b8      	blx	r7
		}
  400fd8:	e7f7      	b.n	400fca <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  400fda:	f8d9 3004 	ldr.w	r3, [r9, #4]
  400fde:	4798      	blx	r3
	return true;
}
  400fe0:	4640      	mov	r0, r8
  400fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400fe6:	bf00      	nop
  400fe8:	00400f2d 	.word	0x00400f2d
  400fec:	20000b04 	.word	0x20000b04
  400ff0:	20000b10 	.word	0x20000b10
  400ff4:	00400ed1 	.word	0x00400ed1
  400ff8:	00402b9d 	.word	0x00402b9d

00400ffc <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  400ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401000:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  401002:	4b10      	ldr	r3, [pc, #64]	; (401044 <udc_iface_enable+0x48>)
  401004:	4798      	blx	r3
  401006:	4603      	mov	r3, r0
  401008:	b1c8      	cbz	r0, 40103e <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40100a:	4b0f      	ldr	r3, [pc, #60]	; (401048 <udc_iface_enable+0x4c>)
  40100c:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40100e:	2605      	movs	r6, #5
  401010:	4d0e      	ldr	r5, [pc, #56]	; (40104c <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401012:	4f0f      	ldr	r7, [pc, #60]	; (401050 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401014:	4620      	mov	r0, r4
  401016:	4631      	mov	r1, r6
  401018:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  40101a:	4604      	mov	r4, r0
  40101c:	b138      	cbz	r0, 40102e <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40101e:	7880      	ldrb	r0, [r0, #2]
  401020:	78e1      	ldrb	r1, [r4, #3]
  401022:	88a2      	ldrh	r2, [r4, #4]
  401024:	47b8      	blx	r7
  401026:	4603      	mov	r3, r0
  401028:	2800      	cmp	r0, #0
  40102a:	d1f3      	bne.n	401014 <udc_iface_enable+0x18>
  40102c:	e007      	b.n	40103e <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40102e:	4b09      	ldr	r3, [pc, #36]	; (401054 <udc_iface_enable+0x58>)
  401030:	681b      	ldr	r3, [r3, #0]
  401032:	685b      	ldr	r3, [r3, #4]
  401034:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  401038:	681b      	ldr	r3, [r3, #0]
  40103a:	4798      	blx	r3
  40103c:	4603      	mov	r3, r0
}
  40103e:	4618      	mov	r0, r3
  401040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401044:	00400f2d 	.word	0x00400f2d
  401048:	20000b10 	.word	0x20000b10
  40104c:	00400ed1 	.word	0x00400ed1
  401050:	00402a99 	.word	0x00402a99
  401054:	20000b04 	.word	0x20000b04

00401058 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  401058:	b508      	push	{r3, lr}
	udd_enable();
  40105a:	4b01      	ldr	r3, [pc, #4]	; (401060 <udc_start+0x8>)
  40105c:	4798      	blx	r3
  40105e:	bd08      	pop	{r3, pc}
  401060:	00402969 	.word	0x00402969

00401064 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  401064:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  401066:	4b0d      	ldr	r3, [pc, #52]	; (40109c <udc_reset+0x38>)
  401068:	781b      	ldrb	r3, [r3, #0]
  40106a:	b183      	cbz	r3, 40108e <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40106c:	4b0c      	ldr	r3, [pc, #48]	; (4010a0 <udc_reset+0x3c>)
  40106e:	681b      	ldr	r3, [r3, #0]
  401070:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401072:	791b      	ldrb	r3, [r3, #4]
  401074:	b15b      	cbz	r3, 40108e <udc_reset+0x2a>
  401076:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  401078:	4e0a      	ldr	r6, [pc, #40]	; (4010a4 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40107a:	4d09      	ldr	r5, [pc, #36]	; (4010a0 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  40107c:	4620      	mov	r0, r4
  40107e:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  401080:	3401      	adds	r4, #1
  401082:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401084:	682b      	ldr	r3, [r5, #0]
  401086:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401088:	791b      	ldrb	r3, [r3, #4]
  40108a:	42a3      	cmp	r3, r4
  40108c:	d8f6      	bhi.n	40107c <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  40108e:	2300      	movs	r3, #0
  401090:	4a02      	ldr	r2, [pc, #8]	; (40109c <udc_reset+0x38>)
  401092:	7013      	strb	r3, [r2, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  401094:	4a04      	ldr	r2, [pc, #16]	; (4010a8 <udc_reset+0x44>)
  401096:	8013      	strh	r3, [r2, #0]
  401098:	bd70      	pop	{r4, r5, r6, pc}
  40109a:	bf00      	nop
  40109c:	20000b0c 	.word	0x20000b0c
  4010a0:	20000b04 	.word	0x20000b04
  4010a4:	00400f95 	.word	0x00400f95
  4010a8:	20000b0a 	.word	0x20000b0a

004010ac <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  4010ac:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  4010ae:	4b0c      	ldr	r3, [pc, #48]	; (4010e0 <udc_sof_notify+0x34>)
  4010b0:	781b      	ldrb	r3, [r3, #0]
  4010b2:	b19b      	cbz	r3, 4010dc <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010b4:	4b0b      	ldr	r3, [pc, #44]	; (4010e4 <udc_sof_notify+0x38>)
  4010b6:	681b      	ldr	r3, [r3, #0]
  4010b8:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4010ba:	7912      	ldrb	r2, [r2, #4]
  4010bc:	b172      	cbz	r2, 4010dc <udc_sof_notify+0x30>
  4010be:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010c0:	4d08      	ldr	r5, [pc, #32]	; (4010e4 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  4010c2:	685b      	ldr	r3, [r3, #4]
  4010c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4010c8:	691b      	ldr	r3, [r3, #16]
  4010ca:	b103      	cbz	r3, 4010ce <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  4010cc:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  4010ce:	3401      	adds	r4, #1
  4010d0:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010d2:	682b      	ldr	r3, [r5, #0]
  4010d4:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4010d6:	7912      	ldrb	r2, [r2, #4]
  4010d8:	42a2      	cmp	r2, r4
  4010da:	d8f2      	bhi.n	4010c2 <udc_sof_notify+0x16>
  4010dc:	bd38      	pop	{r3, r4, r5, pc}
  4010de:	bf00      	nop
  4010e0:	20000b0c 	.word	0x20000b0c
  4010e4:	20000b04 	.word	0x20000b04

004010e8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  4010e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  4010ec:	4b77      	ldr	r3, [pc, #476]	; (4012cc <udc_process_setup+0x1e4>)
  4010ee:	2200      	movs	r2, #0
  4010f0:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  4010f2:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4010f4:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  4010f6:	781b      	ldrb	r3, [r3, #0]
  4010f8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4010fc:	f000 81e6 	beq.w	4014cc <udc_process_setup+0x3e4>
		if (udd_g_ctrlreq.req.wLength == 0) {
  401100:	4a72      	ldr	r2, [pc, #456]	; (4012cc <udc_process_setup+0x1e4>)
  401102:	88d2      	ldrh	r2, [r2, #6]
  401104:	2a00      	cmp	r2, #0
  401106:	f040 81e5 	bne.w	4014d4 <udc_process_setup+0x3ec>
  40110a:	e1db      	b.n	4014c4 <udc_process_setup+0x3dc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40110c:	f013 031f 	ands.w	r3, r3, #31
  401110:	d167      	bne.n	4011e2 <udc_process_setup+0xfa>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  401112:	496e      	ldr	r1, [pc, #440]	; (4012cc <udc_process_setup+0x1e4>)
  401114:	7849      	ldrb	r1, [r1, #1]
  401116:	2906      	cmp	r1, #6
  401118:	d00d      	beq.n	401136 <udc_process_setup+0x4e>
  40111a:	2908      	cmp	r1, #8
  40111c:	d057      	beq.n	4011ce <udc_process_setup+0xe6>
  40111e:	2900      	cmp	r1, #0
  401120:	d15f      	bne.n	4011e2 <udc_process_setup+0xfa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  401122:	2a02      	cmp	r2, #2
  401124:	d105      	bne.n	401132 <udc_process_setup+0x4a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  401126:	486a      	ldr	r0, [pc, #424]	; (4012d0 <udc_process_setup+0x1e8>)
  401128:	2102      	movs	r1, #2
  40112a:	4b6a      	ldr	r3, [pc, #424]	; (4012d4 <udc_process_setup+0x1ec>)
  40112c:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  40112e:	2401      	movs	r4, #1
  401130:	e174      	b.n	40141c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
  401132:	2400      	movs	r4, #0
  401134:	e172      	b.n	40141c <udc_process_setup+0x334>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401136:	4b65      	ldr	r3, [pc, #404]	; (4012cc <udc_process_setup+0x1e4>)
  401138:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  40113a:	0a13      	lsrs	r3, r2, #8
  40113c:	3b01      	subs	r3, #1
  40113e:	2b0e      	cmp	r3, #14
  401140:	d83b      	bhi.n	4011ba <udc_process_setup+0xd2>
  401142:	e8df f003 	tbb	[pc, r3]
  401146:	0f08      	.short	0x0f08
  401148:	3a3a3a2a 	.word	0x3a3a3a2a
  40114c:	3a3a3a3a 	.word	0x3a3a3a3a
  401150:	3a3a3a3a 	.word	0x3a3a3a3a
  401154:	22          	.byte	0x22
  401155:	00          	.byte	0x00
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  401156:	4b60      	ldr	r3, [pc, #384]	; (4012d8 <udc_process_setup+0x1f0>)
  401158:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  40115a:	4618      	mov	r0, r3
  40115c:	7819      	ldrb	r1, [r3, #0]
  40115e:	4b5d      	ldr	r3, [pc, #372]	; (4012d4 <udc_process_setup+0x1ec>)
  401160:	4798      	blx	r3
  401162:	e021      	b.n	4011a8 <udc_process_setup+0xc0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401164:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  401166:	4b5c      	ldr	r3, [pc, #368]	; (4012d8 <udc_process_setup+0x1f0>)
  401168:	681b      	ldr	r3, [r3, #0]
  40116a:	7c5b      	ldrb	r3, [r3, #17]
  40116c:	4293      	cmp	r3, r2
  40116e:	d926      	bls.n	4011be <udc_process_setup+0xd6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  401170:	4b59      	ldr	r3, [pc, #356]	; (4012d8 <udc_process_setup+0x1f0>)
  401172:	685b      	ldr	r3, [r3, #4]
  401174:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  401178:	4618      	mov	r0, r3
  40117a:	8859      	ldrh	r1, [r3, #2]
  40117c:	4b55      	ldr	r3, [pc, #340]	; (4012d4 <udc_process_setup+0x1ec>)
  40117e:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401180:	4b52      	ldr	r3, [pc, #328]	; (4012cc <udc_process_setup+0x1e4>)
  401182:	689b      	ldr	r3, [r3, #8]
  401184:	2202      	movs	r2, #2
  401186:	705a      	strb	r2, [r3, #1]
  401188:	e00e      	b.n	4011a8 <udc_process_setup+0xc0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  40118a:	4b53      	ldr	r3, [pc, #332]	; (4012d8 <udc_process_setup+0x1f0>)
  40118c:	689b      	ldr	r3, [r3, #8]
  40118e:	b1c3      	cbz	r3, 4011c2 <udc_process_setup+0xda>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401190:	4618      	mov	r0, r3
  401192:	8859      	ldrh	r1, [r3, #2]
  401194:	4b4f      	ldr	r3, [pc, #316]	; (4012d4 <udc_process_setup+0x1ec>)
  401196:	4798      	blx	r3
  401198:	e006      	b.n	4011a8 <udc_process_setup+0xc0>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  40119a:	f012 0fff 	tst.w	r2, #255	; 0xff
  40119e:	d112      	bne.n	4011c6 <udc_process_setup+0xde>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  4011a0:	484e      	ldr	r0, [pc, #312]	; (4012dc <udc_process_setup+0x1f4>)
  4011a2:	2104      	movs	r1, #4
  4011a4:	4b4b      	ldr	r3, [pc, #300]	; (4012d4 <udc_process_setup+0x1ec>)
  4011a6:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  4011a8:	4b48      	ldr	r3, [pc, #288]	; (4012cc <udc_process_setup+0x1e4>)
  4011aa:	88da      	ldrh	r2, [r3, #6]
  4011ac:	899b      	ldrh	r3, [r3, #12]
  4011ae:	4293      	cmp	r3, r2
  4011b0:	d90b      	bls.n	4011ca <udc_process_setup+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  4011b2:	4b46      	ldr	r3, [pc, #280]	; (4012cc <udc_process_setup+0x1e4>)
  4011b4:	819a      	strh	r2, [r3, #12]
	}
	return true;
  4011b6:	2401      	movs	r4, #1
  4011b8:	e130      	b.n	40141c <udc_process_setup+0x334>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  4011ba:	2400      	movs	r4, #0
  4011bc:	e12e      	b.n	40141c <udc_process_setup+0x334>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
  4011be:	2400      	movs	r4, #0
  4011c0:	e12c      	b.n	40141c <udc_process_setup+0x334>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
  4011c2:	2400      	movs	r4, #0
  4011c4:	e12a      	b.n	40141c <udc_process_setup+0x334>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
  4011c6:	2400      	movs	r4, #0
  4011c8:	e128      	b.n	40141c <udc_process_setup+0x334>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
  4011ca:	2401      	movs	r4, #1
  4011cc:	e126      	b.n	40141c <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  4011ce:	2a01      	cmp	r2, #1
  4011d0:	d105      	bne.n	4011de <udc_process_setup+0xf6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  4011d2:	4843      	ldr	r0, [pc, #268]	; (4012e0 <udc_process_setup+0x1f8>)
  4011d4:	2101      	movs	r1, #1
  4011d6:	4b3f      	ldr	r3, [pc, #252]	; (4012d4 <udc_process_setup+0x1ec>)
  4011d8:	4798      	blx	r3
	return true;
  4011da:	2401      	movs	r4, #1
  4011dc:	e11e      	b.n	40141c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
  4011de:	2400      	movs	r4, #0
  4011e0:	e11c      	b.n	40141c <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4011e2:	2b01      	cmp	r3, #1
  4011e4:	d12a      	bne.n	40123c <udc_process_setup+0x154>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4011e6:	4939      	ldr	r1, [pc, #228]	; (4012cc <udc_process_setup+0x1e4>)
  4011e8:	7849      	ldrb	r1, [r1, #1]
  4011ea:	290a      	cmp	r1, #10
  4011ec:	d126      	bne.n	40123c <udc_process_setup+0x154>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  4011ee:	2a01      	cmp	r2, #1
  4011f0:	d11e      	bne.n	401230 <udc_process_setup+0x148>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  4011f2:	4b3b      	ldr	r3, [pc, #236]	; (4012e0 <udc_process_setup+0x1f8>)
  4011f4:	781b      	ldrb	r3, [r3, #0]
  4011f6:	b1eb      	cbz	r3, 401234 <udc_process_setup+0x14c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4011f8:	4b34      	ldr	r3, [pc, #208]	; (4012cc <udc_process_setup+0x1e4>)
  4011fa:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4011fc:	4b39      	ldr	r3, [pc, #228]	; (4012e4 <udc_process_setup+0x1fc>)
  4011fe:	681e      	ldr	r6, [r3, #0]
  401200:	6833      	ldr	r3, [r6, #0]
  401202:	791b      	ldrb	r3, [r3, #4]
  401204:	42ab      	cmp	r3, r5
  401206:	d917      	bls.n	401238 <udc_process_setup+0x150>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401208:	4628      	mov	r0, r5
  40120a:	2100      	movs	r1, #0
  40120c:	4b36      	ldr	r3, [pc, #216]	; (4012e8 <udc_process_setup+0x200>)
  40120e:	4798      	blx	r3
  401210:	4604      	mov	r4, r0
  401212:	2800      	cmp	r0, #0
  401214:	f000 8102 	beq.w	40141c <udc_process_setup+0x334>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401218:	6873      	ldr	r3, [r6, #4]
	udc_iface_setting = udi_api->getsetting();
  40121a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  40121e:	68db      	ldr	r3, [r3, #12]
  401220:	4798      	blx	r3
  401222:	4b32      	ldr	r3, [pc, #200]	; (4012ec <udc_process_setup+0x204>)
  401224:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  401226:	4618      	mov	r0, r3
  401228:	2101      	movs	r1, #1
  40122a:	4b2a      	ldr	r3, [pc, #168]	; (4012d4 <udc_process_setup+0x1ec>)
  40122c:	4798      	blx	r3
  40122e:	e0f5      	b.n	40141c <udc_process_setup+0x334>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
  401230:	2400      	movs	r4, #0
  401232:	e0f3      	b.n	40141c <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  401234:	2400      	movs	r4, #0
  401236:	e0f1      	b.n	40141c <udc_process_setup+0x334>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  401238:	2400      	movs	r4, #0
  40123a:	e0ef      	b.n	40141c <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40123c:	2b02      	cmp	r3, #2
  40123e:	f040 80ef 	bne.w	401420 <udc_process_setup+0x338>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  401242:	4b22      	ldr	r3, [pc, #136]	; (4012cc <udc_process_setup+0x1e4>)
  401244:	785b      	ldrb	r3, [r3, #1]
  401246:	2b00      	cmp	r3, #0
  401248:	f040 80e3 	bne.w	401412 <udc_process_setup+0x32a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  40124c:	2a02      	cmp	r2, #2
  40124e:	d10b      	bne.n	401268 <udc_process_setup+0x180>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401250:	4b1e      	ldr	r3, [pc, #120]	; (4012cc <udc_process_setup+0x1e4>)
  401252:	7918      	ldrb	r0, [r3, #4]
  401254:	4b26      	ldr	r3, [pc, #152]	; (4012f0 <udc_process_setup+0x208>)
  401256:	4798      	blx	r3
  401258:	4b26      	ldr	r3, [pc, #152]	; (4012f4 <udc_process_setup+0x20c>)
  40125a:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  40125c:	4618      	mov	r0, r3
  40125e:	2102      	movs	r1, #2
  401260:	4b1c      	ldr	r3, [pc, #112]	; (4012d4 <udc_process_setup+0x1ec>)
  401262:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  401264:	2401      	movs	r4, #1
  401266:	e0d9      	b.n	40141c <udc_process_setup+0x334>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
  401268:	2400      	movs	r4, #0
  40126a:	e0d7      	b.n	40141c <udc_process_setup+0x334>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40126c:	f013 031f 	ands.w	r3, r3, #31
  401270:	f040 8084 	bne.w	40137c <udc_process_setup+0x294>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  401274:	4a15      	ldr	r2, [pc, #84]	; (4012cc <udc_process_setup+0x1e4>)
  401276:	7852      	ldrb	r2, [r2, #1]
  401278:	3a01      	subs	r2, #1
  40127a:	2a08      	cmp	r2, #8
  40127c:	d87e      	bhi.n	40137c <udc_process_setup+0x294>
  40127e:	e8df f012 	tbh	[pc, r2, lsl #1]
  401282:	0013      	.short	0x0013
  401284:	00ca007d 	.word	0x00ca007d
  401288:	0009007d 	.word	0x0009007d
  40128c:	007d007d 	.word	0x007d007d
  401290:	003d007d 	.word	0x003d007d
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401294:	4b0d      	ldr	r3, [pc, #52]	; (4012cc <udc_process_setup+0x1e4>)
  401296:	88db      	ldrh	r3, [r3, #6]
  401298:	b923      	cbnz	r3, 4012a4 <udc_process_setup+0x1bc>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  40129a:	4a17      	ldr	r2, [pc, #92]	; (4012f8 <udc_process_setup+0x210>)
  40129c:	4b0b      	ldr	r3, [pc, #44]	; (4012cc <udc_process_setup+0x1e4>)
  40129e:	611a      	str	r2, [r3, #16]
	return true;
  4012a0:	2401      	movs	r4, #1
  4012a2:	e0bb      	b.n	40141c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  4012a4:	2400      	movs	r4, #0
  4012a6:	e0b9      	b.n	40141c <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4012a8:	4b08      	ldr	r3, [pc, #32]	; (4012cc <udc_process_setup+0x1e4>)
  4012aa:	88db      	ldrh	r3, [r3, #6]
  4012ac:	b953      	cbnz	r3, 4012c4 <udc_process_setup+0x1dc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  4012ae:	4b07      	ldr	r3, [pc, #28]	; (4012cc <udc_process_setup+0x1e4>)
  4012b0:	885b      	ldrh	r3, [r3, #2]
  4012b2:	2b01      	cmp	r3, #1
  4012b4:	d108      	bne.n	4012c8 <udc_process_setup+0x1e0>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  4012b6:	4b06      	ldr	r3, [pc, #24]	; (4012d0 <udc_process_setup+0x1e8>)
  4012b8:	881a      	ldrh	r2, [r3, #0]
  4012ba:	f022 0202 	bic.w	r2, r2, #2
  4012be:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  4012c0:	2401      	movs	r4, #1
  4012c2:	e0ab      	b.n	40141c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  4012c4:	2400      	movs	r4, #0
  4012c6:	e0a9      	b.n	40141c <udc_process_setup+0x334>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
  4012c8:	2400      	movs	r4, #0
  4012ca:	e0a7      	b.n	40141c <udc_process_setup+0x334>
  4012cc:	20000c3c 	.word	0x20000c3c
  4012d0:	20000b0a 	.word	0x20000b0a
  4012d4:	00402a8d 	.word	0x00402a8d
  4012d8:	20000038 	.word	0x20000038
  4012dc:	200000ac 	.word	0x200000ac
  4012e0:	20000b0c 	.word	0x20000b0c
  4012e4:	20000b04 	.word	0x20000b04
  4012e8:	00400f2d 	.word	0x00400f2d
  4012ec:	20000b00 	.word	0x20000b00
  4012f0:	00402bd5 	.word	0x00402bd5
  4012f4:	20000b08 	.word	0x20000b08
  4012f8:	00400f15 	.word	0x00400f15
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  4012fc:	4b79      	ldr	r3, [pc, #484]	; (4014e4 <udc_process_setup+0x3fc>)
  4012fe:	88db      	ldrh	r3, [r3, #6]
  401300:	2b00      	cmp	r3, #0
  401302:	d131      	bne.n	401368 <udc_process_setup+0x280>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  401304:	4b78      	ldr	r3, [pc, #480]	; (4014e8 <udc_process_setup+0x400>)
  401306:	4798      	blx	r3
  401308:	2800      	cmp	r0, #0
  40130a:	d02f      	beq.n	40136c <udc_process_setup+0x284>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  40130c:	4b75      	ldr	r3, [pc, #468]	; (4014e4 <udc_process_setup+0x3fc>)
  40130e:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  401310:	4b76      	ldr	r3, [pc, #472]	; (4014ec <udc_process_setup+0x404>)
  401312:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401314:	7c5b      	ldrb	r3, [r3, #17]
  401316:	429a      	cmp	r2, r3
  401318:	dc2a      	bgt.n	401370 <udc_process_setup+0x288>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  40131a:	4b75      	ldr	r3, [pc, #468]	; (4014f0 <udc_process_setup+0x408>)
  40131c:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  40131e:	4b71      	ldr	r3, [pc, #452]	; (4014e4 <udc_process_setup+0x3fc>)
  401320:	789b      	ldrb	r3, [r3, #2]
  401322:	4a74      	ldr	r2, [pc, #464]	; (4014f4 <udc_process_setup+0x40c>)
  401324:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  401326:	b32b      	cbz	r3, 401374 <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401328:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  40132c:	3b01      	subs	r3, #1
  40132e:	4a6f      	ldr	r2, [pc, #444]	; (4014ec <udc_process_setup+0x404>)
  401330:	6852      	ldr	r2, [r2, #4]
  401332:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  401336:	4970      	ldr	r1, [pc, #448]	; (4014f8 <udc_process_setup+0x410>)
  401338:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40133a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40133e:	791b      	ldrb	r3, [r3, #4]
  401340:	b1d3      	cbz	r3, 401378 <udc_process_setup+0x290>
  401342:	2500      	movs	r5, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  401344:	462f      	mov	r7, r5
  401346:	4e6d      	ldr	r6, [pc, #436]	; (4014fc <udc_process_setup+0x414>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401348:	4688      	mov	r8, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  40134a:	4628      	mov	r0, r5
  40134c:	4639      	mov	r1, r7
  40134e:	47b0      	blx	r6
  401350:	4604      	mov	r4, r0
  401352:	2800      	cmp	r0, #0
  401354:	d062      	beq.n	40141c <udc_process_setup+0x334>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401356:	3501      	adds	r5, #1
  401358:	b2ed      	uxtb	r5, r5
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40135a:	f8d8 3000 	ldr.w	r3, [r8]
  40135e:	681b      	ldr	r3, [r3, #0]
  401360:	791b      	ldrb	r3, [r3, #4]
  401362:	42ab      	cmp	r3, r5
  401364:	d8f1      	bhi.n	40134a <udc_process_setup+0x262>
  401366:	e059      	b.n	40141c <udc_process_setup+0x334>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401368:	2400      	movs	r4, #0
  40136a:	e057      	b.n	40141c <udc_process_setup+0x334>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
  40136c:	2400      	movs	r4, #0
  40136e:	e055      	b.n	40141c <udc_process_setup+0x334>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  401370:	2400      	movs	r4, #0
  401372:	e053      	b.n	40141c <udc_process_setup+0x334>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
  401374:	2401      	movs	r4, #1
  401376:	e051      	b.n	40141c <udc_process_setup+0x334>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  401378:	2401      	movs	r4, #1
  40137a:	e04f      	b.n	40141c <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40137c:	2b01      	cmp	r3, #1
  40137e:	d11c      	bne.n	4013ba <udc_process_setup+0x2d2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401380:	4a58      	ldr	r2, [pc, #352]	; (4014e4 <udc_process_setup+0x3fc>)
  401382:	7852      	ldrb	r2, [r2, #1]
  401384:	2a0b      	cmp	r2, #11
  401386:	d118      	bne.n	4013ba <udc_process_setup+0x2d2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  401388:	4b56      	ldr	r3, [pc, #344]	; (4014e4 <udc_process_setup+0x3fc>)
  40138a:	88db      	ldrh	r3, [r3, #6]
  40138c:	b98b      	cbnz	r3, 4013b2 <udc_process_setup+0x2ca>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  40138e:	4b59      	ldr	r3, [pc, #356]	; (4014f4 <udc_process_setup+0x40c>)
  401390:	781b      	ldrb	r3, [r3, #0]
  401392:	b183      	cbz	r3, 4013b6 <udc_process_setup+0x2ce>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401394:	4b53      	ldr	r3, [pc, #332]	; (4014e4 <udc_process_setup+0x3fc>)
  401396:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401398:	885e      	ldrh	r6, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  40139a:	4628      	mov	r0, r5
  40139c:	4b58      	ldr	r3, [pc, #352]	; (401500 <udc_process_setup+0x418>)
  40139e:	4798      	blx	r3
  4013a0:	4604      	mov	r4, r0
  4013a2:	2800      	cmp	r0, #0
  4013a4:	d03a      	beq.n	40141c <udc_process_setup+0x334>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  4013a6:	4628      	mov	r0, r5
  4013a8:	b2f1      	uxtb	r1, r6
  4013aa:	4b54      	ldr	r3, [pc, #336]	; (4014fc <udc_process_setup+0x414>)
  4013ac:	4798      	blx	r3
  4013ae:	4604      	mov	r4, r0
  4013b0:	e034      	b.n	40141c <udc_process_setup+0x334>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
  4013b2:	2400      	movs	r4, #0
  4013b4:	e032      	b.n	40141c <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  4013b6:	2400      	movs	r4, #0
  4013b8:	e030      	b.n	40141c <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4013ba:	2b02      	cmp	r3, #2
  4013bc:	d130      	bne.n	401420 <udc_process_setup+0x338>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4013be:	4b49      	ldr	r3, [pc, #292]	; (4014e4 <udc_process_setup+0x3fc>)
  4013c0:	785b      	ldrb	r3, [r3, #1]
  4013c2:	2b01      	cmp	r3, #1
  4013c4:	d002      	beq.n	4013cc <udc_process_setup+0x2e4>
  4013c6:	2b03      	cmp	r3, #3
  4013c8:	d010      	beq.n	4013ec <udc_process_setup+0x304>
  4013ca:	e026      	b.n	40141a <udc_process_setup+0x332>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4013cc:	4b45      	ldr	r3, [pc, #276]	; (4014e4 <udc_process_setup+0x3fc>)
  4013ce:	88db      	ldrh	r3, [r3, #6]
  4013d0:	b943      	cbnz	r3, 4013e4 <udc_process_setup+0x2fc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4013d2:	4b44      	ldr	r3, [pc, #272]	; (4014e4 <udc_process_setup+0x3fc>)
  4013d4:	885b      	ldrh	r3, [r3, #2]
  4013d6:	b93b      	cbnz	r3, 4013e8 <udc_process_setup+0x300>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  4013d8:	4b42      	ldr	r3, [pc, #264]	; (4014e4 <udc_process_setup+0x3fc>)
  4013da:	7918      	ldrb	r0, [r3, #4]
  4013dc:	4b49      	ldr	r3, [pc, #292]	; (401504 <udc_process_setup+0x41c>)
  4013de:	4798      	blx	r3
  4013e0:	4604      	mov	r4, r0
  4013e2:	e01b      	b.n	40141c <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  4013e4:	2400      	movs	r4, #0
  4013e6:	e019      	b.n	40141c <udc_process_setup+0x334>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  4013e8:	2400      	movs	r4, #0
  4013ea:	e017      	b.n	40141c <udc_process_setup+0x334>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4013ec:	4b3d      	ldr	r3, [pc, #244]	; (4014e4 <udc_process_setup+0x3fc>)
  4013ee:	88db      	ldrh	r3, [r3, #6]
  4013f0:	b95b      	cbnz	r3, 40140a <udc_process_setup+0x322>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  4013f2:	4b3c      	ldr	r3, [pc, #240]	; (4014e4 <udc_process_setup+0x3fc>)
  4013f4:	885b      	ldrh	r3, [r3, #2]
  4013f6:	b953      	cbnz	r3, 40140e <udc_process_setup+0x326>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  4013f8:	4c3a      	ldr	r4, [pc, #232]	; (4014e4 <udc_process_setup+0x3fc>)
  4013fa:	7920      	ldrb	r0, [r4, #4]
  4013fc:	4b42      	ldr	r3, [pc, #264]	; (401508 <udc_process_setup+0x420>)
  4013fe:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401400:	7920      	ldrb	r0, [r4, #4]
  401402:	4b42      	ldr	r3, [pc, #264]	; (40150c <udc_process_setup+0x424>)
  401404:	4798      	blx	r3
  401406:	4604      	mov	r4, r0
  401408:	e008      	b.n	40141c <udc_process_setup+0x334>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  40140a:	2400      	movs	r4, #0
  40140c:	e006      	b.n	40141c <udc_process_setup+0x334>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  40140e:	2400      	movs	r4, #0
  401410:	e004      	b.n	40141c <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  401412:	2400      	movs	r4, #0
  401414:	e002      	b.n	40141c <udc_process_setup+0x334>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  401416:	2400      	movs	r4, #0
  401418:	e000      	b.n	40141c <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  40141a:	2400      	movs	r4, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  40141c:	2c00      	cmp	r4, #0
  40141e:	d15d      	bne.n	4014dc <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401420:	4b30      	ldr	r3, [pc, #192]	; (4014e4 <udc_process_setup+0x3fc>)
  401422:	781b      	ldrb	r3, [r3, #0]
  401424:	f003 031f 	and.w	r3, r3, #31
  401428:	2b01      	cmp	r3, #1
  40142a:	d11e      	bne.n	40146a <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  40142c:	4b31      	ldr	r3, [pc, #196]	; (4014f4 <udc_process_setup+0x40c>)
  40142e:	781b      	ldrb	r3, [r3, #0]
  401430:	b1db      	cbz	r3, 40146a <udc_process_setup+0x382>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401432:	4b2c      	ldr	r3, [pc, #176]	; (4014e4 <udc_process_setup+0x3fc>)
  401434:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401436:	4b30      	ldr	r3, [pc, #192]	; (4014f8 <udc_process_setup+0x410>)
  401438:	681d      	ldr	r5, [r3, #0]
  40143a:	682b      	ldr	r3, [r5, #0]
  40143c:	791b      	ldrb	r3, [r3, #4]
  40143e:	42a3      	cmp	r3, r4
  401440:	d913      	bls.n	40146a <udc_process_setup+0x382>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401442:	4620      	mov	r0, r4
  401444:	2100      	movs	r1, #0
  401446:	4b32      	ldr	r3, [pc, #200]	; (401510 <udc_process_setup+0x428>)
  401448:	4798      	blx	r3
  40144a:	b170      	cbz	r0, 40146a <udc_process_setup+0x382>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  40144c:	686b      	ldr	r3, [r5, #4]
  40144e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401452:	68eb      	ldr	r3, [r5, #12]
  401454:	4798      	blx	r3
  401456:	4601      	mov	r1, r0
  401458:	4620      	mov	r0, r4
  40145a:	4b2d      	ldr	r3, [pc, #180]	; (401510 <udc_process_setup+0x428>)
  40145c:	4798      	blx	r3
  40145e:	b120      	cbz	r0, 40146a <udc_process_setup+0x382>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  401460:	68ab      	ldr	r3, [r5, #8]
  401462:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  401464:	4604      	mov	r4, r0
  401466:	2800      	cmp	r0, #0
  401468:	d138      	bne.n	4014dc <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  40146a:	4b1e      	ldr	r3, [pc, #120]	; (4014e4 <udc_process_setup+0x3fc>)
  40146c:	781b      	ldrb	r3, [r3, #0]
  40146e:	f003 031f 	and.w	r3, r3, #31
  401472:	2b02      	cmp	r3, #2
  401474:	d128      	bne.n	4014c8 <udc_process_setup+0x3e0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401476:	4b1f      	ldr	r3, [pc, #124]	; (4014f4 <udc_process_setup+0x40c>)
  401478:	781b      	ldrb	r3, [r3, #0]
  40147a:	b1fb      	cbz	r3, 4014bc <udc_process_setup+0x3d4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40147c:	4b1e      	ldr	r3, [pc, #120]	; (4014f8 <udc_process_setup+0x410>)
  40147e:	681b      	ldr	r3, [r3, #0]
  401480:	681a      	ldr	r2, [r3, #0]
  401482:	7912      	ldrb	r2, [r2, #4]
  401484:	b1e2      	cbz	r2, 4014c0 <udc_process_setup+0x3d8>
  401486:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401488:	4f21      	ldr	r7, [pc, #132]	; (401510 <udc_process_setup+0x428>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40148a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4014f8 <udc_process_setup+0x410>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  40148e:	685b      	ldr	r3, [r3, #4]
  401490:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401494:	68f3      	ldr	r3, [r6, #12]
  401496:	4798      	blx	r3
  401498:	4601      	mov	r1, r0
  40149a:	4628      	mov	r0, r5
  40149c:	47b8      	blx	r7
  40149e:	4604      	mov	r4, r0
  4014a0:	b1e0      	cbz	r0, 4014dc <udc_process_setup+0x3f4>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  4014a2:	68b3      	ldr	r3, [r6, #8]
  4014a4:	4798      	blx	r3
  4014a6:	4604      	mov	r4, r0
  4014a8:	b9c0      	cbnz	r0, 4014dc <udc_process_setup+0x3f4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  4014aa:	3501      	adds	r5, #1
  4014ac:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4014ae:	f8d8 3000 	ldr.w	r3, [r8]
  4014b2:	681a      	ldr	r2, [r3, #0]
  4014b4:	7912      	ldrb	r2, [r2, #4]
  4014b6:	42aa      	cmp	r2, r5
  4014b8:	d8e9      	bhi.n	40148e <udc_process_setup+0x3a6>
  4014ba:	e00f      	b.n	4014dc <udc_process_setup+0x3f4>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  4014bc:	2400      	movs	r4, #0
  4014be:	e00d      	b.n	4014dc <udc_process_setup+0x3f4>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  4014c0:	2400      	movs	r4, #0
  4014c2:	e00b      	b.n	4014dc <udc_process_setup+0x3f4>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  4014c4:	2400      	movs	r4, #0
  4014c6:	e009      	b.n	4014dc <udc_process_setup+0x3f4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  4014c8:	2400      	movs	r4, #0
  4014ca:	e007      	b.n	4014dc <udc_process_setup+0x3f4>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  4014cc:	f013 0f60 	tst.w	r3, #96	; 0x60
  4014d0:	d1a6      	bne.n	401420 <udc_process_setup+0x338>
  4014d2:	e6cb      	b.n	40126c <udc_process_setup+0x184>
  4014d4:	f013 0f60 	tst.w	r3, #96	; 0x60
  4014d8:	d1a2      	bne.n	401420 <udc_process_setup+0x338>
  4014da:	e617      	b.n	40110c <udc_process_setup+0x24>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  4014dc:	4620      	mov	r0, r4
  4014de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4014e2:	bf00      	nop
  4014e4:	20000c3c 	.word	0x20000c3c
  4014e8:	00402a5d 	.word	0x00402a5d
  4014ec:	20000038 	.word	0x20000038
  4014f0:	00401065 	.word	0x00401065
  4014f4:	20000b0c 	.word	0x20000b0c
  4014f8:	20000b04 	.word	0x20000b04
  4014fc:	00400ffd 	.word	0x00400ffd
  401500:	00400f95 	.word	0x00400f95
  401504:	00402d01 	.word	0x00402d01
  401508:	00402f2d 	.word	0x00402f2d
  40150c:	00402c15 	.word	0x00402c15
  401510:	00400f2d 	.word	0x00400f2d

00401514 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  401514:	2301      	movs	r3, #1
  401516:	fa03 f101 	lsl.w	r1, r3, r1
  40151a:	6101      	str	r1, [r0, #16]
  40151c:	4770      	bx	lr
  40151e:	bf00      	nop

00401520 <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
  401520:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401524:	6143      	str	r3, [r0, #20]
  401526:	4770      	bx	lr

00401528 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
  401528:	6a00      	ldr	r0, [r0, #32]
}
  40152a:	4770      	bx	lr

0040152c <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  40152c:	2301      	movs	r3, #1
  40152e:	6003      	str	r3, [r0, #0]
  401530:	4770      	bx	lr
  401532:	bf00      	nop

00401534 <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  401534:	6843      	ldr	r3, [r0, #4]
  401536:	f023 0301 	bic.w	r3, r3, #1
  40153a:	6043      	str	r3, [r0, #4]
  40153c:	4770      	bx	lr
  40153e:	bf00      	nop

00401540 <dacc_set_writeprotect>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_enable 1 to enable, 0 to disable.
 */
void dacc_set_writeprotect(Dacc *p_dacc, uint32_t ul_enable)
{
	if (ul_enable) {
  401540:	b119      	cbz	r1, 40154a <dacc_set_writeprotect+0xa>
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY)
  401542:	4b04      	ldr	r3, [pc, #16]	; (401554 <dacc_set_writeprotect+0x14>)
  401544:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  401548:	4770      	bx	lr
			          | DACC_WPMR_WPEN;
	} else {
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY);
  40154a:	4b03      	ldr	r3, [pc, #12]	; (401558 <dacc_set_writeprotect+0x18>)
  40154c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  401550:	4770      	bx	lr
  401552:	bf00      	nop
  401554:	44414301 	.word	0x44414301
  401558:	44414300 	.word	0x44414300

0040155c <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
  40155c:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
  40155e:	6844      	ldr	r4, [r0, #4]
  401560:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
  401564:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
  401568:	0209      	lsls	r1, r1, #8
  40156a:	b289      	uxth	r1, r1
  40156c:	430c      	orrs	r4, r1
	if (ul_maxs) {
  40156e:	b112      	cbz	r2, 401576 <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
  401570:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  401574:	e001      	b.n	40157a <dacc_set_timing+0x1e>
	} else {
		mr &= ~DACC_MR_MAXS;
  401576:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  40157a:	061b      	lsls	r3, r3, #24
  40157c:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  401580:	431c      	orrs	r4, r3
	p_dacc->DACC_MR = mr;
  401582:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
  401584:	2000      	movs	r0, #0
  401586:	f85d 4b04 	ldr.w	r4, [sp], #4
  40158a:	4770      	bx	lr

0040158c <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  40158c:	2901      	cmp	r1, #1
  40158e:	d805      	bhi.n	40159c <dacc_enable_channel+0x10>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  401590:	2301      	movs	r3, #1
  401592:	fa03 f101 	lsl.w	r1, r3, r1
  401596:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  401598:	2000      	movs	r0, #0
  40159a:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  40159c:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  40159e:	4770      	bx	lr

004015a0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4015a0:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4015a2:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  4015a4:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4015a8:	d02e      	beq.n	401608 <pio_set_peripheral+0x68>
  4015aa:	d808      	bhi.n	4015be <pio_set_peripheral+0x1e>
  4015ac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4015b0:	d014      	beq.n	4015dc <pio_set_peripheral+0x3c>
  4015b2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4015b6:	d01d      	beq.n	4015f4 <pio_set_peripheral+0x54>
  4015b8:	2900      	cmp	r1, #0
  4015ba:	d135      	bne.n	401628 <pio_set_peripheral+0x88>
  4015bc:	e035      	b.n	40162a <pio_set_peripheral+0x8a>
  4015be:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4015c2:	d032      	beq.n	40162a <pio_set_peripheral+0x8a>
  4015c4:	d803      	bhi.n	4015ce <pio_set_peripheral+0x2e>
  4015c6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4015ca:	d027      	beq.n	40161c <pio_set_peripheral+0x7c>
  4015cc:	e02c      	b.n	401628 <pio_set_peripheral+0x88>
  4015ce:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4015d2:	d02a      	beq.n	40162a <pio_set_peripheral+0x8a>
  4015d4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4015d8:	d027      	beq.n	40162a <pio_set_peripheral+0x8a>
  4015da:	e025      	b.n	401628 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4015dc:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4015de:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4015e0:	43d3      	mvns	r3, r2
  4015e2:	4021      	ands	r1, r4
  4015e4:	4019      	ands	r1, r3
  4015e6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4015e8:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4015ea:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4015ec:	4021      	ands	r1, r4
  4015ee:	400b      	ands	r3, r1
  4015f0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4015f2:	e019      	b.n	401628 <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4015f4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4015f6:	4313      	orrs	r3, r2
  4015f8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4015fa:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4015fc:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4015fe:	400b      	ands	r3, r1
  401600:	ea23 0302 	bic.w	r3, r3, r2
  401604:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401606:	e00f      	b.n	401628 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401608:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40160a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40160c:	400b      	ands	r3, r1
  40160e:	ea23 0302 	bic.w	r3, r3, r2
  401612:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401614:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401616:	4313      	orrs	r3, r2
  401618:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40161a:	e005      	b.n	401628 <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40161c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40161e:	4313      	orrs	r3, r2
  401620:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401622:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401624:	4313      	orrs	r3, r2
  401626:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401628:	6042      	str	r2, [r0, #4]
}
  40162a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40162e:	4770      	bx	lr

00401630 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401630:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401632:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401634:	9c01      	ldr	r4, [sp, #4]
  401636:	b10c      	cbz	r4, 40163c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401638:	6641      	str	r1, [r0, #100]	; 0x64
  40163a:	e000      	b.n	40163e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40163c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40163e:	b10b      	cbz	r3, 401644 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401640:	6501      	str	r1, [r0, #80]	; 0x50
  401642:	e000      	b.n	401646 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401644:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401646:	b10a      	cbz	r2, 40164c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401648:	6301      	str	r1, [r0, #48]	; 0x30
  40164a:	e000      	b.n	40164e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40164c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40164e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401650:	6001      	str	r1, [r0, #0]
}
  401652:	f85d 4b04 	ldr.w	r4, [sp], #4
  401656:	4770      	bx	lr

00401658 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401658:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40165a:	4770      	bx	lr

0040165c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  40165c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40165e:	4770      	bx	lr

00401660 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401664:	4680      	mov	r8, r0
  401666:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401668:	4b12      	ldr	r3, [pc, #72]	; (4016b4 <pio_handler_process+0x54>)
  40166a:	4798      	blx	r3
  40166c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40166e:	4640      	mov	r0, r8
  401670:	4b11      	ldr	r3, [pc, #68]	; (4016b8 <pio_handler_process+0x58>)
  401672:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401674:	4005      	ands	r5, r0
  401676:	d012      	beq.n	40169e <pio_handler_process+0x3e>
  401678:	4c10      	ldr	r4, [pc, #64]	; (4016bc <pio_handler_process+0x5c>)
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40167a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  40167e:	42b3      	cmp	r3, r6
  401680:	d10a      	bne.n	401698 <pio_handler_process+0x38>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401682:	f854 1c08 	ldr.w	r1, [r4, #-8]
  401686:	4229      	tst	r1, r5
  401688:	d006      	beq.n	401698 <pio_handler_process+0x38>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40168a:	6823      	ldr	r3, [r4, #0]
  40168c:	4630      	mov	r0, r6
  40168e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401690:	f854 3c08 	ldr.w	r3, [r4, #-8]
  401694:	ea25 0503 	bic.w	r5, r5, r3
  401698:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  40169a:	2d00      	cmp	r5, #0
  40169c:	d1ed      	bne.n	40167a <pio_handler_process+0x1a>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  40169e:	4b08      	ldr	r3, [pc, #32]	; (4016c0 <pio_handler_process+0x60>)
  4016a0:	681b      	ldr	r3, [r3, #0]
  4016a2:	b123      	cbz	r3, 4016ae <pio_handler_process+0x4e>
		if (pio_capture_handler) {
  4016a4:	4b07      	ldr	r3, [pc, #28]	; (4016c4 <pio_handler_process+0x64>)
  4016a6:	681b      	ldr	r3, [r3, #0]
  4016a8:	b10b      	cbz	r3, 4016ae <pio_handler_process+0x4e>
			pio_capture_handler(p_pio);
  4016aa:	4640      	mov	r0, r8
  4016ac:	4798      	blx	r3
  4016ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4016b2:	bf00      	nop
  4016b4:	00401659 	.word	0x00401659
  4016b8:	0040165d 	.word	0x0040165d
  4016bc:	20000b24 	.word	0x20000b24
  4016c0:	20000c38 	.word	0x20000c38
  4016c4:	20000b14 	.word	0x20000b14

004016c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4016c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4016ca:	4802      	ldr	r0, [pc, #8]	; (4016d4 <PIOA_Handler+0xc>)
  4016cc:	210b      	movs	r1, #11
  4016ce:	4b02      	ldr	r3, [pc, #8]	; (4016d8 <PIOA_Handler+0x10>)
  4016d0:	4798      	blx	r3
  4016d2:	bd08      	pop	{r3, pc}
  4016d4:	400e0e00 	.word	0x400e0e00
  4016d8:	00401661 	.word	0x00401661

004016dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4016dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4016de:	4802      	ldr	r0, [pc, #8]	; (4016e8 <PIOB_Handler+0xc>)
  4016e0:	210c      	movs	r1, #12
  4016e2:	4b02      	ldr	r3, [pc, #8]	; (4016ec <PIOB_Handler+0x10>)
  4016e4:	4798      	blx	r3
  4016e6:	bd08      	pop	{r3, pc}
  4016e8:	400e1000 	.word	0x400e1000
  4016ec:	00401661 	.word	0x00401661

004016f0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4016f0:	4b17      	ldr	r3, [pc, #92]	; (401750 <pmc_switch_mck_to_pllack+0x60>)
  4016f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4016f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  4016f8:	4310      	orrs	r0, r2
  4016fa:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4016fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016fe:	f013 0f08 	tst.w	r3, #8
  401702:	d109      	bne.n	401718 <pmc_switch_mck_to_pllack+0x28>
  401704:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401708:	4911      	ldr	r1, [pc, #68]	; (401750 <pmc_switch_mck_to_pllack+0x60>)
  40170a:	e001      	b.n	401710 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40170c:	3b01      	subs	r3, #1
  40170e:	d019      	beq.n	401744 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401710:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401712:	f012 0f08 	tst.w	r2, #8
  401716:	d0f9      	beq.n	40170c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401718:	4b0d      	ldr	r3, [pc, #52]	; (401750 <pmc_switch_mck_to_pllack+0x60>)
  40171a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40171c:	f022 0203 	bic.w	r2, r2, #3
  401720:	f042 0202 	orr.w	r2, r2, #2
  401724:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401726:	6e98      	ldr	r0, [r3, #104]	; 0x68
  401728:	f010 0008 	ands.w	r0, r0, #8
  40172c:	d10c      	bne.n	401748 <pmc_switch_mck_to_pllack+0x58>
  40172e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401732:	4907      	ldr	r1, [pc, #28]	; (401750 <pmc_switch_mck_to_pllack+0x60>)
  401734:	e001      	b.n	40173a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401736:	3b01      	subs	r3, #1
  401738:	d008      	beq.n	40174c <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40173a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40173c:	f012 0f08 	tst.w	r2, #8
  401740:	d0f9      	beq.n	401736 <pmc_switch_mck_to_pllack+0x46>
  401742:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401744:	2001      	movs	r0, #1
  401746:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401748:	2000      	movs	r0, #0
  40174a:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40174c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40174e:	4770      	bx	lr
  401750:	400e0400 	.word	0x400e0400

00401754 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401754:	b138      	cbz	r0, 401766 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401756:	4911      	ldr	r1, [pc, #68]	; (40179c <pmc_switch_mainck_to_xtal+0x48>)
  401758:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40175a:	4a11      	ldr	r2, [pc, #68]	; (4017a0 <pmc_switch_mainck_to_xtal+0x4c>)
  40175c:	401a      	ands	r2, r3
  40175e:	4b11      	ldr	r3, [pc, #68]	; (4017a4 <pmc_switch_mainck_to_xtal+0x50>)
  401760:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401762:	620b      	str	r3, [r1, #32]
  401764:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401766:	4a0d      	ldr	r2, [pc, #52]	; (40179c <pmc_switch_mainck_to_xtal+0x48>)
  401768:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40176a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40176e:	f023 0303 	bic.w	r3, r3, #3
  401772:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401776:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40177a:	0209      	lsls	r1, r1, #8
  40177c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40177e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401780:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401782:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401784:	f013 0f01 	tst.w	r3, #1
  401788:	d0fb      	beq.n	401782 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40178a:	4a04      	ldr	r2, [pc, #16]	; (40179c <pmc_switch_mainck_to_xtal+0x48>)
  40178c:	6a13      	ldr	r3, [r2, #32]
  40178e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  401792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401796:	6213      	str	r3, [r2, #32]
  401798:	4770      	bx	lr
  40179a:	bf00      	nop
  40179c:	400e0400 	.word	0x400e0400
  4017a0:	fec8fffc 	.word	0xfec8fffc
  4017a4:	01370002 	.word	0x01370002

004017a8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4017a8:	4b02      	ldr	r3, [pc, #8]	; (4017b4 <pmc_osc_is_ready_mainck+0xc>)
  4017aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017ac:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4017b0:	4770      	bx	lr
  4017b2:	bf00      	nop
  4017b4:	400e0400 	.word	0x400e0400

004017b8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4017b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4017bc:	4b01      	ldr	r3, [pc, #4]	; (4017c4 <pmc_disable_pllack+0xc>)
  4017be:	629a      	str	r2, [r3, #40]	; 0x28
  4017c0:	4770      	bx	lr
  4017c2:	bf00      	nop
  4017c4:	400e0400 	.word	0x400e0400

004017c8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4017c8:	4b02      	ldr	r3, [pc, #8]	; (4017d4 <pmc_is_locked_pllack+0xc>)
  4017ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017cc:	f000 0002 	and.w	r0, r0, #2
  4017d0:	4770      	bx	lr
  4017d2:	bf00      	nop
  4017d4:	400e0400 	.word	0x400e0400

004017d8 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  4017d8:	2200      	movs	r2, #0
  4017da:	4b01      	ldr	r3, [pc, #4]	; (4017e0 <pmc_disable_pllbck+0x8>)
  4017dc:	62da      	str	r2, [r3, #44]	; 0x2c
  4017de:	4770      	bx	lr
  4017e0:	400e0400 	.word	0x400e0400

004017e4 <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  4017e4:	4b02      	ldr	r3, [pc, #8]	; (4017f0 <pmc_is_locked_pllbck+0xc>)
  4017e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4017e8:	f000 0004 	and.w	r0, r0, #4
  4017ec:	4770      	bx	lr
  4017ee:	bf00      	nop
  4017f0:	400e0400 	.word	0x400e0400

004017f4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4017f4:	2822      	cmp	r0, #34	; 0x22
  4017f6:	d820      	bhi.n	40183a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  4017f8:	281f      	cmp	r0, #31
  4017fa:	d80d      	bhi.n	401818 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4017fc:	4b12      	ldr	r3, [pc, #72]	; (401848 <pmc_enable_periph_clk+0x54>)
  4017fe:	699a      	ldr	r2, [r3, #24]
  401800:	2301      	movs	r3, #1
  401802:	4083      	lsls	r3, r0
  401804:	401a      	ands	r2, r3
  401806:	4293      	cmp	r3, r2
  401808:	d019      	beq.n	40183e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  40180a:	2301      	movs	r3, #1
  40180c:	fa03 f000 	lsl.w	r0, r3, r0
  401810:	4b0d      	ldr	r3, [pc, #52]	; (401848 <pmc_enable_periph_clk+0x54>)
  401812:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401814:	2000      	movs	r0, #0
  401816:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401818:	4b0b      	ldr	r3, [pc, #44]	; (401848 <pmc_enable_periph_clk+0x54>)
  40181a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  40181e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401820:	2301      	movs	r3, #1
  401822:	4083      	lsls	r3, r0
  401824:	401a      	ands	r2, r3
  401826:	4293      	cmp	r3, r2
  401828:	d00b      	beq.n	401842 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  40182a:	2301      	movs	r3, #1
  40182c:	fa03 f000 	lsl.w	r0, r3, r0
  401830:	4b05      	ldr	r3, [pc, #20]	; (401848 <pmc_enable_periph_clk+0x54>)
  401832:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401836:	2000      	movs	r0, #0
  401838:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40183a:	2001      	movs	r0, #1
  40183c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40183e:	2000      	movs	r0, #0
  401840:	4770      	bx	lr
  401842:	2000      	movs	r0, #0
}
  401844:	4770      	bx	lr
  401846:	bf00      	nop
  401848:	400e0400 	.word	0x400e0400

0040184c <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40184c:	2822      	cmp	r0, #34	; 0x22
  40184e:	d820      	bhi.n	401892 <pmc_disable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  401850:	281f      	cmp	r0, #31
  401852:	d80d      	bhi.n	401870 <pmc_disable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  401854:	4b12      	ldr	r3, [pc, #72]	; (4018a0 <pmc_disable_periph_clk+0x54>)
  401856:	699a      	ldr	r2, [r3, #24]
  401858:	2301      	movs	r3, #1
  40185a:	4083      	lsls	r3, r0
  40185c:	401a      	ands	r2, r3
  40185e:	4293      	cmp	r3, r2
  401860:	d119      	bne.n	401896 <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR0 = 1 << ul_id;
  401862:	2301      	movs	r3, #1
  401864:	fa03 f000 	lsl.w	r0, r3, r0
  401868:	4b0d      	ldr	r3, [pc, #52]	; (4018a0 <pmc_disable_periph_clk+0x54>)
  40186a:	6158      	str	r0, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  40186c:	2000      	movs	r0, #0
  40186e:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  401870:	4b0b      	ldr	r3, [pc, #44]	; (4018a0 <pmc_disable_periph_clk+0x54>)
  401872:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  401876:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  401878:	2301      	movs	r3, #1
  40187a:	4083      	lsls	r3, r0
  40187c:	401a      	ands	r2, r3
  40187e:	4293      	cmp	r3, r2
  401880:	d10b      	bne.n	40189a <pmc_disable_periph_clk+0x4e>
			PMC->PMC_PCDR1 = 1 << ul_id;
  401882:	2301      	movs	r3, #1
  401884:	fa03 f000 	lsl.w	r0, r3, r0
  401888:	4b05      	ldr	r3, [pc, #20]	; (4018a0 <pmc_disable_periph_clk+0x54>)
  40188a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  40188e:	2000      	movs	r0, #0
  401890:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401892:	2001      	movs	r0, #1
  401894:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  401896:	2000      	movs	r0, #0
  401898:	4770      	bx	lr
  40189a:	2000      	movs	r0, #0
}
  40189c:	4770      	bx	lr
  40189e:	bf00      	nop
  4018a0:	400e0400 	.word	0x400e0400

004018a4 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  4018a4:	0200      	lsls	r0, r0, #8
  4018a6:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
  4018aa:	f042 0201 	orr.w	r2, r2, #1
  4018ae:	4b01      	ldr	r3, [pc, #4]	; (4018b4 <pmc_switch_udpck_to_pllbck+0x10>)
  4018b0:	639a      	str	r2, [r3, #56]	; 0x38
  4018b2:	4770      	bx	lr
  4018b4:	400e0400 	.word	0x400e0400

004018b8 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
  4018b8:	2280      	movs	r2, #128	; 0x80
  4018ba:	4b01      	ldr	r3, [pc, #4]	; (4018c0 <pmc_enable_udpck+0x8>)
  4018bc:	601a      	str	r2, [r3, #0]
  4018be:	4770      	bx	lr
  4018c0:	400e0400 	.word	0x400e0400

004018c4 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  4018c4:	4b03      	ldr	r3, [pc, #12]	; (4018d4 <pmc_set_fast_startup_input+0x10>)
  4018c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  4018c8:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  4018cc:	4302      	orrs	r2, r0
  4018ce:	671a      	str	r2, [r3, #112]	; 0x70
  4018d0:	4770      	bx	lr
  4018d2:	bf00      	nop
  4018d4:	400e0400 	.word	0x400e0400

004018d8 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  4018d8:	4b02      	ldr	r3, [pc, #8]	; (4018e4 <pmc_is_wakeup_clocks_restored+0xc>)
  4018da:	7818      	ldrb	r0, [r3, #0]
}
  4018dc:	f080 0001 	eor.w	r0, r0, #1
  4018e0:	4770      	bx	lr
  4018e2:	bf00      	nop
  4018e4:	20000b88 	.word	0x20000b88

004018e8 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  4018e8:	0189      	lsls	r1, r1, #6
  4018ea:	2302      	movs	r3, #2
  4018ec:	5043      	str	r3, [r0, r1]
  4018ee:	4770      	bx	lr

004018f0 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
  4018f0:	4603      	mov	r3, r0
  4018f2:	bb58      	cbnz	r0, 40194c <udd_sleep_mode+0x5c>
  4018f4:	4a18      	ldr	r2, [pc, #96]	; (401958 <udd_sleep_mode+0x68>)
  4018f6:	7812      	ldrb	r2, [r2, #0]
  4018f8:	b32a      	cbz	r2, 401946 <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4018fa:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4018fe:	b672      	cpsid	i
  401900:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401904:	4a15      	ldr	r2, [pc, #84]	; (40195c <udd_sleep_mode+0x6c>)
  401906:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  401908:	4a15      	ldr	r2, [pc, #84]	; (401960 <udd_sleep_mode+0x70>)
  40190a:	7890      	ldrb	r0, [r2, #2]
  40190c:	3801      	subs	r0, #1
  40190e:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401910:	b9c9      	cbnz	r1, 401946 <udd_sleep_mode+0x56>
		cpu_irq_enable();
  401912:	2101      	movs	r1, #1
  401914:	4a11      	ldr	r2, [pc, #68]	; (40195c <udd_sleep_mode+0x6c>)
  401916:	7011      	strb	r1, [r2, #0]
  401918:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40191c:	b662      	cpsie	i
  40191e:	e012      	b.n	401946 <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401920:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401924:	b672      	cpsid	i
  401926:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40192a:	2000      	movs	r0, #0
  40192c:	4a0b      	ldr	r2, [pc, #44]	; (40195c <udd_sleep_mode+0x6c>)
  40192e:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  401930:	4a0b      	ldr	r2, [pc, #44]	; (401960 <udd_sleep_mode+0x70>)
  401932:	7890      	ldrb	r0, [r2, #2]
  401934:	3001      	adds	r0, #1
  401936:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401938:	b929      	cbnz	r1, 401946 <udd_sleep_mode+0x56>
		cpu_irq_enable();
  40193a:	2101      	movs	r1, #1
  40193c:	4a07      	ldr	r2, [pc, #28]	; (40195c <udd_sleep_mode+0x6c>)
  40193e:	7011      	strb	r1, [r2, #0]
  401940:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401944:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  401946:	4a04      	ldr	r2, [pc, #16]	; (401958 <udd_sleep_mode+0x68>)
  401948:	7013      	strb	r3, [r2, #0]
  40194a:	4770      	bx	lr
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  40194c:	4a02      	ldr	r2, [pc, #8]	; (401958 <udd_sleep_mode+0x68>)
  40194e:	7812      	ldrb	r2, [r2, #0]
  401950:	2a00      	cmp	r2, #0
  401952:	d0e5      	beq.n	401920 <udd_sleep_mode+0x30>
  401954:	e7f7      	b.n	401946 <udd_sleep_mode+0x56>
  401956:	bf00      	nop
  401958:	20000bc8 	.word	0x20000bc8
  40195c:	200000b0 	.word	0x200000b0
  401960:	20000c30 	.word	0x20000c30

00401964 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401964:	4a03      	ldr	r2, [pc, #12]	; (401974 <udd_ctrl_init+0x10>)
  401966:	2300      	movs	r3, #0
  401968:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40196a:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  40196c:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  40196e:	4a02      	ldr	r2, [pc, #8]	; (401978 <udd_ctrl_init+0x14>)
  401970:	7013      	strb	r3, [r2, #0]
  401972:	4770      	bx	lr
  401974:	20000c3c 	.word	0x20000c3c
  401978:	20000bcd 	.word	0x20000bcd

0040197c <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  40197c:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  40197e:	2205      	movs	r2, #5
  401980:	4b0e      	ldr	r3, [pc, #56]	; (4019bc <udd_ctrl_stall_data+0x40>)
  401982:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401984:	4b0e      	ldr	r3, [pc, #56]	; (4019c0 <udd_ctrl_stall_data+0x44>)
  401986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401988:	9200      	str	r2, [sp, #0]
  40198a:	9a00      	ldr	r2, [sp, #0]
  40198c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401990:	9200      	str	r2, [sp, #0]
  401992:	9a00      	ldr	r2, [sp, #0]
  401994:	f042 0220 	orr.w	r2, r2, #32
  401998:	9200      	str	r2, [sp, #0]
  40199a:	9a00      	ldr	r2, [sp, #0]
  40199c:	631a      	str	r2, [r3, #48]	; 0x30
  40199e:	2300      	movs	r3, #0
  4019a0:	9301      	str	r3, [sp, #4]
  4019a2:	9b01      	ldr	r3, [sp, #4]
  4019a4:	2b13      	cmp	r3, #19
  4019a6:	d806      	bhi.n	4019b6 <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4019a8:	bf00      	nop
  4019aa:	9b01      	ldr	r3, [sp, #4]
  4019ac:	3301      	adds	r3, #1
  4019ae:	9301      	str	r3, [sp, #4]
  4019b0:	9b01      	ldr	r3, [sp, #4]
  4019b2:	2b13      	cmp	r3, #19
  4019b4:	d9f8      	bls.n	4019a8 <udd_ctrl_stall_data+0x2c>
}
  4019b6:	b002      	add	sp, #8
  4019b8:	4770      	bx	lr
  4019ba:	bf00      	nop
  4019bc:	20000bcd 	.word	0x20000bcd
  4019c0:	40034000 	.word	0x40034000

004019c4 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  4019c4:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4019c6:	2203      	movs	r2, #3
  4019c8:	4b0e      	ldr	r3, [pc, #56]	; (401a04 <udd_ctrl_send_zlp_in+0x40>)
  4019ca:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  4019cc:	4b0e      	ldr	r3, [pc, #56]	; (401a08 <udd_ctrl_send_zlp_in+0x44>)
  4019ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4019d0:	9200      	str	r2, [sp, #0]
  4019d2:	9a00      	ldr	r2, [sp, #0]
  4019d4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4019d8:	9200      	str	r2, [sp, #0]
  4019da:	9a00      	ldr	r2, [sp, #0]
  4019dc:	f042 0210 	orr.w	r2, r2, #16
  4019e0:	9200      	str	r2, [sp, #0]
  4019e2:	9a00      	ldr	r2, [sp, #0]
  4019e4:	631a      	str	r2, [r3, #48]	; 0x30
  4019e6:	2300      	movs	r3, #0
  4019e8:	9301      	str	r3, [sp, #4]
  4019ea:	9b01      	ldr	r3, [sp, #4]
  4019ec:	2b13      	cmp	r3, #19
  4019ee:	d806      	bhi.n	4019fe <udd_ctrl_send_zlp_in+0x3a>
  4019f0:	bf00      	nop
  4019f2:	9b01      	ldr	r3, [sp, #4]
  4019f4:	3301      	adds	r3, #1
  4019f6:	9301      	str	r3, [sp, #4]
  4019f8:	9b01      	ldr	r3, [sp, #4]
  4019fa:	2b13      	cmp	r3, #19
  4019fc:	d9f8      	bls.n	4019f0 <udd_ctrl_send_zlp_in+0x2c>
}
  4019fe:	b002      	add	sp, #8
  401a00:	4770      	bx	lr
  401a02:	bf00      	nop
  401a04:	20000bcd 	.word	0x20000bcd
  401a08:	40034000 	.word	0x40034000

00401a0c <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401a0c:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401a0e:	4b02      	ldr	r3, [pc, #8]	; (401a18 <udd_ctrl_endofrequest+0xc>)
  401a10:	691b      	ldr	r3, [r3, #16]
  401a12:	b103      	cbz	r3, 401a16 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401a14:	4798      	blx	r3
  401a16:	bd08      	pop	{r3, pc}
  401a18:	20000c3c 	.word	0x20000c3c

00401a1c <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  401a1c:	b570      	push	{r4, r5, r6, lr}
  401a1e:	b08a      	sub	sp, #40	; 0x28
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401a20:	4b75      	ldr	r3, [pc, #468]	; (401bf8 <udd_ctrl_in_sent+0x1dc>)
  401a22:	781b      	ldrb	r3, [r3, #0]
  401a24:	2b03      	cmp	r3, #3
  401a26:	d11d      	bne.n	401a64 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  401a28:	4b74      	ldr	r3, [pc, #464]	; (401bfc <udd_ctrl_in_sent+0x1e0>)
  401a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a2c:	9200      	str	r2, [sp, #0]
  401a2e:	9a00      	ldr	r2, [sp, #0]
  401a30:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a34:	9200      	str	r2, [sp, #0]
  401a36:	9a00      	ldr	r2, [sp, #0]
  401a38:	f022 0201 	bic.w	r2, r2, #1
  401a3c:	9200      	str	r2, [sp, #0]
  401a3e:	9a00      	ldr	r2, [sp, #0]
  401a40:	631a      	str	r2, [r3, #48]	; 0x30
  401a42:	2300      	movs	r3, #0
  401a44:	9301      	str	r3, [sp, #4]
  401a46:	9b01      	ldr	r3, [sp, #4]
  401a48:	2b13      	cmp	r3, #19
  401a4a:	d806      	bhi.n	401a5a <udd_ctrl_in_sent+0x3e>
  401a4c:	bf00      	nop
  401a4e:	9b01      	ldr	r3, [sp, #4]
  401a50:	3301      	adds	r3, #1
  401a52:	9301      	str	r3, [sp, #4]
  401a54:	9b01      	ldr	r3, [sp, #4]
  401a56:	2b13      	cmp	r3, #19
  401a58:	d9f8      	bls.n	401a4c <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  401a5a:	4b69      	ldr	r3, [pc, #420]	; (401c00 <udd_ctrl_in_sent+0x1e4>)
  401a5c:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  401a5e:	4b69      	ldr	r3, [pc, #420]	; (401c04 <udd_ctrl_in_sent+0x1e8>)
  401a60:	4798      	blx	r3
		return;
  401a62:	e0c6      	b.n	401bf2 <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  401a64:	4b68      	ldr	r3, [pc, #416]	; (401c08 <udd_ctrl_in_sent+0x1ec>)
  401a66:	881b      	ldrh	r3, [r3, #0]
  401a68:	4a68      	ldr	r2, [pc, #416]	; (401c0c <udd_ctrl_in_sent+0x1f0>)
  401a6a:	8994      	ldrh	r4, [r2, #12]
  401a6c:	1ae4      	subs	r4, r4, r3
  401a6e:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401a70:	2c00      	cmp	r4, #0
  401a72:	d133      	bne.n	401adc <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401a74:	4a66      	ldr	r2, [pc, #408]	; (401c10 <udd_ctrl_in_sent+0x1f4>)
  401a76:	8811      	ldrh	r1, [r2, #0]
  401a78:	440b      	add	r3, r1
  401a7a:	b29b      	uxth	r3, r3
  401a7c:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  401a7e:	4a63      	ldr	r2, [pc, #396]	; (401c0c <udd_ctrl_in_sent+0x1f0>)
  401a80:	88d2      	ldrh	r2, [r2, #6]
  401a82:	429a      	cmp	r2, r3
  401a84:	d002      	beq.n	401a8c <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  401a86:	4b63      	ldr	r3, [pc, #396]	; (401c14 <udd_ctrl_in_sent+0x1f8>)
  401a88:	781b      	ldrb	r3, [r3, #0]
  401a8a:	b1eb      	cbz	r3, 401ac8 <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401a8c:	2204      	movs	r2, #4
  401a8e:	4b5a      	ldr	r3, [pc, #360]	; (401bf8 <udd_ctrl_in_sent+0x1dc>)
  401a90:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  401a92:	4b5a      	ldr	r3, [pc, #360]	; (401bfc <udd_ctrl_in_sent+0x1e0>)
  401a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a96:	9202      	str	r2, [sp, #8]
  401a98:	9a02      	ldr	r2, [sp, #8]
  401a9a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a9e:	9202      	str	r2, [sp, #8]
  401aa0:	9a02      	ldr	r2, [sp, #8]
  401aa2:	f022 0201 	bic.w	r2, r2, #1
  401aa6:	9202      	str	r2, [sp, #8]
  401aa8:	9a02      	ldr	r2, [sp, #8]
  401aaa:	631a      	str	r2, [r3, #48]	; 0x30
  401aac:	2300      	movs	r3, #0
  401aae:	9303      	str	r3, [sp, #12]
  401ab0:	9b03      	ldr	r3, [sp, #12]
  401ab2:	2b13      	cmp	r3, #19
  401ab4:	f200 809d 	bhi.w	401bf2 <udd_ctrl_in_sent+0x1d6>
  401ab8:	bf00      	nop
  401aba:	9b03      	ldr	r3, [sp, #12]
  401abc:	3301      	adds	r3, #1
  401abe:	9303      	str	r3, [sp, #12]
  401ac0:	9b03      	ldr	r3, [sp, #12]
  401ac2:	2b13      	cmp	r3, #19
  401ac4:	d9f8      	bls.n	401ab8 <udd_ctrl_in_sent+0x9c>
  401ac6:	e094      	b.n	401bf2 <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  401ac8:	4b50      	ldr	r3, [pc, #320]	; (401c0c <udd_ctrl_in_sent+0x1f0>)
  401aca:	695b      	ldr	r3, [r3, #20]
  401acc:	b16b      	cbz	r3, 401aea <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  401ace:	4798      	blx	r3
  401ad0:	b158      	cbz	r0, 401aea <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  401ad2:	2200      	movs	r2, #0
  401ad4:	4b4c      	ldr	r3, [pc, #304]	; (401c08 <udd_ctrl_in_sent+0x1ec>)
  401ad6:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401ad8:	4b4c      	ldr	r3, [pc, #304]	; (401c0c <udd_ctrl_in_sent+0x1f0>)
  401ada:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401adc:	2c3f      	cmp	r4, #63	; 0x3f
  401ade:	d904      	bls.n	401aea <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  401ae0:	2200      	movs	r2, #0
  401ae2:	4b4c      	ldr	r3, [pc, #304]	; (401c14 <udd_ctrl_in_sent+0x1f8>)
  401ae4:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401ae6:	2440      	movs	r4, #64	; 0x40
  401ae8:	e002      	b.n	401af0 <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  401aea:	2201      	movs	r2, #1
  401aec:	4b49      	ldr	r3, [pc, #292]	; (401c14 <udd_ctrl_in_sent+0x1f8>)
  401aee:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401af0:	4b46      	ldr	r3, [pc, #280]	; (401c0c <udd_ctrl_in_sent+0x1f0>)
  401af2:	6899      	ldr	r1, [r3, #8]
  401af4:	4b44      	ldr	r3, [pc, #272]	; (401c08 <udd_ctrl_in_sent+0x1ec>)
  401af6:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401af8:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401afc:	f1d0 0001 	rsbs	r0, r0, #1
  401b00:	bf38      	it	cc
  401b02:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401b04:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401b06:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b0a:	2200      	movs	r2, #0
  401b0c:	4b42      	ldr	r3, [pc, #264]	; (401c18 <udd_ctrl_in_sent+0x1fc>)
  401b0e:	701a      	strb	r2, [r3, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  401b10:	4b3a      	ldr	r3, [pc, #232]	; (401bfc <udd_ctrl_in_sent+0x1e0>)
  401b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b14:	f013 0f02 	tst.w	r3, #2
  401b18:	d101      	bne.n	401b1e <udd_ctrl_in_sent+0x102>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401b1a:	bb24      	cbnz	r4, 401b66 <udd_ctrl_in_sent+0x14a>
  401b1c:	e02d      	b.n	401b7a <udd_ctrl_in_sent+0x15e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401b1e:	b128      	cbz	r0, 401b2c <udd_ctrl_in_sent+0x110>
		cpu_irq_enable();
  401b20:	2201      	movs	r2, #1
  401b22:	4b3d      	ldr	r3, [pc, #244]	; (401c18 <udd_ctrl_in_sent+0x1fc>)
  401b24:	701a      	strb	r2, [r3, #0]
  401b26:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401b2a:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401b2c:	2204      	movs	r2, #4
  401b2e:	4b32      	ldr	r3, [pc, #200]	; (401bf8 <udd_ctrl_in_sent+0x1dc>)
  401b30:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  401b32:	4b32      	ldr	r3, [pc, #200]	; (401bfc <udd_ctrl_in_sent+0x1e0>)
  401b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401b36:	9204      	str	r2, [sp, #16]
  401b38:	9a04      	ldr	r2, [sp, #16]
  401b3a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401b3e:	9204      	str	r2, [sp, #16]
  401b40:	9a04      	ldr	r2, [sp, #16]
  401b42:	f022 0201 	bic.w	r2, r2, #1
  401b46:	9204      	str	r2, [sp, #16]
  401b48:	9a04      	ldr	r2, [sp, #16]
  401b4a:	631a      	str	r2, [r3, #48]	; 0x30
  401b4c:	2300      	movs	r3, #0
  401b4e:	9305      	str	r3, [sp, #20]
  401b50:	9b05      	ldr	r3, [sp, #20]
  401b52:	2b13      	cmp	r3, #19
  401b54:	d84d      	bhi.n	401bf2 <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401b56:	bf00      	nop
  401b58:	9b05      	ldr	r3, [sp, #20]
  401b5a:	3301      	adds	r3, #1
  401b5c:	9305      	str	r3, [sp, #20]
  401b5e:	9b05      	ldr	r3, [sp, #20]
  401b60:	2b13      	cmp	r3, #19
  401b62:	d9f8      	bls.n	401b56 <udd_ctrl_in_sent+0x13a>
  401b64:	e045      	b.n	401bf2 <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401b66:	4431      	add	r1, r6
  401b68:	460b      	mov	r3, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  401b6a:	4d24      	ldr	r5, [pc, #144]	; (401bfc <udd_ctrl_in_sent+0x1e0>)
  401b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
  401b70:	652a      	str	r2, [r5, #80]	; 0x50
  401b72:	1a5a      	subs	r2, r3, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401b74:	b2d2      	uxtb	r2, r2
  401b76:	42a2      	cmp	r2, r4
  401b78:	d3f8      	bcc.n	401b6c <udd_ctrl_in_sent+0x150>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  401b7a:	4434      	add	r4, r6
  401b7c:	4b22      	ldr	r3, [pc, #136]	; (401c08 <udd_ctrl_in_sent+0x1ec>)
  401b7e:	801c      	strh	r4, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  401b80:	4b1e      	ldr	r3, [pc, #120]	; (401bfc <udd_ctrl_in_sent+0x1e0>)
  401b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401b84:	9206      	str	r2, [sp, #24]
  401b86:	9a06      	ldr	r2, [sp, #24]
  401b88:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401b8c:	9206      	str	r2, [sp, #24]
  401b8e:	9a06      	ldr	r2, [sp, #24]
  401b90:	f042 0210 	orr.w	r2, r2, #16
  401b94:	9206      	str	r2, [sp, #24]
  401b96:	9a06      	ldr	r2, [sp, #24]
  401b98:	631a      	str	r2, [r3, #48]	; 0x30
  401b9a:	2300      	movs	r3, #0
  401b9c:	9307      	str	r3, [sp, #28]
  401b9e:	9b07      	ldr	r3, [sp, #28]
  401ba0:	2b13      	cmp	r3, #19
  401ba2:	d806      	bhi.n	401bb2 <udd_ctrl_in_sent+0x196>
  401ba4:	bf00      	nop
  401ba6:	9b07      	ldr	r3, [sp, #28]
  401ba8:	3301      	adds	r3, #1
  401baa:	9307      	str	r3, [sp, #28]
  401bac:	9b07      	ldr	r3, [sp, #28]
  401bae:	2b13      	cmp	r3, #19
  401bb0:	d9f8      	bls.n	401ba4 <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  401bb2:	4b12      	ldr	r3, [pc, #72]	; (401bfc <udd_ctrl_in_sent+0x1e0>)
  401bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401bb6:	9208      	str	r2, [sp, #32]
  401bb8:	9a08      	ldr	r2, [sp, #32]
  401bba:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401bbe:	9208      	str	r2, [sp, #32]
  401bc0:	9a08      	ldr	r2, [sp, #32]
  401bc2:	f022 0201 	bic.w	r2, r2, #1
  401bc6:	9208      	str	r2, [sp, #32]
  401bc8:	9a08      	ldr	r2, [sp, #32]
  401bca:	631a      	str	r2, [r3, #48]	; 0x30
  401bcc:	2300      	movs	r3, #0
  401bce:	9309      	str	r3, [sp, #36]	; 0x24
  401bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401bd2:	2b13      	cmp	r3, #19
  401bd4:	d806      	bhi.n	401be4 <udd_ctrl_in_sent+0x1c8>
  401bd6:	bf00      	nop
  401bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401bda:	3301      	adds	r3, #1
  401bdc:	9309      	str	r3, [sp, #36]	; 0x24
  401bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401be0:	2b13      	cmp	r3, #19
  401be2:	d9f8      	bls.n	401bd6 <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401be4:	b128      	cbz	r0, 401bf2 <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  401be6:	2201      	movs	r2, #1
  401be8:	4b0b      	ldr	r3, [pc, #44]	; (401c18 <udd_ctrl_in_sent+0x1fc>)
  401bea:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401bec:	f3bf 8f5f 	dmb	sy
  401bf0:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  401bf2:	b00a      	add	sp, #40	; 0x28
  401bf4:	bd70      	pop	{r4, r5, r6, pc}
  401bf6:	bf00      	nop
  401bf8:	20000bcd 	.word	0x20000bcd
  401bfc:	40034000 	.word	0x40034000
  401c00:	00401a0d 	.word	0x00401a0d
  401c04:	00401965 	.word	0x00401965
  401c08:	20000bca 	.word	0x20000bca
  401c0c:	20000c3c 	.word	0x20000c3c
  401c10:	20000b8a 	.word	0x20000b8a
  401c14:	20000bcc 	.word	0x20000bcc
  401c18:	200000b0 	.word	0x200000b0

00401c1c <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401c1c:	b538      	push	{r3, r4, r5, lr}
  401c1e:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  401c20:	7c44      	ldrb	r4, [r0, #17]
  401c22:	f014 0f10 	tst.w	r4, #16
  401c26:	d015      	beq.n	401c54 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  401c28:	7c44      	ldrb	r4, [r0, #17]
  401c2a:	f36f 1404 	bfc	r4, #4, #1
  401c2e:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401c30:	6804      	ldr	r4, [r0, #0]
  401c32:	b17c      	cbz	r4, 401c54 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401c34:	f102 050c 	add.w	r5, r2, #12
  401c38:	4807      	ldr	r0, [pc, #28]	; (401c58 <udd_ep_finish_job+0x3c>)
  401c3a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  401c3e:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401c42:	bf18      	it	ne
  401c44:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401c48:	2901      	cmp	r1, #1
  401c4a:	bf14      	ite	ne
  401c4c:	2000      	movne	r0, #0
  401c4e:	2001      	moveq	r0, #1
  401c50:	6899      	ldr	r1, [r3, #8]
  401c52:	47a0      	blx	r4
  401c54:	bd38      	pop	{r3, r4, r5, pc}
  401c56:	bf00      	nop
  401c58:	40034000 	.word	0x40034000

00401c5c <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401c5c:	b084      	sub	sp, #16
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401c5e:	1e42      	subs	r2, r0, #1
  401c60:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401c64:	4b2f      	ldr	r3, [pc, #188]	; (401d24 <udd_ep_ack_out_received+0xc8>)
  401c66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401c6a:	0083      	lsls	r3, r0, #2
  401c6c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401c70:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_all_banks_received(ep)) {
  401c74:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401c76:	f001 0142 	and.w	r1, r1, #66	; 0x42
  401c7a:	2942      	cmp	r1, #66	; 0x42
  401c7c:	d00e      	beq.n	401c9c <udd_ep_ack_out_received+0x40>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  401c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401c80:	f011 0f02 	tst.w	r1, #2
  401c84:	d004      	beq.n	401c90 <udd_ep_ack_out_received+0x34>
		// Must be bank0
		ptr_job->bank = 0;
  401c86:	7c51      	ldrb	r1, [r2, #17]
  401c88:	f36f 0183 	bfc	r1, #2, #2
  401c8c:	7451      	strb	r1, [r2, #17]
  401c8e:	e009      	b.n	401ca4 <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  401c90:	7c51      	ldrb	r1, [r2, #17]
  401c92:	2001      	movs	r0, #1
  401c94:	f360 0183 	bfi	r1, r0, #2, #2
  401c98:	7451      	strb	r1, [r2, #17]
  401c9a:	e024      	b.n	401ce6 <udd_ep_ack_out_received+0x8a>
	}
	if (ptr_job->bank == 0) {
  401c9c:	7c51      	ldrb	r1, [r2, #17]
  401c9e:	f011 0f0c 	tst.w	r1, #12
  401ca2:	d120      	bne.n	401ce6 <udd_ep_ack_out_received+0x8a>
		udd_ack_bank0_received(ep);
  401ca4:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401ca6:	9100      	str	r1, [sp, #0]
  401ca8:	9900      	ldr	r1, [sp, #0]
  401caa:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401cae:	9100      	str	r1, [sp, #0]
  401cb0:	9900      	ldr	r1, [sp, #0]
  401cb2:	f021 0102 	bic.w	r1, r1, #2
  401cb6:	9100      	str	r1, [sp, #0]
  401cb8:	9900      	ldr	r1, [sp, #0]
  401cba:	6319      	str	r1, [r3, #48]	; 0x30
  401cbc:	2300      	movs	r3, #0
  401cbe:	9301      	str	r3, [sp, #4]
  401cc0:	9b01      	ldr	r3, [sp, #4]
  401cc2:	2b13      	cmp	r3, #19
  401cc4:	d806      	bhi.n	401cd4 <udd_ep_ack_out_received+0x78>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401cc6:	bf00      	nop
  401cc8:	9b01      	ldr	r3, [sp, #4]
  401cca:	3301      	adds	r3, #1
  401ccc:	9301      	str	r3, [sp, #4]
  401cce:	9b01      	ldr	r3, [sp, #4]
  401cd0:	2b13      	cmp	r3, #19
  401cd2:	d9f8      	bls.n	401cc6 <udd_ep_ack_out_received+0x6a>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401cd4:	b318      	cbz	r0, 401d1e <udd_ep_ack_out_received+0xc2>
  401cd6:	2803      	cmp	r0, #3
  401cd8:	d021      	beq.n	401d1e <udd_ep_ack_out_received+0xc2>
			ptr_job->bank = 1;
  401cda:	7c53      	ldrb	r3, [r2, #17]
  401cdc:	2101      	movs	r1, #1
  401cde:	f361 0383 	bfi	r3, r1, #2, #2
  401ce2:	7453      	strb	r3, [r2, #17]
  401ce4:	e01b      	b.n	401d1e <udd_ep_ack_out_received+0xc2>
		}
	} else {
		udd_ack_bank1_received(ep);
  401ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401ce8:	9102      	str	r1, [sp, #8]
  401cea:	9902      	ldr	r1, [sp, #8]
  401cec:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401cf0:	9102      	str	r1, [sp, #8]
  401cf2:	9902      	ldr	r1, [sp, #8]
  401cf4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  401cf8:	9102      	str	r1, [sp, #8]
  401cfa:	9902      	ldr	r1, [sp, #8]
  401cfc:	6319      	str	r1, [r3, #48]	; 0x30
  401cfe:	2300      	movs	r3, #0
  401d00:	9303      	str	r3, [sp, #12]
  401d02:	9b03      	ldr	r3, [sp, #12]
  401d04:	2b13      	cmp	r3, #19
  401d06:	d806      	bhi.n	401d16 <udd_ep_ack_out_received+0xba>
  401d08:	bf00      	nop
  401d0a:	9b03      	ldr	r3, [sp, #12]
  401d0c:	3301      	adds	r3, #1
  401d0e:	9303      	str	r3, [sp, #12]
  401d10:	9b03      	ldr	r3, [sp, #12]
  401d12:	2b13      	cmp	r3, #19
  401d14:	d9f8      	bls.n	401d08 <udd_ep_ack_out_received+0xac>
		ptr_job->bank = 0;
  401d16:	7c53      	ldrb	r3, [r2, #17]
  401d18:	f36f 0383 	bfc	r3, #2, #2
  401d1c:	7453      	strb	r3, [r2, #17]
	}
}
  401d1e:	b004      	add	sp, #16
  401d20:	4770      	bx	lr
  401d22:	bf00      	nop
  401d24:	20000b8c 	.word	0x20000b8c

00401d28 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401d28:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  401d2c:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401d2e:	4607      	mov	r7, r0
  401d30:	1e46      	subs	r6, r0, #1
  401d32:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401d36:	4b52      	ldr	r3, [pc, #328]	; (401e80 <udd_ep_in_sent+0x158>)
  401d38:	eb03 0686 	add.w	r6, r3, r6, lsl #2

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401d3c:	7c73      	ldrb	r3, [r6, #17]
  401d3e:	f3c3 0381 	ubfx	r3, r3, #2, #2
  401d42:	b120      	cbz	r0, 401d4e <udd_ep_in_sent+0x26>
  401d44:	2803      	cmp	r0, #3
  401d46:	bf14      	ite	ne
  401d48:	2202      	movne	r2, #2
  401d4a:	2201      	moveq	r2, #1
  401d4c:	e000      	b.n	401d50 <udd_ep_in_sent+0x28>
  401d4e:	2201      	movs	r2, #1
  401d50:	429a      	cmp	r2, r3
  401d52:	f340 8089 	ble.w	401e68 <udd_ep_in_sent+0x140>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  401d56:	68f3      	ldr	r3, [r6, #12]
  401d58:	68b2      	ldr	r2, [r6, #8]
  401d5a:	4293      	cmp	r3, r2
  401d5c:	d304      	bcc.n	401d68 <udd_ep_in_sent+0x40>
  401d5e:	7c74      	ldrb	r4, [r6, #17]
  401d60:	f014 0f40 	tst.w	r4, #64	; 0x40
  401d64:	f000 8082 	beq.w	401e6c <udd_ep_in_sent+0x144>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401d68:	6874      	ldr	r4, [r6, #4]
  401d6a:	441c      	add	r4, r3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401d6c:	ebc3 0902 	rsb	r9, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401d70:	8a32      	ldrh	r2, [r6, #16]
  401d72:	f3c2 0209 	ubfx	r2, r2, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  401d76:	4591      	cmp	r9, r2
static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
  401d78:	bf26      	itte	cs
  401d7a:	4691      	movcs	r9, r2
	bool is_short_pkt = false;
  401d7c:	f04f 0800 	movcs.w	r8, #0

	// Packet size
	if (nb_remain < pkt_size) {
		pkt_size = nb_remain;
		is_short_pkt = true;
  401d80:	f04f 0801 	movcc.w	r8, #1
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  401d84:	444b      	add	r3, r9
  401d86:	60f3      	str	r3, [r6, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401d88:	f1b9 0f07 	cmp.w	r9, #7
  401d8c:	d926      	bls.n	401ddc <udd_ep_in_sent+0xb4>
  401d8e:	4623      	mov	r3, r4
  401d90:	f1a9 0a08 	sub.w	sl, r9, #8
  401d94:	ea4f 0ada 	mov.w	sl, sl, lsr #3
  401d98:	f104 0c08 	add.w	ip, r4, #8
  401d9c:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  401da0:	0082      	lsls	r2, r0, #2
  401da2:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401da6:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401daa:	781d      	ldrb	r5, [r3, #0]
  401dac:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401dae:	785d      	ldrb	r5, [r3, #1]
  401db0:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401db2:	789d      	ldrb	r5, [r3, #2]
  401db4:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401db6:	78dd      	ldrb	r5, [r3, #3]
  401db8:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401dba:	791d      	ldrb	r5, [r3, #4]
  401dbc:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401dbe:	795d      	ldrb	r5, [r3, #5]
  401dc0:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401dc2:	799d      	ldrb	r5, [r3, #6]
  401dc4:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401dc6:	79dd      	ldrb	r5, [r3, #7]
  401dc8:	6515      	str	r5, [r2, #80]	; 0x50
  401dca:	3308      	adds	r3, #8

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401dcc:	4563      	cmp	r3, ip
  401dce:	d1ec      	bne.n	401daa <udd_ep_in_sent+0x82>
  401dd0:	f10a 0a01 	add.w	sl, sl, #1
  401dd4:	eb04 04ca 	add.w	r4, r4, sl, lsl #3
  401dd8:	f009 0907 	and.w	r9, r9, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401ddc:	f1b9 0f00 	cmp.w	r9, #0
  401de0:	d009      	beq.n	401df6 <udd_ep_in_sent+0xce>
  401de2:	44a1      	add	r9, r4
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401de4:	4d27      	ldr	r5, [pc, #156]	; (401e84 <udd_ep_in_sent+0x15c>)
  401de6:	f814 2b01 	ldrb.w	r2, [r4], #1
  401dea:	f107 0314 	add.w	r3, r7, #20
  401dee:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401df2:	454c      	cmp	r4, r9
  401df4:	d1f7      	bne.n	401de6 <udd_ep_in_sent+0xbe>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  401df6:	7c73      	ldrb	r3, [r6, #17]
  401df8:	f3c3 0281 	ubfx	r2, r3, #2, #2
  401dfc:	3201      	adds	r2, #1
  401dfe:	f362 0383 	bfi	r3, r2, #2, #2
  401e02:	7473      	strb	r3, [r6, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401e04:	b1e1      	cbz	r1, 401e40 <udd_ep_in_sent+0x118>
  401e06:	0080      	lsls	r0, r0, #2
  401e08:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  401e0c:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  401e10:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401e12:	9300      	str	r3, [sp, #0]
  401e14:	9b00      	ldr	r3, [sp, #0]
  401e16:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e1a:	9300      	str	r3, [sp, #0]
  401e1c:	9b00      	ldr	r3, [sp, #0]
  401e1e:	f043 0310 	orr.w	r3, r3, #16
  401e22:	9300      	str	r3, [sp, #0]
  401e24:	9b00      	ldr	r3, [sp, #0]
  401e26:	6303      	str	r3, [r0, #48]	; 0x30
  401e28:	2300      	movs	r3, #0
  401e2a:	9301      	str	r3, [sp, #4]
  401e2c:	9b01      	ldr	r3, [sp, #4]
  401e2e:	2b13      	cmp	r3, #19
  401e30:	d806      	bhi.n	401e40 <udd_ep_in_sent+0x118>
  401e32:	bf00      	nop
  401e34:	9b01      	ldr	r3, [sp, #4]
  401e36:	3301      	adds	r3, #1
  401e38:	9301      	str	r3, [sp, #4]
  401e3a:	9b01      	ldr	r3, [sp, #4]
  401e3c:	2b13      	cmp	r3, #19
  401e3e:	d9f8      	bls.n	401e32 <udd_ep_in_sent+0x10a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  401e40:	f1b8 0f00 	cmp.w	r8, #0
  401e44:	d003      	beq.n	401e4e <udd_ep_in_sent+0x126>
		ptr_job->b_shortpacket = false;
  401e46:	7c73      	ldrb	r3, [r6, #17]
  401e48:	f36f 1386 	bfc	r3, #6, #1
  401e4c:	7473      	strb	r3, [r6, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401e4e:	68f2      	ldr	r2, [r6, #12]
  401e50:	68b3      	ldr	r3, [r6, #8]
  401e52:	429a      	cmp	r2, r3
  401e54:	d30c      	bcc.n	401e70 <udd_ep_in_sent+0x148>
			&& (!ptr_job->b_shortpacket)) {
  401e56:	7c73      	ldrb	r3, [r6, #17]
  401e58:	f013 0f40 	tst.w	r3, #64	; 0x40
  401e5c:	d10a      	bne.n	401e74 <udd_ep_in_sent+0x14c>
		ptr_job->b_buf_end = true;
  401e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401e62:	7473      	strb	r3, [r6, #17]
		return false;
  401e64:	2000      	movs	r0, #0
  401e66:	e006      	b.n	401e76 <udd_ep_in_sent+0x14e>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  401e68:	2001      	movs	r0, #1
  401e6a:	e004      	b.n	401e76 <udd_ep_in_sent+0x14e>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  401e6c:	2000      	movs	r0, #0
  401e6e:	e002      	b.n	401e76 <udd_ep_in_sent+0x14e>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  401e70:	2001      	movs	r0, #1
  401e72:	e000      	b.n	401e76 <udd_ep_in_sent+0x14e>
  401e74:	2001      	movs	r0, #1
}
  401e76:	b003      	add	sp, #12
  401e78:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  401e7c:	4770      	bx	lr
  401e7e:	bf00      	nop
  401e80:	20000b8c 	.word	0x20000b8c
  401e84:	40034000 	.word	0x40034000

00401e88 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401e8c:	b0b0      	sub	sp, #192	; 0xc0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401e8e:	4b94      	ldr	r3, [pc, #592]	; (4020e0 <UDP_Handler+0x258>)
  401e90:	4798      	blx	r3
  401e92:	b960      	cbnz	r0, 401eae <UDP_Handler+0x26>
  401e94:	4b93      	ldr	r3, [pc, #588]	; (4020e4 <UDP_Handler+0x25c>)
  401e96:	69db      	ldr	r3, [r3, #28]
  401e98:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e9c:	d107      	bne.n	401eae <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401e9e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401ea0:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401ea4:	2200      	movs	r2, #0
  401ea6:	4b90      	ldr	r3, [pc, #576]	; (4020e8 <UDP_Handler+0x260>)
  401ea8:	701a      	strb	r2, [r3, #0]
		return;
  401eaa:	f000 bd15 	b.w	4028d8 <UDP_Handler+0xa50>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  401eae:	2022      	movs	r0, #34	; 0x22
  401eb0:	4b8e      	ldr	r3, [pc, #568]	; (4020ec <UDP_Handler+0x264>)
  401eb2:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401eb4:	4b8b      	ldr	r3, [pc, #556]	; (4020e4 <UDP_Handler+0x25c>)
  401eb6:	699b      	ldr	r3, [r3, #24]
  401eb8:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401ebc:	d00c      	beq.n	401ed8 <UDP_Handler+0x50>
  401ebe:	4b89      	ldr	r3, [pc, #548]	; (4020e4 <UDP_Handler+0x25c>)
  401ec0:	69db      	ldr	r3, [r3, #28]
  401ec2:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401ec6:	d007      	beq.n	401ed8 <UDP_Handler+0x50>
		udd_ack_sof();
  401ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401ecc:	4b85      	ldr	r3, [pc, #532]	; (4020e4 <UDP_Handler+0x25c>)
  401ece:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401ed0:	4b87      	ldr	r3, [pc, #540]	; (4020f0 <UDP_Handler+0x268>)
  401ed2:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401ed4:	f000 bd00 	b.w	4028d8 <UDP_Handler+0xa50>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  401ed8:	4b82      	ldr	r3, [pc, #520]	; (4020e4 <UDP_Handler+0x25c>)
  401eda:	69db      	ldr	r3, [r3, #28]
  401edc:	f013 0f01 	tst.w	r3, #1
  401ee0:	f000 81f1 	beq.w	4022c6 <UDP_Handler+0x43e>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  401ee4:	4b7f      	ldr	r3, [pc, #508]	; (4020e4 <UDP_Handler+0x25c>)
  401ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401ee8:	f013 0f04 	tst.w	r3, #4
  401eec:	f000 80c0 	beq.w	402070 <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401ef0:	4b80      	ldr	r3, [pc, #512]	; (4020f4 <UDP_Handler+0x26c>)
  401ef2:	781b      	ldrb	r3, [r3, #0]
  401ef4:	b11b      	cbz	r3, 401efe <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  401ef6:	4b80      	ldr	r3, [pc, #512]	; (4020f8 <UDP_Handler+0x270>)
  401ef8:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  401efa:	4b80      	ldr	r3, [pc, #512]	; (4020fc <UDP_Handler+0x274>)
  401efc:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  401efe:	4b79      	ldr	r3, [pc, #484]	; (4020e4 <UDP_Handler+0x25c>)
  401f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f02:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401f06:	2b08      	cmp	r3, #8
  401f08:	d01c      	beq.n	401f44 <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  401f0a:	4b76      	ldr	r3, [pc, #472]	; (4020e4 <UDP_Handler+0x25c>)
  401f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401f0e:	9202      	str	r2, [sp, #8]
  401f10:	9a02      	ldr	r2, [sp, #8]
  401f12:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401f16:	9202      	str	r2, [sp, #8]
  401f18:	9a02      	ldr	r2, [sp, #8]
  401f1a:	f022 0204 	bic.w	r2, r2, #4
  401f1e:	9202      	str	r2, [sp, #8]
  401f20:	9a02      	ldr	r2, [sp, #8]
  401f22:	631a      	str	r2, [r3, #48]	; 0x30
  401f24:	2300      	movs	r3, #0
  401f26:	9303      	str	r3, [sp, #12]
  401f28:	9b03      	ldr	r3, [sp, #12]
  401f2a:	2b13      	cmp	r3, #19
  401f2c:	d806      	bhi.n	401f3c <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401f2e:	bf00      	nop
  401f30:	9b03      	ldr	r3, [sp, #12]
  401f32:	3301      	adds	r3, #1
  401f34:	9303      	str	r3, [sp, #12]
  401f36:	9b03      	ldr	r3, [sp, #12]
  401f38:	2b13      	cmp	r3, #19
  401f3a:	d9f8      	bls.n	401f2e <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  401f3c:	4b70      	ldr	r3, [pc, #448]	; (402100 <UDP_Handler+0x278>)
  401f3e:	4798      	blx	r3
  401f40:	f000 bcca 	b.w	4028d8 <UDP_Handler+0xa50>
  401f44:	4b6f      	ldr	r3, [pc, #444]	; (402104 <UDP_Handler+0x27c>)
  401f46:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  401f4a:	4966      	ldr	r1, [pc, #408]	; (4020e4 <UDP_Handler+0x25c>)
  401f4c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401f4e:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  401f52:	4283      	cmp	r3, r0
  401f54:	d1fa      	bne.n	401f4c <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  401f56:	4b6c      	ldr	r3, [pc, #432]	; (402108 <UDP_Handler+0x280>)
  401f58:	4798      	blx	r3
  401f5a:	b9e0      	cbnz	r0, 401f96 <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  401f5c:	4b61      	ldr	r3, [pc, #388]	; (4020e4 <UDP_Handler+0x25c>)
  401f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401f60:	9204      	str	r2, [sp, #16]
  401f62:	9a04      	ldr	r2, [sp, #16]
  401f64:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401f68:	9204      	str	r2, [sp, #16]
  401f6a:	9a04      	ldr	r2, [sp, #16]
  401f6c:	f022 0204 	bic.w	r2, r2, #4
  401f70:	9204      	str	r2, [sp, #16]
  401f72:	9a04      	ldr	r2, [sp, #16]
  401f74:	631a      	str	r2, [r3, #48]	; 0x30
  401f76:	2300      	movs	r3, #0
  401f78:	9305      	str	r3, [sp, #20]
  401f7a:	9b05      	ldr	r3, [sp, #20]
  401f7c:	2b13      	cmp	r3, #19
  401f7e:	d806      	bhi.n	401f8e <UDP_Handler+0x106>
  401f80:	bf00      	nop
  401f82:	9b05      	ldr	r3, [sp, #20]
  401f84:	3301      	adds	r3, #1
  401f86:	9305      	str	r3, [sp, #20]
  401f88:	9b05      	ldr	r3, [sp, #20]
  401f8a:	2b13      	cmp	r3, #19
  401f8c:	d9f8      	bls.n	401f80 <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  401f8e:	4b5c      	ldr	r3, [pc, #368]	; (402100 <UDP_Handler+0x278>)
  401f90:	4798      	blx	r3
  401f92:	f000 bca1 	b.w	4028d8 <UDP_Handler+0xa50>
		return;
	}

	if (Udd_setup_is_in()) {
  401f96:	4b5d      	ldr	r3, [pc, #372]	; (40210c <UDP_Handler+0x284>)
  401f98:	f993 3000 	ldrsb.w	r3, [r3]
  401f9c:	2b00      	cmp	r3, #0
  401f9e:	da3d      	bge.n	40201c <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  401fa0:	4b50      	ldr	r3, [pc, #320]	; (4020e4 <UDP_Handler+0x25c>)
  401fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fa4:	9206      	str	r2, [sp, #24]
  401fa6:	9a06      	ldr	r2, [sp, #24]
  401fa8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401fac:	9206      	str	r2, [sp, #24]
  401fae:	9a06      	ldr	r2, [sp, #24]
  401fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  401fb4:	9206      	str	r2, [sp, #24]
  401fb6:	9a06      	ldr	r2, [sp, #24]
  401fb8:	631a      	str	r2, [r3, #48]	; 0x30
  401fba:	2300      	movs	r3, #0
  401fbc:	9307      	str	r3, [sp, #28]
  401fbe:	9b07      	ldr	r3, [sp, #28]
  401fc0:	2b13      	cmp	r3, #19
  401fc2:	d806      	bhi.n	401fd2 <UDP_Handler+0x14a>
  401fc4:	bf00      	nop
  401fc6:	9b07      	ldr	r3, [sp, #28]
  401fc8:	3301      	adds	r3, #1
  401fca:	9307      	str	r3, [sp, #28]
  401fcc:	9b07      	ldr	r3, [sp, #28]
  401fce:	2b13      	cmp	r3, #19
  401fd0:	d9f8      	bls.n	401fc4 <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  401fd2:	4b44      	ldr	r3, [pc, #272]	; (4020e4 <UDP_Handler+0x25c>)
  401fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fd6:	9208      	str	r2, [sp, #32]
  401fd8:	9a08      	ldr	r2, [sp, #32]
  401fda:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401fde:	9208      	str	r2, [sp, #32]
  401fe0:	9a08      	ldr	r2, [sp, #32]
  401fe2:	f022 0204 	bic.w	r2, r2, #4
  401fe6:	9208      	str	r2, [sp, #32]
  401fe8:	9a08      	ldr	r2, [sp, #32]
  401fea:	631a      	str	r2, [r3, #48]	; 0x30
  401fec:	2300      	movs	r3, #0
  401fee:	9309      	str	r3, [sp, #36]	; 0x24
  401ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ff2:	2b13      	cmp	r3, #19
  401ff4:	d806      	bhi.n	402004 <UDP_Handler+0x17c>
  401ff6:	bf00      	nop
  401ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ffa:	3301      	adds	r3, #1
  401ffc:	9309      	str	r3, [sp, #36]	; 0x24
  401ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402000:	2b13      	cmp	r3, #19
  402002:	d9f8      	bls.n	401ff6 <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402004:	2300      	movs	r3, #0
  402006:	4a42      	ldr	r2, [pc, #264]	; (402110 <UDP_Handler+0x288>)
  402008:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  40200a:	4a42      	ldr	r2, [pc, #264]	; (402114 <UDP_Handler+0x28c>)
  40200c:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  40200e:	2202      	movs	r2, #2
  402010:	4b38      	ldr	r3, [pc, #224]	; (4020f4 <UDP_Handler+0x26c>)
  402012:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  402014:	4b40      	ldr	r3, [pc, #256]	; (402118 <UDP_Handler+0x290>)
  402016:	4798      	blx	r3
  402018:	f000 bc5e 	b.w	4028d8 <UDP_Handler+0xa50>
	} else {
		udd_ack_setup_received(0);
  40201c:	4b31      	ldr	r3, [pc, #196]	; (4020e4 <UDP_Handler+0x25c>)
  40201e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402020:	920a      	str	r2, [sp, #40]	; 0x28
  402022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402024:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402028:	920a      	str	r2, [sp, #40]	; 0x28
  40202a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40202c:	f022 0204 	bic.w	r2, r2, #4
  402030:	920a      	str	r2, [sp, #40]	; 0x28
  402032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  402034:	631a      	str	r2, [r3, #48]	; 0x30
  402036:	2300      	movs	r3, #0
  402038:	930b      	str	r3, [sp, #44]	; 0x2c
  40203a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40203c:	2b13      	cmp	r3, #19
  40203e:	d806      	bhi.n	40204e <UDP_Handler+0x1c6>
  402040:	bf00      	nop
  402042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402044:	3301      	adds	r3, #1
  402046:	930b      	str	r3, [sp, #44]	; 0x2c
  402048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40204a:	2b13      	cmp	r3, #19
  40204c:	d9f8      	bls.n	402040 <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  40204e:	4b2f      	ldr	r3, [pc, #188]	; (40210c <UDP_Handler+0x284>)
  402050:	88db      	ldrh	r3, [r3, #6]
  402052:	b91b      	cbnz	r3, 40205c <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  402054:	4b31      	ldr	r3, [pc, #196]	; (40211c <UDP_Handler+0x294>)
  402056:	4798      	blx	r3
  402058:	f000 bc3e 	b.w	4028d8 <UDP_Handler+0xa50>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  40205c:	2300      	movs	r3, #0
  40205e:	4a2c      	ldr	r2, [pc, #176]	; (402110 <UDP_Handler+0x288>)
  402060:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  402062:	4a2c      	ldr	r2, [pc, #176]	; (402114 <UDP_Handler+0x28c>)
  402064:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  402066:	2201      	movs	r2, #1
  402068:	4b22      	ldr	r3, [pc, #136]	; (4020f4 <UDP_Handler+0x26c>)
  40206a:	701a      	strb	r2, [r3, #0]
  40206c:	f000 bc34 	b.w	4028d8 <UDP_Handler+0xa50>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  402070:	4b1c      	ldr	r3, [pc, #112]	; (4020e4 <UDP_Handler+0x25c>)
  402072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402074:	f013 0f01 	tst.w	r3, #1
  402078:	d003      	beq.n	402082 <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  40207a:	4b27      	ldr	r3, [pc, #156]	; (402118 <UDP_Handler+0x290>)
  40207c:	4798      	blx	r3
  40207e:	f000 bc2b 	b.w	4028d8 <UDP_Handler+0xa50>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  402082:	4b18      	ldr	r3, [pc, #96]	; (4020e4 <UDP_Handler+0x25c>)
  402084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402086:	f013 0f02 	tst.w	r3, #2
  40208a:	f000 8117 	beq.w	4022bc <UDP_Handler+0x434>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  40208e:	4b19      	ldr	r3, [pc, #100]	; (4020f4 <UDP_Handler+0x26c>)
  402090:	781b      	ldrb	r3, [r3, #0]
  402092:	2b01      	cmp	r3, #1
  402094:	d044      	beq.n	402120 <UDP_Handler+0x298>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  402096:	2b02      	cmp	r3, #2
  402098:	d001      	beq.n	40209e <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40209a:	2b04      	cmp	r3, #4
  40209c:	d102      	bne.n	4020a4 <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  40209e:	4b16      	ldr	r3, [pc, #88]	; (4020f8 <UDP_Handler+0x270>)
  4020a0:	4798      	blx	r3
  4020a2:	e001      	b.n	4020a8 <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  4020a4:	4b16      	ldr	r3, [pc, #88]	; (402100 <UDP_Handler+0x278>)
  4020a6:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  4020a8:	4b0e      	ldr	r3, [pc, #56]	; (4020e4 <UDP_Handler+0x25c>)
  4020aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4020ac:	920c      	str	r2, [sp, #48]	; 0x30
  4020ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4020b0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020b4:	920c      	str	r2, [sp, #48]	; 0x30
  4020b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4020b8:	f022 0202 	bic.w	r2, r2, #2
  4020bc:	920c      	str	r2, [sp, #48]	; 0x30
  4020be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4020c0:	631a      	str	r2, [r3, #48]	; 0x30
  4020c2:	2300      	movs	r3, #0
  4020c4:	930d      	str	r3, [sp, #52]	; 0x34
  4020c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4020c8:	2b13      	cmp	r3, #19
  4020ca:	d806      	bhi.n	4020da <UDP_Handler+0x252>
  4020cc:	bf00      	nop
  4020ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4020d0:	3301      	adds	r3, #1
  4020d2:	930d      	str	r3, [sp, #52]	; 0x34
  4020d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4020d6:	2b13      	cmp	r3, #19
  4020d8:	d9f8      	bls.n	4020cc <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4020da:	4b08      	ldr	r3, [pc, #32]	; (4020fc <UDP_Handler+0x274>)
  4020dc:	4798      	blx	r3
  4020de:	e3fb      	b.n	4028d8 <UDP_Handler+0xa50>
  4020e0:	004018d9 	.word	0x004018d9
  4020e4:	40034000 	.word	0x40034000
  4020e8:	200000b0 	.word	0x200000b0
  4020ec:	004017f5 	.word	0x004017f5
  4020f0:	004010ad 	.word	0x004010ad
  4020f4:	20000bcd 	.word	0x20000bcd
  4020f8:	00401a0d 	.word	0x00401a0d
  4020fc:	00401965 	.word	0x00401965
  402100:	0040197d 	.word	0x0040197d
  402104:	20000c3b 	.word	0x20000c3b
  402108:	004010e9 	.word	0x004010e9
  40210c:	20000c3c 	.word	0x20000c3c
  402110:	20000b8a 	.word	0x20000b8a
  402114:	20000bca 	.word	0x20000bca
  402118:	00401a1d 	.word	0x00401a1d
  40211c:	004019c5 	.word	0x004019c5
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  402120:	4b90      	ldr	r3, [pc, #576]	; (402364 <UDP_Handler+0x4dc>)
  402122:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402124:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  402128:	4b8f      	ldr	r3, [pc, #572]	; (402368 <UDP_Handler+0x4e0>)
  40212a:	899b      	ldrh	r3, [r3, #12]
  40212c:	4a8f      	ldr	r2, [pc, #572]	; (40236c <UDP_Handler+0x4e4>)
  40212e:	8815      	ldrh	r5, [r2, #0]
  402130:	186a      	adds	r2, r5, r1
  402132:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  402134:	bfae      	itee	ge
  402136:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  402138:	ebc5 0303 	rsblt	r3, r5, r3
  40213c:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40213e:	4b8a      	ldr	r3, [pc, #552]	; (402368 <UDP_Handler+0x4e0>)
  402140:	6898      	ldr	r0, [r3, #8]
  402142:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  402144:	b1a9      	cbz	r1, 402172 <UDP_Handler+0x2ea>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402146:	4603      	mov	r3, r0
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  402148:	4c86      	ldr	r4, [pc, #536]	; (402364 <UDP_Handler+0x4dc>)
  40214a:	6d22      	ldr	r2, [r4, #80]	; 0x50
  40214c:	f803 2b01 	strb.w	r2, [r3], #1
  402150:	1a1a      	subs	r2, r3, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  402152:	b2d2      	uxtb	r2, r2
  402154:	428a      	cmp	r2, r1
  402156:	d3f8      	bcc.n	40214a <UDP_Handler+0x2c2>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  402158:	440d      	add	r5, r1
  40215a:	b2ad      	uxth	r5, r5
  40215c:	4b83      	ldr	r3, [pc, #524]	; (40236c <UDP_Handler+0x4e4>)
  40215e:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  402160:	2940      	cmp	r1, #64	; 0x40
  402162:	d106      	bne.n	402172 <UDP_Handler+0x2ea>
			|| (udd_g_ctrlreq.req.wLength <=
  402164:	4b80      	ldr	r3, [pc, #512]	; (402368 <UDP_Handler+0x4e0>)
  402166:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  402168:	4b81      	ldr	r3, [pc, #516]	; (402370 <UDP_Handler+0x4e8>)
  40216a:	881b      	ldrh	r3, [r3, #0]
  40216c:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  40216e:	429a      	cmp	r2, r3
  402170:	dc3e      	bgt.n	4021f0 <UDP_Handler+0x368>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  402172:	4b7d      	ldr	r3, [pc, #500]	; (402368 <UDP_Handler+0x4e0>)
  402174:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  402176:	695b      	ldr	r3, [r3, #20]
  402178:	b1f3      	cbz	r3, 4021b8 <UDP_Handler+0x330>
			if (!udd_g_ctrlreq.over_under_run()) {
  40217a:	4798      	blx	r3
  40217c:	b9e0      	cbnz	r0, 4021b8 <UDP_Handler+0x330>
				// Stall ZLP
				udd_ctrl_stall_data();
  40217e:	4b7d      	ldr	r3, [pc, #500]	; (402374 <UDP_Handler+0x4ec>)
  402180:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  402182:	4b78      	ldr	r3, [pc, #480]	; (402364 <UDP_Handler+0x4dc>)
  402184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402186:	920e      	str	r2, [sp, #56]	; 0x38
  402188:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40218a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40218e:	920e      	str	r2, [sp, #56]	; 0x38
  402190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402192:	f022 0202 	bic.w	r2, r2, #2
  402196:	920e      	str	r2, [sp, #56]	; 0x38
  402198:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40219a:	631a      	str	r2, [r3, #48]	; 0x30
  40219c:	2300      	movs	r3, #0
  40219e:	930f      	str	r3, [sp, #60]	; 0x3c
  4021a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4021a2:	2b13      	cmp	r3, #19
  4021a4:	f200 8398 	bhi.w	4028d8 <UDP_Handler+0xa50>
  4021a8:	bf00      	nop
  4021aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4021ac:	3301      	adds	r3, #1
  4021ae:	930f      	str	r3, [sp, #60]	; 0x3c
  4021b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4021b2:	2b13      	cmp	r3, #19
  4021b4:	d9f8      	bls.n	4021a8 <UDP_Handler+0x320>
  4021b6:	e38f      	b.n	4028d8 <UDP_Handler+0xa50>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  4021b8:	4b6a      	ldr	r3, [pc, #424]	; (402364 <UDP_Handler+0x4dc>)
  4021ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021bc:	9210      	str	r2, [sp, #64]	; 0x40
  4021be:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4021c0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4021c4:	9210      	str	r2, [sp, #64]	; 0x40
  4021c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4021c8:	f022 0202 	bic.w	r2, r2, #2
  4021cc:	9210      	str	r2, [sp, #64]	; 0x40
  4021ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4021d0:	631a      	str	r2, [r3, #48]	; 0x30
  4021d2:	2300      	movs	r3, #0
  4021d4:	9311      	str	r3, [sp, #68]	; 0x44
  4021d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4021d8:	2b13      	cmp	r3, #19
  4021da:	d806      	bhi.n	4021ea <UDP_Handler+0x362>
  4021dc:	bf00      	nop
  4021de:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4021e0:	3301      	adds	r3, #1
  4021e2:	9311      	str	r3, [sp, #68]	; 0x44
  4021e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4021e6:	2b13      	cmp	r3, #19
  4021e8:	d9f8      	bls.n	4021dc <UDP_Handler+0x354>
		udd_ctrl_send_zlp_in();
  4021ea:	4b63      	ldr	r3, [pc, #396]	; (402378 <UDP_Handler+0x4f0>)
  4021ec:	4798      	blx	r3
  4021ee:	e373      	b.n	4028d8 <UDP_Handler+0xa50>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  4021f0:	4b5d      	ldr	r3, [pc, #372]	; (402368 <UDP_Handler+0x4e0>)
  4021f2:	899b      	ldrh	r3, [r3, #12]
  4021f4:	42ab      	cmp	r3, r5
  4021f6:	d146      	bne.n	402286 <UDP_Handler+0x3fe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  4021f8:	4b5b      	ldr	r3, [pc, #364]	; (402368 <UDP_Handler+0x4e0>)
  4021fa:	695b      	ldr	r3, [r3, #20]
  4021fc:	b9e3      	cbnz	r3, 402238 <UDP_Handler+0x3b0>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  4021fe:	4b5d      	ldr	r3, [pc, #372]	; (402374 <UDP_Handler+0x4ec>)
  402200:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  402202:	4b58      	ldr	r3, [pc, #352]	; (402364 <UDP_Handler+0x4dc>)
  402204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402206:	9212      	str	r2, [sp, #72]	; 0x48
  402208:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40220a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40220e:	9212      	str	r2, [sp, #72]	; 0x48
  402210:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402212:	f022 0202 	bic.w	r2, r2, #2
  402216:	9212      	str	r2, [sp, #72]	; 0x48
  402218:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40221a:	631a      	str	r2, [r3, #48]	; 0x30
  40221c:	2300      	movs	r3, #0
  40221e:	9313      	str	r3, [sp, #76]	; 0x4c
  402220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402222:	2b13      	cmp	r3, #19
  402224:	f200 8358 	bhi.w	4028d8 <UDP_Handler+0xa50>
  402228:	bf00      	nop
  40222a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40222c:	3301      	adds	r3, #1
  40222e:	9313      	str	r3, [sp, #76]	; 0x4c
  402230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402232:	2b13      	cmp	r3, #19
  402234:	d9f8      	bls.n	402228 <UDP_Handler+0x3a0>
  402236:	e34f      	b.n	4028d8 <UDP_Handler+0xa50>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  402238:	4798      	blx	r3
  40223a:	b9e0      	cbnz	r0, 402276 <UDP_Handler+0x3ee>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  40223c:	4b4d      	ldr	r3, [pc, #308]	; (402374 <UDP_Handler+0x4ec>)
  40223e:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  402240:	4b48      	ldr	r3, [pc, #288]	; (402364 <UDP_Handler+0x4dc>)
  402242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402244:	9214      	str	r2, [sp, #80]	; 0x50
  402246:	9a14      	ldr	r2, [sp, #80]	; 0x50
  402248:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40224c:	9214      	str	r2, [sp, #80]	; 0x50
  40224e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  402250:	f022 0202 	bic.w	r2, r2, #2
  402254:	9214      	str	r2, [sp, #80]	; 0x50
  402256:	9a14      	ldr	r2, [sp, #80]	; 0x50
  402258:	631a      	str	r2, [r3, #48]	; 0x30
  40225a:	2300      	movs	r3, #0
  40225c:	9315      	str	r3, [sp, #84]	; 0x54
  40225e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402260:	2b13      	cmp	r3, #19
  402262:	f200 8339 	bhi.w	4028d8 <UDP_Handler+0xa50>
  402266:	bf00      	nop
  402268:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40226a:	3301      	adds	r3, #1
  40226c:	9315      	str	r3, [sp, #84]	; 0x54
  40226e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402270:	2b13      	cmp	r3, #19
  402272:	d9f8      	bls.n	402266 <UDP_Handler+0x3de>
  402274:	e330      	b.n	4028d8 <UDP_Handler+0xa50>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  402276:	4a3e      	ldr	r2, [pc, #248]	; (402370 <UDP_Handler+0x4e8>)
  402278:	4b3c      	ldr	r3, [pc, #240]	; (40236c <UDP_Handler+0x4e4>)
  40227a:	8818      	ldrh	r0, [r3, #0]
  40227c:	8811      	ldrh	r1, [r2, #0]
  40227e:	4401      	add	r1, r0
  402280:	8011      	strh	r1, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  402282:	2200      	movs	r2, #0
  402284:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  402286:	4b37      	ldr	r3, [pc, #220]	; (402364 <UDP_Handler+0x4dc>)
  402288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40228a:	9216      	str	r2, [sp, #88]	; 0x58
  40228c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40228e:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402292:	9216      	str	r2, [sp, #88]	; 0x58
  402294:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402296:	f022 0202 	bic.w	r2, r2, #2
  40229a:	9216      	str	r2, [sp, #88]	; 0x58
  40229c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40229e:	631a      	str	r2, [r3, #48]	; 0x30
  4022a0:	2300      	movs	r3, #0
  4022a2:	9317      	str	r3, [sp, #92]	; 0x5c
  4022a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4022a6:	2b13      	cmp	r3, #19
  4022a8:	f200 8316 	bhi.w	4028d8 <UDP_Handler+0xa50>
  4022ac:	bf00      	nop
  4022ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4022b0:	3301      	adds	r3, #1
  4022b2:	9317      	str	r3, [sp, #92]	; 0x5c
  4022b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4022b6:	2b13      	cmp	r3, #19
  4022b8:	d9f8      	bls.n	4022ac <UDP_Handler+0x424>
  4022ba:	e30d      	b.n	4028d8 <UDP_Handler+0xa50>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  4022bc:	4b29      	ldr	r3, [pc, #164]	; (402364 <UDP_Handler+0x4dc>)
  4022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4022c0:	f013 0f08 	tst.w	r3, #8
  4022c4:	d106      	bne.n	4022d4 <UDP_Handler+0x44c>
  4022c6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 40237c <UDP_Handler+0x4f4>
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  4022ca:	4664      	mov	r4, ip
  4022cc:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4022ce:	4a25      	ldr	r2, [pc, #148]	; (402364 <UDP_Handler+0x4dc>)
  4022d0:	461e      	mov	r6, r3
  4022d2:	e01a      	b.n	40230a <UDP_Handler+0x482>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  4022d4:	4b23      	ldr	r3, [pc, #140]	; (402364 <UDP_Handler+0x4dc>)
  4022d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022d8:	9200      	str	r2, [sp, #0]
  4022da:	9a00      	ldr	r2, [sp, #0]
  4022dc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022e0:	9200      	str	r2, [sp, #0]
  4022e2:	9a00      	ldr	r2, [sp, #0]
  4022e4:	f022 0208 	bic.w	r2, r2, #8
  4022e8:	9200      	str	r2, [sp, #0]
  4022ea:	9a00      	ldr	r2, [sp, #0]
  4022ec:	631a      	str	r2, [r3, #48]	; 0x30
  4022ee:	2300      	movs	r3, #0
  4022f0:	9301      	str	r3, [sp, #4]
  4022f2:	9b01      	ldr	r3, [sp, #4]
  4022f4:	2b13      	cmp	r3, #19
  4022f6:	f200 82ef 	bhi.w	4028d8 <UDP_Handler+0xa50>
  4022fa:	bf00      	nop
  4022fc:	9b01      	ldr	r3, [sp, #4]
  4022fe:	3301      	adds	r3, #1
  402300:	9301      	str	r3, [sp, #4]
  402302:	9b01      	ldr	r3, [sp, #4]
  402304:	2b13      	cmp	r3, #19
  402306:	d9f8      	bls.n	4022fa <UDP_Handler+0x472>
  402308:	e2e6      	b.n	4028d8 <UDP_Handler+0xa50>
  40230a:	fa5f f883 	uxtb.w	r8, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  40230e:	6991      	ldr	r1, [r2, #24]
  402310:	461f      	mov	r7, r3
  402312:	fa06 f503 	lsl.w	r5, r6, r3
  402316:	420d      	tst	r5, r1
  402318:	f000 81f1 	beq.w	4026fe <UDP_Handler+0x876>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  40231c:	46a1      	mov	r9, r4
  40231e:	0099      	lsls	r1, r3, #2
  402320:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  402324:	f501 3140 	add.w	r1, r1, #196608	; 0x30000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  402328:	6b08      	ldr	r0, [r1, #48]	; 0x30
  40232a:	f010 0f42 	tst.w	r0, #66	; 0x42
  40232e:	d044      	beq.n	4023ba <UDP_Handler+0x532>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  402330:	68a2      	ldr	r2, [r4, #8]
  402332:	68e3      	ldr	r3, [r4, #12]
	uint32_t pkt_size = ptr_job->size;
  402334:	f8b4 a010 	ldrh.w	sl, [r4, #16]
  402338:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  40233c:	6860      	ldr	r0, [r4, #4]
  40233e:	4418      	add	r0, r3
  402340:	460c      	mov	r4, r1
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  402342:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  402344:	f3c6 460a 	ubfx	r6, r6, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  402348:	2e00      	cmp	r6, #0
  40234a:	f000 82b6 	beq.w	4028ba <UDP_Handler+0xa32>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40234e:	1ad1      	subs	r1, r2, r3
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  402350:	42b1      	cmp	r1, r6
  402352:	f200 82a9 	bhi.w	4028a8 <UDP_Handler+0xa20>
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  402356:	f8c9 200c 	str.w	r2, [r9, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  40235a:	2900      	cmp	r1, #0
  40235c:	f040 82aa 	bne.w	4028b4 <UDP_Handler+0xa2c>
  402360:	e2b6      	b.n	4028d0 <UDP_Handler+0xa48>
  402362:	bf00      	nop
  402364:	40034000 	.word	0x40034000
  402368:	20000c3c 	.word	0x20000c3c
  40236c:	20000bca 	.word	0x20000bca
  402370:	20000b8a 	.word	0x20000b8a
  402374:	0040197d 	.word	0x0040197d
  402378:	004019c5 	.word	0x004019c5
  40237c:	20000b8c 	.word	0x20000b8c
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  402380:	6d22      	ldr	r2, [r4, #80]	; 0x50
  402382:	54c2      	strb	r2, [r0, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  402384:	3301      	adds	r3, #1
  402386:	428b      	cmp	r3, r1
  402388:	d3fa      	bcc.n	402380 <UDP_Handler+0x4f8>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  40238a:	4640      	mov	r0, r8
  40238c:	4b95      	ldr	r3, [pc, #596]	; (4025e4 <UDP_Handler+0x75c>)
  40238e:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  402390:	b917      	cbnz	r7, 402398 <UDP_Handler+0x510>
  402392:	45b2      	cmp	sl, r6
  402394:	f240 82a0 	bls.w	4028d8 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
  402398:	6b23      	ldr	r3, [r4, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  40239a:	f013 0f20 	tst.w	r3, #32
  40239e:	f040 829b 	bne.w	4028d8 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  4023a2:	4b91      	ldr	r3, [pc, #580]	; (4025e8 <UDP_Handler+0x760>)
  4023a4:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4023a6:	f8d9 300c 	ldr.w	r3, [r9, #12]
  4023aa:	f8c9 3008 	str.w	r3, [r9, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4023ae:	4648      	mov	r0, r9
  4023b0:	2100      	movs	r1, #0
  4023b2:	4642      	mov	r2, r8
  4023b4:	4b8d      	ldr	r3, [pc, #564]	; (4025ec <UDP_Handler+0x764>)
  4023b6:	4798      	blx	r3
  4023b8:	e28e      	b.n	4028d8 <UDP_Handler+0xa50>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4023ba:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4023bc:	f010 0f01 	tst.w	r0, #1
  4023c0:	f000 8173 	beq.w	4026aa <UDP_Handler+0x822>

			ptr_job->bank--;
  4023c4:	7c63      	ldrb	r3, [r4, #17]
  4023c6:	f3c3 0281 	ubfx	r2, r3, #2, #2
  4023ca:	3203      	adds	r2, #3
  4023cc:	f002 0203 	and.w	r2, r2, #3
  4023d0:	f362 0383 	bfi	r3, r2, #2, #2
  4023d4:	7463      	strb	r3, [r4, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4023d6:	f013 0f20 	tst.w	r3, #32
  4023da:	d074      	beq.n	4024c6 <UDP_Handler+0x63e>
				if (ptr_job->bank) {
  4023dc:	2a00      	cmp	r2, #0
  4023de:	d036      	beq.n	40244e <UDP_Handler+0x5c6>
  4023e0:	00ba      	lsls	r2, r7, #2
  4023e2:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4023e6:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
					// Send remaining
					udd_set_transmit_ready(ep);
  4023ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023ec:	9318      	str	r3, [sp, #96]	; 0x60
  4023ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4023f0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4023f4:	9318      	str	r3, [sp, #96]	; 0x60
  4023f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4023f8:	f043 0310 	orr.w	r3, r3, #16
  4023fc:	9318      	str	r3, [sp, #96]	; 0x60
  4023fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402400:	6313      	str	r3, [r2, #48]	; 0x30
  402402:	2300      	movs	r3, #0
  402404:	9319      	str	r3, [sp, #100]	; 0x64
  402406:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402408:	2b13      	cmp	r3, #19
  40240a:	d806      	bhi.n	40241a <UDP_Handler+0x592>
  40240c:	bf00      	nop
  40240e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402410:	3301      	adds	r3, #1
  402412:	9319      	str	r3, [sp, #100]	; 0x64
  402414:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402416:	2b13      	cmp	r3, #19
  402418:	d9f8      	bls.n	40240c <UDP_Handler+0x584>
					udd_ack_in_sent(ep);
  40241a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40241c:	931a      	str	r3, [sp, #104]	; 0x68
  40241e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402420:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402424:	931a      	str	r3, [sp, #104]	; 0x68
  402426:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402428:	f023 0301 	bic.w	r3, r3, #1
  40242c:	931a      	str	r3, [sp, #104]	; 0x68
  40242e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402430:	6313      	str	r3, [r2, #48]	; 0x30
  402432:	2300      	movs	r3, #0
  402434:	931b      	str	r3, [sp, #108]	; 0x6c
  402436:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402438:	2b13      	cmp	r3, #19
  40243a:	f200 824d 	bhi.w	4028d8 <UDP_Handler+0xa50>
  40243e:	bf00      	nop
  402440:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402442:	3301      	adds	r3, #1
  402444:	931b      	str	r3, [sp, #108]	; 0x6c
  402446:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402448:	2b13      	cmp	r3, #19
  40244a:	d9f8      	bls.n	40243e <UDP_Handler+0x5b6>
  40244c:	e244      	b.n	4028d8 <UDP_Handler+0xa50>
  40244e:	00ba      	lsls	r2, r7, #2
  402450:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402454:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  402458:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40245a:	931c      	str	r3, [sp, #112]	; 0x70
  40245c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40245e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402462:	931c      	str	r3, [sp, #112]	; 0x70
  402464:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  402466:	f023 0301 	bic.w	r3, r3, #1
  40246a:	931c      	str	r3, [sp, #112]	; 0x70
  40246c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40246e:	6313      	str	r3, [r2, #48]	; 0x30
  402470:	2300      	movs	r3, #0
  402472:	931d      	str	r3, [sp, #116]	; 0x74
  402474:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402476:	2b13      	cmp	r3, #19
  402478:	d806      	bhi.n	402488 <UDP_Handler+0x600>
  40247a:	bf00      	nop
  40247c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40247e:	3301      	adds	r3, #1
  402480:	931d      	str	r3, [sp, #116]	; 0x74
  402482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402484:	2b13      	cmp	r3, #19
  402486:	d9f8      	bls.n	40247a <UDP_Handler+0x5f2>
					// Enable stall
					udd_enable_stall_handshake(ep);
  402488:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40248a:	931e      	str	r3, [sp, #120]	; 0x78
  40248c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40248e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402492:	931e      	str	r3, [sp, #120]	; 0x78
  402494:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402496:	f043 0320 	orr.w	r3, r3, #32
  40249a:	931e      	str	r3, [sp, #120]	; 0x78
  40249c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40249e:	6313      	str	r3, [r2, #48]	; 0x30
  4024a0:	2300      	movs	r3, #0
  4024a2:	931f      	str	r3, [sp, #124]	; 0x7c
  4024a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4024a6:	2b13      	cmp	r3, #19
  4024a8:	d806      	bhi.n	4024b8 <UDP_Handler+0x630>
  4024aa:	bf00      	nop
  4024ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4024ae:	3301      	adds	r3, #1
  4024b0:	931f      	str	r3, [sp, #124]	; 0x7c
  4024b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4024b4:	2b13      	cmp	r3, #19
  4024b6:	d9f8      	bls.n	4024aa <UDP_Handler+0x622>
					// Halt executed
					ptr_job->b_stall_requested = false;
  4024b8:	f899 3011 	ldrb.w	r3, [r9, #17]
  4024bc:	f36f 1345 	bfc	r3, #5, #1
  4024c0:	f889 3011 	strb.w	r3, [r9, #17]
  4024c4:	e208      	b.n	4028d8 <UDP_Handler+0xa50>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  4024c6:	7c63      	ldrb	r3, [r4, #17]
  4024c8:	09db      	lsrs	r3, r3, #7
  4024ca:	d00a      	beq.n	4024e2 <UDP_Handler+0x65a>
				ptr_job->b_buf_end = false;
  4024cc:	7c63      	ldrb	r3, [r4, #17]
  4024ce:	f36f 13c7 	bfc	r3, #7, #1
  4024d2:	7463      	strb	r3, [r4, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4024d4:	68e3      	ldr	r3, [r4, #12]
  4024d6:	60a3      	str	r3, [r4, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4024d8:	4620      	mov	r0, r4
  4024da:	2100      	movs	r1, #0
  4024dc:	4642      	mov	r2, r8
  4024de:	4b43      	ldr	r3, [pc, #268]	; (4025ec <UDP_Handler+0x764>)
  4024e0:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  4024e2:	f8d9 200c 	ldr.w	r2, [r9, #12]
  4024e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4024ea:	429a      	cmp	r2, r3
  4024ec:	d334      	bcc.n	402558 <UDP_Handler+0x6d0>
					!ptr_job->b_shortpacket &&
  4024ee:	f899 3011 	ldrb.w	r3, [r9, #17]
  4024f2:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  4024f6:	d12f      	bne.n	402558 <UDP_Handler+0x6d0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4024f8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4024fc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4024fe:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402502:	2100      	movs	r1, #0
  402504:	4a3a      	ldr	r2, [pc, #232]	; (4025f0 <UDP_Handler+0x768>)
  402506:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  402508:	4a37      	ldr	r2, [pc, #220]	; (4025e8 <UDP_Handler+0x760>)
  40250a:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40250c:	b92b      	cbnz	r3, 40251a <UDP_Handler+0x692>
		cpu_irq_enable();
  40250e:	2201      	movs	r2, #1
  402510:	4b37      	ldr	r3, [pc, #220]	; (4025f0 <UDP_Handler+0x768>)
  402512:	701a      	strb	r2, [r3, #0]
  402514:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402518:	b662      	cpsie	i
  40251a:	00bb      	lsls	r3, r7, #2
  40251c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402520:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  402524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402526:	9220      	str	r2, [sp, #128]	; 0x80
  402528:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40252a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40252e:	9220      	str	r2, [sp, #128]	; 0x80
  402530:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402532:	f022 0201 	bic.w	r2, r2, #1
  402536:	9220      	str	r2, [sp, #128]	; 0x80
  402538:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40253a:	631a      	str	r2, [r3, #48]	; 0x30
  40253c:	2300      	movs	r3, #0
  40253e:	9321      	str	r3, [sp, #132]	; 0x84
  402540:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402542:	2b13      	cmp	r3, #19
  402544:	f200 81c8 	bhi.w	4028d8 <UDP_Handler+0xa50>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402548:	bf00      	nop
  40254a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40254c:	3301      	adds	r3, #1
  40254e:	9321      	str	r3, [sp, #132]	; 0x84
  402550:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402552:	2b13      	cmp	r3, #19
  402554:	d9f8      	bls.n	402548 <UDP_Handler+0x6c0>
  402556:	e1bf      	b.n	4028d8 <UDP_Handler+0xa50>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  402558:	f1b8 0f00 	cmp.w	r8, #0
  40255c:	f000 8082 	beq.w	402664 <UDP_Handler+0x7dc>
  402560:	f1b8 0f03 	cmp.w	r8, #3
  402564:	d07e      	beq.n	402664 <UDP_Handler+0x7dc>
					&& ptr_job->bank > 0) {
  402566:	f899 3011 	ldrb.w	r3, [r9, #17]
  40256a:	f013 0f0c 	tst.w	r3, #12
  40256e:	d043      	beq.n	4025f8 <UDP_Handler+0x770>
  402570:	00ba      	lsls	r2, r7, #2
  402572:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402576:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  40257a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40257c:	9322      	str	r3, [sp, #136]	; 0x88
  40257e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402580:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402584:	9322      	str	r3, [sp, #136]	; 0x88
  402586:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402588:	f043 0310 	orr.w	r3, r3, #16
  40258c:	9322      	str	r3, [sp, #136]	; 0x88
  40258e:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402590:	6313      	str	r3, [r2, #48]	; 0x30
  402592:	2300      	movs	r3, #0
  402594:	9323      	str	r3, [sp, #140]	; 0x8c
  402596:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402598:	2b13      	cmp	r3, #19
  40259a:	d806      	bhi.n	4025aa <UDP_Handler+0x722>
  40259c:	bf00      	nop
  40259e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4025a0:	3301      	adds	r3, #1
  4025a2:	9323      	str	r3, [sp, #140]	; 0x8c
  4025a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4025a6:	2b13      	cmp	r3, #19
  4025a8:	d9f8      	bls.n	40259c <UDP_Handler+0x714>
				udd_ack_in_sent(ep);
  4025aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025ac:	9324      	str	r3, [sp, #144]	; 0x90
  4025ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4025b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4025b4:	9324      	str	r3, [sp, #144]	; 0x90
  4025b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4025b8:	f023 0301 	bic.w	r3, r3, #1
  4025bc:	9324      	str	r3, [sp, #144]	; 0x90
  4025be:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4025c0:	6313      	str	r3, [r2, #48]	; 0x30
  4025c2:	2300      	movs	r3, #0
  4025c4:	9325      	str	r3, [sp, #148]	; 0x94
  4025c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4025c8:	2b13      	cmp	r3, #19
  4025ca:	d806      	bhi.n	4025da <UDP_Handler+0x752>
  4025cc:	bf00      	nop
  4025ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4025d0:	3301      	adds	r3, #1
  4025d2:	9325      	str	r3, [sp, #148]	; 0x94
  4025d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4025d6:	2b13      	cmp	r3, #19
  4025d8:	d9f8      	bls.n	4025cc <UDP_Handler+0x744>
				udd_ep_in_sent(ep, false);
  4025da:	4640      	mov	r0, r8
  4025dc:	2100      	movs	r1, #0
  4025de:	4b05      	ldr	r3, [pc, #20]	; (4025f4 <UDP_Handler+0x76c>)
  4025e0:	4798      	blx	r3
  4025e2:	e179      	b.n	4028d8 <UDP_Handler+0xa50>
  4025e4:	00401c5d 	.word	0x00401c5d
  4025e8:	40034000 	.word	0x40034000
  4025ec:	00401c1d 	.word	0x00401c1d
  4025f0:	200000b0 	.word	0x200000b0
  4025f4:	00401d29 	.word	0x00401d29
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  4025f8:	4640      	mov	r0, r8
  4025fa:	2101      	movs	r1, #1
  4025fc:	4b67      	ldr	r3, [pc, #412]	; (40279c <UDP_Handler+0x914>)
  4025fe:	4798      	blx	r3
  402600:	b970      	cbnz	r0, 402620 <UDP_Handler+0x798>
					ptr_job->b_buf_end = false;
  402602:	f899 3011 	ldrb.w	r3, [r9, #17]
  402606:	f36f 13c7 	bfc	r3, #7, #1
  40260a:	f889 3011 	strb.w	r3, [r9, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40260e:	f8d9 300c 	ldr.w	r3, [r9, #12]
  402612:	f8c9 3008 	str.w	r3, [r9, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402616:	4648      	mov	r0, r9
  402618:	2100      	movs	r1, #0
  40261a:	4642      	mov	r2, r8
  40261c:	4b60      	ldr	r3, [pc, #384]	; (4027a0 <UDP_Handler+0x918>)
  40261e:	4798      	blx	r3
  402620:	00bb      	lsls	r3, r7, #2
  402622:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402626:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				}
				udd_ack_in_sent(ep);
  40262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40262c:	9226      	str	r2, [sp, #152]	; 0x98
  40262e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402630:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402634:	9226      	str	r2, [sp, #152]	; 0x98
  402636:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402638:	f022 0201 	bic.w	r2, r2, #1
  40263c:	9226      	str	r2, [sp, #152]	; 0x98
  40263e:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402640:	631a      	str	r2, [r3, #48]	; 0x30
  402642:	2300      	movs	r3, #0
  402644:	9327      	str	r3, [sp, #156]	; 0x9c
  402646:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402648:	2b13      	cmp	r3, #19
  40264a:	d806      	bhi.n	40265a <UDP_Handler+0x7d2>
  40264c:	bf00      	nop
  40264e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402650:	3301      	adds	r3, #1
  402652:	9327      	str	r3, [sp, #156]	; 0x9c
  402654:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402656:	2b13      	cmp	r3, #19
  402658:	d9f8      	bls.n	40264c <UDP_Handler+0x7c4>
				udd_ep_in_sent(ep, false);
  40265a:	4640      	mov	r0, r8
  40265c:	2100      	movs	r1, #0
  40265e:	4b4f      	ldr	r3, [pc, #316]	; (40279c <UDP_Handler+0x914>)
  402660:	4798      	blx	r3
  402662:	e139      	b.n	4028d8 <UDP_Handler+0xa50>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  402664:	4640      	mov	r0, r8
  402666:	2101      	movs	r1, #1
  402668:	4b4c      	ldr	r3, [pc, #304]	; (40279c <UDP_Handler+0x914>)
  40266a:	4798      	blx	r3
  40266c:	00bb      	lsls	r3, r7, #2
  40266e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402672:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  402676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402678:	9228      	str	r2, [sp, #160]	; 0xa0
  40267a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40267c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402680:	9228      	str	r2, [sp, #160]	; 0xa0
  402682:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402684:	f022 0201 	bic.w	r2, r2, #1
  402688:	9228      	str	r2, [sp, #160]	; 0xa0
  40268a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40268c:	631a      	str	r2, [r3, #48]	; 0x30
  40268e:	2300      	movs	r3, #0
  402690:	9329      	str	r3, [sp, #164]	; 0xa4
  402692:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402694:	2b13      	cmp	r3, #19
  402696:	f200 811f 	bhi.w	4028d8 <UDP_Handler+0xa50>
  40269a:	bf00      	nop
  40269c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40269e:	3301      	adds	r3, #1
  4026a0:	9329      	str	r3, [sp, #164]	; 0xa4
  4026a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  4026a4:	2b13      	cmp	r3, #19
  4026a6:	d9f8      	bls.n	40269a <UDP_Handler+0x812>
  4026a8:	e116      	b.n	4028d8 <UDP_Handler+0xa50>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  4026aa:	6b09      	ldr	r1, [r1, #48]	; 0x30
  4026ac:	f011 0f08 	tst.w	r1, #8
  4026b0:	d025      	beq.n	4026fe <UDP_Handler+0x876>
  4026b2:	009a      	lsls	r2, r3, #2
  4026b4:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4026b8:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
			udd_ack_stall(ep);
  4026bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026be:	932a      	str	r3, [sp, #168]	; 0xa8
  4026c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  4026c2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026c6:	932a      	str	r3, [sp, #168]	; 0xa8
  4026c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  4026ca:	f023 0308 	bic.w	r3, r3, #8
  4026ce:	932a      	str	r3, [sp, #168]	; 0xa8
  4026d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  4026d2:	6313      	str	r3, [r2, #48]	; 0x30
  4026d4:	2300      	movs	r3, #0
  4026d6:	932b      	str	r3, [sp, #172]	; 0xac
  4026d8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  4026da:	2b13      	cmp	r3, #19
  4026dc:	d806      	bhi.n	4026ec <UDP_Handler+0x864>
  4026de:	bf00      	nop
  4026e0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  4026e2:	3301      	adds	r3, #1
  4026e4:	932b      	str	r3, [sp, #172]	; 0xac
  4026e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  4026e8:	2b13      	cmp	r3, #19
  4026ea:	d9f8      	bls.n	4026de <UDP_Handler+0x856>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  4026ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4026f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4026f6:	f000 80ef 	beq.w	4028d8 <UDP_Handler+0xa50>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  4026fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026fc:	e0ec      	b.n	4028d8 <UDP_Handler+0xa50>
  4026fe:	3301      	adds	r3, #1
  402700:	3414      	adds	r4, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  402702:	2b04      	cmp	r3, #4
  402704:	f47f ae01 	bne.w	40230a <UDP_Handler+0x482>
  402708:	e0db      	b.n	4028c2 <UDP_Handler+0xa3a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40270a:	4b26      	ldr	r3, [pc, #152]	; (4027a4 <UDP_Handler+0x91c>)
  40270c:	69db      	ldr	r3, [r3, #28]
  40270e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402712:	d113      	bne.n	40273c <UDP_Handler+0x8b4>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402714:	4b23      	ldr	r3, [pc, #140]	; (4027a4 <UDP_Handler+0x91c>)
  402716:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402718:	f413 7f00 	tst.w	r3, #512	; 0x200
  40271c:	d004      	beq.n	402728 <UDP_Handler+0x8a0>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40271e:	4b21      	ldr	r3, [pc, #132]	; (4027a4 <UDP_Handler+0x91c>)
  402720:	69db      	ldr	r3, [r3, #28]
  402722:	f413 7f00 	tst.w	r3, #512	; 0x200
  402726:	d109      	bne.n	40273c <UDP_Handler+0x8b4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402728:	4b1e      	ldr	r3, [pc, #120]	; (4027a4 <UDP_Handler+0x91c>)
  40272a:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40272c:	f413 6f80 	tst.w	r3, #1024	; 0x400
  402730:	d014      	beq.n	40275c <UDP_Handler+0x8d4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402732:	4b1c      	ldr	r3, [pc, #112]	; (4027a4 <UDP_Handler+0x91c>)
  402734:	69db      	ldr	r3, [r3, #28]
  402736:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40273a:	d00f      	beq.n	40275c <UDP_Handler+0x8d4>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  40273c:	4c19      	ldr	r4, [pc, #100]	; (4027a4 <UDP_Handler+0x91c>)
  40273e:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  402742:	6223      	str	r3, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  402744:	6163      	str	r3, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  402746:	2001      	movs	r0, #1
  402748:	4b17      	ldr	r3, [pc, #92]	; (4027a8 <UDP_Handler+0x920>)
  40274a:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  40274c:	f44f 7380 	mov.w	r3, #256	; 0x100
  402750:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  402752:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  402754:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402758:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  40275a:	e0bd      	b.n	4028d8 <UDP_Handler+0xa50>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  40275c:	4b11      	ldr	r3, [pc, #68]	; (4027a4 <UDP_Handler+0x91c>)
  40275e:	699b      	ldr	r3, [r3, #24]
  402760:	f413 7f80 	tst.w	r3, #256	; 0x100
  402764:	d024      	beq.n	4027b0 <UDP_Handler+0x928>
  402766:	4b0f      	ldr	r3, [pc, #60]	; (4027a4 <UDP_Handler+0x91c>)
  402768:	69db      	ldr	r3, [r3, #28]
  40276a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40276e:	d01f      	beq.n	4027b0 <UDP_Handler+0x928>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  402770:	4b0c      	ldr	r3, [pc, #48]	; (4027a4 <UDP_Handler+0x91c>)
  402772:	f44f 7280 	mov.w	r2, #256	; 0x100
  402776:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  402778:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  40277a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40277e:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  402780:	f44f 7200 	mov.w	r2, #512	; 0x200
  402784:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  402786:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40278a:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  40278c:	2022      	movs	r0, #34	; 0x22
  40278e:	4b07      	ldr	r3, [pc, #28]	; (4027ac <UDP_Handler+0x924>)
  402790:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  402792:	2000      	movs	r0, #0
  402794:	4b04      	ldr	r3, [pc, #16]	; (4027a8 <UDP_Handler+0x920>)
  402796:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  402798:	e09e      	b.n	4028d8 <UDP_Handler+0xa50>
  40279a:	bf00      	nop
  40279c:	00401d29 	.word	0x00401d29
  4027a0:	00401c1d 	.word	0x00401c1d
  4027a4:	40034000 	.word	0x40034000
  4027a8:	004018f1 	.word	0x004018f1
  4027ac:	0040184d 	.word	0x0040184d
	}
	if (Is_udd_reset()) {
  4027b0:	4b4b      	ldr	r3, [pc, #300]	; (4028e0 <UDP_Handler+0xa58>)
  4027b2:	69db      	ldr	r3, [r3, #28]
  4027b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4027b8:	f000 808e 	beq.w	4028d8 <UDP_Handler+0xa50>
		// USB bus reset detection
		udd_ack_reset();
  4027bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4027c0:	4b47      	ldr	r3, [pc, #284]	; (4028e0 <UDP_Handler+0xa58>)
  4027c2:	621a      	str	r2, [r3, #32]
  4027c4:	4665      	mov	r5, ip
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4027c6:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  4027c8:	2701      	movs	r7, #1
  4027ca:	4e46      	ldr	r6, [pc, #280]	; (4028e4 <UDP_Handler+0xa5c>)
  4027cc:	3401      	adds	r4, #1
  4027ce:	b2e4      	uxtb	r4, r4
  4027d0:	4628      	mov	r0, r5
  4027d2:	4639      	mov	r1, r7
  4027d4:	4622      	mov	r2, r4
  4027d6:	47b0      	blx	r6
  4027d8:	3514      	adds	r5, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4027da:	2c03      	cmp	r4, #3
  4027dc:	d1f6      	bne.n	4027cc <UDP_Handler+0x944>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  4027de:	4b42      	ldr	r3, [pc, #264]	; (4028e8 <UDP_Handler+0xa60>)
  4027e0:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  4027e2:	4b3f      	ldr	r3, [pc, #252]	; (4028e0 <UDP_Handler+0xa58>)
  4027e4:	685a      	ldr	r2, [r3, #4]
  4027e6:	f022 0201 	bic.w	r2, r2, #1
  4027ea:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  4027ec:	685a      	ldr	r2, [r3, #4]
  4027ee:	f022 0202 	bic.w	r2, r2, #2
  4027f2:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  4027f4:	689a      	ldr	r2, [r3, #8]
  4027f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4027fa:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  4027fc:	689a      	ldr	r2, [r3, #8]
  4027fe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  402802:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  402804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402806:	922c      	str	r2, [sp, #176]	; 0xb0
  402808:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40280a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40280e:	922c      	str	r2, [sp, #176]	; 0xb0
  402810:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402812:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  402816:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40281a:	922c      	str	r2, [sp, #176]	; 0xb0
  40281c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40281e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402822:	922c      	str	r2, [sp, #176]	; 0xb0
  402824:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402826:	631a      	str	r2, [r3, #48]	; 0x30
  402828:	2300      	movs	r3, #0
  40282a:	932d      	str	r3, [sp, #180]	; 0xb4
  40282c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40282e:	2b13      	cmp	r3, #19
  402830:	d806      	bhi.n	402840 <UDP_Handler+0x9b8>
  402832:	bf00      	nop
  402834:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402836:	3301      	adds	r3, #1
  402838:	932d      	str	r3, [sp, #180]	; 0xb4
  40283a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  40283c:	2b13      	cmp	r3, #19
  40283e:	d9f8      	bls.n	402832 <UDP_Handler+0x9aa>
	udd_enable_endpoint(0);
  402840:	4b27      	ldr	r3, [pc, #156]	; (4028e0 <UDP_Handler+0xa58>)
  402842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402844:	922e      	str	r2, [sp, #184]	; 0xb8
  402846:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  402848:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40284c:	922e      	str	r2, [sp, #184]	; 0xb8
  40284e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  402850:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402854:	922e      	str	r2, [sp, #184]	; 0xb8
  402856:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  402858:	631a      	str	r2, [r3, #48]	; 0x30
  40285a:	2300      	movs	r3, #0
  40285c:	932f      	str	r3, [sp, #188]	; 0xbc
  40285e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402860:	2b13      	cmp	r3, #19
  402862:	d806      	bhi.n	402872 <UDP_Handler+0x9ea>
  402864:	bf00      	nop
  402866:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402868:	3301      	adds	r3, #1
  40286a:	932f      	str	r3, [sp, #188]	; 0xbc
  40286c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40286e:	2b13      	cmp	r3, #19
  402870:	d9f8      	bls.n	402864 <UDP_Handler+0x9dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402872:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402876:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402878:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40287c:	2100      	movs	r1, #0
  40287e:	4a1b      	ldr	r2, [pc, #108]	; (4028ec <UDP_Handler+0xa64>)
  402880:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  402882:	2101      	movs	r1, #1
  402884:	4a16      	ldr	r2, [pc, #88]	; (4028e0 <UDP_Handler+0xa58>)
  402886:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402888:	b923      	cbnz	r3, 402894 <UDP_Handler+0xa0c>
		cpu_irq_enable();
  40288a:	4b18      	ldr	r3, [pc, #96]	; (4028ec <UDP_Handler+0xa64>)
  40288c:	7019      	strb	r1, [r3, #0]
  40288e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402892:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  402894:	4b16      	ldr	r3, [pc, #88]	; (4028f0 <UDP_Handler+0xa68>)
  402896:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  402898:	4b11      	ldr	r3, [pc, #68]	; (4028e0 <UDP_Handler+0xa58>)
  40289a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40289e:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  4028a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4028a4:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  4028a6:	e017      	b.n	4028d8 <UDP_Handler+0xa50>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  4028a8:	4433      	add	r3, r6
  4028aa:	f8c9 300c 	str.w	r3, [r9, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  4028ae:	4631      	mov	r1, r6
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  4028b0:	2700      	movs	r7, #0
  4028b2:	e000      	b.n	4028b6 <UDP_Handler+0xa2e>

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
  4028b4:	2701      	movs	r7, #1
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  4028b6:	2300      	movs	r3, #0
  4028b8:	e562      	b.n	402380 <UDP_Handler+0x4f8>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  4028ba:	4640      	mov	r0, r8
  4028bc:	4b0d      	ldr	r3, [pc, #52]	; (4028f4 <UDP_Handler+0xa6c>)
  4028be:	4798      	blx	r3
  4028c0:	e567      	b.n	402392 <UDP_Handler+0x50a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  4028c2:	4b07      	ldr	r3, [pc, #28]	; (4028e0 <UDP_Handler+0xa58>)
  4028c4:	699b      	ldr	r3, [r3, #24]
  4028c6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4028ca:	f47f af1e 	bne.w	40270a <UDP_Handler+0x882>
  4028ce:	e721      	b.n	402714 <UDP_Handler+0x88c>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  4028d0:	4640      	mov	r0, r8
  4028d2:	4b08      	ldr	r3, [pc, #32]	; (4028f4 <UDP_Handler+0xa6c>)
  4028d4:	4798      	blx	r3
  4028d6:	e55f      	b.n	402398 <UDP_Handler+0x510>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  4028d8:	b030      	add	sp, #192	; 0xc0
  4028da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4028de:	bf00      	nop
  4028e0:	40034000 	.word	0x40034000
  4028e4:	00401c1d 	.word	0x00401c1d
  4028e8:	00401065 	.word	0x00401065
  4028ec:	200000b0 	.word	0x200000b0
  4028f0:	00401965 	.word	0x00401965
  4028f4:	00401c5d 	.word	0x00401c5d

004028f8 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  4028f8:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4028fa:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4028fe:	b672      	cpsid	i
  402900:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402904:	2200      	movs	r2, #0
  402906:	4b14      	ldr	r3, [pc, #80]	; (402958 <udd_attach+0x60>)
  402908:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  40290a:	2001      	movs	r0, #1
  40290c:	4b13      	ldr	r3, [pc, #76]	; (40295c <udd_attach+0x64>)
  40290e:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  402910:	2022      	movs	r0, #34	; 0x22
  402912:	4b13      	ldr	r3, [pc, #76]	; (402960 <udd_attach+0x68>)
  402914:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  402916:	4b13      	ldr	r3, [pc, #76]	; (402964 <udd_attach+0x6c>)
  402918:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40291a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  40291e:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  402920:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  402926:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  402928:	f44f 7280 	mov.w	r2, #256	; 0x100
  40292c:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  40292e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402932:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  402934:	f44f 7200 	mov.w	r2, #512	; 0x200
  402938:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  40293a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40293e:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  402940:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402944:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402946:	b92c      	cbnz	r4, 402954 <udd_attach+0x5c>
		cpu_irq_enable();
  402948:	2201      	movs	r2, #1
  40294a:	4b03      	ldr	r3, [pc, #12]	; (402958 <udd_attach+0x60>)
  40294c:	701a      	strb	r2, [r3, #0]
  40294e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402952:	b662      	cpsie	i
  402954:	bd10      	pop	{r4, pc}
  402956:	bf00      	nop
  402958:	200000b0 	.word	0x200000b0
  40295c:	004018f1 	.word	0x004018f1
  402960:	004017f5 	.word	0x004017f5
  402964:	40034000 	.word	0x40034000

00402968 <udd_enable>:
#endif
}


void udd_enable(void)
{
  402968:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40296a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40296e:	b672      	cpsid	i
  402970:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402974:	2500      	movs	r5, #0
  402976:	4b21      	ldr	r3, [pc, #132]	; (4029fc <udd_enable+0x94>)
  402978:	701d      	strb	r5, [r3, #0]
	irqflags_t flags;

	flags = cpu_irq_save();

	// Enable USB hardware
	udd_enable_periph_ck();
  40297a:	2022      	movs	r0, #34	; 0x22
  40297c:	4b20      	ldr	r3, [pc, #128]	; (402a00 <udd_enable+0x98>)
  40297e:	4798      	blx	r3
	sysclk_enable_usb();
  402980:	4b20      	ldr	r3, [pc, #128]	; (402a04 <udd_enable+0x9c>)
  402982:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402984:	4b20      	ldr	r3, [pc, #128]	; (402a08 <udd_enable+0xa0>)
  402986:	2250      	movs	r2, #80	; 0x50
  402988:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  40298c:	2204      	movs	r2, #4
  40298e:	605a      	str	r2, [r3, #4]
  402990:	462b      	mov	r3, r5

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].bank = 0;
  402992:	481e      	ldr	r0, [pc, #120]	; (402a0c <udd_enable+0xa4>)
  402994:	0099      	lsls	r1, r3, #2
  402996:	18ca      	adds	r2, r1, r3
  402998:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  40299c:	7c52      	ldrb	r2, [r2, #17]
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
  40299e:	4419      	add	r1, r3
  4029a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  4029a4:	f002 0283 	and.w	r2, r2, #131	; 0x83
  4029a8:	f36f 12c7 	bfc	r2, #7, #1
  4029ac:	744a      	strb	r2, [r1, #17]
  4029ae:	3301      	adds	r3, #1
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4029b0:	2b03      	cmp	r3, #3
  4029b2:	d1ef      	bne.n	402994 <udd_enable+0x2c>
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  4029b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4029b8:	4b15      	ldr	r3, [pc, #84]	; (402a10 <udd_enable+0xa8>)
  4029ba:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  4029bc:	2200      	movs	r2, #0
  4029be:	4b15      	ldr	r3, [pc, #84]	; (402a14 <udd_enable+0xac>)
  4029c0:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4029c2:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4029c6:	b672      	cpsid	i
  4029c8:	f3bf 8f5f 	dmb	sy
  4029cc:	2100      	movs	r1, #0
  4029ce:	4b0b      	ldr	r3, [pc, #44]	; (4029fc <udd_enable+0x94>)
  4029d0:	7019      	strb	r1, [r3, #0]
  4029d2:	4b11      	ldr	r3, [pc, #68]	; (402a18 <udd_enable+0xb0>)
  4029d4:	78d9      	ldrb	r1, [r3, #3]
  4029d6:	3101      	adds	r1, #1
  4029d8:	70d9      	strb	r1, [r3, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4029da:	b92a      	cbnz	r2, 4029e8 <udd_enable+0x80>
		cpu_irq_enable();
  4029dc:	2201      	movs	r2, #1
  4029de:	4b07      	ldr	r3, [pc, #28]	; (4029fc <udd_enable+0x94>)
  4029e0:	701a      	strb	r2, [r3, #0]
  4029e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4029e6:	b662      	cpsie	i
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  4029e8:	4b0c      	ldr	r3, [pc, #48]	; (402a1c <udd_enable+0xb4>)
  4029ea:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4029ec:	b92c      	cbnz	r4, 4029fa <udd_enable+0x92>
		cpu_irq_enable();
  4029ee:	2201      	movs	r2, #1
  4029f0:	4b02      	ldr	r3, [pc, #8]	; (4029fc <udd_enable+0x94>)
  4029f2:	701a      	strb	r2, [r3, #0]
  4029f4:	f3bf 8f5f 	dmb	sy
  4029f8:	b662      	cpsie	i
  4029fa:	bd38      	pop	{r3, r4, r5, pc}
  4029fc:	200000b0 	.word	0x200000b0
  402a00:	004017f5 	.word	0x004017f5
  402a04:	004006d1 	.word	0x004006d1
  402a08:	e000e100 	.word	0xe000e100
  402a0c:	20000b8c 	.word	0x20000b8c
  402a10:	004018c5 	.word	0x004018c5
  402a14:	20000bc8 	.word	0x20000bc8
  402a18:	20000c30 	.word	0x20000c30
  402a1c:	004028f9 	.word	0x004028f9

00402a20 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
	return false;
}
  402a20:	2000      	movs	r0, #0
  402a22:	4770      	bx	lr

00402a24 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  402a24:	4b0c      	ldr	r3, [pc, #48]	; (402a58 <udd_set_address+0x34>)
  402a26:	685a      	ldr	r2, [r3, #4]
  402a28:	f022 0201 	bic.w	r2, r2, #1
  402a2c:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402a2e:	689a      	ldr	r2, [r3, #8]
  402a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402a34:	609a      	str	r2, [r3, #8]
	if (address) {
  402a36:	b170      	cbz	r0, 402a56 <udd_set_address+0x32>
		udd_configure_address(address);
  402a38:	6899      	ldr	r1, [r3, #8]
  402a3a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  402a3e:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
  402a42:	430a      	orrs	r2, r1
  402a44:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  402a46:	689a      	ldr	r2, [r3, #8]
  402a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402a4c:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402a4e:	685a      	ldr	r2, [r3, #4]
  402a50:	f042 0201 	orr.w	r2, r2, #1
  402a54:	605a      	str	r2, [r3, #4]
  402a56:	4770      	bx	lr
  402a58:	40034000 	.word	0x40034000

00402a5c <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  402a5c:	4b05      	ldr	r3, [pc, #20]	; (402a74 <udd_getaddress+0x18>)
  402a5e:	685b      	ldr	r3, [r3, #4]
  402a60:	f013 0f01 	tst.w	r3, #1
  402a64:	d004      	beq.n	402a70 <udd_getaddress+0x14>
		return udd_get_configured_address();
  402a66:	4b03      	ldr	r3, [pc, #12]	; (402a74 <udd_getaddress+0x18>)
  402a68:	6898      	ldr	r0, [r3, #8]
  402a6a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  402a6e:	4770      	bx	lr
	return 0;
  402a70:	2000      	movs	r0, #0
}
  402a72:	4770      	bx	lr
  402a74:	40034000 	.word	0x40034000

00402a78 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
  402a78:	4b02      	ldr	r3, [pc, #8]	; (402a84 <udd_get_frame_number+0xc>)
  402a7a:	6818      	ldr	r0, [r3, #0]
}
  402a7c:	f3c0 000a 	ubfx	r0, r0, #0, #11
  402a80:	4770      	bx	lr
  402a82:	bf00      	nop
  402a84:	40034000 	.word	0x40034000

00402a88 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
  402a88:	2000      	movs	r0, #0
  402a8a:	4770      	bx	lr

00402a8c <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  402a8c:	4b01      	ldr	r3, [pc, #4]	; (402a94 <udd_set_setup_payload+0x8>)
  402a8e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402a90:	8199      	strh	r1, [r3, #12]
  402a92:	4770      	bx	lr
  402a94:	20000c3c 	.word	0x20000c3c

00402a98 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402a98:	b470      	push	{r4, r5, r6}
  402a9a:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  402a9c:	f000 030f 	and.w	r3, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  402aa0:	2b03      	cmp	r3, #3
  402aa2:	d866      	bhi.n	402b72 <udd_ep_alloc+0xda>
  402aa4:	009c      	lsls	r4, r3, #2
  402aa6:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402aaa:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  402aae:	6b25      	ldr	r5, [r4, #48]	; 0x30
  402ab0:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402ab4:	d15f      	bne.n	402b76 <udd_ep_alloc+0xde>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402ab6:	f001 0503 	and.w	r5, r1, #3
  402aba:	2d01      	cmp	r5, #1
  402abc:	d103      	bne.n	402ac6 <udd_ep_alloc+0x2e>
  402abe:	2b00      	cmp	r3, #0
  402ac0:	d05b      	beq.n	402b7a <udd_ep_alloc+0xe2>
  402ac2:	2b03      	cmp	r3, #3
  402ac4:	d05b      	beq.n	402b7e <udd_ep_alloc+0xe6>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  402ac6:	1f1d      	subs	r5, r3, #4
  402ac8:	b2ed      	uxtb	r5, r5
  402aca:	2d01      	cmp	r5, #1
  402acc:	bf8c      	ite	hi
  402ace:	2540      	movhi	r5, #64	; 0x40
  402ad0:	f44f 7500 	movls.w	r5, #512	; 0x200
  402ad4:	4295      	cmp	r5, r2
  402ad6:	db54      	blt.n	402b82 <udd_ep_alloc+0xea>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  402ad8:	1e5d      	subs	r5, r3, #1
  402ada:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402ade:	4e2d      	ldr	r6, [pc, #180]	; (402b94 <udd_ep_alloc+0xfc>)
  402ae0:	eb06 0585 	add.w	r5, r6, r5, lsl #2

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  402ae4:	8a2e      	ldrh	r6, [r5, #16]
  402ae6:	f362 0609 	bfi	r6, r2, #0, #10
  402aea:	822e      	strh	r6, [r5, #16]
	ptr_job->b_buf_end = false;
  402aec:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  402aee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402af2:	f36f 1245 	bfc	r2, #5, #1
  402af6:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  402af8:	09c0      	lsrs	r0, r0, #7
  402afa:	d003      	beq.n	402b04 <udd_ep_alloc+0x6c>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  402afc:	b2d2      	uxtb	r2, r2
  402afe:	f36f 0283 	bfc	r2, #2, #2
  402b02:	746a      	strb	r2, [r5, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  402b04:	4a24      	ldr	r2, [pc, #144]	; (402b98 <udd_ep_alloc+0x100>)
  402b06:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402b08:	2601      	movs	r6, #1
  402b0a:	fa06 f303 	lsl.w	r3, r6, r3
  402b0e:	431d      	orrs	r5, r3
  402b10:	6295      	str	r5, [r2, #40]	; 0x28
  402b12:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402b14:	ea25 0303 	bic.w	r3, r5, r3
  402b18:	6293      	str	r3, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  402b1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402b1c:	9300      	str	r3, [sp, #0]
  402b1e:	9b00      	ldr	r3, [sp, #0]
  402b20:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402b24:	9300      	str	r3, [sp, #0]
  402b26:	9b00      	ldr	r3, [sp, #0]
  402b28:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  402b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402b30:	9300      	str	r3, [sp, #0]
  402b32:	b138      	cbz	r0, 402b44 <udd_ep_alloc+0xac>
  402b34:	f041 0204 	orr.w	r2, r1, #4
  402b38:	0212      	lsls	r2, r2, #8
  402b3a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  402b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402b42:	e004      	b.n	402b4e <udd_ep_alloc+0xb6>
  402b44:	020a      	lsls	r2, r1, #8
  402b46:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  402b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402b4e:	9b00      	ldr	r3, [sp, #0]
  402b50:	4313      	orrs	r3, r2
  402b52:	9300      	str	r3, [sp, #0]
  402b54:	9b00      	ldr	r3, [sp, #0]
  402b56:	6323      	str	r3, [r4, #48]	; 0x30
  402b58:	2300      	movs	r3, #0
  402b5a:	9301      	str	r3, [sp, #4]
  402b5c:	9b01      	ldr	r3, [sp, #4]
  402b5e:	2b13      	cmp	r3, #19
  402b60:	d811      	bhi.n	402b86 <udd_ep_alloc+0xee>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402b62:	bf00      	nop
  402b64:	9b01      	ldr	r3, [sp, #4]
  402b66:	3301      	adds	r3, #1
  402b68:	9301      	str	r3, [sp, #4]
  402b6a:	9b01      	ldr	r3, [sp, #4]
  402b6c:	2b13      	cmp	r3, #19
  402b6e:	d9f8      	bls.n	402b62 <udd_ep_alloc+0xca>
  402b70:	e00b      	b.n	402b8a <udd_ep_alloc+0xf2>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  402b72:	2000      	movs	r0, #0
  402b74:	e00a      	b.n	402b8c <udd_ep_alloc+0xf4>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  402b76:	2000      	movs	r0, #0
  402b78:	e008      	b.n	402b8c <udd_ep_alloc+0xf4>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  402b7a:	2000      	movs	r0, #0
  402b7c:	e006      	b.n	402b8c <udd_ep_alloc+0xf4>
  402b7e:	2000      	movs	r0, #0
  402b80:	e004      	b.n	402b8c <udd_ep_alloc+0xf4>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  402b82:	2000      	movs	r0, #0
  402b84:	e002      	b.n	402b8c <udd_ep_alloc+0xf4>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  402b86:	2001      	movs	r0, #1
  402b88:	e000      	b.n	402b8c <udd_ep_alloc+0xf4>
  402b8a:	2001      	movs	r0, #1
}
  402b8c:	b003      	add	sp, #12
  402b8e:	bc70      	pop	{r4, r5, r6}
  402b90:	4770      	bx	lr
  402b92:	bf00      	nop
  402b94:	20000b8c 	.word	0x20000b8c
  402b98:	40034000 	.word	0x40034000

00402b9c <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  402b9c:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402b9e:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402ba2:	2a03      	cmp	r2, #3
  402ba4:	d811      	bhi.n	402bca <udd_ep_free+0x2e>
  402ba6:	0093      	lsls	r3, r2, #2
  402ba8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402bac:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		return;
	}
	udd_disable_endpoint(ep_index);
  402bb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402bb2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  402bb6:	6319      	str	r1, [r3, #48]	; 0x30
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402bb8:	1e50      	subs	r0, r2, #1
  402bba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402bbe:	4b03      	ldr	r3, [pc, #12]	; (402bcc <udd_ep_free+0x30>)
  402bc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402bc4:	2101      	movs	r1, #1
  402bc6:	4b02      	ldr	r3, [pc, #8]	; (402bd0 <udd_ep_free+0x34>)
  402bc8:	4798      	blx	r3
  402bca:	bd08      	pop	{r3, pc}
  402bcc:	20000b8c 	.word	0x20000b8c
  402bd0:	00401c1d 	.word	0x00401c1d

00402bd4 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402bd4:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  402bd8:	2803      	cmp	r0, #3
  402bda:	d815      	bhi.n	402c08 <udd_ep_is_halted+0x34>


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402bdc:	1e43      	subs	r3, r0, #1
  402bde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402be2:	4a0a      	ldr	r2, [pc, #40]	; (402c0c <udd_ep_is_halted+0x38>)
  402be4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402be8:	7c5b      	ldrb	r3, [r3, #17]
  402bea:	f013 0f20 	tst.w	r3, #32
  402bee:	d109      	bne.n	402c04 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402bf0:	300c      	adds	r0, #12
  402bf2:	4b07      	ldr	r3, [pc, #28]	; (402c10 <udd_ep_is_halted+0x3c>)
  402bf4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402bf8:	f013 0f28 	tst.w	r3, #40	; 0x28
  402bfc:	bf0c      	ite	eq
  402bfe:	2000      	moveq	r0, #0
  402c00:	2001      	movne	r0, #1
  402c02:	4770      	bx	lr
  402c04:	2001      	movs	r0, #1
  402c06:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402c08:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  402c0a:	4770      	bx	lr
  402c0c:	20000b8c 	.word	0x20000b8c
  402c10:	40034000 	.word	0x40034000

00402c14 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  402c14:	b410      	push	{r4}
  402c16:	b083      	sub	sp, #12
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402c18:	f000 020f 	and.w	r2, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  402c1c:	2a03      	cmp	r2, #3
  402c1e:	d85f      	bhi.n	402ce0 <udd_ep_set_halt+0xcc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402c20:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402c24:	f1d1 0101 	rsbs	r1, r1, #1
  402c28:	bf38      	it	cc
  402c2a:	2100      	movcc	r1, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402c2c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402c2e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402c32:	2400      	movs	r4, #0
  402c34:	4b2f      	ldr	r3, [pc, #188]	; (402cf4 <udd_ep_set_halt+0xe0>)
  402c36:	701c      	strb	r4, [r3, #0]
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402c38:	f010 0f80 	tst.w	r0, #128	; 0x80
  402c3c:	d025      	beq.n	402c8a <udd_ep_set_halt+0x76>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402c3e:	1e53      	subs	r3, r2, #1
  402c40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402c44:	482c      	ldr	r0, [pc, #176]	; (402cf8 <udd_ep_set_halt+0xe4>)
  402c46:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402c4a:	f102 040c 	add.w	r4, r2, #12
  402c4e:	482b      	ldr	r0, [pc, #172]	; (402cfc <udd_ep_set_halt+0xe8>)
  402c50:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  402c54:	f010 0f10 	tst.w	r0, #16
  402c58:	d104      	bne.n	402c64 <udd_ep_set_halt+0x50>
				|| ptr_job->bank > 1)) {
  402c5a:	7c58      	ldrb	r0, [r3, #17]
  402c5c:	f3c0 0081 	ubfx	r0, r0, #2, #2
  402c60:	2801      	cmp	r0, #1
  402c62:	dd12      	ble.n	402c8a <udd_ep_set_halt+0x76>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  402c64:	7c58      	ldrb	r0, [r3, #17]
  402c66:	f040 0020 	orr.w	r0, r0, #32
  402c6a:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402c6c:	2301      	movs	r3, #1
  402c6e:	fa03 f202 	lsl.w	r2, r3, r2
  402c72:	4b22      	ldr	r3, [pc, #136]	; (402cfc <udd_ep_set_halt+0xe8>)
  402c74:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402c76:	2900      	cmp	r1, #0
  402c78:	d034      	beq.n	402ce4 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  402c7a:	2201      	movs	r2, #1
  402c7c:	4b1d      	ldr	r3, [pc, #116]	; (402cf4 <udd_ep_set_halt+0xe0>)
  402c7e:	701a      	strb	r2, [r3, #0]
  402c80:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402c84:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return true;
  402c86:	2001      	movs	r0, #1
  402c88:	e02f      	b.n	402cea <udd_ep_set_halt+0xd6>
  402c8a:	0093      	lsls	r3, r2, #2
  402c8c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402c90:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  402c94:	6b18      	ldr	r0, [r3, #48]	; 0x30
  402c96:	9000      	str	r0, [sp, #0]
  402c98:	9800      	ldr	r0, [sp, #0]
  402c9a:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  402c9e:	9000      	str	r0, [sp, #0]
  402ca0:	9800      	ldr	r0, [sp, #0]
  402ca2:	f040 0020 	orr.w	r0, r0, #32
  402ca6:	9000      	str	r0, [sp, #0]
  402ca8:	9800      	ldr	r0, [sp, #0]
  402caa:	6318      	str	r0, [r3, #48]	; 0x30
  402cac:	2300      	movs	r3, #0
  402cae:	9301      	str	r3, [sp, #4]
  402cb0:	9b01      	ldr	r3, [sp, #4]
  402cb2:	2b13      	cmp	r3, #19
  402cb4:	d806      	bhi.n	402cc4 <udd_ep_set_halt+0xb0>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402cb6:	bf00      	nop
  402cb8:	9b01      	ldr	r3, [sp, #4]
  402cba:	3301      	adds	r3, #1
  402cbc:	9301      	str	r3, [sp, #4]
  402cbe:	9b01      	ldr	r3, [sp, #4]
  402cc0:	2b13      	cmp	r3, #19
  402cc2:	d9f8      	bls.n	402cb6 <udd_ep_set_halt+0xa2>
		udd_enable_endpoint_interrupt(ep_index);
  402cc4:	2301      	movs	r3, #1
  402cc6:	fa03 f202 	lsl.w	r2, r3, r2
  402cca:	4b0c      	ldr	r3, [pc, #48]	; (402cfc <udd_ep_set_halt+0xe8>)
  402ccc:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402cce:	b159      	cbz	r1, 402ce8 <udd_ep_set_halt+0xd4>
		cpu_irq_enable();
  402cd0:	2201      	movs	r2, #1
  402cd2:	4b08      	ldr	r3, [pc, #32]	; (402cf4 <udd_ep_set_halt+0xe0>)
  402cd4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402cd6:	f3bf 8f5f 	dmb	sy
  402cda:	b662      	cpsie	i
		cpu_irq_restore(flags);
	}
	return true;
  402cdc:	2001      	movs	r0, #1
  402cde:	e004      	b.n	402cea <udd_ep_set_halt+0xd6>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402ce0:	2000      	movs	r0, #0
  402ce2:	e002      	b.n	402cea <udd_ep_set_halt+0xd6>
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  402ce4:	2001      	movs	r0, #1
  402ce6:	e000      	b.n	402cea <udd_ep_set_halt+0xd6>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  402ce8:	2001      	movs	r0, #1
}
  402cea:	b003      	add	sp, #12
  402cec:	f85d 4b04 	ldr.w	r4, [sp], #4
  402cf0:	4770      	bx	lr
  402cf2:	bf00      	nop
  402cf4:	200000b0 	.word	0x200000b0
  402cf8:	20000b8c 	.word	0x20000b8c
  402cfc:	40034000 	.word	0x40034000

00402d00 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402d00:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d02:	b085      	sub	sp, #20
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402d04:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402d08:	2803      	cmp	r0, #3
  402d0a:	d859      	bhi.n	402dc0 <udd_ep_clear_halt+0xc0>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  402d0c:	4c30      	ldr	r4, [pc, #192]	; (402dd0 <udd_ep_clear_halt+0xd0>)
  402d0e:	1e43      	subs	r3, r0, #1
  402d10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402d14:	009d      	lsls	r5, r3, #2
  402d16:	1961      	adds	r1, r4, r5

	ptr_job->b_stall_requested = false;
  402d18:	7c4b      	ldrb	r3, [r1, #17]
  402d1a:	f36f 1345 	bfc	r3, #5, #1
  402d1e:	744b      	strb	r3, [r1, #17]
  402d20:	0082      	lsls	r2, r0, #2
  402d22:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402d26:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402d2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402d2c:	f013 0f20 	tst.w	r3, #32
  402d30:	d048      	beq.n	402dc4 <udd_ep_clear_halt+0xc4>
		// Remove stall
		udd_disable_stall_handshake(ep);
  402d32:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402d34:	9300      	str	r3, [sp, #0]
  402d36:	9b00      	ldr	r3, [sp, #0]
  402d38:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d3c:	9300      	str	r3, [sp, #0]
  402d3e:	9b00      	ldr	r3, [sp, #0]
  402d40:	f023 0320 	bic.w	r3, r3, #32
  402d44:	9300      	str	r3, [sp, #0]
  402d46:	9b00      	ldr	r3, [sp, #0]
  402d48:	6313      	str	r3, [r2, #48]	; 0x30
  402d4a:	2300      	movs	r3, #0
  402d4c:	9301      	str	r3, [sp, #4]
  402d4e:	9b01      	ldr	r3, [sp, #4]
  402d50:	2b13      	cmp	r3, #19
  402d52:	d806      	bhi.n	402d62 <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402d54:	bf00      	nop
  402d56:	9b01      	ldr	r3, [sp, #4]
  402d58:	3301      	adds	r3, #1
  402d5a:	9301      	str	r3, [sp, #4]
  402d5c:	9b01      	ldr	r3, [sp, #4]
  402d5e:	2b13      	cmp	r3, #19
  402d60:	d9f8      	bls.n	402d54 <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  402d62:	4b1c      	ldr	r3, [pc, #112]	; (402dd4 <udd_ep_clear_halt+0xd4>)
  402d64:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  402d66:	2701      	movs	r7, #1
  402d68:	fa07 f000 	lsl.w	r0, r7, r0
  402d6c:	4306      	orrs	r6, r0
  402d6e:	629e      	str	r6, [r3, #40]	; 0x28
  402d70:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  402d72:	ea26 0000 	bic.w	r0, r6, r0
  402d76:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  402d78:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402d7a:	9302      	str	r3, [sp, #8]
  402d7c:	9b02      	ldr	r3, [sp, #8]
  402d7e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d82:	9302      	str	r3, [sp, #8]
  402d84:	9b02      	ldr	r3, [sp, #8]
  402d86:	f023 0308 	bic.w	r3, r3, #8
  402d8a:	9302      	str	r3, [sp, #8]
  402d8c:	9b02      	ldr	r3, [sp, #8]
  402d8e:	6313      	str	r3, [r2, #48]	; 0x30
  402d90:	2300      	movs	r3, #0
  402d92:	9303      	str	r3, [sp, #12]
  402d94:	9b03      	ldr	r3, [sp, #12]
  402d96:	2b13      	cmp	r3, #19
  402d98:	d806      	bhi.n	402da8 <udd_ep_clear_halt+0xa8>
  402d9a:	bf00      	nop
  402d9c:	9b03      	ldr	r3, [sp, #12]
  402d9e:	3301      	adds	r3, #1
  402da0:	9303      	str	r3, [sp, #12]
  402da2:	9b03      	ldr	r3, [sp, #12]
  402da4:	2b13      	cmp	r3, #19
  402da6:	d9f8      	bls.n	402d9a <udd_ep_clear_halt+0x9a>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  402da8:	7c4b      	ldrb	r3, [r1, #17]
  402daa:	f013 0f10 	tst.w	r3, #16
  402dae:	d00b      	beq.n	402dc8 <udd_ep_clear_halt+0xc8>
			ptr_job->busy = false;
  402db0:	7c4b      	ldrb	r3, [r1, #17]
  402db2:	f36f 1304 	bfc	r3, #4, #1
  402db6:	744b      	strb	r3, [r1, #17]
			ptr_job->call_nohalt();
  402db8:	5963      	ldr	r3, [r4, r5]
  402dba:	4798      	blx	r3
		}
	}
	return true;
  402dbc:	2001      	movs	r0, #1
  402dbe:	e004      	b.n	402dca <udd_ep_clear_halt+0xca>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  402dc0:	2000      	movs	r0, #0
  402dc2:	e002      	b.n	402dca <udd_ep_clear_halt+0xca>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  402dc4:	2001      	movs	r0, #1
  402dc6:	e000      	b.n	402dca <udd_ep_clear_halt+0xca>
  402dc8:	2001      	movs	r0, #1
}
  402dca:	b005      	add	sp, #20
  402dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402dce:	bf00      	nop
  402dd0:	20000b8c 	.word	0x20000b8c
  402dd4:	40034000 	.word	0x40034000

00402dd8 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  402ddc:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402de0:	2c03      	cmp	r4, #3
  402de2:	f200 8089 	bhi.w	402ef8 <udd_ep_run+0x120>
  402de6:	00a5      	lsls	r5, r4, #2
  402de8:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402dec:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  402df0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
  402df2:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  402df6:	f000 8082 	beq.w	402efe <udd_ep_run+0x126>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  402dfa:	f8df c12c 	ldr.w	ip, [pc, #300]	; 402f28 <udd_ep_run+0x150>
  402dfe:	1e66      	subs	r6, r4, #1
  402e00:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402e04:	00b7      	lsls	r7, r6, #2
  402e06:	eb0c 0607 	add.w	r6, ip, r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  402e0a:	f896 8011 	ldrb.w	r8, [r6, #17]
  402e0e:	f018 0f20 	tst.w	r8, #32
  402e12:	d177      	bne.n	402f04 <udd_ep_run+0x12c>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402e14:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
  402e18:	f018 0f20 	tst.w	r8, #32
  402e1c:	d175      	bne.n	402f0a <udd_ep_run+0x132>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402e1e:	f3ef 8810 	mrs	r8, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402e22:	f1d8 0a01 	rsbs	sl, r8, #1
  402e26:	bf38      	it	cc
  402e28:	f04f 0a00 	movcc.w	sl, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402e2c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402e2e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402e32:	f04f 0900 	mov.w	r9, #0
  402e36:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 402f1c <udd_ep_run+0x144>
  402e3a:	f888 9000 	strb.w	r9, [r8]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  402e3e:	f896 8011 	ldrb.w	r8, [r6, #17]
  402e42:	f018 0f10 	tst.w	r8, #16
  402e46:	d00b      	beq.n	402e60 <udd_ep_run+0x88>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402e48:	f1ba 0f00 	cmp.w	sl, #0
  402e4c:	d060      	beq.n	402f10 <udd_ep_run+0x138>
		cpu_irq_enable();
  402e4e:	2201      	movs	r2, #1
  402e50:	4b32      	ldr	r3, [pc, #200]	; (402f1c <udd_ep_run+0x144>)
  402e52:	701a      	strb	r2, [r3, #0]
  402e54:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402e58:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  402e5a:	2000      	movs	r0, #0
  402e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	ptr_job->busy = true;
  402e60:	f896 8011 	ldrb.w	r8, [r6, #17]
  402e64:	f048 0810 	orr.w	r8, r8, #16
  402e68:	f886 8011 	strb.w	r8, [r6, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402e6c:	f1ba 0f00 	cmp.w	sl, #0
  402e70:	d008      	beq.n	402e84 <udd_ep_run+0xac>
		cpu_irq_enable();
  402e72:	f04f 0901 	mov.w	r9, #1
  402e76:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 402f1c <udd_ep_run+0x144>
  402e7a:	f888 9000 	strb.w	r9, [r8]
  402e7e:	f3bf 8f5f 	dmb	sy
  402e82:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  402e84:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
  402e86:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
  402e88:	2200      	movs	r2, #0
  402e8a:	60f2      	str	r2, [r6, #12]
	ptr_job->call_trans = callback;
  402e8c:	9a08      	ldr	r2, [sp, #32]
  402e8e:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402e92:	b921      	cbnz	r1, 402e9e <udd_ep_run+0xc6>
  402e94:	f1d3 0201 	rsbs	r2, r3, #1
  402e98:	bf38      	it	cc
  402e9a:	2200      	movcc	r2, #0
  402e9c:	e000      	b.n	402ea0 <udd_ep_run+0xc8>
  402e9e:	2201      	movs	r2, #1
  402ea0:	7c73      	ldrb	r3, [r6, #17]
  402ea2:	f362 1386 	bfi	r3, r2, #6, #1
	ptr_job->b_buf_end = false;
  402ea6:	f36f 13c7 	bfc	r3, #7, #1
  402eaa:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402eac:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402eb0:	b672      	cpsid	i
  402eb2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402eb6:	2200      	movs	r2, #0
  402eb8:	4b18      	ldr	r3, [pc, #96]	; (402f1c <udd_ep_run+0x144>)
  402eba:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  402ebc:	2201      	movs	r2, #1
  402ebe:	40a2      	lsls	r2, r4
  402ec0:	4b17      	ldr	r3, [pc, #92]	; (402f20 <udd_ep_run+0x148>)
  402ec2:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  402ec4:	f010 0f80 	tst.w	r0, #128	; 0x80
  402ec8:	d00c      	beq.n	402ee4 <udd_ep_run+0x10c>
		if (Is_udd_in_pending(ep)) {
  402eca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402ecc:	f013 0f11 	tst.w	r3, #17
  402ed0:	d108      	bne.n	402ee4 <udd_ep_run+0x10c>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  402ed2:	4620      	mov	r0, r4
  402ed4:	2101      	movs	r1, #1
  402ed6:	4b13      	ldr	r3, [pc, #76]	; (402f24 <udd_ep_run+0x14c>)
  402ed8:	4798      	blx	r3
  402eda:	b118      	cbz	r0, 402ee4 <udd_ep_run+0x10c>
				// Over one bank
				udd_ep_in_sent(ep, false);
  402edc:	4620      	mov	r0, r4
  402ede:	2100      	movs	r1, #0
  402ee0:	4b10      	ldr	r3, [pc, #64]	; (402f24 <udd_ep_run+0x14c>)
  402ee2:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402ee4:	b9be      	cbnz	r6, 402f16 <udd_ep_run+0x13e>
		cpu_irq_enable();
  402ee6:	2201      	movs	r2, #1
  402ee8:	4b0c      	ldr	r3, [pc, #48]	; (402f1c <udd_ep_run+0x144>)
  402eea:	701a      	strb	r2, [r3, #0]
  402eec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402ef0:	b662      	cpsie	i
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402ef2:	2001      	movs	r0, #1
  402ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  402ef8:	2000      	movs	r0, #0
  402efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  402efe:	2000      	movs	r0, #0
  402f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f04:	2000      	movs	r0, #0
  402f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f0a:	2000      	movs	r0, #0
  402f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  402f10:	2000      	movs	r0, #0
  402f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402f16:	2001      	movs	r0, #1
}
  402f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f1c:	200000b0 	.word	0x200000b0
  402f20:	40034000 	.word	0x40034000
  402f24:	00401d29 	.word	0x00401d29
  402f28:	20000b8c 	.word	0x20000b8c

00402f2c <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  402f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f2e:	b085      	sub	sp, #20
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  402f30:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402f34:	2c03      	cmp	r4, #3
  402f36:	f200 8090 	bhi.w	40305a <udd_ep_abort+0x12e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402f3a:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402f3e:	b672      	cpsid	i
  402f40:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402f44:	2100      	movs	r1, #0
  402f46:	4a46      	ldr	r2, [pc, #280]	; (403060 <udd_ep_abort+0x134>)
  402f48:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  402f4a:	2601      	movs	r6, #1
  402f4c:	40a6      	lsls	r6, r4
  402f4e:	4a45      	ldr	r2, [pc, #276]	; (403064 <udd_ep_abort+0x138>)
  402f50:	6156      	str	r6, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f52:	b92b      	cbnz	r3, 402f60 <udd_ep_abort+0x34>
		cpu_irq_enable();
  402f54:	2201      	movs	r2, #1
  402f56:	4b42      	ldr	r3, [pc, #264]	; (403060 <udd_ep_abort+0x134>)
  402f58:	701a      	strb	r2, [r3, #0]
  402f5a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402f5e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  402f60:	f010 0f80 	tst.w	r0, #128	; 0x80
  402f64:	d109      	bne.n	402f7a <udd_ep_abort+0x4e>
  402f66:	00a5      	lsls	r5, r4, #2
  402f68:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402f6c:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402f70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402f72:	f013 0f42 	tst.w	r3, #66	; 0x42
  402f76:	d157      	bne.n	403028 <udd_ep_abort+0xfc>
  402f78:	e05d      	b.n	403036 <udd_ep_abort+0x10a>
  402f7a:	00a3      	lsls	r3, r4, #2
  402f7c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402f80:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  402f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402f86:	f012 0f10 	tst.w	r2, #16
  402f8a:	d02a      	beq.n	402fe2 <udd_ep_abort+0xb6>
			udd_kill_data_in_fifo(ep,
  402f8c:	b18c      	cbz	r4, 402fb2 <udd_ep_abort+0x86>
  402f8e:	2c03      	cmp	r4, #3
  402f90:	d00f      	beq.n	402fb2 <udd_ep_abort+0x86>
  402f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402f94:	f022 0210 	bic.w	r2, r2, #16
  402f98:	631a      	str	r2, [r3, #48]	; 0x30
  402f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402f9c:	f012 0f10 	tst.w	r2, #16
  402fa0:	d1fb      	bne.n	402f9a <udd_ep_abort+0x6e>
  402fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402fa4:	f042 0210 	orr.w	r2, r2, #16
  402fa8:	631a      	str	r2, [r3, #48]	; 0x30
  402faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402fac:	f012 0f10 	tst.w	r2, #16
  402fb0:	d0fb      	beq.n	402faa <udd_ep_abort+0x7e>
  402fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402fb4:	9200      	str	r2, [sp, #0]
  402fb6:	9a00      	ldr	r2, [sp, #0]
  402fb8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402fbc:	9200      	str	r2, [sp, #0]
  402fbe:	9a00      	ldr	r2, [sp, #0]
  402fc0:	f022 0210 	bic.w	r2, r2, #16
  402fc4:	9200      	str	r2, [sp, #0]
  402fc6:	9a00      	ldr	r2, [sp, #0]
  402fc8:	631a      	str	r2, [r3, #48]	; 0x30
  402fca:	2200      	movs	r2, #0
  402fcc:	9201      	str	r2, [sp, #4]
  402fce:	9a01      	ldr	r2, [sp, #4]
  402fd0:	2a13      	cmp	r2, #19
  402fd2:	d806      	bhi.n	402fe2 <udd_ep_abort+0xb6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402fd4:	bf00      	nop
  402fd6:	9a01      	ldr	r2, [sp, #4]
  402fd8:	3201      	adds	r2, #1
  402fda:	9201      	str	r2, [sp, #4]
  402fdc:	9a01      	ldr	r2, [sp, #4]
  402fde:	2a13      	cmp	r2, #19
  402fe0:	d9f8      	bls.n	402fd4 <udd_ep_abort+0xa8>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  402fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402fe4:	9202      	str	r2, [sp, #8]
  402fe6:	9a02      	ldr	r2, [sp, #8]
  402fe8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402fec:	9202      	str	r2, [sp, #8]
  402fee:	9a02      	ldr	r2, [sp, #8]
  402ff0:	f022 0201 	bic.w	r2, r2, #1
  402ff4:	9202      	str	r2, [sp, #8]
  402ff6:	9a02      	ldr	r2, [sp, #8]
  402ff8:	631a      	str	r2, [r3, #48]	; 0x30
  402ffa:	2300      	movs	r3, #0
  402ffc:	9303      	str	r3, [sp, #12]
  402ffe:	9b03      	ldr	r3, [sp, #12]
  403000:	2b13      	cmp	r3, #19
  403002:	d806      	bhi.n	403012 <udd_ep_abort+0xe6>
  403004:	bf00      	nop
  403006:	9b03      	ldr	r3, [sp, #12]
  403008:	3301      	adds	r3, #1
  40300a:	9303      	str	r3, [sp, #12]
  40300c:	9b03      	ldr	r3, [sp, #12]
  40300e:	2b13      	cmp	r3, #19
  403010:	d9f8      	bls.n	403004 <udd_ep_abort+0xd8>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  403012:	1e63      	subs	r3, r4, #1
  403014:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403018:	4a13      	ldr	r2, [pc, #76]	; (403068 <udd_ep_abort+0x13c>)
  40301a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40301e:	7c5a      	ldrb	r2, [r3, #17]
  403020:	f36f 0283 	bfc	r2, #2, #2
  403024:	745a      	strb	r2, [r3, #17]
  403026:	e006      	b.n	403036 <udd_ep_abort+0x10a>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  403028:	4f10      	ldr	r7, [pc, #64]	; (40306c <udd_ep_abort+0x140>)
  40302a:	4620      	mov	r0, r4
  40302c:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40302e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  403030:	f013 0f42 	tst.w	r3, #66	; 0x42
  403034:	d1f9      	bne.n	40302a <udd_ep_abort+0xfe>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  403036:	4b0b      	ldr	r3, [pc, #44]	; (403064 <udd_ep_abort+0x138>)
  403038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40303a:	4332      	orrs	r2, r6
  40303c:	629a      	str	r2, [r3, #40]	; 0x28
  40303e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403040:	ea22 0606 	bic.w	r6, r2, r6
  403044:	629e      	str	r6, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  403046:	1e60      	subs	r0, r4, #1
  403048:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40304c:	4b06      	ldr	r3, [pc, #24]	; (403068 <udd_ep_abort+0x13c>)
  40304e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403052:	2101      	movs	r1, #1
  403054:	4622      	mov	r2, r4
  403056:	4b06      	ldr	r3, [pc, #24]	; (403070 <udd_ep_abort+0x144>)
  403058:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  40305a:	b005      	add	sp, #20
  40305c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40305e:	bf00      	nop
  403060:	200000b0 	.word	0x200000b0
  403064:	40034000 	.word	0x40034000
  403068:	20000b8c 	.word	0x20000b8c
  40306c:	00401c5d 	.word	0x00401c5d
  403070:	00401c1d 	.word	0x00401c1d

00403074 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  403074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  403078:	6043      	str	r3, [r0, #4]
  40307a:	4770      	bx	lr

0040307c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40307c:	e7fe      	b.n	40307c <Dummy_Handler>
  40307e:	bf00      	nop

00403080 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403080:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  403082:	4b1e      	ldr	r3, [pc, #120]	; (4030fc <Reset_Handler+0x7c>)
  403084:	4a1e      	ldr	r2, [pc, #120]	; (403100 <Reset_Handler+0x80>)
  403086:	429a      	cmp	r2, r3
  403088:	d003      	beq.n	403092 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  40308a:	4b1e      	ldr	r3, [pc, #120]	; (403104 <Reset_Handler+0x84>)
  40308c:	4a1b      	ldr	r2, [pc, #108]	; (4030fc <Reset_Handler+0x7c>)
  40308e:	429a      	cmp	r2, r3
  403090:	d304      	bcc.n	40309c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403092:	4b1d      	ldr	r3, [pc, #116]	; (403108 <Reset_Handler+0x88>)
  403094:	4a1d      	ldr	r2, [pc, #116]	; (40310c <Reset_Handler+0x8c>)
  403096:	429a      	cmp	r2, r3
  403098:	d30f      	bcc.n	4030ba <Reset_Handler+0x3a>
  40309a:	e01a      	b.n	4030d2 <Reset_Handler+0x52>
  40309c:	4b1c      	ldr	r3, [pc, #112]	; (403110 <Reset_Handler+0x90>)
  40309e:	4c1d      	ldr	r4, [pc, #116]	; (403114 <Reset_Handler+0x94>)
  4030a0:	1ae4      	subs	r4, r4, r3
  4030a2:	f024 0403 	bic.w	r4, r4, #3
  4030a6:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4030a8:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  4030aa:	4814      	ldr	r0, [pc, #80]	; (4030fc <Reset_Handler+0x7c>)
  4030ac:	4914      	ldr	r1, [pc, #80]	; (403100 <Reset_Handler+0x80>)
  4030ae:	585a      	ldr	r2, [r3, r1]
  4030b0:	501a      	str	r2, [r3, r0]
  4030b2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4030b4:	42a3      	cmp	r3, r4
  4030b6:	d1fa      	bne.n	4030ae <Reset_Handler+0x2e>
  4030b8:	e7eb      	b.n	403092 <Reset_Handler+0x12>
  4030ba:	4b17      	ldr	r3, [pc, #92]	; (403118 <Reset_Handler+0x98>)
  4030bc:	4917      	ldr	r1, [pc, #92]	; (40311c <Reset_Handler+0x9c>)
  4030be:	1ac9      	subs	r1, r1, r3
  4030c0:	f021 0103 	bic.w	r1, r1, #3
  4030c4:	1d1a      	adds	r2, r3, #4
  4030c6:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  4030c8:	2200      	movs	r2, #0
  4030ca:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4030ce:	428b      	cmp	r3, r1
  4030d0:	d1fb      	bne.n	4030ca <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4030d2:	4a13      	ldr	r2, [pc, #76]	; (403120 <Reset_Handler+0xa0>)
  4030d4:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
  4030d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4030dc:	4911      	ldr	r1, [pc, #68]	; (403124 <Reset_Handler+0xa4>)
  4030de:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  4030e0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  4030e4:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
  4030e8:	d203      	bcs.n	4030f2 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  4030ea:	688a      	ldr	r2, [r1, #8]
  4030ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4030f0:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  4030f2:	4b0d      	ldr	r3, [pc, #52]	; (403128 <Reset_Handler+0xa8>)
  4030f4:	4798      	blx	r3

	/* Branch to main function */
	main();
  4030f6:	4b0d      	ldr	r3, [pc, #52]	; (40312c <Reset_Handler+0xac>)
  4030f8:	4798      	blx	r3
  4030fa:	e7fe      	b.n	4030fa <Reset_Handler+0x7a>
  4030fc:	20000000 	.word	0x20000000
  403100:	0040805c 	.word	0x0040805c
  403104:	20000978 	.word	0x20000978
  403108:	20000c58 	.word	0x20000c58
  40310c:	20000978 	.word	0x20000978
  403110:	20000004 	.word	0x20000004
  403114:	2000097b 	.word	0x2000097b
  403118:	20000974 	.word	0x20000974
  40311c:	20000c53 	.word	0x20000c53
  403120:	00400000 	.word	0x00400000
  403124:	e000ed00 	.word	0xe000ed00
  403128:	00403301 	.word	0x00403301
  40312c:	004032bd 	.word	0x004032bd

00403130 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  403130:	4b3d      	ldr	r3, [pc, #244]	; (403228 <SystemCoreClockUpdate+0xf8>)
  403132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403134:	f003 0303 	and.w	r3, r3, #3
  403138:	2b03      	cmp	r3, #3
  40313a:	d85d      	bhi.n	4031f8 <SystemCoreClockUpdate+0xc8>
  40313c:	e8df f003 	tbb	[pc, r3]
  403140:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  403144:	4b39      	ldr	r3, [pc, #228]	; (40322c <SystemCoreClockUpdate+0xfc>)
  403146:	695b      	ldr	r3, [r3, #20]
  403148:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40314c:	bf14      	ite	ne
  40314e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403152:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403156:	4b36      	ldr	r3, [pc, #216]	; (403230 <SystemCoreClockUpdate+0x100>)
  403158:	601a      	str	r2, [r3, #0]
  40315a:	e04d      	b.n	4031f8 <SystemCoreClockUpdate+0xc8>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40315c:	4b32      	ldr	r3, [pc, #200]	; (403228 <SystemCoreClockUpdate+0xf8>)
  40315e:	6a1b      	ldr	r3, [r3, #32]
  403160:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403164:	d003      	beq.n	40316e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403166:	4a33      	ldr	r2, [pc, #204]	; (403234 <SystemCoreClockUpdate+0x104>)
  403168:	4b31      	ldr	r3, [pc, #196]	; (403230 <SystemCoreClockUpdate+0x100>)
  40316a:	601a      	str	r2, [r3, #0]
  40316c:	e044      	b.n	4031f8 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40316e:	4a32      	ldr	r2, [pc, #200]	; (403238 <SystemCoreClockUpdate+0x108>)
  403170:	4b2f      	ldr	r3, [pc, #188]	; (403230 <SystemCoreClockUpdate+0x100>)
  403172:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  403174:	4b2c      	ldr	r3, [pc, #176]	; (403228 <SystemCoreClockUpdate+0xf8>)
  403176:	6a1b      	ldr	r3, [r3, #32]
  403178:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40317c:	2b10      	cmp	r3, #16
  40317e:	d002      	beq.n	403186 <SystemCoreClockUpdate+0x56>
  403180:	2b20      	cmp	r3, #32
  403182:	d004      	beq.n	40318e <SystemCoreClockUpdate+0x5e>
  403184:	e038      	b.n	4031f8 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  403186:	4a2d      	ldr	r2, [pc, #180]	; (40323c <SystemCoreClockUpdate+0x10c>)
  403188:	4b29      	ldr	r3, [pc, #164]	; (403230 <SystemCoreClockUpdate+0x100>)
  40318a:	601a      	str	r2, [r3, #0]
				break;
  40318c:	e034      	b.n	4031f8 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  40318e:	4a29      	ldr	r2, [pc, #164]	; (403234 <SystemCoreClockUpdate+0x104>)
  403190:	4b27      	ldr	r3, [pc, #156]	; (403230 <SystemCoreClockUpdate+0x100>)
  403192:	601a      	str	r2, [r3, #0]
				break;
  403194:	e030      	b.n	4031f8 <SystemCoreClockUpdate+0xc8>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  403196:	4b24      	ldr	r3, [pc, #144]	; (403228 <SystemCoreClockUpdate+0xf8>)
  403198:	6a1b      	ldr	r3, [r3, #32]
  40319a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40319e:	d003      	beq.n	4031a8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4031a0:	4a24      	ldr	r2, [pc, #144]	; (403234 <SystemCoreClockUpdate+0x104>)
  4031a2:	4b23      	ldr	r3, [pc, #140]	; (403230 <SystemCoreClockUpdate+0x100>)
  4031a4:	601a      	str	r2, [r3, #0]
  4031a6:	e012      	b.n	4031ce <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4031a8:	4a23      	ldr	r2, [pc, #140]	; (403238 <SystemCoreClockUpdate+0x108>)
  4031aa:	4b21      	ldr	r3, [pc, #132]	; (403230 <SystemCoreClockUpdate+0x100>)
  4031ac:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4031ae:	4b1e      	ldr	r3, [pc, #120]	; (403228 <SystemCoreClockUpdate+0xf8>)
  4031b0:	6a1b      	ldr	r3, [r3, #32]
  4031b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4031b6:	2b10      	cmp	r3, #16
  4031b8:	d002      	beq.n	4031c0 <SystemCoreClockUpdate+0x90>
  4031ba:	2b20      	cmp	r3, #32
  4031bc:	d004      	beq.n	4031c8 <SystemCoreClockUpdate+0x98>
  4031be:	e006      	b.n	4031ce <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4031c0:	4a1e      	ldr	r2, [pc, #120]	; (40323c <SystemCoreClockUpdate+0x10c>)
  4031c2:	4b1b      	ldr	r3, [pc, #108]	; (403230 <SystemCoreClockUpdate+0x100>)
  4031c4:	601a      	str	r2, [r3, #0]
				break;
  4031c6:	e002      	b.n	4031ce <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4031c8:	4a1a      	ldr	r2, [pc, #104]	; (403234 <SystemCoreClockUpdate+0x104>)
  4031ca:	4b19      	ldr	r3, [pc, #100]	; (403230 <SystemCoreClockUpdate+0x100>)
  4031cc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  4031ce:	4b16      	ldr	r3, [pc, #88]	; (403228 <SystemCoreClockUpdate+0xf8>)
  4031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031d2:	f003 0303 	and.w	r3, r3, #3
  4031d6:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  4031d8:	4b13      	ldr	r3, [pc, #76]	; (403228 <SystemCoreClockUpdate+0xf8>)
  4031da:	bf07      	ittee	eq
  4031dc:	6a98      	ldreq	r0, [r3, #40]	; 0x28
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  4031de:	6a99      	ldreq	r1, [r3, #40]	; 0x28
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  4031e0:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  4031e2:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  4031e4:	4b12      	ldr	r3, [pc, #72]	; (403230 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  4031e6:	f3c0 400a 	ubfx	r0, r0, #16, #11
  4031ea:	681a      	ldr	r2, [r3, #0]
  4031ec:	fb00 2202 	mla	r2, r0, r2, r2
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  4031f0:	b2c9      	uxtb	r1, r1
  4031f2:	fbb2 f2f1 	udiv	r2, r2, r1
  4031f6:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4031f8:	4b0b      	ldr	r3, [pc, #44]	; (403228 <SystemCoreClockUpdate+0xf8>)
  4031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403200:	2b70      	cmp	r3, #112	; 0x70
  403202:	d107      	bne.n	403214 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  403204:	4b0a      	ldr	r3, [pc, #40]	; (403230 <SystemCoreClockUpdate+0x100>)
  403206:	681a      	ldr	r2, [r3, #0]
  403208:	490d      	ldr	r1, [pc, #52]	; (403240 <SystemCoreClockUpdate+0x110>)
  40320a:	fba1 0202 	umull	r0, r2, r1, r2
  40320e:	0852      	lsrs	r2, r2, #1
  403210:	601a      	str	r2, [r3, #0]
  403212:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403214:	4b04      	ldr	r3, [pc, #16]	; (403228 <SystemCoreClockUpdate+0xf8>)
  403216:	6b19      	ldr	r1, [r3, #48]	; 0x30
  403218:	4b05      	ldr	r3, [pc, #20]	; (403230 <SystemCoreClockUpdate+0x100>)
  40321a:	f3c1 1102 	ubfx	r1, r1, #4, #3
  40321e:	681a      	ldr	r2, [r3, #0]
  403220:	40ca      	lsrs	r2, r1
  403222:	601a      	str	r2, [r3, #0]
  403224:	4770      	bx	lr
  403226:	bf00      	nop
  403228:	400e0400 	.word	0x400e0400
  40322c:	400e1410 	.word	0x400e1410
  403230:	200000b4 	.word	0x200000b4
  403234:	00b71b00 	.word	0x00b71b00
  403238:	003d0900 	.word	0x003d0900
  40323c:	007a1200 	.word	0x007a1200
  403240:	aaaaaaab 	.word	0xaaaaaaab

00403244 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  403244:	4b0c      	ldr	r3, [pc, #48]	; (403278 <system_init_flash+0x34>)
  403246:	4298      	cmp	r0, r3
  403248:	d803      	bhi.n	403252 <system_init_flash+0xe>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
  40324a:	2200      	movs	r2, #0
  40324c:	4b0b      	ldr	r3, [pc, #44]	; (40327c <system_init_flash+0x38>)
  40324e:	601a      	str	r2, [r3, #0]
  403250:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  403252:	4b0b      	ldr	r3, [pc, #44]	; (403280 <system_init_flash+0x3c>)
  403254:	4298      	cmp	r0, r3
  403256:	d804      	bhi.n	403262 <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
  403258:	f44f 7280 	mov.w	r2, #256	; 0x100
  40325c:	4b07      	ldr	r3, [pc, #28]	; (40327c <system_init_flash+0x38>)
  40325e:	601a      	str	r2, [r3, #0]
  403260:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  403262:	4b08      	ldr	r3, [pc, #32]	; (403284 <system_init_flash+0x40>)
  403264:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
  403266:	bf94      	ite	ls
  403268:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
  40326c:	f44f 7240 	movhi.w	r2, #768	; 0x300
  403270:	4b02      	ldr	r3, [pc, #8]	; (40327c <system_init_flash+0x38>)
  403272:	601a      	str	r2, [r3, #0]
  403274:	4770      	bx	lr
  403276:	bf00      	nop
  403278:	0103663f 	.word	0x0103663f
  40327c:	400e0a00 	.word	0x400e0a00
  403280:	01c9c37f 	.word	0x01c9c37f
  403284:	0337f97f 	.word	0x0337f97f

00403288 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403288:	4b09      	ldr	r3, [pc, #36]	; (4032b0 <_sbrk+0x28>)
  40328a:	681b      	ldr	r3, [r3, #0]
  40328c:	b913      	cbnz	r3, 403294 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  40328e:	4a09      	ldr	r2, [pc, #36]	; (4032b4 <_sbrk+0x2c>)
  403290:	4b07      	ldr	r3, [pc, #28]	; (4032b0 <_sbrk+0x28>)
  403292:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403294:	4b06      	ldr	r3, [pc, #24]	; (4032b0 <_sbrk+0x28>)
  403296:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403298:	181a      	adds	r2, r3, r0
  40329a:	4907      	ldr	r1, [pc, #28]	; (4032b8 <_sbrk+0x30>)
  40329c:	4291      	cmp	r1, r2
  40329e:	db04      	blt.n	4032aa <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4032a0:	4610      	mov	r0, r2
  4032a2:	4a03      	ldr	r2, [pc, #12]	; (4032b0 <_sbrk+0x28>)
  4032a4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4032a6:	4618      	mov	r0, r3
  4032a8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4032aa:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4032ae:	4770      	bx	lr
  4032b0:	20000bd0 	.word	0x20000bd0
  4032b4:	20002c58 	.word	0x20002c58
  4032b8:	2000bffc 	.word	0x2000bffc

004032bc <main>:


uint16_t angle;

int main (void)
{
  4032bc:	b508      	push	{r3, lr}
	// Insert system clock initialization code here (sysclk_init()).
	

	board_init();
  4032be:	4b07      	ldr	r3, [pc, #28]	; (4032dc <main+0x20>)
  4032c0:	4798      	blx	r3
	sysclk_init();
  4032c2:	4b07      	ldr	r3, [pc, #28]	; (4032e0 <main+0x24>)
  4032c4:	4798      	blx	r3
	/*
	ADC_init();
	timer_init();
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
	*/
	udc_start();
  4032c6:	4b07      	ldr	r3, [pc, #28]	; (4032e4 <main+0x28>)
  4032c8:	4798      	blx	r3
	
	
	while(1)
	{
		parse_comands();
  4032ca:	4e07      	ldr	r6, [pc, #28]	; (4032e8 <main+0x2c>)
		delay_ms(10);
  4032cc:	f24b 2593 	movw	r5, #45715	; 0xb293
  4032d0:	4c06      	ldr	r4, [pc, #24]	; (4032ec <main+0x30>)
	udc_start();
	
	
	while(1)
	{
		parse_comands();
  4032d2:	47b0      	blx	r6
		delay_ms(10);
  4032d4:	4628      	mov	r0, r5
  4032d6:	47a0      	blx	r4
  4032d8:	e7fb      	b.n	4032d2 <main+0x16>
  4032da:	bf00      	nop
  4032dc:	00400675 	.word	0x00400675
  4032e0:	00400721 	.word	0x00400721
  4032e4:	00401059 	.word	0x00401059
  4032e8:	004002c5 	.word	0x004002c5
  4032ec:	20000001 	.word	0x20000001

004032f0 <atoi>:
  4032f0:	2100      	movs	r1, #0
  4032f2:	220a      	movs	r2, #10
  4032f4:	f000 b922 	b.w	40353c <strtol>

004032f8 <_atoi_r>:
  4032f8:	2200      	movs	r2, #0
  4032fa:	230a      	movs	r3, #10
  4032fc:	f000 b89c 	b.w	403438 <_strtol_r>

00403300 <__libc_init_array>:
  403300:	b570      	push	{r4, r5, r6, lr}
  403302:	4b0e      	ldr	r3, [pc, #56]	; (40333c <__libc_init_array+0x3c>)
  403304:	4d0e      	ldr	r5, [pc, #56]	; (403340 <__libc_init_array+0x40>)
  403306:	2400      	movs	r4, #0
  403308:	1aed      	subs	r5, r5, r3
  40330a:	10ad      	asrs	r5, r5, #2
  40330c:	461e      	mov	r6, r3
  40330e:	42ac      	cmp	r4, r5
  403310:	d004      	beq.n	40331c <__libc_init_array+0x1c>
  403312:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403316:	4790      	blx	r2
  403318:	3401      	adds	r4, #1
  40331a:	e7f8      	b.n	40330e <__libc_init_array+0xe>
  40331c:	f004 fe88 	bl	408030 <_init>
  403320:	4d08      	ldr	r5, [pc, #32]	; (403344 <__libc_init_array+0x44>)
  403322:	4b09      	ldr	r3, [pc, #36]	; (403348 <__libc_init_array+0x48>)
  403324:	2400      	movs	r4, #0
  403326:	1aed      	subs	r5, r5, r3
  403328:	10ad      	asrs	r5, r5, #2
  40332a:	461e      	mov	r6, r3
  40332c:	42ac      	cmp	r4, r5
  40332e:	d004      	beq.n	40333a <__libc_init_array+0x3a>
  403330:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
  403334:	4790      	blx	r2
  403336:	3401      	adds	r4, #1
  403338:	e7f8      	b.n	40332c <__libc_init_array+0x2c>
  40333a:	bd70      	pop	{r4, r5, r6, pc}
  40333c:	0040803c 	.word	0x0040803c
  403340:	0040803c 	.word	0x0040803c
  403344:	00408044 	.word	0x00408044
  403348:	0040803c 	.word	0x0040803c

0040334c <memcpy>:
  40334c:	b510      	push	{r4, lr}
  40334e:	2300      	movs	r3, #0
  403350:	4293      	cmp	r3, r2
  403352:	d003      	beq.n	40335c <memcpy+0x10>
  403354:	5ccc      	ldrb	r4, [r1, r3]
  403356:	54c4      	strb	r4, [r0, r3]
  403358:	3301      	adds	r3, #1
  40335a:	e7f9      	b.n	403350 <memcpy+0x4>
  40335c:	bd10      	pop	{r4, pc}

0040335e <memset>:
  40335e:	4402      	add	r2, r0
  403360:	4603      	mov	r3, r0
  403362:	4293      	cmp	r3, r2
  403364:	d002      	beq.n	40336c <memset+0xe>
  403366:	f803 1b01 	strb.w	r1, [r3], #1
  40336a:	e7fa      	b.n	403362 <memset+0x4>
  40336c:	4770      	bx	lr
	...

00403370 <_sprintf_r>:
  403370:	b40c      	push	{r2, r3}
  403372:	b510      	push	{r4, lr}
  403374:	b09c      	sub	sp, #112	; 0x70
  403376:	ab1e      	add	r3, sp, #120	; 0x78
  403378:	9102      	str	r1, [sp, #8]
  40337a:	9106      	str	r1, [sp, #24]
  40337c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  403380:	f853 2b04 	ldr.w	r2, [r3], #4
  403384:	9104      	str	r1, [sp, #16]
  403386:	9107      	str	r1, [sp, #28]
  403388:	f64f 71ff 	movw	r1, #65535	; 0xffff
  40338c:	f8ad 1016 	strh.w	r1, [sp, #22]
  403390:	f44f 7402 	mov.w	r4, #520	; 0x208
  403394:	a902      	add	r1, sp, #8
  403396:	9301      	str	r3, [sp, #4]
  403398:	f8ad 4014 	strh.w	r4, [sp, #20]
  40339c:	f000 f8dc 	bl	403558 <_svfprintf_r>
  4033a0:	9b02      	ldr	r3, [sp, #8]
  4033a2:	2200      	movs	r2, #0
  4033a4:	701a      	strb	r2, [r3, #0]
  4033a6:	b01c      	add	sp, #112	; 0x70
  4033a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4033ac:	b002      	add	sp, #8
  4033ae:	4770      	bx	lr

004033b0 <sprintf>:
  4033b0:	b40e      	push	{r1, r2, r3}
  4033b2:	b500      	push	{lr}
  4033b4:	f44f 7102 	mov.w	r1, #520	; 0x208
  4033b8:	b09c      	sub	sp, #112	; 0x70
  4033ba:	f8ad 1014 	strh.w	r1, [sp, #20]
  4033be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4033c2:	9104      	str	r1, [sp, #16]
  4033c4:	9107      	str	r1, [sp, #28]
  4033c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4033ca:	ab1d      	add	r3, sp, #116	; 0x74
  4033cc:	f8ad 1016 	strh.w	r1, [sp, #22]
  4033d0:	4908      	ldr	r1, [pc, #32]	; (4033f4 <sprintf+0x44>)
  4033d2:	f853 2b04 	ldr.w	r2, [r3], #4
  4033d6:	9002      	str	r0, [sp, #8]
  4033d8:	9006      	str	r0, [sp, #24]
  4033da:	6808      	ldr	r0, [r1, #0]
  4033dc:	a902      	add	r1, sp, #8
  4033de:	9301      	str	r3, [sp, #4]
  4033e0:	f000 f8ba 	bl	403558 <_svfprintf_r>
  4033e4:	9b02      	ldr	r3, [sp, #8]
  4033e6:	2200      	movs	r2, #0
  4033e8:	701a      	strb	r2, [r3, #0]
  4033ea:	b01c      	add	sp, #112	; 0x70
  4033ec:	f85d eb04 	ldr.w	lr, [sp], #4
  4033f0:	b003      	add	sp, #12
  4033f2:	4770      	bx	lr
  4033f4:	200000b8 	.word	0x200000b8

004033f8 <strlen>:
  4033f8:	4603      	mov	r3, r0
  4033fa:	f813 2b01 	ldrb.w	r2, [r3], #1
  4033fe:	2a00      	cmp	r2, #0
  403400:	d1fb      	bne.n	4033fa <strlen+0x2>
  403402:	1a18      	subs	r0, r3, r0
  403404:	3801      	subs	r0, #1
  403406:	4770      	bx	lr

00403408 <strpbrk>:
  403408:	b570      	push	{r4, r5, r6, lr}
  40340a:	7803      	ldrb	r3, [r0, #0]
  40340c:	460a      	mov	r2, r1
  40340e:	b18b      	cbz	r3, 403434 <strpbrk+0x2c>
  403410:	4606      	mov	r6, r0
  403412:	f810 4b01 	ldrb.w	r4, [r0], #1
  403416:	b13c      	cbz	r4, 403428 <strpbrk+0x20>
  403418:	460b      	mov	r3, r1
  40341a:	461a      	mov	r2, r3
  40341c:	f813 5b01 	ldrb.w	r5, [r3], #1
  403420:	2d00      	cmp	r5, #0
  403422:	d0f5      	beq.n	403410 <strpbrk+0x8>
  403424:	42ac      	cmp	r4, r5
  403426:	d1f8      	bne.n	40341a <strpbrk+0x12>
  403428:	7813      	ldrb	r3, [r2, #0]
  40342a:	2b00      	cmp	r3, #0
  40342c:	bf14      	ite	ne
  40342e:	4630      	movne	r0, r6
  403430:	2000      	moveq	r0, #0
  403432:	bd70      	pop	{r4, r5, r6, pc}
  403434:	4618      	mov	r0, r3
  403436:	bd70      	pop	{r4, r5, r6, pc}

00403438 <_strtol_r>:
  403438:	4684      	mov	ip, r0
  40343a:	483f      	ldr	r0, [pc, #252]	; (403538 <_strtol_r+0x100>)
  40343c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403440:	f8d0 8000 	ldr.w	r8, [r0]
  403444:	460e      	mov	r6, r1
  403446:	4634      	mov	r4, r6
  403448:	f814 5b01 	ldrb.w	r5, [r4], #1
  40344c:	eb08 0005 	add.w	r0, r8, r5
  403450:	7840      	ldrb	r0, [r0, #1]
  403452:	f000 0008 	and.w	r0, r0, #8
  403456:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  40345a:	b108      	cbz	r0, 403460 <_strtol_r+0x28>
  40345c:	4626      	mov	r6, r4
  40345e:	e7f2      	b.n	403446 <_strtol_r+0xe>
  403460:	2d2d      	cmp	r5, #45	; 0x2d
  403462:	d103      	bne.n	40346c <_strtol_r+0x34>
  403464:	1cb4      	adds	r4, r6, #2
  403466:	7875      	ldrb	r5, [r6, #1]
  403468:	2701      	movs	r7, #1
  40346a:	e003      	b.n	403474 <_strtol_r+0x3c>
  40346c:	2d2b      	cmp	r5, #43	; 0x2b
  40346e:	bf04      	itt	eq
  403470:	7875      	ldrbeq	r5, [r6, #1]
  403472:	1cb4      	addeq	r4, r6, #2
  403474:	f033 0010 	bics.w	r0, r3, #16
  403478:	d10d      	bne.n	403496 <_strtol_r+0x5e>
  40347a:	2d30      	cmp	r5, #48	; 0x30
  40347c:	d108      	bne.n	403490 <_strtol_r+0x58>
  40347e:	7820      	ldrb	r0, [r4, #0]
  403480:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  403484:	2858      	cmp	r0, #88	; 0x58
  403486:	d151      	bne.n	40352c <_strtol_r+0xf4>
  403488:	7865      	ldrb	r5, [r4, #1]
  40348a:	2310      	movs	r3, #16
  40348c:	3402      	adds	r4, #2
  40348e:	e002      	b.n	403496 <_strtol_r+0x5e>
  403490:	2b00      	cmp	r3, #0
  403492:	bf08      	it	eq
  403494:	230a      	moveq	r3, #10
  403496:	2f00      	cmp	r7, #0
  403498:	bf0c      	ite	eq
  40349a:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
  40349e:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
  4034a2:	fbba f9f3 	udiv	r9, sl, r3
  4034a6:	fb03 aa19 	mls	sl, r3, r9, sl
  4034aa:	2600      	movs	r6, #0
  4034ac:	4630      	mov	r0, r6
  4034ae:	eb08 0b05 	add.w	fp, r8, r5
  4034b2:	f89b b001 	ldrb.w	fp, [fp, #1]
  4034b6:	f01b 0f04 	tst.w	fp, #4
  4034ba:	d001      	beq.n	4034c0 <_strtol_r+0x88>
  4034bc:	3d30      	subs	r5, #48	; 0x30
  4034be:	e00b      	b.n	4034d8 <_strtol_r+0xa0>
  4034c0:	f01b 0b03 	ands.w	fp, fp, #3
  4034c4:	d01b      	beq.n	4034fe <_strtol_r+0xc6>
  4034c6:	f1bb 0f01 	cmp.w	fp, #1
  4034ca:	bf14      	ite	ne
  4034cc:	f04f 0b57 	movne.w	fp, #87	; 0x57
  4034d0:	f04f 0b37 	moveq.w	fp, #55	; 0x37
  4034d4:	ebcb 0505 	rsb	r5, fp, r5
  4034d8:	429d      	cmp	r5, r3
  4034da:	da10      	bge.n	4034fe <_strtol_r+0xc6>
  4034dc:	f1b6 3fff 	cmp.w	r6, #4294967295
  4034e0:	d00a      	beq.n	4034f8 <_strtol_r+0xc0>
  4034e2:	4548      	cmp	r0, r9
  4034e4:	d806      	bhi.n	4034f4 <_strtol_r+0xbc>
  4034e6:	d101      	bne.n	4034ec <_strtol_r+0xb4>
  4034e8:	4555      	cmp	r5, sl
  4034ea:	dc03      	bgt.n	4034f4 <_strtol_r+0xbc>
  4034ec:	fb03 5000 	mla	r0, r3, r0, r5
  4034f0:	2601      	movs	r6, #1
  4034f2:	e001      	b.n	4034f8 <_strtol_r+0xc0>
  4034f4:	f04f 36ff 	mov.w	r6, #4294967295
  4034f8:	f814 5b01 	ldrb.w	r5, [r4], #1
  4034fc:	e7d7      	b.n	4034ae <_strtol_r+0x76>
  4034fe:	1c73      	adds	r3, r6, #1
  403500:	d10c      	bne.n	40351c <_strtol_r+0xe4>
  403502:	2f00      	cmp	r7, #0
  403504:	f04f 0322 	mov.w	r3, #34	; 0x22
  403508:	bf0c      	ite	eq
  40350a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40350e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  403512:	f8cc 3000 	str.w	r3, [ip]
  403516:	b92a      	cbnz	r2, 403524 <_strtol_r+0xec>
  403518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40351c:	b107      	cbz	r7, 403520 <_strtol_r+0xe8>
  40351e:	4240      	negs	r0, r0
  403520:	b142      	cbz	r2, 403534 <_strtol_r+0xfc>
  403522:	b106      	cbz	r6, 403526 <_strtol_r+0xee>
  403524:	1e61      	subs	r1, r4, #1
  403526:	6011      	str	r1, [r2, #0]
  403528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40352c:	2b00      	cmp	r3, #0
  40352e:	bf08      	it	eq
  403530:	2308      	moveq	r3, #8
  403532:	e7b0      	b.n	403496 <_strtol_r+0x5e>
  403534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403538:	200004e8 	.word	0x200004e8

0040353c <strtol>:
  40353c:	b530      	push	{r4, r5, lr}
  40353e:	4613      	mov	r3, r2
  403540:	4a04      	ldr	r2, [pc, #16]	; (403554 <strtol+0x18>)
  403542:	4605      	mov	r5, r0
  403544:	460c      	mov	r4, r1
  403546:	6810      	ldr	r0, [r2, #0]
  403548:	4629      	mov	r1, r5
  40354a:	4622      	mov	r2, r4
  40354c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  403550:	f7ff bf72 	b.w	403438 <_strtol_r>
  403554:	200000b8 	.word	0x200000b8

00403558 <_svfprintf_r>:
  403558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40355c:	b0c3      	sub	sp, #268	; 0x10c
  40355e:	468b      	mov	fp, r1
  403560:	4698      	mov	r8, r3
  403562:	920b      	str	r2, [sp, #44]	; 0x2c
  403564:	4682      	mov	sl, r0
  403566:	f001 ff2b 	bl	4053c0 <_localeconv_r>
  40356a:	6800      	ldr	r0, [r0, #0]
  40356c:	9018      	str	r0, [sp, #96]	; 0x60
  40356e:	f7ff ff43 	bl	4033f8 <strlen>
  403572:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403576:	9010      	str	r0, [sp, #64]	; 0x40
  403578:	0619      	lsls	r1, r3, #24
  40357a:	d515      	bpl.n	4035a8 <_svfprintf_r+0x50>
  40357c:	f8db 3010 	ldr.w	r3, [fp, #16]
  403580:	b993      	cbnz	r3, 4035a8 <_svfprintf_r+0x50>
  403582:	4650      	mov	r0, sl
  403584:	2140      	movs	r1, #64	; 0x40
  403586:	f001 ff2d 	bl	4053e4 <_malloc_r>
  40358a:	f8cb 0000 	str.w	r0, [fp]
  40358e:	f8cb 0010 	str.w	r0, [fp, #16]
  403592:	b930      	cbnz	r0, 4035a2 <_svfprintf_r+0x4a>
  403594:	230c      	movs	r3, #12
  403596:	f8ca 3000 	str.w	r3, [sl]
  40359a:	f04f 30ff 	mov.w	r0, #4294967295
  40359e:	f000 bf6e 	b.w	40447e <_svfprintf_r+0xf26>
  4035a2:	2340      	movs	r3, #64	; 0x40
  4035a4:	f8cb 3014 	str.w	r3, [fp, #20]
  4035a8:	2400      	movs	r4, #0
  4035aa:	2500      	movs	r5, #0
  4035ac:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  4035b0:	2300      	movs	r3, #0
  4035b2:	ae32      	add	r6, sp, #200	; 0xc8
  4035b4:	9625      	str	r6, [sp, #148]	; 0x94
  4035b6:	9327      	str	r3, [sp, #156]	; 0x9c
  4035b8:	9326      	str	r3, [sp, #152]	; 0x98
  4035ba:	9309      	str	r3, [sp, #36]	; 0x24
  4035bc:	931b      	str	r3, [sp, #108]	; 0x6c
  4035be:	931a      	str	r3, [sp, #104]	; 0x68
  4035c0:	930f      	str	r3, [sp, #60]	; 0x3c
  4035c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4035c4:	461c      	mov	r4, r3
  4035c6:	f813 2b01 	ldrb.w	r2, [r3], #1
  4035ca:	b91a      	cbnz	r2, 4035d4 <_svfprintf_r+0x7c>
  4035cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4035ce:	1a25      	subs	r5, r4, r0
  4035d0:	d103      	bne.n	4035da <_svfprintf_r+0x82>
  4035d2:	e01b      	b.n	40360c <_svfprintf_r+0xb4>
  4035d4:	2a25      	cmp	r2, #37	; 0x25
  4035d6:	d1f5      	bne.n	4035c4 <_svfprintf_r+0x6c>
  4035d8:	e7f8      	b.n	4035cc <_svfprintf_r+0x74>
  4035da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4035dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4035de:	442b      	add	r3, r5
  4035e0:	9327      	str	r3, [sp, #156]	; 0x9c
  4035e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4035e4:	e886 0022 	stmia.w	r6, {r1, r5}
  4035e8:	3301      	adds	r3, #1
  4035ea:	2b07      	cmp	r3, #7
  4035ec:	9326      	str	r3, [sp, #152]	; 0x98
  4035ee:	dc01      	bgt.n	4035f4 <_svfprintf_r+0x9c>
  4035f0:	3608      	adds	r6, #8
  4035f2:	e008      	b.n	403606 <_svfprintf_r+0xae>
  4035f4:	4650      	mov	r0, sl
  4035f6:	4659      	mov	r1, fp
  4035f8:	aa25      	add	r2, sp, #148	; 0x94
  4035fa:	f002 fef7 	bl	4063ec <__ssprint_r>
  4035fe:	2800      	cmp	r0, #0
  403600:	f040 8735 	bne.w	40446e <_svfprintf_r+0xf16>
  403604:	ae32      	add	r6, sp, #200	; 0xc8
  403606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403608:	442a      	add	r2, r5
  40360a:	920f      	str	r2, [sp, #60]	; 0x3c
  40360c:	7823      	ldrb	r3, [r4, #0]
  40360e:	2b00      	cmp	r3, #0
  403610:	f000 8726 	beq.w	404460 <_svfprintf_r+0xf08>
  403614:	2300      	movs	r3, #0
  403616:	3401      	adds	r4, #1
  403618:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40361c:	f04f 39ff 	mov.w	r9, #4294967295
  403620:	930e      	str	r3, [sp, #56]	; 0x38
  403622:	461f      	mov	r7, r3
  403624:	1c65      	adds	r5, r4, #1
  403626:	7824      	ldrb	r4, [r4, #0]
  403628:	950b      	str	r5, [sp, #44]	; 0x2c
  40362a:	9408      	str	r4, [sp, #32]
  40362c:	9c08      	ldr	r4, [sp, #32]
  40362e:	f1a4 0220 	sub.w	r2, r4, #32
  403632:	2a58      	cmp	r2, #88	; 0x58
  403634:	f200 8385 	bhi.w	403d42 <_svfprintf_r+0x7ea>
  403638:	e8df f012 	tbh	[pc, r2, lsl #1]
  40363c:	0383006d 	.word	0x0383006d
  403640:	00710383 	.word	0x00710383
  403644:	03830383 	.word	0x03830383
  403648:	03830383 	.word	0x03830383
  40364c:	03830383 	.word	0x03830383
  403650:	0059005b 	.word	0x0059005b
  403654:	00770383 	.word	0x00770383
  403658:	0383007a 	.word	0x0383007a
  40365c:	00a2009f 	.word	0x00a2009f
  403660:	00a200a2 	.word	0x00a200a2
  403664:	00a200a2 	.word	0x00a200a2
  403668:	00a200a2 	.word	0x00a200a2
  40366c:	00a200a2 	.word	0x00a200a2
  403670:	03830383 	.word	0x03830383
  403674:	03830383 	.word	0x03830383
  403678:	03830383 	.word	0x03830383
  40367c:	03830383 	.word	0x03830383
  403680:	03830383 	.word	0x03830383
  403684:	00fe00d3 	.word	0x00fe00d3
  403688:	00fe0383 	.word	0x00fe0383
  40368c:	03830383 	.word	0x03830383
  403690:	03830383 	.word	0x03830383
  403694:	038300b6 	.word	0x038300b6
  403698:	026b0383 	.word	0x026b0383
  40369c:	03830383 	.word	0x03830383
  4036a0:	03830383 	.word	0x03830383
  4036a4:	02bb0383 	.word	0x02bb0383
  4036a8:	03830383 	.word	0x03830383
  4036ac:	03830068 	.word	0x03830068
  4036b0:	03830383 	.word	0x03830383
  4036b4:	03830383 	.word	0x03830383
  4036b8:	03830383 	.word	0x03830383
  4036bc:	03830383 	.word	0x03830383
  4036c0:	00c90383 	.word	0x00c90383
  4036c4:	00fe0065 	.word	0x00fe0065
  4036c8:	00fe00fe 	.word	0x00fe00fe
  4036cc:	006500b9 	.word	0x006500b9
  4036d0:	03830383 	.word	0x03830383
  4036d4:	038300bc 	.word	0x038300bc
  4036d8:	026d024c 	.word	0x026d024c
  4036dc:	00c6028c 	.word	0x00c6028c
  4036e0:	029e0383 	.word	0x029e0383
  4036e4:	02bd0383 	.word	0x02bd0383
  4036e8:	03830383 	.word	0x03830383
  4036ec:	02d8      	.short	0x02d8
  4036ee:	232b      	movs	r3, #43	; 0x2b
  4036f0:	e007      	b.n	403702 <_svfprintf_r+0x1aa>
  4036f2:	f8d8 5000 	ldr.w	r5, [r8]
  4036f6:	f108 0204 	add.w	r2, r8, #4
  4036fa:	2d00      	cmp	r5, #0
  4036fc:	950e      	str	r5, [sp, #56]	; 0x38
  4036fe:	db11      	blt.n	403724 <_svfprintf_r+0x1cc>
  403700:	4690      	mov	r8, r2
  403702:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403704:	e78e      	b.n	403624 <_svfprintf_r+0xcc>
  403706:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40370a:	e06e      	b.n	4037ea <_svfprintf_r+0x292>
  40370c:	4cab      	ldr	r4, [pc, #684]	; (4039bc <_svfprintf_r+0x464>)
  40370e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403712:	941b      	str	r4, [sp, #108]	; 0x6c
  403714:	e26e      	b.n	403bf4 <_svfprintf_r+0x69c>
  403716:	2b00      	cmp	r3, #0
  403718:	bf08      	it	eq
  40371a:	2320      	moveq	r3, #32
  40371c:	e7f1      	b.n	403702 <_svfprintf_r+0x1aa>
  40371e:	f047 0701 	orr.w	r7, r7, #1
  403722:	e7ee      	b.n	403702 <_svfprintf_r+0x1aa>
  403724:	426d      	negs	r5, r5
  403726:	950e      	str	r5, [sp, #56]	; 0x38
  403728:	4690      	mov	r8, r2
  40372a:	f047 0704 	orr.w	r7, r7, #4
  40372e:	e7e8      	b.n	403702 <_svfprintf_r+0x1aa>
  403730:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403732:	7825      	ldrb	r5, [r4, #0]
  403734:	1c62      	adds	r2, r4, #1
  403736:	2d2a      	cmp	r5, #42	; 0x2a
  403738:	9508      	str	r5, [sp, #32]
  40373a:	d002      	beq.n	403742 <_svfprintf_r+0x1ea>
  40373c:	f04f 0900 	mov.w	r9, #0
  403740:	e00b      	b.n	40375a <_svfprintf_r+0x202>
  403742:	f8d8 9000 	ldr.w	r9, [r8]
  403746:	f108 0104 	add.w	r1, r8, #4
  40374a:	f1b9 0f00 	cmp.w	r9, #0
  40374e:	4688      	mov	r8, r1
  403750:	920b      	str	r2, [sp, #44]	; 0x2c
  403752:	dad6      	bge.n	403702 <_svfprintf_r+0x1aa>
  403754:	f04f 39ff 	mov.w	r9, #4294967295
  403758:	e7d3      	b.n	403702 <_svfprintf_r+0x1aa>
  40375a:	9d08      	ldr	r5, [sp, #32]
  40375c:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  403760:	2909      	cmp	r1, #9
  403762:	d806      	bhi.n	403772 <_svfprintf_r+0x21a>
  403764:	f812 4b01 	ldrb.w	r4, [r2], #1
  403768:	200a      	movs	r0, #10
  40376a:	fb00 1909 	mla	r9, r0, r9, r1
  40376e:	9408      	str	r4, [sp, #32]
  403770:	e7f3      	b.n	40375a <_svfprintf_r+0x202>
  403772:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
  403776:	920b      	str	r2, [sp, #44]	; 0x2c
  403778:	e758      	b.n	40362c <_svfprintf_r+0xd4>
  40377a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  40377e:	e7c0      	b.n	403702 <_svfprintf_r+0x1aa>
  403780:	2400      	movs	r4, #0
  403782:	940e      	str	r4, [sp, #56]	; 0x38
  403784:	9d08      	ldr	r5, [sp, #32]
  403786:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403788:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
  40378c:	210a      	movs	r1, #10
  40378e:	fb01 2404 	mla	r4, r1, r4, r2
  403792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403794:	940e      	str	r4, [sp, #56]	; 0x38
  403796:	f812 5b01 	ldrb.w	r5, [r2], #1
  40379a:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
  40379e:	2909      	cmp	r1, #9
  4037a0:	9508      	str	r5, [sp, #32]
  4037a2:	d8e8      	bhi.n	403776 <_svfprintf_r+0x21e>
  4037a4:	920b      	str	r2, [sp, #44]	; 0x2c
  4037a6:	e7ed      	b.n	403784 <_svfprintf_r+0x22c>
  4037a8:	f047 0708 	orr.w	r7, r7, #8
  4037ac:	e7a9      	b.n	403702 <_svfprintf_r+0x1aa>
  4037ae:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  4037b2:	e7a6      	b.n	403702 <_svfprintf_r+0x1aa>
  4037b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4037b6:	7822      	ldrb	r2, [r4, #0]
  4037b8:	2a6c      	cmp	r2, #108	; 0x6c
  4037ba:	d102      	bne.n	4037c2 <_svfprintf_r+0x26a>
  4037bc:	3401      	adds	r4, #1
  4037be:	940b      	str	r4, [sp, #44]	; 0x2c
  4037c0:	e002      	b.n	4037c8 <_svfprintf_r+0x270>
  4037c2:	f047 0710 	orr.w	r7, r7, #16
  4037c6:	e79c      	b.n	403702 <_svfprintf_r+0x1aa>
  4037c8:	f047 0720 	orr.w	r7, r7, #32
  4037cc:	e799      	b.n	403702 <_svfprintf_r+0x1aa>
  4037ce:	f8d8 3000 	ldr.w	r3, [r8]
  4037d2:	2500      	movs	r5, #0
  4037d4:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  4037d8:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  4037dc:	f108 0804 	add.w	r8, r8, #4
  4037e0:	e2ba      	b.n	403d58 <_svfprintf_r+0x800>
  4037e2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4037e6:	f047 0710 	orr.w	r7, r7, #16
  4037ea:	06ba      	lsls	r2, r7, #26
  4037ec:	d508      	bpl.n	403800 <_svfprintf_r+0x2a8>
  4037ee:	f108 0807 	add.w	r8, r8, #7
  4037f2:	f028 0307 	bic.w	r3, r8, #7
  4037f6:	f103 0808 	add.w	r8, r3, #8
  4037fa:	e9d3 4500 	ldrd	r4, r5, [r3]
  4037fe:	e00f      	b.n	403820 <_svfprintf_r+0x2c8>
  403800:	f017 0f10 	tst.w	r7, #16
  403804:	f108 0304 	add.w	r3, r8, #4
  403808:	d002      	beq.n	403810 <_svfprintf_r+0x2b8>
  40380a:	f8d8 4000 	ldr.w	r4, [r8]
  40380e:	e005      	b.n	40381c <_svfprintf_r+0x2c4>
  403810:	f8d8 4000 	ldr.w	r4, [r8]
  403814:	f017 0f40 	tst.w	r7, #64	; 0x40
  403818:	bf18      	it	ne
  40381a:	b224      	sxthne	r4, r4
  40381c:	17e5      	asrs	r5, r4, #31
  40381e:	4698      	mov	r8, r3
  403820:	2c00      	cmp	r4, #0
  403822:	f175 0100 	sbcs.w	r1, r5, #0
  403826:	f280 8210 	bge.w	403c4a <_svfprintf_r+0x6f2>
  40382a:	232d      	movs	r3, #45	; 0x2d
  40382c:	4264      	negs	r4, r4
  40382e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403832:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403836:	e208      	b.n	403c4a <_svfprintf_r+0x6f2>
  403838:	9c08      	ldr	r4, [sp, #32]
  40383a:	f108 0807 	add.w	r8, r8, #7
  40383e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403842:	970a      	str	r7, [sp, #40]	; 0x28
  403844:	f028 0307 	bic.w	r3, r8, #7
  403848:	9411      	str	r4, [sp, #68]	; 0x44
  40384a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40384e:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  403852:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403856:	f103 0808 	add.w	r8, r3, #8
  40385a:	f002 fd8b 	bl	406374 <__fpclassifyd>
  40385e:	2801      	cmp	r0, #1
  403860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403864:	d114      	bne.n	403890 <_svfprintf_r+0x338>
  403866:	2200      	movs	r2, #0
  403868:	2300      	movs	r3, #0
  40386a:	f003 fecf 	bl	40760c <__aeabi_dcmplt>
  40386e:	b110      	cbz	r0, 403876 <_svfprintf_r+0x31e>
  403870:	232d      	movs	r3, #45	; 0x2d
  403872:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403876:	9d08      	ldr	r5, [sp, #32]
  403878:	4b51      	ldr	r3, [pc, #324]	; (4039c0 <_svfprintf_r+0x468>)
  40387a:	4a52      	ldr	r2, [pc, #328]	; (4039c4 <_svfprintf_r+0x46c>)
  40387c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  403880:	2d47      	cmp	r5, #71	; 0x47
  403882:	bfd8      	it	le
  403884:	461a      	movle	r2, r3
  403886:	9207      	str	r2, [sp, #28]
  403888:	f04f 0903 	mov.w	r9, #3
  40388c:	2500      	movs	r5, #0
  40388e:	e26a      	b.n	403d66 <_svfprintf_r+0x80e>
  403890:	f002 fd70 	bl	406374 <__fpclassifyd>
  403894:	b958      	cbnz	r0, 4038ae <_svfprintf_r+0x356>
  403896:	4b4c      	ldr	r3, [pc, #304]	; (4039c8 <_svfprintf_r+0x470>)
  403898:	4a4c      	ldr	r2, [pc, #304]	; (4039cc <_svfprintf_r+0x474>)
  40389a:	9c08      	ldr	r4, [sp, #32]
  40389c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
  4038a0:	2c47      	cmp	r4, #71	; 0x47
  4038a2:	bfd8      	it	le
  4038a4:	461a      	movle	r2, r3
  4038a6:	9207      	str	r2, [sp, #28]
  4038a8:	f04f 0903 	mov.w	r9, #3
  4038ac:	e25a      	b.n	403d64 <_svfprintf_r+0x80c>
  4038ae:	f1b9 3fff 	cmp.w	r9, #4294967295
  4038b2:	d00a      	beq.n	4038ca <_svfprintf_r+0x372>
  4038b4:	9d08      	ldr	r5, [sp, #32]
  4038b6:	f025 0320 	bic.w	r3, r5, #32
  4038ba:	2b47      	cmp	r3, #71	; 0x47
  4038bc:	d107      	bne.n	4038ce <_svfprintf_r+0x376>
  4038be:	f1b9 0f00 	cmp.w	r9, #0
  4038c2:	bf08      	it	eq
  4038c4:	f04f 0901 	moveq.w	r9, #1
  4038c8:	e001      	b.n	4038ce <_svfprintf_r+0x376>
  4038ca:	f04f 0906 	mov.w	r9, #6
  4038ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  4038d2:	2b00      	cmp	r3, #0
  4038d4:	f447 7780 	orr.w	r7, r7, #256	; 0x100
  4038d8:	da08      	bge.n	4038ec <_svfprintf_r+0x394>
  4038da:	990d      	ldr	r1, [sp, #52]	; 0x34
  4038dc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4038de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4038e2:	242d      	movs	r4, #45	; 0x2d
  4038e4:	9012      	str	r0, [sp, #72]	; 0x48
  4038e6:	9113      	str	r1, [sp, #76]	; 0x4c
  4038e8:	9419      	str	r4, [sp, #100]	; 0x64
  4038ea:	e005      	b.n	4038f8 <_svfprintf_r+0x3a0>
  4038ec:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
  4038f0:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  4038f4:	2500      	movs	r5, #0
  4038f6:	9519      	str	r5, [sp, #100]	; 0x64
  4038f8:	9d08      	ldr	r5, [sp, #32]
  4038fa:	f025 0420 	bic.w	r4, r5, #32
  4038fe:	2c46      	cmp	r4, #70	; 0x46
  403900:	d004      	beq.n	40390c <_svfprintf_r+0x3b4>
  403902:	2c45      	cmp	r4, #69	; 0x45
  403904:	d105      	bne.n	403912 <_svfprintf_r+0x3ba>
  403906:	f109 0501 	add.w	r5, r9, #1
  40390a:	e003      	b.n	403914 <_svfprintf_r+0x3bc>
  40390c:	464d      	mov	r5, r9
  40390e:	2303      	movs	r3, #3
  403910:	e001      	b.n	403916 <_svfprintf_r+0x3be>
  403912:	464d      	mov	r5, r9
  403914:	2302      	movs	r3, #2
  403916:	e88d 0028 	stmia.w	sp, {r3, r5}
  40391a:	ab1f      	add	r3, sp, #124	; 0x7c
  40391c:	9302      	str	r3, [sp, #8]
  40391e:	ab20      	add	r3, sp, #128	; 0x80
  403920:	9303      	str	r3, [sp, #12]
  403922:	ab23      	add	r3, sp, #140	; 0x8c
  403924:	9304      	str	r3, [sp, #16]
  403926:	4650      	mov	r0, sl
  403928:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  40392c:	f000 fe4b 	bl	4045c6 <_dtoa_r>
  403930:	2c47      	cmp	r4, #71	; 0x47
  403932:	9007      	str	r0, [sp, #28]
  403934:	d10a      	bne.n	40394c <_svfprintf_r+0x3f4>
  403936:	980a      	ldr	r0, [sp, #40]	; 0x28
  403938:	07c3      	lsls	r3, r0, #31
  40393a:	d407      	bmi.n	40394c <_svfprintf_r+0x3f4>
  40393c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40393e:	9d07      	ldr	r5, [sp, #28]
  403940:	2c47      	cmp	r4, #71	; 0x47
  403942:	ebc5 0303 	rsb	r3, r5, r3
  403946:	9309      	str	r3, [sp, #36]	; 0x24
  403948:	d142      	bne.n	4039d0 <_svfprintf_r+0x478>
  40394a:	e02d      	b.n	4039a8 <_svfprintf_r+0x450>
  40394c:	f8dd c01c 	ldr.w	ip, [sp, #28]
  403950:	2c46      	cmp	r4, #70	; 0x46
  403952:	44ac      	add	ip, r5
  403954:	d113      	bne.n	40397e <_svfprintf_r+0x426>
  403956:	9807      	ldr	r0, [sp, #28]
  403958:	7803      	ldrb	r3, [r0, #0]
  40395a:	2b30      	cmp	r3, #48	; 0x30
  40395c:	d10d      	bne.n	40397a <_svfprintf_r+0x422>
  40395e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403962:	2200      	movs	r2, #0
  403964:	2300      	movs	r3, #0
  403966:	f8cd c018 	str.w	ip, [sp, #24]
  40396a:	f003 fe45 	bl	4075f8 <__aeabi_dcmpeq>
  40396e:	f8dd c018 	ldr.w	ip, [sp, #24]
  403972:	b910      	cbnz	r0, 40397a <_svfprintf_r+0x422>
  403974:	f1c5 0501 	rsb	r5, r5, #1
  403978:	951f      	str	r5, [sp, #124]	; 0x7c
  40397a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40397c:	449c      	add	ip, r3
  40397e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403982:	2200      	movs	r2, #0
  403984:	2300      	movs	r3, #0
  403986:	f8cd c018 	str.w	ip, [sp, #24]
  40398a:	f003 fe35 	bl	4075f8 <__aeabi_dcmpeq>
  40398e:	f8dd c018 	ldr.w	ip, [sp, #24]
  403992:	b108      	cbz	r0, 403998 <_svfprintf_r+0x440>
  403994:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
  403998:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40399a:	4563      	cmp	r3, ip
  40399c:	d2ce      	bcs.n	40393c <_svfprintf_r+0x3e4>
  40399e:	1c5a      	adds	r2, r3, #1
  4039a0:	9223      	str	r2, [sp, #140]	; 0x8c
  4039a2:	2230      	movs	r2, #48	; 0x30
  4039a4:	701a      	strb	r2, [r3, #0]
  4039a6:	e7f7      	b.n	403998 <_svfprintf_r+0x440>
  4039a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4039aa:	1cdc      	adds	r4, r3, #3
  4039ac:	db01      	blt.n	4039b2 <_svfprintf_r+0x45a>
  4039ae:	454b      	cmp	r3, r9
  4039b0:	dd6e      	ble.n	403a90 <_svfprintf_r+0x538>
  4039b2:	9c08      	ldr	r4, [sp, #32]
  4039b4:	3c02      	subs	r4, #2
  4039b6:	9408      	str	r4, [sp, #32]
  4039b8:	e00d      	b.n	4039d6 <_svfprintf_r+0x47e>
  4039ba:	bf00      	nop
  4039bc:	00407dae 	.word	0x00407dae
  4039c0:	00407d9e 	.word	0x00407d9e
  4039c4:	00407da2 	.word	0x00407da2
  4039c8:	00407da6 	.word	0x00407da6
  4039cc:	00407daa 	.word	0x00407daa
  4039d0:	9d08      	ldr	r5, [sp, #32]
  4039d2:	2d65      	cmp	r5, #101	; 0x65
  4039d4:	dc43      	bgt.n	403a5e <_svfprintf_r+0x506>
  4039d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4039d8:	9c08      	ldr	r4, [sp, #32]
  4039da:	3b01      	subs	r3, #1
  4039dc:	2b00      	cmp	r3, #0
  4039de:	931f      	str	r3, [sp, #124]	; 0x7c
  4039e0:	bfba      	itte	lt
  4039e2:	425b      	neglt	r3, r3
  4039e4:	222d      	movlt	r2, #45	; 0x2d
  4039e6:	222b      	movge	r2, #43	; 0x2b
  4039e8:	2b09      	cmp	r3, #9
  4039ea:	f88d 4084 	strb.w	r4, [sp, #132]	; 0x84
  4039ee:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4039f2:	dd1d      	ble.n	403a30 <_svfprintf_r+0x4d8>
  4039f4:	f10d 0292 	add.w	r2, sp, #146	; 0x92
  4039f8:	200a      	movs	r0, #10
  4039fa:	fb93 f1f0 	sdiv	r1, r3, r0
  4039fe:	fb00 3311 	mls	r3, r0, r1, r3
  403a02:	2909      	cmp	r1, #9
  403a04:	f103 0330 	add.w	r3, r3, #48	; 0x30
  403a08:	4614      	mov	r4, r2
  403a0a:	f802 3901 	strb.w	r3, [r2], #-1
  403a0e:	460b      	mov	r3, r1
  403a10:	dcf2      	bgt.n	4039f8 <_svfprintf_r+0x4a0>
  403a12:	f101 0330 	add.w	r3, r1, #48	; 0x30
  403a16:	f804 3d01 	strb.w	r3, [r4, #-1]!
  403a1a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403a1e:	f10d 0293 	add.w	r2, sp, #147	; 0x93
  403a22:	4294      	cmp	r4, r2
  403a24:	d20b      	bcs.n	403a3e <_svfprintf_r+0x4e6>
  403a26:	f814 2b01 	ldrb.w	r2, [r4], #1
  403a2a:	f803 2b01 	strb.w	r2, [r3], #1
  403a2e:	e7f6      	b.n	403a1e <_svfprintf_r+0x4c6>
  403a30:	2230      	movs	r2, #48	; 0x30
  403a32:	4413      	add	r3, r2
  403a34:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  403a38:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  403a3c:	ab22      	add	r3, sp, #136	; 0x88
  403a3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403a40:	aa21      	add	r2, sp, #132	; 0x84
  403a42:	1a9a      	subs	r2, r3, r2
  403a44:	4691      	mov	r9, r2
  403a46:	2d01      	cmp	r5, #1
  403a48:	921a      	str	r2, [sp, #104]	; 0x68
  403a4a:	44a9      	add	r9, r5
  403a4c:	dc03      	bgt.n	403a56 <_svfprintf_r+0x4fe>
  403a4e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403a50:	f015 0401 	ands.w	r4, r5, #1
  403a54:	d037      	beq.n	403ac6 <_svfprintf_r+0x56e>
  403a56:	f109 0901 	add.w	r9, r9, #1
  403a5a:	2400      	movs	r4, #0
  403a5c:	e033      	b.n	403ac6 <_svfprintf_r+0x56e>
  403a5e:	9c08      	ldr	r4, [sp, #32]
  403a60:	2c66      	cmp	r4, #102	; 0x66
  403a62:	d115      	bne.n	403a90 <_svfprintf_r+0x538>
  403a64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403a66:	2b00      	cmp	r3, #0
  403a68:	dd09      	ble.n	403a7e <_svfprintf_r+0x526>
  403a6a:	f1b9 0f00 	cmp.w	r9, #0
  403a6e:	d102      	bne.n	403a76 <_svfprintf_r+0x51e>
  403a70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403a72:	07e8      	lsls	r0, r5, #31
  403a74:	d523      	bpl.n	403abe <_svfprintf_r+0x566>
  403a76:	f109 0901 	add.w	r9, r9, #1
  403a7a:	444b      	add	r3, r9
  403a7c:	e01f      	b.n	403abe <_svfprintf_r+0x566>
  403a7e:	f1b9 0f00 	cmp.w	r9, #0
  403a82:	d102      	bne.n	403a8a <_svfprintf_r+0x532>
  403a84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403a86:	07e1      	lsls	r1, r4, #31
  403a88:	d515      	bpl.n	403ab6 <_svfprintf_r+0x55e>
  403a8a:	f109 0302 	add.w	r3, r9, #2
  403a8e:	e016      	b.n	403abe <_svfprintf_r+0x566>
  403a90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403a92:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403a94:	42ab      	cmp	r3, r5
  403a96:	db04      	blt.n	403aa2 <_svfprintf_r+0x54a>
  403a98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403a9a:	07e2      	lsls	r2, r4, #31
  403a9c:	d50d      	bpl.n	403aba <_svfprintf_r+0x562>
  403a9e:	3301      	adds	r3, #1
  403aa0:	e006      	b.n	403ab0 <_svfprintf_r+0x558>
  403aa2:	2b00      	cmp	r3, #0
  403aa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403aa6:	bfd4      	ite	le
  403aa8:	f1c3 0302 	rsble	r3, r3, #2
  403aac:	2301      	movgt	r3, #1
  403aae:	4423      	add	r3, r4
  403ab0:	2567      	movs	r5, #103	; 0x67
  403ab2:	9511      	str	r5, [sp, #68]	; 0x44
  403ab4:	e003      	b.n	403abe <_svfprintf_r+0x566>
  403ab6:	2301      	movs	r3, #1
  403ab8:	e001      	b.n	403abe <_svfprintf_r+0x566>
  403aba:	2467      	movs	r4, #103	; 0x67
  403abc:	9411      	str	r4, [sp, #68]	; 0x44
  403abe:	9d11      	ldr	r5, [sp, #68]	; 0x44
  403ac0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  403ac2:	9508      	str	r5, [sp, #32]
  403ac4:	4699      	mov	r9, r3
  403ac6:	9d19      	ldr	r5, [sp, #100]	; 0x64
  403ac8:	b115      	cbz	r5, 403ad0 <_svfprintf_r+0x578>
  403aca:	232d      	movs	r3, #45	; 0x2d
  403acc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403ad0:	2500      	movs	r5, #0
  403ad2:	e149      	b.n	403d68 <_svfprintf_r+0x810>
  403ad4:	f017 0f20 	tst.w	r7, #32
  403ad8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403adc:	f108 0104 	add.w	r1, r8, #4
  403ae0:	d008      	beq.n	403af4 <_svfprintf_r+0x59c>
  403ae2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403ae4:	f8d8 0000 	ldr.w	r0, [r8]
  403ae8:	17e5      	asrs	r5, r4, #31
  403aea:	4622      	mov	r2, r4
  403aec:	462b      	mov	r3, r5
  403aee:	e9c0 2300 	strd	r2, r3, [r0]
  403af2:	e00c      	b.n	403b0e <_svfprintf_r+0x5b6>
  403af4:	06fb      	lsls	r3, r7, #27
  403af6:	d406      	bmi.n	403b06 <_svfprintf_r+0x5ae>
  403af8:	067d      	lsls	r5, r7, #25
  403afa:	d504      	bpl.n	403b06 <_svfprintf_r+0x5ae>
  403afc:	f8d8 3000 	ldr.w	r3, [r8]
  403b00:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403b02:	801c      	strh	r4, [r3, #0]
  403b04:	e003      	b.n	403b0e <_svfprintf_r+0x5b6>
  403b06:	f8d8 3000 	ldr.w	r3, [r8]
  403b0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403b0c:	601d      	str	r5, [r3, #0]
  403b0e:	4688      	mov	r8, r1
  403b10:	e557      	b.n	4035c2 <_svfprintf_r+0x6a>
  403b12:	f047 0710 	orr.w	r7, r7, #16
  403b16:	f017 0320 	ands.w	r3, r7, #32
  403b1a:	d009      	beq.n	403b30 <_svfprintf_r+0x5d8>
  403b1c:	f108 0807 	add.w	r8, r8, #7
  403b20:	f028 0307 	bic.w	r3, r8, #7
  403b24:	f103 0808 	add.w	r8, r3, #8
  403b28:	e9d3 4500 	ldrd	r4, r5, [r3]
  403b2c:	2300      	movs	r3, #0
  403b2e:	e088      	b.n	403c42 <_svfprintf_r+0x6ea>
  403b30:	f017 0110 	ands.w	r1, r7, #16
  403b34:	f108 0204 	add.w	r2, r8, #4
  403b38:	d107      	bne.n	403b4a <_svfprintf_r+0x5f2>
  403b3a:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  403b3e:	d004      	beq.n	403b4a <_svfprintf_r+0x5f2>
  403b40:	f8b8 4000 	ldrh.w	r4, [r8]
  403b44:	2500      	movs	r5, #0
  403b46:	4690      	mov	r8, r2
  403b48:	e7f0      	b.n	403b2c <_svfprintf_r+0x5d4>
  403b4a:	f8d8 4000 	ldr.w	r4, [r8]
  403b4e:	2500      	movs	r5, #0
  403b50:	4690      	mov	r8, r2
  403b52:	e076      	b.n	403c42 <_svfprintf_r+0x6ea>
  403b54:	48a9      	ldr	r0, [pc, #676]	; (403dfc <_svfprintf_r+0x8a4>)
  403b56:	2330      	movs	r3, #48	; 0x30
  403b58:	2278      	movs	r2, #120	; 0x78
  403b5a:	f8d8 4000 	ldr.w	r4, [r8]
  403b5e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403b62:	2500      	movs	r5, #0
  403b64:	f047 0702 	orr.w	r7, r7, #2
  403b68:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403b6c:	f108 0804 	add.w	r8, r8, #4
  403b70:	901b      	str	r0, [sp, #108]	; 0x6c
  403b72:	2302      	movs	r3, #2
  403b74:	9208      	str	r2, [sp, #32]
  403b76:	e064      	b.n	403c42 <_svfprintf_r+0x6ea>
  403b78:	4643      	mov	r3, r8
  403b7a:	2500      	movs	r5, #0
  403b7c:	681b      	ldr	r3, [r3, #0]
  403b7e:	45a9      	cmp	r9, r5
  403b80:	9307      	str	r3, [sp, #28]
  403b82:	f108 0804 	add.w	r8, r8, #4
  403b86:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  403b8a:	db0d      	blt.n	403ba8 <_svfprintf_r+0x650>
  403b8c:	4618      	mov	r0, r3
  403b8e:	4629      	mov	r1, r5
  403b90:	464a      	mov	r2, r9
  403b92:	f001 fe2f 	bl	4057f4 <memchr>
  403b96:	2800      	cmp	r0, #0
  403b98:	f000 80e4 	beq.w	403d64 <_svfprintf_r+0x80c>
  403b9c:	9c07      	ldr	r4, [sp, #28]
  403b9e:	1b00      	subs	r0, r0, r4
  403ba0:	4548      	cmp	r0, r9
  403ba2:	bfb8      	it	lt
  403ba4:	4681      	movlt	r9, r0
  403ba6:	e0de      	b.n	403d66 <_svfprintf_r+0x80e>
  403ba8:	9807      	ldr	r0, [sp, #28]
  403baa:	f7ff fc25 	bl	4033f8 <strlen>
  403bae:	4681      	mov	r9, r0
  403bb0:	e0d9      	b.n	403d66 <_svfprintf_r+0x80e>
  403bb2:	f047 0710 	orr.w	r7, r7, #16
  403bb6:	06bc      	lsls	r4, r7, #26
  403bb8:	d508      	bpl.n	403bcc <_svfprintf_r+0x674>
  403bba:	f108 0807 	add.w	r8, r8, #7
  403bbe:	f028 0307 	bic.w	r3, r8, #7
  403bc2:	f103 0808 	add.w	r8, r3, #8
  403bc6:	e9d3 4500 	ldrd	r4, r5, [r3]
  403bca:	e00d      	b.n	403be8 <_svfprintf_r+0x690>
  403bcc:	f017 0f10 	tst.w	r7, #16
  403bd0:	f108 0304 	add.w	r3, r8, #4
  403bd4:	d104      	bne.n	403be0 <_svfprintf_r+0x688>
  403bd6:	0678      	lsls	r0, r7, #25
  403bd8:	d502      	bpl.n	403be0 <_svfprintf_r+0x688>
  403bda:	f8b8 4000 	ldrh.w	r4, [r8]
  403bde:	e001      	b.n	403be4 <_svfprintf_r+0x68c>
  403be0:	f8d8 4000 	ldr.w	r4, [r8]
  403be4:	2500      	movs	r5, #0
  403be6:	4698      	mov	r8, r3
  403be8:	2301      	movs	r3, #1
  403bea:	e02a      	b.n	403c42 <_svfprintf_r+0x6ea>
  403bec:	4d83      	ldr	r5, [pc, #524]	; (403dfc <_svfprintf_r+0x8a4>)
  403bee:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403bf2:	951b      	str	r5, [sp, #108]	; 0x6c
  403bf4:	06b9      	lsls	r1, r7, #26
  403bf6:	d508      	bpl.n	403c0a <_svfprintf_r+0x6b2>
  403bf8:	f108 0807 	add.w	r8, r8, #7
  403bfc:	f028 0307 	bic.w	r3, r8, #7
  403c00:	f103 0808 	add.w	r8, r3, #8
  403c04:	e9d3 4500 	ldrd	r4, r5, [r3]
  403c08:	e00d      	b.n	403c26 <_svfprintf_r+0x6ce>
  403c0a:	f017 0f10 	tst.w	r7, #16
  403c0e:	f108 0304 	add.w	r3, r8, #4
  403c12:	d104      	bne.n	403c1e <_svfprintf_r+0x6c6>
  403c14:	067a      	lsls	r2, r7, #25
  403c16:	d502      	bpl.n	403c1e <_svfprintf_r+0x6c6>
  403c18:	f8b8 4000 	ldrh.w	r4, [r8]
  403c1c:	e001      	b.n	403c22 <_svfprintf_r+0x6ca>
  403c1e:	f8d8 4000 	ldr.w	r4, [r8]
  403c22:	2500      	movs	r5, #0
  403c24:	4698      	mov	r8, r3
  403c26:	07fb      	lsls	r3, r7, #31
  403c28:	d50a      	bpl.n	403c40 <_svfprintf_r+0x6e8>
  403c2a:	ea54 0005 	orrs.w	r0, r4, r5
  403c2e:	d007      	beq.n	403c40 <_svfprintf_r+0x6e8>
  403c30:	9908      	ldr	r1, [sp, #32]
  403c32:	2330      	movs	r3, #48	; 0x30
  403c34:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403c38:	f88d 1079 	strb.w	r1, [sp, #121]	; 0x79
  403c3c:	f047 0702 	orr.w	r7, r7, #2
  403c40:	2302      	movs	r3, #2
  403c42:	2200      	movs	r2, #0
  403c44:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
  403c48:	e000      	b.n	403c4c <_svfprintf_r+0x6f4>
  403c4a:	2301      	movs	r3, #1
  403c4c:	f1b9 0f00 	cmp.w	r9, #0
  403c50:	bfa8      	it	ge
  403c52:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  403c56:	ea54 0205 	orrs.w	r2, r4, r5
  403c5a:	d102      	bne.n	403c62 <_svfprintf_r+0x70a>
  403c5c:	f1b9 0f00 	cmp.w	r9, #0
  403c60:	d05a      	beq.n	403d18 <_svfprintf_r+0x7c0>
  403c62:	2b01      	cmp	r3, #1
  403c64:	d01f      	beq.n	403ca6 <_svfprintf_r+0x74e>
  403c66:	2b02      	cmp	r3, #2
  403c68:	f10d 03c7 	add.w	r3, sp, #199	; 0xc7
  403c6c:	d041      	beq.n	403cf2 <_svfprintf_r+0x79a>
  403c6e:	08e1      	lsrs	r1, r4, #3
  403c70:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
  403c74:	08e9      	lsrs	r1, r5, #3
  403c76:	f004 0207 	and.w	r2, r4, #7
  403c7a:	9014      	str	r0, [sp, #80]	; 0x50
  403c7c:	9115      	str	r1, [sp, #84]	; 0x54
  403c7e:	3230      	adds	r2, #48	; 0x30
  403c80:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
  403c84:	ea54 0005 	orrs.w	r0, r4, r5
  403c88:	9307      	str	r3, [sp, #28]
  403c8a:	701a      	strb	r2, [r3, #0]
  403c8c:	f103 33ff 	add.w	r3, r3, #4294967295
  403c90:	d1ed      	bne.n	403c6e <_svfprintf_r+0x716>
  403c92:	07f8      	lsls	r0, r7, #31
  403c94:	9907      	ldr	r1, [sp, #28]
  403c96:	d54c      	bpl.n	403d32 <_svfprintf_r+0x7da>
  403c98:	2a30      	cmp	r2, #48	; 0x30
  403c9a:	d04a      	beq.n	403d32 <_svfprintf_r+0x7da>
  403c9c:	9307      	str	r3, [sp, #28]
  403c9e:	2330      	movs	r3, #48	; 0x30
  403ca0:	f801 3c01 	strb.w	r3, [r1, #-1]
  403ca4:	e045      	b.n	403d32 <_svfprintf_r+0x7da>
  403ca6:	2d00      	cmp	r5, #0
  403ca8:	bf08      	it	eq
  403caa:	2c0a      	cmpeq	r4, #10
  403cac:	d205      	bcs.n	403cba <_svfprintf_r+0x762>
  403cae:	3430      	adds	r4, #48	; 0x30
  403cb0:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
  403cb4:	f10d 04c7 	add.w	r4, sp, #199	; 0xc7
  403cb8:	e03a      	b.n	403d30 <_svfprintf_r+0x7d8>
  403cba:	f10d 00c7 	add.w	r0, sp, #199	; 0xc7
  403cbe:	900a      	str	r0, [sp, #40]	; 0x28
  403cc0:	990a      	ldr	r1, [sp, #40]	; 0x28
  403cc2:	4620      	mov	r0, r4
  403cc4:	9107      	str	r1, [sp, #28]
  403cc6:	220a      	movs	r2, #10
  403cc8:	4629      	mov	r1, r5
  403cca:	2300      	movs	r3, #0
  403ccc:	f003 fcee 	bl	4076ac <__aeabi_uldivmod>
  403cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403cd2:	3230      	adds	r2, #48	; 0x30
  403cd4:	f803 2901 	strb.w	r2, [r3], #-1
  403cd8:	930a      	str	r3, [sp, #40]	; 0x28
  403cda:	4620      	mov	r0, r4
  403cdc:	4629      	mov	r1, r5
  403cde:	220a      	movs	r2, #10
  403ce0:	2300      	movs	r3, #0
  403ce2:	f003 fce3 	bl	4076ac <__aeabi_uldivmod>
  403ce6:	4604      	mov	r4, r0
  403ce8:	460d      	mov	r5, r1
  403cea:	ea54 0005 	orrs.w	r0, r4, r5
  403cee:	d1e7      	bne.n	403cc0 <_svfprintf_r+0x768>
  403cf0:	e01f      	b.n	403d32 <_svfprintf_r+0x7da>
  403cf2:	991b      	ldr	r1, [sp, #108]	; 0x6c
  403cf4:	f004 020f 	and.w	r2, r4, #15
  403cf8:	5c8a      	ldrb	r2, [r1, r2]
  403cfa:	9307      	str	r3, [sp, #28]
  403cfc:	f803 2901 	strb.w	r2, [r3], #-1
  403d00:	0922      	lsrs	r2, r4, #4
  403d02:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  403d06:	0929      	lsrs	r1, r5, #4
  403d08:	9016      	str	r0, [sp, #88]	; 0x58
  403d0a:	9117      	str	r1, [sp, #92]	; 0x5c
  403d0c:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  403d10:	ea54 0205 	orrs.w	r2, r4, r5
  403d14:	d1ed      	bne.n	403cf2 <_svfprintf_r+0x79a>
  403d16:	e00c      	b.n	403d32 <_svfprintf_r+0x7da>
  403d18:	b933      	cbnz	r3, 403d28 <_svfprintf_r+0x7d0>
  403d1a:	07fb      	lsls	r3, r7, #31
  403d1c:	d507      	bpl.n	403d2e <_svfprintf_r+0x7d6>
  403d1e:	ac42      	add	r4, sp, #264	; 0x108
  403d20:	2330      	movs	r3, #48	; 0x30
  403d22:	f804 3d41 	strb.w	r3, [r4, #-65]!
  403d26:	e003      	b.n	403d30 <_svfprintf_r+0x7d8>
  403d28:	ad32      	add	r5, sp, #200	; 0xc8
  403d2a:	9507      	str	r5, [sp, #28]
  403d2c:	e001      	b.n	403d32 <_svfprintf_r+0x7da>
  403d2e:	ac32      	add	r4, sp, #200	; 0xc8
  403d30:	9407      	str	r4, [sp, #28]
  403d32:	9c07      	ldr	r4, [sp, #28]
  403d34:	464d      	mov	r5, r9
  403d36:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  403d3a:	ebc4 0909 	rsb	r9, r4, r9
  403d3e:	2400      	movs	r4, #0
  403d40:	e012      	b.n	403d68 <_svfprintf_r+0x810>
  403d42:	9d08      	ldr	r5, [sp, #32]
  403d44:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403d48:	2d00      	cmp	r5, #0
  403d4a:	f000 8389 	beq.w	404460 <_svfprintf_r+0xf08>
  403d4e:	f88d 50a0 	strb.w	r5, [sp, #160]	; 0xa0
  403d52:	2500      	movs	r5, #0
  403d54:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
  403d58:	a828      	add	r0, sp, #160	; 0xa0
  403d5a:	f04f 0901 	mov.w	r9, #1
  403d5e:	462c      	mov	r4, r5
  403d60:	9007      	str	r0, [sp, #28]
  403d62:	e001      	b.n	403d68 <_svfprintf_r+0x810>
  403d64:	4605      	mov	r5, r0
  403d66:	462c      	mov	r4, r5
  403d68:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  403d6c:	45a9      	cmp	r9, r5
  403d6e:	bfac      	ite	ge
  403d70:	4649      	movge	r1, r9
  403d72:	4629      	movlt	r1, r5
  403d74:	910a      	str	r1, [sp, #40]	; 0x28
  403d76:	b10b      	cbz	r3, 403d7c <_svfprintf_r+0x824>
  403d78:	3101      	adds	r1, #1
  403d7a:	910a      	str	r1, [sp, #40]	; 0x28
  403d7c:	f017 0302 	ands.w	r3, r7, #2
  403d80:	9311      	str	r3, [sp, #68]	; 0x44
  403d82:	d002      	beq.n	403d8a <_svfprintf_r+0x832>
  403d84:	980a      	ldr	r0, [sp, #40]	; 0x28
  403d86:	3002      	adds	r0, #2
  403d88:	900a      	str	r0, [sp, #40]	; 0x28
  403d8a:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  403d8e:	9319      	str	r3, [sp, #100]	; 0x64
  403d90:	d141      	bne.n	403e16 <_svfprintf_r+0x8be>
  403d92:	980e      	ldr	r0, [sp, #56]	; 0x38
  403d94:	990a      	ldr	r1, [sp, #40]	; 0x28
  403d96:	ebc1 0c00 	rsb	ip, r1, r0
  403d9a:	f1bc 0f00 	cmp.w	ip, #0
  403d9e:	dd3a      	ble.n	403e16 <_svfprintf_r+0x8be>
  403da0:	4b17      	ldr	r3, [pc, #92]	; (403e00 <_svfprintf_r+0x8a8>)
  403da2:	f1bc 0f10 	cmp.w	ip, #16
  403da6:	6033      	str	r3, [r6, #0]
  403da8:	dd1b      	ble.n	403de2 <_svfprintf_r+0x88a>
  403daa:	2310      	movs	r3, #16
  403dac:	6073      	str	r3, [r6, #4]
  403dae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403db0:	3310      	adds	r3, #16
  403db2:	9327      	str	r3, [sp, #156]	; 0x9c
  403db4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403db6:	3301      	adds	r3, #1
  403db8:	2b07      	cmp	r3, #7
  403dba:	9326      	str	r3, [sp, #152]	; 0x98
  403dbc:	dc01      	bgt.n	403dc2 <_svfprintf_r+0x86a>
  403dbe:	3608      	adds	r6, #8
  403dc0:	e00c      	b.n	403ddc <_svfprintf_r+0x884>
  403dc2:	4650      	mov	r0, sl
  403dc4:	4659      	mov	r1, fp
  403dc6:	aa25      	add	r2, sp, #148	; 0x94
  403dc8:	f8cd c018 	str.w	ip, [sp, #24]
  403dcc:	f002 fb0e 	bl	4063ec <__ssprint_r>
  403dd0:	f8dd c018 	ldr.w	ip, [sp, #24]
  403dd4:	2800      	cmp	r0, #0
  403dd6:	f040 834a 	bne.w	40446e <_svfprintf_r+0xf16>
  403dda:	ae32      	add	r6, sp, #200	; 0xc8
  403ddc:	f1ac 0c10 	sub.w	ip, ip, #16
  403de0:	e7de      	b.n	403da0 <_svfprintf_r+0x848>
  403de2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403de4:	f8c6 c004 	str.w	ip, [r6, #4]
  403de8:	4463      	add	r3, ip
  403dea:	9327      	str	r3, [sp, #156]	; 0x9c
  403dec:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403dee:	3301      	adds	r3, #1
  403df0:	2b07      	cmp	r3, #7
  403df2:	9326      	str	r3, [sp, #152]	; 0x98
  403df4:	dc06      	bgt.n	403e04 <_svfprintf_r+0x8ac>
  403df6:	3608      	adds	r6, #8
  403df8:	e00d      	b.n	403e16 <_svfprintf_r+0x8be>
  403dfa:	bf00      	nop
  403dfc:	00407dbf 	.word	0x00407dbf
  403e00:	00407d7e 	.word	0x00407d7e
  403e04:	4650      	mov	r0, sl
  403e06:	4659      	mov	r1, fp
  403e08:	aa25      	add	r2, sp, #148	; 0x94
  403e0a:	f002 faef 	bl	4063ec <__ssprint_r>
  403e0e:	2800      	cmp	r0, #0
  403e10:	f040 832d 	bne.w	40446e <_svfprintf_r+0xf16>
  403e14:	ae32      	add	r6, sp, #200	; 0xc8
  403e16:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
  403e1a:	b1bb      	cbz	r3, 403e4c <_svfprintf_r+0x8f4>
  403e1c:	f10d 0377 	add.w	r3, sp, #119	; 0x77
  403e20:	6033      	str	r3, [r6, #0]
  403e22:	2301      	movs	r3, #1
  403e24:	6073      	str	r3, [r6, #4]
  403e26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403e28:	3301      	adds	r3, #1
  403e2a:	9327      	str	r3, [sp, #156]	; 0x9c
  403e2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e2e:	3301      	adds	r3, #1
  403e30:	2b07      	cmp	r3, #7
  403e32:	9326      	str	r3, [sp, #152]	; 0x98
  403e34:	dc01      	bgt.n	403e3a <_svfprintf_r+0x8e2>
  403e36:	3608      	adds	r6, #8
  403e38:	e008      	b.n	403e4c <_svfprintf_r+0x8f4>
  403e3a:	4650      	mov	r0, sl
  403e3c:	4659      	mov	r1, fp
  403e3e:	aa25      	add	r2, sp, #148	; 0x94
  403e40:	f002 fad4 	bl	4063ec <__ssprint_r>
  403e44:	2800      	cmp	r0, #0
  403e46:	f040 8312 	bne.w	40446e <_svfprintf_r+0xf16>
  403e4a:	ae32      	add	r6, sp, #200	; 0xc8
  403e4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403e4e:	b1b3      	cbz	r3, 403e7e <_svfprintf_r+0x926>
  403e50:	ab1e      	add	r3, sp, #120	; 0x78
  403e52:	6033      	str	r3, [r6, #0]
  403e54:	2302      	movs	r3, #2
  403e56:	6073      	str	r3, [r6, #4]
  403e58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403e5a:	3302      	adds	r3, #2
  403e5c:	9327      	str	r3, [sp, #156]	; 0x9c
  403e5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403e60:	3301      	adds	r3, #1
  403e62:	2b07      	cmp	r3, #7
  403e64:	9326      	str	r3, [sp, #152]	; 0x98
  403e66:	dc01      	bgt.n	403e6c <_svfprintf_r+0x914>
  403e68:	3608      	adds	r6, #8
  403e6a:	e008      	b.n	403e7e <_svfprintf_r+0x926>
  403e6c:	4650      	mov	r0, sl
  403e6e:	4659      	mov	r1, fp
  403e70:	aa25      	add	r2, sp, #148	; 0x94
  403e72:	f002 fabb 	bl	4063ec <__ssprint_r>
  403e76:	2800      	cmp	r0, #0
  403e78:	f040 82f9 	bne.w	40446e <_svfprintf_r+0xf16>
  403e7c:	ae32      	add	r6, sp, #200	; 0xc8
  403e7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403e80:	2b80      	cmp	r3, #128	; 0x80
  403e82:	d13c      	bne.n	403efe <_svfprintf_r+0x9a6>
  403e84:	980e      	ldr	r0, [sp, #56]	; 0x38
  403e86:	990a      	ldr	r1, [sp, #40]	; 0x28
  403e88:	ebc1 0c00 	rsb	ip, r1, r0
  403e8c:	f1bc 0f00 	cmp.w	ip, #0
  403e90:	dd35      	ble.n	403efe <_svfprintf_r+0x9a6>
  403e92:	4b9c      	ldr	r3, [pc, #624]	; (404104 <_svfprintf_r+0xbac>)
  403e94:	f1bc 0f10 	cmp.w	ip, #16
  403e98:	6033      	str	r3, [r6, #0]
  403e9a:	dd1b      	ble.n	403ed4 <_svfprintf_r+0x97c>
  403e9c:	2310      	movs	r3, #16
  403e9e:	6073      	str	r3, [r6, #4]
  403ea0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403ea2:	3310      	adds	r3, #16
  403ea4:	9327      	str	r3, [sp, #156]	; 0x9c
  403ea6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ea8:	3301      	adds	r3, #1
  403eaa:	2b07      	cmp	r3, #7
  403eac:	9326      	str	r3, [sp, #152]	; 0x98
  403eae:	dc01      	bgt.n	403eb4 <_svfprintf_r+0x95c>
  403eb0:	3608      	adds	r6, #8
  403eb2:	e00c      	b.n	403ece <_svfprintf_r+0x976>
  403eb4:	4650      	mov	r0, sl
  403eb6:	4659      	mov	r1, fp
  403eb8:	aa25      	add	r2, sp, #148	; 0x94
  403eba:	f8cd c018 	str.w	ip, [sp, #24]
  403ebe:	f002 fa95 	bl	4063ec <__ssprint_r>
  403ec2:	f8dd c018 	ldr.w	ip, [sp, #24]
  403ec6:	2800      	cmp	r0, #0
  403ec8:	f040 82d1 	bne.w	40446e <_svfprintf_r+0xf16>
  403ecc:	ae32      	add	r6, sp, #200	; 0xc8
  403ece:	f1ac 0c10 	sub.w	ip, ip, #16
  403ed2:	e7de      	b.n	403e92 <_svfprintf_r+0x93a>
  403ed4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403ed6:	f8c6 c004 	str.w	ip, [r6, #4]
  403eda:	4463      	add	r3, ip
  403edc:	9327      	str	r3, [sp, #156]	; 0x9c
  403ede:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ee0:	3301      	adds	r3, #1
  403ee2:	2b07      	cmp	r3, #7
  403ee4:	9326      	str	r3, [sp, #152]	; 0x98
  403ee6:	dc01      	bgt.n	403eec <_svfprintf_r+0x994>
  403ee8:	3608      	adds	r6, #8
  403eea:	e008      	b.n	403efe <_svfprintf_r+0x9a6>
  403eec:	4650      	mov	r0, sl
  403eee:	4659      	mov	r1, fp
  403ef0:	aa25      	add	r2, sp, #148	; 0x94
  403ef2:	f002 fa7b 	bl	4063ec <__ssprint_r>
  403ef6:	2800      	cmp	r0, #0
  403ef8:	f040 82b9 	bne.w	40446e <_svfprintf_r+0xf16>
  403efc:	ae32      	add	r6, sp, #200	; 0xc8
  403efe:	ebc9 0505 	rsb	r5, r9, r5
  403f02:	2d00      	cmp	r5, #0
  403f04:	dd2e      	ble.n	403f64 <_svfprintf_r+0xa0c>
  403f06:	4b7f      	ldr	r3, [pc, #508]	; (404104 <_svfprintf_r+0xbac>)
  403f08:	2d10      	cmp	r5, #16
  403f0a:	6033      	str	r3, [r6, #0]
  403f0c:	dd16      	ble.n	403f3c <_svfprintf_r+0x9e4>
  403f0e:	2310      	movs	r3, #16
  403f10:	6073      	str	r3, [r6, #4]
  403f12:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403f14:	3310      	adds	r3, #16
  403f16:	9327      	str	r3, [sp, #156]	; 0x9c
  403f18:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f1a:	3301      	adds	r3, #1
  403f1c:	2b07      	cmp	r3, #7
  403f1e:	9326      	str	r3, [sp, #152]	; 0x98
  403f20:	dc01      	bgt.n	403f26 <_svfprintf_r+0x9ce>
  403f22:	3608      	adds	r6, #8
  403f24:	e008      	b.n	403f38 <_svfprintf_r+0x9e0>
  403f26:	4650      	mov	r0, sl
  403f28:	4659      	mov	r1, fp
  403f2a:	aa25      	add	r2, sp, #148	; 0x94
  403f2c:	f002 fa5e 	bl	4063ec <__ssprint_r>
  403f30:	2800      	cmp	r0, #0
  403f32:	f040 829c 	bne.w	40446e <_svfprintf_r+0xf16>
  403f36:	ae32      	add	r6, sp, #200	; 0xc8
  403f38:	3d10      	subs	r5, #16
  403f3a:	e7e4      	b.n	403f06 <_svfprintf_r+0x9ae>
  403f3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403f3e:	6075      	str	r5, [r6, #4]
  403f40:	441d      	add	r5, r3
  403f42:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f44:	9527      	str	r5, [sp, #156]	; 0x9c
  403f46:	3301      	adds	r3, #1
  403f48:	2b07      	cmp	r3, #7
  403f4a:	9326      	str	r3, [sp, #152]	; 0x98
  403f4c:	dc01      	bgt.n	403f52 <_svfprintf_r+0x9fa>
  403f4e:	3608      	adds	r6, #8
  403f50:	e008      	b.n	403f64 <_svfprintf_r+0xa0c>
  403f52:	4650      	mov	r0, sl
  403f54:	4659      	mov	r1, fp
  403f56:	aa25      	add	r2, sp, #148	; 0x94
  403f58:	f002 fa48 	bl	4063ec <__ssprint_r>
  403f5c:	2800      	cmp	r0, #0
  403f5e:	f040 8286 	bne.w	40446e <_svfprintf_r+0xf16>
  403f62:	ae32      	add	r6, sp, #200	; 0xc8
  403f64:	05fd      	lsls	r5, r7, #23
  403f66:	d405      	bmi.n	403f74 <_svfprintf_r+0xa1c>
  403f68:	9c07      	ldr	r4, [sp, #28]
  403f6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403f6c:	e886 0210 	stmia.w	r6, {r4, r9}
  403f70:	444b      	add	r3, r9
  403f72:	e0da      	b.n	40412a <_svfprintf_r+0xbd2>
  403f74:	9d08      	ldr	r5, [sp, #32]
  403f76:	2d65      	cmp	r5, #101	; 0x65
  403f78:	f340 81a7 	ble.w	4042ca <_svfprintf_r+0xd72>
  403f7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  403f80:	2200      	movs	r2, #0
  403f82:	2300      	movs	r3, #0
  403f84:	f003 fb38 	bl	4075f8 <__aeabi_dcmpeq>
  403f88:	2800      	cmp	r0, #0
  403f8a:	d059      	beq.n	404040 <_svfprintf_r+0xae8>
  403f8c:	4b5e      	ldr	r3, [pc, #376]	; (404108 <_svfprintf_r+0xbb0>)
  403f8e:	6033      	str	r3, [r6, #0]
  403f90:	2301      	movs	r3, #1
  403f92:	6073      	str	r3, [r6, #4]
  403f94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403f96:	3301      	adds	r3, #1
  403f98:	9327      	str	r3, [sp, #156]	; 0x9c
  403f9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f9c:	3301      	adds	r3, #1
  403f9e:	2b07      	cmp	r3, #7
  403fa0:	9326      	str	r3, [sp, #152]	; 0x98
  403fa2:	dc01      	bgt.n	403fa8 <_svfprintf_r+0xa50>
  403fa4:	3608      	adds	r6, #8
  403fa6:	e008      	b.n	403fba <_svfprintf_r+0xa62>
  403fa8:	4650      	mov	r0, sl
  403faa:	4659      	mov	r1, fp
  403fac:	aa25      	add	r2, sp, #148	; 0x94
  403fae:	f002 fa1d 	bl	4063ec <__ssprint_r>
  403fb2:	2800      	cmp	r0, #0
  403fb4:	f040 825b 	bne.w	40446e <_svfprintf_r+0xf16>
  403fb8:	ae32      	add	r6, sp, #200	; 0xc8
  403fba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403fbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403fbe:	42a3      	cmp	r3, r4
  403fc0:	db02      	blt.n	403fc8 <_svfprintf_r+0xa70>
  403fc2:	07fc      	lsls	r4, r7, #31
  403fc4:	f140 8202 	bpl.w	4043cc <_svfprintf_r+0xe74>
  403fc8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403fca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  403fcc:	9d18      	ldr	r5, [sp, #96]	; 0x60
  403fce:	4423      	add	r3, r4
  403fd0:	9327      	str	r3, [sp, #156]	; 0x9c
  403fd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fd4:	6035      	str	r5, [r6, #0]
  403fd6:	3301      	adds	r3, #1
  403fd8:	2b07      	cmp	r3, #7
  403fda:	6074      	str	r4, [r6, #4]
  403fdc:	9326      	str	r3, [sp, #152]	; 0x98
  403fde:	dc01      	bgt.n	403fe4 <_svfprintf_r+0xa8c>
  403fe0:	3608      	adds	r6, #8
  403fe2:	e008      	b.n	403ff6 <_svfprintf_r+0xa9e>
  403fe4:	4650      	mov	r0, sl
  403fe6:	4659      	mov	r1, fp
  403fe8:	aa25      	add	r2, sp, #148	; 0x94
  403fea:	f002 f9ff 	bl	4063ec <__ssprint_r>
  403fee:	2800      	cmp	r0, #0
  403ff0:	f040 823d 	bne.w	40446e <_svfprintf_r+0xf16>
  403ff4:	ae32      	add	r6, sp, #200	; 0xc8
  403ff6:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403ff8:	1e6c      	subs	r4, r5, #1
  403ffa:	2c00      	cmp	r4, #0
  403ffc:	f340 81e6 	ble.w	4043cc <_svfprintf_r+0xe74>
  404000:	4b40      	ldr	r3, [pc, #256]	; (404104 <_svfprintf_r+0xbac>)
  404002:	2c10      	cmp	r4, #16
  404004:	6033      	str	r3, [r6, #0]
  404006:	dd16      	ble.n	404036 <_svfprintf_r+0xade>
  404008:	2310      	movs	r3, #16
  40400a:	6073      	str	r3, [r6, #4]
  40400c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40400e:	3310      	adds	r3, #16
  404010:	9327      	str	r3, [sp, #156]	; 0x9c
  404012:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404014:	3301      	adds	r3, #1
  404016:	2b07      	cmp	r3, #7
  404018:	9326      	str	r3, [sp, #152]	; 0x98
  40401a:	dc01      	bgt.n	404020 <_svfprintf_r+0xac8>
  40401c:	3608      	adds	r6, #8
  40401e:	e008      	b.n	404032 <_svfprintf_r+0xada>
  404020:	4650      	mov	r0, sl
  404022:	4659      	mov	r1, fp
  404024:	aa25      	add	r2, sp, #148	; 0x94
  404026:	f002 f9e1 	bl	4063ec <__ssprint_r>
  40402a:	2800      	cmp	r0, #0
  40402c:	f040 821f 	bne.w	40446e <_svfprintf_r+0xf16>
  404030:	ae32      	add	r6, sp, #200	; 0xc8
  404032:	3c10      	subs	r4, #16
  404034:	e7e4      	b.n	404000 <_svfprintf_r+0xaa8>
  404036:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404038:	6074      	str	r4, [r6, #4]
  40403a:	441c      	add	r4, r3
  40403c:	9427      	str	r4, [sp, #156]	; 0x9c
  40403e:	e134      	b.n	4042aa <_svfprintf_r+0xd52>
  404040:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404042:	2b00      	cmp	r3, #0
  404044:	dc73      	bgt.n	40412e <_svfprintf_r+0xbd6>
  404046:	4b30      	ldr	r3, [pc, #192]	; (404108 <_svfprintf_r+0xbb0>)
  404048:	6033      	str	r3, [r6, #0]
  40404a:	2301      	movs	r3, #1
  40404c:	6073      	str	r3, [r6, #4]
  40404e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404050:	3301      	adds	r3, #1
  404052:	9327      	str	r3, [sp, #156]	; 0x9c
  404054:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404056:	3301      	adds	r3, #1
  404058:	2b07      	cmp	r3, #7
  40405a:	9326      	str	r3, [sp, #152]	; 0x98
  40405c:	dc01      	bgt.n	404062 <_svfprintf_r+0xb0a>
  40405e:	3608      	adds	r6, #8
  404060:	e008      	b.n	404074 <_svfprintf_r+0xb1c>
  404062:	4650      	mov	r0, sl
  404064:	4659      	mov	r1, fp
  404066:	aa25      	add	r2, sp, #148	; 0x94
  404068:	f002 f9c0 	bl	4063ec <__ssprint_r>
  40406c:	2800      	cmp	r0, #0
  40406e:	f040 81fe 	bne.w	40446e <_svfprintf_r+0xf16>
  404072:	ae32      	add	r6, sp, #200	; 0xc8
  404074:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404076:	b923      	cbnz	r3, 404082 <_svfprintf_r+0xb2a>
  404078:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40407a:	b914      	cbnz	r4, 404082 <_svfprintf_r+0xb2a>
  40407c:	07f8      	lsls	r0, r7, #31
  40407e:	f140 81a5 	bpl.w	4043cc <_svfprintf_r+0xe74>
  404082:	9c10      	ldr	r4, [sp, #64]	; 0x40
  404084:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404086:	9d18      	ldr	r5, [sp, #96]	; 0x60
  404088:	4423      	add	r3, r4
  40408a:	9327      	str	r3, [sp, #156]	; 0x9c
  40408c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40408e:	6035      	str	r5, [r6, #0]
  404090:	3301      	adds	r3, #1
  404092:	2b07      	cmp	r3, #7
  404094:	6074      	str	r4, [r6, #4]
  404096:	9326      	str	r3, [sp, #152]	; 0x98
  404098:	dc01      	bgt.n	40409e <_svfprintf_r+0xb46>
  40409a:	3608      	adds	r6, #8
  40409c:	e008      	b.n	4040b0 <_svfprintf_r+0xb58>
  40409e:	4650      	mov	r0, sl
  4040a0:	4659      	mov	r1, fp
  4040a2:	aa25      	add	r2, sp, #148	; 0x94
  4040a4:	f002 f9a2 	bl	4063ec <__ssprint_r>
  4040a8:	2800      	cmp	r0, #0
  4040aa:	f040 81e0 	bne.w	40446e <_svfprintf_r+0xf16>
  4040ae:	ae32      	add	r6, sp, #200	; 0xc8
  4040b0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  4040b2:	4264      	negs	r4, r4
  4040b4:	2c00      	cmp	r4, #0
  4040b6:	dd32      	ble.n	40411e <_svfprintf_r+0xbc6>
  4040b8:	4b12      	ldr	r3, [pc, #72]	; (404104 <_svfprintf_r+0xbac>)
  4040ba:	2c10      	cmp	r4, #16
  4040bc:	6033      	str	r3, [r6, #0]
  4040be:	dd16      	ble.n	4040ee <_svfprintf_r+0xb96>
  4040c0:	2310      	movs	r3, #16
  4040c2:	6073      	str	r3, [r6, #4]
  4040c4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4040c6:	3310      	adds	r3, #16
  4040c8:	9327      	str	r3, [sp, #156]	; 0x9c
  4040ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040cc:	3301      	adds	r3, #1
  4040ce:	2b07      	cmp	r3, #7
  4040d0:	9326      	str	r3, [sp, #152]	; 0x98
  4040d2:	dc01      	bgt.n	4040d8 <_svfprintf_r+0xb80>
  4040d4:	3608      	adds	r6, #8
  4040d6:	e008      	b.n	4040ea <_svfprintf_r+0xb92>
  4040d8:	4650      	mov	r0, sl
  4040da:	4659      	mov	r1, fp
  4040dc:	aa25      	add	r2, sp, #148	; 0x94
  4040de:	f002 f985 	bl	4063ec <__ssprint_r>
  4040e2:	2800      	cmp	r0, #0
  4040e4:	f040 81c3 	bne.w	40446e <_svfprintf_r+0xf16>
  4040e8:	ae32      	add	r6, sp, #200	; 0xc8
  4040ea:	3c10      	subs	r4, #16
  4040ec:	e7e4      	b.n	4040b8 <_svfprintf_r+0xb60>
  4040ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4040f0:	6074      	str	r4, [r6, #4]
  4040f2:	441c      	add	r4, r3
  4040f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4040f6:	9427      	str	r4, [sp, #156]	; 0x9c
  4040f8:	3301      	adds	r3, #1
  4040fa:	2b07      	cmp	r3, #7
  4040fc:	9326      	str	r3, [sp, #152]	; 0x98
  4040fe:	dc05      	bgt.n	40410c <_svfprintf_r+0xbb4>
  404100:	3608      	adds	r6, #8
  404102:	e00c      	b.n	40411e <_svfprintf_r+0xbc6>
  404104:	00407d8e 	.word	0x00407d8e
  404108:	00407dd0 	.word	0x00407dd0
  40410c:	4650      	mov	r0, sl
  40410e:	4659      	mov	r1, fp
  404110:	aa25      	add	r2, sp, #148	; 0x94
  404112:	f002 f96b 	bl	4063ec <__ssprint_r>
  404116:	2800      	cmp	r0, #0
  404118:	f040 81a9 	bne.w	40446e <_svfprintf_r+0xf16>
  40411c:	ae32      	add	r6, sp, #200	; 0xc8
  40411e:	9d07      	ldr	r5, [sp, #28]
  404120:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404122:	6035      	str	r5, [r6, #0]
  404124:	6074      	str	r4, [r6, #4]
  404126:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404128:	4423      	add	r3, r4
  40412a:	9327      	str	r3, [sp, #156]	; 0x9c
  40412c:	e0bd      	b.n	4042aa <_svfprintf_r+0xd52>
  40412e:	9809      	ldr	r0, [sp, #36]	; 0x24
  404130:	9d07      	ldr	r5, [sp, #28]
  404132:	4681      	mov	r9, r0
  404134:	45a1      	cmp	r9, r4
  404136:	bfa8      	it	ge
  404138:	46a1      	movge	r9, r4
  40413a:	f1b9 0f00 	cmp.w	r9, #0
  40413e:	4405      	add	r5, r0
  404140:	dd15      	ble.n	40416e <_svfprintf_r+0xc16>
  404142:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404144:	9907      	ldr	r1, [sp, #28]
  404146:	444b      	add	r3, r9
  404148:	9327      	str	r3, [sp, #156]	; 0x9c
  40414a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40414c:	e886 0202 	stmia.w	r6, {r1, r9}
  404150:	3301      	adds	r3, #1
  404152:	2b07      	cmp	r3, #7
  404154:	9326      	str	r3, [sp, #152]	; 0x98
  404156:	dc01      	bgt.n	40415c <_svfprintf_r+0xc04>
  404158:	3608      	adds	r6, #8
  40415a:	e008      	b.n	40416e <_svfprintf_r+0xc16>
  40415c:	4650      	mov	r0, sl
  40415e:	4659      	mov	r1, fp
  404160:	aa25      	add	r2, sp, #148	; 0x94
  404162:	f002 f943 	bl	4063ec <__ssprint_r>
  404166:	2800      	cmp	r0, #0
  404168:	f040 8181 	bne.w	40446e <_svfprintf_r+0xf16>
  40416c:	ae32      	add	r6, sp, #200	; 0xc8
  40416e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  404172:	ebc9 0904 	rsb	r9, r9, r4
  404176:	f1b9 0f00 	cmp.w	r9, #0
  40417a:	dd31      	ble.n	4041e0 <_svfprintf_r+0xc88>
  40417c:	4b9a      	ldr	r3, [pc, #616]	; (4043e8 <_svfprintf_r+0xe90>)
  40417e:	f1b9 0f10 	cmp.w	r9, #16
  404182:	6033      	str	r3, [r6, #0]
  404184:	dd17      	ble.n	4041b6 <_svfprintf_r+0xc5e>
  404186:	2310      	movs	r3, #16
  404188:	6073      	str	r3, [r6, #4]
  40418a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40418c:	3310      	adds	r3, #16
  40418e:	9327      	str	r3, [sp, #156]	; 0x9c
  404190:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404192:	3301      	adds	r3, #1
  404194:	2b07      	cmp	r3, #7
  404196:	9326      	str	r3, [sp, #152]	; 0x98
  404198:	dc01      	bgt.n	40419e <_svfprintf_r+0xc46>
  40419a:	3608      	adds	r6, #8
  40419c:	e008      	b.n	4041b0 <_svfprintf_r+0xc58>
  40419e:	4650      	mov	r0, sl
  4041a0:	4659      	mov	r1, fp
  4041a2:	aa25      	add	r2, sp, #148	; 0x94
  4041a4:	f002 f922 	bl	4063ec <__ssprint_r>
  4041a8:	2800      	cmp	r0, #0
  4041aa:	f040 8160 	bne.w	40446e <_svfprintf_r+0xf16>
  4041ae:	ae32      	add	r6, sp, #200	; 0xc8
  4041b0:	f1a9 0910 	sub.w	r9, r9, #16
  4041b4:	e7e2      	b.n	40417c <_svfprintf_r+0xc24>
  4041b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4041b8:	f8c6 9004 	str.w	r9, [r6, #4]
  4041bc:	444b      	add	r3, r9
  4041be:	9327      	str	r3, [sp, #156]	; 0x9c
  4041c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041c2:	3301      	adds	r3, #1
  4041c4:	2b07      	cmp	r3, #7
  4041c6:	9326      	str	r3, [sp, #152]	; 0x98
  4041c8:	dc01      	bgt.n	4041ce <_svfprintf_r+0xc76>
  4041ca:	3608      	adds	r6, #8
  4041cc:	e008      	b.n	4041e0 <_svfprintf_r+0xc88>
  4041ce:	4650      	mov	r0, sl
  4041d0:	4659      	mov	r1, fp
  4041d2:	aa25      	add	r2, sp, #148	; 0x94
  4041d4:	f002 f90a 	bl	4063ec <__ssprint_r>
  4041d8:	2800      	cmp	r0, #0
  4041da:	f040 8148 	bne.w	40446e <_svfprintf_r+0xf16>
  4041de:	ae32      	add	r6, sp, #200	; 0xc8
  4041e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4041e2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4041e4:	9a07      	ldr	r2, [sp, #28]
  4041e6:	4283      	cmp	r3, r0
  4041e8:	4414      	add	r4, r2
  4041ea:	db01      	blt.n	4041f0 <_svfprintf_r+0xc98>
  4041ec:	07f9      	lsls	r1, r7, #31
  4041ee:	d516      	bpl.n	40421e <_svfprintf_r+0xcc6>
  4041f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
  4041f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4041f4:	9918      	ldr	r1, [sp, #96]	; 0x60
  4041f6:	4413      	add	r3, r2
  4041f8:	9327      	str	r3, [sp, #156]	; 0x9c
  4041fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041fc:	6031      	str	r1, [r6, #0]
  4041fe:	3301      	adds	r3, #1
  404200:	2b07      	cmp	r3, #7
  404202:	6072      	str	r2, [r6, #4]
  404204:	9326      	str	r3, [sp, #152]	; 0x98
  404206:	dc01      	bgt.n	40420c <_svfprintf_r+0xcb4>
  404208:	3608      	adds	r6, #8
  40420a:	e008      	b.n	40421e <_svfprintf_r+0xcc6>
  40420c:	4650      	mov	r0, sl
  40420e:	4659      	mov	r1, fp
  404210:	aa25      	add	r2, sp, #148	; 0x94
  404212:	f002 f8eb 	bl	4063ec <__ssprint_r>
  404216:	2800      	cmp	r0, #0
  404218:	f040 8129 	bne.w	40446e <_svfprintf_r+0xf16>
  40421c:	ae32      	add	r6, sp, #200	; 0xc8
  40421e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404220:	9809      	ldr	r0, [sp, #36]	; 0x24
  404222:	1b2d      	subs	r5, r5, r4
  404224:	1ac3      	subs	r3, r0, r3
  404226:	429d      	cmp	r5, r3
  404228:	bfa8      	it	ge
  40422a:	461d      	movge	r5, r3
  40422c:	2d00      	cmp	r5, #0
  40422e:	dd14      	ble.n	40425a <_svfprintf_r+0xd02>
  404230:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404232:	e886 0030 	stmia.w	r6, {r4, r5}
  404236:	442b      	add	r3, r5
  404238:	9327      	str	r3, [sp, #156]	; 0x9c
  40423a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40423c:	3301      	adds	r3, #1
  40423e:	2b07      	cmp	r3, #7
  404240:	9326      	str	r3, [sp, #152]	; 0x98
  404242:	dc01      	bgt.n	404248 <_svfprintf_r+0xcf0>
  404244:	3608      	adds	r6, #8
  404246:	e008      	b.n	40425a <_svfprintf_r+0xd02>
  404248:	4650      	mov	r0, sl
  40424a:	4659      	mov	r1, fp
  40424c:	aa25      	add	r2, sp, #148	; 0x94
  40424e:	f002 f8cd 	bl	4063ec <__ssprint_r>
  404252:	2800      	cmp	r0, #0
  404254:	f040 810b 	bne.w	40446e <_svfprintf_r+0xf16>
  404258:	ae32      	add	r6, sp, #200	; 0xc8
  40425a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40425c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40425e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  404262:	1ae3      	subs	r3, r4, r3
  404264:	1b5d      	subs	r5, r3, r5
  404266:	2d00      	cmp	r5, #0
  404268:	f340 80b0 	ble.w	4043cc <_svfprintf_r+0xe74>
  40426c:	4b5e      	ldr	r3, [pc, #376]	; (4043e8 <_svfprintf_r+0xe90>)
  40426e:	2d10      	cmp	r5, #16
  404270:	6033      	str	r3, [r6, #0]
  404272:	dd16      	ble.n	4042a2 <_svfprintf_r+0xd4a>
  404274:	2310      	movs	r3, #16
  404276:	6073      	str	r3, [r6, #4]
  404278:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40427a:	3310      	adds	r3, #16
  40427c:	9327      	str	r3, [sp, #156]	; 0x9c
  40427e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404280:	3301      	adds	r3, #1
  404282:	2b07      	cmp	r3, #7
  404284:	9326      	str	r3, [sp, #152]	; 0x98
  404286:	dc01      	bgt.n	40428c <_svfprintf_r+0xd34>
  404288:	3608      	adds	r6, #8
  40428a:	e008      	b.n	40429e <_svfprintf_r+0xd46>
  40428c:	4650      	mov	r0, sl
  40428e:	4659      	mov	r1, fp
  404290:	aa25      	add	r2, sp, #148	; 0x94
  404292:	f002 f8ab 	bl	4063ec <__ssprint_r>
  404296:	2800      	cmp	r0, #0
  404298:	f040 80e9 	bne.w	40446e <_svfprintf_r+0xf16>
  40429c:	ae32      	add	r6, sp, #200	; 0xc8
  40429e:	3d10      	subs	r5, #16
  4042a0:	e7e4      	b.n	40426c <_svfprintf_r+0xd14>
  4042a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4042a4:	6075      	str	r5, [r6, #4]
  4042a6:	441d      	add	r5, r3
  4042a8:	9527      	str	r5, [sp, #156]	; 0x9c
  4042aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042ac:	3301      	adds	r3, #1
  4042ae:	2b07      	cmp	r3, #7
  4042b0:	9326      	str	r3, [sp, #152]	; 0x98
  4042b2:	f340 808a 	ble.w	4043ca <_svfprintf_r+0xe72>
  4042b6:	4650      	mov	r0, sl
  4042b8:	4659      	mov	r1, fp
  4042ba:	aa25      	add	r2, sp, #148	; 0x94
  4042bc:	f002 f896 	bl	4063ec <__ssprint_r>
  4042c0:	2800      	cmp	r0, #0
  4042c2:	f040 80d4 	bne.w	40446e <_svfprintf_r+0xf16>
  4042c6:	ae32      	add	r6, sp, #200	; 0xc8
  4042c8:	e080      	b.n	4043cc <_svfprintf_r+0xe74>
  4042ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4042cc:	2d01      	cmp	r5, #1
  4042ce:	dc01      	bgt.n	4042d4 <_svfprintf_r+0xd7c>
  4042d0:	07fa      	lsls	r2, r7, #31
  4042d2:	d56d      	bpl.n	4043b0 <_svfprintf_r+0xe58>
  4042d4:	2301      	movs	r3, #1
  4042d6:	6073      	str	r3, [r6, #4]
  4042d8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4042da:	9c07      	ldr	r4, [sp, #28]
  4042dc:	3301      	adds	r3, #1
  4042de:	9327      	str	r3, [sp, #156]	; 0x9c
  4042e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4042e2:	6034      	str	r4, [r6, #0]
  4042e4:	3301      	adds	r3, #1
  4042e6:	2b07      	cmp	r3, #7
  4042e8:	9326      	str	r3, [sp, #152]	; 0x98
  4042ea:	dc01      	bgt.n	4042f0 <_svfprintf_r+0xd98>
  4042ec:	3608      	adds	r6, #8
  4042ee:	e008      	b.n	404302 <_svfprintf_r+0xdaa>
  4042f0:	4650      	mov	r0, sl
  4042f2:	4659      	mov	r1, fp
  4042f4:	aa25      	add	r2, sp, #148	; 0x94
  4042f6:	f002 f879 	bl	4063ec <__ssprint_r>
  4042fa:	2800      	cmp	r0, #0
  4042fc:	f040 80b7 	bne.w	40446e <_svfprintf_r+0xf16>
  404300:	ae32      	add	r6, sp, #200	; 0xc8
  404302:	9c10      	ldr	r4, [sp, #64]	; 0x40
  404304:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404306:	9d18      	ldr	r5, [sp, #96]	; 0x60
  404308:	4423      	add	r3, r4
  40430a:	9327      	str	r3, [sp, #156]	; 0x9c
  40430c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40430e:	6035      	str	r5, [r6, #0]
  404310:	3301      	adds	r3, #1
  404312:	2b07      	cmp	r3, #7
  404314:	6074      	str	r4, [r6, #4]
  404316:	9326      	str	r3, [sp, #152]	; 0x98
  404318:	dc01      	bgt.n	40431e <_svfprintf_r+0xdc6>
  40431a:	3608      	adds	r6, #8
  40431c:	e008      	b.n	404330 <_svfprintf_r+0xdd8>
  40431e:	4650      	mov	r0, sl
  404320:	4659      	mov	r1, fp
  404322:	aa25      	add	r2, sp, #148	; 0x94
  404324:	f002 f862 	bl	4063ec <__ssprint_r>
  404328:	2800      	cmp	r0, #0
  40432a:	f040 80a0 	bne.w	40446e <_svfprintf_r+0xf16>
  40432e:	ae32      	add	r6, sp, #200	; 0xc8
  404330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404334:	2200      	movs	r2, #0
  404336:	2300      	movs	r3, #0
  404338:	f003 f95e 	bl	4075f8 <__aeabi_dcmpeq>
  40433c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40433e:	1e6c      	subs	r4, r5, #1
  404340:	b940      	cbnz	r0, 404354 <_svfprintf_r+0xdfc>
  404342:	9d07      	ldr	r5, [sp, #28]
  404344:	1c6b      	adds	r3, r5, #1
  404346:	e886 0018 	stmia.w	r6, {r3, r4}
  40434a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40434c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40434e:	3b01      	subs	r3, #1
  404350:	4423      	add	r3, r4
  404352:	e033      	b.n	4043bc <_svfprintf_r+0xe64>
  404354:	2c00      	cmp	r4, #0
  404356:	dd34      	ble.n	4043c2 <_svfprintf_r+0xe6a>
  404358:	4b23      	ldr	r3, [pc, #140]	; (4043e8 <_svfprintf_r+0xe90>)
  40435a:	2c10      	cmp	r4, #16
  40435c:	6033      	str	r3, [r6, #0]
  40435e:	dd15      	ble.n	40438c <_svfprintf_r+0xe34>
  404360:	2310      	movs	r3, #16
  404362:	6073      	str	r3, [r6, #4]
  404364:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404366:	3310      	adds	r3, #16
  404368:	9327      	str	r3, [sp, #156]	; 0x9c
  40436a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40436c:	3301      	adds	r3, #1
  40436e:	2b07      	cmp	r3, #7
  404370:	9326      	str	r3, [sp, #152]	; 0x98
  404372:	dc01      	bgt.n	404378 <_svfprintf_r+0xe20>
  404374:	3608      	adds	r6, #8
  404376:	e007      	b.n	404388 <_svfprintf_r+0xe30>
  404378:	4650      	mov	r0, sl
  40437a:	4659      	mov	r1, fp
  40437c:	aa25      	add	r2, sp, #148	; 0x94
  40437e:	f002 f835 	bl	4063ec <__ssprint_r>
  404382:	2800      	cmp	r0, #0
  404384:	d173      	bne.n	40446e <_svfprintf_r+0xf16>
  404386:	ae32      	add	r6, sp, #200	; 0xc8
  404388:	3c10      	subs	r4, #16
  40438a:	e7e5      	b.n	404358 <_svfprintf_r+0xe00>
  40438c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40438e:	6074      	str	r4, [r6, #4]
  404390:	441c      	add	r4, r3
  404392:	9427      	str	r4, [sp, #156]	; 0x9c
  404394:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404396:	3301      	adds	r3, #1
  404398:	2b07      	cmp	r3, #7
  40439a:	9326      	str	r3, [sp, #152]	; 0x98
  40439c:	dd10      	ble.n	4043c0 <_svfprintf_r+0xe68>
  40439e:	4650      	mov	r0, sl
  4043a0:	4659      	mov	r1, fp
  4043a2:	aa25      	add	r2, sp, #148	; 0x94
  4043a4:	f002 f822 	bl	4063ec <__ssprint_r>
  4043a8:	2800      	cmp	r0, #0
  4043aa:	d160      	bne.n	40446e <_svfprintf_r+0xf16>
  4043ac:	ae32      	add	r6, sp, #200	; 0xc8
  4043ae:	e008      	b.n	4043c2 <_svfprintf_r+0xe6a>
  4043b0:	2301      	movs	r3, #1
  4043b2:	9d07      	ldr	r5, [sp, #28]
  4043b4:	6073      	str	r3, [r6, #4]
  4043b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4043b8:	6035      	str	r5, [r6, #0]
  4043ba:	3301      	adds	r3, #1
  4043bc:	9327      	str	r3, [sp, #156]	; 0x9c
  4043be:	e7e9      	b.n	404394 <_svfprintf_r+0xe3c>
  4043c0:	3608      	adds	r6, #8
  4043c2:	ab21      	add	r3, sp, #132	; 0x84
  4043c4:	6033      	str	r3, [r6, #0]
  4043c6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
  4043c8:	e6ac      	b.n	404124 <_svfprintf_r+0xbcc>
  4043ca:	3608      	adds	r6, #8
  4043cc:	077b      	lsls	r3, r7, #29
  4043ce:	d40d      	bmi.n	4043ec <_svfprintf_r+0xe94>
  4043d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4043d2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4043d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4043d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4043d8:	42a0      	cmp	r0, r4
  4043da:	bfac      	ite	ge
  4043dc:	182d      	addge	r5, r5, r0
  4043de:	192d      	addlt	r5, r5, r4
  4043e0:	950f      	str	r5, [sp, #60]	; 0x3c
  4043e2:	2b00      	cmp	r3, #0
  4043e4:	d037      	beq.n	404456 <_svfprintf_r+0xefe>
  4043e6:	e030      	b.n	40444a <_svfprintf_r+0xef2>
  4043e8:	00407d8e 	.word	0x00407d8e
  4043ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4043ee:	980a      	ldr	r0, [sp, #40]	; 0x28
  4043f0:	1a2c      	subs	r4, r5, r0
  4043f2:	2c00      	cmp	r4, #0
  4043f4:	ddec      	ble.n	4043d0 <_svfprintf_r+0xe78>
  4043f6:	4b23      	ldr	r3, [pc, #140]	; (404484 <_svfprintf_r+0xf2c>)
  4043f8:	2c10      	cmp	r4, #16
  4043fa:	6033      	str	r3, [r6, #0]
  4043fc:	dd14      	ble.n	404428 <_svfprintf_r+0xed0>
  4043fe:	2310      	movs	r3, #16
  404400:	6073      	str	r3, [r6, #4]
  404402:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404404:	3310      	adds	r3, #16
  404406:	9327      	str	r3, [sp, #156]	; 0x9c
  404408:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40440a:	3301      	adds	r3, #1
  40440c:	2b07      	cmp	r3, #7
  40440e:	9326      	str	r3, [sp, #152]	; 0x98
  404410:	dc01      	bgt.n	404416 <_svfprintf_r+0xebe>
  404412:	3608      	adds	r6, #8
  404414:	e006      	b.n	404424 <_svfprintf_r+0xecc>
  404416:	4650      	mov	r0, sl
  404418:	4659      	mov	r1, fp
  40441a:	aa25      	add	r2, sp, #148	; 0x94
  40441c:	f001 ffe6 	bl	4063ec <__ssprint_r>
  404420:	bb28      	cbnz	r0, 40446e <_svfprintf_r+0xf16>
  404422:	ae32      	add	r6, sp, #200	; 0xc8
  404424:	3c10      	subs	r4, #16
  404426:	e7e6      	b.n	4043f6 <_svfprintf_r+0xe9e>
  404428:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40442a:	6074      	str	r4, [r6, #4]
  40442c:	441c      	add	r4, r3
  40442e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404430:	9427      	str	r4, [sp, #156]	; 0x9c
  404432:	3301      	adds	r3, #1
  404434:	2b07      	cmp	r3, #7
  404436:	9326      	str	r3, [sp, #152]	; 0x98
  404438:	ddca      	ble.n	4043d0 <_svfprintf_r+0xe78>
  40443a:	4650      	mov	r0, sl
  40443c:	4659      	mov	r1, fp
  40443e:	aa25      	add	r2, sp, #148	; 0x94
  404440:	f001 ffd4 	bl	4063ec <__ssprint_r>
  404444:	2800      	cmp	r0, #0
  404446:	d0c3      	beq.n	4043d0 <_svfprintf_r+0xe78>
  404448:	e011      	b.n	40446e <_svfprintf_r+0xf16>
  40444a:	4650      	mov	r0, sl
  40444c:	4659      	mov	r1, fp
  40444e:	aa25      	add	r2, sp, #148	; 0x94
  404450:	f001 ffcc 	bl	4063ec <__ssprint_r>
  404454:	b958      	cbnz	r0, 40446e <_svfprintf_r+0xf16>
  404456:	2300      	movs	r3, #0
  404458:	9326      	str	r3, [sp, #152]	; 0x98
  40445a:	ae32      	add	r6, sp, #200	; 0xc8
  40445c:	f7ff b8b1 	b.w	4035c2 <_svfprintf_r+0x6a>
  404460:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404462:	b123      	cbz	r3, 40446e <_svfprintf_r+0xf16>
  404464:	4650      	mov	r0, sl
  404466:	4659      	mov	r1, fp
  404468:	aa25      	add	r2, sp, #148	; 0x94
  40446a:	f001 ffbf 	bl	4063ec <__ssprint_r>
  40446e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404472:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404474:	f013 0f40 	tst.w	r3, #64	; 0x40
  404478:	bf18      	it	ne
  40447a:	f04f 30ff 	movne.w	r0, #4294967295
  40447e:	b043      	add	sp, #268	; 0x10c
  404480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404484:	00407d7e 	.word	0x00407d7e

00404488 <register_fini>:
  404488:	4b02      	ldr	r3, [pc, #8]	; (404494 <register_fini+0xc>)
  40448a:	b113      	cbz	r3, 404492 <register_fini+0xa>
  40448c:	4802      	ldr	r0, [pc, #8]	; (404498 <register_fini+0x10>)
  40448e:	f000 b805 	b.w	40449c <atexit>
  404492:	4770      	bx	lr
  404494:	00000000 	.word	0x00000000
  404498:	00405129 	.word	0x00405129

0040449c <atexit>:
  40449c:	4601      	mov	r1, r0
  40449e:	2000      	movs	r0, #0
  4044a0:	4602      	mov	r2, r0
  4044a2:	4603      	mov	r3, r0
  4044a4:	f002 bc0e 	b.w	406cc4 <__register_exitproc>

004044a8 <quorem>:
  4044a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044ac:	6903      	ldr	r3, [r0, #16]
  4044ae:	690c      	ldr	r4, [r1, #16]
  4044b0:	4680      	mov	r8, r0
  4044b2:	42a3      	cmp	r3, r4
  4044b4:	f2c0 8083 	blt.w	4045be <quorem+0x116>
  4044b8:	3c01      	subs	r4, #1
  4044ba:	00a2      	lsls	r2, r4, #2
  4044bc:	f101 0714 	add.w	r7, r1, #20
  4044c0:	f100 0514 	add.w	r5, r0, #20
  4044c4:	4691      	mov	r9, r2
  4044c6:	9200      	str	r2, [sp, #0]
  4044c8:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
  4044cc:	442a      	add	r2, r5
  4044ce:	9201      	str	r2, [sp, #4]
  4044d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  4044d4:	3601      	adds	r6, #1
  4044d6:	fbb2 f6f6 	udiv	r6, r2, r6
  4044da:	44b9      	add	r9, r7
  4044dc:	2e00      	cmp	r6, #0
  4044de:	d03b      	beq.n	404558 <quorem+0xb0>
  4044e0:	f04f 0e00 	mov.w	lr, #0
  4044e4:	463a      	mov	r2, r7
  4044e6:	4628      	mov	r0, r5
  4044e8:	46f3      	mov	fp, lr
  4044ea:	f852 cb04 	ldr.w	ip, [r2], #4
  4044ee:	6803      	ldr	r3, [r0, #0]
  4044f0:	fa1f fa8c 	uxth.w	sl, ip
  4044f4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  4044f8:	fb0a ea06 	mla	sl, sl, r6, lr
  4044fc:	fb0c fc06 	mul.w	ip, ip, r6
  404500:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
  404504:	fa1f fa8a 	uxth.w	sl, sl
  404508:	ebca 0b0b 	rsb	fp, sl, fp
  40450c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
  404510:	fa1f fa83 	uxth.w	sl, r3
  404514:	fa1f fc8c 	uxth.w	ip, ip
  404518:	44da      	add	sl, fp
  40451a:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
  40451e:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
  404522:	fa1f fa8a 	uxth.w	sl, sl
  404526:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
  40452a:	454a      	cmp	r2, r9
  40452c:	ea4f 4b2c 	mov.w	fp, ip, asr #16
  404530:	f840 ab04 	str.w	sl, [r0], #4
  404534:	d9d9      	bls.n	4044ea <quorem+0x42>
  404536:	9a00      	ldr	r2, [sp, #0]
  404538:	58ab      	ldr	r3, [r5, r2]
  40453a:	b96b      	cbnz	r3, 404558 <quorem+0xb0>
  40453c:	9a01      	ldr	r2, [sp, #4]
  40453e:	1f13      	subs	r3, r2, #4
  404540:	42ab      	cmp	r3, r5
  404542:	461a      	mov	r2, r3
  404544:	d802      	bhi.n	40454c <quorem+0xa4>
  404546:	f8c8 4010 	str.w	r4, [r8, #16]
  40454a:	e005      	b.n	404558 <quorem+0xb0>
  40454c:	6812      	ldr	r2, [r2, #0]
  40454e:	3b04      	subs	r3, #4
  404550:	2a00      	cmp	r2, #0
  404552:	d1f8      	bne.n	404546 <quorem+0x9e>
  404554:	3c01      	subs	r4, #1
  404556:	e7f3      	b.n	404540 <quorem+0x98>
  404558:	4640      	mov	r0, r8
  40455a:	f001 fba2 	bl	405ca2 <__mcmp>
  40455e:	2800      	cmp	r0, #0
  404560:	db2b      	blt.n	4045ba <quorem+0x112>
  404562:	3601      	adds	r6, #1
  404564:	462b      	mov	r3, r5
  404566:	2000      	movs	r0, #0
  404568:	f857 cb04 	ldr.w	ip, [r7], #4
  40456c:	681a      	ldr	r2, [r3, #0]
  40456e:	fa1f f18c 	uxth.w	r1, ip
  404572:	1a41      	subs	r1, r0, r1
  404574:	fa1f fa82 	uxth.w	sl, r2
  404578:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  40457c:	4451      	add	r1, sl
  40457e:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
  404582:	eb02 4221 	add.w	r2, r2, r1, asr #16
  404586:	b289      	uxth	r1, r1
  404588:	1410      	asrs	r0, r2, #16
  40458a:	454f      	cmp	r7, r9
  40458c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  404590:	f843 2b04 	str.w	r2, [r3], #4
  404594:	d9e8      	bls.n	404568 <quorem+0xc0>
  404596:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
  40459a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
  40459e:	b962      	cbnz	r2, 4045ba <quorem+0x112>
  4045a0:	3b04      	subs	r3, #4
  4045a2:	42ab      	cmp	r3, r5
  4045a4:	461a      	mov	r2, r3
  4045a6:	d802      	bhi.n	4045ae <quorem+0x106>
  4045a8:	f8c8 4010 	str.w	r4, [r8, #16]
  4045ac:	e005      	b.n	4045ba <quorem+0x112>
  4045ae:	6812      	ldr	r2, [r2, #0]
  4045b0:	3b04      	subs	r3, #4
  4045b2:	2a00      	cmp	r2, #0
  4045b4:	d1f8      	bne.n	4045a8 <quorem+0x100>
  4045b6:	3c01      	subs	r4, #1
  4045b8:	e7f3      	b.n	4045a2 <quorem+0xfa>
  4045ba:	4630      	mov	r0, r6
  4045bc:	e000      	b.n	4045c0 <quorem+0x118>
  4045be:	2000      	movs	r0, #0
  4045c0:	b003      	add	sp, #12
  4045c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004045c6 <_dtoa_r>:
  4045c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045ca:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4045cc:	b09b      	sub	sp, #108	; 0x6c
  4045ce:	4682      	mov	sl, r0
  4045d0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4045d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  4045d6:	b151      	cbz	r1, 4045ee <_dtoa_r+0x28>
  4045d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
  4045da:	2201      	movs	r2, #1
  4045dc:	604b      	str	r3, [r1, #4]
  4045de:	fa02 f303 	lsl.w	r3, r2, r3
  4045e2:	608b      	str	r3, [r1, #8]
  4045e4:	f001 f958 	bl	405898 <_Bfree>
  4045e8:	2300      	movs	r3, #0
  4045ea:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
  4045ee:	9805      	ldr	r0, [sp, #20]
  4045f0:	2800      	cmp	r0, #0
  4045f2:	da05      	bge.n	404600 <_dtoa_r+0x3a>
  4045f4:	2301      	movs	r3, #1
  4045f6:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  4045fa:	6023      	str	r3, [r4, #0]
  4045fc:	9105      	str	r1, [sp, #20]
  4045fe:	e001      	b.n	404604 <_dtoa_r+0x3e>
  404600:	2300      	movs	r3, #0
  404602:	6023      	str	r3, [r4, #0]
  404604:	9f05      	ldr	r7, [sp, #20]
  404606:	4a9c      	ldr	r2, [pc, #624]	; (404878 <_dtoa_r+0x2b2>)
  404608:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
  40460c:	0d1b      	lsrs	r3, r3, #20
  40460e:	051b      	lsls	r3, r3, #20
  404610:	4293      	cmp	r3, r2
  404612:	d11d      	bne.n	404650 <_dtoa_r+0x8a>
  404614:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404616:	f242 730f 	movw	r3, #9999	; 0x270f
  40461a:	6013      	str	r3, [r2, #0]
  40461c:	9b04      	ldr	r3, [sp, #16]
  40461e:	b943      	cbnz	r3, 404632 <_dtoa_r+0x6c>
  404620:	4b96      	ldr	r3, [pc, #600]	; (40487c <_dtoa_r+0x2b6>)
  404622:	4a97      	ldr	r2, [pc, #604]	; (404880 <_dtoa_r+0x2ba>)
  404624:	f3c7 0013 	ubfx	r0, r7, #0, #20
  404628:	2800      	cmp	r0, #0
  40462a:	bf0c      	ite	eq
  40462c:	4610      	moveq	r0, r2
  40462e:	4618      	movne	r0, r3
  404630:	e000      	b.n	404634 <_dtoa_r+0x6e>
  404632:	4892      	ldr	r0, [pc, #584]	; (40487c <_dtoa_r+0x2b6>)
  404634:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  404636:	2f00      	cmp	r7, #0
  404638:	f000 856f 	beq.w	40511a <_dtoa_r+0xb54>
  40463c:	78c3      	ldrb	r3, [r0, #3]
  40463e:	b113      	cbz	r3, 404646 <_dtoa_r+0x80>
  404640:	f100 0308 	add.w	r3, r0, #8
  404644:	e000      	b.n	404648 <_dtoa_r+0x82>
  404646:	1cc3      	adds	r3, r0, #3
  404648:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  40464a:	603b      	str	r3, [r7, #0]
  40464c:	f000 bd65 	b.w	40511a <_dtoa_r+0xb54>
  404650:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  404654:	2200      	movs	r2, #0
  404656:	4620      	mov	r0, r4
  404658:	4629      	mov	r1, r5
  40465a:	2300      	movs	r3, #0
  40465c:	f002 ffcc 	bl	4075f8 <__aeabi_dcmpeq>
  404660:	4680      	mov	r8, r0
  404662:	b158      	cbz	r0, 40467c <_dtoa_r+0xb6>
  404664:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404666:	2301      	movs	r3, #1
  404668:	603b      	str	r3, [r7, #0]
  40466a:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  40466c:	2f00      	cmp	r7, #0
  40466e:	f000 8551 	beq.w	405114 <_dtoa_r+0xb4e>
  404672:	4884      	ldr	r0, [pc, #528]	; (404884 <_dtoa_r+0x2be>)
  404674:	6038      	str	r0, [r7, #0]
  404676:	3801      	subs	r0, #1
  404678:	f000 bd4f 	b.w	40511a <_dtoa_r+0xb54>
  40467c:	ab19      	add	r3, sp, #100	; 0x64
  40467e:	9300      	str	r3, [sp, #0]
  404680:	ab18      	add	r3, sp, #96	; 0x60
  404682:	9301      	str	r3, [sp, #4]
  404684:	4650      	mov	r0, sl
  404686:	4622      	mov	r2, r4
  404688:	462b      	mov	r3, r5
  40468a:	f001 fbfa 	bl	405e82 <__d2b>
  40468e:	f3c7 560a 	ubfx	r6, r7, #20, #11
  404692:	4683      	mov	fp, r0
  404694:	b15e      	cbz	r6, 4046ae <_dtoa_r+0xe8>
  404696:	f3c5 0313 	ubfx	r3, r5, #0, #20
  40469a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  40469e:	4620      	mov	r0, r4
  4046a0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4046a4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
  4046a8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  4046ac:	e01c      	b.n	4046e8 <_dtoa_r+0x122>
  4046ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4046b0:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4046b2:	441e      	add	r6, r3
  4046b4:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  4046b8:	429e      	cmp	r6, r3
  4046ba:	db09      	blt.n	4046d0 <_dtoa_r+0x10a>
  4046bc:	9904      	ldr	r1, [sp, #16]
  4046be:	331f      	adds	r3, #31
  4046c0:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4046c4:	1b9b      	subs	r3, r3, r6
  4046c6:	fa21 f000 	lsr.w	r0, r1, r0
  4046ca:	409f      	lsls	r7, r3
  4046cc:	4338      	orrs	r0, r7
  4046ce:	e004      	b.n	4046da <_dtoa_r+0x114>
  4046d0:	486d      	ldr	r0, [pc, #436]	; (404888 <_dtoa_r+0x2c2>)
  4046d2:	9a04      	ldr	r2, [sp, #16]
  4046d4:	1b80      	subs	r0, r0, r6
  4046d6:	fa02 f000 	lsl.w	r0, r2, r0
  4046da:	f002 fcaf 	bl	40703c <__aeabi_ui2d>
  4046de:	2701      	movs	r7, #1
  4046e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4046e4:	3e01      	subs	r6, #1
  4046e6:	9715      	str	r7, [sp, #84]	; 0x54
  4046e8:	2200      	movs	r2, #0
  4046ea:	4b68      	ldr	r3, [pc, #416]	; (40488c <_dtoa_r+0x2c6>)
  4046ec:	f002 fb68 	bl	406dc0 <__aeabi_dsub>
  4046f0:	a35b      	add	r3, pc, #364	; (adr r3, 404860 <_dtoa_r+0x29a>)
  4046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046f6:	f002 fd17 	bl	407128 <__aeabi_dmul>
  4046fa:	a35b      	add	r3, pc, #364	; (adr r3, 404868 <_dtoa_r+0x2a2>)
  4046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  404700:	f002 fb60 	bl	406dc4 <__adddf3>
  404704:	4604      	mov	r4, r0
  404706:	4630      	mov	r0, r6
  404708:	460d      	mov	r5, r1
  40470a:	f002 fca7 	bl	40705c <__aeabi_i2d>
  40470e:	a358      	add	r3, pc, #352	; (adr r3, 404870 <_dtoa_r+0x2aa>)
  404710:	e9d3 2300 	ldrd	r2, r3, [r3]
  404714:	f002 fd08 	bl	407128 <__aeabi_dmul>
  404718:	4602      	mov	r2, r0
  40471a:	460b      	mov	r3, r1
  40471c:	4620      	mov	r0, r4
  40471e:	4629      	mov	r1, r5
  404720:	f002 fb50 	bl	406dc4 <__adddf3>
  404724:	4604      	mov	r4, r0
  404726:	460d      	mov	r5, r1
  404728:	f002 ff98 	bl	40765c <__aeabi_d2iz>
  40472c:	4629      	mov	r1, r5
  40472e:	4681      	mov	r9, r0
  404730:	2200      	movs	r2, #0
  404732:	4620      	mov	r0, r4
  404734:	2300      	movs	r3, #0
  404736:	f002 ff69 	bl	40760c <__aeabi_dcmplt>
  40473a:	b158      	cbz	r0, 404754 <_dtoa_r+0x18e>
  40473c:	4648      	mov	r0, r9
  40473e:	f002 fc8d 	bl	40705c <__aeabi_i2d>
  404742:	4602      	mov	r2, r0
  404744:	460b      	mov	r3, r1
  404746:	4620      	mov	r0, r4
  404748:	4629      	mov	r1, r5
  40474a:	f002 ff55 	bl	4075f8 <__aeabi_dcmpeq>
  40474e:	b908      	cbnz	r0, 404754 <_dtoa_r+0x18e>
  404750:	f109 39ff 	add.w	r9, r9, #4294967295
  404754:	f1b9 0f16 	cmp.w	r9, #22
  404758:	d80d      	bhi.n	404776 <_dtoa_r+0x1b0>
  40475a:	4b4d      	ldr	r3, [pc, #308]	; (404890 <_dtoa_r+0x2ca>)
  40475c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  404760:	e9d3 0100 	ldrd	r0, r1, [r3]
  404764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404768:	f002 ff6e 	bl	407648 <__aeabi_dcmpgt>
  40476c:	b130      	cbz	r0, 40477c <_dtoa_r+0x1b6>
  40476e:	f109 39ff 	add.w	r9, r9, #4294967295
  404772:	2700      	movs	r7, #0
  404774:	e000      	b.n	404778 <_dtoa_r+0x1b2>
  404776:	2701      	movs	r7, #1
  404778:	9714      	str	r7, [sp, #80]	; 0x50
  40477a:	e000      	b.n	40477e <_dtoa_r+0x1b8>
  40477c:	9014      	str	r0, [sp, #80]	; 0x50
  40477e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404780:	1b9e      	subs	r6, r3, r6
  404782:	3e01      	subs	r6, #1
  404784:	960a      	str	r6, [sp, #40]	; 0x28
  404786:	d504      	bpl.n	404792 <_dtoa_r+0x1cc>
  404788:	4277      	negs	r7, r6
  40478a:	9708      	str	r7, [sp, #32]
  40478c:	2700      	movs	r7, #0
  40478e:	970a      	str	r7, [sp, #40]	; 0x28
  404790:	e001      	b.n	404796 <_dtoa_r+0x1d0>
  404792:	2700      	movs	r7, #0
  404794:	9708      	str	r7, [sp, #32]
  404796:	f1b9 0f00 	cmp.w	r9, #0
  40479a:	db07      	blt.n	4047ac <_dtoa_r+0x1e6>
  40479c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40479e:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  4047a2:	444f      	add	r7, r9
  4047a4:	970a      	str	r7, [sp, #40]	; 0x28
  4047a6:	2700      	movs	r7, #0
  4047a8:	970e      	str	r7, [sp, #56]	; 0x38
  4047aa:	e008      	b.n	4047be <_dtoa_r+0x1f8>
  4047ac:	9f08      	ldr	r7, [sp, #32]
  4047ae:	ebc9 0707 	rsb	r7, r9, r7
  4047b2:	9708      	str	r7, [sp, #32]
  4047b4:	f1c9 0700 	rsb	r7, r9, #0
  4047b8:	970e      	str	r7, [sp, #56]	; 0x38
  4047ba:	2700      	movs	r7, #0
  4047bc:	9711      	str	r7, [sp, #68]	; 0x44
  4047be:	9f24      	ldr	r7, [sp, #144]	; 0x90
  4047c0:	2f09      	cmp	r7, #9
  4047c2:	d829      	bhi.n	404818 <_dtoa_r+0x252>
  4047c4:	2f05      	cmp	r7, #5
  4047c6:	bfc4      	itt	gt
  4047c8:	3f04      	subgt	r7, #4
  4047ca:	9724      	strgt	r7, [sp, #144]	; 0x90
  4047cc:	9f24      	ldr	r7, [sp, #144]	; 0x90
  4047ce:	bfc8      	it	gt
  4047d0:	2400      	movgt	r4, #0
  4047d2:	f1a7 0302 	sub.w	r3, r7, #2
  4047d6:	bfd8      	it	le
  4047d8:	2401      	movle	r4, #1
  4047da:	2b03      	cmp	r3, #3
  4047dc:	d821      	bhi.n	404822 <_dtoa_r+0x25c>
  4047de:	e8df f003 	tbb	[pc, r3]
  4047e2:	0f06      	.short	0x0f06
  4047e4:	0402      	.short	0x0402
  4047e6:	2701      	movs	r7, #1
  4047e8:	e002      	b.n	4047f0 <_dtoa_r+0x22a>
  4047ea:	2701      	movs	r7, #1
  4047ec:	e009      	b.n	404802 <_dtoa_r+0x23c>
  4047ee:	2700      	movs	r7, #0
  4047f0:	970f      	str	r7, [sp, #60]	; 0x3c
  4047f2:	9f25      	ldr	r7, [sp, #148]	; 0x94
  4047f4:	2f00      	cmp	r7, #0
  4047f6:	dd1e      	ble.n	404836 <_dtoa_r+0x270>
  4047f8:	970b      	str	r7, [sp, #44]	; 0x2c
  4047fa:	9707      	str	r7, [sp, #28]
  4047fc:	463b      	mov	r3, r7
  4047fe:	e01f      	b.n	404840 <_dtoa_r+0x27a>
  404800:	2700      	movs	r7, #0
  404802:	970f      	str	r7, [sp, #60]	; 0x3c
  404804:	9f25      	ldr	r7, [sp, #148]	; 0x94
  404806:	444f      	add	r7, r9
  404808:	970b      	str	r7, [sp, #44]	; 0x2c
  40480a:	3701      	adds	r7, #1
  40480c:	463b      	mov	r3, r7
  40480e:	9707      	str	r7, [sp, #28]
  404810:	2b01      	cmp	r3, #1
  404812:	bfb8      	it	lt
  404814:	2301      	movlt	r3, #1
  404816:	e013      	b.n	404840 <_dtoa_r+0x27a>
  404818:	2401      	movs	r4, #1
  40481a:	2700      	movs	r7, #0
  40481c:	9724      	str	r7, [sp, #144]	; 0x90
  40481e:	940f      	str	r4, [sp, #60]	; 0x3c
  404820:	e001      	b.n	404826 <_dtoa_r+0x260>
  404822:	2701      	movs	r7, #1
  404824:	970f      	str	r7, [sp, #60]	; 0x3c
  404826:	f04f 37ff 	mov.w	r7, #4294967295
  40482a:	970b      	str	r7, [sp, #44]	; 0x2c
  40482c:	9707      	str	r7, [sp, #28]
  40482e:	2700      	movs	r7, #0
  404830:	2312      	movs	r3, #18
  404832:	9725      	str	r7, [sp, #148]	; 0x94
  404834:	e004      	b.n	404840 <_dtoa_r+0x27a>
  404836:	2701      	movs	r7, #1
  404838:	970b      	str	r7, [sp, #44]	; 0x2c
  40483a:	9707      	str	r7, [sp, #28]
  40483c:	463b      	mov	r3, r7
  40483e:	9725      	str	r7, [sp, #148]	; 0x94
  404840:	2200      	movs	r2, #0
  404842:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
  404846:	2204      	movs	r2, #4
  404848:	f102 0114 	add.w	r1, r2, #20
  40484c:	4299      	cmp	r1, r3
  40484e:	d821      	bhi.n	404894 <_dtoa_r+0x2ce>
  404850:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  404854:	0052      	lsls	r2, r2, #1
  404856:	3101      	adds	r1, #1
  404858:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
  40485c:	e7f4      	b.n	404848 <_dtoa_r+0x282>
  40485e:	bf00      	nop
  404860:	636f4361 	.word	0x636f4361
  404864:	3fd287a7 	.word	0x3fd287a7
  404868:	8b60c8b3 	.word	0x8b60c8b3
  40486c:	3fc68a28 	.word	0x3fc68a28
  404870:	509f79fb 	.word	0x509f79fb
  404874:	3fd34413 	.word	0x3fd34413
  404878:	7ff00000 	.word	0x7ff00000
  40487c:	00407edc 	.word	0x00407edc
  404880:	00407ed3 	.word	0x00407ed3
  404884:	00407dd1 	.word	0x00407dd1
  404888:	fffffbee 	.word	0xfffffbee
  40488c:	3ff80000 	.word	0x3ff80000
  404890:	00407ef8 	.word	0x00407ef8
  404894:	4650      	mov	r0, sl
  404896:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
  40489a:	f000 ffd7 	bl	40584c <_Balloc>
  40489e:	9f07      	ldr	r7, [sp, #28]
  4048a0:	9009      	str	r0, [sp, #36]	; 0x24
  4048a2:	2f0e      	cmp	r7, #14
  4048a4:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
  4048a8:	f200 816a 	bhi.w	404b80 <_dtoa_r+0x5ba>
  4048ac:	2c00      	cmp	r4, #0
  4048ae:	f000 8167 	beq.w	404b80 <_dtoa_r+0x5ba>
  4048b2:	f1b9 0f00 	cmp.w	r9, #0
  4048b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4048ba:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  4048be:	dd31      	ble.n	404924 <_dtoa_r+0x35e>
  4048c0:	4a80      	ldr	r2, [pc, #512]	; (404ac4 <_dtoa_r+0x4fe>)
  4048c2:	f009 030f 	and.w	r3, r9, #15
  4048c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4048ca:	ea4f 1429 	mov.w	r4, r9, asr #4
  4048ce:	e9d3 0100 	ldrd	r0, r1, [r3]
  4048d2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  4048d6:	06e0      	lsls	r0, r4, #27
  4048d8:	d50c      	bpl.n	4048f4 <_dtoa_r+0x32e>
  4048da:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4048de:	4b7a      	ldr	r3, [pc, #488]	; (404ac8 <_dtoa_r+0x502>)
  4048e0:	f004 040f 	and.w	r4, r4, #15
  4048e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4048e8:	f002 fd48 	bl	40737c <__aeabi_ddiv>
  4048ec:	2703      	movs	r7, #3
  4048ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4048f2:	e000      	b.n	4048f6 <_dtoa_r+0x330>
  4048f4:	2702      	movs	r7, #2
  4048f6:	4d74      	ldr	r5, [pc, #464]	; (404ac8 <_dtoa_r+0x502>)
  4048f8:	b16c      	cbz	r4, 404916 <_dtoa_r+0x350>
  4048fa:	07e1      	lsls	r1, r4, #31
  4048fc:	d508      	bpl.n	404910 <_dtoa_r+0x34a>
  4048fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
  404902:	e9d5 2300 	ldrd	r2, r3, [r5]
  404906:	f002 fc0f 	bl	407128 <__aeabi_dmul>
  40490a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  40490e:	3701      	adds	r7, #1
  404910:	1064      	asrs	r4, r4, #1
  404912:	3508      	adds	r5, #8
  404914:	e7f0      	b.n	4048f8 <_dtoa_r+0x332>
  404916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40491a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
  40491e:	f002 fd2d 	bl	40737c <__aeabi_ddiv>
  404922:	e01b      	b.n	40495c <_dtoa_r+0x396>
  404924:	f1c9 0400 	rsb	r4, r9, #0
  404928:	b1dc      	cbz	r4, 404962 <_dtoa_r+0x39c>
  40492a:	4b66      	ldr	r3, [pc, #408]	; (404ac4 <_dtoa_r+0x4fe>)
  40492c:	f004 020f 	and.w	r2, r4, #15
  404930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404934:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404938:	e9d3 2300 	ldrd	r2, r3, [r3]
  40493c:	f002 fbf4 	bl	407128 <__aeabi_dmul>
  404940:	4d61      	ldr	r5, [pc, #388]	; (404ac8 <_dtoa_r+0x502>)
  404942:	1124      	asrs	r4, r4, #4
  404944:	2702      	movs	r7, #2
  404946:	b14c      	cbz	r4, 40495c <_dtoa_r+0x396>
  404948:	07e2      	lsls	r2, r4, #31
  40494a:	d504      	bpl.n	404956 <_dtoa_r+0x390>
  40494c:	e9d5 2300 	ldrd	r2, r3, [r5]
  404950:	3701      	adds	r7, #1
  404952:	f002 fbe9 	bl	407128 <__aeabi_dmul>
  404956:	1064      	asrs	r4, r4, #1
  404958:	3508      	adds	r5, #8
  40495a:	e7f4      	b.n	404946 <_dtoa_r+0x380>
  40495c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404960:	e000      	b.n	404964 <_dtoa_r+0x39e>
  404962:	2702      	movs	r7, #2
  404964:	9914      	ldr	r1, [sp, #80]	; 0x50
  404966:	b1e9      	cbz	r1, 4049a4 <_dtoa_r+0x3de>
  404968:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  40496c:	2200      	movs	r2, #0
  40496e:	4620      	mov	r0, r4
  404970:	4629      	mov	r1, r5
  404972:	4b56      	ldr	r3, [pc, #344]	; (404acc <_dtoa_r+0x506>)
  404974:	f002 fe4a 	bl	40760c <__aeabi_dcmplt>
  404978:	b1c8      	cbz	r0, 4049ae <_dtoa_r+0x3e8>
  40497a:	9a07      	ldr	r2, [sp, #28]
  40497c:	b1e2      	cbz	r2, 4049b8 <_dtoa_r+0x3f2>
  40497e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404980:	2b00      	cmp	r3, #0
  404982:	f340 80f9 	ble.w	404b78 <_dtoa_r+0x5b2>
  404986:	f109 30ff 	add.w	r0, r9, #4294967295
  40498a:	9010      	str	r0, [sp, #64]	; 0x40
  40498c:	4629      	mov	r1, r5
  40498e:	4620      	mov	r0, r4
  404990:	2200      	movs	r2, #0
  404992:	4b4f      	ldr	r3, [pc, #316]	; (404ad0 <_dtoa_r+0x50a>)
  404994:	f002 fbc8 	bl	407128 <__aeabi_dmul>
  404998:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40499c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40499e:	3701      	adds	r7, #1
  4049a0:	910c      	str	r1, [sp, #48]	; 0x30
  4049a2:	e00d      	b.n	4049c0 <_dtoa_r+0x3fa>
  4049a4:	9a07      	ldr	r2, [sp, #28]
  4049a6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  4049aa:	920c      	str	r2, [sp, #48]	; 0x30
  4049ac:	e008      	b.n	4049c0 <_dtoa_r+0x3fa>
  4049ae:	9b07      	ldr	r3, [sp, #28]
  4049b0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  4049b4:	930c      	str	r3, [sp, #48]	; 0x30
  4049b6:	e003      	b.n	4049c0 <_dtoa_r+0x3fa>
  4049b8:	9807      	ldr	r0, [sp, #28]
  4049ba:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  4049be:	900c      	str	r0, [sp, #48]	; 0x30
  4049c0:	4638      	mov	r0, r7
  4049c2:	f002 fb4b 	bl	40705c <__aeabi_i2d>
  4049c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4049ca:	f002 fbad 	bl	407128 <__aeabi_dmul>
  4049ce:	2200      	movs	r2, #0
  4049d0:	4b40      	ldr	r3, [pc, #256]	; (404ad4 <_dtoa_r+0x50e>)
  4049d2:	f002 f9f7 	bl	406dc4 <__adddf3>
  4049d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4049d8:	4604      	mov	r4, r0
  4049da:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  4049de:	b9cf      	cbnz	r7, 404a14 <_dtoa_r+0x44e>
  4049e0:	2200      	movs	r2, #0
  4049e2:	4b3d      	ldr	r3, [pc, #244]	; (404ad8 <_dtoa_r+0x512>)
  4049e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4049e8:	f002 f9ea 	bl	406dc0 <__aeabi_dsub>
  4049ec:	4622      	mov	r2, r4
  4049ee:	462b      	mov	r3, r5
  4049f0:	4606      	mov	r6, r0
  4049f2:	460f      	mov	r7, r1
  4049f4:	f002 fe28 	bl	407648 <__aeabi_dcmpgt>
  4049f8:	2800      	cmp	r0, #0
  4049fa:	f040 8252 	bne.w	404ea2 <_dtoa_r+0x8dc>
  4049fe:	4622      	mov	r2, r4
  404a00:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  404a04:	4630      	mov	r0, r6
  404a06:	4639      	mov	r1, r7
  404a08:	f002 fe00 	bl	40760c <__aeabi_dcmplt>
  404a0c:	2800      	cmp	r0, #0
  404a0e:	f040 823e 	bne.w	404e8e <_dtoa_r+0x8c8>
  404a12:	e0b1      	b.n	404b78 <_dtoa_r+0x5b2>
  404a14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404a16:	4b2b      	ldr	r3, [pc, #172]	; (404ac4 <_dtoa_r+0x4fe>)
  404a18:	1e7a      	subs	r2, r7, #1
  404a1a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  404a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404a20:	2f00      	cmp	r7, #0
  404a22:	d05d      	beq.n	404ae0 <_dtoa_r+0x51a>
  404a24:	e9d3 2300 	ldrd	r2, r3, [r3]
  404a28:	2000      	movs	r0, #0
  404a2a:	492c      	ldr	r1, [pc, #176]	; (404adc <_dtoa_r+0x516>)
  404a2c:	f002 fca6 	bl	40737c <__aeabi_ddiv>
  404a30:	4622      	mov	r2, r4
  404a32:	462b      	mov	r3, r5
  404a34:	f002 f9c4 	bl	406dc0 <__aeabi_dsub>
  404a38:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  404a3c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404a40:	4604      	mov	r4, r0
  404a42:	460d      	mov	r5, r1
  404a44:	4639      	mov	r1, r7
  404a46:	4630      	mov	r0, r6
  404a48:	f002 fe08 	bl	40765c <__aeabi_d2iz>
  404a4c:	9002      	str	r0, [sp, #8]
  404a4e:	f002 fb05 	bl	40705c <__aeabi_i2d>
  404a52:	4602      	mov	r2, r0
  404a54:	460b      	mov	r3, r1
  404a56:	4630      	mov	r0, r6
  404a58:	4639      	mov	r1, r7
  404a5a:	f002 f9b1 	bl	406dc0 <__aeabi_dsub>
  404a5e:	f8dd c008 	ldr.w	ip, [sp, #8]
  404a62:	4622      	mov	r2, r4
  404a64:	f10c 0330 	add.w	r3, ip, #48	; 0x30
  404a68:	f808 3b01 	strb.w	r3, [r8], #1
  404a6c:	462b      	mov	r3, r5
  404a6e:	4606      	mov	r6, r0
  404a70:	460f      	mov	r7, r1
  404a72:	f002 fdcb 	bl	40760c <__aeabi_dcmplt>
  404a76:	2800      	cmp	r0, #0
  404a78:	f040 833a 	bne.w	4050f0 <_dtoa_r+0xb2a>
  404a7c:	4632      	mov	r2, r6
  404a7e:	463b      	mov	r3, r7
  404a80:	2000      	movs	r0, #0
  404a82:	4912      	ldr	r1, [pc, #72]	; (404acc <_dtoa_r+0x506>)
  404a84:	f002 f99c 	bl	406dc0 <__aeabi_dsub>
  404a88:	4622      	mov	r2, r4
  404a8a:	462b      	mov	r3, r5
  404a8c:	f002 fdbe 	bl	40760c <__aeabi_dcmplt>
  404a90:	2800      	cmp	r0, #0
  404a92:	f040 80d4 	bne.w	404c3e <_dtoa_r+0x678>
  404a96:	9809      	ldr	r0, [sp, #36]	; 0x24
  404a98:	990c      	ldr	r1, [sp, #48]	; 0x30
  404a9a:	ebc0 0308 	rsb	r3, r0, r8
  404a9e:	428b      	cmp	r3, r1
  404aa0:	da6a      	bge.n	404b78 <_dtoa_r+0x5b2>
  404aa2:	4620      	mov	r0, r4
  404aa4:	4629      	mov	r1, r5
  404aa6:	2200      	movs	r2, #0
  404aa8:	4b09      	ldr	r3, [pc, #36]	; (404ad0 <_dtoa_r+0x50a>)
  404aaa:	f002 fb3d 	bl	407128 <__aeabi_dmul>
  404aae:	2200      	movs	r2, #0
  404ab0:	4604      	mov	r4, r0
  404ab2:	460d      	mov	r5, r1
  404ab4:	4630      	mov	r0, r6
  404ab6:	4639      	mov	r1, r7
  404ab8:	4b05      	ldr	r3, [pc, #20]	; (404ad0 <_dtoa_r+0x50a>)
  404aba:	f002 fb35 	bl	407128 <__aeabi_dmul>
  404abe:	4606      	mov	r6, r0
  404ac0:	460f      	mov	r7, r1
  404ac2:	e7bf      	b.n	404a44 <_dtoa_r+0x47e>
  404ac4:	00407ef8 	.word	0x00407ef8
  404ac8:	00407fe8 	.word	0x00407fe8
  404acc:	3ff00000 	.word	0x3ff00000
  404ad0:	40240000 	.word	0x40240000
  404ad4:	401c0000 	.word	0x401c0000
  404ad8:	40140000 	.word	0x40140000
  404adc:	3fe00000 	.word	0x3fe00000
  404ae0:	4622      	mov	r2, r4
  404ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
  404ae6:	462b      	mov	r3, r5
  404ae8:	f002 fb1e 	bl	407128 <__aeabi_dmul>
  404aec:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  404af0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404af4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404af6:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404afa:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404afc:	4490      	add	r8, r2
  404afe:	4639      	mov	r1, r7
  404b00:	4630      	mov	r0, r6
  404b02:	f002 fdab 	bl	40765c <__aeabi_d2iz>
  404b06:	4605      	mov	r5, r0
  404b08:	f002 faa8 	bl	40705c <__aeabi_i2d>
  404b0c:	4602      	mov	r2, r0
  404b0e:	460b      	mov	r3, r1
  404b10:	4630      	mov	r0, r6
  404b12:	4639      	mov	r1, r7
  404b14:	f002 f954 	bl	406dc0 <__aeabi_dsub>
  404b18:	3530      	adds	r5, #48	; 0x30
  404b1a:	f804 5b01 	strb.w	r5, [r4], #1
  404b1e:	4544      	cmp	r4, r8
  404b20:	4606      	mov	r6, r0
  404b22:	460f      	mov	r7, r1
  404b24:	d121      	bne.n	404b6a <_dtoa_r+0x5a4>
  404b26:	2200      	movs	r2, #0
  404b28:	4b87      	ldr	r3, [pc, #540]	; (404d48 <_dtoa_r+0x782>)
  404b2a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404b2e:	f002 f949 	bl	406dc4 <__adddf3>
  404b32:	4602      	mov	r2, r0
  404b34:	460b      	mov	r3, r1
  404b36:	4630      	mov	r0, r6
  404b38:	4639      	mov	r1, r7
  404b3a:	f002 fd85 	bl	407648 <__aeabi_dcmpgt>
  404b3e:	2800      	cmp	r0, #0
  404b40:	d17d      	bne.n	404c3e <_dtoa_r+0x678>
  404b42:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  404b46:	2000      	movs	r0, #0
  404b48:	497f      	ldr	r1, [pc, #508]	; (404d48 <_dtoa_r+0x782>)
  404b4a:	f002 f939 	bl	406dc0 <__aeabi_dsub>
  404b4e:	4602      	mov	r2, r0
  404b50:	460b      	mov	r3, r1
  404b52:	4630      	mov	r0, r6
  404b54:	4639      	mov	r1, r7
  404b56:	f002 fd59 	bl	40760c <__aeabi_dcmplt>
  404b5a:	b168      	cbz	r0, 404b78 <_dtoa_r+0x5b2>
  404b5c:	46a0      	mov	r8, r4
  404b5e:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  404b62:	3c01      	subs	r4, #1
  404b64:	2b30      	cmp	r3, #48	; 0x30
  404b66:	d0f9      	beq.n	404b5c <_dtoa_r+0x596>
  404b68:	e2c2      	b.n	4050f0 <_dtoa_r+0xb2a>
  404b6a:	2200      	movs	r2, #0
  404b6c:	4b77      	ldr	r3, [pc, #476]	; (404d4c <_dtoa_r+0x786>)
  404b6e:	f002 fadb 	bl	407128 <__aeabi_dmul>
  404b72:	4606      	mov	r6, r0
  404b74:	460f      	mov	r7, r1
  404b76:	e7c2      	b.n	404afe <_dtoa_r+0x538>
  404b78:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  404b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404b80:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404b82:	2b00      	cmp	r3, #0
  404b84:	db7c      	blt.n	404c80 <_dtoa_r+0x6ba>
  404b86:	f1b9 0f0e 	cmp.w	r9, #14
  404b8a:	dc79      	bgt.n	404c80 <_dtoa_r+0x6ba>
  404b8c:	4b70      	ldr	r3, [pc, #448]	; (404d50 <_dtoa_r+0x78a>)
  404b8e:	9f25      	ldr	r7, [sp, #148]	; 0x94
  404b90:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  404b94:	2f00      	cmp	r7, #0
  404b96:	e9d3 4500 	ldrd	r4, r5, [r3]
  404b9a:	da14      	bge.n	404bc6 <_dtoa_r+0x600>
  404b9c:	9f07      	ldr	r7, [sp, #28]
  404b9e:	2f00      	cmp	r7, #0
  404ba0:	dc11      	bgt.n	404bc6 <_dtoa_r+0x600>
  404ba2:	f040 8176 	bne.w	404e92 <_dtoa_r+0x8cc>
  404ba6:	4620      	mov	r0, r4
  404ba8:	4629      	mov	r1, r5
  404baa:	2200      	movs	r2, #0
  404bac:	4b69      	ldr	r3, [pc, #420]	; (404d54 <_dtoa_r+0x78e>)
  404bae:	f002 fabb 	bl	407128 <__aeabi_dmul>
  404bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404bb6:	f002 fd3d 	bl	407634 <__aeabi_dcmpge>
  404bba:	9d07      	ldr	r5, [sp, #28]
  404bbc:	462c      	mov	r4, r5
  404bbe:	2800      	cmp	r0, #0
  404bc0:	f040 8169 	bne.w	404e96 <_dtoa_r+0x8d0>
  404bc4:	e171      	b.n	404eaa <_dtoa_r+0x8e4>
  404bc6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404bca:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  404bce:	4622      	mov	r2, r4
  404bd0:	462b      	mov	r3, r5
  404bd2:	4630      	mov	r0, r6
  404bd4:	4639      	mov	r1, r7
  404bd6:	f002 fbd1 	bl	40737c <__aeabi_ddiv>
  404bda:	f002 fd3f 	bl	40765c <__aeabi_d2iz>
  404bde:	9004      	str	r0, [sp, #16]
  404be0:	f002 fa3c 	bl	40705c <__aeabi_i2d>
  404be4:	4622      	mov	r2, r4
  404be6:	462b      	mov	r3, r5
  404be8:	f002 fa9e 	bl	407128 <__aeabi_dmul>
  404bec:	4602      	mov	r2, r0
  404bee:	460b      	mov	r3, r1
  404bf0:	4630      	mov	r0, r6
  404bf2:	4639      	mov	r1, r7
  404bf4:	f002 f8e4 	bl	406dc0 <__aeabi_dsub>
  404bf8:	9f04      	ldr	r7, [sp, #16]
  404bfa:	4602      	mov	r2, r0
  404bfc:	f107 0630 	add.w	r6, r7, #48	; 0x30
  404c00:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404c02:	f808 6b01 	strb.w	r6, [r8], #1
  404c06:	ebc7 0608 	rsb	r6, r7, r8
  404c0a:	9f07      	ldr	r7, [sp, #28]
  404c0c:	460b      	mov	r3, r1
  404c0e:	42be      	cmp	r6, r7
  404c10:	d129      	bne.n	404c66 <_dtoa_r+0x6a0>
  404c12:	f002 f8d7 	bl	406dc4 <__adddf3>
  404c16:	4622      	mov	r2, r4
  404c18:	462b      	mov	r3, r5
  404c1a:	4606      	mov	r6, r0
  404c1c:	460f      	mov	r7, r1
  404c1e:	f002 fd13 	bl	407648 <__aeabi_dcmpgt>
  404c22:	b970      	cbnz	r0, 404c42 <_dtoa_r+0x67c>
  404c24:	4630      	mov	r0, r6
  404c26:	4639      	mov	r1, r7
  404c28:	4622      	mov	r2, r4
  404c2a:	462b      	mov	r3, r5
  404c2c:	f002 fce4 	bl	4075f8 <__aeabi_dcmpeq>
  404c30:	2800      	cmp	r0, #0
  404c32:	f000 825f 	beq.w	4050f4 <_dtoa_r+0xb2e>
  404c36:	9f04      	ldr	r7, [sp, #16]
  404c38:	07fb      	lsls	r3, r7, #31
  404c3a:	d402      	bmi.n	404c42 <_dtoa_r+0x67c>
  404c3c:	e25a      	b.n	4050f4 <_dtoa_r+0xb2e>
  404c3e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  404c42:	4643      	mov	r3, r8
  404c44:	4698      	mov	r8, r3
  404c46:	f818 2c01 	ldrb.w	r2, [r8, #-1]
  404c4a:	3b01      	subs	r3, #1
  404c4c:	2a39      	cmp	r2, #57	; 0x39
  404c4e:	d106      	bne.n	404c5e <_dtoa_r+0x698>
  404c50:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404c52:	429f      	cmp	r7, r3
  404c54:	d1f6      	bne.n	404c44 <_dtoa_r+0x67e>
  404c56:	2230      	movs	r2, #48	; 0x30
  404c58:	f109 0901 	add.w	r9, r9, #1
  404c5c:	703a      	strb	r2, [r7, #0]
  404c5e:	781a      	ldrb	r2, [r3, #0]
  404c60:	3201      	adds	r2, #1
  404c62:	701a      	strb	r2, [r3, #0]
  404c64:	e246      	b.n	4050f4 <_dtoa_r+0xb2e>
  404c66:	2200      	movs	r2, #0
  404c68:	4b38      	ldr	r3, [pc, #224]	; (404d4c <_dtoa_r+0x786>)
  404c6a:	f002 fa5d 	bl	407128 <__aeabi_dmul>
  404c6e:	2200      	movs	r2, #0
  404c70:	2300      	movs	r3, #0
  404c72:	4606      	mov	r6, r0
  404c74:	460f      	mov	r7, r1
  404c76:	f002 fcbf 	bl	4075f8 <__aeabi_dcmpeq>
  404c7a:	2800      	cmp	r0, #0
  404c7c:	d0a7      	beq.n	404bce <_dtoa_r+0x608>
  404c7e:	e239      	b.n	4050f4 <_dtoa_r+0xb2e>
  404c80:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  404c82:	2f00      	cmp	r7, #0
  404c84:	d030      	beq.n	404ce8 <_dtoa_r+0x722>
  404c86:	9f24      	ldr	r7, [sp, #144]	; 0x90
  404c88:	2f01      	cmp	r7, #1
  404c8a:	dc0a      	bgt.n	404ca2 <_dtoa_r+0x6dc>
  404c8c:	9f15      	ldr	r7, [sp, #84]	; 0x54
  404c8e:	b117      	cbz	r7, 404c96 <_dtoa_r+0x6d0>
  404c90:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404c94:	e002      	b.n	404c9c <_dtoa_r+0x6d6>
  404c96:	9b18      	ldr	r3, [sp, #96]	; 0x60
  404c98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404c9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404c9e:	9e08      	ldr	r6, [sp, #32]
  404ca0:	e016      	b.n	404cd0 <_dtoa_r+0x70a>
  404ca2:	9f07      	ldr	r7, [sp, #28]
  404ca4:	1e7d      	subs	r5, r7, #1
  404ca6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404ca8:	42af      	cmp	r7, r5
  404caa:	db01      	blt.n	404cb0 <_dtoa_r+0x6ea>
  404cac:	1b7d      	subs	r5, r7, r5
  404cae:	e006      	b.n	404cbe <_dtoa_r+0x6f8>
  404cb0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404cb2:	950e      	str	r5, [sp, #56]	; 0x38
  404cb4:	1beb      	subs	r3, r5, r7
  404cb6:	9f11      	ldr	r7, [sp, #68]	; 0x44
  404cb8:	2500      	movs	r5, #0
  404cba:	441f      	add	r7, r3
  404cbc:	9711      	str	r7, [sp, #68]	; 0x44
  404cbe:	9f07      	ldr	r7, [sp, #28]
  404cc0:	2f00      	cmp	r7, #0
  404cc2:	da03      	bge.n	404ccc <_dtoa_r+0x706>
  404cc4:	9808      	ldr	r0, [sp, #32]
  404cc6:	2300      	movs	r3, #0
  404cc8:	1bc6      	subs	r6, r0, r7
  404cca:	e001      	b.n	404cd0 <_dtoa_r+0x70a>
  404ccc:	9e08      	ldr	r6, [sp, #32]
  404cce:	9b07      	ldr	r3, [sp, #28]
  404cd0:	9f08      	ldr	r7, [sp, #32]
  404cd2:	4650      	mov	r0, sl
  404cd4:	441f      	add	r7, r3
  404cd6:	9708      	str	r7, [sp, #32]
  404cd8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404cda:	2101      	movs	r1, #1
  404cdc:	441f      	add	r7, r3
  404cde:	970a      	str	r7, [sp, #40]	; 0x28
  404ce0:	f000 feac 	bl	405a3c <__i2b>
  404ce4:	4604      	mov	r4, r0
  404ce6:	e002      	b.n	404cee <_dtoa_r+0x728>
  404ce8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404cea:	9e08      	ldr	r6, [sp, #32]
  404cec:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404cee:	b16e      	cbz	r6, 404d0c <_dtoa_r+0x746>
  404cf0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404cf2:	2f00      	cmp	r7, #0
  404cf4:	dd0a      	ble.n	404d0c <_dtoa_r+0x746>
  404cf6:	463b      	mov	r3, r7
  404cf8:	9f08      	ldr	r7, [sp, #32]
  404cfa:	42b3      	cmp	r3, r6
  404cfc:	bfa8      	it	ge
  404cfe:	4633      	movge	r3, r6
  404d00:	1aff      	subs	r7, r7, r3
  404d02:	9708      	str	r7, [sp, #32]
  404d04:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404d06:	1af6      	subs	r6, r6, r3
  404d08:	1aff      	subs	r7, r7, r3
  404d0a:	970a      	str	r7, [sp, #40]	; 0x28
  404d0c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404d0e:	2f00      	cmp	r7, #0
  404d10:	dd28      	ble.n	404d64 <_dtoa_r+0x79e>
  404d12:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  404d14:	b307      	cbz	r7, 404d58 <_dtoa_r+0x792>
  404d16:	2d00      	cmp	r5, #0
  404d18:	dd10      	ble.n	404d3c <_dtoa_r+0x776>
  404d1a:	4621      	mov	r1, r4
  404d1c:	462a      	mov	r2, r5
  404d1e:	4650      	mov	r0, sl
  404d20:	f000 ff2d 	bl	405b7e <__pow5mult>
  404d24:	4604      	mov	r4, r0
  404d26:	465a      	mov	r2, fp
  404d28:	4621      	mov	r1, r4
  404d2a:	4650      	mov	r0, sl
  404d2c:	f000 fe8f 	bl	405a4e <__multiply>
  404d30:	4659      	mov	r1, fp
  404d32:	4607      	mov	r7, r0
  404d34:	4650      	mov	r0, sl
  404d36:	f000 fdaf 	bl	405898 <_Bfree>
  404d3a:	46bb      	mov	fp, r7
  404d3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404d3e:	1b7a      	subs	r2, r7, r5
  404d40:	d010      	beq.n	404d64 <_dtoa_r+0x79e>
  404d42:	4650      	mov	r0, sl
  404d44:	4659      	mov	r1, fp
  404d46:	e00a      	b.n	404d5e <_dtoa_r+0x798>
  404d48:	3fe00000 	.word	0x3fe00000
  404d4c:	40240000 	.word	0x40240000
  404d50:	00407ef8 	.word	0x00407ef8
  404d54:	40140000 	.word	0x40140000
  404d58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404d5a:	4650      	mov	r0, sl
  404d5c:	4659      	mov	r1, fp
  404d5e:	f000 ff0e 	bl	405b7e <__pow5mult>
  404d62:	4683      	mov	fp, r0
  404d64:	4650      	mov	r0, sl
  404d66:	2101      	movs	r1, #1
  404d68:	f000 fe68 	bl	405a3c <__i2b>
  404d6c:	9f11      	ldr	r7, [sp, #68]	; 0x44
  404d6e:	4605      	mov	r5, r0
  404d70:	2f00      	cmp	r7, #0
  404d72:	dd05      	ble.n	404d80 <_dtoa_r+0x7ba>
  404d74:	4629      	mov	r1, r5
  404d76:	4650      	mov	r0, sl
  404d78:	463a      	mov	r2, r7
  404d7a:	f000 ff00 	bl	405b7e <__pow5mult>
  404d7e:	4605      	mov	r5, r0
  404d80:	9f24      	ldr	r7, [sp, #144]	; 0x90
  404d82:	2f01      	cmp	r7, #1
  404d84:	dc12      	bgt.n	404dac <_dtoa_r+0x7e6>
  404d86:	9804      	ldr	r0, [sp, #16]
  404d88:	b980      	cbnz	r0, 404dac <_dtoa_r+0x7e6>
  404d8a:	9905      	ldr	r1, [sp, #20]
  404d8c:	f3c1 0313 	ubfx	r3, r1, #0, #20
  404d90:	b973      	cbnz	r3, 404db0 <_dtoa_r+0x7ea>
  404d92:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  404d96:	0d3f      	lsrs	r7, r7, #20
  404d98:	053f      	lsls	r7, r7, #20
  404d9a:	b157      	cbz	r7, 404db2 <_dtoa_r+0x7ec>
  404d9c:	9f08      	ldr	r7, [sp, #32]
  404d9e:	3701      	adds	r7, #1
  404da0:	9708      	str	r7, [sp, #32]
  404da2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404da4:	3701      	adds	r7, #1
  404da6:	970a      	str	r7, [sp, #40]	; 0x28
  404da8:	2701      	movs	r7, #1
  404daa:	e002      	b.n	404db2 <_dtoa_r+0x7ec>
  404dac:	2700      	movs	r7, #0
  404dae:	e000      	b.n	404db2 <_dtoa_r+0x7ec>
  404db0:	9f04      	ldr	r7, [sp, #16]
  404db2:	9811      	ldr	r0, [sp, #68]	; 0x44
  404db4:	b140      	cbz	r0, 404dc8 <_dtoa_r+0x802>
  404db6:	692b      	ldr	r3, [r5, #16]
  404db8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  404dbc:	6918      	ldr	r0, [r3, #16]
  404dbe:	f000 fdf0 	bl	4059a2 <__hi0bits>
  404dc2:	f1c0 0020 	rsb	r0, r0, #32
  404dc6:	e000      	b.n	404dca <_dtoa_r+0x804>
  404dc8:	2001      	movs	r0, #1
  404dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404dcc:	4403      	add	r3, r0
  404dce:	f013 031f 	ands.w	r3, r3, #31
  404dd2:	d00f      	beq.n	404df4 <_dtoa_r+0x82e>
  404dd4:	f1c3 0220 	rsb	r2, r3, #32
  404dd8:	2a04      	cmp	r2, #4
  404dda:	dd09      	ble.n	404df0 <_dtoa_r+0x82a>
  404ddc:	9908      	ldr	r1, [sp, #32]
  404dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404de0:	f1c3 031c 	rsb	r3, r3, #28
  404de4:	4419      	add	r1, r3
  404de6:	441a      	add	r2, r3
  404de8:	9108      	str	r1, [sp, #32]
  404dea:	441e      	add	r6, r3
  404dec:	920a      	str	r2, [sp, #40]	; 0x28
  404dee:	e009      	b.n	404e04 <_dtoa_r+0x83e>
  404df0:	d008      	beq.n	404e04 <_dtoa_r+0x83e>
  404df2:	4613      	mov	r3, r2
  404df4:	9808      	ldr	r0, [sp, #32]
  404df6:	990a      	ldr	r1, [sp, #40]	; 0x28
  404df8:	331c      	adds	r3, #28
  404dfa:	4418      	add	r0, r3
  404dfc:	4419      	add	r1, r3
  404dfe:	9008      	str	r0, [sp, #32]
  404e00:	441e      	add	r6, r3
  404e02:	910a      	str	r1, [sp, #40]	; 0x28
  404e04:	9a08      	ldr	r2, [sp, #32]
  404e06:	2a00      	cmp	r2, #0
  404e08:	dd04      	ble.n	404e14 <_dtoa_r+0x84e>
  404e0a:	4659      	mov	r1, fp
  404e0c:	4650      	mov	r0, sl
  404e0e:	f000 fef5 	bl	405bfc <__lshift>
  404e12:	4683      	mov	fp, r0
  404e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e16:	2b00      	cmp	r3, #0
  404e18:	dd05      	ble.n	404e26 <_dtoa_r+0x860>
  404e1a:	4629      	mov	r1, r5
  404e1c:	4650      	mov	r0, sl
  404e1e:	461a      	mov	r2, r3
  404e20:	f000 feec 	bl	405bfc <__lshift>
  404e24:	4605      	mov	r5, r0
  404e26:	9814      	ldr	r0, [sp, #80]	; 0x50
  404e28:	b1e0      	cbz	r0, 404e64 <_dtoa_r+0x89e>
  404e2a:	4658      	mov	r0, fp
  404e2c:	4629      	mov	r1, r5
  404e2e:	f000 ff38 	bl	405ca2 <__mcmp>
  404e32:	2800      	cmp	r0, #0
  404e34:	da16      	bge.n	404e64 <_dtoa_r+0x89e>
  404e36:	4659      	mov	r1, fp
  404e38:	4650      	mov	r0, sl
  404e3a:	220a      	movs	r2, #10
  404e3c:	2300      	movs	r3, #0
  404e3e:	f000 fd34 	bl	4058aa <__multadd>
  404e42:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404e44:	f109 39ff 	add.w	r9, r9, #4294967295
  404e48:	4683      	mov	fp, r0
  404e4a:	b149      	cbz	r1, 404e60 <_dtoa_r+0x89a>
  404e4c:	4621      	mov	r1, r4
  404e4e:	220a      	movs	r2, #10
  404e50:	4650      	mov	r0, sl
  404e52:	2300      	movs	r3, #0
  404e54:	f000 fd29 	bl	4058aa <__multadd>
  404e58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404e5a:	4604      	mov	r4, r0
  404e5c:	9207      	str	r2, [sp, #28]
  404e5e:	e001      	b.n	404e64 <_dtoa_r+0x89e>
  404e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404e62:	9307      	str	r3, [sp, #28]
  404e64:	9807      	ldr	r0, [sp, #28]
  404e66:	2800      	cmp	r0, #0
  404e68:	dc29      	bgt.n	404ebe <_dtoa_r+0x8f8>
  404e6a:	9924      	ldr	r1, [sp, #144]	; 0x90
  404e6c:	2902      	cmp	r1, #2
  404e6e:	dd26      	ble.n	404ebe <_dtoa_r+0x8f8>
  404e70:	b988      	cbnz	r0, 404e96 <_dtoa_r+0x8d0>
  404e72:	4629      	mov	r1, r5
  404e74:	2205      	movs	r2, #5
  404e76:	9b07      	ldr	r3, [sp, #28]
  404e78:	4650      	mov	r0, sl
  404e7a:	f000 fd16 	bl	4058aa <__multadd>
  404e7e:	4605      	mov	r5, r0
  404e80:	4629      	mov	r1, r5
  404e82:	4658      	mov	r0, fp
  404e84:	f000 ff0d 	bl	405ca2 <__mcmp>
  404e88:	2800      	cmp	r0, #0
  404e8a:	dc0e      	bgt.n	404eaa <_dtoa_r+0x8e4>
  404e8c:	e003      	b.n	404e96 <_dtoa_r+0x8d0>
  404e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404e90:	e000      	b.n	404e94 <_dtoa_r+0x8ce>
  404e92:	2500      	movs	r5, #0
  404e94:	462c      	mov	r4, r5
  404e96:	9f25      	ldr	r7, [sp, #148]	; 0x94
  404e98:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  404e9c:	ea6f 0907 	mvn.w	r9, r7
  404ea0:	e00a      	b.n	404eb8 <_dtoa_r+0x8f2>
  404ea2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404ea4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  404ea8:	462c      	mov	r4, r5
  404eaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
  404eac:	2331      	movs	r3, #49	; 0x31
  404eae:	f107 0801 	add.w	r8, r7, #1
  404eb2:	703b      	strb	r3, [r7, #0]
  404eb4:	f109 0901 	add.w	r9, r9, #1
  404eb8:	4627      	mov	r7, r4
  404eba:	2400      	movs	r4, #0
  404ebc:	e107      	b.n	4050ce <_dtoa_r+0xb08>
  404ebe:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404ec0:	2800      	cmp	r0, #0
  404ec2:	f000 80bb 	beq.w	40503c <_dtoa_r+0xa76>
  404ec6:	2e00      	cmp	r6, #0
  404ec8:	dd05      	ble.n	404ed6 <_dtoa_r+0x910>
  404eca:	4621      	mov	r1, r4
  404ecc:	4650      	mov	r0, sl
  404ece:	4632      	mov	r2, r6
  404ed0:	f000 fe94 	bl	405bfc <__lshift>
  404ed4:	4604      	mov	r4, r0
  404ed6:	b19f      	cbz	r7, 404f00 <_dtoa_r+0x93a>
  404ed8:	6861      	ldr	r1, [r4, #4]
  404eda:	4650      	mov	r0, sl
  404edc:	f000 fcb6 	bl	40584c <_Balloc>
  404ee0:	6922      	ldr	r2, [r4, #16]
  404ee2:	4606      	mov	r6, r0
  404ee4:	3202      	adds	r2, #2
  404ee6:	f104 010c 	add.w	r1, r4, #12
  404eea:	0092      	lsls	r2, r2, #2
  404eec:	300c      	adds	r0, #12
  404eee:	f7fe fa2d 	bl	40334c <memcpy>
  404ef2:	4650      	mov	r0, sl
  404ef4:	4631      	mov	r1, r6
  404ef6:	2201      	movs	r2, #1
  404ef8:	f000 fe80 	bl	405bfc <__lshift>
  404efc:	4607      	mov	r7, r0
  404efe:	e000      	b.n	404f02 <_dtoa_r+0x93c>
  404f00:	4627      	mov	r7, r4
  404f02:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404f04:	4629      	mov	r1, r5
  404f06:	4658      	mov	r0, fp
  404f08:	f7ff face 	bl	4044a8 <quorem>
  404f0c:	4621      	mov	r1, r4
  404f0e:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  404f12:	4680      	mov	r8, r0
  404f14:	4658      	mov	r0, fp
  404f16:	f8cd c008 	str.w	ip, [sp, #8]
  404f1a:	f000 fec2 	bl	405ca2 <__mcmp>
  404f1e:	463a      	mov	r2, r7
  404f20:	9008      	str	r0, [sp, #32]
  404f22:	4629      	mov	r1, r5
  404f24:	4650      	mov	r0, sl
  404f26:	f000 fed9 	bl	405cdc <__mdiff>
  404f2a:	68c3      	ldr	r3, [r0, #12]
  404f2c:	4602      	mov	r2, r0
  404f2e:	f8dd c008 	ldr.w	ip, [sp, #8]
  404f32:	b94b      	cbnz	r3, 404f48 <_dtoa_r+0x982>
  404f34:	4611      	mov	r1, r2
  404f36:	4658      	mov	r0, fp
  404f38:	9203      	str	r2, [sp, #12]
  404f3a:	f000 feb2 	bl	405ca2 <__mcmp>
  404f3e:	9a03      	ldr	r2, [sp, #12]
  404f40:	4603      	mov	r3, r0
  404f42:	f8dd c008 	ldr.w	ip, [sp, #8]
  404f46:	e000      	b.n	404f4a <_dtoa_r+0x984>
  404f48:	2301      	movs	r3, #1
  404f4a:	4650      	mov	r0, sl
  404f4c:	4611      	mov	r1, r2
  404f4e:	9303      	str	r3, [sp, #12]
  404f50:	f8cd c008 	str.w	ip, [sp, #8]
  404f54:	f000 fca0 	bl	405898 <_Bfree>
  404f58:	9b03      	ldr	r3, [sp, #12]
  404f5a:	f8dd c008 	ldr.w	ip, [sp, #8]
  404f5e:	b963      	cbnz	r3, 404f7a <_dtoa_r+0x9b4>
  404f60:	9924      	ldr	r1, [sp, #144]	; 0x90
  404f62:	b951      	cbnz	r1, 404f7a <_dtoa_r+0x9b4>
  404f64:	9804      	ldr	r0, [sp, #16]
  404f66:	f000 0201 	and.w	r2, r0, #1
  404f6a:	b932      	cbnz	r2, 404f7a <_dtoa_r+0x9b4>
  404f6c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  404f70:	d035      	beq.n	404fde <_dtoa_r+0xa18>
  404f72:	9b08      	ldr	r3, [sp, #32]
  404f74:	2b00      	cmp	r3, #0
  404f76:	dc24      	bgt.n	404fc2 <_dtoa_r+0x9fc>
  404f78:	e025      	b.n	404fc6 <_dtoa_r+0xa00>
  404f7a:	9808      	ldr	r0, [sp, #32]
  404f7c:	2800      	cmp	r0, #0
  404f7e:	da02      	bge.n	404f86 <_dtoa_r+0x9c0>
  404f80:	2b00      	cmp	r3, #0
  404f82:	dc08      	bgt.n	404f96 <_dtoa_r+0x9d0>
  404f84:	e01f      	b.n	404fc6 <_dtoa_r+0xa00>
  404f86:	d123      	bne.n	404fd0 <_dtoa_r+0xa0a>
  404f88:	9924      	ldr	r1, [sp, #144]	; 0x90
  404f8a:	bb09      	cbnz	r1, 404fd0 <_dtoa_r+0xa0a>
  404f8c:	9804      	ldr	r0, [sp, #16]
  404f8e:	f000 0201 	and.w	r2, r0, #1
  404f92:	b9ea      	cbnz	r2, 404fd0 <_dtoa_r+0xa0a>
  404f94:	e7f4      	b.n	404f80 <_dtoa_r+0x9ba>
  404f96:	4659      	mov	r1, fp
  404f98:	2201      	movs	r2, #1
  404f9a:	4650      	mov	r0, sl
  404f9c:	f8cd c008 	str.w	ip, [sp, #8]
  404fa0:	f000 fe2c 	bl	405bfc <__lshift>
  404fa4:	4629      	mov	r1, r5
  404fa6:	4683      	mov	fp, r0
  404fa8:	f000 fe7b 	bl	405ca2 <__mcmp>
  404fac:	2800      	cmp	r0, #0
  404fae:	f8dd c008 	ldr.w	ip, [sp, #8]
  404fb2:	dc03      	bgt.n	404fbc <_dtoa_r+0x9f6>
  404fb4:	d107      	bne.n	404fc6 <_dtoa_r+0xa00>
  404fb6:	f01c 0f01 	tst.w	ip, #1
  404fba:	d004      	beq.n	404fc6 <_dtoa_r+0xa00>
  404fbc:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  404fc0:	d00d      	beq.n	404fde <_dtoa_r+0xa18>
  404fc2:	f108 0c31 	add.w	ip, r8, #49	; 0x31
  404fc6:	f106 0801 	add.w	r8, r6, #1
  404fca:	f886 c000 	strb.w	ip, [r6]
  404fce:	e07e      	b.n	4050ce <_dtoa_r+0xb08>
  404fd0:	2b00      	cmp	r3, #0
  404fd2:	f106 0801 	add.w	r8, r6, #1
  404fd6:	dd09      	ble.n	404fec <_dtoa_r+0xa26>
  404fd8:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  404fdc:	d103      	bne.n	404fe6 <_dtoa_r+0xa20>
  404fde:	2339      	movs	r3, #57	; 0x39
  404fe0:	7033      	strb	r3, [r6, #0]
  404fe2:	3601      	adds	r6, #1
  404fe4:	e05b      	b.n	40509e <_dtoa_r+0xad8>
  404fe6:	f10c 0301 	add.w	r3, ip, #1
  404fea:	e068      	b.n	4050be <_dtoa_r+0xaf8>
  404fec:	9909      	ldr	r1, [sp, #36]	; 0x24
  404fee:	9a07      	ldr	r2, [sp, #28]
  404ff0:	ebc1 0308 	rsb	r3, r1, r8
  404ff4:	4646      	mov	r6, r8
  404ff6:	4293      	cmp	r3, r2
  404ff8:	f806 cc01 	strb.w	ip, [r6, #-1]
  404ffc:	d03c      	beq.n	405078 <_dtoa_r+0xab2>
  404ffe:	4659      	mov	r1, fp
  405000:	220a      	movs	r2, #10
  405002:	2300      	movs	r3, #0
  405004:	4650      	mov	r0, sl
  405006:	f000 fc50 	bl	4058aa <__multadd>
  40500a:	42bc      	cmp	r4, r7
  40500c:	4683      	mov	fp, r0
  40500e:	4621      	mov	r1, r4
  405010:	4650      	mov	r0, sl
  405012:	f04f 020a 	mov.w	r2, #10
  405016:	f04f 0300 	mov.w	r3, #0
  40501a:	d104      	bne.n	405026 <_dtoa_r+0xa60>
  40501c:	f000 fc45 	bl	4058aa <__multadd>
  405020:	4604      	mov	r4, r0
  405022:	4607      	mov	r7, r0
  405024:	e76e      	b.n	404f04 <_dtoa_r+0x93e>
  405026:	f000 fc40 	bl	4058aa <__multadd>
  40502a:	4639      	mov	r1, r7
  40502c:	4604      	mov	r4, r0
  40502e:	220a      	movs	r2, #10
  405030:	4650      	mov	r0, sl
  405032:	2300      	movs	r3, #0
  405034:	f000 fc39 	bl	4058aa <__multadd>
  405038:	4607      	mov	r7, r0
  40503a:	e763      	b.n	404f04 <_dtoa_r+0x93e>
  40503c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  40503e:	4658      	mov	r0, fp
  405040:	4629      	mov	r1, r5
  405042:	f7ff fa31 	bl	4044a8 <quorem>
  405046:	9f09      	ldr	r7, [sp, #36]	; 0x24
  405048:	f100 0c30 	add.w	ip, r0, #48	; 0x30
  40504c:	f807 c006 	strb.w	ip, [r7, r6]
  405050:	9f07      	ldr	r7, [sp, #28]
  405052:	3601      	adds	r6, #1
  405054:	42be      	cmp	r6, r7
  405056:	db07      	blt.n	405068 <_dtoa_r+0xaa2>
  405058:	9e09      	ldr	r6, [sp, #36]	; 0x24
  40505a:	2f01      	cmp	r7, #1
  40505c:	bfac      	ite	ge
  40505e:	19f6      	addge	r6, r6, r7
  405060:	3601      	addlt	r6, #1
  405062:	4627      	mov	r7, r4
  405064:	2400      	movs	r4, #0
  405066:	e007      	b.n	405078 <_dtoa_r+0xab2>
  405068:	4659      	mov	r1, fp
  40506a:	4650      	mov	r0, sl
  40506c:	220a      	movs	r2, #10
  40506e:	2300      	movs	r3, #0
  405070:	f000 fc1b 	bl	4058aa <__multadd>
  405074:	4683      	mov	fp, r0
  405076:	e7e2      	b.n	40503e <_dtoa_r+0xa78>
  405078:	4659      	mov	r1, fp
  40507a:	2201      	movs	r2, #1
  40507c:	4650      	mov	r0, sl
  40507e:	f8cd c008 	str.w	ip, [sp, #8]
  405082:	f000 fdbb 	bl	405bfc <__lshift>
  405086:	4629      	mov	r1, r5
  405088:	4683      	mov	fp, r0
  40508a:	f000 fe0a 	bl	405ca2 <__mcmp>
  40508e:	2800      	cmp	r0, #0
  405090:	f8dd c008 	ldr.w	ip, [sp, #8]
  405094:	dc03      	bgt.n	40509e <_dtoa_r+0xad8>
  405096:	d114      	bne.n	4050c2 <_dtoa_r+0xafc>
  405098:	f01c 0f01 	tst.w	ip, #1
  40509c:	d011      	beq.n	4050c2 <_dtoa_r+0xafc>
  40509e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  4050a2:	46b0      	mov	r8, r6
  4050a4:	2b39      	cmp	r3, #57	; 0x39
  4050a6:	f106 36ff 	add.w	r6, r6, #4294967295
  4050aa:	d107      	bne.n	4050bc <_dtoa_r+0xaf6>
  4050ac:	9809      	ldr	r0, [sp, #36]	; 0x24
  4050ae:	42b0      	cmp	r0, r6
  4050b0:	d1f5      	bne.n	40509e <_dtoa_r+0xad8>
  4050b2:	2331      	movs	r3, #49	; 0x31
  4050b4:	f109 0901 	add.w	r9, r9, #1
  4050b8:	7003      	strb	r3, [r0, #0]
  4050ba:	e008      	b.n	4050ce <_dtoa_r+0xb08>
  4050bc:	3301      	adds	r3, #1
  4050be:	7033      	strb	r3, [r6, #0]
  4050c0:	e005      	b.n	4050ce <_dtoa_r+0xb08>
  4050c2:	46b0      	mov	r8, r6
  4050c4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
  4050c8:	3e01      	subs	r6, #1
  4050ca:	2b30      	cmp	r3, #48	; 0x30
  4050cc:	d0f9      	beq.n	4050c2 <_dtoa_r+0xafc>
  4050ce:	4650      	mov	r0, sl
  4050d0:	4629      	mov	r1, r5
  4050d2:	f000 fbe1 	bl	405898 <_Bfree>
  4050d6:	b16f      	cbz	r7, 4050f4 <_dtoa_r+0xb2e>
  4050d8:	b12c      	cbz	r4, 4050e6 <_dtoa_r+0xb20>
  4050da:	42bc      	cmp	r4, r7
  4050dc:	d003      	beq.n	4050e6 <_dtoa_r+0xb20>
  4050de:	4650      	mov	r0, sl
  4050e0:	4621      	mov	r1, r4
  4050e2:	f000 fbd9 	bl	405898 <_Bfree>
  4050e6:	4650      	mov	r0, sl
  4050e8:	4639      	mov	r1, r7
  4050ea:	f000 fbd5 	bl	405898 <_Bfree>
  4050ee:	e001      	b.n	4050f4 <_dtoa_r+0xb2e>
  4050f0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  4050f4:	4650      	mov	r0, sl
  4050f6:	4659      	mov	r1, fp
  4050f8:	f000 fbce 	bl	405898 <_Bfree>
  4050fc:	2300      	movs	r3, #0
  4050fe:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405100:	f888 3000 	strb.w	r3, [r8]
  405104:	f109 0301 	add.w	r3, r9, #1
  405108:	603b      	str	r3, [r7, #0]
  40510a:	9f28      	ldr	r7, [sp, #160]	; 0xa0
  40510c:	b127      	cbz	r7, 405118 <_dtoa_r+0xb52>
  40510e:	f8c7 8000 	str.w	r8, [r7]
  405112:	e001      	b.n	405118 <_dtoa_r+0xb52>
  405114:	4802      	ldr	r0, [pc, #8]	; (405120 <_dtoa_r+0xb5a>)
  405116:	e000      	b.n	40511a <_dtoa_r+0xb54>
  405118:	9809      	ldr	r0, [sp, #36]	; 0x24
  40511a:	b01b      	add	sp, #108	; 0x6c
  40511c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405120:	00407dd0 	.word	0x00407dd0
  405124:	f3af 8000 	nop.w

00405128 <__libc_fini_array>:
  405128:	b538      	push	{r3, r4, r5, lr}
  40512a:	4d08      	ldr	r5, [pc, #32]	; (40514c <__libc_fini_array+0x24>)
  40512c:	4c08      	ldr	r4, [pc, #32]	; (405150 <__libc_fini_array+0x28>)
  40512e:	1b64      	subs	r4, r4, r5
  405130:	10a4      	asrs	r4, r4, #2
  405132:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  405136:	b124      	cbz	r4, 405142 <__libc_fini_array+0x1a>
  405138:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40513c:	3c01      	subs	r4, #1
  40513e:	4798      	blx	r3
  405140:	e7f9      	b.n	405136 <__libc_fini_array+0xe>
  405142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405146:	f002 bf7d 	b.w	408044 <_fini>
  40514a:	bf00      	nop
  40514c:	00408050 	.word	0x00408050
  405150:	00408054 	.word	0x00408054

00405154 <_malloc_trim_r>:
  405154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405156:	4d23      	ldr	r5, [pc, #140]	; (4051e4 <_malloc_trim_r+0x90>)
  405158:	460e      	mov	r6, r1
  40515a:	4604      	mov	r4, r0
  40515c:	f000 fb73 	bl	405846 <__malloc_lock>
  405160:	68ab      	ldr	r3, [r5, #8]
  405162:	685f      	ldr	r7, [r3, #4]
  405164:	f027 0703 	bic.w	r7, r7, #3
  405168:	1bbe      	subs	r6, r7, r6
  40516a:	f606 76ef 	addw	r6, r6, #4079	; 0xfef
  40516e:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
  405172:	f026 060f 	bic.w	r6, r6, #15
  405176:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
  40517a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  40517e:	da04      	bge.n	40518a <_malloc_trim_r+0x36>
  405180:	4620      	mov	r0, r4
  405182:	f000 fb61 	bl	405848 <__malloc_unlock>
  405186:	2000      	movs	r0, #0
  405188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40518a:	4620      	mov	r0, r4
  40518c:	2100      	movs	r1, #0
  40518e:	f001 f913 	bl	4063b8 <_sbrk_r>
  405192:	68ab      	ldr	r3, [r5, #8]
  405194:	443b      	add	r3, r7
  405196:	4298      	cmp	r0, r3
  405198:	d1f2      	bne.n	405180 <_malloc_trim_r+0x2c>
  40519a:	4620      	mov	r0, r4
  40519c:	4271      	negs	r1, r6
  40519e:	f001 f90b 	bl	4063b8 <_sbrk_r>
  4051a2:	3001      	adds	r0, #1
  4051a4:	d110      	bne.n	4051c8 <_malloc_trim_r+0x74>
  4051a6:	4620      	mov	r0, r4
  4051a8:	2100      	movs	r1, #0
  4051aa:	f001 f905 	bl	4063b8 <_sbrk_r>
  4051ae:	68ab      	ldr	r3, [r5, #8]
  4051b0:	1ac2      	subs	r2, r0, r3
  4051b2:	2a0f      	cmp	r2, #15
  4051b4:	dde4      	ble.n	405180 <_malloc_trim_r+0x2c>
  4051b6:	490c      	ldr	r1, [pc, #48]	; (4051e8 <_malloc_trim_r+0x94>)
  4051b8:	f042 0201 	orr.w	r2, r2, #1
  4051bc:	6809      	ldr	r1, [r1, #0]
  4051be:	605a      	str	r2, [r3, #4]
  4051c0:	1a40      	subs	r0, r0, r1
  4051c2:	490a      	ldr	r1, [pc, #40]	; (4051ec <_malloc_trim_r+0x98>)
  4051c4:	6008      	str	r0, [r1, #0]
  4051c6:	e7db      	b.n	405180 <_malloc_trim_r+0x2c>
  4051c8:	68ab      	ldr	r3, [r5, #8]
  4051ca:	1bbf      	subs	r7, r7, r6
  4051cc:	f047 0701 	orr.w	r7, r7, #1
  4051d0:	605f      	str	r7, [r3, #4]
  4051d2:	4b06      	ldr	r3, [pc, #24]	; (4051ec <_malloc_trim_r+0x98>)
  4051d4:	4620      	mov	r0, r4
  4051d6:	681a      	ldr	r2, [r3, #0]
  4051d8:	1b96      	subs	r6, r2, r6
  4051da:	601e      	str	r6, [r3, #0]
  4051dc:	f000 fb34 	bl	405848 <__malloc_unlock>
  4051e0:	2001      	movs	r0, #1
  4051e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4051e4:	20000568 	.word	0x20000568
  4051e8:	20000970 	.word	0x20000970
  4051ec:	20000bd8 	.word	0x20000bd8

004051f0 <_free_r>:
  4051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4051f2:	4606      	mov	r6, r0
  4051f4:	460d      	mov	r5, r1
  4051f6:	2900      	cmp	r1, #0
  4051f8:	f000 80a9 	beq.w	40534e <_free_r+0x15e>
  4051fc:	f000 fb23 	bl	405846 <__malloc_lock>
  405200:	f855 cc04 	ldr.w	ip, [r5, #-4]
  405204:	4c52      	ldr	r4, [pc, #328]	; (405350 <_free_r+0x160>)
  405206:	f1a5 0308 	sub.w	r3, r5, #8
  40520a:	f02c 0201 	bic.w	r2, ip, #1
  40520e:	1898      	adds	r0, r3, r2
  405210:	68a1      	ldr	r1, [r4, #8]
  405212:	6847      	ldr	r7, [r0, #4]
  405214:	4288      	cmp	r0, r1
  405216:	f027 0703 	bic.w	r7, r7, #3
  40521a:	f00c 0101 	and.w	r1, ip, #1
  40521e:	d11b      	bne.n	405258 <_free_r+0x68>
  405220:	443a      	add	r2, r7
  405222:	b939      	cbnz	r1, 405234 <_free_r+0x44>
  405224:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405228:	1a5b      	subs	r3, r3, r1
  40522a:	6898      	ldr	r0, [r3, #8]
  40522c:	440a      	add	r2, r1
  40522e:	68d9      	ldr	r1, [r3, #12]
  405230:	60c1      	str	r1, [r0, #12]
  405232:	6088      	str	r0, [r1, #8]
  405234:	f042 0101 	orr.w	r1, r2, #1
  405238:	6059      	str	r1, [r3, #4]
  40523a:	60a3      	str	r3, [r4, #8]
  40523c:	4b45      	ldr	r3, [pc, #276]	; (405354 <_free_r+0x164>)
  40523e:	681b      	ldr	r3, [r3, #0]
  405240:	429a      	cmp	r2, r3
  405242:	d304      	bcc.n	40524e <_free_r+0x5e>
  405244:	4b44      	ldr	r3, [pc, #272]	; (405358 <_free_r+0x168>)
  405246:	4630      	mov	r0, r6
  405248:	6819      	ldr	r1, [r3, #0]
  40524a:	f7ff ff83 	bl	405154 <_malloc_trim_r>
  40524e:	4630      	mov	r0, r6
  405250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  405254:	f000 baf8 	b.w	405848 <__malloc_unlock>
  405258:	6047      	str	r7, [r0, #4]
  40525a:	b979      	cbnz	r1, 40527c <_free_r+0x8c>
  40525c:	f855 5c08 	ldr.w	r5, [r5, #-8]
  405260:	f104 0c08 	add.w	ip, r4, #8
  405264:	1b5b      	subs	r3, r3, r5
  405266:	442a      	add	r2, r5
  405268:	689d      	ldr	r5, [r3, #8]
  40526a:	4565      	cmp	r5, ip
  40526c:	d008      	beq.n	405280 <_free_r+0x90>
  40526e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405272:	f8c5 c00c 	str.w	ip, [r5, #12]
  405276:	f8cc 5008 	str.w	r5, [ip, #8]
  40527a:	e002      	b.n	405282 <_free_r+0x92>
  40527c:	2100      	movs	r1, #0
  40527e:	e000      	b.n	405282 <_free_r+0x92>
  405280:	2101      	movs	r1, #1
  405282:	19c5      	adds	r5, r0, r7
  405284:	686d      	ldr	r5, [r5, #4]
  405286:	07ed      	lsls	r5, r5, #31
  405288:	d40e      	bmi.n	4052a8 <_free_r+0xb8>
  40528a:	443a      	add	r2, r7
  40528c:	6885      	ldr	r5, [r0, #8]
  40528e:	b941      	cbnz	r1, 4052a2 <_free_r+0xb2>
  405290:	4f32      	ldr	r7, [pc, #200]	; (40535c <_free_r+0x16c>)
  405292:	42bd      	cmp	r5, r7
  405294:	d105      	bne.n	4052a2 <_free_r+0xb2>
  405296:	6163      	str	r3, [r4, #20]
  405298:	6123      	str	r3, [r4, #16]
  40529a:	2101      	movs	r1, #1
  40529c:	60dd      	str	r5, [r3, #12]
  40529e:	609d      	str	r5, [r3, #8]
  4052a0:	e002      	b.n	4052a8 <_free_r+0xb8>
  4052a2:	68c0      	ldr	r0, [r0, #12]
  4052a4:	60e8      	str	r0, [r5, #12]
  4052a6:	6085      	str	r5, [r0, #8]
  4052a8:	f042 0001 	orr.w	r0, r2, #1
  4052ac:	6058      	str	r0, [r3, #4]
  4052ae:	509a      	str	r2, [r3, r2]
  4052b0:	2900      	cmp	r1, #0
  4052b2:	d1cc      	bne.n	40524e <_free_r+0x5e>
  4052b4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4052b8:	d20e      	bcs.n	4052d8 <_free_r+0xe8>
  4052ba:	08d2      	lsrs	r2, r2, #3
  4052bc:	1091      	asrs	r1, r2, #2
  4052be:	2001      	movs	r0, #1
  4052c0:	4088      	lsls	r0, r1
  4052c2:	6861      	ldr	r1, [r4, #4]
  4052c4:	4301      	orrs	r1, r0
  4052c6:	6061      	str	r1, [r4, #4]
  4052c8:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
  4052cc:	68a2      	ldr	r2, [r4, #8]
  4052ce:	60dc      	str	r4, [r3, #12]
  4052d0:	609a      	str	r2, [r3, #8]
  4052d2:	60a3      	str	r3, [r4, #8]
  4052d4:	60d3      	str	r3, [r2, #12]
  4052d6:	e7ba      	b.n	40524e <_free_r+0x5e>
  4052d8:	0a51      	lsrs	r1, r2, #9
  4052da:	2904      	cmp	r1, #4
  4052dc:	d802      	bhi.n	4052e4 <_free_r+0xf4>
  4052de:	0991      	lsrs	r1, r2, #6
  4052e0:	3138      	adds	r1, #56	; 0x38
  4052e2:	e015      	b.n	405310 <_free_r+0x120>
  4052e4:	2914      	cmp	r1, #20
  4052e6:	d801      	bhi.n	4052ec <_free_r+0xfc>
  4052e8:	315b      	adds	r1, #91	; 0x5b
  4052ea:	e011      	b.n	405310 <_free_r+0x120>
  4052ec:	2954      	cmp	r1, #84	; 0x54
  4052ee:	d802      	bhi.n	4052f6 <_free_r+0x106>
  4052f0:	0b11      	lsrs	r1, r2, #12
  4052f2:	316e      	adds	r1, #110	; 0x6e
  4052f4:	e00c      	b.n	405310 <_free_r+0x120>
  4052f6:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  4052fa:	d802      	bhi.n	405302 <_free_r+0x112>
  4052fc:	0bd1      	lsrs	r1, r2, #15
  4052fe:	3177      	adds	r1, #119	; 0x77
  405300:	e006      	b.n	405310 <_free_r+0x120>
  405302:	f240 5054 	movw	r0, #1364	; 0x554
  405306:	4281      	cmp	r1, r0
  405308:	bf9a      	itte	ls
  40530a:	0c91      	lsrls	r1, r2, #18
  40530c:	317c      	addls	r1, #124	; 0x7c
  40530e:	217e      	movhi	r1, #126	; 0x7e
  405310:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
  405314:	68a5      	ldr	r5, [r4, #8]
  405316:	480e      	ldr	r0, [pc, #56]	; (405350 <_free_r+0x160>)
  405318:	42a5      	cmp	r5, r4
  40531a:	d001      	beq.n	405320 <_free_r+0x130>
  40531c:	4629      	mov	r1, r5
  40531e:	e00b      	b.n	405338 <_free_r+0x148>
  405320:	2201      	movs	r2, #1
  405322:	1089      	asrs	r1, r1, #2
  405324:	fa02 f101 	lsl.w	r1, r2, r1
  405328:	6842      	ldr	r2, [r0, #4]
  40532a:	430a      	orrs	r2, r1
  40532c:	6042      	str	r2, [r0, #4]
  40532e:	4629      	mov	r1, r5
  405330:	e008      	b.n	405344 <_free_r+0x154>
  405332:	6889      	ldr	r1, [r1, #8]
  405334:	42a1      	cmp	r1, r4
  405336:	d004      	beq.n	405342 <_free_r+0x152>
  405338:	6848      	ldr	r0, [r1, #4]
  40533a:	f020 0003 	bic.w	r0, r0, #3
  40533e:	4282      	cmp	r2, r0
  405340:	d3f7      	bcc.n	405332 <_free_r+0x142>
  405342:	68cd      	ldr	r5, [r1, #12]
  405344:	60dd      	str	r5, [r3, #12]
  405346:	6099      	str	r1, [r3, #8]
  405348:	60ab      	str	r3, [r5, #8]
  40534a:	60cb      	str	r3, [r1, #12]
  40534c:	e77f      	b.n	40524e <_free_r+0x5e>
  40534e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405350:	20000568 	.word	0x20000568
  405354:	20000974 	.word	0x20000974
  405358:	20000bd4 	.word	0x20000bd4
  40535c:	20000570 	.word	0x20000570

00405360 <_setlocale_r>:
  405360:	b510      	push	{r4, lr}
  405362:	4614      	mov	r4, r2
  405364:	b90a      	cbnz	r2, 40536a <_setlocale_r+0xa>
  405366:	480b      	ldr	r0, [pc, #44]	; (405394 <_setlocale_r+0x34>)
  405368:	bd10      	pop	{r4, pc}
  40536a:	4610      	mov	r0, r2
  40536c:	490a      	ldr	r1, [pc, #40]	; (405398 <_setlocale_r+0x38>)
  40536e:	f001 f833 	bl	4063d8 <strcmp>
  405372:	2800      	cmp	r0, #0
  405374:	d0f7      	beq.n	405366 <_setlocale_r+0x6>
  405376:	4620      	mov	r0, r4
  405378:	4906      	ldr	r1, [pc, #24]	; (405394 <_setlocale_r+0x34>)
  40537a:	f001 f82d 	bl	4063d8 <strcmp>
  40537e:	2800      	cmp	r0, #0
  405380:	d0f1      	beq.n	405366 <_setlocale_r+0x6>
  405382:	4620      	mov	r0, r4
  405384:	4905      	ldr	r1, [pc, #20]	; (40539c <_setlocale_r+0x3c>)
  405386:	f001 f827 	bl	4063d8 <strcmp>
  40538a:	2800      	cmp	r0, #0
  40538c:	4801      	ldr	r0, [pc, #4]	; (405394 <_setlocale_r+0x34>)
  40538e:	bf18      	it	ne
  405390:	2000      	movne	r0, #0
  405392:	bd10      	pop	{r4, pc}
  405394:	00407d7c 	.word	0x00407d7c
  405398:	00407ee0 	.word	0x00407ee0
  40539c:	00407ee7 	.word	0x00407ee7

004053a0 <__locale_charset>:
  4053a0:	4800      	ldr	r0, [pc, #0]	; (4053a4 <__locale_charset+0x4>)
  4053a2:	4770      	bx	lr
  4053a4:	200004ec 	.word	0x200004ec

004053a8 <__locale_mb_cur_max>:
  4053a8:	4b01      	ldr	r3, [pc, #4]	; (4053b0 <__locale_mb_cur_max+0x8>)
  4053aa:	6a18      	ldr	r0, [r3, #32]
  4053ac:	4770      	bx	lr
  4053ae:	bf00      	nop
  4053b0:	200004ec 	.word	0x200004ec

004053b4 <__locale_msgcharset>:
  4053b4:	4800      	ldr	r0, [pc, #0]	; (4053b8 <__locale_msgcharset+0x4>)
  4053b6:	4770      	bx	lr
  4053b8:	20000510 	.word	0x20000510

004053bc <__locale_cjk_lang>:
  4053bc:	2000      	movs	r0, #0
  4053be:	4770      	bx	lr

004053c0 <_localeconv_r>:
  4053c0:	4800      	ldr	r0, [pc, #0]	; (4053c4 <_localeconv_r+0x4>)
  4053c2:	4770      	bx	lr
  4053c4:	20000530 	.word	0x20000530

004053c8 <setlocale>:
  4053c8:	460a      	mov	r2, r1
  4053ca:	4903      	ldr	r1, [pc, #12]	; (4053d8 <setlocale+0x10>)
  4053cc:	4603      	mov	r3, r0
  4053ce:	6808      	ldr	r0, [r1, #0]
  4053d0:	4619      	mov	r1, r3
  4053d2:	f7ff bfc5 	b.w	405360 <_setlocale_r>
  4053d6:	bf00      	nop
  4053d8:	200000b8 	.word	0x200000b8

004053dc <localeconv>:
  4053dc:	4800      	ldr	r0, [pc, #0]	; (4053e0 <localeconv+0x4>)
  4053de:	4770      	bx	lr
  4053e0:	20000530 	.word	0x20000530

004053e4 <_malloc_r>:
  4053e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4053e8:	f101 040b 	add.w	r4, r1, #11
  4053ec:	2c16      	cmp	r4, #22
  4053ee:	4607      	mov	r7, r0
  4053f0:	d903      	bls.n	4053fa <_malloc_r+0x16>
  4053f2:	f034 0407 	bics.w	r4, r4, #7
  4053f6:	d501      	bpl.n	4053fc <_malloc_r+0x18>
  4053f8:	e002      	b.n	405400 <_malloc_r+0x1c>
  4053fa:	2410      	movs	r4, #16
  4053fc:	428c      	cmp	r4, r1
  4053fe:	d202      	bcs.n	405406 <_malloc_r+0x22>
  405400:	230c      	movs	r3, #12
  405402:	603b      	str	r3, [r7, #0]
  405404:	e1de      	b.n	4057c4 <_malloc_r+0x3e0>
  405406:	4638      	mov	r0, r7
  405408:	f000 fa1d 	bl	405846 <__malloc_lock>
  40540c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  405410:	4da3      	ldr	r5, [pc, #652]	; (4056a0 <_malloc_r+0x2bc>)
  405412:	d214      	bcs.n	40543e <_malloc_r+0x5a>
  405414:	08e2      	lsrs	r2, r4, #3
  405416:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  40541a:	68de      	ldr	r6, [r3, #12]
  40541c:	429e      	cmp	r6, r3
  40541e:	d106      	bne.n	40542e <_malloc_r+0x4a>
  405420:	f106 0308 	add.w	r3, r6, #8
  405424:	6976      	ldr	r6, [r6, #20]
  405426:	429e      	cmp	r6, r3
  405428:	bf08      	it	eq
  40542a:	3202      	addeq	r2, #2
  40542c:	d043      	beq.n	4054b6 <_malloc_r+0xd2>
  40542e:	6873      	ldr	r3, [r6, #4]
  405430:	68f2      	ldr	r2, [r6, #12]
  405432:	68b1      	ldr	r1, [r6, #8]
  405434:	f023 0303 	bic.w	r3, r3, #3
  405438:	60ca      	str	r2, [r1, #12]
  40543a:	6091      	str	r1, [r2, #8]
  40543c:	e05d      	b.n	4054fa <_malloc_r+0x116>
  40543e:	0a62      	lsrs	r2, r4, #9
  405440:	d01a      	beq.n	405478 <_malloc_r+0x94>
  405442:	2a04      	cmp	r2, #4
  405444:	d802      	bhi.n	40544c <_malloc_r+0x68>
  405446:	09a2      	lsrs	r2, r4, #6
  405448:	3238      	adds	r2, #56	; 0x38
  40544a:	e018      	b.n	40547e <_malloc_r+0x9a>
  40544c:	2a14      	cmp	r2, #20
  40544e:	d801      	bhi.n	405454 <_malloc_r+0x70>
  405450:	325b      	adds	r2, #91	; 0x5b
  405452:	e014      	b.n	40547e <_malloc_r+0x9a>
  405454:	2a54      	cmp	r2, #84	; 0x54
  405456:	d802      	bhi.n	40545e <_malloc_r+0x7a>
  405458:	0b22      	lsrs	r2, r4, #12
  40545a:	326e      	adds	r2, #110	; 0x6e
  40545c:	e00f      	b.n	40547e <_malloc_r+0x9a>
  40545e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405462:	d802      	bhi.n	40546a <_malloc_r+0x86>
  405464:	0be2      	lsrs	r2, r4, #15
  405466:	3277      	adds	r2, #119	; 0x77
  405468:	e009      	b.n	40547e <_malloc_r+0x9a>
  40546a:	f240 5354 	movw	r3, #1364	; 0x554
  40546e:	429a      	cmp	r2, r3
  405470:	d804      	bhi.n	40547c <_malloc_r+0x98>
  405472:	0ca2      	lsrs	r2, r4, #18
  405474:	327c      	adds	r2, #124	; 0x7c
  405476:	e002      	b.n	40547e <_malloc_r+0x9a>
  405478:	223f      	movs	r2, #63	; 0x3f
  40547a:	e000      	b.n	40547e <_malloc_r+0x9a>
  40547c:	227e      	movs	r2, #126	; 0x7e
  40547e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
  405482:	68de      	ldr	r6, [r3, #12]
  405484:	429e      	cmp	r6, r3
  405486:	d015      	beq.n	4054b4 <_malloc_r+0xd0>
  405488:	6871      	ldr	r1, [r6, #4]
  40548a:	f021 0103 	bic.w	r1, r1, #3
  40548e:	1b08      	subs	r0, r1, r4
  405490:	280f      	cmp	r0, #15
  405492:	dd01      	ble.n	405498 <_malloc_r+0xb4>
  405494:	3a01      	subs	r2, #1
  405496:	e00d      	b.n	4054b4 <_malloc_r+0xd0>
  405498:	2800      	cmp	r0, #0
  40549a:	db09      	blt.n	4054b0 <_malloc_r+0xcc>
  40549c:	68f3      	ldr	r3, [r6, #12]
  40549e:	68b2      	ldr	r2, [r6, #8]
  4054a0:	60d3      	str	r3, [r2, #12]
  4054a2:	609a      	str	r2, [r3, #8]
  4054a4:	1873      	adds	r3, r6, r1
  4054a6:	685a      	ldr	r2, [r3, #4]
  4054a8:	f042 0201 	orr.w	r2, r2, #1
  4054ac:	605a      	str	r2, [r3, #4]
  4054ae:	e194      	b.n	4057da <_malloc_r+0x3f6>
  4054b0:	68f6      	ldr	r6, [r6, #12]
  4054b2:	e7e7      	b.n	405484 <_malloc_r+0xa0>
  4054b4:	3201      	adds	r2, #1
  4054b6:	497a      	ldr	r1, [pc, #488]	; (4056a0 <_malloc_r+0x2bc>)
  4054b8:	692e      	ldr	r6, [r5, #16]
  4054ba:	f101 0008 	add.w	r0, r1, #8
  4054be:	4286      	cmp	r6, r0
  4054c0:	4686      	mov	lr, r0
  4054c2:	d06d      	beq.n	4055a0 <_malloc_r+0x1bc>
  4054c4:	6873      	ldr	r3, [r6, #4]
  4054c6:	f023 0303 	bic.w	r3, r3, #3
  4054ca:	ebc4 0c03 	rsb	ip, r4, r3
  4054ce:	f1bc 0f0f 	cmp.w	ip, #15
  4054d2:	dd0d      	ble.n	4054f0 <_malloc_r+0x10c>
  4054d4:	1933      	adds	r3, r6, r4
  4054d6:	f04c 0201 	orr.w	r2, ip, #1
  4054da:	f044 0401 	orr.w	r4, r4, #1
  4054de:	6074      	str	r4, [r6, #4]
  4054e0:	614b      	str	r3, [r1, #20]
  4054e2:	610b      	str	r3, [r1, #16]
  4054e4:	60d8      	str	r0, [r3, #12]
  4054e6:	6098      	str	r0, [r3, #8]
  4054e8:	605a      	str	r2, [r3, #4]
  4054ea:	f843 c00c 	str.w	ip, [r3, ip]
  4054ee:	e174      	b.n	4057da <_malloc_r+0x3f6>
  4054f0:	f1bc 0f00 	cmp.w	ip, #0
  4054f4:	6148      	str	r0, [r1, #20]
  4054f6:	6108      	str	r0, [r1, #16]
  4054f8:	db01      	blt.n	4054fe <_malloc_r+0x11a>
  4054fa:	4433      	add	r3, r6
  4054fc:	e7d3      	b.n	4054a6 <_malloc_r+0xc2>
  4054fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405502:	d211      	bcs.n	405528 <_malloc_r+0x144>
  405504:	08db      	lsrs	r3, r3, #3
  405506:	1098      	asrs	r0, r3, #2
  405508:	f04f 0c01 	mov.w	ip, #1
  40550c:	fa0c fc00 	lsl.w	ip, ip, r0
  405510:	6848      	ldr	r0, [r1, #4]
  405512:	ea4c 0000 	orr.w	r0, ip, r0
  405516:	6048      	str	r0, [r1, #4]
  405518:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  40551c:	688b      	ldr	r3, [r1, #8]
  40551e:	60f1      	str	r1, [r6, #12]
  405520:	60b3      	str	r3, [r6, #8]
  405522:	608e      	str	r6, [r1, #8]
  405524:	60de      	str	r6, [r3, #12]
  405526:	e03b      	b.n	4055a0 <_malloc_r+0x1bc>
  405528:	0a58      	lsrs	r0, r3, #9
  40552a:	2804      	cmp	r0, #4
  40552c:	d802      	bhi.n	405534 <_malloc_r+0x150>
  40552e:	0998      	lsrs	r0, r3, #6
  405530:	3038      	adds	r0, #56	; 0x38
  405532:	e015      	b.n	405560 <_malloc_r+0x17c>
  405534:	2814      	cmp	r0, #20
  405536:	d801      	bhi.n	40553c <_malloc_r+0x158>
  405538:	305b      	adds	r0, #91	; 0x5b
  40553a:	e011      	b.n	405560 <_malloc_r+0x17c>
  40553c:	2854      	cmp	r0, #84	; 0x54
  40553e:	d802      	bhi.n	405546 <_malloc_r+0x162>
  405540:	0b18      	lsrs	r0, r3, #12
  405542:	306e      	adds	r0, #110	; 0x6e
  405544:	e00c      	b.n	405560 <_malloc_r+0x17c>
  405546:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  40554a:	d802      	bhi.n	405552 <_malloc_r+0x16e>
  40554c:	0bd8      	lsrs	r0, r3, #15
  40554e:	3077      	adds	r0, #119	; 0x77
  405550:	e006      	b.n	405560 <_malloc_r+0x17c>
  405552:	f240 5154 	movw	r1, #1364	; 0x554
  405556:	4288      	cmp	r0, r1
  405558:	bf9a      	itte	ls
  40555a:	0c98      	lsrls	r0, r3, #18
  40555c:	307c      	addls	r0, #124	; 0x7c
  40555e:	207e      	movhi	r0, #126	; 0x7e
  405560:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
  405564:	f8dc 1008 	ldr.w	r1, [ip, #8]
  405568:	f8df 8134 	ldr.w	r8, [pc, #308]	; 4056a0 <_malloc_r+0x2bc>
  40556c:	4561      	cmp	r1, ip
  40556e:	d10d      	bne.n	40558c <_malloc_r+0x1a8>
  405570:	2301      	movs	r3, #1
  405572:	1080      	asrs	r0, r0, #2
  405574:	fa03 f000 	lsl.w	r0, r3, r0
  405578:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40557c:	4303      	orrs	r3, r0
  40557e:	f8c8 3004 	str.w	r3, [r8, #4]
  405582:	460b      	mov	r3, r1
  405584:	e008      	b.n	405598 <_malloc_r+0x1b4>
  405586:	6889      	ldr	r1, [r1, #8]
  405588:	4561      	cmp	r1, ip
  40558a:	d004      	beq.n	405596 <_malloc_r+0x1b2>
  40558c:	6848      	ldr	r0, [r1, #4]
  40558e:	f020 0003 	bic.w	r0, r0, #3
  405592:	4283      	cmp	r3, r0
  405594:	d3f7      	bcc.n	405586 <_malloc_r+0x1a2>
  405596:	68cb      	ldr	r3, [r1, #12]
  405598:	60f3      	str	r3, [r6, #12]
  40559a:	60b1      	str	r1, [r6, #8]
  40559c:	609e      	str	r6, [r3, #8]
  40559e:	60ce      	str	r6, [r1, #12]
  4055a0:	2101      	movs	r1, #1
  4055a2:	1093      	asrs	r3, r2, #2
  4055a4:	fa01 f303 	lsl.w	r3, r1, r3
  4055a8:	6869      	ldr	r1, [r5, #4]
  4055aa:	428b      	cmp	r3, r1
  4055ac:	d85d      	bhi.n	40566a <_malloc_r+0x286>
  4055ae:	420b      	tst	r3, r1
  4055b0:	d106      	bne.n	4055c0 <_malloc_r+0x1dc>
  4055b2:	f022 0203 	bic.w	r2, r2, #3
  4055b6:	005b      	lsls	r3, r3, #1
  4055b8:	420b      	tst	r3, r1
  4055ba:	f102 0204 	add.w	r2, r2, #4
  4055be:	d0fa      	beq.n	4055b6 <_malloc_r+0x1d2>
  4055c0:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
  4055c4:	4680      	mov	r8, r0
  4055c6:	4694      	mov	ip, r2
  4055c8:	f8d8 600c 	ldr.w	r6, [r8, #12]
  4055cc:	4546      	cmp	r6, r8
  4055ce:	d02d      	beq.n	40562c <_malloc_r+0x248>
  4055d0:	6871      	ldr	r1, [r6, #4]
  4055d2:	f021 0903 	bic.w	r9, r1, #3
  4055d6:	ebc4 0109 	rsb	r1, r4, r9
  4055da:	290f      	cmp	r1, #15
  4055dc:	dd13      	ble.n	405606 <_malloc_r+0x222>
  4055de:	1933      	adds	r3, r6, r4
  4055e0:	f044 0401 	orr.w	r4, r4, #1
  4055e4:	68f2      	ldr	r2, [r6, #12]
  4055e6:	6074      	str	r4, [r6, #4]
  4055e8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4055ec:	60c2      	str	r2, [r0, #12]
  4055ee:	6090      	str	r0, [r2, #8]
  4055f0:	f041 0201 	orr.w	r2, r1, #1
  4055f4:	616b      	str	r3, [r5, #20]
  4055f6:	612b      	str	r3, [r5, #16]
  4055f8:	f8c3 e00c 	str.w	lr, [r3, #12]
  4055fc:	f8c3 e008 	str.w	lr, [r3, #8]
  405600:	605a      	str	r2, [r3, #4]
  405602:	5059      	str	r1, [r3, r1]
  405604:	e00c      	b.n	405620 <_malloc_r+0x23c>
  405606:	2900      	cmp	r1, #0
  405608:	db0e      	blt.n	405628 <_malloc_r+0x244>
  40560a:	eb06 0109 	add.w	r1, r6, r9
  40560e:	684b      	ldr	r3, [r1, #4]
  405610:	f043 0301 	orr.w	r3, r3, #1
  405614:	604b      	str	r3, [r1, #4]
  405616:	68f3      	ldr	r3, [r6, #12]
  405618:	f856 2f08 	ldr.w	r2, [r6, #8]!
  40561c:	60d3      	str	r3, [r2, #12]
  40561e:	609a      	str	r2, [r3, #8]
  405620:	4638      	mov	r0, r7
  405622:	f000 f911 	bl	405848 <__malloc_unlock>
  405626:	e0dc      	b.n	4057e2 <_malloc_r+0x3fe>
  405628:	68f6      	ldr	r6, [r6, #12]
  40562a:	e7cf      	b.n	4055cc <_malloc_r+0x1e8>
  40562c:	f10c 0c01 	add.w	ip, ip, #1
  405630:	f01c 0f03 	tst.w	ip, #3
  405634:	f108 0808 	add.w	r8, r8, #8
  405638:	d1c6      	bne.n	4055c8 <_malloc_r+0x1e4>
  40563a:	0791      	lsls	r1, r2, #30
  40563c:	d104      	bne.n	405648 <_malloc_r+0x264>
  40563e:	686a      	ldr	r2, [r5, #4]
  405640:	ea22 0203 	bic.w	r2, r2, r3
  405644:	606a      	str	r2, [r5, #4]
  405646:	e005      	b.n	405654 <_malloc_r+0x270>
  405648:	f1a0 0108 	sub.w	r1, r0, #8
  40564c:	6800      	ldr	r0, [r0, #0]
  40564e:	3a01      	subs	r2, #1
  405650:	4288      	cmp	r0, r1
  405652:	d0f2      	beq.n	40563a <_malloc_r+0x256>
  405654:	6869      	ldr	r1, [r5, #4]
  405656:	005b      	lsls	r3, r3, #1
  405658:	428b      	cmp	r3, r1
  40565a:	d806      	bhi.n	40566a <_malloc_r+0x286>
  40565c:	b12b      	cbz	r3, 40566a <_malloc_r+0x286>
  40565e:	4662      	mov	r2, ip
  405660:	420b      	tst	r3, r1
  405662:	d1ad      	bne.n	4055c0 <_malloc_r+0x1dc>
  405664:	3204      	adds	r2, #4
  405666:	005b      	lsls	r3, r3, #1
  405668:	e7fa      	b.n	405660 <_malloc_r+0x27c>
  40566a:	f8d5 9008 	ldr.w	r9, [r5, #8]
  40566e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405672:	f023 0b03 	bic.w	fp, r3, #3
  405676:	45a3      	cmp	fp, r4
  405678:	d304      	bcc.n	405684 <_malloc_r+0x2a0>
  40567a:	ebc4 030b 	rsb	r3, r4, fp
  40567e:	2b0f      	cmp	r3, #15
  405680:	f300 80a2 	bgt.w	4057c8 <_malloc_r+0x3e4>
  405684:	4907      	ldr	r1, [pc, #28]	; (4056a4 <_malloc_r+0x2c0>)
  405686:	eb09 030b 	add.w	r3, r9, fp
  40568a:	680a      	ldr	r2, [r1, #0]
  40568c:	4688      	mov	r8, r1
  40568e:	eb04 0a02 	add.w	sl, r4, r2
  405692:	f8d5 2408 	ldr.w	r2, [r5, #1032]	; 0x408
  405696:	3201      	adds	r2, #1
  405698:	d106      	bne.n	4056a8 <_malloc_r+0x2c4>
  40569a:	f10a 0a10 	add.w	sl, sl, #16
  40569e:	e00b      	b.n	4056b8 <_malloc_r+0x2d4>
  4056a0:	20000568 	.word	0x20000568
  4056a4:	20000bd4 	.word	0x20000bd4
  4056a8:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  4056ac:	f10a 0a0f 	add.w	sl, sl, #15
  4056b0:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  4056b4:	f02a 0a0f 	bic.w	sl, sl, #15
  4056b8:	4638      	mov	r0, r7
  4056ba:	4651      	mov	r1, sl
  4056bc:	9301      	str	r3, [sp, #4]
  4056be:	f000 fe7b 	bl	4063b8 <_sbrk_r>
  4056c2:	1c42      	adds	r2, r0, #1
  4056c4:	4606      	mov	r6, r0
  4056c6:	9b01      	ldr	r3, [sp, #4]
  4056c8:	d06f      	beq.n	4057aa <_malloc_r+0x3c6>
  4056ca:	4298      	cmp	r0, r3
  4056cc:	d201      	bcs.n	4056d2 <_malloc_r+0x2ee>
  4056ce:	45a9      	cmp	r9, r5
  4056d0:	d16b      	bne.n	4057aa <_malloc_r+0x3c6>
  4056d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4056d6:	429e      	cmp	r6, r3
  4056d8:	4452      	add	r2, sl
  4056da:	f8c8 2004 	str.w	r2, [r8, #4]
  4056de:	d108      	bne.n	4056f2 <_malloc_r+0x30e>
  4056e0:	f3c6 010b 	ubfx	r1, r6, #0, #12
  4056e4:	b929      	cbnz	r1, 4056f2 <_malloc_r+0x30e>
  4056e6:	68ab      	ldr	r3, [r5, #8]
  4056e8:	44da      	add	sl, fp
  4056ea:	f04a 0201 	orr.w	r2, sl, #1
  4056ee:	605a      	str	r2, [r3, #4]
  4056f0:	e04d      	b.n	40578e <_malloc_r+0x3aa>
  4056f2:	f8d5 1408 	ldr.w	r1, [r5, #1032]	; 0x408
  4056f6:	3101      	adds	r1, #1
  4056f8:	d103      	bne.n	405702 <_malloc_r+0x31e>
  4056fa:	4b3c      	ldr	r3, [pc, #240]	; (4057ec <_malloc_r+0x408>)
  4056fc:	f8c3 6408 	str.w	r6, [r3, #1032]	; 0x408
  405700:	e003      	b.n	40570a <_malloc_r+0x326>
  405702:	1af3      	subs	r3, r6, r3
  405704:	441a      	add	r2, r3
  405706:	f8c8 2004 	str.w	r2, [r8, #4]
  40570a:	f016 0307 	ands.w	r3, r6, #7
  40570e:	bf1c      	itt	ne
  405710:	f1c3 0308 	rsbne	r3, r3, #8
  405714:	18f6      	addne	r6, r6, r3
  405716:	44b2      	add	sl, r6
  405718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40571c:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  405720:	ebca 0a03 	rsb	sl, sl, r3
  405724:	4651      	mov	r1, sl
  405726:	4638      	mov	r0, r7
  405728:	f000 fe46 	bl	4063b8 <_sbrk_r>
  40572c:	1c43      	adds	r3, r0, #1
  40572e:	bf04      	itt	eq
  405730:	4630      	moveq	r0, r6
  405732:	f04f 0a00 	moveq.w	sl, #0
  405736:	f8d8 3004 	ldr.w	r3, [r8, #4]
  40573a:	1b80      	subs	r0, r0, r6
  40573c:	4450      	add	r0, sl
  40573e:	4453      	add	r3, sl
  405740:	f040 0001 	orr.w	r0, r0, #1
  405744:	45a9      	cmp	r9, r5
  405746:	60ae      	str	r6, [r5, #8]
  405748:	f8c8 3004 	str.w	r3, [r8, #4]
  40574c:	6070      	str	r0, [r6, #4]
  40574e:	d01e      	beq.n	40578e <_malloc_r+0x3aa>
  405750:	f1bb 0f0f 	cmp.w	fp, #15
  405754:	d802      	bhi.n	40575c <_malloc_r+0x378>
  405756:	2301      	movs	r3, #1
  405758:	6073      	str	r3, [r6, #4]
  40575a:	e026      	b.n	4057aa <_malloc_r+0x3c6>
  40575c:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405760:	f1ab 0b0c 	sub.w	fp, fp, #12
  405764:	f02b 0b07 	bic.w	fp, fp, #7
  405768:	f003 0301 	and.w	r3, r3, #1
  40576c:	ea4b 0303 	orr.w	r3, fp, r3
  405770:	f8c9 3004 	str.w	r3, [r9, #4]
  405774:	2205      	movs	r2, #5
  405776:	eb09 030b 	add.w	r3, r9, fp
  40577a:	f1bb 0f0f 	cmp.w	fp, #15
  40577e:	605a      	str	r2, [r3, #4]
  405780:	609a      	str	r2, [r3, #8]
  405782:	d904      	bls.n	40578e <_malloc_r+0x3aa>
  405784:	4638      	mov	r0, r7
  405786:	f109 0108 	add.w	r1, r9, #8
  40578a:	f7ff fd31 	bl	4051f0 <_free_r>
  40578e:	f8d8 3004 	ldr.w	r3, [r8, #4]
  405792:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
  405796:	4293      	cmp	r3, r2
  405798:	bf84      	itt	hi
  40579a:	4a15      	ldrhi	r2, [pc, #84]	; (4057f0 <_malloc_r+0x40c>)
  40579c:	62d3      	strhi	r3, [r2, #44]	; 0x2c
  40579e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
  4057a2:	4293      	cmp	r3, r2
  4057a4:	bf84      	itt	hi
  4057a6:	4a12      	ldrhi	r2, [pc, #72]	; (4057f0 <_malloc_r+0x40c>)
  4057a8:	6313      	strhi	r3, [r2, #48]	; 0x30
  4057aa:	68ab      	ldr	r3, [r5, #8]
  4057ac:	685a      	ldr	r2, [r3, #4]
  4057ae:	f022 0203 	bic.w	r2, r2, #3
  4057b2:	42a2      	cmp	r2, r4
  4057b4:	ebc4 0302 	rsb	r3, r4, r2
  4057b8:	d301      	bcc.n	4057be <_malloc_r+0x3da>
  4057ba:	2b0f      	cmp	r3, #15
  4057bc:	dc04      	bgt.n	4057c8 <_malloc_r+0x3e4>
  4057be:	4638      	mov	r0, r7
  4057c0:	f000 f842 	bl	405848 <__malloc_unlock>
  4057c4:	2600      	movs	r6, #0
  4057c6:	e00c      	b.n	4057e2 <_malloc_r+0x3fe>
  4057c8:	68ae      	ldr	r6, [r5, #8]
  4057ca:	f044 0201 	orr.w	r2, r4, #1
  4057ce:	f043 0301 	orr.w	r3, r3, #1
  4057d2:	4434      	add	r4, r6
  4057d4:	6072      	str	r2, [r6, #4]
  4057d6:	60ac      	str	r4, [r5, #8]
  4057d8:	6063      	str	r3, [r4, #4]
  4057da:	4638      	mov	r0, r7
  4057dc:	f000 f834 	bl	405848 <__malloc_unlock>
  4057e0:	3608      	adds	r6, #8
  4057e2:	4630      	mov	r0, r6
  4057e4:	b003      	add	sp, #12
  4057e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057ea:	bf00      	nop
  4057ec:	20000568 	.word	0x20000568
  4057f0:	20000bd4 	.word	0x20000bd4

004057f4 <memchr>:
  4057f4:	b510      	push	{r4, lr}
  4057f6:	b2c9      	uxtb	r1, r1
  4057f8:	4402      	add	r2, r0
  4057fa:	4290      	cmp	r0, r2
  4057fc:	4603      	mov	r3, r0
  4057fe:	d005      	beq.n	40580c <memchr+0x18>
  405800:	781c      	ldrb	r4, [r3, #0]
  405802:	3001      	adds	r0, #1
  405804:	428c      	cmp	r4, r1
  405806:	d1f8      	bne.n	4057fa <memchr+0x6>
  405808:	4618      	mov	r0, r3
  40580a:	bd10      	pop	{r4, pc}
  40580c:	2000      	movs	r0, #0
  40580e:	bd10      	pop	{r4, pc}

00405810 <memmove>:
  405810:	4281      	cmp	r1, r0
  405812:	b570      	push	{r4, r5, r6, lr}
  405814:	d301      	bcc.n	40581a <memmove+0xa>
  405816:	2300      	movs	r3, #0
  405818:	e00e      	b.n	405838 <memmove+0x28>
  40581a:	188c      	adds	r4, r1, r2
  40581c:	42a0      	cmp	r0, r4
  40581e:	d2fa      	bcs.n	405816 <memmove+0x6>
  405820:	1885      	adds	r5, r0, r2
  405822:	4613      	mov	r3, r2
  405824:	f113 33ff 	adds.w	r3, r3, #4294967295
  405828:	d305      	bcc.n	405836 <memmove+0x26>
  40582a:	4251      	negs	r1, r2
  40582c:	1866      	adds	r6, r4, r1
  40582e:	5cf6      	ldrb	r6, [r6, r3]
  405830:	4429      	add	r1, r5
  405832:	54ce      	strb	r6, [r1, r3]
  405834:	e7f6      	b.n	405824 <memmove+0x14>
  405836:	bd70      	pop	{r4, r5, r6, pc}
  405838:	4293      	cmp	r3, r2
  40583a:	d003      	beq.n	405844 <memmove+0x34>
  40583c:	5ccc      	ldrb	r4, [r1, r3]
  40583e:	54c4      	strb	r4, [r0, r3]
  405840:	3301      	adds	r3, #1
  405842:	e7f9      	b.n	405838 <memmove+0x28>
  405844:	bd70      	pop	{r4, r5, r6, pc}

00405846 <__malloc_lock>:
  405846:	4770      	bx	lr

00405848 <__malloc_unlock>:
  405848:	4770      	bx	lr
	...

0040584c <_Balloc>:
  40584c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40584e:	b570      	push	{r4, r5, r6, lr}
  405850:	4605      	mov	r5, r0
  405852:	460c      	mov	r4, r1
  405854:	b13b      	cbz	r3, 405866 <_Balloc+0x1a>
  405856:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  405858:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  40585c:	b160      	cbz	r0, 405878 <_Balloc+0x2c>
  40585e:	6801      	ldr	r1, [r0, #0]
  405860:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  405864:	e014      	b.n	405890 <_Balloc+0x44>
  405866:	2104      	movs	r1, #4
  405868:	2221      	movs	r2, #33	; 0x21
  40586a:	f001 fa77 	bl	406d5c <_calloc_r>
  40586e:	64e8      	str	r0, [r5, #76]	; 0x4c
  405870:	2800      	cmp	r0, #0
  405872:	d1f0      	bne.n	405856 <_Balloc+0xa>
  405874:	2000      	movs	r0, #0
  405876:	bd70      	pop	{r4, r5, r6, pc}
  405878:	2101      	movs	r1, #1
  40587a:	fa01 f604 	lsl.w	r6, r1, r4
  40587e:	1d72      	adds	r2, r6, #5
  405880:	4628      	mov	r0, r5
  405882:	0092      	lsls	r2, r2, #2
  405884:	f001 fa6a 	bl	406d5c <_calloc_r>
  405888:	2800      	cmp	r0, #0
  40588a:	d0f3      	beq.n	405874 <_Balloc+0x28>
  40588c:	6044      	str	r4, [r0, #4]
  40588e:	6086      	str	r6, [r0, #8]
  405890:	2200      	movs	r2, #0
  405892:	6102      	str	r2, [r0, #16]
  405894:	60c2      	str	r2, [r0, #12]
  405896:	bd70      	pop	{r4, r5, r6, pc}

00405898 <_Bfree>:
  405898:	b131      	cbz	r1, 4058a8 <_Bfree+0x10>
  40589a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40589c:	684a      	ldr	r2, [r1, #4]
  40589e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4058a2:	6008      	str	r0, [r1, #0]
  4058a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4058a8:	4770      	bx	lr

004058aa <__multadd>:
  4058aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4058ae:	460c      	mov	r4, r1
  4058b0:	461e      	mov	r6, r3
  4058b2:	690d      	ldr	r5, [r1, #16]
  4058b4:	4607      	mov	r7, r0
  4058b6:	3114      	adds	r1, #20
  4058b8:	2300      	movs	r3, #0
  4058ba:	6808      	ldr	r0, [r1, #0]
  4058bc:	3301      	adds	r3, #1
  4058be:	fa1f fc80 	uxth.w	ip, r0
  4058c2:	0c00      	lsrs	r0, r0, #16
  4058c4:	fb02 6c0c 	mla	ip, r2, ip, r6
  4058c8:	4350      	muls	r0, r2
  4058ca:	eb00 401c 	add.w	r0, r0, ip, lsr #16
  4058ce:	fa1f fc8c 	uxth.w	ip, ip
  4058d2:	0c06      	lsrs	r6, r0, #16
  4058d4:	42ab      	cmp	r3, r5
  4058d6:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
  4058da:	f841 0b04 	str.w	r0, [r1], #4
  4058de:	dbec      	blt.n	4058ba <__multadd+0x10>
  4058e0:	b1d6      	cbz	r6, 405918 <__multadd+0x6e>
  4058e2:	68a3      	ldr	r3, [r4, #8]
  4058e4:	429d      	cmp	r5, r3
  4058e6:	db12      	blt.n	40590e <__multadd+0x64>
  4058e8:	6861      	ldr	r1, [r4, #4]
  4058ea:	4638      	mov	r0, r7
  4058ec:	3101      	adds	r1, #1
  4058ee:	f7ff ffad 	bl	40584c <_Balloc>
  4058f2:	6922      	ldr	r2, [r4, #16]
  4058f4:	f104 010c 	add.w	r1, r4, #12
  4058f8:	3202      	adds	r2, #2
  4058fa:	4680      	mov	r8, r0
  4058fc:	0092      	lsls	r2, r2, #2
  4058fe:	300c      	adds	r0, #12
  405900:	f7fd fd24 	bl	40334c <memcpy>
  405904:	4621      	mov	r1, r4
  405906:	4638      	mov	r0, r7
  405908:	f7ff ffc6 	bl	405898 <_Bfree>
  40590c:	4644      	mov	r4, r8
  40590e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
  405912:	3501      	adds	r5, #1
  405914:	615e      	str	r6, [r3, #20]
  405916:	6125      	str	r5, [r4, #16]
  405918:	4620      	mov	r0, r4
  40591a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040591e <__s2b>:
  40591e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405922:	4614      	mov	r4, r2
  405924:	4698      	mov	r8, r3
  405926:	f103 0208 	add.w	r2, r3, #8
  40592a:	2309      	movs	r3, #9
  40592c:	460d      	mov	r5, r1
  40592e:	fb92 f2f3 	sdiv	r2, r2, r3
  405932:	4606      	mov	r6, r0
  405934:	2301      	movs	r3, #1
  405936:	2100      	movs	r1, #0
  405938:	429a      	cmp	r2, r3
  40593a:	dd02      	ble.n	405942 <__s2b+0x24>
  40593c:	005b      	lsls	r3, r3, #1
  40593e:	3101      	adds	r1, #1
  405940:	e7fa      	b.n	405938 <__s2b+0x1a>
  405942:	4630      	mov	r0, r6
  405944:	f7ff ff82 	bl	40584c <_Balloc>
  405948:	9b08      	ldr	r3, [sp, #32]
  40594a:	2c09      	cmp	r4, #9
  40594c:	6143      	str	r3, [r0, #20]
  40594e:	f04f 0301 	mov.w	r3, #1
  405952:	4601      	mov	r1, r0
  405954:	6103      	str	r3, [r0, #16]
  405956:	dd11      	ble.n	40597c <__s2b+0x5e>
  405958:	f105 0909 	add.w	r9, r5, #9
  40595c:	464f      	mov	r7, r9
  40595e:	4425      	add	r5, r4
  405960:	f817 3b01 	ldrb.w	r3, [r7], #1
  405964:	4630      	mov	r0, r6
  405966:	220a      	movs	r2, #10
  405968:	3b30      	subs	r3, #48	; 0x30
  40596a:	f7ff ff9e 	bl	4058aa <__multadd>
  40596e:	42af      	cmp	r7, r5
  405970:	4601      	mov	r1, r0
  405972:	d1f5      	bne.n	405960 <__s2b+0x42>
  405974:	eb09 0704 	add.w	r7, r9, r4
  405978:	3f08      	subs	r7, #8
  40597a:	e002      	b.n	405982 <__s2b+0x64>
  40597c:	f105 070a 	add.w	r7, r5, #10
  405980:	2409      	movs	r4, #9
  405982:	4625      	mov	r5, r4
  405984:	4545      	cmp	r5, r8
  405986:	da09      	bge.n	40599c <__s2b+0x7e>
  405988:	1b3b      	subs	r3, r7, r4
  40598a:	5d5b      	ldrb	r3, [r3, r5]
  40598c:	4630      	mov	r0, r6
  40598e:	220a      	movs	r2, #10
  405990:	3b30      	subs	r3, #48	; 0x30
  405992:	f7ff ff8a 	bl	4058aa <__multadd>
  405996:	3501      	adds	r5, #1
  405998:	4601      	mov	r1, r0
  40599a:	e7f3      	b.n	405984 <__s2b+0x66>
  40599c:	4608      	mov	r0, r1
  40599e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

004059a2 <__hi0bits>:
  4059a2:	0c03      	lsrs	r3, r0, #16
  4059a4:	041b      	lsls	r3, r3, #16
  4059a6:	b913      	cbnz	r3, 4059ae <__hi0bits+0xc>
  4059a8:	0400      	lsls	r0, r0, #16
  4059aa:	2310      	movs	r3, #16
  4059ac:	e000      	b.n	4059b0 <__hi0bits+0xe>
  4059ae:	2300      	movs	r3, #0
  4059b0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4059b4:	bf04      	itt	eq
  4059b6:	0200      	lsleq	r0, r0, #8
  4059b8:	3308      	addeq	r3, #8
  4059ba:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4059be:	bf04      	itt	eq
  4059c0:	0100      	lsleq	r0, r0, #4
  4059c2:	3304      	addeq	r3, #4
  4059c4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4059c8:	bf04      	itt	eq
  4059ca:	0080      	lsleq	r0, r0, #2
  4059cc:	3302      	addeq	r3, #2
  4059ce:	2800      	cmp	r0, #0
  4059d0:	db03      	blt.n	4059da <__hi0bits+0x38>
  4059d2:	0042      	lsls	r2, r0, #1
  4059d4:	d503      	bpl.n	4059de <__hi0bits+0x3c>
  4059d6:	1c58      	adds	r0, r3, #1
  4059d8:	4770      	bx	lr
  4059da:	4618      	mov	r0, r3
  4059dc:	4770      	bx	lr
  4059de:	2020      	movs	r0, #32
  4059e0:	4770      	bx	lr

004059e2 <__lo0bits>:
  4059e2:	6803      	ldr	r3, [r0, #0]
  4059e4:	f013 0207 	ands.w	r2, r3, #7
  4059e8:	d00b      	beq.n	405a02 <__lo0bits+0x20>
  4059ea:	07d9      	lsls	r1, r3, #31
  4059ec:	d422      	bmi.n	405a34 <__lo0bits+0x52>
  4059ee:	079a      	lsls	r2, r3, #30
  4059f0:	d503      	bpl.n	4059fa <__lo0bits+0x18>
  4059f2:	085b      	lsrs	r3, r3, #1
  4059f4:	6003      	str	r3, [r0, #0]
  4059f6:	2001      	movs	r0, #1
  4059f8:	4770      	bx	lr
  4059fa:	089b      	lsrs	r3, r3, #2
  4059fc:	6003      	str	r3, [r0, #0]
  4059fe:	2002      	movs	r0, #2
  405a00:	4770      	bx	lr
  405a02:	b299      	uxth	r1, r3
  405a04:	b909      	cbnz	r1, 405a0a <__lo0bits+0x28>
  405a06:	0c1b      	lsrs	r3, r3, #16
  405a08:	2210      	movs	r2, #16
  405a0a:	f013 0fff 	tst.w	r3, #255	; 0xff
  405a0e:	bf04      	itt	eq
  405a10:	0a1b      	lsreq	r3, r3, #8
  405a12:	3208      	addeq	r2, #8
  405a14:	0719      	lsls	r1, r3, #28
  405a16:	bf04      	itt	eq
  405a18:	091b      	lsreq	r3, r3, #4
  405a1a:	3204      	addeq	r2, #4
  405a1c:	0799      	lsls	r1, r3, #30
  405a1e:	bf04      	itt	eq
  405a20:	089b      	lsreq	r3, r3, #2
  405a22:	3202      	addeq	r2, #2
  405a24:	07d9      	lsls	r1, r3, #31
  405a26:	d402      	bmi.n	405a2e <__lo0bits+0x4c>
  405a28:	085b      	lsrs	r3, r3, #1
  405a2a:	d005      	beq.n	405a38 <__lo0bits+0x56>
  405a2c:	3201      	adds	r2, #1
  405a2e:	6003      	str	r3, [r0, #0]
  405a30:	4610      	mov	r0, r2
  405a32:	4770      	bx	lr
  405a34:	2000      	movs	r0, #0
  405a36:	4770      	bx	lr
  405a38:	2020      	movs	r0, #32
  405a3a:	4770      	bx	lr

00405a3c <__i2b>:
  405a3c:	b510      	push	{r4, lr}
  405a3e:	460c      	mov	r4, r1
  405a40:	2101      	movs	r1, #1
  405a42:	f7ff ff03 	bl	40584c <_Balloc>
  405a46:	2201      	movs	r2, #1
  405a48:	6144      	str	r4, [r0, #20]
  405a4a:	6102      	str	r2, [r0, #16]
  405a4c:	bd10      	pop	{r4, pc}

00405a4e <__multiply>:
  405a4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405a52:	4616      	mov	r6, r2
  405a54:	6933      	ldr	r3, [r6, #16]
  405a56:	690a      	ldr	r2, [r1, #16]
  405a58:	b085      	sub	sp, #20
  405a5a:	429a      	cmp	r2, r3
  405a5c:	460d      	mov	r5, r1
  405a5e:	da01      	bge.n	405a64 <__multiply+0x16>
  405a60:	4635      	mov	r5, r6
  405a62:	460e      	mov	r6, r1
  405a64:	f8d5 8010 	ldr.w	r8, [r5, #16]
  405a68:	6937      	ldr	r7, [r6, #16]
  405a6a:	68ab      	ldr	r3, [r5, #8]
  405a6c:	6869      	ldr	r1, [r5, #4]
  405a6e:	eb08 0407 	add.w	r4, r8, r7
  405a72:	429c      	cmp	r4, r3
  405a74:	bfc8      	it	gt
  405a76:	3101      	addgt	r1, #1
  405a78:	f7ff fee8 	bl	40584c <_Balloc>
  405a7c:	f100 0314 	add.w	r3, r0, #20
  405a80:	eb03 0184 	add.w	r1, r3, r4, lsl #2
  405a84:	9101      	str	r1, [sp, #4]
  405a86:	461a      	mov	r2, r3
  405a88:	f8dd a004 	ldr.w	sl, [sp, #4]
  405a8c:	4552      	cmp	r2, sl
  405a8e:	d203      	bcs.n	405a98 <__multiply+0x4a>
  405a90:	2100      	movs	r1, #0
  405a92:	f842 1b04 	str.w	r1, [r2], #4
  405a96:	e7f7      	b.n	405a88 <__multiply+0x3a>
  405a98:	f105 0114 	add.w	r1, r5, #20
  405a9c:	f106 0214 	add.w	r2, r6, #20
  405aa0:	eb01 0888 	add.w	r8, r1, r8, lsl #2
  405aa4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
  405aa8:	f8cd 8008 	str.w	r8, [sp, #8]
  405aac:	9703      	str	r7, [sp, #12]
  405aae:	9e03      	ldr	r6, [sp, #12]
  405ab0:	4615      	mov	r5, r2
  405ab2:	42b2      	cmp	r2, r6
  405ab4:	d256      	bcs.n	405b64 <__multiply+0x116>
  405ab6:	f8b5 c000 	ldrh.w	ip, [r5]
  405aba:	3204      	adds	r2, #4
  405abc:	f1bc 0f00 	cmp.w	ip, #0
  405ac0:	d025      	beq.n	405b0e <__multiply+0xc0>
  405ac2:	460f      	mov	r7, r1
  405ac4:	461d      	mov	r5, r3
  405ac6:	2600      	movs	r6, #0
  405ac8:	f857 9b04 	ldr.w	r9, [r7], #4
  405acc:	f8d5 8000 	ldr.w	r8, [r5]
  405ad0:	fa1f fb89 	uxth.w	fp, r9
  405ad4:	fa1f fa88 	uxth.w	sl, r8
  405ad8:	fb0c aa0b 	mla	sl, ip, fp, sl
  405adc:	ea4f 4919 	mov.w	r9, r9, lsr #16
  405ae0:	ea4f 4818 	mov.w	r8, r8, lsr #16
  405ae4:	fb0c 8809 	mla	r8, ip, r9, r8
  405ae8:	44b2      	add	sl, r6
  405aea:	eb08 481a 	add.w	r8, r8, sl, lsr #16
  405aee:	fa1f fa8a 	uxth.w	sl, sl
  405af2:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
  405af6:	ea4f 4618 	mov.w	r6, r8, lsr #16
  405afa:	f8dd 8008 	ldr.w	r8, [sp, #8]
  405afe:	46ab      	mov	fp, r5
  405b00:	45b8      	cmp	r8, r7
  405b02:	f84b ab04 	str.w	sl, [fp], #4
  405b06:	d901      	bls.n	405b0c <__multiply+0xbe>
  405b08:	465d      	mov	r5, fp
  405b0a:	e7dd      	b.n	405ac8 <__multiply+0x7a>
  405b0c:	606e      	str	r6, [r5, #4]
  405b0e:	f832 8c02 	ldrh.w	r8, [r2, #-2]
  405b12:	f1b8 0f00 	cmp.w	r8, #0
  405b16:	d023      	beq.n	405b60 <__multiply+0x112>
  405b18:	681e      	ldr	r6, [r3, #0]
  405b1a:	460f      	mov	r7, r1
  405b1c:	461d      	mov	r5, r3
  405b1e:	f04f 0900 	mov.w	r9, #0
  405b22:	f8b7 a000 	ldrh.w	sl, [r7]
  405b26:	f8b5 c002 	ldrh.w	ip, [r5, #2]
  405b2a:	b2b6      	uxth	r6, r6
  405b2c:	fb08 cc0a 	mla	ip, r8, sl, ip
  405b30:	44e1      	add	r9, ip
  405b32:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
  405b36:	46ac      	mov	ip, r5
  405b38:	f84c 6b04 	str.w	r6, [ip], #4
  405b3c:	f857 6b04 	ldr.w	r6, [r7], #4
  405b40:	f8b5 a004 	ldrh.w	sl, [r5, #4]
  405b44:	0c36      	lsrs	r6, r6, #16
  405b46:	fb08 a606 	mla	r6, r8, r6, sl
  405b4a:	f8dd a008 	ldr.w	sl, [sp, #8]
  405b4e:	eb06 4619 	add.w	r6, r6, r9, lsr #16
  405b52:	4557      	cmp	r7, sl
  405b54:	ea4f 4916 	mov.w	r9, r6, lsr #16
  405b58:	d201      	bcs.n	405b5e <__multiply+0x110>
  405b5a:	4665      	mov	r5, ip
  405b5c:	e7e1      	b.n	405b22 <__multiply+0xd4>
  405b5e:	606e      	str	r6, [r5, #4]
  405b60:	3304      	adds	r3, #4
  405b62:	e7a4      	b.n	405aae <__multiply+0x60>
  405b64:	9b01      	ldr	r3, [sp, #4]
  405b66:	2c00      	cmp	r4, #0
  405b68:	dc03      	bgt.n	405b72 <__multiply+0x124>
  405b6a:	6104      	str	r4, [r0, #16]
  405b6c:	b005      	add	sp, #20
  405b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b72:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  405b76:	2a00      	cmp	r2, #0
  405b78:	d1f7      	bne.n	405b6a <__multiply+0x11c>
  405b7a:	3c01      	subs	r4, #1
  405b7c:	e7f3      	b.n	405b66 <__multiply+0x118>

00405b7e <__pow5mult>:
  405b7e:	f012 0303 	ands.w	r3, r2, #3
  405b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b86:	4605      	mov	r5, r0
  405b88:	460e      	mov	r6, r1
  405b8a:	4617      	mov	r7, r2
  405b8c:	d007      	beq.n	405b9e <__pow5mult+0x20>
  405b8e:	4a1a      	ldr	r2, [pc, #104]	; (405bf8 <__pow5mult+0x7a>)
  405b90:	3b01      	subs	r3, #1
  405b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  405b96:	2300      	movs	r3, #0
  405b98:	f7ff fe87 	bl	4058aa <__multadd>
  405b9c:	4606      	mov	r6, r0
  405b9e:	10bf      	asrs	r7, r7, #2
  405ba0:	d027      	beq.n	405bf2 <__pow5mult+0x74>
  405ba2:	6cac      	ldr	r4, [r5, #72]	; 0x48
  405ba4:	b974      	cbnz	r4, 405bc4 <__pow5mult+0x46>
  405ba6:	4628      	mov	r0, r5
  405ba8:	f240 2171 	movw	r1, #625	; 0x271
  405bac:	f7ff ff46 	bl	405a3c <__i2b>
  405bb0:	2300      	movs	r3, #0
  405bb2:	64a8      	str	r0, [r5, #72]	; 0x48
  405bb4:	4604      	mov	r4, r0
  405bb6:	6003      	str	r3, [r0, #0]
  405bb8:	e004      	b.n	405bc4 <__pow5mult+0x46>
  405bba:	107f      	asrs	r7, r7, #1
  405bbc:	d019      	beq.n	405bf2 <__pow5mult+0x74>
  405bbe:	6820      	ldr	r0, [r4, #0]
  405bc0:	b170      	cbz	r0, 405be0 <__pow5mult+0x62>
  405bc2:	4604      	mov	r4, r0
  405bc4:	07fb      	lsls	r3, r7, #31
  405bc6:	d5f8      	bpl.n	405bba <__pow5mult+0x3c>
  405bc8:	4631      	mov	r1, r6
  405bca:	4622      	mov	r2, r4
  405bcc:	4628      	mov	r0, r5
  405bce:	f7ff ff3e 	bl	405a4e <__multiply>
  405bd2:	4631      	mov	r1, r6
  405bd4:	4680      	mov	r8, r0
  405bd6:	4628      	mov	r0, r5
  405bd8:	f7ff fe5e 	bl	405898 <_Bfree>
  405bdc:	4646      	mov	r6, r8
  405bde:	e7ec      	b.n	405bba <__pow5mult+0x3c>
  405be0:	4628      	mov	r0, r5
  405be2:	4621      	mov	r1, r4
  405be4:	4622      	mov	r2, r4
  405be6:	f7ff ff32 	bl	405a4e <__multiply>
  405bea:	2300      	movs	r3, #0
  405bec:	6020      	str	r0, [r4, #0]
  405bee:	6003      	str	r3, [r0, #0]
  405bf0:	e7e7      	b.n	405bc2 <__pow5mult+0x44>
  405bf2:	4630      	mov	r0, r6
  405bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405bf8:	00407ee8 	.word	0x00407ee8

00405bfc <__lshift>:
  405bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405c00:	460c      	mov	r4, r1
  405c02:	6923      	ldr	r3, [r4, #16]
  405c04:	ea4f 1a62 	mov.w	sl, r2, asr #5
  405c08:	eb0a 0903 	add.w	r9, sl, r3
  405c0c:	6849      	ldr	r1, [r1, #4]
  405c0e:	68a3      	ldr	r3, [r4, #8]
  405c10:	4680      	mov	r8, r0
  405c12:	4615      	mov	r5, r2
  405c14:	f109 0701 	add.w	r7, r9, #1
  405c18:	429f      	cmp	r7, r3
  405c1a:	dd02      	ble.n	405c22 <__lshift+0x26>
  405c1c:	3101      	adds	r1, #1
  405c1e:	005b      	lsls	r3, r3, #1
  405c20:	e7fa      	b.n	405c18 <__lshift+0x1c>
  405c22:	4640      	mov	r0, r8
  405c24:	f7ff fe12 	bl	40584c <_Balloc>
  405c28:	2300      	movs	r3, #0
  405c2a:	4606      	mov	r6, r0
  405c2c:	f100 0214 	add.w	r2, r0, #20
  405c30:	4553      	cmp	r3, sl
  405c32:	da04      	bge.n	405c3e <__lshift+0x42>
  405c34:	2100      	movs	r1, #0
  405c36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  405c3a:	3301      	adds	r3, #1
  405c3c:	e7f8      	b.n	405c30 <__lshift+0x34>
  405c3e:	6920      	ldr	r0, [r4, #16]
  405c40:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
  405c44:	f104 0314 	add.w	r3, r4, #20
  405c48:	f015 0c1f 	ands.w	ip, r5, #31
  405c4c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  405c50:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
  405c54:	d016      	beq.n	405c84 <__lshift+0x88>
  405c56:	f1cc 0a20 	rsb	sl, ip, #32
  405c5a:	2500      	movs	r5, #0
  405c5c:	6818      	ldr	r0, [r3, #0]
  405c5e:	460a      	mov	r2, r1
  405c60:	fa00 f00c 	lsl.w	r0, r0, ip
  405c64:	4305      	orrs	r5, r0
  405c66:	f842 5b04 	str.w	r5, [r2], #4
  405c6a:	f853 5b04 	ldr.w	r5, [r3], #4
  405c6e:	4573      	cmp	r3, lr
  405c70:	fa25 f50a 	lsr.w	r5, r5, sl
  405c74:	d201      	bcs.n	405c7a <__lshift+0x7e>
  405c76:	4611      	mov	r1, r2
  405c78:	e7f0      	b.n	405c5c <__lshift+0x60>
  405c7a:	604d      	str	r5, [r1, #4]
  405c7c:	b145      	cbz	r5, 405c90 <__lshift+0x94>
  405c7e:	f109 0702 	add.w	r7, r9, #2
  405c82:	e005      	b.n	405c90 <__lshift+0x94>
  405c84:	f853 2b04 	ldr.w	r2, [r3], #4
  405c88:	4573      	cmp	r3, lr
  405c8a:	f841 2b04 	str.w	r2, [r1], #4
  405c8e:	d3f9      	bcc.n	405c84 <__lshift+0x88>
  405c90:	3f01      	subs	r7, #1
  405c92:	4640      	mov	r0, r8
  405c94:	6137      	str	r7, [r6, #16]
  405c96:	4621      	mov	r1, r4
  405c98:	f7ff fdfe 	bl	405898 <_Bfree>
  405c9c:	4630      	mov	r0, r6
  405c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00405ca2 <__mcmp>:
  405ca2:	6902      	ldr	r2, [r0, #16]
  405ca4:	690b      	ldr	r3, [r1, #16]
  405ca6:	b510      	push	{r4, lr}
  405ca8:	1ad2      	subs	r2, r2, r3
  405caa:	d113      	bne.n	405cd4 <__mcmp+0x32>
  405cac:	009c      	lsls	r4, r3, #2
  405cae:	3014      	adds	r0, #20
  405cb0:	f101 0214 	add.w	r2, r1, #20
  405cb4:	1903      	adds	r3, r0, r4
  405cb6:	4422      	add	r2, r4
  405cb8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405cbc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  405cc0:	428c      	cmp	r4, r1
  405cc2:	d003      	beq.n	405ccc <__mcmp+0x2a>
  405cc4:	d208      	bcs.n	405cd8 <__mcmp+0x36>
  405cc6:	f04f 30ff 	mov.w	r0, #4294967295
  405cca:	bd10      	pop	{r4, pc}
  405ccc:	4298      	cmp	r0, r3
  405cce:	d3f3      	bcc.n	405cb8 <__mcmp+0x16>
  405cd0:	2000      	movs	r0, #0
  405cd2:	bd10      	pop	{r4, pc}
  405cd4:	4610      	mov	r0, r2
  405cd6:	bd10      	pop	{r4, pc}
  405cd8:	2001      	movs	r0, #1
  405cda:	bd10      	pop	{r4, pc}

00405cdc <__mdiff>:
  405cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405ce0:	4606      	mov	r6, r0
  405ce2:	460c      	mov	r4, r1
  405ce4:	4608      	mov	r0, r1
  405ce6:	4611      	mov	r1, r2
  405ce8:	4615      	mov	r5, r2
  405cea:	f7ff ffda 	bl	405ca2 <__mcmp>
  405cee:	1e07      	subs	r7, r0, #0
  405cf0:	d108      	bne.n	405d04 <__mdiff+0x28>
  405cf2:	4630      	mov	r0, r6
  405cf4:	4639      	mov	r1, r7
  405cf6:	f7ff fda9 	bl	40584c <_Balloc>
  405cfa:	2301      	movs	r3, #1
  405cfc:	6103      	str	r3, [r0, #16]
  405cfe:	6147      	str	r7, [r0, #20]
  405d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d04:	db01      	blt.n	405d0a <__mdiff+0x2e>
  405d06:	2700      	movs	r7, #0
  405d08:	e003      	b.n	405d12 <__mdiff+0x36>
  405d0a:	4623      	mov	r3, r4
  405d0c:	2701      	movs	r7, #1
  405d0e:	462c      	mov	r4, r5
  405d10:	461d      	mov	r5, r3
  405d12:	6861      	ldr	r1, [r4, #4]
  405d14:	4630      	mov	r0, r6
  405d16:	f7ff fd99 	bl	40584c <_Balloc>
  405d1a:	6922      	ldr	r2, [r4, #16]
  405d1c:	692b      	ldr	r3, [r5, #16]
  405d1e:	3414      	adds	r4, #20
  405d20:	f105 0614 	add.w	r6, r5, #20
  405d24:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
  405d28:	60c7      	str	r7, [r0, #12]
  405d2a:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
  405d2e:	f100 0314 	add.w	r3, r0, #20
  405d32:	2100      	movs	r1, #0
  405d34:	f854 7b04 	ldr.w	r7, [r4], #4
  405d38:	f856 9b04 	ldr.w	r9, [r6], #4
  405d3c:	fa1f f887 	uxth.w	r8, r7
  405d40:	fa1f f589 	uxth.w	r5, r9
  405d44:	4441      	add	r1, r8
  405d46:	ea4f 4919 	mov.w	r9, r9, lsr #16
  405d4a:	ebc5 0801 	rsb	r8, r5, r1
  405d4e:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
  405d52:	eb07 4728 	add.w	r7, r7, r8, asr #16
  405d56:	fa1f f888 	uxth.w	r8, r8
  405d5a:	1439      	asrs	r1, r7, #16
  405d5c:	45b2      	cmp	sl, r6
  405d5e:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  405d62:	4625      	mov	r5, r4
  405d64:	f843 7b04 	str.w	r7, [r3], #4
  405d68:	d8e4      	bhi.n	405d34 <__mdiff+0x58>
  405d6a:	4565      	cmp	r5, ip
  405d6c:	d20d      	bcs.n	405d8a <__mdiff+0xae>
  405d6e:	f855 4b04 	ldr.w	r4, [r5], #4
  405d72:	b2a6      	uxth	r6, r4
  405d74:	440e      	add	r6, r1
  405d76:	0c24      	lsrs	r4, r4, #16
  405d78:	eb04 4426 	add.w	r4, r4, r6, asr #16
  405d7c:	b2b6      	uxth	r6, r6
  405d7e:	1421      	asrs	r1, r4, #16
  405d80:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
  405d84:	f843 4b04 	str.w	r4, [r3], #4
  405d88:	e7ef      	b.n	405d6a <__mdiff+0x8e>
  405d8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  405d8e:	b909      	cbnz	r1, 405d94 <__mdiff+0xb8>
  405d90:	3a01      	subs	r2, #1
  405d92:	e7fa      	b.n	405d8a <__mdiff+0xae>
  405d94:	6102      	str	r2, [r0, #16]
  405d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00405d9a <__ulp>:
  405d9a:	4b0f      	ldr	r3, [pc, #60]	; (405dd8 <__ulp+0x3e>)
  405d9c:	400b      	ands	r3, r1
  405d9e:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
  405da2:	2b00      	cmp	r3, #0
  405da4:	dd01      	ble.n	405daa <__ulp+0x10>
  405da6:	4619      	mov	r1, r3
  405da8:	e009      	b.n	405dbe <__ulp+0x24>
  405daa:	425b      	negs	r3, r3
  405dac:	151b      	asrs	r3, r3, #20
  405dae:	2b13      	cmp	r3, #19
  405db0:	f04f 0100 	mov.w	r1, #0
  405db4:	dc05      	bgt.n	405dc2 <__ulp+0x28>
  405db6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  405dba:	fa42 f103 	asr.w	r1, r2, r3
  405dbe:	2000      	movs	r0, #0
  405dc0:	4770      	bx	lr
  405dc2:	2b32      	cmp	r3, #50	; 0x32
  405dc4:	f04f 0201 	mov.w	r2, #1
  405dc8:	bfda      	itte	le
  405dca:	f1c3 0333 	rsble	r3, r3, #51	; 0x33
  405dce:	fa02 f303 	lslle.w	r3, r2, r3
  405dd2:	4613      	movgt	r3, r2
  405dd4:	4618      	mov	r0, r3
  405dd6:	4770      	bx	lr
  405dd8:	7ff00000 	.word	0x7ff00000

00405ddc <__b2d>:
  405ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405de0:	6906      	ldr	r6, [r0, #16]
  405de2:	f100 0714 	add.w	r7, r0, #20
  405de6:	eb07 0686 	add.w	r6, r7, r6, lsl #2
  405dea:	f856 4c04 	ldr.w	r4, [r6, #-4]
  405dee:	4688      	mov	r8, r1
  405df0:	4620      	mov	r0, r4
  405df2:	f7ff fdd6 	bl	4059a2 <__hi0bits>
  405df6:	f1c0 0320 	rsb	r3, r0, #32
  405dfa:	280a      	cmp	r0, #10
  405dfc:	f1a6 0504 	sub.w	r5, r6, #4
  405e00:	f8c8 3000 	str.w	r3, [r8]
  405e04:	dc14      	bgt.n	405e30 <__b2d+0x54>
  405e06:	42bd      	cmp	r5, r7
  405e08:	f1c0 010b 	rsb	r1, r0, #11
  405e0c:	bf88      	it	hi
  405e0e:	f856 5c08 	ldrhi.w	r5, [r6, #-8]
  405e12:	fa24 fc01 	lsr.w	ip, r4, r1
  405e16:	bf98      	it	ls
  405e18:	2500      	movls	r5, #0
  405e1a:	3015      	adds	r0, #21
  405e1c:	fa25 f101 	lsr.w	r1, r5, r1
  405e20:	4084      	lsls	r4, r0
  405e22:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
  405e26:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  405e2a:	ea41 0204 	orr.w	r2, r1, r4
  405e2e:	e024      	b.n	405e7a <__b2d+0x9e>
  405e30:	42bd      	cmp	r5, r7
  405e32:	bf86      	itte	hi
  405e34:	f1a6 0508 	subhi.w	r5, r6, #8
  405e38:	f856 1c08 	ldrhi.w	r1, [r6, #-8]
  405e3c:	2100      	movls	r1, #0
  405e3e:	f1b0 060b 	subs.w	r6, r0, #11
  405e42:	d015      	beq.n	405e70 <__b2d+0x94>
  405e44:	40b4      	lsls	r4, r6
  405e46:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
  405e4a:	fa21 fc00 	lsr.w	ip, r1, r0
  405e4e:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
  405e52:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
  405e56:	42bd      	cmp	r5, r7
  405e58:	ea44 030c 	orr.w	r3, r4, ip
  405e5c:	bf8c      	ite	hi
  405e5e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
  405e62:	2400      	movls	r4, #0
  405e64:	fa24 f000 	lsr.w	r0, r4, r0
  405e68:	40b1      	lsls	r1, r6
  405e6a:	ea40 0201 	orr.w	r2, r0, r1
  405e6e:	e004      	b.n	405e7a <__b2d+0x9e>
  405e70:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
  405e74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
  405e78:	460a      	mov	r2, r1
  405e7a:	4610      	mov	r0, r2
  405e7c:	4619      	mov	r1, r3
  405e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405e82 <__d2b>:
  405e82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  405e86:	2101      	movs	r1, #1
  405e88:	461d      	mov	r5, r3
  405e8a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  405e8e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  405e92:	4614      	mov	r4, r2
  405e94:	f7ff fcda 	bl	40584c <_Balloc>
  405e98:	f3c5 570a 	ubfx	r7, r5, #20, #11
  405e9c:	4606      	mov	r6, r0
  405e9e:	f3c5 0313 	ubfx	r3, r5, #0, #20
  405ea2:	b10f      	cbz	r7, 405ea8 <__d2b+0x26>
  405ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405ea8:	9301      	str	r3, [sp, #4]
  405eaa:	b1d4      	cbz	r4, 405ee2 <__d2b+0x60>
  405eac:	a802      	add	r0, sp, #8
  405eae:	f840 4d08 	str.w	r4, [r0, #-8]!
  405eb2:	4668      	mov	r0, sp
  405eb4:	f7ff fd95 	bl	4059e2 <__lo0bits>
  405eb8:	9b00      	ldr	r3, [sp, #0]
  405eba:	b148      	cbz	r0, 405ed0 <__d2b+0x4e>
  405ebc:	9a01      	ldr	r2, [sp, #4]
  405ebe:	f1c0 0120 	rsb	r1, r0, #32
  405ec2:	fa02 f101 	lsl.w	r1, r2, r1
  405ec6:	40c2      	lsrs	r2, r0
  405ec8:	430b      	orrs	r3, r1
  405eca:	6173      	str	r3, [r6, #20]
  405ecc:	9201      	str	r2, [sp, #4]
  405ece:	e000      	b.n	405ed2 <__d2b+0x50>
  405ed0:	6173      	str	r3, [r6, #20]
  405ed2:	9b01      	ldr	r3, [sp, #4]
  405ed4:	2b00      	cmp	r3, #0
  405ed6:	bf0c      	ite	eq
  405ed8:	2401      	moveq	r4, #1
  405eda:	2402      	movne	r4, #2
  405edc:	61b3      	str	r3, [r6, #24]
  405ede:	6134      	str	r4, [r6, #16]
  405ee0:	e007      	b.n	405ef2 <__d2b+0x70>
  405ee2:	a801      	add	r0, sp, #4
  405ee4:	f7ff fd7d 	bl	4059e2 <__lo0bits>
  405ee8:	9b01      	ldr	r3, [sp, #4]
  405eea:	2401      	movs	r4, #1
  405eec:	6173      	str	r3, [r6, #20]
  405eee:	6134      	str	r4, [r6, #16]
  405ef0:	3020      	adds	r0, #32
  405ef2:	b13f      	cbz	r7, 405f04 <__d2b+0x82>
  405ef4:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405ef8:	4407      	add	r7, r0
  405efa:	f8c9 7000 	str.w	r7, [r9]
  405efe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  405f02:	e00a      	b.n	405f1a <__d2b+0x98>
  405f04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  405f08:	eb06 0384 	add.w	r3, r6, r4, lsl #2
  405f0c:	f8c9 0000 	str.w	r0, [r9]
  405f10:	6918      	ldr	r0, [r3, #16]
  405f12:	f7ff fd46 	bl	4059a2 <__hi0bits>
  405f16:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  405f1a:	f8c8 0000 	str.w	r0, [r8]
  405f1e:	4630      	mov	r0, r6
  405f20:	b003      	add	sp, #12
  405f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00405f26 <__ratio>:
  405f26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  405f2a:	460e      	mov	r6, r1
  405f2c:	4669      	mov	r1, sp
  405f2e:	4680      	mov	r8, r0
  405f30:	f7ff ff54 	bl	405ddc <__b2d>
  405f34:	460d      	mov	r5, r1
  405f36:	4604      	mov	r4, r0
  405f38:	a901      	add	r1, sp, #4
  405f3a:	4630      	mov	r0, r6
  405f3c:	f7ff ff4e 	bl	405ddc <__b2d>
  405f40:	9f00      	ldr	r7, [sp, #0]
  405f42:	460b      	mov	r3, r1
  405f44:	9901      	ldr	r1, [sp, #4]
  405f46:	4602      	mov	r2, r0
  405f48:	1a7f      	subs	r7, r7, r1
  405f4a:	f8d8 0010 	ldr.w	r0, [r8, #16]
  405f4e:	6931      	ldr	r1, [r6, #16]
  405f50:	1a41      	subs	r1, r0, r1
  405f52:	eb07 1141 	add.w	r1, r7, r1, lsl #5
  405f56:	2900      	cmp	r1, #0
  405f58:	bfcc      	ite	gt
  405f5a:	eb05 5501 	addgt.w	r5, r5, r1, lsl #20
  405f5e:	eba3 5301 	suble.w	r3, r3, r1, lsl #20
  405f62:	4620      	mov	r0, r4
  405f64:	4629      	mov	r1, r5
  405f66:	f001 fa09 	bl	40737c <__aeabi_ddiv>
  405f6a:	b002      	add	sp, #8
  405f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405f70 <_mprec_log10>:
  405f70:	2817      	cmp	r0, #23
  405f72:	b510      	push	{r4, lr}
  405f74:	4604      	mov	r4, r0
  405f76:	dc05      	bgt.n	405f84 <_mprec_log10+0x14>
  405f78:	4b07      	ldr	r3, [pc, #28]	; (405f98 <_mprec_log10+0x28>)
  405f7a:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
  405f7e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  405f82:	bd10      	pop	{r4, pc}
  405f84:	4905      	ldr	r1, [pc, #20]	; (405f9c <_mprec_log10+0x2c>)
  405f86:	2000      	movs	r0, #0
  405f88:	2200      	movs	r2, #0
  405f8a:	4b05      	ldr	r3, [pc, #20]	; (405fa0 <_mprec_log10+0x30>)
  405f8c:	f001 f8cc 	bl	407128 <__aeabi_dmul>
  405f90:	3c01      	subs	r4, #1
  405f92:	d1f9      	bne.n	405f88 <_mprec_log10+0x18>
  405f94:	bd10      	pop	{r4, pc}
  405f96:	bf00      	nop
  405f98:	00407ee8 	.word	0x00407ee8
  405f9c:	3ff00000 	.word	0x3ff00000
  405fa0:	40240000 	.word	0x40240000

00405fa4 <__copybits>:
  405fa4:	b510      	push	{r4, lr}
  405fa6:	3901      	subs	r1, #1
  405fa8:	f102 0314 	add.w	r3, r2, #20
  405fac:	1149      	asrs	r1, r1, #5
  405fae:	6912      	ldr	r2, [r2, #16]
  405fb0:	3101      	adds	r1, #1
  405fb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  405fb6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  405fba:	4293      	cmp	r3, r2
  405fbc:	d204      	bcs.n	405fc8 <__copybits+0x24>
  405fbe:	f853 4b04 	ldr.w	r4, [r3], #4
  405fc2:	f840 4b04 	str.w	r4, [r0], #4
  405fc6:	e7f8      	b.n	405fba <__copybits+0x16>
  405fc8:	4288      	cmp	r0, r1
  405fca:	d203      	bcs.n	405fd4 <__copybits+0x30>
  405fcc:	2300      	movs	r3, #0
  405fce:	f840 3b04 	str.w	r3, [r0], #4
  405fd2:	e7f9      	b.n	405fc8 <__copybits+0x24>
  405fd4:	bd10      	pop	{r4, pc}

00405fd6 <__any_on>:
  405fd6:	f100 0214 	add.w	r2, r0, #20
  405fda:	6900      	ldr	r0, [r0, #16]
  405fdc:	114b      	asrs	r3, r1, #5
  405fde:	4283      	cmp	r3, r0
  405fe0:	b510      	push	{r4, lr}
  405fe2:	dc0c      	bgt.n	405ffe <__any_on+0x28>
  405fe4:	da0c      	bge.n	406000 <__any_on+0x2a>
  405fe6:	f011 011f 	ands.w	r1, r1, #31
  405fea:	d009      	beq.n	406000 <__any_on+0x2a>
  405fec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
  405ff0:	fa20 f401 	lsr.w	r4, r0, r1
  405ff4:	fa04 f101 	lsl.w	r1, r4, r1
  405ff8:	4281      	cmp	r1, r0
  405ffa:	d10e      	bne.n	40601a <__any_on+0x44>
  405ffc:	e000      	b.n	406000 <__any_on+0x2a>
  405ffe:	4603      	mov	r3, r0
  406000:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  406004:	4293      	cmp	r3, r2
  406006:	4619      	mov	r1, r3
  406008:	d905      	bls.n	406016 <__any_on+0x40>
  40600a:	f851 1c04 	ldr.w	r1, [r1, #-4]
  40600e:	3b04      	subs	r3, #4
  406010:	2900      	cmp	r1, #0
  406012:	d0f7      	beq.n	406004 <__any_on+0x2e>
  406014:	e001      	b.n	40601a <__any_on+0x44>
  406016:	2000      	movs	r0, #0
  406018:	bd10      	pop	{r4, pc}
  40601a:	2001      	movs	r0, #1
  40601c:	bd10      	pop	{r4, pc}
  40601e:	bf00      	nop

00406020 <_realloc_r>:
  406020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406024:	4681      	mov	r9, r0
  406026:	460c      	mov	r4, r1
  406028:	b929      	cbnz	r1, 406036 <_realloc_r+0x16>
  40602a:	4611      	mov	r1, r2
  40602c:	b003      	add	sp, #12
  40602e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406032:	f7ff b9d7 	b.w	4053e4 <_malloc_r>
  406036:	9201      	str	r2, [sp, #4]
  406038:	f7ff fc05 	bl	405846 <__malloc_lock>
  40603c:	9a01      	ldr	r2, [sp, #4]
  40603e:	f854 5c04 	ldr.w	r5, [r4, #-4]
  406042:	f102 070b 	add.w	r7, r2, #11
  406046:	2f16      	cmp	r7, #22
  406048:	f1a4 0808 	sub.w	r8, r4, #8
  40604c:	f025 0603 	bic.w	r6, r5, #3
  406050:	d903      	bls.n	40605a <_realloc_r+0x3a>
  406052:	f037 0707 	bics.w	r7, r7, #7
  406056:	d501      	bpl.n	40605c <_realloc_r+0x3c>
  406058:	e002      	b.n	406060 <_realloc_r+0x40>
  40605a:	2710      	movs	r7, #16
  40605c:	4297      	cmp	r7, r2
  40605e:	d204      	bcs.n	40606a <_realloc_r+0x4a>
  406060:	230c      	movs	r3, #12
  406062:	f8c9 3000 	str.w	r3, [r9]
  406066:	2000      	movs	r0, #0
  406068:	e180      	b.n	40636c <_realloc_r+0x34c>
  40606a:	42be      	cmp	r6, r7
  40606c:	f280 8156 	bge.w	40631c <_realloc_r+0x2fc>
  406070:	49a3      	ldr	r1, [pc, #652]	; (406300 <_realloc_r+0x2e0>)
  406072:	eb08 0306 	add.w	r3, r8, r6
  406076:	f8d1 e008 	ldr.w	lr, [r1, #8]
  40607a:	468b      	mov	fp, r1
  40607c:	4573      	cmp	r3, lr
  40607e:	6858      	ldr	r0, [r3, #4]
  406080:	d005      	beq.n	40608e <_realloc_r+0x6e>
  406082:	f020 0101 	bic.w	r1, r0, #1
  406086:	4419      	add	r1, r3
  406088:	6849      	ldr	r1, [r1, #4]
  40608a:	07c9      	lsls	r1, r1, #31
  40608c:	d425      	bmi.n	4060da <_realloc_r+0xba>
  40608e:	f020 0003 	bic.w	r0, r0, #3
  406092:	4573      	cmp	r3, lr
  406094:	eb00 0106 	add.w	r1, r0, r6
  406098:	d117      	bne.n	4060ca <_realloc_r+0xaa>
  40609a:	f107 0c10 	add.w	ip, r7, #16
  40609e:	4561      	cmp	r1, ip
  4060a0:	db1d      	blt.n	4060de <_realloc_r+0xbe>
  4060a2:	1bc9      	subs	r1, r1, r7
  4060a4:	eb08 0507 	add.w	r5, r8, r7
  4060a8:	f041 0101 	orr.w	r1, r1, #1
  4060ac:	f8cb 5008 	str.w	r5, [fp, #8]
  4060b0:	6069      	str	r1, [r5, #4]
  4060b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4060b6:	4648      	mov	r0, r9
  4060b8:	f003 0301 	and.w	r3, r3, #1
  4060bc:	431f      	orrs	r7, r3
  4060be:	f844 7c04 	str.w	r7, [r4, #-4]
  4060c2:	f7ff fbc1 	bl	405848 <__malloc_unlock>
  4060c6:	4620      	mov	r0, r4
  4060c8:	e150      	b.n	40636c <_realloc_r+0x34c>
  4060ca:	42b9      	cmp	r1, r7
  4060cc:	db07      	blt.n	4060de <_realloc_r+0xbe>
  4060ce:	68da      	ldr	r2, [r3, #12]
  4060d0:	689b      	ldr	r3, [r3, #8]
  4060d2:	460e      	mov	r6, r1
  4060d4:	60da      	str	r2, [r3, #12]
  4060d6:	6093      	str	r3, [r2, #8]
  4060d8:	e120      	b.n	40631c <_realloc_r+0x2fc>
  4060da:	2000      	movs	r0, #0
  4060dc:	4603      	mov	r3, r0
  4060de:	07e9      	lsls	r1, r5, #31
  4060e0:	f100 80cb 	bmi.w	40627a <_realloc_r+0x25a>
  4060e4:	f854 5c08 	ldr.w	r5, [r4, #-8]
  4060e8:	ebc5 0508 	rsb	r5, r5, r8
  4060ec:	6869      	ldr	r1, [r5, #4]
  4060ee:	f021 0103 	bic.w	r1, r1, #3
  4060f2:	eb01 0a06 	add.w	sl, r1, r6
  4060f6:	2b00      	cmp	r3, #0
  4060f8:	f000 808a 	beq.w	406210 <_realloc_r+0x1f0>
  4060fc:	4573      	cmp	r3, lr
  4060fe:	d14d      	bne.n	40619c <_realloc_r+0x17c>
  406100:	eb0a 0300 	add.w	r3, sl, r0
  406104:	f107 0110 	add.w	r1, r7, #16
  406108:	428b      	cmp	r3, r1
  40610a:	f2c0 8081 	blt.w	406210 <_realloc_r+0x1f0>
  40610e:	46a8      	mov	r8, r5
  406110:	68ea      	ldr	r2, [r5, #12]
  406112:	f858 1f08 	ldr.w	r1, [r8, #8]!
  406116:	60ca      	str	r2, [r1, #12]
  406118:	6091      	str	r1, [r2, #8]
  40611a:	1f32      	subs	r2, r6, #4
  40611c:	2a24      	cmp	r2, #36	; 0x24
  40611e:	d826      	bhi.n	40616e <_realloc_r+0x14e>
  406120:	2a13      	cmp	r2, #19
  406122:	d91c      	bls.n	40615e <_realloc_r+0x13e>
  406124:	6821      	ldr	r1, [r4, #0]
  406126:	2a1b      	cmp	r2, #27
  406128:	60a9      	str	r1, [r5, #8]
  40612a:	6861      	ldr	r1, [r4, #4]
  40612c:	60e9      	str	r1, [r5, #12]
  40612e:	d803      	bhi.n	406138 <_realloc_r+0x118>
  406130:	f105 0210 	add.w	r2, r5, #16
  406134:	3408      	adds	r4, #8
  406136:	e013      	b.n	406160 <_realloc_r+0x140>
  406138:	68a1      	ldr	r1, [r4, #8]
  40613a:	2a24      	cmp	r2, #36	; 0x24
  40613c:	6129      	str	r1, [r5, #16]
  40613e:	68e1      	ldr	r1, [r4, #12]
  406140:	6169      	str	r1, [r5, #20]
  406142:	d003      	beq.n	40614c <_realloc_r+0x12c>
  406144:	f105 0218 	add.w	r2, r5, #24
  406148:	3410      	adds	r4, #16
  40614a:	e009      	b.n	406160 <_realloc_r+0x140>
  40614c:	6922      	ldr	r2, [r4, #16]
  40614e:	3418      	adds	r4, #24
  406150:	61aa      	str	r2, [r5, #24]
  406152:	f854 1c04 	ldr.w	r1, [r4, #-4]
  406156:	f105 0220 	add.w	r2, r5, #32
  40615a:	61e9      	str	r1, [r5, #28]
  40615c:	e000      	b.n	406160 <_realloc_r+0x140>
  40615e:	4642      	mov	r2, r8
  406160:	6821      	ldr	r1, [r4, #0]
  406162:	6011      	str	r1, [r2, #0]
  406164:	6861      	ldr	r1, [r4, #4]
  406166:	6051      	str	r1, [r2, #4]
  406168:	68a1      	ldr	r1, [r4, #8]
  40616a:	6091      	str	r1, [r2, #8]
  40616c:	e005      	b.n	40617a <_realloc_r+0x15a>
  40616e:	4640      	mov	r0, r8
  406170:	4621      	mov	r1, r4
  406172:	9301      	str	r3, [sp, #4]
  406174:	f7ff fb4c 	bl	405810 <memmove>
  406178:	9b01      	ldr	r3, [sp, #4]
  40617a:	1bdb      	subs	r3, r3, r7
  40617c:	19ea      	adds	r2, r5, r7
  40617e:	f043 0301 	orr.w	r3, r3, #1
  406182:	f8cb 2008 	str.w	r2, [fp, #8]
  406186:	6053      	str	r3, [r2, #4]
  406188:	686b      	ldr	r3, [r5, #4]
  40618a:	4648      	mov	r0, r9
  40618c:	f003 0301 	and.w	r3, r3, #1
  406190:	431f      	orrs	r7, r3
  406192:	606f      	str	r7, [r5, #4]
  406194:	f7ff fb58 	bl	405848 <__malloc_unlock>
  406198:	4640      	mov	r0, r8
  40619a:	e0e7      	b.n	40636c <_realloc_r+0x34c>
  40619c:	eb0a 0b00 	add.w	fp, sl, r0
  4061a0:	45bb      	cmp	fp, r7
  4061a2:	db35      	blt.n	406210 <_realloc_r+0x1f0>
  4061a4:	68da      	ldr	r2, [r3, #12]
  4061a6:	689b      	ldr	r3, [r3, #8]
  4061a8:	4628      	mov	r0, r5
  4061aa:	60da      	str	r2, [r3, #12]
  4061ac:	6093      	str	r3, [r2, #8]
  4061ae:	f850 2f08 	ldr.w	r2, [r0, #8]!
  4061b2:	68eb      	ldr	r3, [r5, #12]
  4061b4:	60d3      	str	r3, [r2, #12]
  4061b6:	609a      	str	r2, [r3, #8]
  4061b8:	1f32      	subs	r2, r6, #4
  4061ba:	2a24      	cmp	r2, #36	; 0x24
  4061bc:	d823      	bhi.n	406206 <_realloc_r+0x1e6>
  4061be:	2a13      	cmp	r2, #19
  4061c0:	d91a      	bls.n	4061f8 <_realloc_r+0x1d8>
  4061c2:	6823      	ldr	r3, [r4, #0]
  4061c4:	2a1b      	cmp	r2, #27
  4061c6:	60ab      	str	r3, [r5, #8]
  4061c8:	6863      	ldr	r3, [r4, #4]
  4061ca:	60eb      	str	r3, [r5, #12]
  4061cc:	d803      	bhi.n	4061d6 <_realloc_r+0x1b6>
  4061ce:	f105 0010 	add.w	r0, r5, #16
  4061d2:	3408      	adds	r4, #8
  4061d4:	e010      	b.n	4061f8 <_realloc_r+0x1d8>
  4061d6:	68a3      	ldr	r3, [r4, #8]
  4061d8:	2a24      	cmp	r2, #36	; 0x24
  4061da:	612b      	str	r3, [r5, #16]
  4061dc:	68e3      	ldr	r3, [r4, #12]
  4061de:	616b      	str	r3, [r5, #20]
  4061e0:	d003      	beq.n	4061ea <_realloc_r+0x1ca>
  4061e2:	f105 0018 	add.w	r0, r5, #24
  4061e6:	3410      	adds	r4, #16
  4061e8:	e006      	b.n	4061f8 <_realloc_r+0x1d8>
  4061ea:	6923      	ldr	r3, [r4, #16]
  4061ec:	f105 0020 	add.w	r0, r5, #32
  4061f0:	61ab      	str	r3, [r5, #24]
  4061f2:	6963      	ldr	r3, [r4, #20]
  4061f4:	3418      	adds	r4, #24
  4061f6:	61eb      	str	r3, [r5, #28]
  4061f8:	6823      	ldr	r3, [r4, #0]
  4061fa:	6003      	str	r3, [r0, #0]
  4061fc:	6863      	ldr	r3, [r4, #4]
  4061fe:	6043      	str	r3, [r0, #4]
  406200:	68a3      	ldr	r3, [r4, #8]
  406202:	6083      	str	r3, [r0, #8]
  406204:	e002      	b.n	40620c <_realloc_r+0x1ec>
  406206:	4621      	mov	r1, r4
  406208:	f7ff fb02 	bl	405810 <memmove>
  40620c:	465e      	mov	r6, fp
  40620e:	e02e      	b.n	40626e <_realloc_r+0x24e>
  406210:	45ba      	cmp	sl, r7
  406212:	db32      	blt.n	40627a <_realloc_r+0x25a>
  406214:	4628      	mov	r0, r5
  406216:	f850 2f08 	ldr.w	r2, [r0, #8]!
  40621a:	68eb      	ldr	r3, [r5, #12]
  40621c:	60d3      	str	r3, [r2, #12]
  40621e:	609a      	str	r2, [r3, #8]
  406220:	1f32      	subs	r2, r6, #4
  406222:	2a24      	cmp	r2, #36	; 0x24
  406224:	d825      	bhi.n	406272 <_realloc_r+0x252>
  406226:	2a13      	cmp	r2, #19
  406228:	d91a      	bls.n	406260 <_realloc_r+0x240>
  40622a:	6823      	ldr	r3, [r4, #0]
  40622c:	2a1b      	cmp	r2, #27
  40622e:	60ab      	str	r3, [r5, #8]
  406230:	6863      	ldr	r3, [r4, #4]
  406232:	60eb      	str	r3, [r5, #12]
  406234:	d803      	bhi.n	40623e <_realloc_r+0x21e>
  406236:	f105 0010 	add.w	r0, r5, #16
  40623a:	3408      	adds	r4, #8
  40623c:	e010      	b.n	406260 <_realloc_r+0x240>
  40623e:	68a3      	ldr	r3, [r4, #8]
  406240:	2a24      	cmp	r2, #36	; 0x24
  406242:	612b      	str	r3, [r5, #16]
  406244:	68e3      	ldr	r3, [r4, #12]
  406246:	616b      	str	r3, [r5, #20]
  406248:	d003      	beq.n	406252 <_realloc_r+0x232>
  40624a:	f105 0018 	add.w	r0, r5, #24
  40624e:	3410      	adds	r4, #16
  406250:	e006      	b.n	406260 <_realloc_r+0x240>
  406252:	6923      	ldr	r3, [r4, #16]
  406254:	f105 0020 	add.w	r0, r5, #32
  406258:	61ab      	str	r3, [r5, #24]
  40625a:	6963      	ldr	r3, [r4, #20]
  40625c:	3418      	adds	r4, #24
  40625e:	61eb      	str	r3, [r5, #28]
  406260:	6823      	ldr	r3, [r4, #0]
  406262:	6003      	str	r3, [r0, #0]
  406264:	6863      	ldr	r3, [r4, #4]
  406266:	6043      	str	r3, [r0, #4]
  406268:	68a3      	ldr	r3, [r4, #8]
  40626a:	6083      	str	r3, [r0, #8]
  40626c:	4656      	mov	r6, sl
  40626e:	46a8      	mov	r8, r5
  406270:	e054      	b.n	40631c <_realloc_r+0x2fc>
  406272:	4621      	mov	r1, r4
  406274:	f7ff facc 	bl	405810 <memmove>
  406278:	e7f8      	b.n	40626c <_realloc_r+0x24c>
  40627a:	4648      	mov	r0, r9
  40627c:	4611      	mov	r1, r2
  40627e:	f7ff f8b1 	bl	4053e4 <_malloc_r>
  406282:	4605      	mov	r5, r0
  406284:	2800      	cmp	r0, #0
  406286:	d044      	beq.n	406312 <_realloc_r+0x2f2>
  406288:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40628c:	f1a0 0208 	sub.w	r2, r0, #8
  406290:	f023 0301 	bic.w	r3, r3, #1
  406294:	4443      	add	r3, r8
  406296:	429a      	cmp	r2, r3
  406298:	d105      	bne.n	4062a6 <_realloc_r+0x286>
  40629a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40629e:	f023 0303 	bic.w	r3, r3, #3
  4062a2:	441e      	add	r6, r3
  4062a4:	e03a      	b.n	40631c <_realloc_r+0x2fc>
  4062a6:	1f32      	subs	r2, r6, #4
  4062a8:	2a24      	cmp	r2, #36	; 0x24
  4062aa:	d82b      	bhi.n	406304 <_realloc_r+0x2e4>
  4062ac:	2a13      	cmp	r2, #19
  4062ae:	d91e      	bls.n	4062ee <_realloc_r+0x2ce>
  4062b0:	6823      	ldr	r3, [r4, #0]
  4062b2:	2a1b      	cmp	r2, #27
  4062b4:	6003      	str	r3, [r0, #0]
  4062b6:	6863      	ldr	r3, [r4, #4]
  4062b8:	6043      	str	r3, [r0, #4]
  4062ba:	d804      	bhi.n	4062c6 <_realloc_r+0x2a6>
  4062bc:	f100 0308 	add.w	r3, r0, #8
  4062c0:	f104 0208 	add.w	r2, r4, #8
  4062c4:	e015      	b.n	4062f2 <_realloc_r+0x2d2>
  4062c6:	68a3      	ldr	r3, [r4, #8]
  4062c8:	2a24      	cmp	r2, #36	; 0x24
  4062ca:	6083      	str	r3, [r0, #8]
  4062cc:	68e3      	ldr	r3, [r4, #12]
  4062ce:	60c3      	str	r3, [r0, #12]
  4062d0:	d004      	beq.n	4062dc <_realloc_r+0x2bc>
  4062d2:	f100 0310 	add.w	r3, r0, #16
  4062d6:	f104 0210 	add.w	r2, r4, #16
  4062da:	e00a      	b.n	4062f2 <_realloc_r+0x2d2>
  4062dc:	6923      	ldr	r3, [r4, #16]
  4062de:	f104 0218 	add.w	r2, r4, #24
  4062e2:	6103      	str	r3, [r0, #16]
  4062e4:	6961      	ldr	r1, [r4, #20]
  4062e6:	f100 0318 	add.w	r3, r0, #24
  4062ea:	6141      	str	r1, [r0, #20]
  4062ec:	e001      	b.n	4062f2 <_realloc_r+0x2d2>
  4062ee:	4603      	mov	r3, r0
  4062f0:	4622      	mov	r2, r4
  4062f2:	6811      	ldr	r1, [r2, #0]
  4062f4:	6019      	str	r1, [r3, #0]
  4062f6:	6851      	ldr	r1, [r2, #4]
  4062f8:	6059      	str	r1, [r3, #4]
  4062fa:	6892      	ldr	r2, [r2, #8]
  4062fc:	609a      	str	r2, [r3, #8]
  4062fe:	e004      	b.n	40630a <_realloc_r+0x2ea>
  406300:	20000568 	.word	0x20000568
  406304:	4621      	mov	r1, r4
  406306:	f7ff fa83 	bl	405810 <memmove>
  40630a:	4648      	mov	r0, r9
  40630c:	4621      	mov	r1, r4
  40630e:	f7fe ff6f 	bl	4051f0 <_free_r>
  406312:	4648      	mov	r0, r9
  406314:	f7ff fa98 	bl	405848 <__malloc_unlock>
  406318:	4628      	mov	r0, r5
  40631a:	e027      	b.n	40636c <_realloc_r+0x34c>
  40631c:	1bf3      	subs	r3, r6, r7
  40631e:	2b0f      	cmp	r3, #15
  406320:	f8d8 2004 	ldr.w	r2, [r8, #4]
  406324:	d913      	bls.n	40634e <_realloc_r+0x32e>
  406326:	f002 0201 	and.w	r2, r2, #1
  40632a:	eb08 0107 	add.w	r1, r8, r7
  40632e:	4317      	orrs	r7, r2
  406330:	f043 0201 	orr.w	r2, r3, #1
  406334:	f8c8 7004 	str.w	r7, [r8, #4]
  406338:	440b      	add	r3, r1
  40633a:	604a      	str	r2, [r1, #4]
  40633c:	685a      	ldr	r2, [r3, #4]
  40633e:	4648      	mov	r0, r9
  406340:	f042 0201 	orr.w	r2, r2, #1
  406344:	605a      	str	r2, [r3, #4]
  406346:	3108      	adds	r1, #8
  406348:	f7fe ff52 	bl	4051f0 <_free_r>
  40634c:	e009      	b.n	406362 <_realloc_r+0x342>
  40634e:	f002 0201 	and.w	r2, r2, #1
  406352:	4332      	orrs	r2, r6
  406354:	f8c8 2004 	str.w	r2, [r8, #4]
  406358:	4446      	add	r6, r8
  40635a:	6873      	ldr	r3, [r6, #4]
  40635c:	f043 0301 	orr.w	r3, r3, #1
  406360:	6073      	str	r3, [r6, #4]
  406362:	4648      	mov	r0, r9
  406364:	f7ff fa70 	bl	405848 <__malloc_unlock>
  406368:	f108 0008 	add.w	r0, r8, #8
  40636c:	b003      	add	sp, #12
  40636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406372:	bf00      	nop

00406374 <__fpclassifyd>:
  406374:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406378:	b510      	push	{r4, lr}
  40637a:	d100      	bne.n	40637e <__fpclassifyd+0xa>
  40637c:	b178      	cbz	r0, 40639e <__fpclassifyd+0x2a>
  40637e:	4a0c      	ldr	r2, [pc, #48]	; (4063b0 <__fpclassifyd+0x3c>)
  406380:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  406384:	4294      	cmp	r4, r2
  406386:	d90c      	bls.n	4063a2 <__fpclassifyd+0x2e>
  406388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  40638c:	d30b      	bcc.n	4063a6 <__fpclassifyd+0x32>
  40638e:	4a09      	ldr	r2, [pc, #36]	; (4063b4 <__fpclassifyd+0x40>)
  406390:	4293      	cmp	r3, r2
  406392:	d10a      	bne.n	4063aa <__fpclassifyd+0x36>
  406394:	f1d0 0001 	rsbs	r0, r0, #1
  406398:	bf38      	it	cc
  40639a:	2000      	movcc	r0, #0
  40639c:	bd10      	pop	{r4, pc}
  40639e:	2002      	movs	r0, #2
  4063a0:	bd10      	pop	{r4, pc}
  4063a2:	2004      	movs	r0, #4
  4063a4:	bd10      	pop	{r4, pc}
  4063a6:	2003      	movs	r0, #3
  4063a8:	bd10      	pop	{r4, pc}
  4063aa:	2000      	movs	r0, #0
  4063ac:	bd10      	pop	{r4, pc}
  4063ae:	bf00      	nop
  4063b0:	7fdfffff 	.word	0x7fdfffff
  4063b4:	7ff00000 	.word	0x7ff00000

004063b8 <_sbrk_r>:
  4063b8:	b538      	push	{r3, r4, r5, lr}
  4063ba:	4c06      	ldr	r4, [pc, #24]	; (4063d4 <_sbrk_r+0x1c>)
  4063bc:	2300      	movs	r3, #0
  4063be:	4605      	mov	r5, r0
  4063c0:	4608      	mov	r0, r1
  4063c2:	6023      	str	r3, [r4, #0]
  4063c4:	f7fc ff60 	bl	403288 <_sbrk>
  4063c8:	1c43      	adds	r3, r0, #1
  4063ca:	d102      	bne.n	4063d2 <_sbrk_r+0x1a>
  4063cc:	6823      	ldr	r3, [r4, #0]
  4063ce:	b103      	cbz	r3, 4063d2 <_sbrk_r+0x1a>
  4063d0:	602b      	str	r3, [r5, #0]
  4063d2:	bd38      	pop	{r3, r4, r5, pc}
  4063d4:	20000c54 	.word	0x20000c54

004063d8 <strcmp>:
  4063d8:	f810 2b01 	ldrb.w	r2, [r0], #1
  4063dc:	f811 3b01 	ldrb.w	r3, [r1], #1
  4063e0:	2a01      	cmp	r2, #1
  4063e2:	bf28      	it	cs
  4063e4:	429a      	cmpcs	r2, r3
  4063e6:	d0f7      	beq.n	4063d8 <strcmp>
  4063e8:	1ad0      	subs	r0, r2, r3
  4063ea:	4770      	bx	lr

004063ec <__ssprint_r>:
  4063ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4063f0:	4680      	mov	r8, r0
  4063f2:	6890      	ldr	r0, [r2, #8]
  4063f4:	460c      	mov	r4, r1
  4063f6:	4615      	mov	r5, r2
  4063f8:	f8d2 9000 	ldr.w	r9, [r2]
  4063fc:	b118      	cbz	r0, 406406 <__ssprint_r+0x1a>
  4063fe:	2300      	movs	r3, #0
  406400:	9301      	str	r3, [sp, #4]
  406402:	461e      	mov	r6, r3
  406404:	e008      	b.n	406418 <__ssprint_r+0x2c>
  406406:	6050      	str	r0, [r2, #4]
  406408:	e066      	b.n	4064d8 <__ssprint_r+0xec>
  40640a:	f8d9 3000 	ldr.w	r3, [r9]
  40640e:	f8d9 6004 	ldr.w	r6, [r9, #4]
  406412:	9301      	str	r3, [sp, #4]
  406414:	f109 0908 	add.w	r9, r9, #8
  406418:	2e00      	cmp	r6, #0
  40641a:	d0f6      	beq.n	40640a <__ssprint_r+0x1e>
  40641c:	68a7      	ldr	r7, [r4, #8]
  40641e:	42be      	cmp	r6, r7
  406420:	d347      	bcc.n	4064b2 <__ssprint_r+0xc6>
  406422:	89a2      	ldrh	r2, [r4, #12]
  406424:	f412 6f90 	tst.w	r2, #1152	; 0x480
  406428:	d041      	beq.n	4064ae <__ssprint_r+0xc2>
  40642a:	6823      	ldr	r3, [r4, #0]
  40642c:	6921      	ldr	r1, [r4, #16]
  40642e:	2002      	movs	r0, #2
  406430:	ebc1 0a03 	rsb	sl, r1, r3
  406434:	6963      	ldr	r3, [r4, #20]
  406436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40643a:	fb93 fbf0 	sdiv	fp, r3, r0
  40643e:	f10a 0001 	add.w	r0, sl, #1
  406442:	4430      	add	r0, r6
  406444:	4583      	cmp	fp, r0
  406446:	bf38      	it	cc
  406448:	4683      	movcc	fp, r0
  40644a:	0553      	lsls	r3, r2, #21
  40644c:	4640      	mov	r0, r8
  40644e:	d50f      	bpl.n	406470 <__ssprint_r+0x84>
  406450:	4659      	mov	r1, fp
  406452:	f7fe ffc7 	bl	4053e4 <_malloc_r>
  406456:	4607      	mov	r7, r0
  406458:	b198      	cbz	r0, 406482 <__ssprint_r+0x96>
  40645a:	4652      	mov	r2, sl
  40645c:	6921      	ldr	r1, [r4, #16]
  40645e:	f7fc ff75 	bl	40334c <memcpy>
  406462:	89a2      	ldrh	r2, [r4, #12]
  406464:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406468:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40646c:	81a2      	strh	r2, [r4, #12]
  40646e:	e015      	b.n	40649c <__ssprint_r+0xb0>
  406470:	465a      	mov	r2, fp
  406472:	f7ff fdd5 	bl	406020 <_realloc_r>
  406476:	4607      	mov	r7, r0
  406478:	b980      	cbnz	r0, 40649c <__ssprint_r+0xb0>
  40647a:	4640      	mov	r0, r8
  40647c:	6921      	ldr	r1, [r4, #16]
  40647e:	f7fe feb7 	bl	4051f0 <_free_r>
  406482:	230c      	movs	r3, #12
  406484:	f8c8 3000 	str.w	r3, [r8]
  406488:	89a3      	ldrh	r3, [r4, #12]
  40648a:	f04f 30ff 	mov.w	r0, #4294967295
  40648e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406492:	81a3      	strh	r3, [r4, #12]
  406494:	2300      	movs	r3, #0
  406496:	60ab      	str	r3, [r5, #8]
  406498:	606b      	str	r3, [r5, #4]
  40649a:	e01d      	b.n	4064d8 <__ssprint_r+0xec>
  40649c:	6127      	str	r7, [r4, #16]
  40649e:	ebca 030b 	rsb	r3, sl, fp
  4064a2:	4457      	add	r7, sl
  4064a4:	6027      	str	r7, [r4, #0]
  4064a6:	f8c4 b014 	str.w	fp, [r4, #20]
  4064aa:	4637      	mov	r7, r6
  4064ac:	60a3      	str	r3, [r4, #8]
  4064ae:	42be      	cmp	r6, r7
  4064b0:	d200      	bcs.n	4064b4 <__ssprint_r+0xc8>
  4064b2:	4637      	mov	r7, r6
  4064b4:	463a      	mov	r2, r7
  4064b6:	6820      	ldr	r0, [r4, #0]
  4064b8:	9901      	ldr	r1, [sp, #4]
  4064ba:	f7ff f9a9 	bl	405810 <memmove>
  4064be:	68a3      	ldr	r3, [r4, #8]
  4064c0:	1bdb      	subs	r3, r3, r7
  4064c2:	60a3      	str	r3, [r4, #8]
  4064c4:	6823      	ldr	r3, [r4, #0]
  4064c6:	441f      	add	r7, r3
  4064c8:	68ab      	ldr	r3, [r5, #8]
  4064ca:	6027      	str	r7, [r4, #0]
  4064cc:	1b9e      	subs	r6, r3, r6
  4064ce:	60ae      	str	r6, [r5, #8]
  4064d0:	2e00      	cmp	r6, #0
  4064d2:	d19a      	bne.n	40640a <__ssprint_r+0x1e>
  4064d4:	606e      	str	r6, [r5, #4]
  4064d6:	4630      	mov	r0, r6
  4064d8:	b003      	add	sp, #12
  4064da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004064de <_svfiprintf_r>:
  4064de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4064e2:	461e      	mov	r6, r3
  4064e4:	898b      	ldrh	r3, [r1, #12]
  4064e6:	b0ad      	sub	sp, #180	; 0xb4
  4064e8:	4688      	mov	r8, r1
  4064ea:	0619      	lsls	r1, r3, #24
  4064ec:	4683      	mov	fp, r0
  4064ee:	9202      	str	r2, [sp, #8]
  4064f0:	d513      	bpl.n	40651a <_svfiprintf_r+0x3c>
  4064f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4064f6:	b983      	cbnz	r3, 40651a <_svfiprintf_r+0x3c>
  4064f8:	2140      	movs	r1, #64	; 0x40
  4064fa:	f7fe ff73 	bl	4053e4 <_malloc_r>
  4064fe:	f8c8 0000 	str.w	r0, [r8]
  406502:	f8c8 0010 	str.w	r0, [r8, #16]
  406506:	b928      	cbnz	r0, 406514 <_svfiprintf_r+0x36>
  406508:	230c      	movs	r3, #12
  40650a:	f8cb 3000 	str.w	r3, [fp]
  40650e:	f04f 30ff 	mov.w	r0, #4294967295
  406512:	e3d4      	b.n	406cbe <_svfiprintf_r+0x7e0>
  406514:	2340      	movs	r3, #64	; 0x40
  406516:	f8c8 3014 	str.w	r3, [r8, #20]
  40651a:	2300      	movs	r3, #0
  40651c:	aa1c      	add	r2, sp, #112	; 0x70
  40651e:	920f      	str	r2, [sp, #60]	; 0x3c
  406520:	9311      	str	r3, [sp, #68]	; 0x44
  406522:	9310      	str	r3, [sp, #64]	; 0x40
  406524:	4694      	mov	ip, r2
  406526:	930a      	str	r3, [sp, #40]	; 0x28
  406528:	9305      	str	r3, [sp, #20]
  40652a:	9b02      	ldr	r3, [sp, #8]
  40652c:	461c      	mov	r4, r3
  40652e:	f813 2b01 	ldrb.w	r2, [r3], #1
  406532:	b91a      	cbnz	r2, 40653c <_svfiprintf_r+0x5e>
  406534:	9802      	ldr	r0, [sp, #8]
  406536:	1a25      	subs	r5, r4, r0
  406538:	d103      	bne.n	406542 <_svfiprintf_r+0x64>
  40653a:	e01d      	b.n	406578 <_svfiprintf_r+0x9a>
  40653c:	2a25      	cmp	r2, #37	; 0x25
  40653e:	d1f5      	bne.n	40652c <_svfiprintf_r+0x4e>
  406540:	e7f8      	b.n	406534 <_svfiprintf_r+0x56>
  406542:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406544:	9902      	ldr	r1, [sp, #8]
  406546:	442b      	add	r3, r5
  406548:	9311      	str	r3, [sp, #68]	; 0x44
  40654a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40654c:	e88c 0022 	stmia.w	ip, {r1, r5}
  406550:	3301      	adds	r3, #1
  406552:	2b07      	cmp	r3, #7
  406554:	9310      	str	r3, [sp, #64]	; 0x40
  406556:	dc02      	bgt.n	40655e <_svfiprintf_r+0x80>
  406558:	f10c 0c08 	add.w	ip, ip, #8
  40655c:	e009      	b.n	406572 <_svfiprintf_r+0x94>
  40655e:	4658      	mov	r0, fp
  406560:	4641      	mov	r1, r8
  406562:	aa0f      	add	r2, sp, #60	; 0x3c
  406564:	f7ff ff42 	bl	4063ec <__ssprint_r>
  406568:	2800      	cmp	r0, #0
  40656a:	f040 83a0 	bne.w	406cae <_svfiprintf_r+0x7d0>
  40656e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406572:	9a05      	ldr	r2, [sp, #20]
  406574:	442a      	add	r2, r5
  406576:	9205      	str	r2, [sp, #20]
  406578:	7823      	ldrb	r3, [r4, #0]
  40657a:	2b00      	cmp	r3, #0
  40657c:	f000 8390 	beq.w	406ca0 <_svfiprintf_r+0x7c2>
  406580:	2200      	movs	r2, #0
  406582:	3401      	adds	r4, #1
  406584:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406588:	f04f 3aff 	mov.w	sl, #4294967295
  40658c:	9204      	str	r2, [sp, #16]
  40658e:	4617      	mov	r7, r2
  406590:	1c65      	adds	r5, r4, #1
  406592:	7823      	ldrb	r3, [r4, #0]
  406594:	9502      	str	r5, [sp, #8]
  406596:	2b58      	cmp	r3, #88	; 0x58
  406598:	d064      	beq.n	406664 <_svfiprintf_r+0x186>
  40659a:	dc2d      	bgt.n	4065f8 <_svfiprintf_r+0x11a>
  40659c:	2b2e      	cmp	r3, #46	; 0x2e
  40659e:	d076      	beq.n	40668e <_svfiprintf_r+0x1b0>
  4065a0:	dc12      	bgt.n	4065c8 <_svfiprintf_r+0xea>
  4065a2:	2b2a      	cmp	r3, #42	; 0x2a
  4065a4:	d066      	beq.n	406674 <_svfiprintf_r+0x196>
  4065a6:	dc08      	bgt.n	4065ba <_svfiprintf_r+0xdc>
  4065a8:	2b20      	cmp	r3, #32
  4065aa:	d05f      	beq.n	40666c <_svfiprintf_r+0x18e>
  4065ac:	2b23      	cmp	r3, #35	; 0x23
  4065ae:	f040 8201 	bne.w	4069b4 <_svfiprintf_r+0x4d6>
  4065b2:	f047 0701 	orr.w	r7, r7, #1
  4065b6:	9c02      	ldr	r4, [sp, #8]
  4065b8:	e7ea      	b.n	406590 <_svfiprintf_r+0xb2>
  4065ba:	2b2b      	cmp	r3, #43	; 0x2b
  4065bc:	d101      	bne.n	4065c2 <_svfiprintf_r+0xe4>
  4065be:	461a      	mov	r2, r3
  4065c0:	e7f9      	b.n	4065b6 <_svfiprintf_r+0xd8>
  4065c2:	2b2d      	cmp	r3, #45	; 0x2d
  4065c4:	d060      	beq.n	406688 <_svfiprintf_r+0x1aa>
  4065c6:	e1f5      	b.n	4069b4 <_svfiprintf_r+0x4d6>
  4065c8:	2b39      	cmp	r3, #57	; 0x39
  4065ca:	dc07      	bgt.n	4065dc <_svfiprintf_r+0xfe>
  4065cc:	2b31      	cmp	r3, #49	; 0x31
  4065ce:	da7f      	bge.n	4066d0 <_svfiprintf_r+0x1f2>
  4065d0:	2b30      	cmp	r3, #48	; 0x30
  4065d2:	f040 81ef 	bne.w	4069b4 <_svfiprintf_r+0x4d6>
  4065d6:	f047 0780 	orr.w	r7, r7, #128	; 0x80
  4065da:	e7ec      	b.n	4065b6 <_svfiprintf_r+0xd8>
  4065dc:	2b4f      	cmp	r3, #79	; 0x4f
  4065de:	f000 80e0 	beq.w	4067a2 <_svfiprintf_r+0x2c4>
  4065e2:	2b55      	cmp	r3, #85	; 0x55
  4065e4:	f000 8120 	beq.w	406828 <_svfiprintf_r+0x34a>
  4065e8:	2b44      	cmp	r3, #68	; 0x44
  4065ea:	f040 81e3 	bne.w	4069b4 <_svfiprintf_r+0x4d6>
  4065ee:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4065f2:	f047 0710 	orr.w	r7, r7, #16
  4065f6:	e094      	b.n	406722 <_svfiprintf_r+0x244>
  4065f8:	2b6e      	cmp	r3, #110	; 0x6e
  4065fa:	f000 80b6 	beq.w	40676a <_svfiprintf_r+0x28c>
  4065fe:	dc0d      	bgt.n	40661c <_svfiprintf_r+0x13e>
  406600:	2b68      	cmp	r3, #104	; 0x68
  406602:	d076      	beq.n	4066f2 <_svfiprintf_r+0x214>
  406604:	dc05      	bgt.n	406612 <_svfiprintf_r+0x134>
  406606:	2b63      	cmp	r3, #99	; 0x63
  406608:	f000 8083 	beq.w	406712 <_svfiprintf_r+0x234>
  40660c:	2b64      	cmp	r3, #100	; 0x64
  40660e:	d026      	beq.n	40665e <_svfiprintf_r+0x180>
  406610:	e1d0      	b.n	4069b4 <_svfiprintf_r+0x4d6>
  406612:	2b69      	cmp	r3, #105	; 0x69
  406614:	d023      	beq.n	40665e <_svfiprintf_r+0x180>
  406616:	2b6c      	cmp	r3, #108	; 0x6c
  406618:	d06e      	beq.n	4066f8 <_svfiprintf_r+0x21a>
  40661a:	e1cb      	b.n	4069b4 <_svfiprintf_r+0x4d6>
  40661c:	2b71      	cmp	r3, #113	; 0x71
  40661e:	d075      	beq.n	40670c <_svfiprintf_r+0x22e>
  406620:	dc13      	bgt.n	40664a <_svfiprintf_r+0x16c>
  406622:	2b6f      	cmp	r3, #111	; 0x6f
  406624:	f000 80bf 	beq.w	4067a6 <_svfiprintf_r+0x2c8>
  406628:	2b70      	cmp	r3, #112	; 0x70
  40662a:	f040 81c3 	bne.w	4069b4 <_svfiprintf_r+0x4d6>
  40662e:	2330      	movs	r3, #48	; 0x30
  406630:	48a0      	ldr	r0, [pc, #640]	; (4068b4 <_svfiprintf_r+0x3d6>)
  406632:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  406636:	2378      	movs	r3, #120	; 0x78
  406638:	6834      	ldr	r4, [r6, #0]
  40663a:	2500      	movs	r5, #0
  40663c:	f047 0702 	orr.w	r7, r7, #2
  406640:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  406644:	3604      	adds	r6, #4
  406646:	900a      	str	r0, [sp, #40]	; 0x28
  406648:	e12e      	b.n	4068a8 <_svfiprintf_r+0x3ca>
  40664a:	2b75      	cmp	r3, #117	; 0x75
  40664c:	f000 80ee 	beq.w	40682c <_svfiprintf_r+0x34e>
  406650:	2b78      	cmp	r3, #120	; 0x78
  406652:	f000 8103 	beq.w	40685c <_svfiprintf_r+0x37e>
  406656:	2b73      	cmp	r3, #115	; 0x73
  406658:	f040 81ac 	bne.w	4069b4 <_svfiprintf_r+0x4d6>
  40665c:	e0bf      	b.n	4067de <_svfiprintf_r+0x300>
  40665e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406662:	e05e      	b.n	406722 <_svfiprintf_r+0x244>
  406664:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406668:	4c93      	ldr	r4, [pc, #588]	; (4068b8 <_svfiprintf_r+0x3da>)
  40666a:	e0fa      	b.n	406862 <_svfiprintf_r+0x384>
  40666c:	2a00      	cmp	r2, #0
  40666e:	bf08      	it	eq
  406670:	2220      	moveq	r2, #32
  406672:	e7a0      	b.n	4065b6 <_svfiprintf_r+0xd8>
  406674:	1d33      	adds	r3, r6, #4
  406676:	6836      	ldr	r6, [r6, #0]
  406678:	2e00      	cmp	r6, #0
  40667a:	9604      	str	r6, [sp, #16]
  40667c:	db01      	blt.n	406682 <_svfiprintf_r+0x1a4>
  40667e:	461e      	mov	r6, r3
  406680:	e799      	b.n	4065b6 <_svfiprintf_r+0xd8>
  406682:	4275      	negs	r5, r6
  406684:	9504      	str	r5, [sp, #16]
  406686:	461e      	mov	r6, r3
  406688:	f047 0704 	orr.w	r7, r7, #4
  40668c:	e793      	b.n	4065b6 <_svfiprintf_r+0xd8>
  40668e:	9c02      	ldr	r4, [sp, #8]
  406690:	7823      	ldrb	r3, [r4, #0]
  406692:	1c61      	adds	r1, r4, #1
  406694:	2b2a      	cmp	r3, #42	; 0x2a
  406696:	d002      	beq.n	40669e <_svfiprintf_r+0x1c0>
  406698:	f04f 0a00 	mov.w	sl, #0
  40669c:	e00a      	b.n	4066b4 <_svfiprintf_r+0x1d6>
  40669e:	f8d6 a000 	ldr.w	sl, [r6]
  4066a2:	1d33      	adds	r3, r6, #4
  4066a4:	f1ba 0f00 	cmp.w	sl, #0
  4066a8:	461e      	mov	r6, r3
  4066aa:	9102      	str	r1, [sp, #8]
  4066ac:	da83      	bge.n	4065b6 <_svfiprintf_r+0xd8>
  4066ae:	f04f 3aff 	mov.w	sl, #4294967295
  4066b2:	e780      	b.n	4065b6 <_svfiprintf_r+0xd8>
  4066b4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4066b8:	2809      	cmp	r0, #9
  4066ba:	d805      	bhi.n	4066c8 <_svfiprintf_r+0x1ea>
  4066bc:	230a      	movs	r3, #10
  4066be:	fb03 0a0a 	mla	sl, r3, sl, r0
  4066c2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4066c6:	e7f5      	b.n	4066b4 <_svfiprintf_r+0x1d6>
  4066c8:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
  4066cc:	9102      	str	r1, [sp, #8]
  4066ce:	e762      	b.n	406596 <_svfiprintf_r+0xb8>
  4066d0:	2500      	movs	r5, #0
  4066d2:	9504      	str	r5, [sp, #16]
  4066d4:	9c04      	ldr	r4, [sp, #16]
  4066d6:	3b30      	subs	r3, #48	; 0x30
  4066d8:	210a      	movs	r1, #10
  4066da:	fb01 3404 	mla	r4, r1, r4, r3
  4066de:	9902      	ldr	r1, [sp, #8]
  4066e0:	9404      	str	r4, [sp, #16]
  4066e2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4066e6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4066ea:	2809      	cmp	r0, #9
  4066ec:	d8ee      	bhi.n	4066cc <_svfiprintf_r+0x1ee>
  4066ee:	9102      	str	r1, [sp, #8]
  4066f0:	e7f0      	b.n	4066d4 <_svfiprintf_r+0x1f6>
  4066f2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
  4066f6:	e75e      	b.n	4065b6 <_svfiprintf_r+0xd8>
  4066f8:	9d02      	ldr	r5, [sp, #8]
  4066fa:	782b      	ldrb	r3, [r5, #0]
  4066fc:	2b6c      	cmp	r3, #108	; 0x6c
  4066fe:	d102      	bne.n	406706 <_svfiprintf_r+0x228>
  406700:	3501      	adds	r5, #1
  406702:	9502      	str	r5, [sp, #8]
  406704:	e002      	b.n	40670c <_svfiprintf_r+0x22e>
  406706:	f047 0710 	orr.w	r7, r7, #16
  40670a:	e754      	b.n	4065b6 <_svfiprintf_r+0xd8>
  40670c:	f047 0720 	orr.w	r7, r7, #32
  406710:	e751      	b.n	4065b6 <_svfiprintf_r+0xd8>
  406712:	6833      	ldr	r3, [r6, #0]
  406714:	2500      	movs	r5, #0
  406716:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  40671a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40671e:	3604      	adds	r6, #4
  406720:	e152      	b.n	4069c8 <_svfiprintf_r+0x4ea>
  406722:	06ba      	lsls	r2, r7, #26
  406724:	d507      	bpl.n	406736 <_svfiprintf_r+0x258>
  406726:	3607      	adds	r6, #7
  406728:	f026 0307 	bic.w	r3, r6, #7
  40672c:	f103 0608 	add.w	r6, r3, #8
  406730:	e9d3 4500 	ldrd	r4, r5, [r3]
  406734:	e00d      	b.n	406752 <_svfiprintf_r+0x274>
  406736:	f017 0f10 	tst.w	r7, #16
  40673a:	f106 0304 	add.w	r3, r6, #4
  40673e:	d001      	beq.n	406744 <_svfiprintf_r+0x266>
  406740:	6834      	ldr	r4, [r6, #0]
  406742:	e004      	b.n	40674e <_svfiprintf_r+0x270>
  406744:	6834      	ldr	r4, [r6, #0]
  406746:	f017 0f40 	tst.w	r7, #64	; 0x40
  40674a:	bf18      	it	ne
  40674c:	b224      	sxthne	r4, r4
  40674e:	17e5      	asrs	r5, r4, #31
  406750:	461e      	mov	r6, r3
  406752:	2c00      	cmp	r4, #0
  406754:	f175 0000 	sbcs.w	r0, r5, #0
  406758:	f280 80b0 	bge.w	4068bc <_svfiprintf_r+0x3de>
  40675c:	232d      	movs	r3, #45	; 0x2d
  40675e:	4264      	negs	r4, r4
  406760:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406764:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  406768:	e0a8      	b.n	4068bc <_svfiprintf_r+0x3de>
  40676a:	f017 0f20 	tst.w	r7, #32
  40676e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406772:	f106 0104 	add.w	r1, r6, #4
  406776:	d007      	beq.n	406788 <_svfiprintf_r+0x2aa>
  406778:	9c05      	ldr	r4, [sp, #20]
  40677a:	6830      	ldr	r0, [r6, #0]
  40677c:	17e5      	asrs	r5, r4, #31
  40677e:	4622      	mov	r2, r4
  406780:	462b      	mov	r3, r5
  406782:	e9c0 2300 	strd	r2, r3, [r0]
  406786:	e00a      	b.n	40679e <_svfiprintf_r+0x2c0>
  406788:	06fb      	lsls	r3, r7, #27
  40678a:	d405      	bmi.n	406798 <_svfiprintf_r+0x2ba>
  40678c:	067f      	lsls	r7, r7, #25
  40678e:	d503      	bpl.n	406798 <_svfiprintf_r+0x2ba>
  406790:	6833      	ldr	r3, [r6, #0]
  406792:	9c05      	ldr	r4, [sp, #20]
  406794:	801c      	strh	r4, [r3, #0]
  406796:	e002      	b.n	40679e <_svfiprintf_r+0x2c0>
  406798:	6833      	ldr	r3, [r6, #0]
  40679a:	9d05      	ldr	r5, [sp, #20]
  40679c:	601d      	str	r5, [r3, #0]
  40679e:	460e      	mov	r6, r1
  4067a0:	e6c3      	b.n	40652a <_svfiprintf_r+0x4c>
  4067a2:	f047 0710 	orr.w	r7, r7, #16
  4067a6:	f017 0320 	ands.w	r3, r7, #32
  4067aa:	d008      	beq.n	4067be <_svfiprintf_r+0x2e0>
  4067ac:	3607      	adds	r6, #7
  4067ae:	f026 0307 	bic.w	r3, r6, #7
  4067b2:	f103 0608 	add.w	r6, r3, #8
  4067b6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4067ba:	2300      	movs	r3, #0
  4067bc:	e075      	b.n	4068aa <_svfiprintf_r+0x3cc>
  4067be:	f017 0110 	ands.w	r1, r7, #16
  4067c2:	f106 0204 	add.w	r2, r6, #4
  4067c6:	d106      	bne.n	4067d6 <_svfiprintf_r+0x2f8>
  4067c8:	f017 0340 	ands.w	r3, r7, #64	; 0x40
  4067cc:	d003      	beq.n	4067d6 <_svfiprintf_r+0x2f8>
  4067ce:	8834      	ldrh	r4, [r6, #0]
  4067d0:	2500      	movs	r5, #0
  4067d2:	4616      	mov	r6, r2
  4067d4:	e7f1      	b.n	4067ba <_svfiprintf_r+0x2dc>
  4067d6:	6834      	ldr	r4, [r6, #0]
  4067d8:	2500      	movs	r5, #0
  4067da:	4616      	mov	r6, r2
  4067dc:	e065      	b.n	4068aa <_svfiprintf_r+0x3cc>
  4067de:	f8d6 9000 	ldr.w	r9, [r6]
  4067e2:	2300      	movs	r3, #0
  4067e4:	459a      	cmp	sl, r3
  4067e6:	f106 0604 	add.w	r6, r6, #4
  4067ea:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4067ee:	4648      	mov	r0, r9
  4067f0:	db11      	blt.n	406816 <_svfiprintf_r+0x338>
  4067f2:	4619      	mov	r1, r3
  4067f4:	4652      	mov	r2, sl
  4067f6:	f8cd c004 	str.w	ip, [sp, #4]
  4067fa:	f7fe fffb 	bl	4057f4 <memchr>
  4067fe:	f8dd c004 	ldr.w	ip, [sp, #4]
  406802:	2800      	cmp	r0, #0
  406804:	f000 80e5 	beq.w	4069d2 <_svfiprintf_r+0x4f4>
  406808:	ebc9 0000 	rsb	r0, r9, r0
  40680c:	4550      	cmp	r0, sl
  40680e:	bfb8      	it	lt
  406810:	4682      	movlt	sl, r0
  406812:	2500      	movs	r5, #0
  406814:	e0de      	b.n	4069d4 <_svfiprintf_r+0x4f6>
  406816:	f8cd c004 	str.w	ip, [sp, #4]
  40681a:	f7fc fded 	bl	4033f8 <strlen>
  40681e:	2500      	movs	r5, #0
  406820:	4682      	mov	sl, r0
  406822:	f8dd c004 	ldr.w	ip, [sp, #4]
  406826:	e0d5      	b.n	4069d4 <_svfiprintf_r+0x4f6>
  406828:	f047 0710 	orr.w	r7, r7, #16
  40682c:	06bd      	lsls	r5, r7, #26
  40682e:	d507      	bpl.n	406840 <_svfiprintf_r+0x362>
  406830:	3607      	adds	r6, #7
  406832:	f026 0307 	bic.w	r3, r6, #7
  406836:	f103 0608 	add.w	r6, r3, #8
  40683a:	e9d3 4500 	ldrd	r4, r5, [r3]
  40683e:	e00b      	b.n	406858 <_svfiprintf_r+0x37a>
  406840:	f017 0f10 	tst.w	r7, #16
  406844:	f106 0304 	add.w	r3, r6, #4
  406848:	d103      	bne.n	406852 <_svfiprintf_r+0x374>
  40684a:	067c      	lsls	r4, r7, #25
  40684c:	d501      	bpl.n	406852 <_svfiprintf_r+0x374>
  40684e:	8834      	ldrh	r4, [r6, #0]
  406850:	e000      	b.n	406854 <_svfiprintf_r+0x376>
  406852:	6834      	ldr	r4, [r6, #0]
  406854:	2500      	movs	r5, #0
  406856:	461e      	mov	r6, r3
  406858:	2301      	movs	r3, #1
  40685a:	e026      	b.n	4068aa <_svfiprintf_r+0x3cc>
  40685c:	4c15      	ldr	r4, [pc, #84]	; (4068b4 <_svfiprintf_r+0x3d6>)
  40685e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406862:	06b8      	lsls	r0, r7, #26
  406864:	940a      	str	r4, [sp, #40]	; 0x28
  406866:	d507      	bpl.n	406878 <_svfiprintf_r+0x39a>
  406868:	3607      	adds	r6, #7
  40686a:	f026 0207 	bic.w	r2, r6, #7
  40686e:	f102 0608 	add.w	r6, r2, #8
  406872:	e9d2 4500 	ldrd	r4, r5, [r2]
  406876:	e00b      	b.n	406890 <_svfiprintf_r+0x3b2>
  406878:	f017 0f10 	tst.w	r7, #16
  40687c:	f106 0204 	add.w	r2, r6, #4
  406880:	d103      	bne.n	40688a <_svfiprintf_r+0x3ac>
  406882:	0679      	lsls	r1, r7, #25
  406884:	d501      	bpl.n	40688a <_svfiprintf_r+0x3ac>
  406886:	8834      	ldrh	r4, [r6, #0]
  406888:	e000      	b.n	40688c <_svfiprintf_r+0x3ae>
  40688a:	6834      	ldr	r4, [r6, #0]
  40688c:	2500      	movs	r5, #0
  40688e:	4616      	mov	r6, r2
  406890:	07fa      	lsls	r2, r7, #31
  406892:	d509      	bpl.n	4068a8 <_svfiprintf_r+0x3ca>
  406894:	ea54 0005 	orrs.w	r0, r4, r5
  406898:	d006      	beq.n	4068a8 <_svfiprintf_r+0x3ca>
  40689a:	2230      	movs	r2, #48	; 0x30
  40689c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  4068a0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
  4068a4:	f047 0702 	orr.w	r7, r7, #2
  4068a8:	2302      	movs	r3, #2
  4068aa:	2200      	movs	r2, #0
  4068ac:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4068b0:	e005      	b.n	4068be <_svfiprintf_r+0x3e0>
  4068b2:	bf00      	nop
  4068b4:	00407dbf 	.word	0x00407dbf
  4068b8:	00407dae 	.word	0x00407dae
  4068bc:	2301      	movs	r3, #1
  4068be:	f1ba 0f00 	cmp.w	sl, #0
  4068c2:	bfa8      	it	ge
  4068c4:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
  4068c8:	ea54 0105 	orrs.w	r1, r4, r5
  4068cc:	d102      	bne.n	4068d4 <_svfiprintf_r+0x3f6>
  4068ce:	f1ba 0f00 	cmp.w	sl, #0
  4068d2:	d05e      	beq.n	406992 <_svfiprintf_r+0x4b4>
  4068d4:	2b01      	cmp	r3, #1
  4068d6:	d01f      	beq.n	406918 <_svfiprintf_r+0x43a>
  4068d8:	2b02      	cmp	r3, #2
  4068da:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
  4068de:	d045      	beq.n	40696c <_svfiprintf_r+0x48e>
  4068e0:	08e0      	lsrs	r0, r4, #3
  4068e2:	ea40 7145 	orr.w	r1, r0, r5, lsl #29
  4068e6:	08e8      	lsrs	r0, r5, #3
  4068e8:	f004 0207 	and.w	r2, r4, #7
  4068ec:	9106      	str	r1, [sp, #24]
  4068ee:	9007      	str	r0, [sp, #28]
  4068f0:	3230      	adds	r2, #48	; 0x30
  4068f2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
  4068f6:	ea54 0105 	orrs.w	r1, r4, r5
  4068fa:	4699      	mov	r9, r3
  4068fc:	701a      	strb	r2, [r3, #0]
  4068fe:	f103 33ff 	add.w	r3, r3, #4294967295
  406902:	d1ed      	bne.n	4068e0 <_svfiprintf_r+0x402>
  406904:	07f8      	lsls	r0, r7, #31
  406906:	4649      	mov	r1, r9
  406908:	d54e      	bpl.n	4069a8 <_svfiprintf_r+0x4ca>
  40690a:	2a30      	cmp	r2, #48	; 0x30
  40690c:	d04c      	beq.n	4069a8 <_svfiprintf_r+0x4ca>
  40690e:	4699      	mov	r9, r3
  406910:	2330      	movs	r3, #48	; 0x30
  406912:	f801 3c01 	strb.w	r3, [r1, #-1]
  406916:	e047      	b.n	4069a8 <_svfiprintf_r+0x4ca>
  406918:	2d00      	cmp	r5, #0
  40691a:	bf08      	it	eq
  40691c:	2c0a      	cmpeq	r4, #10
  40691e:	d205      	bcs.n	40692c <_svfiprintf_r+0x44e>
  406920:	3430      	adds	r4, #48	; 0x30
  406922:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  406926:	f10d 096f 	add.w	r9, sp, #111	; 0x6f
  40692a:	e03d      	b.n	4069a8 <_svfiprintf_r+0x4ca>
  40692c:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
  406930:	9203      	str	r2, [sp, #12]
  406932:	4620      	mov	r0, r4
  406934:	4629      	mov	r1, r5
  406936:	220a      	movs	r2, #10
  406938:	2300      	movs	r3, #0
  40693a:	f8cd c004 	str.w	ip, [sp, #4]
  40693e:	f000 feb5 	bl	4076ac <__aeabi_uldivmod>
  406942:	9b03      	ldr	r3, [sp, #12]
  406944:	3230      	adds	r2, #48	; 0x30
  406946:	f803 2901 	strb.w	r2, [r3], #-1
  40694a:	4620      	mov	r0, r4
  40694c:	4629      	mov	r1, r5
  40694e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  406952:	220a      	movs	r2, #10
  406954:	9303      	str	r3, [sp, #12]
  406956:	2300      	movs	r3, #0
  406958:	f000 fea8 	bl	4076ac <__aeabi_uldivmod>
  40695c:	4604      	mov	r4, r0
  40695e:	460d      	mov	r5, r1
  406960:	ea54 0005 	orrs.w	r0, r4, r5
  406964:	f8dd c004 	ldr.w	ip, [sp, #4]
  406968:	d1e3      	bne.n	406932 <_svfiprintf_r+0x454>
  40696a:	e01d      	b.n	4069a8 <_svfiprintf_r+0x4ca>
  40696c:	990a      	ldr	r1, [sp, #40]	; 0x28
  40696e:	f004 020f 	and.w	r2, r4, #15
  406972:	5c8a      	ldrb	r2, [r1, r2]
  406974:	4699      	mov	r9, r3
  406976:	f803 2901 	strb.w	r2, [r3], #-1
  40697a:	0922      	lsrs	r2, r4, #4
  40697c:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
  406980:	0929      	lsrs	r1, r5, #4
  406982:	9008      	str	r0, [sp, #32]
  406984:	9109      	str	r1, [sp, #36]	; 0x24
  406986:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
  40698a:	ea54 0205 	orrs.w	r2, r4, r5
  40698e:	d1ed      	bne.n	40696c <_svfiprintf_r+0x48e>
  406990:	e00a      	b.n	4069a8 <_svfiprintf_r+0x4ca>
  406992:	b93b      	cbnz	r3, 4069a4 <_svfiprintf_r+0x4c6>
  406994:	07f9      	lsls	r1, r7, #31
  406996:	d505      	bpl.n	4069a4 <_svfiprintf_r+0x4c6>
  406998:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
  40699c:	2330      	movs	r3, #48	; 0x30
  40699e:	f809 3d41 	strb.w	r3, [r9, #-65]!
  4069a2:	e001      	b.n	4069a8 <_svfiprintf_r+0x4ca>
  4069a4:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4069a8:	4655      	mov	r5, sl
  4069aa:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
  4069ae:	ebc9 0a0a 	rsb	sl, r9, sl
  4069b2:	e00f      	b.n	4069d4 <_svfiprintf_r+0x4f6>
  4069b4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4069b8:	2b00      	cmp	r3, #0
  4069ba:	f000 8171 	beq.w	406ca0 <_svfiprintf_r+0x7c2>
  4069be:	2500      	movs	r5, #0
  4069c0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
  4069c4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4069c8:	f04f 0a01 	mov.w	sl, #1
  4069cc:	f10d 0948 	add.w	r9, sp, #72	; 0x48
  4069d0:	e000      	b.n	4069d4 <_svfiprintf_r+0x4f6>
  4069d2:	4605      	mov	r5, r0
  4069d4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  4069d8:	45aa      	cmp	sl, r5
  4069da:	bfac      	ite	ge
  4069dc:	4654      	movge	r4, sl
  4069de:	462c      	movlt	r4, r5
  4069e0:	b103      	cbz	r3, 4069e4 <_svfiprintf_r+0x506>
  4069e2:	3401      	adds	r4, #1
  4069e4:	f017 0302 	ands.w	r3, r7, #2
  4069e8:	9303      	str	r3, [sp, #12]
  4069ea:	bf18      	it	ne
  4069ec:	3402      	addne	r4, #2
  4069ee:	f017 0384 	ands.w	r3, r7, #132	; 0x84
  4069f2:	930b      	str	r3, [sp, #44]	; 0x2c
  4069f4:	d13b      	bne.n	406a6e <_svfiprintf_r+0x590>
  4069f6:	9804      	ldr	r0, [sp, #16]
  4069f8:	1b03      	subs	r3, r0, r4
  4069fa:	2b00      	cmp	r3, #0
  4069fc:	dd37      	ble.n	406a6e <_svfiprintf_r+0x590>
  4069fe:	4aa6      	ldr	r2, [pc, #664]	; (406c98 <_svfiprintf_r+0x7ba>)
  406a00:	2b10      	cmp	r3, #16
  406a02:	f8cc 2000 	str.w	r2, [ip]
  406a06:	dd1b      	ble.n	406a40 <_svfiprintf_r+0x562>
  406a08:	2210      	movs	r2, #16
  406a0a:	f8cc 2004 	str.w	r2, [ip, #4]
  406a0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a10:	3210      	adds	r2, #16
  406a12:	9211      	str	r2, [sp, #68]	; 0x44
  406a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406a16:	3201      	adds	r2, #1
  406a18:	2a07      	cmp	r2, #7
  406a1a:	9210      	str	r2, [sp, #64]	; 0x40
  406a1c:	dc02      	bgt.n	406a24 <_svfiprintf_r+0x546>
  406a1e:	f10c 0c08 	add.w	ip, ip, #8
  406a22:	e00b      	b.n	406a3c <_svfiprintf_r+0x55e>
  406a24:	4658      	mov	r0, fp
  406a26:	4641      	mov	r1, r8
  406a28:	aa0f      	add	r2, sp, #60	; 0x3c
  406a2a:	9301      	str	r3, [sp, #4]
  406a2c:	f7ff fcde 	bl	4063ec <__ssprint_r>
  406a30:	9b01      	ldr	r3, [sp, #4]
  406a32:	2800      	cmp	r0, #0
  406a34:	f040 813b 	bne.w	406cae <_svfiprintf_r+0x7d0>
  406a38:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406a3c:	3b10      	subs	r3, #16
  406a3e:	e7de      	b.n	4069fe <_svfiprintf_r+0x520>
  406a40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406a42:	f8cc 3004 	str.w	r3, [ip, #4]
  406a46:	4413      	add	r3, r2
  406a48:	9311      	str	r3, [sp, #68]	; 0x44
  406a4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406a4c:	3301      	adds	r3, #1
  406a4e:	2b07      	cmp	r3, #7
  406a50:	9310      	str	r3, [sp, #64]	; 0x40
  406a52:	dc02      	bgt.n	406a5a <_svfiprintf_r+0x57c>
  406a54:	f10c 0c08 	add.w	ip, ip, #8
  406a58:	e009      	b.n	406a6e <_svfiprintf_r+0x590>
  406a5a:	4658      	mov	r0, fp
  406a5c:	4641      	mov	r1, r8
  406a5e:	aa0f      	add	r2, sp, #60	; 0x3c
  406a60:	f7ff fcc4 	bl	4063ec <__ssprint_r>
  406a64:	2800      	cmp	r0, #0
  406a66:	f040 8122 	bne.w	406cae <_svfiprintf_r+0x7d0>
  406a6a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406a6e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  406a72:	b1db      	cbz	r3, 406aac <_svfiprintf_r+0x5ce>
  406a74:	f10d 0337 	add.w	r3, sp, #55	; 0x37
  406a78:	f8cc 3000 	str.w	r3, [ip]
  406a7c:	2301      	movs	r3, #1
  406a7e:	f8cc 3004 	str.w	r3, [ip, #4]
  406a82:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a84:	3301      	adds	r3, #1
  406a86:	9311      	str	r3, [sp, #68]	; 0x44
  406a88:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406a8a:	3301      	adds	r3, #1
  406a8c:	2b07      	cmp	r3, #7
  406a8e:	9310      	str	r3, [sp, #64]	; 0x40
  406a90:	dc02      	bgt.n	406a98 <_svfiprintf_r+0x5ba>
  406a92:	f10c 0c08 	add.w	ip, ip, #8
  406a96:	e009      	b.n	406aac <_svfiprintf_r+0x5ce>
  406a98:	4658      	mov	r0, fp
  406a9a:	4641      	mov	r1, r8
  406a9c:	aa0f      	add	r2, sp, #60	; 0x3c
  406a9e:	f7ff fca5 	bl	4063ec <__ssprint_r>
  406aa2:	2800      	cmp	r0, #0
  406aa4:	f040 8103 	bne.w	406cae <_svfiprintf_r+0x7d0>
  406aa8:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406aac:	9b03      	ldr	r3, [sp, #12]
  406aae:	b1d3      	cbz	r3, 406ae6 <_svfiprintf_r+0x608>
  406ab0:	ab0e      	add	r3, sp, #56	; 0x38
  406ab2:	f8cc 3000 	str.w	r3, [ip]
  406ab6:	2302      	movs	r3, #2
  406ab8:	f8cc 3004 	str.w	r3, [ip, #4]
  406abc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406abe:	3302      	adds	r3, #2
  406ac0:	9311      	str	r3, [sp, #68]	; 0x44
  406ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406ac4:	3301      	adds	r3, #1
  406ac6:	2b07      	cmp	r3, #7
  406ac8:	9310      	str	r3, [sp, #64]	; 0x40
  406aca:	dc02      	bgt.n	406ad2 <_svfiprintf_r+0x5f4>
  406acc:	f10c 0c08 	add.w	ip, ip, #8
  406ad0:	e009      	b.n	406ae6 <_svfiprintf_r+0x608>
  406ad2:	4658      	mov	r0, fp
  406ad4:	4641      	mov	r1, r8
  406ad6:	aa0f      	add	r2, sp, #60	; 0x3c
  406ad8:	f7ff fc88 	bl	4063ec <__ssprint_r>
  406adc:	2800      	cmp	r0, #0
  406ade:	f040 80e6 	bne.w	406cae <_svfiprintf_r+0x7d0>
  406ae2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406ae8:	2b80      	cmp	r3, #128	; 0x80
  406aea:	d13f      	bne.n	406b6c <_svfiprintf_r+0x68e>
  406aec:	9b04      	ldr	r3, [sp, #16]
  406aee:	1b1b      	subs	r3, r3, r4
  406af0:	2b00      	cmp	r3, #0
  406af2:	9303      	str	r3, [sp, #12]
  406af4:	dd3a      	ble.n	406b6c <_svfiprintf_r+0x68e>
  406af6:	9b03      	ldr	r3, [sp, #12]
  406af8:	2b10      	cmp	r3, #16
  406afa:	4b68      	ldr	r3, [pc, #416]	; (406c9c <_svfiprintf_r+0x7be>)
  406afc:	f8cc 3000 	str.w	r3, [ip]
  406b00:	dd1b      	ble.n	406b3a <_svfiprintf_r+0x65c>
  406b02:	2310      	movs	r3, #16
  406b04:	f8cc 3004 	str.w	r3, [ip, #4]
  406b08:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406b0a:	3310      	adds	r3, #16
  406b0c:	9311      	str	r3, [sp, #68]	; 0x44
  406b0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406b10:	3301      	adds	r3, #1
  406b12:	2b07      	cmp	r3, #7
  406b14:	9310      	str	r3, [sp, #64]	; 0x40
  406b16:	dc02      	bgt.n	406b1e <_svfiprintf_r+0x640>
  406b18:	f10c 0c08 	add.w	ip, ip, #8
  406b1c:	e009      	b.n	406b32 <_svfiprintf_r+0x654>
  406b1e:	4658      	mov	r0, fp
  406b20:	4641      	mov	r1, r8
  406b22:	aa0f      	add	r2, sp, #60	; 0x3c
  406b24:	f7ff fc62 	bl	4063ec <__ssprint_r>
  406b28:	2800      	cmp	r0, #0
  406b2a:	f040 80c0 	bne.w	406cae <_svfiprintf_r+0x7d0>
  406b2e:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406b32:	9b03      	ldr	r3, [sp, #12]
  406b34:	3b10      	subs	r3, #16
  406b36:	9303      	str	r3, [sp, #12]
  406b38:	e7dd      	b.n	406af6 <_svfiprintf_r+0x618>
  406b3a:	9b03      	ldr	r3, [sp, #12]
  406b3c:	9803      	ldr	r0, [sp, #12]
  406b3e:	f8cc 3004 	str.w	r3, [ip, #4]
  406b42:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406b44:	4403      	add	r3, r0
  406b46:	9311      	str	r3, [sp, #68]	; 0x44
  406b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406b4a:	3301      	adds	r3, #1
  406b4c:	2b07      	cmp	r3, #7
  406b4e:	9310      	str	r3, [sp, #64]	; 0x40
  406b50:	dc02      	bgt.n	406b58 <_svfiprintf_r+0x67a>
  406b52:	f10c 0c08 	add.w	ip, ip, #8
  406b56:	e009      	b.n	406b6c <_svfiprintf_r+0x68e>
  406b58:	4658      	mov	r0, fp
  406b5a:	4641      	mov	r1, r8
  406b5c:	aa0f      	add	r2, sp, #60	; 0x3c
  406b5e:	f7ff fc45 	bl	4063ec <__ssprint_r>
  406b62:	2800      	cmp	r0, #0
  406b64:	f040 80a3 	bne.w	406cae <_svfiprintf_r+0x7d0>
  406b68:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406b6c:	ebca 0505 	rsb	r5, sl, r5
  406b70:	2d00      	cmp	r5, #0
  406b72:	dd34      	ble.n	406bde <_svfiprintf_r+0x700>
  406b74:	4b49      	ldr	r3, [pc, #292]	; (406c9c <_svfiprintf_r+0x7be>)
  406b76:	2d10      	cmp	r5, #16
  406b78:	f8cc 3000 	str.w	r3, [ip]
  406b7c:	dd19      	ble.n	406bb2 <_svfiprintf_r+0x6d4>
  406b7e:	2310      	movs	r3, #16
  406b80:	f8cc 3004 	str.w	r3, [ip, #4]
  406b84:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406b86:	3310      	adds	r3, #16
  406b88:	9311      	str	r3, [sp, #68]	; 0x44
  406b8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406b8c:	3301      	adds	r3, #1
  406b8e:	2b07      	cmp	r3, #7
  406b90:	9310      	str	r3, [sp, #64]	; 0x40
  406b92:	dc02      	bgt.n	406b9a <_svfiprintf_r+0x6bc>
  406b94:	f10c 0c08 	add.w	ip, ip, #8
  406b98:	e009      	b.n	406bae <_svfiprintf_r+0x6d0>
  406b9a:	4658      	mov	r0, fp
  406b9c:	4641      	mov	r1, r8
  406b9e:	aa0f      	add	r2, sp, #60	; 0x3c
  406ba0:	f7ff fc24 	bl	4063ec <__ssprint_r>
  406ba4:	2800      	cmp	r0, #0
  406ba6:	f040 8082 	bne.w	406cae <_svfiprintf_r+0x7d0>
  406baa:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406bae:	3d10      	subs	r5, #16
  406bb0:	e7e0      	b.n	406b74 <_svfiprintf_r+0x696>
  406bb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406bb4:	f8cc 5004 	str.w	r5, [ip, #4]
  406bb8:	441d      	add	r5, r3
  406bba:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406bbc:	9511      	str	r5, [sp, #68]	; 0x44
  406bbe:	3301      	adds	r3, #1
  406bc0:	2b07      	cmp	r3, #7
  406bc2:	9310      	str	r3, [sp, #64]	; 0x40
  406bc4:	dc02      	bgt.n	406bcc <_svfiprintf_r+0x6ee>
  406bc6:	f10c 0c08 	add.w	ip, ip, #8
  406bca:	e008      	b.n	406bde <_svfiprintf_r+0x700>
  406bcc:	4658      	mov	r0, fp
  406bce:	4641      	mov	r1, r8
  406bd0:	aa0f      	add	r2, sp, #60	; 0x3c
  406bd2:	f7ff fc0b 	bl	4063ec <__ssprint_r>
  406bd6:	2800      	cmp	r0, #0
  406bd8:	d169      	bne.n	406cae <_svfiprintf_r+0x7d0>
  406bda:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406be0:	e88c 0600 	stmia.w	ip, {r9, sl}
  406be4:	4453      	add	r3, sl
  406be6:	9311      	str	r3, [sp, #68]	; 0x44
  406be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406bea:	3301      	adds	r3, #1
  406bec:	2b07      	cmp	r3, #7
  406bee:	9310      	str	r3, [sp, #64]	; 0x40
  406bf0:	dc02      	bgt.n	406bf8 <_svfiprintf_r+0x71a>
  406bf2:	f10c 0308 	add.w	r3, ip, #8
  406bf6:	e007      	b.n	406c08 <_svfiprintf_r+0x72a>
  406bf8:	4658      	mov	r0, fp
  406bfa:	4641      	mov	r1, r8
  406bfc:	aa0f      	add	r2, sp, #60	; 0x3c
  406bfe:	f7ff fbf5 	bl	4063ec <__ssprint_r>
  406c02:	2800      	cmp	r0, #0
  406c04:	d153      	bne.n	406cae <_svfiprintf_r+0x7d0>
  406c06:	ab1c      	add	r3, sp, #112	; 0x70
  406c08:	077a      	lsls	r2, r7, #29
  406c0a:	d40a      	bmi.n	406c22 <_svfiprintf_r+0x744>
  406c0c:	9d05      	ldr	r5, [sp, #20]
  406c0e:	9804      	ldr	r0, [sp, #16]
  406c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406c12:	4284      	cmp	r4, r0
  406c14:	bfac      	ite	ge
  406c16:	192d      	addge	r5, r5, r4
  406c18:	182d      	addlt	r5, r5, r0
  406c1a:	9505      	str	r5, [sp, #20]
  406c1c:	2b00      	cmp	r3, #0
  406c1e:	d035      	beq.n	406c8c <_svfiprintf_r+0x7ae>
  406c20:	e02e      	b.n	406c80 <_svfiprintf_r+0x7a2>
  406c22:	9904      	ldr	r1, [sp, #16]
  406c24:	1b0d      	subs	r5, r1, r4
  406c26:	2d00      	cmp	r5, #0
  406c28:	ddf0      	ble.n	406c0c <_svfiprintf_r+0x72e>
  406c2a:	4a1b      	ldr	r2, [pc, #108]	; (406c98 <_svfiprintf_r+0x7ba>)
  406c2c:	2d10      	cmp	r5, #16
  406c2e:	601a      	str	r2, [r3, #0]
  406c30:	dd15      	ble.n	406c5e <_svfiprintf_r+0x780>
  406c32:	2210      	movs	r2, #16
  406c34:	605a      	str	r2, [r3, #4]
  406c36:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406c38:	3210      	adds	r2, #16
  406c3a:	9211      	str	r2, [sp, #68]	; 0x44
  406c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406c3e:	3201      	adds	r2, #1
  406c40:	2a07      	cmp	r2, #7
  406c42:	9210      	str	r2, [sp, #64]	; 0x40
  406c44:	dc01      	bgt.n	406c4a <_svfiprintf_r+0x76c>
  406c46:	3308      	adds	r3, #8
  406c48:	e007      	b.n	406c5a <_svfiprintf_r+0x77c>
  406c4a:	4658      	mov	r0, fp
  406c4c:	4641      	mov	r1, r8
  406c4e:	aa0f      	add	r2, sp, #60	; 0x3c
  406c50:	f7ff fbcc 	bl	4063ec <__ssprint_r>
  406c54:	2800      	cmp	r0, #0
  406c56:	d12a      	bne.n	406cae <_svfiprintf_r+0x7d0>
  406c58:	ab1c      	add	r3, sp, #112	; 0x70
  406c5a:	3d10      	subs	r5, #16
  406c5c:	e7e5      	b.n	406c2a <_svfiprintf_r+0x74c>
  406c5e:	605d      	str	r5, [r3, #4]
  406c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406c62:	441d      	add	r5, r3
  406c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406c66:	9511      	str	r5, [sp, #68]	; 0x44
  406c68:	3301      	adds	r3, #1
  406c6a:	2b07      	cmp	r3, #7
  406c6c:	9310      	str	r3, [sp, #64]	; 0x40
  406c6e:	ddcd      	ble.n	406c0c <_svfiprintf_r+0x72e>
  406c70:	4658      	mov	r0, fp
  406c72:	4641      	mov	r1, r8
  406c74:	aa0f      	add	r2, sp, #60	; 0x3c
  406c76:	f7ff fbb9 	bl	4063ec <__ssprint_r>
  406c7a:	2800      	cmp	r0, #0
  406c7c:	d0c6      	beq.n	406c0c <_svfiprintf_r+0x72e>
  406c7e:	e016      	b.n	406cae <_svfiprintf_r+0x7d0>
  406c80:	4658      	mov	r0, fp
  406c82:	4641      	mov	r1, r8
  406c84:	aa0f      	add	r2, sp, #60	; 0x3c
  406c86:	f7ff fbb1 	bl	4063ec <__ssprint_r>
  406c8a:	b980      	cbnz	r0, 406cae <_svfiprintf_r+0x7d0>
  406c8c:	2300      	movs	r3, #0
  406c8e:	9310      	str	r3, [sp, #64]	; 0x40
  406c90:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
  406c94:	e449      	b.n	40652a <_svfiprintf_r+0x4c>
  406c96:	bf00      	nop
  406c98:	00408010 	.word	0x00408010
  406c9c:	00408020 	.word	0x00408020
  406ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406ca2:	b123      	cbz	r3, 406cae <_svfiprintf_r+0x7d0>
  406ca4:	4658      	mov	r0, fp
  406ca6:	4641      	mov	r1, r8
  406ca8:	aa0f      	add	r2, sp, #60	; 0x3c
  406caa:	f7ff fb9f 	bl	4063ec <__ssprint_r>
  406cae:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  406cb2:	9805      	ldr	r0, [sp, #20]
  406cb4:	f013 0f40 	tst.w	r3, #64	; 0x40
  406cb8:	bf18      	it	ne
  406cba:	f04f 30ff 	movne.w	r0, #4294967295
  406cbe:	b02d      	add	sp, #180	; 0xb4
  406cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406cc4 <__register_exitproc>:
  406cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406cc8:	4698      	mov	r8, r3
  406cca:	4b22      	ldr	r3, [pc, #136]	; (406d54 <__register_exitproc+0x90>)
  406ccc:	4606      	mov	r6, r0
  406cce:	681c      	ldr	r4, [r3, #0]
  406cd0:	460f      	mov	r7, r1
  406cd2:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
  406cd6:	4691      	mov	r9, r2
  406cd8:	b918      	cbnz	r0, 406ce2 <__register_exitproc+0x1e>
  406cda:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
  406cde:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406ce2:	6843      	ldr	r3, [r0, #4]
  406ce4:	2b1f      	cmp	r3, #31
  406ce6:	dd16      	ble.n	406d16 <__register_exitproc+0x52>
  406ce8:	4b1b      	ldr	r3, [pc, #108]	; (406d58 <__register_exitproc+0x94>)
  406cea:	b91b      	cbnz	r3, 406cf4 <__register_exitproc+0x30>
  406cec:	f04f 30ff 	mov.w	r0, #4294967295
  406cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406cf4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406cf8:	f3af 8000 	nop.w
  406cfc:	2800      	cmp	r0, #0
  406cfe:	d0f5      	beq.n	406cec <__register_exitproc+0x28>
  406d00:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
  406d04:	2500      	movs	r5, #0
  406d06:	6045      	str	r5, [r0, #4]
  406d08:	6001      	str	r1, [r0, #0]
  406d0a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406d0e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
  406d12:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
  406d16:	6844      	ldr	r4, [r0, #4]
  406d18:	b1a6      	cbz	r6, 406d44 <__register_exitproc+0x80>
  406d1a:	2201      	movs	r2, #1
  406d1c:	40a2      	lsls	r2, r4
  406d1e:	eb00 0584 	add.w	r5, r0, r4, lsl #2
  406d22:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  406d26:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
  406d2a:	2e02      	cmp	r6, #2
  406d2c:	ea41 0102 	orr.w	r1, r1, r2
  406d30:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406d34:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
  406d38:	d104      	bne.n	406d44 <__register_exitproc+0x80>
  406d3a:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
  406d3e:	431a      	orrs	r2, r3
  406d40:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  406d44:	1c63      	adds	r3, r4, #1
  406d46:	3402      	adds	r4, #2
  406d48:	6043      	str	r3, [r0, #4]
  406d4a:	f840 7024 	str.w	r7, [r0, r4, lsl #2]
  406d4e:	2000      	movs	r0, #0
  406d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406d54:	00407d78 	.word	0x00407d78
  406d58:	00000000 	.word	0x00000000

00406d5c <_calloc_r>:
  406d5c:	b510      	push	{r4, lr}
  406d5e:	4351      	muls	r1, r2
  406d60:	f7fe fb40 	bl	4053e4 <_malloc_r>
  406d64:	4604      	mov	r4, r0
  406d66:	b320      	cbz	r0, 406db2 <_calloc_r+0x56>
  406d68:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406d6c:	f022 0203 	bic.w	r2, r2, #3
  406d70:	3a04      	subs	r2, #4
  406d72:	2a24      	cmp	r2, #36	; 0x24
  406d74:	d81a      	bhi.n	406dac <_calloc_r+0x50>
  406d76:	2a13      	cmp	r2, #19
  406d78:	d912      	bls.n	406da0 <_calloc_r+0x44>
  406d7a:	2100      	movs	r1, #0
  406d7c:	2a1b      	cmp	r2, #27
  406d7e:	6001      	str	r1, [r0, #0]
  406d80:	6041      	str	r1, [r0, #4]
  406d82:	d802      	bhi.n	406d8a <_calloc_r+0x2e>
  406d84:	f100 0308 	add.w	r3, r0, #8
  406d88:	e00b      	b.n	406da2 <_calloc_r+0x46>
  406d8a:	2a24      	cmp	r2, #36	; 0x24
  406d8c:	6081      	str	r1, [r0, #8]
  406d8e:	60c1      	str	r1, [r0, #12]
  406d90:	bf11      	iteee	ne
  406d92:	f100 0310 	addne.w	r3, r0, #16
  406d96:	6101      	streq	r1, [r0, #16]
  406d98:	f100 0318 	addeq.w	r3, r0, #24
  406d9c:	6141      	streq	r1, [r0, #20]
  406d9e:	e000      	b.n	406da2 <_calloc_r+0x46>
  406da0:	4603      	mov	r3, r0
  406da2:	2200      	movs	r2, #0
  406da4:	601a      	str	r2, [r3, #0]
  406da6:	605a      	str	r2, [r3, #4]
  406da8:	609a      	str	r2, [r3, #8]
  406daa:	e002      	b.n	406db2 <_calloc_r+0x56>
  406dac:	2100      	movs	r1, #0
  406dae:	f7fc fad6 	bl	40335e <memset>
  406db2:	4620      	mov	r0, r4
  406db4:	bd10      	pop	{r4, pc}
	...

00406db8 <__aeabi_drsub>:
  406db8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406dbc:	e002      	b.n	406dc4 <__adddf3>
  406dbe:	bf00      	nop

00406dc0 <__aeabi_dsub>:
  406dc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406dc4 <__adddf3>:
  406dc4:	b530      	push	{r4, r5, lr}
  406dc6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406dca:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406dce:	ea94 0f05 	teq	r4, r5
  406dd2:	bf08      	it	eq
  406dd4:	ea90 0f02 	teqeq	r0, r2
  406dd8:	bf1f      	itttt	ne
  406dda:	ea54 0c00 	orrsne.w	ip, r4, r0
  406dde:	ea55 0c02 	orrsne.w	ip, r5, r2
  406de2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  406de6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406dea:	f000 80e2 	beq.w	406fb2 <__adddf3+0x1ee>
  406dee:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406df2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  406df6:	bfb8      	it	lt
  406df8:	426d      	neglt	r5, r5
  406dfa:	dd0c      	ble.n	406e16 <__adddf3+0x52>
  406dfc:	442c      	add	r4, r5
  406dfe:	ea80 0202 	eor.w	r2, r0, r2
  406e02:	ea81 0303 	eor.w	r3, r1, r3
  406e06:	ea82 0000 	eor.w	r0, r2, r0
  406e0a:	ea83 0101 	eor.w	r1, r3, r1
  406e0e:	ea80 0202 	eor.w	r2, r0, r2
  406e12:	ea81 0303 	eor.w	r3, r1, r3
  406e16:	2d36      	cmp	r5, #54	; 0x36
  406e18:	bf88      	it	hi
  406e1a:	bd30      	pophi	{r4, r5, pc}
  406e1c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406e20:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406e24:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  406e28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  406e2c:	d002      	beq.n	406e34 <__adddf3+0x70>
  406e2e:	4240      	negs	r0, r0
  406e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406e34:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406e38:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406e3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  406e40:	d002      	beq.n	406e48 <__adddf3+0x84>
  406e42:	4252      	negs	r2, r2
  406e44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406e48:	ea94 0f05 	teq	r4, r5
  406e4c:	f000 80a7 	beq.w	406f9e <__adddf3+0x1da>
  406e50:	f1a4 0401 	sub.w	r4, r4, #1
  406e54:	f1d5 0e20 	rsbs	lr, r5, #32
  406e58:	db0d      	blt.n	406e76 <__adddf3+0xb2>
  406e5a:	fa02 fc0e 	lsl.w	ip, r2, lr
  406e5e:	fa22 f205 	lsr.w	r2, r2, r5
  406e62:	1880      	adds	r0, r0, r2
  406e64:	f141 0100 	adc.w	r1, r1, #0
  406e68:	fa03 f20e 	lsl.w	r2, r3, lr
  406e6c:	1880      	adds	r0, r0, r2
  406e6e:	fa43 f305 	asr.w	r3, r3, r5
  406e72:	4159      	adcs	r1, r3
  406e74:	e00e      	b.n	406e94 <__adddf3+0xd0>
  406e76:	f1a5 0520 	sub.w	r5, r5, #32
  406e7a:	f10e 0e20 	add.w	lr, lr, #32
  406e7e:	2a01      	cmp	r2, #1
  406e80:	fa03 fc0e 	lsl.w	ip, r3, lr
  406e84:	bf28      	it	cs
  406e86:	f04c 0c02 	orrcs.w	ip, ip, #2
  406e8a:	fa43 f305 	asr.w	r3, r3, r5
  406e8e:	18c0      	adds	r0, r0, r3
  406e90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406e94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406e98:	d507      	bpl.n	406eaa <__adddf3+0xe6>
  406e9a:	f04f 0e00 	mov.w	lr, #0
  406e9e:	f1dc 0c00 	rsbs	ip, ip, #0
  406ea2:	eb7e 0000 	sbcs.w	r0, lr, r0
  406ea6:	eb6e 0101 	sbc.w	r1, lr, r1
  406eaa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406eae:	d31b      	bcc.n	406ee8 <__adddf3+0x124>
  406eb0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406eb4:	d30c      	bcc.n	406ed0 <__adddf3+0x10c>
  406eb6:	0849      	lsrs	r1, r1, #1
  406eb8:	ea5f 0030 	movs.w	r0, r0, rrx
  406ebc:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406ec0:	f104 0401 	add.w	r4, r4, #1
  406ec4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406ec8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406ecc:	f080 809a 	bcs.w	407004 <__adddf3+0x240>
  406ed0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406ed4:	bf08      	it	eq
  406ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406eda:	f150 0000 	adcs.w	r0, r0, #0
  406ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406ee2:	ea41 0105 	orr.w	r1, r1, r5
  406ee6:	bd30      	pop	{r4, r5, pc}
  406ee8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406eec:	4140      	adcs	r0, r0
  406eee:	eb41 0101 	adc.w	r1, r1, r1
  406ef2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406ef6:	f1a4 0401 	sub.w	r4, r4, #1
  406efa:	d1e9      	bne.n	406ed0 <__adddf3+0x10c>
  406efc:	f091 0f00 	teq	r1, #0
  406f00:	bf04      	itt	eq
  406f02:	4601      	moveq	r1, r0
  406f04:	2000      	moveq	r0, #0
  406f06:	fab1 f381 	clz	r3, r1
  406f0a:	bf08      	it	eq
  406f0c:	3320      	addeq	r3, #32
  406f0e:	f1a3 030b 	sub.w	r3, r3, #11
  406f12:	f1b3 0220 	subs.w	r2, r3, #32
  406f16:	da0c      	bge.n	406f32 <__adddf3+0x16e>
  406f18:	320c      	adds	r2, #12
  406f1a:	dd08      	ble.n	406f2e <__adddf3+0x16a>
  406f1c:	f102 0c14 	add.w	ip, r2, #20
  406f20:	f1c2 020c 	rsb	r2, r2, #12
  406f24:	fa01 f00c 	lsl.w	r0, r1, ip
  406f28:	fa21 f102 	lsr.w	r1, r1, r2
  406f2c:	e00c      	b.n	406f48 <__adddf3+0x184>
  406f2e:	f102 0214 	add.w	r2, r2, #20
  406f32:	bfd8      	it	le
  406f34:	f1c2 0c20 	rsble	ip, r2, #32
  406f38:	fa01 f102 	lsl.w	r1, r1, r2
  406f3c:	fa20 fc0c 	lsr.w	ip, r0, ip
  406f40:	bfdc      	itt	le
  406f42:	ea41 010c 	orrle.w	r1, r1, ip
  406f46:	4090      	lslle	r0, r2
  406f48:	1ae4      	subs	r4, r4, r3
  406f4a:	bfa2      	ittt	ge
  406f4c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  406f50:	4329      	orrge	r1, r5
  406f52:	bd30      	popge	{r4, r5, pc}
  406f54:	ea6f 0404 	mvn.w	r4, r4
  406f58:	3c1f      	subs	r4, #31
  406f5a:	da1c      	bge.n	406f96 <__adddf3+0x1d2>
  406f5c:	340c      	adds	r4, #12
  406f5e:	dc0e      	bgt.n	406f7e <__adddf3+0x1ba>
  406f60:	f104 0414 	add.w	r4, r4, #20
  406f64:	f1c4 0220 	rsb	r2, r4, #32
  406f68:	fa20 f004 	lsr.w	r0, r0, r4
  406f6c:	fa01 f302 	lsl.w	r3, r1, r2
  406f70:	ea40 0003 	orr.w	r0, r0, r3
  406f74:	fa21 f304 	lsr.w	r3, r1, r4
  406f78:	ea45 0103 	orr.w	r1, r5, r3
  406f7c:	bd30      	pop	{r4, r5, pc}
  406f7e:	f1c4 040c 	rsb	r4, r4, #12
  406f82:	f1c4 0220 	rsb	r2, r4, #32
  406f86:	fa20 f002 	lsr.w	r0, r0, r2
  406f8a:	fa01 f304 	lsl.w	r3, r1, r4
  406f8e:	ea40 0003 	orr.w	r0, r0, r3
  406f92:	4629      	mov	r1, r5
  406f94:	bd30      	pop	{r4, r5, pc}
  406f96:	fa21 f004 	lsr.w	r0, r1, r4
  406f9a:	4629      	mov	r1, r5
  406f9c:	bd30      	pop	{r4, r5, pc}
  406f9e:	f094 0f00 	teq	r4, #0
  406fa2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406fa6:	bf06      	itte	eq
  406fa8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406fac:	3401      	addeq	r4, #1
  406fae:	3d01      	subne	r5, #1
  406fb0:	e74e      	b.n	406e50 <__adddf3+0x8c>
  406fb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406fb6:	bf18      	it	ne
  406fb8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406fbc:	d029      	beq.n	407012 <__adddf3+0x24e>
  406fbe:	ea94 0f05 	teq	r4, r5
  406fc2:	bf08      	it	eq
  406fc4:	ea90 0f02 	teqeq	r0, r2
  406fc8:	d005      	beq.n	406fd6 <__adddf3+0x212>
  406fca:	ea54 0c00 	orrs.w	ip, r4, r0
  406fce:	bf04      	itt	eq
  406fd0:	4619      	moveq	r1, r3
  406fd2:	4610      	moveq	r0, r2
  406fd4:	bd30      	pop	{r4, r5, pc}
  406fd6:	ea91 0f03 	teq	r1, r3
  406fda:	bf1e      	ittt	ne
  406fdc:	2100      	movne	r1, #0
  406fde:	2000      	movne	r0, #0
  406fe0:	bd30      	popne	{r4, r5, pc}
  406fe2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  406fe6:	d105      	bne.n	406ff4 <__adddf3+0x230>
  406fe8:	0040      	lsls	r0, r0, #1
  406fea:	4149      	adcs	r1, r1
  406fec:	bf28      	it	cs
  406fee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406ff2:	bd30      	pop	{r4, r5, pc}
  406ff4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  406ff8:	bf3c      	itt	cc
  406ffa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  406ffe:	bd30      	popcc	{r4, r5, pc}
  407000:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407004:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407008:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40700c:	f04f 0000 	mov.w	r0, #0
  407010:	bd30      	pop	{r4, r5, pc}
  407012:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407016:	bf1a      	itte	ne
  407018:	4619      	movne	r1, r3
  40701a:	4610      	movne	r0, r2
  40701c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407020:	bf1c      	itt	ne
  407022:	460b      	movne	r3, r1
  407024:	4602      	movne	r2, r0
  407026:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40702a:	bf06      	itte	eq
  40702c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  407030:	ea91 0f03 	teqeq	r1, r3
  407034:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407038:	bd30      	pop	{r4, r5, pc}
  40703a:	bf00      	nop

0040703c <__aeabi_ui2d>:
  40703c:	f090 0f00 	teq	r0, #0
  407040:	bf04      	itt	eq
  407042:	2100      	moveq	r1, #0
  407044:	4770      	bxeq	lr
  407046:	b530      	push	{r4, r5, lr}
  407048:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40704c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407050:	f04f 0500 	mov.w	r5, #0
  407054:	f04f 0100 	mov.w	r1, #0
  407058:	e750      	b.n	406efc <__adddf3+0x138>
  40705a:	bf00      	nop

0040705c <__aeabi_i2d>:
  40705c:	f090 0f00 	teq	r0, #0
  407060:	bf04      	itt	eq
  407062:	2100      	moveq	r1, #0
  407064:	4770      	bxeq	lr
  407066:	b530      	push	{r4, r5, lr}
  407068:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40706c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407070:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  407074:	bf48      	it	mi
  407076:	4240      	negmi	r0, r0
  407078:	f04f 0100 	mov.w	r1, #0
  40707c:	e73e      	b.n	406efc <__adddf3+0x138>
  40707e:	bf00      	nop

00407080 <__aeabi_f2d>:
  407080:	0042      	lsls	r2, r0, #1
  407082:	ea4f 01e2 	mov.w	r1, r2, asr #3
  407086:	ea4f 0131 	mov.w	r1, r1, rrx
  40708a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40708e:	bf1f      	itttt	ne
  407090:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407094:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  407098:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40709c:	4770      	bxne	lr
  40709e:	f092 0f00 	teq	r2, #0
  4070a2:	bf14      	ite	ne
  4070a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4070a8:	4770      	bxeq	lr
  4070aa:	b530      	push	{r4, r5, lr}
  4070ac:	f44f 7460 	mov.w	r4, #896	; 0x380
  4070b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4070b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4070b8:	e720      	b.n	406efc <__adddf3+0x138>
  4070ba:	bf00      	nop

004070bc <__aeabi_ul2d>:
  4070bc:	ea50 0201 	orrs.w	r2, r0, r1
  4070c0:	bf08      	it	eq
  4070c2:	4770      	bxeq	lr
  4070c4:	b530      	push	{r4, r5, lr}
  4070c6:	f04f 0500 	mov.w	r5, #0
  4070ca:	e00a      	b.n	4070e2 <__aeabi_l2d+0x16>

004070cc <__aeabi_l2d>:
  4070cc:	ea50 0201 	orrs.w	r2, r0, r1
  4070d0:	bf08      	it	eq
  4070d2:	4770      	bxeq	lr
  4070d4:	b530      	push	{r4, r5, lr}
  4070d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4070da:	d502      	bpl.n	4070e2 <__aeabi_l2d+0x16>
  4070dc:	4240      	negs	r0, r0
  4070de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4070e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4070e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4070ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4070ee:	f43f aedc 	beq.w	406eaa <__adddf3+0xe6>
  4070f2:	f04f 0203 	mov.w	r2, #3
  4070f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4070fa:	bf18      	it	ne
  4070fc:	3203      	addne	r2, #3
  4070fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407102:	bf18      	it	ne
  407104:	3203      	addne	r2, #3
  407106:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40710a:	f1c2 0320 	rsb	r3, r2, #32
  40710e:	fa00 fc03 	lsl.w	ip, r0, r3
  407112:	fa20 f002 	lsr.w	r0, r0, r2
  407116:	fa01 fe03 	lsl.w	lr, r1, r3
  40711a:	ea40 000e 	orr.w	r0, r0, lr
  40711e:	fa21 f102 	lsr.w	r1, r1, r2
  407122:	4414      	add	r4, r2
  407124:	e6c1      	b.n	406eaa <__adddf3+0xe6>
  407126:	bf00      	nop

00407128 <__aeabi_dmul>:
  407128:	b570      	push	{r4, r5, r6, lr}
  40712a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40712e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407132:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407136:	bf1d      	ittte	ne
  407138:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40713c:	ea94 0f0c 	teqne	r4, ip
  407140:	ea95 0f0c 	teqne	r5, ip
  407144:	f000 f8de 	bleq	407304 <__aeabi_dmul+0x1dc>
  407148:	442c      	add	r4, r5
  40714a:	ea81 0603 	eor.w	r6, r1, r3
  40714e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  407152:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  407156:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40715a:	bf18      	it	ne
  40715c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  407160:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407164:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  407168:	d038      	beq.n	4071dc <__aeabi_dmul+0xb4>
  40716a:	fba0 ce02 	umull	ip, lr, r0, r2
  40716e:	f04f 0500 	mov.w	r5, #0
  407172:	fbe1 e502 	umlal	lr, r5, r1, r2
  407176:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40717a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40717e:	f04f 0600 	mov.w	r6, #0
  407182:	fbe1 5603 	umlal	r5, r6, r1, r3
  407186:	f09c 0f00 	teq	ip, #0
  40718a:	bf18      	it	ne
  40718c:	f04e 0e01 	orrne.w	lr, lr, #1
  407190:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407194:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  407198:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40719c:	d204      	bcs.n	4071a8 <__aeabi_dmul+0x80>
  40719e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4071a2:	416d      	adcs	r5, r5
  4071a4:	eb46 0606 	adc.w	r6, r6, r6
  4071a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4071ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4071b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4071b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4071b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4071bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4071c0:	bf88      	it	hi
  4071c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4071c6:	d81e      	bhi.n	407206 <__aeabi_dmul+0xde>
  4071c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4071cc:	bf08      	it	eq
  4071ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4071d2:	f150 0000 	adcs.w	r0, r0, #0
  4071d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4071da:	bd70      	pop	{r4, r5, r6, pc}
  4071dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4071e0:	ea46 0101 	orr.w	r1, r6, r1
  4071e4:	ea40 0002 	orr.w	r0, r0, r2
  4071e8:	ea81 0103 	eor.w	r1, r1, r3
  4071ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4071f0:	bfc2      	ittt	gt
  4071f2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4071f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4071fa:	bd70      	popgt	{r4, r5, r6, pc}
  4071fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407200:	f04f 0e00 	mov.w	lr, #0
  407204:	3c01      	subs	r4, #1
  407206:	f300 80ab 	bgt.w	407360 <__aeabi_dmul+0x238>
  40720a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40720e:	bfde      	ittt	le
  407210:	2000      	movle	r0, #0
  407212:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407216:	bd70      	pople	{r4, r5, r6, pc}
  407218:	f1c4 0400 	rsb	r4, r4, #0
  40721c:	3c20      	subs	r4, #32
  40721e:	da35      	bge.n	40728c <__aeabi_dmul+0x164>
  407220:	340c      	adds	r4, #12
  407222:	dc1b      	bgt.n	40725c <__aeabi_dmul+0x134>
  407224:	f104 0414 	add.w	r4, r4, #20
  407228:	f1c4 0520 	rsb	r5, r4, #32
  40722c:	fa00 f305 	lsl.w	r3, r0, r5
  407230:	fa20 f004 	lsr.w	r0, r0, r4
  407234:	fa01 f205 	lsl.w	r2, r1, r5
  407238:	ea40 0002 	orr.w	r0, r0, r2
  40723c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  407240:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407244:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407248:	fa21 f604 	lsr.w	r6, r1, r4
  40724c:	eb42 0106 	adc.w	r1, r2, r6
  407250:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407254:	bf08      	it	eq
  407256:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40725a:	bd70      	pop	{r4, r5, r6, pc}
  40725c:	f1c4 040c 	rsb	r4, r4, #12
  407260:	f1c4 0520 	rsb	r5, r4, #32
  407264:	fa00 f304 	lsl.w	r3, r0, r4
  407268:	fa20 f005 	lsr.w	r0, r0, r5
  40726c:	fa01 f204 	lsl.w	r2, r1, r4
  407270:	ea40 0002 	orr.w	r0, r0, r2
  407274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40727c:	f141 0100 	adc.w	r1, r1, #0
  407280:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407284:	bf08      	it	eq
  407286:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40728a:	bd70      	pop	{r4, r5, r6, pc}
  40728c:	f1c4 0520 	rsb	r5, r4, #32
  407290:	fa00 f205 	lsl.w	r2, r0, r5
  407294:	ea4e 0e02 	orr.w	lr, lr, r2
  407298:	fa20 f304 	lsr.w	r3, r0, r4
  40729c:	fa01 f205 	lsl.w	r2, r1, r5
  4072a0:	ea43 0302 	orr.w	r3, r3, r2
  4072a4:	fa21 f004 	lsr.w	r0, r1, r4
  4072a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4072ac:	fa21 f204 	lsr.w	r2, r1, r4
  4072b0:	ea20 0002 	bic.w	r0, r0, r2
  4072b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4072b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4072bc:	bf08      	it	eq
  4072be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4072c2:	bd70      	pop	{r4, r5, r6, pc}
  4072c4:	f094 0f00 	teq	r4, #0
  4072c8:	d10f      	bne.n	4072ea <__aeabi_dmul+0x1c2>
  4072ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4072ce:	0040      	lsls	r0, r0, #1
  4072d0:	eb41 0101 	adc.w	r1, r1, r1
  4072d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4072d8:	bf08      	it	eq
  4072da:	3c01      	subeq	r4, #1
  4072dc:	d0f7      	beq.n	4072ce <__aeabi_dmul+0x1a6>
  4072de:	ea41 0106 	orr.w	r1, r1, r6
  4072e2:	f095 0f00 	teq	r5, #0
  4072e6:	bf18      	it	ne
  4072e8:	4770      	bxne	lr
  4072ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4072ee:	0052      	lsls	r2, r2, #1
  4072f0:	eb43 0303 	adc.w	r3, r3, r3
  4072f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4072f8:	bf08      	it	eq
  4072fa:	3d01      	subeq	r5, #1
  4072fc:	d0f7      	beq.n	4072ee <__aeabi_dmul+0x1c6>
  4072fe:	ea43 0306 	orr.w	r3, r3, r6
  407302:	4770      	bx	lr
  407304:	ea94 0f0c 	teq	r4, ip
  407308:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40730c:	bf18      	it	ne
  40730e:	ea95 0f0c 	teqne	r5, ip
  407312:	d00c      	beq.n	40732e <__aeabi_dmul+0x206>
  407314:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407318:	bf18      	it	ne
  40731a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40731e:	d1d1      	bne.n	4072c4 <__aeabi_dmul+0x19c>
  407320:	ea81 0103 	eor.w	r1, r1, r3
  407324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407328:	f04f 0000 	mov.w	r0, #0
  40732c:	bd70      	pop	{r4, r5, r6, pc}
  40732e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407332:	bf06      	itte	eq
  407334:	4610      	moveq	r0, r2
  407336:	4619      	moveq	r1, r3
  407338:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40733c:	d019      	beq.n	407372 <__aeabi_dmul+0x24a>
  40733e:	ea94 0f0c 	teq	r4, ip
  407342:	d102      	bne.n	40734a <__aeabi_dmul+0x222>
  407344:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407348:	d113      	bne.n	407372 <__aeabi_dmul+0x24a>
  40734a:	ea95 0f0c 	teq	r5, ip
  40734e:	d105      	bne.n	40735c <__aeabi_dmul+0x234>
  407350:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  407354:	bf1c      	itt	ne
  407356:	4610      	movne	r0, r2
  407358:	4619      	movne	r1, r3
  40735a:	d10a      	bne.n	407372 <__aeabi_dmul+0x24a>
  40735c:	ea81 0103 	eor.w	r1, r1, r3
  407360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407364:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407368:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40736c:	f04f 0000 	mov.w	r0, #0
  407370:	bd70      	pop	{r4, r5, r6, pc}
  407372:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  407376:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40737a:	bd70      	pop	{r4, r5, r6, pc}

0040737c <__aeabi_ddiv>:
  40737c:	b570      	push	{r4, r5, r6, lr}
  40737e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  407382:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  407386:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40738a:	bf1d      	ittte	ne
  40738c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407390:	ea94 0f0c 	teqne	r4, ip
  407394:	ea95 0f0c 	teqne	r5, ip
  407398:	f000 f8a7 	bleq	4074ea <__aeabi_ddiv+0x16e>
  40739c:	eba4 0405 	sub.w	r4, r4, r5
  4073a0:	ea81 0e03 	eor.w	lr, r1, r3
  4073a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4073a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4073ac:	f000 8088 	beq.w	4074c0 <__aeabi_ddiv+0x144>
  4073b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4073b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4073b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4073bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4073c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4073c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4073c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4073cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4073d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4073d4:	429d      	cmp	r5, r3
  4073d6:	bf08      	it	eq
  4073d8:	4296      	cmpeq	r6, r2
  4073da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4073de:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4073e2:	d202      	bcs.n	4073ea <__aeabi_ddiv+0x6e>
  4073e4:	085b      	lsrs	r3, r3, #1
  4073e6:	ea4f 0232 	mov.w	r2, r2, rrx
  4073ea:	1ab6      	subs	r6, r6, r2
  4073ec:	eb65 0503 	sbc.w	r5, r5, r3
  4073f0:	085b      	lsrs	r3, r3, #1
  4073f2:	ea4f 0232 	mov.w	r2, r2, rrx
  4073f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4073fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4073fe:	ebb6 0e02 	subs.w	lr, r6, r2
  407402:	eb75 0e03 	sbcs.w	lr, r5, r3
  407406:	bf22      	ittt	cs
  407408:	1ab6      	subcs	r6, r6, r2
  40740a:	4675      	movcs	r5, lr
  40740c:	ea40 000c 	orrcs.w	r0, r0, ip
  407410:	085b      	lsrs	r3, r3, #1
  407412:	ea4f 0232 	mov.w	r2, r2, rrx
  407416:	ebb6 0e02 	subs.w	lr, r6, r2
  40741a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40741e:	bf22      	ittt	cs
  407420:	1ab6      	subcs	r6, r6, r2
  407422:	4675      	movcs	r5, lr
  407424:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407428:	085b      	lsrs	r3, r3, #1
  40742a:	ea4f 0232 	mov.w	r2, r2, rrx
  40742e:	ebb6 0e02 	subs.w	lr, r6, r2
  407432:	eb75 0e03 	sbcs.w	lr, r5, r3
  407436:	bf22      	ittt	cs
  407438:	1ab6      	subcs	r6, r6, r2
  40743a:	4675      	movcs	r5, lr
  40743c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  407440:	085b      	lsrs	r3, r3, #1
  407442:	ea4f 0232 	mov.w	r2, r2, rrx
  407446:	ebb6 0e02 	subs.w	lr, r6, r2
  40744a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40744e:	bf22      	ittt	cs
  407450:	1ab6      	subcs	r6, r6, r2
  407452:	4675      	movcs	r5, lr
  407454:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  407458:	ea55 0e06 	orrs.w	lr, r5, r6
  40745c:	d018      	beq.n	407490 <__aeabi_ddiv+0x114>
  40745e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  407462:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  407466:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40746a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40746e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  407472:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  407476:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40747a:	d1c0      	bne.n	4073fe <__aeabi_ddiv+0x82>
  40747c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407480:	d10b      	bne.n	40749a <__aeabi_ddiv+0x11e>
  407482:	ea41 0100 	orr.w	r1, r1, r0
  407486:	f04f 0000 	mov.w	r0, #0
  40748a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40748e:	e7b6      	b.n	4073fe <__aeabi_ddiv+0x82>
  407490:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407494:	bf04      	itt	eq
  407496:	4301      	orreq	r1, r0
  407498:	2000      	moveq	r0, #0
  40749a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40749e:	bf88      	it	hi
  4074a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4074a4:	f63f aeaf 	bhi.w	407206 <__aeabi_dmul+0xde>
  4074a8:	ebb5 0c03 	subs.w	ip, r5, r3
  4074ac:	bf04      	itt	eq
  4074ae:	ebb6 0c02 	subseq.w	ip, r6, r2
  4074b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4074b6:	f150 0000 	adcs.w	r0, r0, #0
  4074ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4074be:	bd70      	pop	{r4, r5, r6, pc}
  4074c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4074c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4074c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4074cc:	bfc2      	ittt	gt
  4074ce:	ebd4 050c 	rsbsgt	r5, r4, ip
  4074d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4074d6:	bd70      	popgt	{r4, r5, r6, pc}
  4074d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4074dc:	f04f 0e00 	mov.w	lr, #0
  4074e0:	3c01      	subs	r4, #1
  4074e2:	e690      	b.n	407206 <__aeabi_dmul+0xde>
  4074e4:	ea45 0e06 	orr.w	lr, r5, r6
  4074e8:	e68d      	b.n	407206 <__aeabi_dmul+0xde>
  4074ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4074ee:	ea94 0f0c 	teq	r4, ip
  4074f2:	bf08      	it	eq
  4074f4:	ea95 0f0c 	teqeq	r5, ip
  4074f8:	f43f af3b 	beq.w	407372 <__aeabi_dmul+0x24a>
  4074fc:	ea94 0f0c 	teq	r4, ip
  407500:	d10a      	bne.n	407518 <__aeabi_ddiv+0x19c>
  407502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407506:	f47f af34 	bne.w	407372 <__aeabi_dmul+0x24a>
  40750a:	ea95 0f0c 	teq	r5, ip
  40750e:	f47f af25 	bne.w	40735c <__aeabi_dmul+0x234>
  407512:	4610      	mov	r0, r2
  407514:	4619      	mov	r1, r3
  407516:	e72c      	b.n	407372 <__aeabi_dmul+0x24a>
  407518:	ea95 0f0c 	teq	r5, ip
  40751c:	d106      	bne.n	40752c <__aeabi_ddiv+0x1b0>
  40751e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407522:	f43f aefd 	beq.w	407320 <__aeabi_dmul+0x1f8>
  407526:	4610      	mov	r0, r2
  407528:	4619      	mov	r1, r3
  40752a:	e722      	b.n	407372 <__aeabi_dmul+0x24a>
  40752c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407530:	bf18      	it	ne
  407532:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407536:	f47f aec5 	bne.w	4072c4 <__aeabi_dmul+0x19c>
  40753a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40753e:	f47f af0d 	bne.w	40735c <__aeabi_dmul+0x234>
  407542:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407546:	f47f aeeb 	bne.w	407320 <__aeabi_dmul+0x1f8>
  40754a:	e712      	b.n	407372 <__aeabi_dmul+0x24a>

0040754c <__gedf2>:
  40754c:	f04f 3cff 	mov.w	ip, #4294967295
  407550:	e006      	b.n	407560 <__cmpdf2+0x4>
  407552:	bf00      	nop

00407554 <__ledf2>:
  407554:	f04f 0c01 	mov.w	ip, #1
  407558:	e002      	b.n	407560 <__cmpdf2+0x4>
  40755a:	bf00      	nop

0040755c <__cmpdf2>:
  40755c:	f04f 0c01 	mov.w	ip, #1
  407560:	f84d cd04 	str.w	ip, [sp, #-4]!
  407564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40756c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407570:	bf18      	it	ne
  407572:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  407576:	d01b      	beq.n	4075b0 <__cmpdf2+0x54>
  407578:	b001      	add	sp, #4
  40757a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40757e:	bf0c      	ite	eq
  407580:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  407584:	ea91 0f03 	teqne	r1, r3
  407588:	bf02      	ittt	eq
  40758a:	ea90 0f02 	teqeq	r0, r2
  40758e:	2000      	moveq	r0, #0
  407590:	4770      	bxeq	lr
  407592:	f110 0f00 	cmn.w	r0, #0
  407596:	ea91 0f03 	teq	r1, r3
  40759a:	bf58      	it	pl
  40759c:	4299      	cmppl	r1, r3
  40759e:	bf08      	it	eq
  4075a0:	4290      	cmpeq	r0, r2
  4075a2:	bf2c      	ite	cs
  4075a4:	17d8      	asrcs	r0, r3, #31
  4075a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4075aa:	f040 0001 	orr.w	r0, r0, #1
  4075ae:	4770      	bx	lr
  4075b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4075b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4075b8:	d102      	bne.n	4075c0 <__cmpdf2+0x64>
  4075ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4075be:	d107      	bne.n	4075d0 <__cmpdf2+0x74>
  4075c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4075c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4075c8:	d1d6      	bne.n	407578 <__cmpdf2+0x1c>
  4075ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4075ce:	d0d3      	beq.n	407578 <__cmpdf2+0x1c>
  4075d0:	f85d 0b04 	ldr.w	r0, [sp], #4
  4075d4:	4770      	bx	lr
  4075d6:	bf00      	nop

004075d8 <__aeabi_cdrcmple>:
  4075d8:	4684      	mov	ip, r0
  4075da:	4610      	mov	r0, r2
  4075dc:	4662      	mov	r2, ip
  4075de:	468c      	mov	ip, r1
  4075e0:	4619      	mov	r1, r3
  4075e2:	4663      	mov	r3, ip
  4075e4:	e000      	b.n	4075e8 <__aeabi_cdcmpeq>
  4075e6:	bf00      	nop

004075e8 <__aeabi_cdcmpeq>:
  4075e8:	b501      	push	{r0, lr}
  4075ea:	f7ff ffb7 	bl	40755c <__cmpdf2>
  4075ee:	2800      	cmp	r0, #0
  4075f0:	bf48      	it	mi
  4075f2:	f110 0f00 	cmnmi.w	r0, #0
  4075f6:	bd01      	pop	{r0, pc}

004075f8 <__aeabi_dcmpeq>:
  4075f8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4075fc:	f7ff fff4 	bl	4075e8 <__aeabi_cdcmpeq>
  407600:	bf0c      	ite	eq
  407602:	2001      	moveq	r0, #1
  407604:	2000      	movne	r0, #0
  407606:	f85d fb08 	ldr.w	pc, [sp], #8
  40760a:	bf00      	nop

0040760c <__aeabi_dcmplt>:
  40760c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407610:	f7ff ffea 	bl	4075e8 <__aeabi_cdcmpeq>
  407614:	bf34      	ite	cc
  407616:	2001      	movcc	r0, #1
  407618:	2000      	movcs	r0, #0
  40761a:	f85d fb08 	ldr.w	pc, [sp], #8
  40761e:	bf00      	nop

00407620 <__aeabi_dcmple>:
  407620:	f84d ed08 	str.w	lr, [sp, #-8]!
  407624:	f7ff ffe0 	bl	4075e8 <__aeabi_cdcmpeq>
  407628:	bf94      	ite	ls
  40762a:	2001      	movls	r0, #1
  40762c:	2000      	movhi	r0, #0
  40762e:	f85d fb08 	ldr.w	pc, [sp], #8
  407632:	bf00      	nop

00407634 <__aeabi_dcmpge>:
  407634:	f84d ed08 	str.w	lr, [sp, #-8]!
  407638:	f7ff ffce 	bl	4075d8 <__aeabi_cdrcmple>
  40763c:	bf94      	ite	ls
  40763e:	2001      	movls	r0, #1
  407640:	2000      	movhi	r0, #0
  407642:	f85d fb08 	ldr.w	pc, [sp], #8
  407646:	bf00      	nop

00407648 <__aeabi_dcmpgt>:
  407648:	f84d ed08 	str.w	lr, [sp, #-8]!
  40764c:	f7ff ffc4 	bl	4075d8 <__aeabi_cdrcmple>
  407650:	bf34      	ite	cc
  407652:	2001      	movcc	r0, #1
  407654:	2000      	movcs	r0, #0
  407656:	f85d fb08 	ldr.w	pc, [sp], #8
  40765a:	bf00      	nop

0040765c <__aeabi_d2iz>:
  40765c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407660:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407664:	d215      	bcs.n	407692 <__aeabi_d2iz+0x36>
  407666:	d511      	bpl.n	40768c <__aeabi_d2iz+0x30>
  407668:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40766c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407670:	d912      	bls.n	407698 <__aeabi_d2iz+0x3c>
  407672:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40767a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40767e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407682:	fa23 f002 	lsr.w	r0, r3, r2
  407686:	bf18      	it	ne
  407688:	4240      	negne	r0, r0
  40768a:	4770      	bx	lr
  40768c:	f04f 0000 	mov.w	r0, #0
  407690:	4770      	bx	lr
  407692:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407696:	d105      	bne.n	4076a4 <__aeabi_d2iz+0x48>
  407698:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40769c:	bf08      	it	eq
  40769e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  4076a2:	4770      	bx	lr
  4076a4:	f04f 0000 	mov.w	r0, #0
  4076a8:	4770      	bx	lr
  4076aa:	bf00      	nop

004076ac <__aeabi_uldivmod>:
  4076ac:	b94b      	cbnz	r3, 4076c2 <__aeabi_uldivmod+0x16>
  4076ae:	b942      	cbnz	r2, 4076c2 <__aeabi_uldivmod+0x16>
  4076b0:	2900      	cmp	r1, #0
  4076b2:	bf08      	it	eq
  4076b4:	2800      	cmpeq	r0, #0
  4076b6:	d002      	beq.n	4076be <__aeabi_uldivmod+0x12>
  4076b8:	f04f 31ff 	mov.w	r1, #4294967295
  4076bc:	4608      	mov	r0, r1
  4076be:	f000 b83b 	b.w	407738 <__aeabi_idiv0>
  4076c2:	b082      	sub	sp, #8
  4076c4:	46ec      	mov	ip, sp
  4076c6:	e92d 5000 	stmdb	sp!, {ip, lr}
  4076ca:	f000 f81d 	bl	407708 <__gnu_uldivmod_helper>
  4076ce:	f8dd e004 	ldr.w	lr, [sp, #4]
  4076d2:	b002      	add	sp, #8
  4076d4:	bc0c      	pop	{r2, r3}
  4076d6:	4770      	bx	lr

004076d8 <__gnu_ldivmod_helper>:
  4076d8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  4076dc:	9e08      	ldr	r6, [sp, #32]
  4076de:	4614      	mov	r4, r2
  4076e0:	461d      	mov	r5, r3
  4076e2:	4680      	mov	r8, r0
  4076e4:	4689      	mov	r9, r1
  4076e6:	f000 f829 	bl	40773c <__divdi3>
  4076ea:	fb04 f301 	mul.w	r3, r4, r1
  4076ee:	fba4 ab00 	umull	sl, fp, r4, r0
  4076f2:	fb00 3205 	mla	r2, r0, r5, r3
  4076f6:	4493      	add	fp, r2
  4076f8:	ebb8 080a 	subs.w	r8, r8, sl
  4076fc:	eb69 090b 	sbc.w	r9, r9, fp
  407700:	e9c6 8900 	strd	r8, r9, [r6]
  407704:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00407708 <__gnu_uldivmod_helper>:
  407708:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  40770c:	9e08      	ldr	r6, [sp, #32]
  40770e:	4614      	mov	r4, r2
  407710:	461d      	mov	r5, r3
  407712:	4680      	mov	r8, r0
  407714:	4689      	mov	r9, r1
  407716:	f000 f961 	bl	4079dc <__udivdi3>
  40771a:	fb00 f505 	mul.w	r5, r0, r5
  40771e:	fba0 ab04 	umull	sl, fp, r0, r4
  407722:	fb04 5401 	mla	r4, r4, r1, r5
  407726:	44a3      	add	fp, r4
  407728:	ebb8 080a 	subs.w	r8, r8, sl
  40772c:	eb69 090b 	sbc.w	r9, r9, fp
  407730:	e9c6 8900 	strd	r8, r9, [r6]
  407734:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00407738 <__aeabi_idiv0>:
  407738:	4770      	bx	lr
  40773a:	bf00      	nop

0040773c <__divdi3>:
  40773c:	2900      	cmp	r1, #0
  40773e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407742:	f2c0 80a1 	blt.w	407888 <__divdi3+0x14c>
  407746:	2400      	movs	r4, #0
  407748:	2b00      	cmp	r3, #0
  40774a:	f2c0 8098 	blt.w	40787e <__divdi3+0x142>
  40774e:	4615      	mov	r5, r2
  407750:	4606      	mov	r6, r0
  407752:	460f      	mov	r7, r1
  407754:	2b00      	cmp	r3, #0
  407756:	d13f      	bne.n	4077d8 <__divdi3+0x9c>
  407758:	428a      	cmp	r2, r1
  40775a:	d958      	bls.n	40780e <__divdi3+0xd2>
  40775c:	fab2 f382 	clz	r3, r2
  407760:	b14b      	cbz	r3, 407776 <__divdi3+0x3a>
  407762:	f1c3 0220 	rsb	r2, r3, #32
  407766:	fa01 f703 	lsl.w	r7, r1, r3
  40776a:	fa20 f202 	lsr.w	r2, r0, r2
  40776e:	409d      	lsls	r5, r3
  407770:	fa00 f603 	lsl.w	r6, r0, r3
  407774:	4317      	orrs	r7, r2
  407776:	0c29      	lsrs	r1, r5, #16
  407778:	fbb7 f2f1 	udiv	r2, r7, r1
  40777c:	fb01 7712 	mls	r7, r1, r2, r7
  407780:	b2a8      	uxth	r0, r5
  407782:	fb00 f302 	mul.w	r3, r0, r2
  407786:	ea4f 4c16 	mov.w	ip, r6, lsr #16
  40778a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
  40778e:	42bb      	cmp	r3, r7
  407790:	d909      	bls.n	4077a6 <__divdi3+0x6a>
  407792:	197f      	adds	r7, r7, r5
  407794:	f102 3cff 	add.w	ip, r2, #4294967295
  407798:	f080 8105 	bcs.w	4079a6 <__divdi3+0x26a>
  40779c:	42bb      	cmp	r3, r7
  40779e:	f240 8102 	bls.w	4079a6 <__divdi3+0x26a>
  4077a2:	3a02      	subs	r2, #2
  4077a4:	442f      	add	r7, r5
  4077a6:	1aff      	subs	r7, r7, r3
  4077a8:	fbb7 f3f1 	udiv	r3, r7, r1
  4077ac:	fb01 7113 	mls	r1, r1, r3, r7
  4077b0:	fb00 f003 	mul.w	r0, r0, r3
  4077b4:	b2b6      	uxth	r6, r6
  4077b6:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  4077ba:	4288      	cmp	r0, r1
  4077bc:	d908      	bls.n	4077d0 <__divdi3+0x94>
  4077be:	1949      	adds	r1, r1, r5
  4077c0:	f103 37ff 	add.w	r7, r3, #4294967295
  4077c4:	f080 80f1 	bcs.w	4079aa <__divdi3+0x26e>
  4077c8:	4288      	cmp	r0, r1
  4077ca:	f240 80ee 	bls.w	4079aa <__divdi3+0x26e>
  4077ce:	3b02      	subs	r3, #2
  4077d0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4077d4:	2300      	movs	r3, #0
  4077d6:	e003      	b.n	4077e0 <__divdi3+0xa4>
  4077d8:	428b      	cmp	r3, r1
  4077da:	d90a      	bls.n	4077f2 <__divdi3+0xb6>
  4077dc:	2300      	movs	r3, #0
  4077de:	461a      	mov	r2, r3
  4077e0:	4610      	mov	r0, r2
  4077e2:	4619      	mov	r1, r3
  4077e4:	b114      	cbz	r4, 4077ec <__divdi3+0xb0>
  4077e6:	4240      	negs	r0, r0
  4077e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4077ec:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4077f0:	4770      	bx	lr
  4077f2:	fab3 f883 	clz	r8, r3
  4077f6:	f1b8 0f00 	cmp.w	r8, #0
  4077fa:	f040 8088 	bne.w	40790e <__divdi3+0x1d2>
  4077fe:	428b      	cmp	r3, r1
  407800:	d302      	bcc.n	407808 <__divdi3+0xcc>
  407802:	4282      	cmp	r2, r0
  407804:	f200 80e2 	bhi.w	4079cc <__divdi3+0x290>
  407808:	2300      	movs	r3, #0
  40780a:	2201      	movs	r2, #1
  40780c:	e7e8      	b.n	4077e0 <__divdi3+0xa4>
  40780e:	b912      	cbnz	r2, 407816 <__divdi3+0xda>
  407810:	2301      	movs	r3, #1
  407812:	fbb3 f5f2 	udiv	r5, r3, r2
  407816:	fab5 f285 	clz	r2, r5
  40781a:	2a00      	cmp	r2, #0
  40781c:	d13a      	bne.n	407894 <__divdi3+0x158>
  40781e:	1b7f      	subs	r7, r7, r5
  407820:	0c28      	lsrs	r0, r5, #16
  407822:	fa1f fc85 	uxth.w	ip, r5
  407826:	2301      	movs	r3, #1
  407828:	fbb7 f1f0 	udiv	r1, r7, r0
  40782c:	fb00 7711 	mls	r7, r0, r1, r7
  407830:	fb0c f201 	mul.w	r2, ip, r1
  407834:	ea4f 4816 	mov.w	r8, r6, lsr #16
  407838:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40783c:	42ba      	cmp	r2, r7
  40783e:	d907      	bls.n	407850 <__divdi3+0x114>
  407840:	197f      	adds	r7, r7, r5
  407842:	f101 38ff 	add.w	r8, r1, #4294967295
  407846:	d202      	bcs.n	40784e <__divdi3+0x112>
  407848:	42ba      	cmp	r2, r7
  40784a:	f200 80c4 	bhi.w	4079d6 <__divdi3+0x29a>
  40784e:	4641      	mov	r1, r8
  407850:	1abf      	subs	r7, r7, r2
  407852:	fbb7 f2f0 	udiv	r2, r7, r0
  407856:	fb00 7012 	mls	r0, r0, r2, r7
  40785a:	fb0c fc02 	mul.w	ip, ip, r2
  40785e:	b2b6      	uxth	r6, r6
  407860:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  407864:	4584      	cmp	ip, r0
  407866:	d907      	bls.n	407878 <__divdi3+0x13c>
  407868:	1940      	adds	r0, r0, r5
  40786a:	f102 37ff 	add.w	r7, r2, #4294967295
  40786e:	d202      	bcs.n	407876 <__divdi3+0x13a>
  407870:	4584      	cmp	ip, r0
  407872:	f200 80ae 	bhi.w	4079d2 <__divdi3+0x296>
  407876:	463a      	mov	r2, r7
  407878:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  40787c:	e7b0      	b.n	4077e0 <__divdi3+0xa4>
  40787e:	43e4      	mvns	r4, r4
  407880:	4252      	negs	r2, r2
  407882:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407886:	e762      	b.n	40774e <__divdi3+0x12>
  407888:	4240      	negs	r0, r0
  40788a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40788e:	f04f 34ff 	mov.w	r4, #4294967295
  407892:	e759      	b.n	407748 <__divdi3+0xc>
  407894:	4095      	lsls	r5, r2
  407896:	f1c2 0920 	rsb	r9, r2, #32
  40789a:	fa27 f109 	lsr.w	r1, r7, r9
  40789e:	fa26 f909 	lsr.w	r9, r6, r9
  4078a2:	4097      	lsls	r7, r2
  4078a4:	0c28      	lsrs	r0, r5, #16
  4078a6:	fbb1 f8f0 	udiv	r8, r1, r0
  4078aa:	fb00 1118 	mls	r1, r0, r8, r1
  4078ae:	fa1f fc85 	uxth.w	ip, r5
  4078b2:	fb0c f308 	mul.w	r3, ip, r8
  4078b6:	ea49 0907 	orr.w	r9, r9, r7
  4078ba:	ea4f 4719 	mov.w	r7, r9, lsr #16
  4078be:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
  4078c2:	428b      	cmp	r3, r1
  4078c4:	fa06 f602 	lsl.w	r6, r6, r2
  4078c8:	d908      	bls.n	4078dc <__divdi3+0x1a0>
  4078ca:	1949      	adds	r1, r1, r5
  4078cc:	f108 32ff 	add.w	r2, r8, #4294967295
  4078d0:	d27a      	bcs.n	4079c8 <__divdi3+0x28c>
  4078d2:	428b      	cmp	r3, r1
  4078d4:	d978      	bls.n	4079c8 <__divdi3+0x28c>
  4078d6:	f1a8 0802 	sub.w	r8, r8, #2
  4078da:	4429      	add	r1, r5
  4078dc:	1ac9      	subs	r1, r1, r3
  4078de:	fbb1 f3f0 	udiv	r3, r1, r0
  4078e2:	fb00 1713 	mls	r7, r0, r3, r1
  4078e6:	fb0c f203 	mul.w	r2, ip, r3
  4078ea:	fa1f f989 	uxth.w	r9, r9
  4078ee:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
  4078f2:	42ba      	cmp	r2, r7
  4078f4:	d907      	bls.n	407906 <__divdi3+0x1ca>
  4078f6:	197f      	adds	r7, r7, r5
  4078f8:	f103 31ff 	add.w	r1, r3, #4294967295
  4078fc:	d260      	bcs.n	4079c0 <__divdi3+0x284>
  4078fe:	42ba      	cmp	r2, r7
  407900:	d95e      	bls.n	4079c0 <__divdi3+0x284>
  407902:	3b02      	subs	r3, #2
  407904:	442f      	add	r7, r5
  407906:	1abf      	subs	r7, r7, r2
  407908:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40790c:	e78c      	b.n	407828 <__divdi3+0xec>
  40790e:	f1c8 0220 	rsb	r2, r8, #32
  407912:	fa25 f102 	lsr.w	r1, r5, r2
  407916:	fa03 fc08 	lsl.w	ip, r3, r8
  40791a:	fa27 f302 	lsr.w	r3, r7, r2
  40791e:	fa20 f202 	lsr.w	r2, r0, r2
  407922:	fa07 f708 	lsl.w	r7, r7, r8
  407926:	ea41 0c0c 	orr.w	ip, r1, ip
  40792a:	ea4f 491c 	mov.w	r9, ip, lsr #16
  40792e:	fbb3 f1f9 	udiv	r1, r3, r9
  407932:	fb09 3311 	mls	r3, r9, r1, r3
  407936:	fa1f fa8c 	uxth.w	sl, ip
  40793a:	fb0a fb01 	mul.w	fp, sl, r1
  40793e:	4317      	orrs	r7, r2
  407940:	0c3a      	lsrs	r2, r7, #16
  407942:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  407946:	459b      	cmp	fp, r3
  407948:	fa05 f008 	lsl.w	r0, r5, r8
  40794c:	d908      	bls.n	407960 <__divdi3+0x224>
  40794e:	eb13 030c 	adds.w	r3, r3, ip
  407952:	f101 32ff 	add.w	r2, r1, #4294967295
  407956:	d235      	bcs.n	4079c4 <__divdi3+0x288>
  407958:	459b      	cmp	fp, r3
  40795a:	d933      	bls.n	4079c4 <__divdi3+0x288>
  40795c:	3902      	subs	r1, #2
  40795e:	4463      	add	r3, ip
  407960:	ebcb 0303 	rsb	r3, fp, r3
  407964:	fbb3 f2f9 	udiv	r2, r3, r9
  407968:	fb09 3312 	mls	r3, r9, r2, r3
  40796c:	fb0a fa02 	mul.w	sl, sl, r2
  407970:	b2bf      	uxth	r7, r7
  407972:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  407976:	45ba      	cmp	sl, r7
  407978:	d908      	bls.n	40798c <__divdi3+0x250>
  40797a:	eb17 070c 	adds.w	r7, r7, ip
  40797e:	f102 33ff 	add.w	r3, r2, #4294967295
  407982:	d21b      	bcs.n	4079bc <__divdi3+0x280>
  407984:	45ba      	cmp	sl, r7
  407986:	d919      	bls.n	4079bc <__divdi3+0x280>
  407988:	3a02      	subs	r2, #2
  40798a:	4467      	add	r7, ip
  40798c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  407990:	fba5 0100 	umull	r0, r1, r5, r0
  407994:	ebca 0707 	rsb	r7, sl, r7
  407998:	428f      	cmp	r7, r1
  40799a:	f04f 0300 	mov.w	r3, #0
  40799e:	d30a      	bcc.n	4079b6 <__divdi3+0x27a>
  4079a0:	d005      	beq.n	4079ae <__divdi3+0x272>
  4079a2:	462a      	mov	r2, r5
  4079a4:	e71c      	b.n	4077e0 <__divdi3+0xa4>
  4079a6:	4662      	mov	r2, ip
  4079a8:	e6fd      	b.n	4077a6 <__divdi3+0x6a>
  4079aa:	463b      	mov	r3, r7
  4079ac:	e710      	b.n	4077d0 <__divdi3+0x94>
  4079ae:	fa06 f608 	lsl.w	r6, r6, r8
  4079b2:	4286      	cmp	r6, r0
  4079b4:	d2f5      	bcs.n	4079a2 <__divdi3+0x266>
  4079b6:	1e6a      	subs	r2, r5, #1
  4079b8:	2300      	movs	r3, #0
  4079ba:	e711      	b.n	4077e0 <__divdi3+0xa4>
  4079bc:	461a      	mov	r2, r3
  4079be:	e7e5      	b.n	40798c <__divdi3+0x250>
  4079c0:	460b      	mov	r3, r1
  4079c2:	e7a0      	b.n	407906 <__divdi3+0x1ca>
  4079c4:	4611      	mov	r1, r2
  4079c6:	e7cb      	b.n	407960 <__divdi3+0x224>
  4079c8:	4690      	mov	r8, r2
  4079ca:	e787      	b.n	4078dc <__divdi3+0x1a0>
  4079cc:	4643      	mov	r3, r8
  4079ce:	4642      	mov	r2, r8
  4079d0:	e706      	b.n	4077e0 <__divdi3+0xa4>
  4079d2:	3a02      	subs	r2, #2
  4079d4:	e750      	b.n	407878 <__divdi3+0x13c>
  4079d6:	3902      	subs	r1, #2
  4079d8:	442f      	add	r7, r5
  4079da:	e739      	b.n	407850 <__divdi3+0x114>

004079dc <__udivdi3>:
  4079dc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4079e0:	4614      	mov	r4, r2
  4079e2:	4605      	mov	r5, r0
  4079e4:	460e      	mov	r6, r1
  4079e6:	2b00      	cmp	r3, #0
  4079e8:	d143      	bne.n	407a72 <__udivdi3+0x96>
  4079ea:	428a      	cmp	r2, r1
  4079ec:	d953      	bls.n	407a96 <__udivdi3+0xba>
  4079ee:	fab2 f782 	clz	r7, r2
  4079f2:	b157      	cbz	r7, 407a0a <__udivdi3+0x2e>
  4079f4:	f1c7 0620 	rsb	r6, r7, #32
  4079f8:	fa20 f606 	lsr.w	r6, r0, r6
  4079fc:	fa01 f307 	lsl.w	r3, r1, r7
  407a00:	fa02 f407 	lsl.w	r4, r2, r7
  407a04:	fa00 f507 	lsl.w	r5, r0, r7
  407a08:	431e      	orrs	r6, r3
  407a0a:	0c21      	lsrs	r1, r4, #16
  407a0c:	fbb6 f2f1 	udiv	r2, r6, r1
  407a10:	fb01 6612 	mls	r6, r1, r2, r6
  407a14:	b2a0      	uxth	r0, r4
  407a16:	fb00 f302 	mul.w	r3, r0, r2
  407a1a:	0c2f      	lsrs	r7, r5, #16
  407a1c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  407a20:	42b3      	cmp	r3, r6
  407a22:	d909      	bls.n	407a38 <__udivdi3+0x5c>
  407a24:	1936      	adds	r6, r6, r4
  407a26:	f102 37ff 	add.w	r7, r2, #4294967295
  407a2a:	f080 80fd 	bcs.w	407c28 <__udivdi3+0x24c>
  407a2e:	42b3      	cmp	r3, r6
  407a30:	f240 80fa 	bls.w	407c28 <__udivdi3+0x24c>
  407a34:	3a02      	subs	r2, #2
  407a36:	4426      	add	r6, r4
  407a38:	1af6      	subs	r6, r6, r3
  407a3a:	fbb6 f3f1 	udiv	r3, r6, r1
  407a3e:	fb01 6113 	mls	r1, r1, r3, r6
  407a42:	fb00 f003 	mul.w	r0, r0, r3
  407a46:	b2ad      	uxth	r5, r5
  407a48:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  407a4c:	4288      	cmp	r0, r1
  407a4e:	d908      	bls.n	407a62 <__udivdi3+0x86>
  407a50:	1909      	adds	r1, r1, r4
  407a52:	f103 36ff 	add.w	r6, r3, #4294967295
  407a56:	f080 80e9 	bcs.w	407c2c <__udivdi3+0x250>
  407a5a:	4288      	cmp	r0, r1
  407a5c:	f240 80e6 	bls.w	407c2c <__udivdi3+0x250>
  407a60:	3b02      	subs	r3, #2
  407a62:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  407a66:	2300      	movs	r3, #0
  407a68:	4610      	mov	r0, r2
  407a6a:	4619      	mov	r1, r3
  407a6c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407a70:	4770      	bx	lr
  407a72:	428b      	cmp	r3, r1
  407a74:	d84c      	bhi.n	407b10 <__udivdi3+0x134>
  407a76:	fab3 f683 	clz	r6, r3
  407a7a:	2e00      	cmp	r6, #0
  407a7c:	d14f      	bne.n	407b1e <__udivdi3+0x142>
  407a7e:	428b      	cmp	r3, r1
  407a80:	d302      	bcc.n	407a88 <__udivdi3+0xac>
  407a82:	4282      	cmp	r2, r0
  407a84:	f200 80dd 	bhi.w	407c42 <__udivdi3+0x266>
  407a88:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407a8c:	2300      	movs	r3, #0
  407a8e:	2201      	movs	r2, #1
  407a90:	4610      	mov	r0, r2
  407a92:	4619      	mov	r1, r3
  407a94:	4770      	bx	lr
  407a96:	b912      	cbnz	r2, 407a9e <__udivdi3+0xc2>
  407a98:	2401      	movs	r4, #1
  407a9a:	fbb4 f4f2 	udiv	r4, r4, r2
  407a9e:	fab4 f284 	clz	r2, r4
  407aa2:	2a00      	cmp	r2, #0
  407aa4:	f040 8082 	bne.w	407bac <__udivdi3+0x1d0>
  407aa8:	1b09      	subs	r1, r1, r4
  407aaa:	0c26      	lsrs	r6, r4, #16
  407aac:	b2a7      	uxth	r7, r4
  407aae:	2301      	movs	r3, #1
  407ab0:	fbb1 f0f6 	udiv	r0, r1, r6
  407ab4:	fb06 1110 	mls	r1, r6, r0, r1
  407ab8:	fb07 f200 	mul.w	r2, r7, r0
  407abc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
  407ac0:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
  407ac4:	428a      	cmp	r2, r1
  407ac6:	d907      	bls.n	407ad8 <__udivdi3+0xfc>
  407ac8:	1909      	adds	r1, r1, r4
  407aca:	f100 3cff 	add.w	ip, r0, #4294967295
  407ace:	d202      	bcs.n	407ad6 <__udivdi3+0xfa>
  407ad0:	428a      	cmp	r2, r1
  407ad2:	f200 80c8 	bhi.w	407c66 <__udivdi3+0x28a>
  407ad6:	4660      	mov	r0, ip
  407ad8:	1a89      	subs	r1, r1, r2
  407ada:	fbb1 f2f6 	udiv	r2, r1, r6
  407ade:	fb06 1112 	mls	r1, r6, r2, r1
  407ae2:	fb07 f702 	mul.w	r7, r7, r2
  407ae6:	b2ad      	uxth	r5, r5
  407ae8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  407aec:	42af      	cmp	r7, r5
  407aee:	d908      	bls.n	407b02 <__udivdi3+0x126>
  407af0:	192c      	adds	r4, r5, r4
  407af2:	f102 31ff 	add.w	r1, r2, #4294967295
  407af6:	f080 809b 	bcs.w	407c30 <__udivdi3+0x254>
  407afa:	42a7      	cmp	r7, r4
  407afc:	f240 8098 	bls.w	407c30 <__udivdi3+0x254>
  407b00:	3a02      	subs	r2, #2
  407b02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  407b06:	4610      	mov	r0, r2
  407b08:	4619      	mov	r1, r3
  407b0a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407b0e:	4770      	bx	lr
  407b10:	2300      	movs	r3, #0
  407b12:	461a      	mov	r2, r3
  407b14:	4610      	mov	r0, r2
  407b16:	4619      	mov	r1, r3
  407b18:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407b1c:	4770      	bx	lr
  407b1e:	f1c6 0520 	rsb	r5, r6, #32
  407b22:	fa22 f705 	lsr.w	r7, r2, r5
  407b26:	fa03 f406 	lsl.w	r4, r3, r6
  407b2a:	fa21 f305 	lsr.w	r3, r1, r5
  407b2e:	fa01 fb06 	lsl.w	fp, r1, r6
  407b32:	fa20 f505 	lsr.w	r5, r0, r5
  407b36:	433c      	orrs	r4, r7
  407b38:	ea4f 4814 	mov.w	r8, r4, lsr #16
  407b3c:	fbb3 fcf8 	udiv	ip, r3, r8
  407b40:	fb08 331c 	mls	r3, r8, ip, r3
  407b44:	fa1f f984 	uxth.w	r9, r4
  407b48:	fb09 fa0c 	mul.w	sl, r9, ip
  407b4c:	ea45 0b0b 	orr.w	fp, r5, fp
  407b50:	ea4f 451b 	mov.w	r5, fp, lsr #16
  407b54:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  407b58:	459a      	cmp	sl, r3
  407b5a:	fa02 f206 	lsl.w	r2, r2, r6
  407b5e:	d904      	bls.n	407b6a <__udivdi3+0x18e>
  407b60:	191b      	adds	r3, r3, r4
  407b62:	f10c 35ff 	add.w	r5, ip, #4294967295
  407b66:	d36f      	bcc.n	407c48 <__udivdi3+0x26c>
  407b68:	46ac      	mov	ip, r5
  407b6a:	ebca 0303 	rsb	r3, sl, r3
  407b6e:	fbb3 f5f8 	udiv	r5, r3, r8
  407b72:	fb08 3315 	mls	r3, r8, r5, r3
  407b76:	fb09 f905 	mul.w	r9, r9, r5
  407b7a:	fa1f fb8b 	uxth.w	fp, fp
  407b7e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
  407b82:	45b9      	cmp	r9, r7
  407b84:	d904      	bls.n	407b90 <__udivdi3+0x1b4>
  407b86:	193f      	adds	r7, r7, r4
  407b88:	f105 33ff 	add.w	r3, r5, #4294967295
  407b8c:	d362      	bcc.n	407c54 <__udivdi3+0x278>
  407b8e:	461d      	mov	r5, r3
  407b90:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  407b94:	fbac 2302 	umull	r2, r3, ip, r2
  407b98:	ebc9 0707 	rsb	r7, r9, r7
  407b9c:	429f      	cmp	r7, r3
  407b9e:	f04f 0500 	mov.w	r5, #0
  407ba2:	d34a      	bcc.n	407c3a <__udivdi3+0x25e>
  407ba4:	d046      	beq.n	407c34 <__udivdi3+0x258>
  407ba6:	4662      	mov	r2, ip
  407ba8:	462b      	mov	r3, r5
  407baa:	e75d      	b.n	407a68 <__udivdi3+0x8c>
  407bac:	4094      	lsls	r4, r2
  407bae:	f1c2 0920 	rsb	r9, r2, #32
  407bb2:	fa21 fc09 	lsr.w	ip, r1, r9
  407bb6:	4091      	lsls	r1, r2
  407bb8:	fa20 f909 	lsr.w	r9, r0, r9
  407bbc:	0c26      	lsrs	r6, r4, #16
  407bbe:	fbbc f8f6 	udiv	r8, ip, r6
  407bc2:	fb06 cc18 	mls	ip, r6, r8, ip
  407bc6:	b2a7      	uxth	r7, r4
  407bc8:	fb07 f308 	mul.w	r3, r7, r8
  407bcc:	ea49 0901 	orr.w	r9, r9, r1
  407bd0:	ea4f 4119 	mov.w	r1, r9, lsr #16
  407bd4:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
  407bd8:	4563      	cmp	r3, ip
  407bda:	fa00 f502 	lsl.w	r5, r0, r2
  407bde:	d909      	bls.n	407bf4 <__udivdi3+0x218>
  407be0:	eb1c 0c04 	adds.w	ip, ip, r4
  407be4:	f108 32ff 	add.w	r2, r8, #4294967295
  407be8:	d23b      	bcs.n	407c62 <__udivdi3+0x286>
  407bea:	4563      	cmp	r3, ip
  407bec:	d939      	bls.n	407c62 <__udivdi3+0x286>
  407bee:	f1a8 0802 	sub.w	r8, r8, #2
  407bf2:	44a4      	add	ip, r4
  407bf4:	ebc3 0c0c 	rsb	ip, r3, ip
  407bf8:	fbbc f3f6 	udiv	r3, ip, r6
  407bfc:	fb06 c113 	mls	r1, r6, r3, ip
  407c00:	fb07 f203 	mul.w	r2, r7, r3
  407c04:	fa1f f989 	uxth.w	r9, r9
  407c08:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
  407c0c:	428a      	cmp	r2, r1
  407c0e:	d907      	bls.n	407c20 <__udivdi3+0x244>
  407c10:	1909      	adds	r1, r1, r4
  407c12:	f103 30ff 	add.w	r0, r3, #4294967295
  407c16:	d222      	bcs.n	407c5e <__udivdi3+0x282>
  407c18:	428a      	cmp	r2, r1
  407c1a:	d920      	bls.n	407c5e <__udivdi3+0x282>
  407c1c:	3b02      	subs	r3, #2
  407c1e:	4421      	add	r1, r4
  407c20:	1a89      	subs	r1, r1, r2
  407c22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  407c26:	e743      	b.n	407ab0 <__udivdi3+0xd4>
  407c28:	463a      	mov	r2, r7
  407c2a:	e705      	b.n	407a38 <__udivdi3+0x5c>
  407c2c:	4633      	mov	r3, r6
  407c2e:	e718      	b.n	407a62 <__udivdi3+0x86>
  407c30:	460a      	mov	r2, r1
  407c32:	e766      	b.n	407b02 <__udivdi3+0x126>
  407c34:	40b0      	lsls	r0, r6
  407c36:	4290      	cmp	r0, r2
  407c38:	d2b5      	bcs.n	407ba6 <__udivdi3+0x1ca>
  407c3a:	f10c 32ff 	add.w	r2, ip, #4294967295
  407c3e:	2300      	movs	r3, #0
  407c40:	e712      	b.n	407a68 <__udivdi3+0x8c>
  407c42:	4633      	mov	r3, r6
  407c44:	4632      	mov	r2, r6
  407c46:	e70f      	b.n	407a68 <__udivdi3+0x8c>
  407c48:	459a      	cmp	sl, r3
  407c4a:	d98d      	bls.n	407b68 <__udivdi3+0x18c>
  407c4c:	f1ac 0c02 	sub.w	ip, ip, #2
  407c50:	4423      	add	r3, r4
  407c52:	e78a      	b.n	407b6a <__udivdi3+0x18e>
  407c54:	45b9      	cmp	r9, r7
  407c56:	d99a      	bls.n	407b8e <__udivdi3+0x1b2>
  407c58:	3d02      	subs	r5, #2
  407c5a:	4427      	add	r7, r4
  407c5c:	e798      	b.n	407b90 <__udivdi3+0x1b4>
  407c5e:	4603      	mov	r3, r0
  407c60:	e7de      	b.n	407c20 <__udivdi3+0x244>
  407c62:	4690      	mov	r8, r2
  407c64:	e7c6      	b.n	407bf4 <__udivdi3+0x218>
  407c66:	3802      	subs	r0, #2
  407c68:	4421      	add	r1, r4
  407c6a:	e735      	b.n	407ad8 <__udivdi3+0xfc>
  407c6c:	616d6f43 	.word	0x616d6f43
  407c70:	6620646e 	.word	0x6620646e
  407c74:	616d726f 	.word	0x616d726f
  407c78:	72652074 	.word	0x72652074
  407c7c:	21726f72 	.word	0x21726f72
  407c80:	00000d0a 	.word	0x00000d0a
  407c84:	41525453 	.word	0x41525453
  407c88:	00444546 	.word	0x00444546
  407c8c:	75716341 	.word	0x75716341
  407c90:	74697369 	.word	0x74697369
  407c94:	206e6f69 	.word	0x206e6f69
  407c98:	72617473 	.word	0x72617473
  407c9c:	0a646574 	.word	0x0a646574
  407ca0:	0000000d 	.word	0x0000000d
  407ca4:	75716341 	.word	0x75716341
  407ca8:	74697369 	.word	0x74697369
  407cac:	206e6f69 	.word	0x206e6f69
  407cb0:	706f7473 	.word	0x706f7473
  407cb4:	0d0a6465 	.word	0x0d0a6465
  407cb8:	00000000 	.word	0x00000000
  407cbc:	706d6153 	.word	0x706d6153
  407cc0:	7020656c 	.word	0x7020656c
  407cc4:	6f697265 	.word	0x6f697265
  407cc8:	65732064 	.word	0x65732064
  407ccc:	6f742074 	.word	0x6f742074
  407cd0:	20752520 	.word	0x20752520
  407cd4:	0d0a5375 	.word	0x0d0a5375
  407cd8:	00000000 	.word	0x00000000
  407cdc:	20514144 	.word	0x20514144
  407ce0:	6c6c6977 	.word	0x6c6c6977
  407ce4:	65746120 	.word	0x65746120
  407ce8:	2074706d 	.word	0x2074706d
  407cec:	74206f74 	.word	0x74206f74
  407cf0:	20656b61 	.word	0x20656b61
  407cf4:	73207525 	.word	0x73207525
  407cf8:	6c706d61 	.word	0x6c706d61
  407cfc:	70207365 	.word	0x70207365
  407d00:	63207265 	.word	0x63207265
  407d04:	6e6e6168 	.word	0x6e6e6168
  407d08:	0d0a6c65 	.word	0x0d0a6c65
  407d0c:	00000000 	.word	0x00000000
  407d10:	20514144 	.word	0x20514144
  407d14:	6c6c6977 	.word	0x6c6c6977
  407d18:	6d617320 	.word	0x6d617320
  407d1c:	20656c70 	.word	0x20656c70
  407d20:	206c6c61 	.word	0x206c6c61
  407d24:	62656e65 	.word	0x62656e65
  407d28:	2064656c 	.word	0x2064656c
  407d2c:	6e616863 	.word	0x6e616863
  407d30:	736c656e 	.word	0x736c656e
  407d34:	20752520 	.word	0x20752520
  407d38:	656d6974 	.word	0x656d6974
  407d3c:	000d0a73 	.word	0x000d0a73
  407d40:	75716553 	.word	0x75716553
  407d44:	65636e65 	.word	0x65636e65
  407d48:	74657320 	.word	0x74657320
  407d4c:	3a6f7420 	.word	0x3a6f7420
  407d50:	00000020 	.word	0x00000020
  407d54:	00207525 	.word	0x00207525
  407d58:	20434144 	.word	0x20434144
  407d5c:	6e616863 	.word	0x6e616863
  407d60:	206c656e 	.word	0x206c656e
  407d64:	73207525 	.word	0x73207525
  407d68:	74207465 	.word	0x74207465
  407d6c:	7525206f 	.word	0x7525206f
  407d70:	0a566d20 	.word	0x0a566d20
  407d74:	0000000d 	.word	0x0000000d

00407d78 <_global_impure_ptr>:
  407d78:	200000c0 20200043                                ... C.

00407d7e <blanks.6743>:
  407d7e:	20202020 20202020 20202020 20202020                     

00407d8e <zeroes.6744>:
  407d8e:	30303030 30303030 30303030 30303030     0000000000000000
  407d9e:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  407dae:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  407dbe:	32313000 36353433 61393837 65646362     .0123456789abcde
  407dce:	00300066                                f.0.

00407dd2 <_ctype_>:
  407dd2:	20202000 20202020 28282020 20282828     .         ((((( 
  407de2:	20202020 20202020 20202020 20202020                     
  407df2:	10108820 10101010 10101010 10101010      ...............
  407e02:	04040410 04040404 10040404 10101010     ................
  407e12:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407e22:	01010101 01010101 01010101 10101010     ................
  407e32:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407e42:	02020202 02020202 02020202 10101010     ................
  407e52:	00000020 00000000 00000000 00000000      ...............
	...
  407ed2:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
  407ee2:	00584953 0005002e                                SIX...

00407ee8 <p05.5289>:
  407ee8:	00000005 00000019 0000007d 00000000     ........}.......

00407ef8 <__mprec_tens>:
  407ef8:	00000000 3ff00000 00000000 40240000     .......?......$@
  407f08:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  407f18:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  407f28:	00000000 412e8480 00000000 416312d0     .......A......cA
  407f38:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  407f48:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  407f58:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  407f68:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  407f78:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  407f88:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  407f98:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  407fa8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  407fb8:	79d99db4 44ea7843                       ...yCx.D

00407fc0 <__mprec_tinytens>:
  407fc0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
  407fd0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
  407fe0:	64ac6f43 0ac80628                       Co.d(...

00407fe8 <__mprec_bigtens>:
  407fe8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  407ff8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408008:	7f73bf3c 75154fdd                       <.s..O.u

00408010 <blanks.6687>:
  408010:	20202020 20202020 20202020 20202020                     

00408020 <zeroes.6688>:
  408020:	30303030 30303030 30303030 30303030     0000000000000000

00408030 <_init>:
  408030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408032:	bf00      	nop
  408034:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408036:	bc08      	pop	{r3}
  408038:	469e      	mov	lr, r3
  40803a:	4770      	bx	lr

0040803c <__init_array_start>:
  40803c:	00404489 	.word	0x00404489

00408040 <__frame_dummy_init_array_entry>:
  408040:	00400149                                I.@.

00408044 <_fini>:
  408044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408046:	bf00      	nop
  408048:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40804a:	bc08      	pop	{r3}
  40804c:	469e      	mov	lr, r3
  40804e:	4770      	bx	lr

00408050 <__fini_array_start>:
  408050:	00400121 	.word	0x00400121

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <sequencePosition>:
2000000c:	0001 0000                                   ....

20000010 <udi_api_cdc_data>:
20000010:	0b29 0040 07dd 0040 07f9 0040 07fd 0040     ).@...@...@...@.
20000020:	0a09 0040                                   ..@.

20000024 <udi_api_cdc_comm>:
20000024:	0781 0040 07cd 0040 0801 0040 07fd 0040     ..@...@...@...@.
20000034:	0000 0000                                   ....

20000038 <udc_config>:
20000038:	0054 2000 004c 2000 0000 0000               T.. L.. ....

20000044 <udi_apis>:
20000044:	0024 2000 0010 2000                         $.. ... 

2000004c <udc_config_fs>:
2000004c:	0068 2000 0044 2000                         h.. D.. 

20000054 <udc_device_desc>:
20000054:	0112 0200 0002 4000 03eb 2404 0100 0000     .......@...$....
20000064:	0100 0000                                   ....

20000068 <udc_desc_fs>:
20000068:	0209 0043 0102 8000 0932 0004 0100 0202     ..C.....2.......
20000078:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000088:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000098:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
200000a8:	0040 0000                                   @...

200000ac <udc_string_desc_languageid>:
200000ac:	0304 0409                                   ....

200000b0 <g_interrupt_enabled>:
200000b0:	0001 0000                                   ....

200000b4 <SystemCoreClock>:
200000b4:	0900 003d                                   ..=.

200000b8 <_impure_ptr>:
200000b8:	00c0 2000 0000 0000                         ... ....

200000c0 <impure_data>:
200000c0:	0000 0000 03ac 2000 0414 2000 047c 2000     ....... ... |.. 
	...
200000f4:	7d7c 0040 0000 0000 0000 0000 0000 0000     |}@.............
	...
20000168:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000178:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004e8 <__ctype_ptr__>:
200004e8:	7dd2 0040                                   .}@.

200004ec <lc_ctype_charset>:
200004ec:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

2000050c <__mb_cur_max>:
2000050c:	0001 0000                                   ....

20000510 <lc_message_charset>:
20000510:	5341 4943 0049 0000 0000 0000 0000 0000     ASCII...........
	...

20000530 <lconv>:
20000530:	7ee6 0040 7ee7 0040 7ee7 0040 7ee7 0040     .~@..~@..~@..~@.
20000540:	7ee7 0040 7ee7 0040 7ee7 0040 7ee7 0040     .~@..~@..~@..~@.
20000550:	7ee7 0040 7ee7 0040 ffff ffff ffff ffff     .~@..~@.........
20000560:	ffff ffff ffff 0000                         ........

20000568 <__malloc_av_>:
	...
20000570:	0568 2000 0568 2000 0570 2000 0570 2000     h.. h.. p.. p.. 
20000580:	0578 2000 0578 2000 0580 2000 0580 2000     x.. x.. ... ... 
20000590:	0588 2000 0588 2000 0590 2000 0590 2000     ... ... ... ... 
200005a0:	0598 2000 0598 2000 05a0 2000 05a0 2000     ... ... ... ... 
200005b0:	05a8 2000 05a8 2000 05b0 2000 05b0 2000     ... ... ... ... 
200005c0:	05b8 2000 05b8 2000 05c0 2000 05c0 2000     ... ... ... ... 
200005d0:	05c8 2000 05c8 2000 05d0 2000 05d0 2000     ... ... ... ... 
200005e0:	05d8 2000 05d8 2000 05e0 2000 05e0 2000     ... ... ... ... 
200005f0:	05e8 2000 05e8 2000 05f0 2000 05f0 2000     ... ... ... ... 
20000600:	05f8 2000 05f8 2000 0600 2000 0600 2000     ... ... ... ... 
20000610:	0608 2000 0608 2000 0610 2000 0610 2000     ... ... ... ... 
20000620:	0618 2000 0618 2000 0620 2000 0620 2000     ... ...  ..  .. 
20000630:	0628 2000 0628 2000 0630 2000 0630 2000     (.. (.. 0.. 0.. 
20000640:	0638 2000 0638 2000 0640 2000 0640 2000     8.. 8.. @.. @.. 
20000650:	0648 2000 0648 2000 0650 2000 0650 2000     H.. H.. P.. P.. 
20000660:	0658 2000 0658 2000 0660 2000 0660 2000     X.. X.. `.. `.. 
20000670:	0668 2000 0668 2000 0670 2000 0670 2000     h.. h.. p.. p.. 
20000680:	0678 2000 0678 2000 0680 2000 0680 2000     x.. x.. ... ... 
20000690:	0688 2000 0688 2000 0690 2000 0690 2000     ... ... ... ... 
200006a0:	0698 2000 0698 2000 06a0 2000 06a0 2000     ... ... ... ... 
200006b0:	06a8 2000 06a8 2000 06b0 2000 06b0 2000     ... ... ... ... 
200006c0:	06b8 2000 06b8 2000 06c0 2000 06c0 2000     ... ... ... ... 
200006d0:	06c8 2000 06c8 2000 06d0 2000 06d0 2000     ... ... ... ... 
200006e0:	06d8 2000 06d8 2000 06e0 2000 06e0 2000     ... ... ... ... 
200006f0:	06e8 2000 06e8 2000 06f0 2000 06f0 2000     ... ... ... ... 
20000700:	06f8 2000 06f8 2000 0700 2000 0700 2000     ... ... ... ... 
20000710:	0708 2000 0708 2000 0710 2000 0710 2000     ... ... ... ... 
20000720:	0718 2000 0718 2000 0720 2000 0720 2000     ... ...  ..  .. 
20000730:	0728 2000 0728 2000 0730 2000 0730 2000     (.. (.. 0.. 0.. 
20000740:	0738 2000 0738 2000 0740 2000 0740 2000     8.. 8.. @.. @.. 
20000750:	0748 2000 0748 2000 0750 2000 0750 2000     H.. H.. P.. P.. 
20000760:	0758 2000 0758 2000 0760 2000 0760 2000     X.. X.. `.. `.. 
20000770:	0768 2000 0768 2000 0770 2000 0770 2000     h.. h.. p.. p.. 
20000780:	0778 2000 0778 2000 0780 2000 0780 2000     x.. x.. ... ... 
20000790:	0788 2000 0788 2000 0790 2000 0790 2000     ... ... ... ... 
200007a0:	0798 2000 0798 2000 07a0 2000 07a0 2000     ... ... ... ... 
200007b0:	07a8 2000 07a8 2000 07b0 2000 07b0 2000     ... ... ... ... 
200007c0:	07b8 2000 07b8 2000 07c0 2000 07c0 2000     ... ... ... ... 
200007d0:	07c8 2000 07c8 2000 07d0 2000 07d0 2000     ... ... ... ... 
200007e0:	07d8 2000 07d8 2000 07e0 2000 07e0 2000     ... ... ... ... 
200007f0:	07e8 2000 07e8 2000 07f0 2000 07f0 2000     ... ... ... ... 
20000800:	07f8 2000 07f8 2000 0800 2000 0800 2000     ... ... ... ... 
20000810:	0808 2000 0808 2000 0810 2000 0810 2000     ... ... ... ... 
20000820:	0818 2000 0818 2000 0820 2000 0820 2000     ... ...  ..  .. 
20000830:	0828 2000 0828 2000 0830 2000 0830 2000     (.. (.. 0.. 0.. 
20000840:	0838 2000 0838 2000 0840 2000 0840 2000     8.. 8.. @.. @.. 
20000850:	0848 2000 0848 2000 0850 2000 0850 2000     H.. H.. P.. P.. 
20000860:	0858 2000 0858 2000 0860 2000 0860 2000     X.. X.. `.. `.. 
20000870:	0868 2000 0868 2000 0870 2000 0870 2000     h.. h.. p.. p.. 
20000880:	0878 2000 0878 2000 0880 2000 0880 2000     x.. x.. ... ... 
20000890:	0888 2000 0888 2000 0890 2000 0890 2000     ... ... ... ... 
200008a0:	0898 2000 0898 2000 08a0 2000 08a0 2000     ... ... ... ... 
200008b0:	08a8 2000 08a8 2000 08b0 2000 08b0 2000     ... ... ... ... 
200008c0:	08b8 2000 08b8 2000 08c0 2000 08c0 2000     ... ... ... ... 
200008d0:	08c8 2000 08c8 2000 08d0 2000 08d0 2000     ... ... ... ... 
200008e0:	08d8 2000 08d8 2000 08e0 2000 08e0 2000     ... ... ... ... 
200008f0:	08e8 2000 08e8 2000 08f0 2000 08f0 2000     ... ... ... ... 
20000900:	08f8 2000 08f8 2000 0900 2000 0900 2000     ... ... ... ... 
20000910:	0908 2000 0908 2000 0910 2000 0910 2000     ... ... ... ... 
20000920:	0918 2000 0918 2000 0920 2000 0920 2000     ... ...  ..  .. 
20000930:	0928 2000 0928 2000 0930 2000 0930 2000     (.. (.. 0.. 0.. 
20000940:	0938 2000 0938 2000 0940 2000 0940 2000     8.. 8.. @.. @.. 
20000950:	0948 2000 0948 2000 0950 2000 0950 2000     H.. H.. P.. P.. 
20000960:	0958 2000 0958 2000 0960 2000 0960 2000     X.. X.. `.. `.. 

20000970 <__malloc_sbrk_base>:
20000970:	ffff ffff                                   ....

20000974 <__malloc_trim_threshold>:
20000974:	0000 0002                                   ....
