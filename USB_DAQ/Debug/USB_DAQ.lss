
USB_DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000083b0  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004083b0  004083b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000930  20000000  004083b8  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002dc  20000930  00408ce8  00018930  2**2
                  ALLOC
  4 .stack        00002004  20000c0c  00408fc4  00018930  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00018930  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00018959  2**0
                  CONTENTS, READONLY
  7 .debug_info   00011035  00000000  00000000  000189b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002d47  00000000  00000000  000299e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006635  00000000  00000000  0002c730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cb0  00000000  00000000  00032d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bf0  00000000  00000000  00033a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001564a  00000000  00000000  00034605  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012721  00000000  00000000  00049c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00050151  00000000  00000000  0005c370  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002398  00000000  00000000  000ac4c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20002c10 	.word	0x20002c10
  400004:	004030f5 	.word	0x004030f5
  400008:	004030f1 	.word	0x004030f1
  40000c:	004030f1 	.word	0x004030f1
  400010:	004030f1 	.word	0x004030f1
  400014:	004030f1 	.word	0x004030f1
  400018:	004030f1 	.word	0x004030f1
	...
  40002c:	004030f1 	.word	0x004030f1
  400030:	004030f1 	.word	0x004030f1
  400034:	00000000 	.word	0x00000000
  400038:	004030f1 	.word	0x004030f1
  40003c:	004030f1 	.word	0x004030f1
  400040:	004030f1 	.word	0x004030f1
  400044:	004030f1 	.word	0x004030f1
  400048:	004030f1 	.word	0x004030f1
  40004c:	004030f1 	.word	0x004030f1
  400050:	004030f1 	.word	0x004030f1
  400054:	004030f1 	.word	0x004030f1
  400058:	004030f1 	.word	0x004030f1
  40005c:	004030f1 	.word	0x004030f1
  400060:	004030f1 	.word	0x004030f1
  400064:	004030f1 	.word	0x004030f1
  400068:	004030f1 	.word	0x004030f1
  40006c:	00401741 	.word	0x00401741
  400070:	00401755 	.word	0x00401755
  400074:	004030f1 	.word	0x004030f1
  400078:	004030f1 	.word	0x004030f1
  40007c:	004030f1 	.word	0x004030f1
  400080:	004030f1 	.word	0x004030f1
  400084:	004030f1 	.word	0x004030f1
  400088:	004030f1 	.word	0x004030f1
  40008c:	004030f1 	.word	0x004030f1
  400090:	004030f1 	.word	0x004030f1
  400094:	004030f1 	.word	0x004030f1
  400098:	004030f1 	.word	0x004030f1
  40009c:	004030f1 	.word	0x004030f1
  4000a0:	004030f1 	.word	0x004030f1
  4000a4:	004030f1 	.word	0x004030f1
  4000a8:	004030f1 	.word	0x004030f1
  4000ac:	004030f1 	.word	0x004030f1
  4000b0:	004030f1 	.word	0x004030f1
  4000b4:	00400125 	.word	0x00400125
  4000b8:	004030f1 	.word	0x004030f1
  4000bc:	004030f1 	.word	0x004030f1
  4000c0:	004030f1 	.word	0x004030f1
  4000c4:	004030f1 	.word	0x004030f1
  4000c8:	00401f01 	.word	0x00401f01
  4000cc:	004030f1 	.word	0x004030f1

004000d0 <__do_global_dtors_aux>:
  4000d0:	b510      	push	{r4, lr}
  4000d2:	4c05      	ldr	r4, [pc, #20]	; (4000e8 <__do_global_dtors_aux+0x18>)
  4000d4:	7823      	ldrb	r3, [r4, #0]
  4000d6:	b933      	cbnz	r3, 4000e6 <__do_global_dtors_aux+0x16>
  4000d8:	4b04      	ldr	r3, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x1c>)
  4000da:	b113      	cbz	r3, 4000e2 <__do_global_dtors_aux+0x12>
  4000dc:	4804      	ldr	r0, [pc, #16]	; (4000f0 <__do_global_dtors_aux+0x20>)
  4000de:	f3af 8000 	nop.w
  4000e2:	2301      	movs	r3, #1
  4000e4:	7023      	strb	r3, [r4, #0]
  4000e6:	bd10      	pop	{r4, pc}
  4000e8:	20000930 	.word	0x20000930
  4000ec:	00000000 	.word	0x00000000
  4000f0:	004083b8 	.word	0x004083b8

004000f4 <frame_dummy>:
  4000f4:	b508      	push	{r3, lr}
  4000f6:	4b06      	ldr	r3, [pc, #24]	; (400110 <frame_dummy+0x1c>)
  4000f8:	b11b      	cbz	r3, 400102 <frame_dummy+0xe>
  4000fa:	4806      	ldr	r0, [pc, #24]	; (400114 <frame_dummy+0x20>)
  4000fc:	4906      	ldr	r1, [pc, #24]	; (400118 <frame_dummy+0x24>)
  4000fe:	f3af 8000 	nop.w
  400102:	4806      	ldr	r0, [pc, #24]	; (40011c <frame_dummy+0x28>)
  400104:	6803      	ldr	r3, [r0, #0]
  400106:	b113      	cbz	r3, 40010e <frame_dummy+0x1a>
  400108:	4b05      	ldr	r3, [pc, #20]	; (400120 <frame_dummy+0x2c>)
  40010a:	b103      	cbz	r3, 40010e <frame_dummy+0x1a>
  40010c:	4798      	blx	r3
  40010e:	bd08      	pop	{r3, pc}
  400110:	00000000 	.word	0x00000000
  400114:	004083b8 	.word	0x004083b8
  400118:	20000934 	.word	0x20000934
  40011c:	004083b8 	.word	0x004083b8
  400120:	00000000 	.word	0x00000000

00400124 <ADC_Handler>:
	//Setup adc and start the timer. Everithing else happens in ADC ISR
}


void ADC_Handler (void)
{ 
  400124:	b510      	push	{r4, lr}
	DAQSettingsPtr = get_current_DAQ_settings();
  400126:	4b18      	ldr	r3, [pc, #96]	; (400188 <ADC_Handler+0x64>)
  400128:	4798      	blx	r3
  40012a:	4b18      	ldr	r3, [pc, #96]	; (40018c <ADC_Handler+0x68>)
  40012c:	6018      	str	r0, [r3, #0]

	result = adc_get_latest_value(ADC);
  40012e:	4c18      	ldr	r4, [pc, #96]	; (400190 <ADC_Handler+0x6c>)
  400130:	4620      	mov	r0, r4
  400132:	4b18      	ldr	r3, [pc, #96]	; (400194 <ADC_Handler+0x70>)
  400134:	4798      	blx	r3
  400136:	4b18      	ldr	r3, [pc, #96]	; (400198 <ADC_Handler+0x74>)
  400138:	6018      	str	r0, [r3, #0]
	//todo: convert and print measured result
	adc_disable_all_channel(ADC);
  40013a:	4620      	mov	r0, r4
  40013c:	4b17      	ldr	r3, [pc, #92]	; (40019c <ADC_Handler+0x78>)
  40013e:	4798      	blx	r3
	if(repetitionCounter)
  400140:	4b17      	ldr	r3, [pc, #92]	; (4001a0 <ADC_Handler+0x7c>)
  400142:	681b      	ldr	r3, [r3, #0]
  400144:	b1db      	cbz	r3, 40017e <ADC_Handler+0x5a>
	{
		if(sampleCounter)
  400146:	4a17      	ldr	r2, [pc, #92]	; (4001a4 <ADC_Handler+0x80>)
  400148:	6812      	ldr	r2, [r2, #0]
  40014a:	b11a      	cbz	r2, 400154 <ADC_Handler+0x30>
		{
			sampleCounter--;
  40014c:	3a01      	subs	r2, #1
  40014e:	4b15      	ldr	r3, [pc, #84]	; (4001a4 <ADC_Handler+0x80>)
  400150:	601a      	str	r2, [r3, #0]
  400152:	e00a      	b.n	40016a <ADC_Handler+0x46>
		}
		else
		{
			sampleCounter = DAQSettingsPtr->samplesNbr;
  400154:	4a0d      	ldr	r2, [pc, #52]	; (40018c <ADC_Handler+0x68>)
  400156:	6812      	ldr	r2, [r2, #0]
  400158:	8a11      	ldrh	r1, [r2, #16]
  40015a:	4a12      	ldr	r2, [pc, #72]	; (4001a4 <ADC_Handler+0x80>)
  40015c:	6011      	str	r1, [r2, #0]
			sequencePosition++;
			if(DAQSettingsPtr->sequence[sequencePosition] == 0);
			{
				sequencePosition = 0;
  40015e:	2100      	movs	r1, #0
  400160:	4a11      	ldr	r2, [pc, #68]	; (4001a8 <ADC_Handler+0x84>)
  400162:	6011      	str	r1, [r2, #0]
				repetitionCounter--;
  400164:	3b01      	subs	r3, #1
  400166:	4a0e      	ldr	r2, [pc, #56]	; (4001a0 <ADC_Handler+0x7c>)
  400168:	6013      	str	r3, [r2, #0]
			}
		}
		adc_enable_channel(ADC, DAQSettingsPtr->sequence[sequencePosition]); // todo: channel maping
  40016a:	4b08      	ldr	r3, [pc, #32]	; (40018c <ADC_Handler+0x68>)
  40016c:	681a      	ldr	r2, [r3, #0]
  40016e:	4b0e      	ldr	r3, [pc, #56]	; (4001a8 <ADC_Handler+0x84>)
  400170:	681b      	ldr	r3, [r3, #0]
  400172:	4413      	add	r3, r2
  400174:	4806      	ldr	r0, [pc, #24]	; (400190 <ADC_Handler+0x6c>)
  400176:	7a19      	ldrb	r1, [r3, #8]
  400178:	4b0c      	ldr	r3, [pc, #48]	; (4001ac <ADC_Handler+0x88>)
  40017a:	4798      	blx	r3
  40017c:	bd10      	pop	{r4, pc}
	}
	else
	{
		tc_stop(TC0, 0);
  40017e:	480c      	ldr	r0, [pc, #48]	; (4001b0 <ADC_Handler+0x8c>)
  400180:	2100      	movs	r1, #0
  400182:	4b0c      	ldr	r3, [pc, #48]	; (4001b4 <ADC_Handler+0x90>)
  400184:	4798      	blx	r3
  400186:	bd10      	pop	{r4, pc}
  400188:	004006c5 	.word	0x004006c5
  40018c:	20000bc8 	.word	0x20000bc8
  400190:	40038000 	.word	0x40038000
  400194:	00401585 	.word	0x00401585
  400198:	20000bc4 	.word	0x20000bc4
  40019c:	0040157d 	.word	0x0040157d
  4001a0:	20000bc0 	.word	0x20000bc0
  4001a4:	20000bbc 	.word	0x20000bbc
  4001a8:	2000000c 	.word	0x2000000c
  4001ac:	00401571 	.word	0x00401571
  4001b0:	40010000 	.word	0x40010000
  4001b4:	00401961 	.word	0x00401961

004001b8 <dac_init>:
#include "pmc.h"
#include "pio.h"
#include "stdint-gcc.h"

void dac_init (void)
{
  4001b8:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
  4001ba:	201e      	movs	r0, #30
  4001bc:	4c15      	ldr	r4, [pc, #84]	; (400214 <dac_init+0x5c>)
  4001be:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);
  4001c0:	200c      	movs	r0, #12
  4001c2:	47a0      	blx	r4
	
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB13);
  4001c4:	4d14      	ldr	r5, [pc, #80]	; (400218 <dac_init+0x60>)
  4001c6:	4628      	mov	r0, r5
  4001c8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4001cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4001d0:	4c12      	ldr	r4, [pc, #72]	; (40021c <dac_init+0x64>)
  4001d2:	47a0      	blx	r4
	pio_set_peripheral(PIOB, PIO_TYPE_PIO_PERIPH_D, PIO_PB14);
  4001d4:	4628      	mov	r0, r5
  4001d6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4001da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4001de:	47a0      	blx	r4
	dacc_reset(DACC);
  4001e0:	4c0f      	ldr	r4, [pc, #60]	; (400220 <dac_init+0x68>)
  4001e2:	4620      	mov	r0, r4
  4001e4:	4b0f      	ldr	r3, [pc, #60]	; (400224 <dac_init+0x6c>)
  4001e6:	4798      	blx	r3
	dacc_set_writeprotect(DACC, 0);
  4001e8:	4620      	mov	r0, r4
  4001ea:	2100      	movs	r1, #0
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <dac_init+0x70>)
  4001ee:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);
  4001f0:	4620      	mov	r0, r4
  4001f2:	2100      	movs	r1, #0
  4001f4:	4d0d      	ldr	r5, [pc, #52]	; (40022c <dac_init+0x74>)
  4001f6:	47a8      	blx	r5
	dacc_enable_channel(DACC, 1);	
  4001f8:	4620      	mov	r0, r4
  4001fa:	2101      	movs	r1, #1
  4001fc:	47a8      	blx	r5
	dacc_set_timing(DACC, 1, 0, 15);
  4001fe:	4620      	mov	r0, r4
  400200:	2101      	movs	r1, #1
  400202:	2200      	movs	r2, #0
  400204:	230f      	movs	r3, #15
  400206:	4d0a      	ldr	r5, [pc, #40]	; (400230 <dac_init+0x78>)
  400208:	47a8      	blx	r5
	dacc_disable_trigger(DACC);
  40020a:	4620      	mov	r0, r4
  40020c:	4b09      	ldr	r3, [pc, #36]	; (400234 <dac_init+0x7c>)
  40020e:	4798      	blx	r3
  400210:	bd38      	pop	{r3, r4, r5, pc}
  400212:	bf00      	nop
  400214:	0040186d 	.word	0x0040186d
  400218:	400e1000 	.word	0x400e1000
  40021c:	00401619 	.word	0x00401619
  400220:	4003c000 	.word	0x4003c000
  400224:	00401589 	.word	0x00401589
  400228:	004015a1 	.word	0x004015a1
  40022c:	00401605 	.word	0x00401605
  400230:	004015d5 	.word	0x004015d5
  400234:	00401591 	.word	0x00401591

00400238 <dac_set>:
}

/* Sets DAC value iv mV */

void dac_set (uint32_t ch, uint32_t val)
{
  400238:	b538      	push	{r3, r4, r5, lr}
  40023a:	460c      	mov	r4, r1
	if(ch)
  40023c:	b148      	cbz	r0, 400252 <dac_set+0x1a>
	{
		dacc_set_channel_selection(DACC, 1);
  40023e:	4d0a      	ldr	r5, [pc, #40]	; (400268 <dac_set+0x30>)
  400240:	4628      	mov	r0, r5
  400242:	2101      	movs	r1, #1
  400244:	4b09      	ldr	r3, [pc, #36]	; (40026c <dac_set+0x34>)
  400246:	4798      	blx	r3
		dacc_write_conversion_data(DACC, val);
  400248:	4628      	mov	r0, r5
  40024a:	4621      	mov	r1, r4
  40024c:	4b08      	ldr	r3, [pc, #32]	; (400270 <dac_set+0x38>)
  40024e:	4798      	blx	r3
  400250:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		dacc_set_channel_selection(DACC, 0);
  400252:	4d05      	ldr	r5, [pc, #20]	; (400268 <dac_set+0x30>)
  400254:	4628      	mov	r0, r5
  400256:	2100      	movs	r1, #0
  400258:	4b04      	ldr	r3, [pc, #16]	; (40026c <dac_set+0x34>)
  40025a:	4798      	blx	r3
		dacc_write_conversion_data(DACC, val);
  40025c:	4628      	mov	r0, r5
  40025e:	4621      	mov	r1, r4
  400260:	4b03      	ldr	r3, [pc, #12]	; (400270 <dac_set+0x38>)
  400262:	4798      	blx	r3
  400264:	bd38      	pop	{r3, r4, r5, pc}
  400266:	bf00      	nop
  400268:	4003c000 	.word	0x4003c000
  40026c:	004015bd 	.word	0x004015bd
  400270:	0040159d 	.word	0x0040159d

00400274 <print_formating_error>:
	}
}


void print_formating_error(void)
{
  400274:	b530      	push	{r4, r5, lr}
  400276:	b087      	sub	sp, #28
	uint32_t charsPrinted;
	uint8_t printBuffer[20];
	
	charsPrinted = sprintf(printBuffer, "Comand format error!\n\r");
  400278:	ac01      	add	r4, sp, #4
  40027a:	4d08      	ldr	r5, [pc, #32]	; (40029c <print_formating_error+0x28>)
  40027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400280:	e895 0003 	ldmia.w	r5, {r0, r1}
  400284:	f844 0b04 	str.w	r0, [r4], #4
  400288:	f824 1b02 	strh.w	r1, [r4], #2
  40028c:	0c09      	lsrs	r1, r1, #16
  40028e:	7021      	strb	r1, [r4, #0]
	udi_cdc_write_buf(printBuffer, charsPrinted);
  400290:	a801      	add	r0, sp, #4
  400292:	2116      	movs	r1, #22
  400294:	4b02      	ldr	r3, [pc, #8]	; (4002a0 <print_formating_error+0x2c>)
  400296:	4798      	blx	r3
}
  400298:	b007      	add	sp, #28
  40029a:	bd30      	pop	{r4, r5, pc}
  40029c:	00407fe0 	.word	0x00407fe0
  4002a0:	00400f19 	.word	0x00400f19

004002a4 <parse_comands>:

void parse_comands (void)
{
  4002a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002a8:	b090      	sub	sp, #64	; 0x40
	static uint8_t holdingBuffer[HOLDING_BUFFER_SIZE];
	static uint8_t tempBuffer[10];
	uint8_t *startOfData;
	uint8_t printBuffer [50];
	uint32_t charsPrinted, entryCounter;
	volatile int32_t a, dacCh = 0;
  4002aa:	2300      	movs	r3, #0
  4002ac:	9301      	str	r3, [sp, #4]
	
	if(udi_cdc_is_rx_ready())
  4002ae:	4b8e      	ldr	r3, [pc, #568]	; (4004e8 <parse_comands+0x244>)
  4002b0:	4798      	blx	r3
  4002b2:	2800      	cmp	r0, #0
  4002b4:	f000 81e0 	beq.w	400678 <parse_comands+0x3d4>
	{
		temp = udi_cdc_getc();
  4002b8:	4b8c      	ldr	r3, [pc, #560]	; (4004ec <parse_comands+0x248>)
  4002ba:	4798      	blx	r3
  4002bc:	b2c4      	uxtb	r4, r0
		udi_cdc_putc(temp);
  4002be:	4620      	mov	r0, r4
  4002c0:	4b8b      	ldr	r3, [pc, #556]	; (4004f0 <parse_comands+0x24c>)
  4002c2:	4798      	blx	r3
		
		if(temp == 127) // 127 = backspace in ASCII?? (sholud be DELITE)
  4002c4:	2c7f      	cmp	r4, #127	; 0x7f
  4002c6:	d108      	bne.n	4002da <parse_comands+0x36>
		{
			if(insertPointer)
  4002c8:	4b8a      	ldr	r3, [pc, #552]	; (4004f4 <parse_comands+0x250>)
  4002ca:	781b      	ldrb	r3, [r3, #0]
  4002cc:	2b00      	cmp	r3, #0
  4002ce:	f000 81d3 	beq.w	400678 <parse_comands+0x3d4>
			{
				insertPointer--;
  4002d2:	3b01      	subs	r3, #1
  4002d4:	4a87      	ldr	r2, [pc, #540]	; (4004f4 <parse_comands+0x250>)
  4002d6:	7013      	strb	r3, [r2, #0]
  4002d8:	e1ce      	b.n	400678 <parse_comands+0x3d4>
			}
		}
		else if(insertPointer < (HOLDING_BUFFER_SIZE - 2))
  4002da:	4b86      	ldr	r3, [pc, #536]	; (4004f4 <parse_comands+0x250>)
  4002dc:	781b      	ldrb	r3, [r3, #0]
  4002de:	2b11      	cmp	r3, #17
  4002e0:	d804      	bhi.n	4002ec <parse_comands+0x48>
		{
			holdingBuffer[insertPointer] = temp;
  4002e2:	4a85      	ldr	r2, [pc, #532]	; (4004f8 <parse_comands+0x254>)
  4002e4:	54d4      	strb	r4, [r2, r3]
			insertPointer++;
  4002e6:	3301      	adds	r3, #1
  4002e8:	4a82      	ldr	r2, [pc, #520]	; (4004f4 <parse_comands+0x250>)
  4002ea:	7013      	strb	r3, [r2, #0]
		}	
		
		if(temp == '\r')
  4002ec:	2c0d      	cmp	r4, #13
  4002ee:	f040 81c3 	bne.w	400678 <parse_comands+0x3d4>
		{
			udi_cdc_putc('\n');
  4002f2:	200a      	movs	r0, #10
  4002f4:	4c7e      	ldr	r4, [pc, #504]	; (4004f0 <parse_comands+0x24c>)
  4002f6:	47a0      	blx	r4
			udi_cdc_putc('\r');
  4002f8:	200d      	movs	r0, #13
  4002fa:	47a0      	blx	r4
			
			holdingBuffer[insertPointer] = 0;
  4002fc:	487e      	ldr	r0, [pc, #504]	; (4004f8 <parse_comands+0x254>)
  4002fe:	4b7d      	ldr	r3, [pc, #500]	; (4004f4 <parse_comands+0x250>)
  400300:	781b      	ldrb	r3, [r3, #0]
  400302:	2200      	movs	r2, #0
  400304:	54c2      	strb	r2, [r0, r3]
			startOfData = strpbrk(holdingBuffer, LIST_OF_KNOWN_COMANDS);
  400306:	497d      	ldr	r1, [pc, #500]	; (4004fc <parse_comands+0x258>)
  400308:	4b7d      	ldr	r3, [pc, #500]	; (400500 <parse_comands+0x25c>)
  40030a:	4798      	blx	r3
			//after this executes startOfData should point to first know character in string
			switch (*(startOfData))
  40030c:	7804      	ldrb	r4, [r0, #0]
  40030e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
  400312:	2b13      	cmp	r3, #19
  400314:	f200 81a3 	bhi.w	40065e <parse_comands+0x3ba>
  400318:	e8df f013 	tbh	[pc, r3, lsl #1]
  40031c:	01a10036 	.word	0x01a10036
  400320:	013901a1 	.word	0x013901a1
  400324:	003600b5 	.word	0x003600b5
  400328:	01a101a1 	.word	0x01a101a1
  40032c:	01a101a1 	.word	0x01a101a1
  400330:	01a101a1 	.word	0x01a101a1
  400334:	01a101a1 	.word	0x01a101a1
  400338:	01a101a1 	.word	0x01a101a1
  40033c:	003601a1 	.word	0x003601a1
  400340:	00250014 	.word	0x00250014
			{
				case COMAND_START_ACQ:
					daqSettings.startAcq = 1;
  400344:	2201      	movs	r2, #1
  400346:	4b6f      	ldr	r3, [pc, #444]	; (400504 <parse_comands+0x260>)
  400348:	751a      	strb	r2, [r3, #20]
					charsPrinted = sprintf(printBuffer, "Acquisition started\n\r");
  40034a:	ac03      	add	r4, sp, #12
  40034c:	4d6e      	ldr	r5, [pc, #440]	; (400508 <parse_comands+0x264>)
  40034e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400352:	e895 0003 	ldmia.w	r5, {r0, r1}
  400356:	f844 0b04 	str.w	r0, [r4], #4
  40035a:	8021      	strh	r1, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  40035c:	a803      	add	r0, sp, #12
  40035e:	2115      	movs	r1, #21
  400360:	4b6a      	ldr	r3, [pc, #424]	; (40050c <parse_comands+0x268>)
  400362:	4798      	blx	r3
					break;
  400364:	e185      	b.n	400672 <parse_comands+0x3ce>
				
				case COMAND_STOP_ACQ:
					daqSettings.stopAcq = 1;
  400366:	2201      	movs	r2, #1
  400368:	4b66      	ldr	r3, [pc, #408]	; (400504 <parse_comands+0x260>)
  40036a:	755a      	strb	r2, [r3, #21]
					charsPrinted = sprintf(printBuffer, "Acquisition stoped\n\r");
  40036c:	ac03      	add	r4, sp, #12
  40036e:	4d68      	ldr	r5, [pc, #416]	; (400510 <parse_comands+0x26c>)
  400370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400374:	e895 0003 	ldmia.w	r5, {r0, r1}
  400378:	f844 0b04 	str.w	r0, [r4], #4
  40037c:	7021      	strb	r1, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  40037e:	a803      	add	r0, sp, #12
  400380:	2114      	movs	r1, #20
  400382:	4b62      	ldr	r3, [pc, #392]	; (40050c <parse_comands+0x268>)
  400384:	4798      	blx	r3
					break;
  400386:	e174      	b.n	400672 <parse_comands+0x3ce>
					
				case COMAND_SET_SAMPLE_PERIOD:
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
  400388:	4b62      	ldr	r3, [pc, #392]	; (400514 <parse_comands+0x270>)
  40038a:	701c      	strb	r4, [r3, #0]
					//skip_blank_chars(startOfData);
					startOfData++;
  40038c:	1c42      	adds	r2, r0, #1
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  40038e:	7843      	ldrb	r3, [r0, #1]
  400390:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  400394:	b2c9      	uxtb	r1, r1
  400396:	2909      	cmp	r1, #9
  400398:	d814      	bhi.n	4003c4 <parse_comands+0x120>
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  40039a:	495f      	ldr	r1, [pc, #380]	; (400518 <parse_comands+0x274>)
  40039c:	428a      	cmp	r2, r1
  40039e:	d813      	bhi.n	4003c8 <parse_comands+0x124>
  4003a0:	1c4e      	adds	r6, r1, #1
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
  4003a2:	2100      	movs	r1, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
  4003a4:	4d5d      	ldr	r5, [pc, #372]	; (40051c <parse_comands+0x278>)
  4003a6:	e002      	b.n	4003ae <parse_comands+0x10a>
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  4003a8:	42b2      	cmp	r2, r6
  4003aa:	d00e      	beq.n	4003ca <parse_comands+0x126>
						tempBuffer[n++] = *startOfData++;
  4003ac:	4601      	mov	r1, r0
  4003ae:	1c48      	adds	r0, r1, #1
  4003b0:	b2c0      	uxtb	r0, r0
  4003b2:	546b      	strb	r3, [r5, r1]
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9')
  4003b4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  4003b8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
  4003bc:	b2c9      	uxtb	r1, r1
  4003be:	2909      	cmp	r1, #9
  4003c0:	d9f2      	bls.n	4003a8 <parse_comands+0x104>
  4003c2:	e002      	b.n	4003ca <parse_comands+0x126>
				case COMAND_SET_AVERAGE_COUNT:
				case COMAND_SET_MEASURMENT_NBR_COUNT:
					comandByte = *startOfData;
					//skip_blank_chars(startOfData);
					startOfData++;
					n = 0;
  4003c4:	2000      	movs	r0, #0
  4003c6:	e000      	b.n	4003ca <parse_comands+0x126>
  4003c8:	2000      	movs	r0, #0
					while(*startOfData >= '0' && *startOfData <= '9')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
					}
					if(comandByte == COMAND_SET_SAMPLE_PERIOD)
  4003ca:	2c52      	cmp	r4, #82	; 0x52
  4003cc:	d126      	bne.n	40041c <parse_comands+0x178>
					{
						if(*startOfData == '\r')
  4003ce:	2b0d      	cmp	r3, #13
  4003d0:	d121      	bne.n	400416 <parse_comands+0x172>
						{
							tempBuffer[n] = 0;
  4003d2:	4b52      	ldr	r3, [pc, #328]	; (40051c <parse_comands+0x278>)
  4003d4:	2200      	movs	r2, #0
  4003d6:	541a      	strb	r2, [r3, r0]
							a = atoi(tempBuffer);
  4003d8:	4618      	mov	r0, r3
  4003da:	4b51      	ldr	r3, [pc, #324]	; (400520 <parse_comands+0x27c>)
  4003dc:	4798      	blx	r3
  4003de:	9002      	str	r0, [sp, #8]
							if(a < 2) a = 0;
  4003e0:	9b02      	ldr	r3, [sp, #8]
  4003e2:	2b01      	cmp	r3, #1
  4003e4:	bfdc      	itt	le
  4003e6:	2300      	movle	r3, #0
  4003e8:	9302      	strle	r3, [sp, #8]
							if(a > 50000) a = 50000;
  4003ea:	9a02      	ldr	r2, [sp, #8]
  4003ec:	f24c 3350 	movw	r3, #50000	; 0xc350
  4003f0:	429a      	cmp	r2, r3
  4003f2:	bfc8      	it	gt
  4003f4:	9302      	strgt	r3, [sp, #8]
							daqSettings.timerBase = a / 2;
  4003f6:	9a02      	ldr	r2, [sp, #8]
  4003f8:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
  4003fc:	1052      	asrs	r2, r2, #1
  4003fe:	4b41      	ldr	r3, [pc, #260]	; (400504 <parse_comands+0x260>)
  400400:	605a      	str	r2, [r3, #4]
							charsPrinted = sprintf(printBuffer, "Sample period set to %u uS\n\r", daqSettings.timerBase * 2);
  400402:	a803      	add	r0, sp, #12
  400404:	4947      	ldr	r1, [pc, #284]	; (400524 <parse_comands+0x280>)
  400406:	0052      	lsls	r2, r2, #1
  400408:	4b47      	ldr	r3, [pc, #284]	; (400528 <parse_comands+0x284>)
  40040a:	4798      	blx	r3
  40040c:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  40040e:	a803      	add	r0, sp, #12
  400410:	4b3e      	ldr	r3, [pc, #248]	; (40050c <parse_comands+0x268>)
  400412:	4798      	blx	r3
  400414:	e12d      	b.n	400672 <parse_comands+0x3ce>
						}
						else
						{
							print_formating_error();
  400416:	4b45      	ldr	r3, [pc, #276]	; (40052c <parse_comands+0x288>)
  400418:	4798      	blx	r3
  40041a:	e12a      	b.n	400672 <parse_comands+0x3ce>
						}	
					}
					else if(comandByte == COMAND_SET_AVERAGE_COUNT)
  40041c:	2c41      	cmp	r4, #65	; 0x41
  40041e:	d117      	bne.n	400450 <parse_comands+0x1ac>
					{
						if(*startOfData == '\r')
  400420:	2b0d      	cmp	r3, #13
  400422:	d112      	bne.n	40044a <parse_comands+0x1a6>
						{
							tempBuffer[n] = 0;
  400424:	4b3d      	ldr	r3, [pc, #244]	; (40051c <parse_comands+0x278>)
  400426:	2200      	movs	r2, #0
  400428:	541a      	strb	r2, [r3, r0]
							daqSettings.samplesNbr = atoi(tempBuffer);
  40042a:	4618      	mov	r0, r3
  40042c:	4b3c      	ldr	r3, [pc, #240]	; (400520 <parse_comands+0x27c>)
  40042e:	4798      	blx	r3
  400430:	4602      	mov	r2, r0
  400432:	4b34      	ldr	r3, [pc, #208]	; (400504 <parse_comands+0x260>)
  400434:	8218      	strh	r0, [r3, #16]
							charsPrinted = sprintf(printBuffer, "DAQ will atempt to take %u samples per channel\n\r", daqSettings.samplesNbr);
  400436:	a803      	add	r0, sp, #12
  400438:	493d      	ldr	r1, [pc, #244]	; (400530 <parse_comands+0x28c>)
  40043a:	b292      	uxth	r2, r2
  40043c:	4b3a      	ldr	r3, [pc, #232]	; (400528 <parse_comands+0x284>)
  40043e:	4798      	blx	r3
  400440:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  400442:	a803      	add	r0, sp, #12
  400444:	4b31      	ldr	r3, [pc, #196]	; (40050c <parse_comands+0x268>)
  400446:	4798      	blx	r3
  400448:	e113      	b.n	400672 <parse_comands+0x3ce>
							//todo: limit samples per channel
						}
						else
						{
							print_formating_error();
  40044a:	4b38      	ldr	r3, [pc, #224]	; (40052c <parse_comands+0x288>)
  40044c:	4798      	blx	r3
  40044e:	e110      	b.n	400672 <parse_comands+0x3ce>
						}
					}
					else if(comandByte == COMAND_SET_MEASURMENT_NBR_COUNT)
  400450:	2c46      	cmp	r4, #70	; 0x46
  400452:	f040 810e 	bne.w	400672 <parse_comands+0x3ce>
					{
						if(*startOfData == '\r')
  400456:	2b0d      	cmp	r3, #13
  400458:	d112      	bne.n	400480 <parse_comands+0x1dc>
						{
							tempBuffer[n] = 0;
  40045a:	4b30      	ldr	r3, [pc, #192]	; (40051c <parse_comands+0x278>)
  40045c:	2200      	movs	r2, #0
  40045e:	541a      	strb	r2, [r3, r0]
							daqSettings.cycles = atoi(tempBuffer);
  400460:	4618      	mov	r0, r3
  400462:	4b2f      	ldr	r3, [pc, #188]	; (400520 <parse_comands+0x27c>)
  400464:	4798      	blx	r3
  400466:	4602      	mov	r2, r0
  400468:	4b26      	ldr	r3, [pc, #152]	; (400504 <parse_comands+0x260>)
  40046a:	8258      	strh	r0, [r3, #18]
							charsPrinted = sprintf(printBuffer, "DAQ will sample all enebled channels %u times\n\r", daqSettings.cycles);
  40046c:	a803      	add	r0, sp, #12
  40046e:	4931      	ldr	r1, [pc, #196]	; (400534 <parse_comands+0x290>)
  400470:	b292      	uxth	r2, r2
  400472:	4b2d      	ldr	r3, [pc, #180]	; (400528 <parse_comands+0x284>)
  400474:	4798      	blx	r3
  400476:	4601      	mov	r1, r0
							udi_cdc_write_buf(printBuffer, charsPrinted);
  400478:	a803      	add	r0, sp, #12
  40047a:	4b24      	ldr	r3, [pc, #144]	; (40050c <parse_comands+0x268>)
  40047c:	4798      	blx	r3
  40047e:	e0f8      	b.n	400672 <parse_comands+0x3ce>
							//todo: limit samples per channel
						}
						else
						{
							print_formating_error();
  400480:	4b2a      	ldr	r3, [pc, #168]	; (40052c <parse_comands+0x288>)
  400482:	4798      	blx	r3
  400484:	e0f5      	b.n	400672 <parse_comands+0x3ce>
					}
					break;
				
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
  400486:	1c43      	adds	r3, r0, #1
					entryCounter = 0;
  400488:	2600      	movs	r6, #0
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  40048a:	4d24      	ldr	r5, [pc, #144]	; (40051c <parse_comands+0x278>)
  40048c:	46a8      	mov	r8, r5
							if(*startOfData == '\r') break;
						}
						tempBuffer[n]  = 0;
						a = atoi(tempBuffer);
  40048e:	4f24      	ldr	r7, [pc, #144]	; (400520 <parse_comands+0x27c>)
  400490:	e008      	b.n	4004a4 <parse_comands+0x200>
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  400492:	1c50      	adds	r0, r2, #1
  400494:	b2c0      	uxtb	r0, r0
  400496:	461c      	mov	r4, r3
  400498:	54a9      	strb	r1, [r5, r2]
							if(*startOfData == '\r') break;
  40049a:	781a      	ldrb	r2, [r3, #0]
  40049c:	2a0d      	cmp	r2, #13
  40049e:	d008      	beq.n	4004b2 <parse_comands+0x20e>
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
						{
							tempBuffer[n++] = *startOfData++;
  4004a0:	4602      	mov	r2, r0
  4004a2:	e000      	b.n	4004a6 <parse_comands+0x202>
					break;
				
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
					entryCounter = 0;
  4004a4:	2200      	movs	r2, #0
  4004a6:	461c      	mov	r4, r3
					n = 0;
					while(entryCounter < 8)
					{
						n = 0;
						while(*startOfData != ',')
  4004a8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4004ac:	292c      	cmp	r1, #44	; 0x2c
  4004ae:	d1f0      	bne.n	400492 <parse_comands+0x1ee>
  4004b0:	e000      	b.n	4004b4 <parse_comands+0x210>
						{
							tempBuffer[n++] = *startOfData++;
  4004b2:	4602      	mov	r2, r0
							if(*startOfData == '\r') break;
						}
						tempBuffer[n]  = 0;
  4004b4:	2300      	movs	r3, #0
  4004b6:	54ab      	strb	r3, [r5, r2]
						a = atoi(tempBuffer);
  4004b8:	4640      	mov	r0, r8
  4004ba:	47b8      	blx	r7
  4004bc:	9002      	str	r0, [sp, #8]
						if(a)
  4004be:	9b02      	ldr	r3, [sp, #8]
  4004c0:	b163      	cbz	r3, 4004dc <parse_comands+0x238>
						{
							if(a > 4) {a = 4;} // we only have 4 channels
  4004c2:	9b02      	ldr	r3, [sp, #8]
  4004c4:	2b04      	cmp	r3, #4
  4004c6:	bfc4      	itt	gt
  4004c8:	2304      	movgt	r3, #4
  4004ca:	9302      	strgt	r3, [sp, #8]
							daqSettings.sequence[entryCounter] = a;
  4004cc:	9a02      	ldr	r2, [sp, #8]
  4004ce:	4b0d      	ldr	r3, [pc, #52]	; (400504 <parse_comands+0x260>)
  4004d0:	4433      	add	r3, r6
  4004d2:	721a      	strb	r2, [r3, #8]
						else
						{
							daqSettings.sequence[entryCounter] = 0;
							break;
						}
						if(*startOfData == '\r') break;
  4004d4:	7823      	ldrb	r3, [r4, #0]
  4004d6:	2b0d      	cmp	r3, #13
  4004d8:	d12e      	bne.n	400538 <parse_comands+0x294>
  4004da:	e031      	b.n	400540 <parse_comands+0x29c>
							if(a > 4) {a = 4;} // we only have 4 channels
							daqSettings.sequence[entryCounter] = a;
						}
						else
						{
							daqSettings.sequence[entryCounter] = 0;
  4004dc:	4b09      	ldr	r3, [pc, #36]	; (400504 <parse_comands+0x260>)
  4004de:	4433      	add	r3, r6
  4004e0:	2200      	movs	r2, #0
  4004e2:	721a      	strb	r2, [r3, #8]
							break;
  4004e4:	e02c      	b.n	400540 <parse_comands+0x29c>
  4004e6:	bf00      	nop
  4004e8:	00400c71 	.word	0x00400c71
  4004ec:	00400d2d 	.word	0x00400d2d
  4004f0:	00400e61 	.word	0x00400e61
  4004f4:	2000096c 	.word	0x2000096c
  4004f8:	2000094c 	.word	0x2000094c
  4004fc:	00407ff8 	.word	0x00407ff8
  400500:	004035e9 	.word	0x004035e9
  400504:	20000bcc 	.word	0x20000bcc
  400508:	00408000 	.word	0x00408000
  40050c:	00400f19 	.word	0x00400f19
  400510:	00408018 	.word	0x00408018
  400514:	2000096d 	.word	0x2000096d
  400518:	2000095f 	.word	0x2000095f
  40051c:	20000960 	.word	0x20000960
  400520:	00403365 	.word	0x00403365
  400524:	00408030 	.word	0x00408030
  400528:	0040353d 	.word	0x0040353d
  40052c:	00400275 	.word	0x00400275
  400530:	00408050 	.word	0x00408050
  400534:	00408084 	.word	0x00408084
						}
						if(*startOfData == '\r') break;
						entryCounter++;
  400538:	3601      	adds	r6, #1
						startOfData++;
  40053a:	1c63      	adds	r3, r4, #1
				case COMAND_SET_SEQUENCER:
					//skip_blank_chars();
					startOfData++;
					entryCounter = 0;
					n = 0;
					while(entryCounter < 8)
  40053c:	2e08      	cmp	r6, #8
  40053e:	d1b1      	bne.n	4004a4 <parse_comands+0x200>
						if(*startOfData == '\r') break;
						entryCounter++;
						startOfData++;
					}
					entryCounter++;
					daqSettings.sequence[entryCounter] = 0;
  400540:	4f4f      	ldr	r7, [pc, #316]	; (400680 <parse_comands+0x3dc>)
  400542:	443e      	add	r6, r7
  400544:	2300      	movs	r3, #0
  400546:	7273      	strb	r3, [r6, #9]
					charsPrinted = sprintf(printBuffer, "Sequence set to: ");
  400548:	ac03      	add	r4, sp, #12
  40054a:	4d4e      	ldr	r5, [pc, #312]	; (400684 <parse_comands+0x3e0>)
  40054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400550:	682b      	ldr	r3, [r5, #0]
  400552:	8023      	strh	r3, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  400554:	a803      	add	r0, sp, #12
  400556:	2111      	movs	r1, #17
  400558:	4b4b      	ldr	r3, [pc, #300]	; (400688 <parse_comands+0x3e4>)
  40055a:	4798      	blx	r3
  40055c:	f107 0408 	add.w	r4, r7, #8
  400560:	f107 0810 	add.w	r8, r7, #16
					for(n = 0; n < 8; n++)
					{
						charsPrinted = sprintf(printBuffer, "%u ", daqSettings.sequence[n]);
  400564:	4f49      	ldr	r7, [pc, #292]	; (40068c <parse_comands+0x3e8>)
  400566:	4e4a      	ldr	r6, [pc, #296]	; (400690 <parse_comands+0x3ec>)
						udi_cdc_write_buf(printBuffer, charsPrinted);
  400568:	4d47      	ldr	r5, [pc, #284]	; (400688 <parse_comands+0x3e4>)
					daqSettings.sequence[entryCounter] = 0;
					charsPrinted = sprintf(printBuffer, "Sequence set to: ");
					udi_cdc_write_buf(printBuffer, charsPrinted);
					for(n = 0; n < 8; n++)
					{
						charsPrinted = sprintf(printBuffer, "%u ", daqSettings.sequence[n]);
  40056a:	a803      	add	r0, sp, #12
  40056c:	4639      	mov	r1, r7
  40056e:	7822      	ldrb	r2, [r4, #0]
  400570:	47b0      	blx	r6
  400572:	4601      	mov	r1, r0
						udi_cdc_write_buf(printBuffer, charsPrinted);
  400574:	a803      	add	r0, sp, #12
  400576:	47a8      	blx	r5
						if(daqSettings.sequence[n] == 0) break;	
  400578:	f814 3b01 	ldrb.w	r3, [r4], #1
  40057c:	b10b      	cbz	r3, 400582 <parse_comands+0x2de>
					}
					entryCounter++;
					daqSettings.sequence[entryCounter] = 0;
					charsPrinted = sprintf(printBuffer, "Sequence set to: ");
					udi_cdc_write_buf(printBuffer, charsPrinted);
					for(n = 0; n < 8; n++)
  40057e:	4544      	cmp	r4, r8
  400580:	d1f3      	bne.n	40056a <parse_comands+0x2c6>
					{
						charsPrinted = sprintf(printBuffer, "%u ", daqSettings.sequence[n]);
						udi_cdc_write_buf(printBuffer, charsPrinted);
						if(daqSettings.sequence[n] == 0) break;	
					}
					udi_cdc_putc('\n');
  400582:	200a      	movs	r0, #10
  400584:	4c43      	ldr	r4, [pc, #268]	; (400694 <parse_comands+0x3f0>)
  400586:	47a0      	blx	r4
					udi_cdc_putc('\r');
  400588:	200d      	movs	r0, #13
  40058a:	47a0      	blx	r4
					
					break;
  40058c:	e071      	b.n	400672 <parse_comands+0x3ce>
					
				case COMAND_SET_DAC_VALUE:
					n = 0;
					startOfData++;
					if(*startOfData == '0') {dacCh = 0;}
  40058e:	7843      	ldrb	r3, [r0, #1]
  400590:	2b30      	cmp	r3, #48	; 0x30
  400592:	d102      	bne.n	40059a <parse_comands+0x2f6>
  400594:	2300      	movs	r3, #0
  400596:	9301      	str	r3, [sp, #4]
  400598:	e004      	b.n	4005a4 <parse_comands+0x300>
					else if(*startOfData == '1') {dacCh = 1;}
  40059a:	2b31      	cmp	r3, #49	; 0x31
  40059c:	bf0c      	ite	eq
  40059e:	2301      	moveq	r3, #1
					else {dacCh = 0;}
  4005a0:	2300      	movne	r3, #0
  4005a2:	9301      	str	r3, [sp, #4]
					startOfData++;
					if(*startOfData != ',') 
  4005a4:	7883      	ldrb	r3, [r0, #2]
  4005a6:	2b2c      	cmp	r3, #44	; 0x2c
  4005a8:	d002      	beq.n	4005b0 <parse_comands+0x30c>
					{
						print_formating_error();
  4005aa:	4b3b      	ldr	r3, [pc, #236]	; (400698 <parse_comands+0x3f4>)
  4005ac:	4798      	blx	r3
						break;
  4005ae:	e060      	b.n	400672 <parse_comands+0x3ce>
					}

					startOfData++;
  4005b0:	3003      	adds	r0, #3
  4005b2:	4603      	mov	r3, r0
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9' || *startOfData == '-')
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  4005b4:	4d39      	ldr	r5, [pc, #228]	; (40069c <parse_comands+0x3f8>)
						tempBuffer[n++] = *startOfData++;
  4005b6:	4e3a      	ldr	r6, [pc, #232]	; (4006a0 <parse_comands+0x3fc>)
						break;
					}

					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9' || *startOfData == '-')
  4005b8:	e003      	b.n	4005c2 <parse_comands+0x31e>
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
  4005ba:	42ab      	cmp	r3, r5
  4005bc:	d80b      	bhi.n	4005d6 <parse_comands+0x332>
						tempBuffer[n++] = *startOfData++;
  4005be:	3301      	adds	r3, #1
  4005c0:	5472      	strb	r2, [r6, r1]
  4005c2:	1a19      	subs	r1, r3, r0
  4005c4:	b2c9      	uxtb	r1, r1
						break;
					}

					startOfData++;
					n = 0;
					while(*startOfData >= '0' && *startOfData <= '9' || *startOfData == '-')
  4005c6:	781a      	ldrb	r2, [r3, #0]
  4005c8:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
  4005cc:	b2e4      	uxtb	r4, r4
  4005ce:	2c09      	cmp	r4, #9
  4005d0:	d9f3      	bls.n	4005ba <parse_comands+0x316>
  4005d2:	2a2d      	cmp	r2, #45	; 0x2d
  4005d4:	d0f1      	beq.n	4005ba <parse_comands+0x316>
					{
						if(startOfData > (holdingBuffer + HOLDING_BUFFER_SIZE - 1)) break;
						tempBuffer[n++] = *startOfData++;
					}
					tempBuffer[n] = 0;
  4005d6:	2000      	movs	r0, #0
  4005d8:	4a31      	ldr	r2, [pc, #196]	; (4006a0 <parse_comands+0x3fc>)
  4005da:	5450      	strb	r0, [r2, r1]
					if(*startOfData == '\r')
  4005dc:	781b      	ldrb	r3, [r3, #0]
  4005de:	2b0d      	cmp	r3, #13
  4005e0:	d13a      	bne.n	400658 <parse_comands+0x3b4>
					{
						a = atoi(tempBuffer);
  4005e2:	4610      	mov	r0, r2
  4005e4:	4b2f      	ldr	r3, [pc, #188]	; (4006a4 <parse_comands+0x400>)
  4005e6:	4798      	blx	r3
  4005e8:	9002      	str	r0, [sp, #8]
						if(a < -10000) a = -10000;
  4005ea:	9a02      	ldr	r2, [sp, #8]
  4005ec:	4b2e      	ldr	r3, [pc, #184]	; (4006a8 <parse_comands+0x404>)
  4005ee:	429a      	cmp	r2, r3
  4005f0:	bfb8      	it	lt
  4005f2:	9302      	strlt	r3, [sp, #8]
						if(a > 10000) a = 10000;
  4005f4:	9a02      	ldr	r2, [sp, #8]
  4005f6:	f242 7310 	movw	r3, #10000	; 0x2710
  4005fa:	429a      	cmp	r2, r3
  4005fc:	bfc8      	it	gt
  4005fe:	9302      	strgt	r3, [sp, #8]
						a = (a * 1000) / DAC_GAIN;
  400600:	9b02      	ldr	r3, [sp, #8]
  400602:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400606:	fb02 f303 	mul.w	r3, r2, r3
  40060a:	4a28      	ldr	r2, [pc, #160]	; (4006ac <parse_comands+0x408>)
  40060c:	fb82 0203 	smull	r0, r2, r2, r3
  400610:	17db      	asrs	r3, r3, #31
  400612:	ebc3 23e2 	rsb	r3, r3, r2, asr #11
  400616:	9302      	str	r3, [sp, #8]
						a += 2048;
  400618:	9b02      	ldr	r3, [sp, #8]
  40061a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
  40061e:	9302      	str	r3, [sp, #8]
						dac_set(dacCh, a);
  400620:	9801      	ldr	r0, [sp, #4]
  400622:	9902      	ldr	r1, [sp, #8]
  400624:	4b22      	ldr	r3, [pc, #136]	; (4006b0 <parse_comands+0x40c>)
  400626:	4798      	blx	r3
						charsPrinted = sprintf(printBuffer, "DAC channel %u set to %d mV\n\r", dacCh, ((a * DAC_GAIN) / 1000) - 10000);
  400628:	9a01      	ldr	r2, [sp, #4]
  40062a:	9b02      	ldr	r3, [sp, #8]
  40062c:	f241 3113 	movw	r1, #4883	; 0x1313
  400630:	fb01 f303 	mul.w	r3, r1, r3
  400634:	491f      	ldr	r1, [pc, #124]	; (4006b4 <parse_comands+0x410>)
  400636:	fb81 0103 	smull	r0, r1, r1, r3
  40063a:	17db      	asrs	r3, r3, #31
  40063c:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
  400640:	a803      	add	r0, sp, #12
  400642:	491d      	ldr	r1, [pc, #116]	; (4006b8 <parse_comands+0x414>)
  400644:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
  400648:	3b10      	subs	r3, #16
  40064a:	4c11      	ldr	r4, [pc, #68]	; (400690 <parse_comands+0x3ec>)
  40064c:	47a0      	blx	r4
  40064e:	4601      	mov	r1, r0
						udi_cdc_write_buf(printBuffer, charsPrinted);
  400650:	a803      	add	r0, sp, #12
  400652:	4b0d      	ldr	r3, [pc, #52]	; (400688 <parse_comands+0x3e4>)
  400654:	4798      	blx	r3
					else
					{
						print_formating_error();
						break;
					}
					break;
  400656:	e00c      	b.n	400672 <parse_comands+0x3ce>
						udi_cdc_write_buf(printBuffer, charsPrinted);
						
					}
					else
					{
						print_formating_error();
  400658:	4b0f      	ldr	r3, [pc, #60]	; (400698 <parse_comands+0x3f4>)
  40065a:	4798      	blx	r3
						break;
  40065c:	e009      	b.n	400672 <parse_comands+0x3ce>
					}
					break;
					
				default:
					charsPrinted = sprintf(printBuffer, "Unknown comand!\n\r");
  40065e:	ac03      	add	r4, sp, #12
  400660:	4d16      	ldr	r5, [pc, #88]	; (4006bc <parse_comands+0x418>)
  400662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400666:	682b      	ldr	r3, [r5, #0]
  400668:	8023      	strh	r3, [r4, #0]
					udi_cdc_write_buf(printBuffer, charsPrinted);
  40066a:	a803      	add	r0, sp, #12
  40066c:	2111      	movs	r1, #17
  40066e:	4b06      	ldr	r3, [pc, #24]	; (400688 <parse_comands+0x3e4>)
  400670:	4798      	blx	r3
					
					
			}
			
			insertPointer = 0;
  400672:	2200      	movs	r2, #0
  400674:	4b12      	ldr	r3, [pc, #72]	; (4006c0 <parse_comands+0x41c>)
  400676:	701a      	strb	r2, [r3, #0]
		}
	
	}
}
  400678:	b010      	add	sp, #64	; 0x40
  40067a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40067e:	bf00      	nop
  400680:	20000bcc 	.word	0x20000bcc
  400684:	004080b4 	.word	0x004080b4
  400688:	00400f19 	.word	0x00400f19
  40068c:	004080c8 	.word	0x004080c8
  400690:	0040353d 	.word	0x0040353d
  400694:	00400e61 	.word	0x00400e61
  400698:	00400275 	.word	0x00400275
  40069c:	2000095f 	.word	0x2000095f
  4006a0:	20000960 	.word	0x20000960
  4006a4:	00403365 	.word	0x00403365
  4006a8:	ffffd8f0 	.word	0xffffd8f0
  4006ac:	6b5ebc37 	.word	0x6b5ebc37
  4006b0:	00400239 	.word	0x00400239
  4006b4:	10624dd3 	.word	0x10624dd3
  4006b8:	004080cc 	.word	0x004080cc
  4006bc:	004080ec 	.word	0x004080ec
  4006c0:	2000096c 	.word	0x2000096c

004006c4 <get_current_DAQ_settings>:



daq_settings_t * get_current_DAQ_settings (void)
{
		daqSettings.sequence[0]= 1;
  4006c4:	4803      	ldr	r0, [pc, #12]	; (4006d4 <get_current_DAQ_settings+0x10>)
  4006c6:	2301      	movs	r3, #1
  4006c8:	7203      	strb	r3, [r0, #8]
		daqSettings.sequence[1]= 2;
  4006ca:	2302      	movs	r3, #2
  4006cc:	7243      	strb	r3, [r0, #9]
		daqSettings.sequence[2]= 3;
  4006ce:	2303      	movs	r3, #3
  4006d0:	7283      	strb	r3, [r0, #10]

	return (&daqSettings);
}
  4006d2:	4770      	bx	lr
  4006d4:	20000bcc 	.word	0x20000bcc

004006d8 <board_init>:
#include <conf_board.h>
#include "wdt.h"
#include "DAC.h"

void board_init(void)
{
  4006d8:	b570      	push	{r4, r5, r6, lr}
  4006da:	b082      	sub	sp, #8
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
//	sysclk_init();
	wdt_disable(WDT);
  4006dc:	480d      	ldr	r0, [pc, #52]	; (400714 <board_init+0x3c>)
  4006de:	4b0e      	ldr	r3, [pc, #56]	; (400718 <board_init+0x40>)
  4006e0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
  4006e2:	200b      	movs	r0, #11
  4006e4:	4b0d      	ldr	r3, [pc, #52]	; (40071c <board_init+0x44>)
  4006e6:	4798      	blx	r3
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
  4006e8:	4e0d      	ldr	r6, [pc, #52]	; (400720 <board_init+0x48>)
  4006ea:	2400      	movs	r4, #0
  4006ec:	9400      	str	r4, [sp, #0]
  4006ee:	4630      	mov	r0, r6
  4006f0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4006f4:	4622      	mov	r2, r4
  4006f6:	4623      	mov	r3, r4
  4006f8:	4d0a      	ldr	r5, [pc, #40]	; (400724 <board_init+0x4c>)
  4006fa:	47a8      	blx	r5
	pio_set_output(PIOA, PIO_PA18, LOW, DISABLE, DISABLE);
  4006fc:	9400      	str	r4, [sp, #0]
  4006fe:	4630      	mov	r0, r6
  400700:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  400704:	4622      	mov	r2, r4
  400706:	4623      	mov	r3, r4
  400708:	47a8      	blx	r5
	dac_init();
  40070a:	4b07      	ldr	r3, [pc, #28]	; (400728 <board_init+0x50>)
  40070c:	4798      	blx	r3
	
}
  40070e:	b002      	add	sp, #8
  400710:	bd70      	pop	{r4, r5, r6, pc}
  400712:	bf00      	nop
  400714:	400e1450 	.word	0x400e1450
  400718:	004030e9 	.word	0x004030e9
  40071c:	0040186d 	.word	0x0040186d
  400720:	400e0e00 	.word	0x400e0e00
  400724:	004016a9 	.word	0x004016a9
  400728:	004001b9 	.word	0x004001b9

0040072c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  40072c:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40072e:	2000      	movs	r0, #0
  400730:	213e      	movs	r1, #62	; 0x3e
  400732:	4b0a      	ldr	r3, [pc, #40]	; (40075c <sysclk_enable_usb+0x30>)
  400734:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400736:	4c0a      	ldr	r4, [pc, #40]	; (400760 <sysclk_enable_usb+0x34>)
  400738:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40073a:	2800      	cmp	r0, #0
  40073c:	d0fc      	beq.n	400738 <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  40073e:	4b09      	ldr	r3, [pc, #36]	; (400764 <sysclk_enable_usb+0x38>)
  400740:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  400742:	4a09      	ldr	r2, [pc, #36]	; (400768 <sysclk_enable_usb+0x3c>)
  400744:	4b09      	ldr	r3, [pc, #36]	; (40076c <sysclk_enable_usb+0x40>)
  400746:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  400748:	4c09      	ldr	r4, [pc, #36]	; (400770 <sysclk_enable_usb+0x44>)
  40074a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40074c:	2800      	cmp	r0, #0
  40074e:	d0fc      	beq.n	40074a <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  400750:	2001      	movs	r0, #1
  400752:	4b08      	ldr	r3, [pc, #32]	; (400774 <sysclk_enable_usb+0x48>)
  400754:	4798      	blx	r3
		pmc_enable_udpck();
  400756:	4b08      	ldr	r3, [pc, #32]	; (400778 <sysclk_enable_usb+0x4c>)
  400758:	4798      	blx	r3
  40075a:	bd10      	pop	{r4, pc}
  40075c:	004017cd 	.word	0x004017cd
  400760:	00401821 	.word	0x00401821
  400764:	00401851 	.word	0x00401851
  400768:	000f3f02 	.word	0x000f3f02
  40076c:	400e0400 	.word	0x400e0400
  400770:	0040185d 	.word	0x0040185d
  400774:	0040191d 	.word	0x0040191d
  400778:	00401931 	.word	0x00401931

0040077c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40077c:	b510      	push	{r4, lr}
	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40077e:	480d      	ldr	r0, [pc, #52]	; (4007b4 <sysclk_init+0x38>)
  400780:	4b0d      	ldr	r3, [pc, #52]	; (4007b8 <sysclk_init+0x3c>)
  400782:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400784:	2000      	movs	r0, #0
  400786:	213e      	movs	r1, #62	; 0x3e
  400788:	4b0c      	ldr	r3, [pc, #48]	; (4007bc <sysclk_init+0x40>)
  40078a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40078c:	4c0c      	ldr	r4, [pc, #48]	; (4007c0 <sysclk_init+0x44>)
  40078e:	47a0      	blx	r4
  400790:	2800      	cmp	r0, #0
  400792:	d0fc      	beq.n	40078e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400794:	4b0b      	ldr	r3, [pc, #44]	; (4007c4 <sysclk_init+0x48>)
  400796:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400798:	4a0b      	ldr	r2, [pc, #44]	; (4007c8 <sysclk_init+0x4c>)
  40079a:	4b0c      	ldr	r3, [pc, #48]	; (4007cc <sysclk_init+0x50>)
  40079c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40079e:	4c0c      	ldr	r4, [pc, #48]	; (4007d0 <sysclk_init+0x54>)
  4007a0:	47a0      	blx	r4
  4007a2:	2800      	cmp	r0, #0
  4007a4:	d0fc      	beq.n	4007a0 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4007a6:	2010      	movs	r0, #16
  4007a8:	4b0a      	ldr	r3, [pc, #40]	; (4007d4 <sysclk_init+0x58>)
  4007aa:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4007ac:	4b0a      	ldr	r3, [pc, #40]	; (4007d8 <sysclk_init+0x5c>)
  4007ae:	4798      	blx	r3
  4007b0:	bd10      	pop	{r4, pc}
  4007b2:	bf00      	nop
  4007b4:	03d09000 	.word	0x03d09000
  4007b8:	004032b9 	.word	0x004032b9
  4007bc:	004017cd 	.word	0x004017cd
  4007c0:	00401821 	.word	0x00401821
  4007c4:	00401831 	.word	0x00401831
  4007c8:	201f3f03 	.word	0x201f3f03
  4007cc:	400e0400 	.word	0x400e0400
  4007d0:	00401841 	.word	0x00401841
  4007d4:	00401769 	.word	0x00401769
  4007d8:	004031a5 	.word	0x004031a5

004007dc <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  4007dc:	490e      	ldr	r1, [pc, #56]	; (400818 <udi_cdc_comm_enable+0x3c>)
  4007de:	2300      	movs	r3, #0
  4007e0:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  4007e2:	4a0e      	ldr	r2, [pc, #56]	; (40081c <udi_cdc_comm_enable+0x40>)
  4007e4:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  4007e6:	4a0e      	ldr	r2, [pc, #56]	; (400820 <udi_cdc_comm_enable+0x44>)
  4007e8:	20a1      	movs	r0, #161	; 0xa1
  4007ea:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  4007ec:	2020      	movs	r0, #32
  4007ee:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  4007f0:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  4007f2:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  4007f4:	2002      	movs	r0, #2
  4007f6:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  4007f8:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  4007fa:	4a0a      	ldr	r2, [pc, #40]	; (400824 <udi_cdc_comm_enable+0x48>)
  4007fc:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  400800:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  400802:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400804:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400806:	2308      	movs	r3, #8
  400808:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  40080a:	780b      	ldrb	r3, [r1, #0]
  40080c:	3301      	adds	r3, #1
  40080e:	b2db      	uxtb	r3, r3
  400810:	700b      	strb	r3, [r1, #0]
	return true;
}
  400812:	2001      	movs	r0, #1
  400814:	4770      	bx	lr
  400816:	bf00      	nop
  400818:	20000a08 	.word	0x20000a08
  40081c:	20000ab4 	.word	0x20000ab4
  400820:	20000a20 	.word	0x20000a20
  400824:	20000970 	.word	0x20000970

00400828 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400828:	4b02      	ldr	r3, [pc, #8]	; (400834 <udi_cdc_comm_disable+0xc>)
  40082a:	781a      	ldrb	r2, [r3, #0]
  40082c:	3a01      	subs	r2, #1
  40082e:	b2d2      	uxtb	r2, r2
  400830:	701a      	strb	r2, [r3, #0]
  400832:	4770      	bx	lr
  400834:	20000a08 	.word	0x20000a08

00400838 <udi_cdc_data_disable>:
{
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400838:	4b04      	ldr	r3, [pc, #16]	; (40084c <udi_cdc_data_disable+0x14>)
  40083a:	781a      	ldrb	r2, [r3, #0]
  40083c:	3a01      	subs	r2, #1
  40083e:	b2d2      	uxtb	r2, r2
  400840:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
  400842:	781b      	ldrb	r3, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  400844:	2200      	movs	r2, #0
  400846:	4b02      	ldr	r3, [pc, #8]	; (400850 <udi_cdc_data_disable+0x18>)
  400848:	701a      	strb	r2, [r3, #0]
  40084a:	4770      	bx	lr
  40084c:	20000978 	.word	0x20000978
  400850:	20000a14 	.word	0x20000a14

00400854 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  400854:	2000      	movs	r0, #0
  400856:	4770      	bx	lr

00400858 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  400858:	2000      	movs	r0, #0
  40085a:	4770      	bx	lr

0040085c <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
  40085c:	4b1d      	ldr	r3, [pc, #116]	; (4008d4 <udi_cdc_comm_setup+0x78>)
  40085e:	781b      	ldrb	r3, [r3, #0]
  400860:	f013 0f80 	tst.w	r3, #128	; 0x80
  400864:	d012      	beq.n	40088c <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400866:	f003 0360 	and.w	r3, r3, #96	; 0x60
  40086a:	2b20      	cmp	r3, #32
  40086c:	d128      	bne.n	4008c0 <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  40086e:	4b19      	ldr	r3, [pc, #100]	; (4008d4 <udi_cdc_comm_setup+0x78>)
  400870:	785b      	ldrb	r3, [r3, #1]
  400872:	2b21      	cmp	r3, #33	; 0x21
  400874:	d126      	bne.n	4008c4 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  400876:	4b17      	ldr	r3, [pc, #92]	; (4008d4 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400878:	88db      	ldrh	r3, [r3, #6]
  40087a:	2b07      	cmp	r3, #7
  40087c:	d124      	bne.n	4008c8 <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  40087e:	4b15      	ldr	r3, [pc, #84]	; (4008d4 <udi_cdc_comm_setup+0x78>)
  400880:	4a15      	ldr	r2, [pc, #84]	; (4008d8 <udi_cdc_comm_setup+0x7c>)
  400882:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  400884:	2207      	movs	r2, #7
  400886:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  400888:	2001      	movs	r0, #1
  40088a:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  40088c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400890:	2b20      	cmp	r3, #32
  400892:	d11b      	bne.n	4008cc <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  400894:	4b0f      	ldr	r3, [pc, #60]	; (4008d4 <udi_cdc_comm_setup+0x78>)
  400896:	7858      	ldrb	r0, [r3, #1]
  400898:	2820      	cmp	r0, #32
  40089a:	d004      	beq.n	4008a6 <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  40089c:	2822      	cmp	r0, #34	; 0x22
  40089e:	bf14      	ite	ne
  4008a0:	2000      	movne	r0, #0
  4008a2:	2001      	moveq	r0, #1
  4008a4:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  4008a6:	4b0b      	ldr	r3, [pc, #44]	; (4008d4 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  4008a8:	88db      	ldrh	r3, [r3, #6]
  4008aa:	2b07      	cmp	r3, #7
  4008ac:	d110      	bne.n	4008d0 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
  4008ae:	4b09      	ldr	r3, [pc, #36]	; (4008d4 <udi_cdc_comm_setup+0x78>)
  4008b0:	4a0a      	ldr	r2, [pc, #40]	; (4008dc <udi_cdc_comm_setup+0x80>)
  4008b2:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  4008b4:	4a08      	ldr	r2, [pc, #32]	; (4008d8 <udi_cdc_comm_setup+0x7c>)
  4008b6:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  4008b8:	2207      	movs	r2, #7
  4008ba:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  4008bc:	2001      	movs	r0, #1
  4008be:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4008c0:	2000      	movs	r0, #0
  4008c2:	4770      	bx	lr
  4008c4:	2000      	movs	r0, #0
  4008c6:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4008c8:	2000      	movs	r0, #0
  4008ca:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  4008cc:	2000      	movs	r0, #0
  4008ce:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  4008d0:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
  4008d2:	4770      	bx	lr
  4008d4:	20000bf0 	.word	0x20000bf0
  4008d8:	20000970 	.word	0x20000970
  4008dc:	004008e1 	.word	0x004008e1

004008e0 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  4008e0:	4770      	bx	lr
  4008e2:	bf00      	nop

004008e4 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
  4008e4:	b530      	push	{r4, r5, lr}
  4008e6:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  4008e8:	4b42      	ldr	r3, [pc, #264]	; (4009f4 <udi_cdc_tx_send+0x110>)
  4008ea:	781b      	ldrb	r3, [r3, #0]
  4008ec:	f013 0fff 	tst.w	r3, #255	; 0xff
  4008f0:	d17e      	bne.n	4009f0 <udi_cdc_tx_send+0x10c>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  4008f2:	4b41      	ldr	r3, [pc, #260]	; (4009f8 <udi_cdc_tx_send+0x114>)
  4008f4:	4798      	blx	r3
  4008f6:	b130      	cbz	r0, 400906 <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  4008f8:	4b40      	ldr	r3, [pc, #256]	; (4009fc <udi_cdc_tx_send+0x118>)
  4008fa:	881c      	ldrh	r4, [r3, #0]
  4008fc:	4b40      	ldr	r3, [pc, #256]	; (400a00 <udi_cdc_tx_send+0x11c>)
  4008fe:	4798      	blx	r3
  400900:	4284      	cmp	r4, r0
  400902:	d106      	bne.n	400912 <udi_cdc_tx_send+0x2e>
  400904:	e074      	b.n	4009f0 <udi_cdc_tx_send+0x10c>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400906:	4b3d      	ldr	r3, [pc, #244]	; (4009fc <udi_cdc_tx_send+0x118>)
  400908:	881c      	ldrh	r4, [r3, #0]
  40090a:	4b3e      	ldr	r3, [pc, #248]	; (400a04 <udi_cdc_tx_send+0x120>)
  40090c:	4798      	blx	r3
  40090e:	4284      	cmp	r4, r0
  400910:	d06e      	beq.n	4009f0 <udi_cdc_tx_send+0x10c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400912:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400916:	f1d3 0501 	rsbs	r5, r3, #1
  40091a:	bf38      	it	cc
  40091c:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40091e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400920:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400924:	2200      	movs	r2, #0
  400926:	4b38      	ldr	r3, [pc, #224]	; (400a08 <udi_cdc_tx_send+0x124>)
  400928:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  40092a:	4b38      	ldr	r3, [pc, #224]	; (400a0c <udi_cdc_tx_send+0x128>)
  40092c:	781c      	ldrb	r4, [r3, #0]
  40092e:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400930:	4b37      	ldr	r3, [pc, #220]	; (400a10 <udi_cdc_tx_send+0x12c>)
  400932:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400936:	b9db      	cbnz	r3, 400970 <udi_cdc_tx_send+0x8c>
		sof_zlp_counter++;
  400938:	4b36      	ldr	r3, [pc, #216]	; (400a14 <udi_cdc_tx_send+0x130>)
  40093a:	881a      	ldrh	r2, [r3, #0]
  40093c:	3201      	adds	r2, #1
  40093e:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  400940:	4b2d      	ldr	r3, [pc, #180]	; (4009f8 <udi_cdc_tx_send+0x114>)
  400942:	4798      	blx	r3
  400944:	b918      	cbnz	r0, 40094e <udi_cdc_tx_send+0x6a>
  400946:	4b33      	ldr	r3, [pc, #204]	; (400a14 <udi_cdc_tx_send+0x130>)
  400948:	881b      	ldrh	r3, [r3, #0]
  40094a:	2b63      	cmp	r3, #99	; 0x63
  40094c:	d907      	bls.n	40095e <udi_cdc_tx_send+0x7a>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  40094e:	4b2a      	ldr	r3, [pc, #168]	; (4009f8 <udi_cdc_tx_send+0x114>)
  400950:	4798      	blx	r3
  400952:	b168      	cbz	r0, 400970 <udi_cdc_tx_send+0x8c>
  400954:	4b2f      	ldr	r3, [pc, #188]	; (400a14 <udi_cdc_tx_send+0x130>)
  400956:	881b      	ldrh	r3, [r3, #0]
  400958:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  40095c:	d208      	bcs.n	400970 <udi_cdc_tx_send+0x8c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40095e:	2d00      	cmp	r5, #0
  400960:	d046      	beq.n	4009f0 <udi_cdc_tx_send+0x10c>
		cpu_irq_enable();
  400962:	2201      	movs	r2, #1
  400964:	4b28      	ldr	r3, [pc, #160]	; (400a08 <udi_cdc_tx_send+0x124>)
  400966:	701a      	strb	r2, [r3, #0]
  400968:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40096c:	b662      	cpsie	i
  40096e:	e03f      	b.n	4009f0 <udi_cdc_tx_send+0x10c>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  400970:	2200      	movs	r2, #0
  400972:	4b28      	ldr	r3, [pc, #160]	; (400a14 <udi_cdc_tx_send+0x130>)
  400974:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400976:	4b28      	ldr	r3, [pc, #160]	; (400a18 <udi_cdc_tx_send+0x134>)
  400978:	781b      	ldrb	r3, [r3, #0]
  40097a:	f013 0fff 	tst.w	r3, #255	; 0xff
  40097e:	d106      	bne.n	40098e <udi_cdc_tx_send+0xaa>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400980:	4294      	cmp	r4, r2
  400982:	bf14      	ite	ne
  400984:	2200      	movne	r2, #0
  400986:	2201      	moveq	r2, #1
  400988:	4b20      	ldr	r3, [pc, #128]	; (400a0c <udi_cdc_tx_send+0x128>)
  40098a:	701a      	strb	r2, [r3, #0]
  40098c:	e003      	b.n	400996 <udi_cdc_tx_send+0xb2>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  40098e:	f1d4 0401 	rsbs	r4, r4, #1
  400992:	bf38      	it	cc
  400994:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  400996:	2201      	movs	r2, #1
  400998:	4b16      	ldr	r3, [pc, #88]	; (4009f4 <udi_cdc_tx_send+0x110>)
  40099a:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40099c:	b125      	cbz	r5, 4009a8 <udi_cdc_tx_send+0xc4>
		cpu_irq_enable();
  40099e:	4b1a      	ldr	r3, [pc, #104]	; (400a08 <udi_cdc_tx_send+0x124>)
  4009a0:	701a      	strb	r2, [r3, #0]
  4009a2:	f3bf 8f5f 	dmb	sy
  4009a6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  4009a8:	4625      	mov	r5, r4
  4009aa:	4b19      	ldr	r3, [pc, #100]	; (400a10 <udi_cdc_tx_send+0x12c>)
  4009ac:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
  4009b0:	3c40      	subs	r4, #64	; 0x40
  4009b2:	bf18      	it	ne
  4009b4:	2401      	movne	r4, #1
	if (b_short_packet) {
  4009b6:	b164      	cbz	r4, 4009d2 <udi_cdc_tx_send+0xee>
		if (udd_is_high_speed()) {
  4009b8:	4b0f      	ldr	r3, [pc, #60]	; (4009f8 <udi_cdc_tx_send+0x114>)
  4009ba:	4798      	blx	r3
  4009bc:	b120      	cbz	r0, 4009c8 <udi_cdc_tx_send+0xe4>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  4009be:	4b10      	ldr	r3, [pc, #64]	; (400a00 <udi_cdc_tx_send+0x11c>)
  4009c0:	4798      	blx	r3
  4009c2:	4b0e      	ldr	r3, [pc, #56]	; (4009fc <udi_cdc_tx_send+0x118>)
  4009c4:	8018      	strh	r0, [r3, #0]
  4009c6:	e007      	b.n	4009d8 <udi_cdc_tx_send+0xf4>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  4009c8:	4b0e      	ldr	r3, [pc, #56]	; (400a04 <udi_cdc_tx_send+0x120>)
  4009ca:	4798      	blx	r3
  4009cc:	4b0b      	ldr	r3, [pc, #44]	; (4009fc <udi_cdc_tx_send+0x118>)
  4009ce:	8018      	strh	r0, [r3, #0]
  4009d0:	e002      	b.n	4009d8 <udi_cdc_tx_send+0xf4>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  4009d2:	2200      	movs	r2, #0
  4009d4:	4b09      	ldr	r3, [pc, #36]	; (4009fc <udi_cdc_tx_send+0x118>)
  4009d6:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  4009d8:	4b0d      	ldr	r3, [pc, #52]	; (400a10 <udi_cdc_tx_send+0x12c>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  4009da:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  4009de:	4a0f      	ldr	r2, [pc, #60]	; (400a1c <udi_cdc_tx_send+0x138>)
  4009e0:	9200      	str	r2, [sp, #0]
  4009e2:	2081      	movs	r0, #129	; 0x81
  4009e4:	4621      	mov	r1, r4
  4009e6:	4a0e      	ldr	r2, [pc, #56]	; (400a20 <udi_cdc_tx_send+0x13c>)
  4009e8:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  4009ec:	4c0d      	ldr	r4, [pc, #52]	; (400a24 <udi_cdc_tx_send+0x140>)
  4009ee:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  4009f0:	b003      	add	sp, #12
  4009f2:	bd30      	pop	{r4, r5, pc}
  4009f4:	20000a1c 	.word	0x20000a1c
  4009f8:	00402a99 	.word	0x00402a99
  4009fc:	20000a10 	.word	0x20000a10
  400a00:	00402b01 	.word	0x00402b01
  400a04:	00402af1 	.word	0x00402af1
  400a08:	200000b0 	.word	0x200000b0
  400a0c:	2000097c 	.word	0x2000097c
  400a10:	20000980 	.word	0x20000980
  400a14:	2000096e 	.word	0x2000096e
  400a18:	20000ab0 	.word	0x20000ab0
  400a1c:	00400a29 	.word	0x00400a29
  400a20:	20000984 	.word	0x20000984
  400a24:	00402e4d 	.word	0x00402e4d

00400a28 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400a28:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400a2a:	b978      	cbnz	r0, 400a4c <udi_cdc_data_sent+0x24>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  400a2c:	4b08      	ldr	r3, [pc, #32]	; (400a50 <udi_cdc_data_sent+0x28>)
  400a2e:	781b      	ldrb	r3, [r3, #0]
  400a30:	f013 0fff 	tst.w	r3, #255	; 0xff
  400a34:	bf14      	ite	ne
  400a36:	2200      	movne	r2, #0
  400a38:	2201      	moveq	r2, #1
  400a3a:	4b06      	ldr	r3, [pc, #24]	; (400a54 <udi_cdc_data_sent+0x2c>)
  400a3c:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400a40:	4b05      	ldr	r3, [pc, #20]	; (400a58 <udi_cdc_data_sent+0x30>)
  400a42:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  400a44:	4b05      	ldr	r3, [pc, #20]	; (400a5c <udi_cdc_data_sent+0x34>)
  400a46:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  400a48:	4b05      	ldr	r3, [pc, #20]	; (400a60 <udi_cdc_data_sent+0x38>)
  400a4a:	4798      	blx	r3
  400a4c:	bd08      	pop	{r3, pc}
  400a4e:	bf00      	nop
  400a50:	2000097c 	.word	0x2000097c
  400a54:	20000980 	.word	0x20000980
  400a58:	20000ab0 	.word	0x20000ab0
  400a5c:	20000a1c 	.word	0x20000a1c
  400a60:	004008e5 	.word	0x004008e5

00400a64 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
  400a64:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  400a66:	2000      	movs	r0, #0
  400a68:	4b01      	ldr	r3, [pc, #4]	; (400a70 <udi_cdc_data_sof_notify+0xc>)
  400a6a:	4798      	blx	r3
  400a6c:	bd08      	pop	{r3, pc}
  400a6e:	bf00      	nop
  400a70:	004008e5 	.word	0x004008e5

00400a74 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400a74:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400a78:	b672      	cpsid	i
  400a7a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400a7e:	2100      	movs	r1, #0
  400a80:	4a09      	ldr	r2, [pc, #36]	; (400aa8 <udi_cdc_multi_get_nb_received_data+0x34>)
  400a82:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400a84:	4a09      	ldr	r2, [pc, #36]	; (400aac <udi_cdc_multi_get_nb_received_data+0x38>)
  400a86:	8810      	ldrh	r0, [r2, #0]
  400a88:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  400a8a:	4a09      	ldr	r2, [pc, #36]	; (400ab0 <udi_cdc_multi_get_nb_received_data+0x3c>)
  400a8c:	7811      	ldrb	r1, [r2, #0]
  400a8e:	4a09      	ldr	r2, [pc, #36]	; (400ab4 <udi_cdc_multi_get_nb_received_data+0x40>)
  400a90:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  400a94:	1a10      	subs	r0, r2, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400a96:	b92b      	cbnz	r3, 400aa4 <udi_cdc_multi_get_nb_received_data+0x30>
		cpu_irq_enable();
  400a98:	2201      	movs	r2, #1
  400a9a:	4b03      	ldr	r3, [pc, #12]	; (400aa8 <udi_cdc_multi_get_nb_received_data+0x34>)
  400a9c:	701a      	strb	r2, [r3, #0]
  400a9e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400aa2:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  400aa4:	4770      	bx	lr
  400aa6:	bf00      	nop
  400aa8:	200000b0 	.word	0x200000b0
  400aac:	20000a0c 	.word	0x20000a0c
  400ab0:	20000a18 	.word	0x20000a18
  400ab4:	20000a04 	.word	0x20000a04

00400ab8 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  400ab8:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  400aba:	4b03      	ldr	r3, [pc, #12]	; (400ac8 <udi_cdc_multi_is_rx_ready+0x10>)
  400abc:	4798      	blx	r3
}
  400abe:	3000      	adds	r0, #0
  400ac0:	bf18      	it	ne
  400ac2:	2001      	movne	r0, #1
  400ac4:	bd08      	pop	{r3, pc}
  400ac6:	bf00      	nop
  400ac8:	00400a75 	.word	0x00400a75

00400acc <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  400acc:	b510      	push	{r4, lr}
  400ace:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ad0:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400ad4:	f1d3 0301 	rsbs	r3, r3, #1
  400ad8:	bf38      	it	cc
  400ada:	2300      	movcc	r3, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400adc:	b672      	cpsid	i
  400ade:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400ae2:	2100      	movs	r1, #0
  400ae4:	4a1e      	ldr	r2, [pc, #120]	; (400b60 <udi_cdc_rx_start+0x94>)
  400ae6:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  400ae8:	4a1e      	ldr	r2, [pc, #120]	; (400b64 <udi_cdc_rx_start+0x98>)
  400aea:	7814      	ldrb	r4, [r2, #0]
  400aec:	b2e4      	uxtb	r4, r4
	if (udi_cdc_rx_trans_ongoing[port] ||
  400aee:	4a1e      	ldr	r2, [pc, #120]	; (400b68 <udi_cdc_rx_start+0x9c>)
  400af0:	7812      	ldrb	r2, [r2, #0]
  400af2:	f012 0fff 	tst.w	r2, #255	; 0xff
  400af6:	d107      	bne.n	400b08 <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  400af8:	4a1c      	ldr	r2, [pc, #112]	; (400b6c <udi_cdc_rx_start+0xa0>)
  400afa:	8812      	ldrh	r2, [r2, #0]
  400afc:	b292      	uxth	r2, r2
  400afe:	491c      	ldr	r1, [pc, #112]	; (400b70 <udi_cdc_rx_start+0xa4>)
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  400b00:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
  400b04:	4291      	cmp	r1, r2
  400b06:	d908      	bls.n	400b1a <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b08:	b33b      	cbz	r3, 400b5a <udi_cdc_rx_start+0x8e>
		cpu_irq_enable();
  400b0a:	2201      	movs	r2, #1
  400b0c:	4b14      	ldr	r3, [pc, #80]	; (400b60 <udi_cdc_rx_start+0x94>)
  400b0e:	701a      	strb	r2, [r3, #0]
  400b10:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400b14:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400b16:	2000      	movs	r0, #0
  400b18:	e020      	b.n	400b5c <udi_cdc_rx_start+0x90>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  400b1a:	2100      	movs	r1, #0
  400b1c:	4a13      	ldr	r2, [pc, #76]	; (400b6c <udi_cdc_rx_start+0xa0>)
  400b1e:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400b20:	428c      	cmp	r4, r1
  400b22:	bf14      	ite	ne
  400b24:	2100      	movne	r1, #0
  400b26:	2101      	moveq	r1, #1
  400b28:	4a0e      	ldr	r2, [pc, #56]	; (400b64 <udi_cdc_rx_start+0x98>)
  400b2a:	7011      	strb	r1, [r2, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  400b2c:	2101      	movs	r1, #1
  400b2e:	4a0e      	ldr	r2, [pc, #56]	; (400b68 <udi_cdc_rx_start+0x9c>)
  400b30:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b32:	b123      	cbz	r3, 400b3e <udi_cdc_rx_start+0x72>
		cpu_irq_enable();
  400b34:	4b0a      	ldr	r3, [pc, #40]	; (400b60 <udi_cdc_rx_start+0x94>)
  400b36:	7019      	strb	r1, [r3, #0]
  400b38:	f3bf 8f5f 	dmb	sy
  400b3c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
  400b3e:	2000      	movs	r0, #0
  400b40:	4b0c      	ldr	r3, [pc, #48]	; (400b74 <udi_cdc_rx_start+0xa8>)
  400b42:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  400b44:	4b0c      	ldr	r3, [pc, #48]	; (400b78 <udi_cdc_rx_start+0xac>)
  400b46:	9300      	str	r3, [sp, #0]
  400b48:	2002      	movs	r0, #2
  400b4a:	2101      	movs	r1, #1
  400b4c:	4a0b      	ldr	r2, [pc, #44]	; (400b7c <udi_cdc_rx_start+0xb0>)
  400b4e:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  400b52:	2340      	movs	r3, #64	; 0x40
  400b54:	4c0a      	ldr	r4, [pc, #40]	; (400b80 <udi_cdc_rx_start+0xb4>)
  400b56:	47a0      	blx	r4
  400b58:	e000      	b.n	400b5c <udi_cdc_rx_start+0x90>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  400b5a:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  400b5c:	b002      	add	sp, #8
  400b5e:	bd10      	pop	{r4, pc}
  400b60:	200000b0 	.word	0x200000b0
  400b64:	20000a18 	.word	0x20000a18
  400b68:	20000aac 	.word	0x20000aac
  400b6c:	20000a0c 	.word	0x20000a0c
  400b70:	20000a04 	.word	0x20000a04
  400b74:	00400ab9 	.word	0x00400ab9
  400b78:	00400c15 	.word	0x00400c15
  400b7c:	20000a2c 	.word	0x20000a2c
  400b80:	00402e4d 	.word	0x00402e4d

00400b84 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
  400b84:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
  400b86:	2400      	movs	r4, #0
  400b88:	4b15      	ldr	r3, [pc, #84]	; (400be0 <udi_cdc_data_enable+0x5c>)
  400b8a:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  400b8c:	4b15      	ldr	r3, [pc, #84]	; (400be4 <udi_cdc_data_enable+0x60>)
  400b8e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  400b90:	4b15      	ldr	r3, [pc, #84]	; (400be8 <udi_cdc_data_enable+0x64>)
  400b92:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  400b94:	4b15      	ldr	r3, [pc, #84]	; (400bec <udi_cdc_data_enable+0x68>)
  400b96:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  400b98:	4b15      	ldr	r3, [pc, #84]	; (400bf0 <udi_cdc_data_enable+0x6c>)
  400b9a:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  400b9c:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  400b9e:	4b15      	ldr	r3, [pc, #84]	; (400bf4 <udi_cdc_data_enable+0x70>)
  400ba0:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  400ba2:	4620      	mov	r0, r4
  400ba4:	4b14      	ldr	r3, [pc, #80]	; (400bf8 <udi_cdc_data_enable+0x74>)
  400ba6:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  400ba8:	4b14      	ldr	r3, [pc, #80]	; (400bfc <udi_cdc_data_enable+0x78>)
  400baa:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  400bac:	4b14      	ldr	r3, [pc, #80]	; (400c00 <udi_cdc_data_enable+0x7c>)
  400bae:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  400bb0:	4b14      	ldr	r3, [pc, #80]	; (400c04 <udi_cdc_data_enable+0x80>)
  400bb2:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
  400bb4:	4b14      	ldr	r3, [pc, #80]	; (400c08 <udi_cdc_data_enable+0x84>)
  400bb6:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  400bb8:	4620      	mov	r0, r4
  400bba:	4b14      	ldr	r3, [pc, #80]	; (400c0c <udi_cdc_data_enable+0x88>)
  400bbc:	4798      	blx	r3
  400bbe:	4602      	mov	r2, r0
  400bc0:	b158      	cbz	r0, 400bda <udi_cdc_data_enable+0x56>
		return false;
	}
	udi_cdc_nb_data_enabled++;
  400bc2:	4b07      	ldr	r3, [pc, #28]	; (400be0 <udi_cdc_data_enable+0x5c>)
  400bc4:	7819      	ldrb	r1, [r3, #0]
  400bc6:	3101      	adds	r1, #1
  400bc8:	b2c9      	uxtb	r1, r1
  400bca:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  400bcc:	781b      	ldrb	r3, [r3, #0]
  400bce:	b2db      	uxtb	r3, r3
  400bd0:	2b01      	cmp	r3, #1
  400bd2:	d102      	bne.n	400bda <udi_cdc_data_enable+0x56>
		udi_cdc_data_running = true;
  400bd4:	2101      	movs	r1, #1
  400bd6:	4b0e      	ldr	r3, [pc, #56]	; (400c10 <udi_cdc_data_enable+0x8c>)
  400bd8:	7019      	strb	r1, [r3, #0]
	}
	return true;
}
  400bda:	4610      	mov	r0, r2
  400bdc:	bd10      	pop	{r4, pc}
  400bde:	bf00      	nop
  400be0:	20000978 	.word	0x20000978
  400be4:	20000a1c 	.word	0x20000a1c
  400be8:	20000ab0 	.word	0x20000ab0
  400bec:	2000097c 	.word	0x2000097c
  400bf0:	20000980 	.word	0x20000980
  400bf4:	20000a10 	.word	0x20000a10
  400bf8:	004008e5 	.word	0x004008e5
  400bfc:	20000aac 	.word	0x20000aac
  400c00:	20000a18 	.word	0x20000a18
  400c04:	20000a04 	.word	0x20000a04
  400c08:	20000a0c 	.word	0x20000a0c
  400c0c:	00400acd 	.word	0x00400acd
  400c10:	20000a14 	.word	0x20000a14

00400c14 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  400c14:	b510      	push	{r4, lr}
  400c16:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  400c18:	b9d0      	cbnz	r0, 400c50 <udi_cdc_data_received+0x3c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  400c1a:	4b0e      	ldr	r3, [pc, #56]	; (400c54 <udi_cdc_data_received+0x40>)
  400c1c:	781b      	ldrb	r3, [r3, #0]
  400c1e:	f013 0fff 	tst.w	r3, #255	; 0xff
  400c22:	bf14      	ite	ne
  400c24:	2300      	movne	r3, #0
  400c26:	2301      	moveq	r3, #1
	if (!n) {
  400c28:	b951      	cbnz	r1, 400c40 <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
  400c2a:	490b      	ldr	r1, [pc, #44]	; (400c58 <udi_cdc_data_received+0x44>)
  400c2c:	9100      	str	r1, [sp, #0]
  400c2e:	4610      	mov	r0, r2
  400c30:	2101      	movs	r1, #1
  400c32:	4a0a      	ldr	r2, [pc, #40]	; (400c5c <udi_cdc_data_received+0x48>)
  400c34:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  400c38:	2340      	movs	r3, #64	; 0x40
  400c3a:	4c09      	ldr	r4, [pc, #36]	; (400c60 <udi_cdc_data_received+0x4c>)
  400c3c:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  400c3e:	e007      	b.n	400c50 <udi_cdc_data_received+0x3c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  400c40:	4a08      	ldr	r2, [pc, #32]	; (400c64 <udi_cdc_data_received+0x50>)
  400c42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  400c46:	2000      	movs	r0, #0
  400c48:	4b07      	ldr	r3, [pc, #28]	; (400c68 <udi_cdc_data_received+0x54>)
  400c4a:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  400c4c:	4b07      	ldr	r3, [pc, #28]	; (400c6c <udi_cdc_data_received+0x58>)
  400c4e:	4798      	blx	r3
}
  400c50:	b002      	add	sp, #8
  400c52:	bd10      	pop	{r4, pc}
  400c54:	20000a18 	.word	0x20000a18
  400c58:	00400c15 	.word	0x00400c15
  400c5c:	20000a2c 	.word	0x20000a2c
  400c60:	00402e4d 	.word	0x00402e4d
  400c64:	20000a04 	.word	0x20000a04
  400c68:	20000aac 	.word	0x20000aac
  400c6c:	00400acd 	.word	0x00400acd

00400c70 <udi_cdc_is_rx_ready>:
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
  400c70:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
  400c72:	2000      	movs	r0, #0
  400c74:	4b01      	ldr	r3, [pc, #4]	; (400c7c <udi_cdc_is_rx_ready+0xc>)
  400c76:	4798      	blx	r3
}
  400c78:	bd08      	pop	{r3, pc}
  400c7a:	bf00      	nop
  400c7c:	00400ab9 	.word	0x00400ab9

00400c80 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
  400c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400c84:	4b21      	ldr	r3, [pc, #132]	; (400d0c <udi_cdc_multi_getc+0x8c>)
  400c86:	f893 9006 	ldrb.w	r9, [r3, #6]
  400c8a:	f1b9 0f09 	cmp.w	r9, #9
  400c8e:	bf14      	ite	ne
  400c90:	f04f 0900 	movne.w	r9, #0
  400c94:	f04f 0901 	moveq.w	r9, #1
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
  400c98:	2000      	movs	r0, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400c9a:	4c1d      	ldr	r4, [pc, #116]	; (400d10 <udi_cdc_multi_getc+0x90>)
  400c9c:	4680      	mov	r8, r0
  400c9e:	4607      	mov	r7, r0
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400ca0:	4d1c      	ldr	r5, [pc, #112]	; (400d14 <udi_cdc_multi_getc+0x94>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  400ca2:	4e1d      	ldr	r6, [pc, #116]	; (400d18 <udi_cdc_multi_getc+0x98>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ca4:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400ca8:	b672      	cpsid	i
  400caa:	f3bf 8f5f 	dmb	sy
  400cae:	7027      	strb	r7, [r4, #0]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  400cb0:	882b      	ldrh	r3, [r5, #0]
  400cb2:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  400cb4:	7832      	ldrb	r2, [r6, #0]
  400cb6:	b2d2      	uxtb	r2, r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400cb8:	b921      	cbnz	r1, 400cc4 <udi_cdc_multi_getc+0x44>
		cpu_irq_enable();
  400cba:	2101      	movs	r1, #1
  400cbc:	7021      	strb	r1, [r4, #0]
  400cbe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400cc2:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
  400cc4:	4915      	ldr	r1, [pc, #84]	; (400d1c <udi_cdc_multi_getc+0x9c>)
  400cc6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  400cca:	4299      	cmp	r1, r3
  400ccc:	d807      	bhi.n	400cde <udi_cdc_multi_getc+0x5e>
		if (!udi_cdc_data_running) {
  400cce:	4b14      	ldr	r3, [pc, #80]	; (400d20 <udi_cdc_multi_getc+0xa0>)
  400cd0:	781b      	ldrb	r3, [r3, #0]
  400cd2:	f013 0fff 	tst.w	r3, #255	; 0xff
  400cd6:	d1e5      	bne.n	400ca4 <udi_cdc_multi_getc+0x24>
			return 0;
  400cd8:	2000      	movs	r0, #0
  400cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400cde:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  400ce2:	4910      	ldr	r1, [pc, #64]	; (400d24 <udi_cdc_multi_getc+0xa4>)
  400ce4:	f811 a002 	ldrb.w	sl, [r1, r2]
  400ce8:	ea40 0a0a 	orr.w	sl, r0, sl
	udi_cdc_rx_pos[port] = pos+1;
  400cec:	3301      	adds	r3, #1
  400cee:	b29b      	uxth	r3, r3
  400cf0:	802b      	strh	r3, [r5, #0]

	udi_cdc_rx_start(port);
  400cf2:	4640      	mov	r0, r8
  400cf4:	4b0c      	ldr	r3, [pc, #48]	; (400d28 <udi_cdc_multi_getc+0xa8>)
  400cf6:	4798      	blx	r3

	if (b_databit_9) {
  400cf8:	f1b9 0f00 	cmp.w	r9, #0
  400cfc:	d003      	beq.n	400d06 <udi_cdc_multi_getc+0x86>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
  400cfe:	ea4f 200a 	mov.w	r0, sl, lsl #8

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
  400d02:	46c1      	mov	r9, r8
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
  400d04:	e7ce      	b.n	400ca4 <udi_cdc_multi_getc+0x24>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  400d06:	4650      	mov	r0, sl
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  400d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400d0c:	20000970 	.word	0x20000970
  400d10:	200000b0 	.word	0x200000b0
  400d14:	20000a0c 	.word	0x20000a0c
  400d18:	20000a18 	.word	0x20000a18
  400d1c:	20000a04 	.word	0x20000a04
  400d20:	20000a14 	.word	0x20000a14
  400d24:	20000a2c 	.word	0x20000a2c
  400d28:	00400acd 	.word	0x00400acd

00400d2c <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  400d2c:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  400d2e:	2000      	movs	r0, #0
  400d30:	4b01      	ldr	r3, [pc, #4]	; (400d38 <udi_cdc_getc+0xc>)
  400d32:	4798      	blx	r3
}
  400d34:	bd08      	pop	{r3, pc}
  400d36:	bf00      	nop
  400d38:	00400c81 	.word	0x00400c81

00400d3c <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
  400d3c:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400d3e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400d42:	b672      	cpsid	i
  400d44:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400d48:	2200      	movs	r2, #0
  400d4a:	4b17      	ldr	r3, [pc, #92]	; (400da8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400d4c:	701a      	strb	r2, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400d4e:	4b17      	ldr	r3, [pc, #92]	; (400dac <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400d50:	7819      	ldrb	r1, [r3, #0]
  400d52:	b2c9      	uxtb	r1, r1
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400d54:	4a16      	ldr	r2, [pc, #88]	; (400db0 <udi_cdc_multi_get_free_tx_buffer+0x74>)
  400d56:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
  400d5a:	f1d1 0101 	rsbs	r1, r1, #1
  400d5e:	bf38      	it	cc
  400d60:	2100      	movcc	r1, #0
  400d62:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  400d66:	2b40      	cmp	r3, #64	; 0x40
  400d68:	d110      	bne.n	400d8c <udi_cdc_multi_get_free_tx_buffer+0x50>
		if ((!udi_cdc_tx_trans_ongoing[port])
  400d6a:	4a12      	ldr	r2, [pc, #72]	; (400db4 <udi_cdc_multi_get_free_tx_buffer+0x78>)
  400d6c:	7812      	ldrb	r2, [r2, #0]
  400d6e:	f012 0fff 	tst.w	r2, #255	; 0xff
  400d72:	d10b      	bne.n	400d8c <udi_cdc_multi_get_free_tx_buffer+0x50>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  400d74:	4a10      	ldr	r2, [pc, #64]	; (400db8 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
  400d76:	7812      	ldrb	r2, [r2, #0]
  400d78:	f012 0fff 	tst.w	r2, #255	; 0xff
  400d7c:	d106      	bne.n	400d8c <udi_cdc_multi_get_free_tx_buffer+0x50>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  400d7e:	2201      	movs	r2, #1
  400d80:	4b0d      	ldr	r3, [pc, #52]	; (400db8 <udi_cdc_multi_get_free_tx_buffer+0x7c>)
  400d82:	701a      	strb	r2, [r3, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  400d84:	4b09      	ldr	r3, [pc, #36]	; (400dac <udi_cdc_multi_get_free_tx_buffer+0x70>)
  400d86:	7019      	strb	r1, [r3, #0]
			buf_sel_nb = 0;
			buf_nosel_nb = UDI_CDC_TX_BUFFERS;
  400d88:	2040      	movs	r0, #64	; 0x40
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
			buf_sel_nb = 0;
  400d8a:	2300      	movs	r3, #0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400d8c:	b92c      	cbnz	r4, 400d9a <udi_cdc_multi_get_free_tx_buffer+0x5e>
		cpu_irq_enable();
  400d8e:	2101      	movs	r1, #1
  400d90:	4a05      	ldr	r2, [pc, #20]	; (400da8 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  400d92:	7011      	strb	r1, [r2, #0]
  400d94:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400d98:	b662      	cpsie	i
  400d9a:	4418      	add	r0, r3
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
  400d9c:	f1c0 0080 	rsb	r0, r0, #128	; 0x80
  400da0:	f85d 4b04 	ldr.w	r4, [sp], #4
  400da4:	4770      	bx	lr
  400da6:	bf00      	nop
  400da8:	200000b0 	.word	0x200000b0
  400dac:	2000097c 	.word	0x2000097c
  400db0:	20000980 	.word	0x20000980
  400db4:	20000a1c 	.word	0x20000a1c
  400db8:	20000ab0 	.word	0x20000ab0

00400dbc <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  400dbc:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  400dbe:	4b03      	ldr	r3, [pc, #12]	; (400dcc <udi_cdc_multi_is_tx_ready+0x10>)
  400dc0:	4798      	blx	r3
}
  400dc2:	3000      	adds	r0, #0
  400dc4:	bf18      	it	ne
  400dc6:	2001      	movne	r0, #1
  400dc8:	bd08      	pop	{r3, pc}
  400dca:	bf00      	nop
  400dcc:	00400d3d 	.word	0x00400d3d

00400dd0 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
  400dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dd4:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  400dd6:	4b1b      	ldr	r3, [pc, #108]	; (400e44 <udi_cdc_multi_putc+0x74>)
  400dd8:	799e      	ldrb	r6, [r3, #6]
  400dda:	2e09      	cmp	r6, #9
  400ddc:	bf14      	ite	ne
  400dde:	2600      	movne	r6, #0
  400de0:	2601      	moveq	r6, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400de2:	4d19      	ldr	r5, [pc, #100]	; (400e48 <udi_cdc_multi_putc+0x78>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400de4:	4f19      	ldr	r7, [pc, #100]	; (400e4c <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400de6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 400e5c <udi_cdc_multi_putc+0x8c>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400dea:	2000      	movs	r0, #0
  400dec:	47a8      	blx	r5
  400dee:	b930      	cbnz	r0, 400dfe <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
  400df0:	4b17      	ldr	r3, [pc, #92]	; (400e50 <udi_cdc_multi_putc+0x80>)
  400df2:	781b      	ldrb	r3, [r3, #0]
  400df4:	f013 0fff 	tst.w	r3, #255	; 0xff
  400df8:	d1f7      	bne.n	400dea <udi_cdc_multi_putc+0x1a>
  400dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400dfe:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400e02:	b672      	cpsid	i
  400e04:	f3bf 8f5f 	dmb	sy
  400e08:	2300      	movs	r3, #0
  400e0a:	703b      	strb	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400e0c:	f898 3000 	ldrb.w	r3, [r8]
  400e10:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  400e12:	4810      	ldr	r0, [pc, #64]	; (400e54 <udi_cdc_multi_putc+0x84>)
  400e14:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
  400e18:	f102 0c01 	add.w	ip, r2, #1
  400e1c:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
  400e20:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  400e24:	4a0c      	ldr	r2, [pc, #48]	; (400e58 <udi_cdc_multi_putc+0x88>)
  400e26:	54d4      	strb	r4, [r2, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400e28:	b921      	cbnz	r1, 400e34 <udi_cdc_multi_putc+0x64>
		cpu_irq_enable();
  400e2a:	2301      	movs	r3, #1
  400e2c:	703b      	strb	r3, [r7, #0]
  400e2e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400e32:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  400e34:	b116      	cbz	r6, 400e3c <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  400e36:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
  400e38:	2600      	movs	r6, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
  400e3a:	e7d6      	b.n	400dea <udi_cdc_multi_putc+0x1a>
	}
	return true;
  400e3c:	2001      	movs	r0, #1
}
  400e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e42:	bf00      	nop
  400e44:	20000970 	.word	0x20000970
  400e48:	00400dbd 	.word	0x00400dbd
  400e4c:	200000b0 	.word	0x200000b0
  400e50:	20000a14 	.word	0x20000a14
  400e54:	20000980 	.word	0x20000980
  400e58:	20000984 	.word	0x20000984
  400e5c:	2000097c 	.word	0x2000097c

00400e60 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  400e60:	b508      	push	{r3, lr}
  400e62:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
  400e64:	2000      	movs	r0, #0
  400e66:	4b01      	ldr	r3, [pc, #4]	; (400e6c <udi_cdc_putc+0xc>)
  400e68:	4798      	blx	r3
}
  400e6a:	bd08      	pop	{r3, pc}
  400e6c:	00400dd1 	.word	0x00400dd1

00400e70 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
  400e70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e74:	4688      	mov	r8, r1
  400e76:	4615      	mov	r5, r2

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
  400e78:	4b1f      	ldr	r3, [pc, #124]	; (400ef8 <udi_cdc_multi_write_buf+0x88>)
  400e7a:	799b      	ldrb	r3, [r3, #6]
  400e7c:	2b09      	cmp	r3, #9
		size *=2;
  400e7e:	bf08      	it	eq
  400e80:	0055      	lsleq	r5, r2, #1
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  400e82:	f8df a08c 	ldr.w	sl, [pc, #140]	; 400f10 <udi_cdc_multi_write_buf+0xa0>
  400e86:	2000      	movs	r0, #0
  400e88:	47d0      	blx	sl
  400e8a:	b938      	cbnz	r0, 400e9c <udi_cdc_multi_write_buf+0x2c>
		if (!udi_cdc_data_running) {
  400e8c:	4b1b      	ldr	r3, [pc, #108]	; (400efc <udi_cdc_multi_write_buf+0x8c>)
  400e8e:	781b      	ldrb	r3, [r3, #0]
  400e90:	f013 0fff 	tst.w	r3, #255	; 0xff
  400e94:	d1f7      	bne.n	400e86 <udi_cdc_multi_write_buf+0x16>
  400e96:	4628      	mov	r0, r5
  400e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400e9c:	f3ef 8b10 	mrs	fp, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  400ea0:	b672      	cpsid	i
  400ea2:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  400ea6:	2300      	movs	r3, #0
  400ea8:	4a15      	ldr	r2, [pc, #84]	; (400f00 <udi_cdc_multi_write_buf+0x90>)
  400eaa:	7013      	strb	r3, [r2, #0]
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  400eac:	4b15      	ldr	r3, [pc, #84]	; (400f04 <udi_cdc_multi_write_buf+0x94>)
  400eae:	781e      	ldrb	r6, [r3, #0]
  400eb0:	b2f6      	uxtb	r6, r6
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  400eb2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 400f14 <udi_cdc_multi_write_buf+0xa4>
  400eb6:	f839 7016 	ldrh.w	r7, [r9, r6, lsl #1]
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
  400eba:	f1c7 0440 	rsb	r4, r7, #64	; 0x40
  400ebe:	42a5      	cmp	r5, r4
  400ec0:	bf38      	it	cc
  400ec2:	462c      	movcc	r4, r5
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
  400ec4:	eb07 1386 	add.w	r3, r7, r6, lsl #6
  400ec8:	480f      	ldr	r0, [pc, #60]	; (400f08 <udi_cdc_multi_write_buf+0x98>)
  400eca:	4418      	add	r0, r3
  400ecc:	4641      	mov	r1, r8
  400ece:	4622      	mov	r2, r4
  400ed0:	4b0e      	ldr	r3, [pc, #56]	; (400f0c <udi_cdc_multi_write_buf+0x9c>)
  400ed2:	4798      	blx	r3
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
  400ed4:	4427      	add	r7, r4
  400ed6:	f829 7016 	strh.w	r7, [r9, r6, lsl #1]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400eda:	465b      	mov	r3, fp
  400edc:	b92b      	cbnz	r3, 400eea <udi_cdc_multi_write_buf+0x7a>
		cpu_irq_enable();
  400ede:	2301      	movs	r3, #1
  400ee0:	4a07      	ldr	r2, [pc, #28]	; (400f00 <udi_cdc_multi_write_buf+0x90>)
  400ee2:	7013      	strb	r3, [r2, #0]
  400ee4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  400ee8:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
  400eea:	44a0      	add	r8, r4
	size -= copy_nb;

	if (size) {
  400eec:	1b2d      	subs	r5, r5, r4
  400eee:	d1ca      	bne.n	400e86 <udi_cdc_multi_write_buf+0x16>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
  400ef0:	2000      	movs	r0, #0
}
  400ef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400ef6:	bf00      	nop
  400ef8:	20000970 	.word	0x20000970
  400efc:	20000a14 	.word	0x20000a14
  400f00:	200000b0 	.word	0x200000b0
  400f04:	2000097c 	.word	0x2000097c
  400f08:	20000984 	.word	0x20000984
  400f0c:	004033bd 	.word	0x004033bd
  400f10:	00400dbd 	.word	0x00400dbd
  400f14:	20000980 	.word	0x20000980

00400f18 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
  400f18:	b508      	push	{r3, lr}
  400f1a:	4603      	mov	r3, r0
  400f1c:	460a      	mov	r2, r1
	return udi_cdc_multi_write_buf(0, buf, size);
  400f1e:	2000      	movs	r0, #0
  400f20:	4619      	mov	r1, r3
  400f22:	4b01      	ldr	r3, [pc, #4]	; (400f28 <udi_cdc_write_buf+0x10>)
  400f24:	4798      	blx	r3
}
  400f26:	bd08      	pop	{r3, pc}
  400f28:	00400e71 	.word	0x00400e71

00400f2c <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  400f2c:	4b0f      	ldr	r3, [pc, #60]	; (400f6c <udc_next_desc_in_iface+0x40>)
  400f2e:	681b      	ldr	r3, [r3, #0]
  400f30:	681b      	ldr	r3, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400f32:	885a      	ldrh	r2, [r3, #2]
  400f34:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400f36:	7803      	ldrb	r3, [r0, #0]
  400f38:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400f3a:	4290      	cmp	r0, r2
  400f3c:	d210      	bcs.n	400f60 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400f3e:	7843      	ldrb	r3, [r0, #1]
  400f40:	2b04      	cmp	r3, #4
  400f42:	d00f      	beq.n	400f64 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400f44:	428b      	cmp	r3, r1
  400f46:	d105      	bne.n	400f54 <udc_next_desc_in_iface+0x28>
  400f48:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  400f4a:	7843      	ldrb	r3, [r0, #1]
  400f4c:	2b04      	cmp	r3, #4
  400f4e:	d00b      	beq.n	400f68 <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  400f50:	428b      	cmp	r3, r1
  400f52:	d00a      	beq.n	400f6a <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  400f54:	7803      	ldrb	r3, [r0, #0]
  400f56:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  400f58:	4290      	cmp	r0, r2
  400f5a:	d3f6      	bcc.n	400f4a <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  400f5c:	2000      	movs	r0, #0
  400f5e:	4770      	bx	lr
  400f60:	2000      	movs	r0, #0
  400f62:	4770      	bx	lr
  400f64:	2000      	movs	r0, #0
  400f66:	4770      	bx	lr
  400f68:	2000      	movs	r0, #0
}
  400f6a:	4770      	bx	lr
  400f6c:	20000ab8 	.word	0x20000ab8

00400f70 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  400f70:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  400f72:	4b03      	ldr	r3, [pc, #12]	; (400f80 <udc_valid_address+0x10>)
  400f74:	7898      	ldrb	r0, [r3, #2]
  400f76:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400f7a:	4b02      	ldr	r3, [pc, #8]	; (400f84 <udc_valid_address+0x14>)
  400f7c:	4798      	blx	r3
  400f7e:	bd08      	pop	{r3, pc}
  400f80:	20000bf0 	.word	0x20000bf0
  400f84:	00402a9d 	.word	0x00402a9d

00400f88 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  400f88:	b410      	push	{r4}
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  400f8a:	4b16      	ldr	r3, [pc, #88]	; (400fe4 <udc_update_iface_desc+0x5c>)
  400f8c:	781b      	ldrb	r3, [r3, #0]
  400f8e:	b303      	cbz	r3, 400fd2 <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  400f90:	4b15      	ldr	r3, [pc, #84]	; (400fe8 <udc_update_iface_desc+0x60>)
  400f92:	681b      	ldr	r3, [r3, #0]
  400f94:	681b      	ldr	r3, [r3, #0]
  400f96:	791a      	ldrb	r2, [r3, #4]
  400f98:	4282      	cmp	r2, r0
  400f9a:	d91c      	bls.n	400fd6 <udc_update_iface_desc+0x4e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  400f9c:	4a13      	ldr	r2, [pc, #76]	; (400fec <udc_update_iface_desc+0x64>)
  400f9e:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  400fa0:	885c      	ldrh	r4, [r3, #2]
  400fa2:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400fa4:	42a3      	cmp	r3, r4
  400fa6:	d218      	bcs.n	400fda <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  400fa8:	785a      	ldrb	r2, [r3, #1]
  400faa:	2a04      	cmp	r2, #4
  400fac:	d109      	bne.n	400fc2 <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  400fae:	789a      	ldrb	r2, [r3, #2]
  400fb0:	4282      	cmp	r2, r0
  400fb2:	d106      	bne.n	400fc2 <udc_update_iface_desc+0x3a>
  400fb4:	78da      	ldrb	r2, [r3, #3]
  400fb6:	428a      	cmp	r2, r1
  400fb8:	d103      	bne.n	400fc2 <udc_update_iface_desc+0x3a>
  400fba:	4a0c      	ldr	r2, [pc, #48]	; (400fec <udc_update_iface_desc+0x64>)
  400fbc:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  400fbe:	2001      	movs	r0, #1
  400fc0:	e00c      	b.n	400fdc <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  400fc2:	781a      	ldrb	r2, [r3, #0]
  400fc4:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  400fc6:	42a3      	cmp	r3, r4
  400fc8:	d3ee      	bcc.n	400fa8 <udc_update_iface_desc+0x20>
  400fca:	4a08      	ldr	r2, [pc, #32]	; (400fec <udc_update_iface_desc+0x64>)
  400fcc:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400fce:	2000      	movs	r0, #0
  400fd0:	e004      	b.n	400fdc <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  400fd2:	2000      	movs	r0, #0
  400fd4:	e002      	b.n	400fdc <udc_update_iface_desc+0x54>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  400fd6:	2000      	movs	r0, #0
  400fd8:	e000      	b.n	400fdc <udc_update_iface_desc+0x54>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  400fda:	2000      	movs	r0, #0
}
  400fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400fe0:	4770      	bx	lr
  400fe2:	bf00      	nop
  400fe4:	20000ac2 	.word	0x20000ac2
  400fe8:	20000ab8 	.word	0x20000ab8
  400fec:	20000ac4 	.word	0x20000ac4

00400ff0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  400ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400ff4:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  400ff6:	2100      	movs	r1, #0
  400ff8:	4b12      	ldr	r3, [pc, #72]	; (401044 <udc_iface_disable+0x54>)
  400ffa:	4798      	blx	r3
  400ffc:	4680      	mov	r8, r0
  400ffe:	b1e8      	cbz	r0, 40103c <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401000:	4b11      	ldr	r3, [pc, #68]	; (401048 <udc_iface_disable+0x58>)
  401002:	681b      	ldr	r3, [r3, #0]
  401004:	685b      	ldr	r3, [r3, #4]
  401006:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  40100a:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40100e:	4798      	blx	r3
  401010:	4601      	mov	r1, r0
  401012:	4620      	mov	r0, r4
  401014:	4b0b      	ldr	r3, [pc, #44]	; (401044 <udc_iface_disable+0x54>)
  401016:	4798      	blx	r3
  401018:	4680      	mov	r8, r0
  40101a:	b178      	cbz	r0, 40103c <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  40101c:	4b0b      	ldr	r3, [pc, #44]	; (40104c <udc_iface_disable+0x5c>)
  40101e:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401020:	2605      	movs	r6, #5
  401022:	4d0b      	ldr	r5, [pc, #44]	; (401050 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  401024:	4f0b      	ldr	r7, [pc, #44]	; (401054 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401026:	4620      	mov	r0, r4
  401028:	4631      	mov	r1, r6
  40102a:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  40102c:	4604      	mov	r4, r0
  40102e:	b110      	cbz	r0, 401036 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  401030:	7880      	ldrb	r0, [r0, #2]
  401032:	47b8      	blx	r7
		}
  401034:	e7f7      	b.n	401026 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  401036:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40103a:	4798      	blx	r3
	return true;
}
  40103c:	4640      	mov	r0, r8
  40103e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401042:	bf00      	nop
  401044:	00400f89 	.word	0x00400f89
  401048:	20000ab8 	.word	0x20000ab8
  40104c:	20000ac4 	.word	0x20000ac4
  401050:	00400f2d 	.word	0x00400f2d
  401054:	00402c15 	.word	0x00402c15

00401058 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  401058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40105c:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  40105e:	4b10      	ldr	r3, [pc, #64]	; (4010a0 <udc_iface_enable+0x48>)
  401060:	4798      	blx	r3
  401062:	4603      	mov	r3, r0
  401064:	b1c8      	cbz	r0, 40109a <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401066:	4b0f      	ldr	r3, [pc, #60]	; (4010a4 <udc_iface_enable+0x4c>)
  401068:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40106a:	2605      	movs	r6, #5
  40106c:	4d0e      	ldr	r5, [pc, #56]	; (4010a8 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40106e:	4f0f      	ldr	r7, [pc, #60]	; (4010ac <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401070:	4620      	mov	r0, r4
  401072:	4631      	mov	r1, r6
  401074:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  401076:	4604      	mov	r4, r0
  401078:	b138      	cbz	r0, 40108a <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40107a:	7880      	ldrb	r0, [r0, #2]
  40107c:	78e1      	ldrb	r1, [r4, #3]
  40107e:	88a2      	ldrh	r2, [r4, #4]
  401080:	47b8      	blx	r7
  401082:	4603      	mov	r3, r0
  401084:	2800      	cmp	r0, #0
  401086:	d1f3      	bne.n	401070 <udc_iface_enable+0x18>
  401088:	e007      	b.n	40109a <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  40108a:	4b09      	ldr	r3, [pc, #36]	; (4010b0 <udc_iface_enable+0x58>)
  40108c:	681b      	ldr	r3, [r3, #0]
  40108e:	685b      	ldr	r3, [r3, #4]
  401090:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  401094:	681b      	ldr	r3, [r3, #0]
  401096:	4798      	blx	r3
  401098:	4603      	mov	r3, r0
}
  40109a:	4618      	mov	r0, r3
  40109c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010a0:	00400f89 	.word	0x00400f89
  4010a4:	20000ac4 	.word	0x20000ac4
  4010a8:	00400f2d 	.word	0x00400f2d
  4010ac:	00402b11 	.word	0x00402b11
  4010b0:	20000ab8 	.word	0x20000ab8

004010b4 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  4010b4:	b508      	push	{r3, lr}
	udd_enable();
  4010b6:	4b01      	ldr	r3, [pc, #4]	; (4010bc <udc_start+0x8>)
  4010b8:	4798      	blx	r3
  4010ba:	bd08      	pop	{r3, pc}
  4010bc:	004029e1 	.word	0x004029e1

004010c0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  4010c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  4010c2:	4b0d      	ldr	r3, [pc, #52]	; (4010f8 <udc_reset+0x38>)
  4010c4:	781b      	ldrb	r3, [r3, #0]
  4010c6:	b183      	cbz	r3, 4010ea <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010c8:	4b0c      	ldr	r3, [pc, #48]	; (4010fc <udc_reset+0x3c>)
  4010ca:	681b      	ldr	r3, [r3, #0]
  4010cc:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4010ce:	791b      	ldrb	r3, [r3, #4]
  4010d0:	b15b      	cbz	r3, 4010ea <udc_reset+0x2a>
  4010d2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  4010d4:	4e0a      	ldr	r6, [pc, #40]	; (401100 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010d6:	4d09      	ldr	r5, [pc, #36]	; (4010fc <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  4010d8:	4620      	mov	r0, r4
  4010da:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  4010dc:	3401      	adds	r4, #1
  4010de:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4010e0:	682b      	ldr	r3, [r5, #0]
  4010e2:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4010e4:	791b      	ldrb	r3, [r3, #4]
  4010e6:	42a3      	cmp	r3, r4
  4010e8:	d8f6      	bhi.n	4010d8 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  4010ea:	2300      	movs	r3, #0
  4010ec:	4a02      	ldr	r2, [pc, #8]	; (4010f8 <udc_reset+0x38>)
  4010ee:	7013      	strb	r3, [r2, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  4010f0:	4a04      	ldr	r2, [pc, #16]	; (401104 <udc_reset+0x44>)
  4010f2:	8013      	strh	r3, [r2, #0]
  4010f4:	bd70      	pop	{r4, r5, r6, pc}
  4010f6:	bf00      	nop
  4010f8:	20000ac2 	.word	0x20000ac2
  4010fc:	20000ab8 	.word	0x20000ab8
  401100:	00400ff1 	.word	0x00400ff1
  401104:	20000ac0 	.word	0x20000ac0

00401108 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  401108:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  40110a:	4b0c      	ldr	r3, [pc, #48]	; (40113c <udc_sof_notify+0x34>)
  40110c:	781b      	ldrb	r3, [r3, #0]
  40110e:	b19b      	cbz	r3, 401138 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401110:	4b0b      	ldr	r3, [pc, #44]	; (401140 <udc_sof_notify+0x38>)
  401112:	681b      	ldr	r3, [r3, #0]
  401114:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401116:	7912      	ldrb	r2, [r2, #4]
  401118:	b172      	cbz	r2, 401138 <udc_sof_notify+0x30>
  40111a:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40111c:	4d08      	ldr	r5, [pc, #32]	; (401140 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  40111e:	685b      	ldr	r3, [r3, #4]
  401120:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  401124:	691b      	ldr	r3, [r3, #16]
  401126:	b103      	cbz	r3, 40112a <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  401128:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  40112a:	3401      	adds	r4, #1
  40112c:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40112e:	682b      	ldr	r3, [r5, #0]
  401130:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401132:	7912      	ldrb	r2, [r2, #4]
  401134:	42a2      	cmp	r2, r4
  401136:	d8f2      	bhi.n	40111e <udc_sof_notify+0x16>
  401138:	bd38      	pop	{r3, r4, r5, pc}
  40113a:	bf00      	nop
  40113c:	20000ac2 	.word	0x20000ac2
  401140:	20000ab8 	.word	0x20000ab8

00401144 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  401144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  401148:	4b77      	ldr	r3, [pc, #476]	; (401328 <udc_process_setup+0x1e4>)
  40114a:	2200      	movs	r2, #0
  40114c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  40114e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401150:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  401152:	781b      	ldrb	r3, [r3, #0]
  401154:	f013 0f80 	tst.w	r3, #128	; 0x80
  401158:	f000 81e6 	beq.w	401528 <udc_process_setup+0x3e4>
		if (udd_g_ctrlreq.req.wLength == 0) {
  40115c:	4a72      	ldr	r2, [pc, #456]	; (401328 <udc_process_setup+0x1e4>)
  40115e:	88d2      	ldrh	r2, [r2, #6]
  401160:	2a00      	cmp	r2, #0
  401162:	f040 81e5 	bne.w	401530 <udc_process_setup+0x3ec>
  401166:	e1db      	b.n	401520 <udc_process_setup+0x3dc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401168:	f013 031f 	ands.w	r3, r3, #31
  40116c:	d167      	bne.n	40123e <udc_process_setup+0xfa>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  40116e:	496e      	ldr	r1, [pc, #440]	; (401328 <udc_process_setup+0x1e4>)
  401170:	7849      	ldrb	r1, [r1, #1]
  401172:	2906      	cmp	r1, #6
  401174:	d00d      	beq.n	401192 <udc_process_setup+0x4e>
  401176:	2908      	cmp	r1, #8
  401178:	d057      	beq.n	40122a <udc_process_setup+0xe6>
  40117a:	2900      	cmp	r1, #0
  40117c:	d15f      	bne.n	40123e <udc_process_setup+0xfa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  40117e:	2a02      	cmp	r2, #2
  401180:	d105      	bne.n	40118e <udc_process_setup+0x4a>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  401182:	486a      	ldr	r0, [pc, #424]	; (40132c <udc_process_setup+0x1e8>)
  401184:	2102      	movs	r1, #2
  401186:	4b6a      	ldr	r3, [pc, #424]	; (401330 <udc_process_setup+0x1ec>)
  401188:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  40118a:	2401      	movs	r4, #1
  40118c:	e174      	b.n	401478 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
  40118e:	2400      	movs	r4, #0
  401190:	e172      	b.n	401478 <udc_process_setup+0x334>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401192:	4b65      	ldr	r3, [pc, #404]	; (401328 <udc_process_setup+0x1e4>)
  401194:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  401196:	0a13      	lsrs	r3, r2, #8
  401198:	3b01      	subs	r3, #1
  40119a:	2b0e      	cmp	r3, #14
  40119c:	d83b      	bhi.n	401216 <udc_process_setup+0xd2>
  40119e:	e8df f003 	tbb	[pc, r3]
  4011a2:	0f08      	.short	0x0f08
  4011a4:	3a3a3a2a 	.word	0x3a3a3a2a
  4011a8:	3a3a3a3a 	.word	0x3a3a3a3a
  4011ac:	3a3a3a3a 	.word	0x3a3a3a3a
  4011b0:	22          	.byte	0x22
  4011b1:	00          	.byte	0x00
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  4011b2:	4b60      	ldr	r3, [pc, #384]	; (401334 <udc_process_setup+0x1f0>)
  4011b4:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  4011b6:	4618      	mov	r0, r3
  4011b8:	7819      	ldrb	r1, [r3, #0]
  4011ba:	4b5d      	ldr	r3, [pc, #372]	; (401330 <udc_process_setup+0x1ec>)
  4011bc:	4798      	blx	r3
  4011be:	e021      	b.n	401204 <udc_process_setup+0xc0>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4011c0:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  4011c2:	4b5c      	ldr	r3, [pc, #368]	; (401334 <udc_process_setup+0x1f0>)
  4011c4:	681b      	ldr	r3, [r3, #0]
  4011c6:	7c5b      	ldrb	r3, [r3, #17]
  4011c8:	4293      	cmp	r3, r2
  4011ca:	d926      	bls.n	40121a <udc_process_setup+0xd6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  4011cc:	4b59      	ldr	r3, [pc, #356]	; (401334 <udc_process_setup+0x1f0>)
  4011ce:	685b      	ldr	r3, [r3, #4]
  4011d0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  4011d4:	4618      	mov	r0, r3
  4011d6:	8859      	ldrh	r1, [r3, #2]
  4011d8:	4b55      	ldr	r3, [pc, #340]	; (401330 <udc_process_setup+0x1ec>)
  4011da:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  4011dc:	4b52      	ldr	r3, [pc, #328]	; (401328 <udc_process_setup+0x1e4>)
  4011de:	689b      	ldr	r3, [r3, #8]
  4011e0:	2202      	movs	r2, #2
  4011e2:	705a      	strb	r2, [r3, #1]
  4011e4:	e00e      	b.n	401204 <udc_process_setup+0xc0>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  4011e6:	4b53      	ldr	r3, [pc, #332]	; (401334 <udc_process_setup+0x1f0>)
  4011e8:	689b      	ldr	r3, [r3, #8]
  4011ea:	b1c3      	cbz	r3, 40121e <udc_process_setup+0xda>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  4011ec:	4618      	mov	r0, r3
  4011ee:	8859      	ldrh	r1, [r3, #2]
  4011f0:	4b4f      	ldr	r3, [pc, #316]	; (401330 <udc_process_setup+0x1ec>)
  4011f2:	4798      	blx	r3
  4011f4:	e006      	b.n	401204 <udc_process_setup+0xc0>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  4011f6:	f012 0fff 	tst.w	r2, #255	; 0xff
  4011fa:	d112      	bne.n	401222 <udc_process_setup+0xde>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  4011fc:	484e      	ldr	r0, [pc, #312]	; (401338 <udc_process_setup+0x1f4>)
  4011fe:	2104      	movs	r1, #4
  401200:	4b4b      	ldr	r3, [pc, #300]	; (401330 <udc_process_setup+0x1ec>)
  401202:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  401204:	4b48      	ldr	r3, [pc, #288]	; (401328 <udc_process_setup+0x1e4>)
  401206:	88da      	ldrh	r2, [r3, #6]
  401208:	899b      	ldrh	r3, [r3, #12]
  40120a:	4293      	cmp	r3, r2
  40120c:	d90b      	bls.n	401226 <udc_process_setup+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40120e:	4b46      	ldr	r3, [pc, #280]	; (401328 <udc_process_setup+0x1e4>)
  401210:	819a      	strh	r2, [r3, #12]
	}
	return true;
  401212:	2401      	movs	r4, #1
  401214:	e130      	b.n	401478 <udc_process_setup+0x334>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  401216:	2400      	movs	r4, #0
  401218:	e12e      	b.n	401478 <udc_process_setup+0x334>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
  40121a:	2400      	movs	r4, #0
  40121c:	e12c      	b.n	401478 <udc_process_setup+0x334>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
  40121e:	2400      	movs	r4, #0
  401220:	e12a      	b.n	401478 <udc_process_setup+0x334>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
  401222:	2400      	movs	r4, #0
  401224:	e128      	b.n	401478 <udc_process_setup+0x334>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
  401226:	2401      	movs	r4, #1
  401228:	e126      	b.n	401478 <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  40122a:	2a01      	cmp	r2, #1
  40122c:	d105      	bne.n	40123a <udc_process_setup+0xf6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  40122e:	4843      	ldr	r0, [pc, #268]	; (40133c <udc_process_setup+0x1f8>)
  401230:	2101      	movs	r1, #1
  401232:	4b3f      	ldr	r3, [pc, #252]	; (401330 <udc_process_setup+0x1ec>)
  401234:	4798      	blx	r3
	return true;
  401236:	2401      	movs	r4, #1
  401238:	e11e      	b.n	401478 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
  40123a:	2400      	movs	r4, #0
  40123c:	e11c      	b.n	401478 <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40123e:	2b01      	cmp	r3, #1
  401240:	d12a      	bne.n	401298 <udc_process_setup+0x154>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401242:	4939      	ldr	r1, [pc, #228]	; (401328 <udc_process_setup+0x1e4>)
  401244:	7849      	ldrb	r1, [r1, #1]
  401246:	290a      	cmp	r1, #10
  401248:	d126      	bne.n	401298 <udc_process_setup+0x154>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  40124a:	2a01      	cmp	r2, #1
  40124c:	d11e      	bne.n	40128c <udc_process_setup+0x148>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  40124e:	4b3b      	ldr	r3, [pc, #236]	; (40133c <udc_process_setup+0x1f8>)
  401250:	781b      	ldrb	r3, [r3, #0]
  401252:	b1eb      	cbz	r3, 401290 <udc_process_setup+0x14c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401254:	4b34      	ldr	r3, [pc, #208]	; (401328 <udc_process_setup+0x1e4>)
  401256:	791d      	ldrb	r5, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401258:	4b39      	ldr	r3, [pc, #228]	; (401340 <udc_process_setup+0x1fc>)
  40125a:	681e      	ldr	r6, [r3, #0]
  40125c:	6833      	ldr	r3, [r6, #0]
  40125e:	791b      	ldrb	r3, [r3, #4]
  401260:	42ab      	cmp	r3, r5
  401262:	d917      	bls.n	401294 <udc_process_setup+0x150>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401264:	4628      	mov	r0, r5
  401266:	2100      	movs	r1, #0
  401268:	4b36      	ldr	r3, [pc, #216]	; (401344 <udc_process_setup+0x200>)
  40126a:	4798      	blx	r3
  40126c:	4604      	mov	r4, r0
  40126e:	2800      	cmp	r0, #0
  401270:	f000 8102 	beq.w	401478 <udc_process_setup+0x334>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401274:	6873      	ldr	r3, [r6, #4]
	udc_iface_setting = udi_api->getsetting();
  401276:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  40127a:	68db      	ldr	r3, [r3, #12]
  40127c:	4798      	blx	r3
  40127e:	4b32      	ldr	r3, [pc, #200]	; (401348 <udc_process_setup+0x204>)
  401280:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  401282:	4618      	mov	r0, r3
  401284:	2101      	movs	r1, #1
  401286:	4b2a      	ldr	r3, [pc, #168]	; (401330 <udc_process_setup+0x1ec>)
  401288:	4798      	blx	r3
  40128a:	e0f5      	b.n	401478 <udc_process_setup+0x334>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
  40128c:	2400      	movs	r4, #0
  40128e:	e0f3      	b.n	401478 <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  401290:	2400      	movs	r4, #0
  401292:	e0f1      	b.n	401478 <udc_process_setup+0x334>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  401294:	2400      	movs	r4, #0
  401296:	e0ef      	b.n	401478 <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401298:	2b02      	cmp	r3, #2
  40129a:	f040 80ef 	bne.w	40147c <udc_process_setup+0x338>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  40129e:	4b22      	ldr	r3, [pc, #136]	; (401328 <udc_process_setup+0x1e4>)
  4012a0:	785b      	ldrb	r3, [r3, #1]
  4012a2:	2b00      	cmp	r3, #0
  4012a4:	f040 80e3 	bne.w	40146e <udc_process_setup+0x32a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  4012a8:	2a02      	cmp	r2, #2
  4012aa:	d10b      	bne.n	4012c4 <udc_process_setup+0x180>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4012ac:	4b1e      	ldr	r3, [pc, #120]	; (401328 <udc_process_setup+0x1e4>)
  4012ae:	7918      	ldrb	r0, [r3, #4]
  4012b0:	4b26      	ldr	r3, [pc, #152]	; (40134c <udc_process_setup+0x208>)
  4012b2:	4798      	blx	r3
  4012b4:	4b26      	ldr	r3, [pc, #152]	; (401350 <udc_process_setup+0x20c>)
  4012b6:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  4012b8:	4618      	mov	r0, r3
  4012ba:	2102      	movs	r1, #2
  4012bc:	4b1c      	ldr	r3, [pc, #112]	; (401330 <udc_process_setup+0x1ec>)
  4012be:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  4012c0:	2401      	movs	r4, #1
  4012c2:	e0d9      	b.n	401478 <udc_process_setup+0x334>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
  4012c4:	2400      	movs	r4, #0
  4012c6:	e0d7      	b.n	401478 <udc_process_setup+0x334>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4012c8:	f013 031f 	ands.w	r3, r3, #31
  4012cc:	f040 8084 	bne.w	4013d8 <udc_process_setup+0x294>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4012d0:	4a15      	ldr	r2, [pc, #84]	; (401328 <udc_process_setup+0x1e4>)
  4012d2:	7852      	ldrb	r2, [r2, #1]
  4012d4:	3a01      	subs	r2, #1
  4012d6:	2a08      	cmp	r2, #8
  4012d8:	d87e      	bhi.n	4013d8 <udc_process_setup+0x294>
  4012da:	e8df f012 	tbh	[pc, r2, lsl #1]
  4012de:	0013      	.short	0x0013
  4012e0:	00ca007d 	.word	0x00ca007d
  4012e4:	0009007d 	.word	0x0009007d
  4012e8:	007d007d 	.word	0x007d007d
  4012ec:	003d007d 	.word	0x003d007d
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  4012f0:	4b0d      	ldr	r3, [pc, #52]	; (401328 <udc_process_setup+0x1e4>)
  4012f2:	88db      	ldrh	r3, [r3, #6]
  4012f4:	b923      	cbnz	r3, 401300 <udc_process_setup+0x1bc>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  4012f6:	4a17      	ldr	r2, [pc, #92]	; (401354 <udc_process_setup+0x210>)
  4012f8:	4b0b      	ldr	r3, [pc, #44]	; (401328 <udc_process_setup+0x1e4>)
  4012fa:	611a      	str	r2, [r3, #16]
	return true;
  4012fc:	2401      	movs	r4, #1
  4012fe:	e0bb      	b.n	401478 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401300:	2400      	movs	r4, #0
  401302:	e0b9      	b.n	401478 <udc_process_setup+0x334>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401304:	4b08      	ldr	r3, [pc, #32]	; (401328 <udc_process_setup+0x1e4>)
  401306:	88db      	ldrh	r3, [r3, #6]
  401308:	b953      	cbnz	r3, 401320 <udc_process_setup+0x1dc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  40130a:	4b07      	ldr	r3, [pc, #28]	; (401328 <udc_process_setup+0x1e4>)
  40130c:	885b      	ldrh	r3, [r3, #2]
  40130e:	2b01      	cmp	r3, #1
  401310:	d108      	bne.n	401324 <udc_process_setup+0x1e0>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  401312:	4b06      	ldr	r3, [pc, #24]	; (40132c <udc_process_setup+0x1e8>)
  401314:	881a      	ldrh	r2, [r3, #0]
  401316:	f022 0202 	bic.w	r2, r2, #2
  40131a:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  40131c:	2401      	movs	r4, #1
  40131e:	e0ab      	b.n	401478 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401320:	2400      	movs	r4, #0
  401322:	e0a9      	b.n	401478 <udc_process_setup+0x334>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
  401324:	2400      	movs	r4, #0
  401326:	e0a7      	b.n	401478 <udc_process_setup+0x334>
  401328:	20000bf0 	.word	0x20000bf0
  40132c:	20000ac0 	.word	0x20000ac0
  401330:	00402b05 	.word	0x00402b05
  401334:	20000038 	.word	0x20000038
  401338:	200000ac 	.word	0x200000ac
  40133c:	20000ac2 	.word	0x20000ac2
  401340:	20000ab8 	.word	0x20000ab8
  401344:	00400f89 	.word	0x00400f89
  401348:	20000abc 	.word	0x20000abc
  40134c:	00402c4d 	.word	0x00402c4d
  401350:	20000abe 	.word	0x20000abe
  401354:	00400f71 	.word	0x00400f71
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  401358:	4b79      	ldr	r3, [pc, #484]	; (401540 <udc_process_setup+0x3fc>)
  40135a:	88db      	ldrh	r3, [r3, #6]
  40135c:	2b00      	cmp	r3, #0
  40135e:	d131      	bne.n	4013c4 <udc_process_setup+0x280>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  401360:	4b78      	ldr	r3, [pc, #480]	; (401544 <udc_process_setup+0x400>)
  401362:	4798      	blx	r3
  401364:	2800      	cmp	r0, #0
  401366:	d02f      	beq.n	4013c8 <udc_process_setup+0x284>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401368:	4b75      	ldr	r3, [pc, #468]	; (401540 <udc_process_setup+0x3fc>)
  40136a:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  40136c:	4b76      	ldr	r3, [pc, #472]	; (401548 <udc_process_setup+0x404>)
  40136e:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401370:	7c5b      	ldrb	r3, [r3, #17]
  401372:	429a      	cmp	r2, r3
  401374:	dc2a      	bgt.n	4013cc <udc_process_setup+0x288>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  401376:	4b75      	ldr	r3, [pc, #468]	; (40154c <udc_process_setup+0x408>)
  401378:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  40137a:	4b71      	ldr	r3, [pc, #452]	; (401540 <udc_process_setup+0x3fc>)
  40137c:	789b      	ldrb	r3, [r3, #2]
  40137e:	4a74      	ldr	r2, [pc, #464]	; (401550 <udc_process_setup+0x40c>)
  401380:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  401382:	b32b      	cbz	r3, 4013d0 <udc_process_setup+0x28c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401384:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  401388:	3b01      	subs	r3, #1
  40138a:	4a6f      	ldr	r2, [pc, #444]	; (401548 <udc_process_setup+0x404>)
  40138c:	6852      	ldr	r2, [r2, #4]
  40138e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  401392:	4970      	ldr	r1, [pc, #448]	; (401554 <udc_process_setup+0x410>)
  401394:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401396:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40139a:	791b      	ldrb	r3, [r3, #4]
  40139c:	b1d3      	cbz	r3, 4013d4 <udc_process_setup+0x290>
  40139e:	2500      	movs	r5, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  4013a0:	462f      	mov	r7, r5
  4013a2:	4e6d      	ldr	r6, [pc, #436]	; (401558 <udc_process_setup+0x414>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4013a4:	4688      	mov	r8, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  4013a6:	4628      	mov	r0, r5
  4013a8:	4639      	mov	r1, r7
  4013aa:	47b0      	blx	r6
  4013ac:	4604      	mov	r4, r0
  4013ae:	2800      	cmp	r0, #0
  4013b0:	d062      	beq.n	401478 <udc_process_setup+0x334>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  4013b2:	3501      	adds	r5, #1
  4013b4:	b2ed      	uxtb	r5, r5
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4013b6:	f8d8 3000 	ldr.w	r3, [r8]
  4013ba:	681b      	ldr	r3, [r3, #0]
  4013bc:	791b      	ldrb	r3, [r3, #4]
  4013be:	42ab      	cmp	r3, r5
  4013c0:	d8f1      	bhi.n	4013a6 <udc_process_setup+0x262>
  4013c2:	e059      	b.n	401478 <udc_process_setup+0x334>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  4013c4:	2400      	movs	r4, #0
  4013c6:	e057      	b.n	401478 <udc_process_setup+0x334>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
  4013c8:	2400      	movs	r4, #0
  4013ca:	e055      	b.n	401478 <udc_process_setup+0x334>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
  4013cc:	2400      	movs	r4, #0
  4013ce:	e053      	b.n	401478 <udc_process_setup+0x334>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
  4013d0:	2401      	movs	r4, #1
  4013d2:	e051      	b.n	401478 <udc_process_setup+0x334>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
  4013d4:	2401      	movs	r4, #1
  4013d6:	e04f      	b.n	401478 <udc_process_setup+0x334>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4013d8:	2b01      	cmp	r3, #1
  4013da:	d11c      	bne.n	401416 <udc_process_setup+0x2d2>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4013dc:	4a58      	ldr	r2, [pc, #352]	; (401540 <udc_process_setup+0x3fc>)
  4013de:	7852      	ldrb	r2, [r2, #1]
  4013e0:	2a0b      	cmp	r2, #11
  4013e2:	d118      	bne.n	401416 <udc_process_setup+0x2d2>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  4013e4:	4b56      	ldr	r3, [pc, #344]	; (401540 <udc_process_setup+0x3fc>)
  4013e6:	88db      	ldrh	r3, [r3, #6]
  4013e8:	b98b      	cbnz	r3, 40140e <udc_process_setup+0x2ca>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  4013ea:	4b59      	ldr	r3, [pc, #356]	; (401550 <udc_process_setup+0x40c>)
  4013ec:	781b      	ldrb	r3, [r3, #0]
  4013ee:	b183      	cbz	r3, 401412 <udc_process_setup+0x2ce>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4013f0:	4b53      	ldr	r3, [pc, #332]	; (401540 <udc_process_setup+0x3fc>)
  4013f2:	791d      	ldrb	r5, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  4013f4:	885e      	ldrh	r6, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  4013f6:	4628      	mov	r0, r5
  4013f8:	4b58      	ldr	r3, [pc, #352]	; (40155c <udc_process_setup+0x418>)
  4013fa:	4798      	blx	r3
  4013fc:	4604      	mov	r4, r0
  4013fe:	2800      	cmp	r0, #0
  401400:	d03a      	beq.n	401478 <udc_process_setup+0x334>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  401402:	4628      	mov	r0, r5
  401404:	b2f1      	uxtb	r1, r6
  401406:	4b54      	ldr	r3, [pc, #336]	; (401558 <udc_process_setup+0x414>)
  401408:	4798      	blx	r3
  40140a:	4604      	mov	r4, r0
  40140c:	e034      	b.n	401478 <udc_process_setup+0x334>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
  40140e:	2400      	movs	r4, #0
  401410:	e032      	b.n	401478 <udc_process_setup+0x334>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
  401412:	2400      	movs	r4, #0
  401414:	e030      	b.n	401478 <udc_process_setup+0x334>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401416:	2b02      	cmp	r3, #2
  401418:	d130      	bne.n	40147c <udc_process_setup+0x338>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  40141a:	4b49      	ldr	r3, [pc, #292]	; (401540 <udc_process_setup+0x3fc>)
  40141c:	785b      	ldrb	r3, [r3, #1]
  40141e:	2b01      	cmp	r3, #1
  401420:	d002      	beq.n	401428 <udc_process_setup+0x2e4>
  401422:	2b03      	cmp	r3, #3
  401424:	d010      	beq.n	401448 <udc_process_setup+0x304>
  401426:	e026      	b.n	401476 <udc_process_setup+0x332>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401428:	4b45      	ldr	r3, [pc, #276]	; (401540 <udc_process_setup+0x3fc>)
  40142a:	88db      	ldrh	r3, [r3, #6]
  40142c:	b943      	cbnz	r3, 401440 <udc_process_setup+0x2fc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  40142e:	4b44      	ldr	r3, [pc, #272]	; (401540 <udc_process_setup+0x3fc>)
  401430:	885b      	ldrh	r3, [r3, #2]
  401432:	b93b      	cbnz	r3, 401444 <udc_process_setup+0x300>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401434:	4b42      	ldr	r3, [pc, #264]	; (401540 <udc_process_setup+0x3fc>)
  401436:	7918      	ldrb	r0, [r3, #4]
  401438:	4b49      	ldr	r3, [pc, #292]	; (401560 <udc_process_setup+0x41c>)
  40143a:	4798      	blx	r3
  40143c:	4604      	mov	r4, r0
  40143e:	e01b      	b.n	401478 <udc_process_setup+0x334>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401440:	2400      	movs	r4, #0
  401442:	e019      	b.n	401478 <udc_process_setup+0x334>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  401444:	2400      	movs	r4, #0
  401446:	e017      	b.n	401478 <udc_process_setup+0x334>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401448:	4b3d      	ldr	r3, [pc, #244]	; (401540 <udc_process_setup+0x3fc>)
  40144a:	88db      	ldrh	r3, [r3, #6]
  40144c:	b95b      	cbnz	r3, 401466 <udc_process_setup+0x322>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  40144e:	4b3c      	ldr	r3, [pc, #240]	; (401540 <udc_process_setup+0x3fc>)
  401450:	885b      	ldrh	r3, [r3, #2]
  401452:	b953      	cbnz	r3, 40146a <udc_process_setup+0x326>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  401454:	4c3a      	ldr	r4, [pc, #232]	; (401540 <udc_process_setup+0x3fc>)
  401456:	7920      	ldrb	r0, [r4, #4]
  401458:	4b42      	ldr	r3, [pc, #264]	; (401564 <udc_process_setup+0x420>)
  40145a:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  40145c:	7920      	ldrb	r0, [r4, #4]
  40145e:	4b42      	ldr	r3, [pc, #264]	; (401568 <udc_process_setup+0x424>)
  401460:	4798      	blx	r3
  401462:	4604      	mov	r4, r0
  401464:	e008      	b.n	401478 <udc_process_setup+0x334>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
  401466:	2400      	movs	r4, #0
  401468:	e006      	b.n	401478 <udc_process_setup+0x334>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
  40146a:	2400      	movs	r4, #0
  40146c:	e004      	b.n	401478 <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  40146e:	2400      	movs	r4, #0
  401470:	e002      	b.n	401478 <udc_process_setup+0x334>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  401472:	2400      	movs	r4, #0
  401474:	e000      	b.n	401478 <udc_process_setup+0x334>
				break;
			}
		}
#endif
	}
	return false;
  401476:	2400      	movs	r4, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  401478:	2c00      	cmp	r4, #0
  40147a:	d15d      	bne.n	401538 <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  40147c:	4b30      	ldr	r3, [pc, #192]	; (401540 <udc_process_setup+0x3fc>)
  40147e:	781b      	ldrb	r3, [r3, #0]
  401480:	f003 031f 	and.w	r3, r3, #31
  401484:	2b01      	cmp	r3, #1
  401486:	d11e      	bne.n	4014c6 <udc_process_setup+0x382>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  401488:	4b31      	ldr	r3, [pc, #196]	; (401550 <udc_process_setup+0x40c>)
  40148a:	781b      	ldrb	r3, [r3, #0]
  40148c:	b1db      	cbz	r3, 4014c6 <udc_process_setup+0x382>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40148e:	4b2c      	ldr	r3, [pc, #176]	; (401540 <udc_process_setup+0x3fc>)
  401490:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401492:	4b30      	ldr	r3, [pc, #192]	; (401554 <udc_process_setup+0x410>)
  401494:	681d      	ldr	r5, [r3, #0]
  401496:	682b      	ldr	r3, [r5, #0]
  401498:	791b      	ldrb	r3, [r3, #4]
  40149a:	42a3      	cmp	r3, r4
  40149c:	d913      	bls.n	4014c6 <udc_process_setup+0x382>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  40149e:	4620      	mov	r0, r4
  4014a0:	2100      	movs	r1, #0
  4014a2:	4b32      	ldr	r3, [pc, #200]	; (40156c <udc_process_setup+0x428>)
  4014a4:	4798      	blx	r3
  4014a6:	b170      	cbz	r0, 4014c6 <udc_process_setup+0x382>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4014a8:	686b      	ldr	r3, [r5, #4]
  4014aa:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4014ae:	68eb      	ldr	r3, [r5, #12]
  4014b0:	4798      	blx	r3
  4014b2:	4601      	mov	r1, r0
  4014b4:	4620      	mov	r0, r4
  4014b6:	4b2d      	ldr	r3, [pc, #180]	; (40156c <udc_process_setup+0x428>)
  4014b8:	4798      	blx	r3
  4014ba:	b120      	cbz	r0, 4014c6 <udc_process_setup+0x382>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  4014bc:	68ab      	ldr	r3, [r5, #8]
  4014be:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  4014c0:	4604      	mov	r4, r0
  4014c2:	2800      	cmp	r0, #0
  4014c4:	d138      	bne.n	401538 <udc_process_setup+0x3f4>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  4014c6:	4b1e      	ldr	r3, [pc, #120]	; (401540 <udc_process_setup+0x3fc>)
  4014c8:	781b      	ldrb	r3, [r3, #0]
  4014ca:	f003 031f 	and.w	r3, r3, #31
  4014ce:	2b02      	cmp	r3, #2
  4014d0:	d128      	bne.n	401524 <udc_process_setup+0x3e0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4014d2:	4b1f      	ldr	r3, [pc, #124]	; (401550 <udc_process_setup+0x40c>)
  4014d4:	781b      	ldrb	r3, [r3, #0]
  4014d6:	b1fb      	cbz	r3, 401518 <udc_process_setup+0x3d4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4014d8:	4b1e      	ldr	r3, [pc, #120]	; (401554 <udc_process_setup+0x410>)
  4014da:	681b      	ldr	r3, [r3, #0]
  4014dc:	681a      	ldr	r2, [r3, #0]
  4014de:	7912      	ldrb	r2, [r2, #4]
  4014e0:	b1e2      	cbz	r2, 40151c <udc_process_setup+0x3d8>
  4014e2:	2500      	movs	r5, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4014e4:	4f21      	ldr	r7, [pc, #132]	; (40156c <udc_process_setup+0x428>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4014e6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 401554 <udc_process_setup+0x410>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  4014ea:	685b      	ldr	r3, [r3, #4]
  4014ec:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4014f0:	68f3      	ldr	r3, [r6, #12]
  4014f2:	4798      	blx	r3
  4014f4:	4601      	mov	r1, r0
  4014f6:	4628      	mov	r0, r5
  4014f8:	47b8      	blx	r7
  4014fa:	4604      	mov	r4, r0
  4014fc:	b1e0      	cbz	r0, 401538 <udc_process_setup+0x3f4>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  4014fe:	68b3      	ldr	r3, [r6, #8]
  401500:	4798      	blx	r3
  401502:	4604      	mov	r4, r0
  401504:	b9c0      	cbnz	r0, 401538 <udc_process_setup+0x3f4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401506:	3501      	adds	r5, #1
  401508:	b2ed      	uxtb	r5, r5
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40150a:	f8d8 3000 	ldr.w	r3, [r8]
  40150e:	681a      	ldr	r2, [r3, #0]
  401510:	7912      	ldrb	r2, [r2, #4]
  401512:	42aa      	cmp	r2, r5
  401514:	d8e9      	bhi.n	4014ea <udc_process_setup+0x3a6>
  401516:	e00f      	b.n	401538 <udc_process_setup+0x3f4>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  401518:	2400      	movs	r4, #0
  40151a:	e00d      	b.n	401538 <udc_process_setup+0x3f4>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  40151c:	2400      	movs	r4, #0
  40151e:	e00b      	b.n	401538 <udc_process_setup+0x3f4>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  401520:	2400      	movs	r4, #0
  401522:	e009      	b.n	401538 <udc_process_setup+0x3f4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401524:	2400      	movs	r4, #0
  401526:	e007      	b.n	401538 <udc_process_setup+0x3f4>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401528:	f013 0f60 	tst.w	r3, #96	; 0x60
  40152c:	d1a6      	bne.n	40147c <udc_process_setup+0x338>
  40152e:	e6cb      	b.n	4012c8 <udc_process_setup+0x184>
  401530:	f013 0f60 	tst.w	r3, #96	; 0x60
  401534:	d1a2      	bne.n	40147c <udc_process_setup+0x338>
  401536:	e617      	b.n	401168 <udc_process_setup+0x24>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  401538:	4620      	mov	r0, r4
  40153a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40153e:	bf00      	nop
  401540:	20000bf0 	.word	0x20000bf0
  401544:	00402ad5 	.word	0x00402ad5
  401548:	20000038 	.word	0x20000038
  40154c:	004010c1 	.word	0x004010c1
  401550:	20000ac2 	.word	0x20000ac2
  401554:	20000ab8 	.word	0x20000ab8
  401558:	00401059 	.word	0x00401059
  40155c:	00400ff1 	.word	0x00400ff1
  401560:	00402d75 	.word	0x00402d75
  401564:	00402fa1 	.word	0x00402fa1
  401568:	00402c8d 	.word	0x00402c8d
  40156c:	00400f89 	.word	0x00400f89

00401570 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  401570:	2301      	movs	r3, #1
  401572:	fa03 f101 	lsl.w	r1, r3, r1
  401576:	6101      	str	r1, [r0, #16]
  401578:	4770      	bx	lr
  40157a:	bf00      	nop

0040157c <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
  40157c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  401580:	6143      	str	r3, [r0, #20]
  401582:	4770      	bx	lr

00401584 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
  401584:	6a00      	ldr	r0, [r0, #32]
}
  401586:	4770      	bx	lr

00401588 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  401588:	2301      	movs	r3, #1
  40158a:	6003      	str	r3, [r0, #0]
  40158c:	4770      	bx	lr
  40158e:	bf00      	nop

00401590 <dacc_disable_trigger>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_disable_trigger(Dacc *p_dacc)
{
	p_dacc->DACC_MR &= ~DACC_MR_TRGEN;
  401590:	6843      	ldr	r3, [r0, #4]
  401592:	f023 0301 	bic.w	r3, r3, #1
  401596:	6043      	str	r3, [r0, #4]
  401598:	4770      	bx	lr
  40159a:	bf00      	nop

0040159c <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value. 
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
  40159c:	6201      	str	r1, [r0, #32]
  40159e:	4770      	bx	lr

004015a0 <dacc_set_writeprotect>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_enable 1 to enable, 0 to disable.
 */
void dacc_set_writeprotect(Dacc *p_dacc, uint32_t ul_enable)
{
	if (ul_enable) {
  4015a0:	b119      	cbz	r1, 4015aa <dacc_set_writeprotect+0xa>
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY)
  4015a2:	4b04      	ldr	r3, [pc, #16]	; (4015b4 <dacc_set_writeprotect+0x14>)
  4015a4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  4015a8:	4770      	bx	lr
			          | DACC_WPMR_WPEN;
	} else {
		p_dacc->DACC_WPMR = DACC_WPMR_WPKEY(DACC_WP_KEY);
  4015aa:	4b03      	ldr	r3, [pc, #12]	; (4015b8 <dacc_set_writeprotect+0x18>)
  4015ac:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  4015b0:	4770      	bx	lr
  4015b2:	bf00      	nop
  4015b4:	44414301 	.word	0x44414301
  4015b8:	44414300 	.word	0x44414300

004015bc <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
  4015bc:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
  4015be:	2901      	cmp	r1, #1
  4015c0:	d806      	bhi.n	4015d0 <dacc_set_channel_selection+0x14>
		return DACC_RC_INVALID_PARAM;
	}
	mr &= ~(DACC_MR_TAG);
  4015c2:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
  4015c6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
  4015ca:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
  4015cc:	2000      	movs	r0, #0
  4015ce:	4770      	bx	lr
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
	if (ul_channel > MAX_CH_NB) {
		return DACC_RC_INVALID_PARAM;
  4015d0:	2001      	movs	r0, #1
	}
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;
	return DACC_RC_OK;
}
  4015d2:	4770      	bx	lr

004015d4 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
  4015d4:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
  4015d6:	6844      	ldr	r4, [r0, #4]
  4015d8:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
  4015dc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
		& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
  4015e0:	0209      	lsls	r1, r1, #8
  4015e2:	b289      	uxth	r1, r1
  4015e4:	430c      	orrs	r4, r1
	if (ul_maxs) {
  4015e6:	b112      	cbz	r2, 4015ee <dacc_set_timing+0x1a>
		mr |= DACC_MR_MAXS;
  4015e8:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
  4015ec:	e001      	b.n	4015f2 <dacc_set_timing+0x1e>
	} else {
		mr &= ~DACC_MR_MAXS;
  4015ee:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
  4015f2:	061b      	lsls	r3, r3, #24
  4015f4:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
  4015f8:	431c      	orrs	r4, r3
	p_dacc->DACC_MR = mr;
  4015fa:	6044      	str	r4, [r0, #4]
	return DACC_RC_OK;
}
  4015fc:	2000      	movs	r0, #0
  4015fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401602:	4770      	bx	lr

00401604 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  401604:	2901      	cmp	r1, #1
  401606:	d805      	bhi.n	401614 <dacc_enable_channel+0x10>
		return DACC_RC_INVALID_PARAM;

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  401608:	2301      	movs	r3, #1
  40160a:	fa03 f101 	lsl.w	r1, r3, r1
  40160e:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  401610:	2000      	movs	r0, #0
  401612:	4770      	bx	lr
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
		return DACC_RC_INVALID_PARAM;
  401614:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  401616:	4770      	bx	lr

00401618 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401618:	b410      	push	{r4}
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40161a:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	switch (ul_type) {
  40161c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401620:	d02e      	beq.n	401680 <pio_set_peripheral+0x68>
  401622:	d808      	bhi.n	401636 <pio_set_peripheral+0x1e>
  401624:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401628:	d014      	beq.n	401654 <pio_set_peripheral+0x3c>
  40162a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40162e:	d01d      	beq.n	40166c <pio_set_peripheral+0x54>
  401630:	2900      	cmp	r1, #0
  401632:	d135      	bne.n	4016a0 <pio_set_peripheral+0x88>
  401634:	e035      	b.n	4016a2 <pio_set_peripheral+0x8a>
  401636:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40163a:	d032      	beq.n	4016a2 <pio_set_peripheral+0x8a>
  40163c:	d803      	bhi.n	401646 <pio_set_peripheral+0x2e>
  40163e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401642:	d027      	beq.n	401694 <pio_set_peripheral+0x7c>
  401644:	e02c      	b.n	4016a0 <pio_set_peripheral+0x88>
  401646:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40164a:	d02a      	beq.n	4016a2 <pio_set_peripheral+0x8a>
  40164c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401650:	d027      	beq.n	4016a2 <pio_set_peripheral+0x8a>
  401652:	e025      	b.n	4016a0 <pio_set_peripheral+0x88>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401654:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401656:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401658:	43d3      	mvns	r3, r2
  40165a:	4021      	ands	r1, r4
  40165c:	4019      	ands	r1, r3
  40165e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401660:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401662:	6f44      	ldr	r4, [r0, #116]	; 0x74
  401664:	4021      	ands	r1, r4
  401666:	400b      	ands	r3, r1
  401668:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40166a:	e019      	b.n	4016a0 <pio_set_peripheral+0x88>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40166c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40166e:	4313      	orrs	r3, r2
  401670:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401672:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401674:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401676:	400b      	ands	r3, r1
  401678:	ea23 0302 	bic.w	r3, r3, r2
  40167c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40167e:	e00f      	b.n	4016a0 <pio_set_peripheral+0x88>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401680:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401682:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401684:	400b      	ands	r3, r1
  401686:	ea23 0302 	bic.w	r3, r3, r2
  40168a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40168c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40168e:	4313      	orrs	r3, r2
  401690:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401692:	e005      	b.n	4016a0 <pio_set_peripheral+0x88>

	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401694:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401696:	4313      	orrs	r3, r2
  401698:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40169a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40169c:	4313      	orrs	r3, r2
  40169e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4016a0:	6042      	str	r2, [r0, #4]
}
  4016a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016a6:	4770      	bx	lr

004016a8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4016a8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4016aa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4016ac:	9c01      	ldr	r4, [sp, #4]
  4016ae:	b10c      	cbz	r4, 4016b4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4016b0:	6641      	str	r1, [r0, #100]	; 0x64
  4016b2:	e000      	b.n	4016b6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4016b4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4016b6:	b10b      	cbz	r3, 4016bc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4016b8:	6501      	str	r1, [r0, #80]	; 0x50
  4016ba:	e000      	b.n	4016be <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4016bc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4016be:	b10a      	cbz	r2, 4016c4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4016c0:	6301      	str	r1, [r0, #48]	; 0x30
  4016c2:	e000      	b.n	4016c6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4016c4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4016c6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4016c8:	6001      	str	r1, [r0, #0]
}
  4016ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016ce:	4770      	bx	lr

004016d0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4016d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4016d2:	4770      	bx	lr

004016d4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4016d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4016d6:	4770      	bx	lr

004016d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4016d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016dc:	4680      	mov	r8, r0
  4016de:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4016e0:	4b12      	ldr	r3, [pc, #72]	; (40172c <pio_handler_process+0x54>)
  4016e2:	4798      	blx	r3
  4016e4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4016e6:	4640      	mov	r0, r8
  4016e8:	4b11      	ldr	r3, [pc, #68]	; (401730 <pio_handler_process+0x58>)
  4016ea:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4016ec:	4005      	ands	r5, r0
  4016ee:	d012      	beq.n	401716 <pio_handler_process+0x3e>
  4016f0:	4c10      	ldr	r4, [pc, #64]	; (401734 <pio_handler_process+0x5c>)
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4016f2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  4016f6:	42b3      	cmp	r3, r6
  4016f8:	d10a      	bne.n	401710 <pio_handler_process+0x38>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4016fa:	f854 1c08 	ldr.w	r1, [r4, #-8]
  4016fe:	4229      	tst	r1, r5
  401700:	d006      	beq.n	401710 <pio_handler_process+0x38>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401702:	6823      	ldr	r3, [r4, #0]
  401704:	4630      	mov	r0, r6
  401706:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401708:	f854 3c08 	ldr.w	r3, [r4, #-8]
  40170c:	ea25 0503 	bic.w	r5, r5, r3
  401710:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401712:	2d00      	cmp	r5, #0
  401714:	d1ed      	bne.n	4016f2 <pio_handler_process+0x1a>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401716:	4b08      	ldr	r3, [pc, #32]	; (401738 <pio_handler_process+0x60>)
  401718:	681b      	ldr	r3, [r3, #0]
  40171a:	b123      	cbz	r3, 401726 <pio_handler_process+0x4e>
		if (pio_capture_handler) {
  40171c:	4b07      	ldr	r3, [pc, #28]	; (40173c <pio_handler_process+0x64>)
  40171e:	681b      	ldr	r3, [r3, #0]
  401720:	b10b      	cbz	r3, 401726 <pio_handler_process+0x4e>
			pio_capture_handler(p_pio);
  401722:	4640      	mov	r0, r8
  401724:	4798      	blx	r3
  401726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40172a:	bf00      	nop
  40172c:	004016d1 	.word	0x004016d1
  401730:	004016d5 	.word	0x004016d5
  401734:	20000ad8 	.word	0x20000ad8
  401738:	20000bec 	.word	0x20000bec
  40173c:	20000ac8 	.word	0x20000ac8

00401740 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401740:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401742:	4802      	ldr	r0, [pc, #8]	; (40174c <PIOA_Handler+0xc>)
  401744:	210b      	movs	r1, #11
  401746:	4b02      	ldr	r3, [pc, #8]	; (401750 <PIOA_Handler+0x10>)
  401748:	4798      	blx	r3
  40174a:	bd08      	pop	{r3, pc}
  40174c:	400e0e00 	.word	0x400e0e00
  401750:	004016d9 	.word	0x004016d9

00401754 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401754:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401756:	4802      	ldr	r0, [pc, #8]	; (401760 <PIOB_Handler+0xc>)
  401758:	210c      	movs	r1, #12
  40175a:	4b02      	ldr	r3, [pc, #8]	; (401764 <PIOB_Handler+0x10>)
  40175c:	4798      	blx	r3
  40175e:	bd08      	pop	{r3, pc}
  401760:	400e1000 	.word	0x400e1000
  401764:	004016d9 	.word	0x004016d9

00401768 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401768:	4b17      	ldr	r3, [pc, #92]	; (4017c8 <pmc_switch_mck_to_pllack+0x60>)
  40176a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40176c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  401770:	4310      	orrs	r0, r2
  401772:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401776:	f013 0f08 	tst.w	r3, #8
  40177a:	d109      	bne.n	401790 <pmc_switch_mck_to_pllack+0x28>
  40177c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401780:	4911      	ldr	r1, [pc, #68]	; (4017c8 <pmc_switch_mck_to_pllack+0x60>)
  401782:	e001      	b.n	401788 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401784:	3b01      	subs	r3, #1
  401786:	d019      	beq.n	4017bc <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401788:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40178a:	f012 0f08 	tst.w	r2, #8
  40178e:	d0f9      	beq.n	401784 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401790:	4b0d      	ldr	r3, [pc, #52]	; (4017c8 <pmc_switch_mck_to_pllack+0x60>)
  401792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401794:	f022 0203 	bic.w	r2, r2, #3
  401798:	f042 0202 	orr.w	r2, r2, #2
  40179c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40179e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4017a0:	f010 0008 	ands.w	r0, r0, #8
  4017a4:	d10c      	bne.n	4017c0 <pmc_switch_mck_to_pllack+0x58>
  4017a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4017aa:	4907      	ldr	r1, [pc, #28]	; (4017c8 <pmc_switch_mck_to_pllack+0x60>)
  4017ac:	e001      	b.n	4017b2 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4017ae:	3b01      	subs	r3, #1
  4017b0:	d008      	beq.n	4017c4 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017b2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4017b4:	f012 0f08 	tst.w	r2, #8
  4017b8:	d0f9      	beq.n	4017ae <pmc_switch_mck_to_pllack+0x46>
  4017ba:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4017bc:	2001      	movs	r0, #1
  4017be:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4017c0:	2000      	movs	r0, #0
  4017c2:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4017c4:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4017c6:	4770      	bx	lr
  4017c8:	400e0400 	.word	0x400e0400

004017cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4017cc:	b138      	cbz	r0, 4017de <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017ce:	4911      	ldr	r1, [pc, #68]	; (401814 <pmc_switch_mainck_to_xtal+0x48>)
  4017d0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4017d2:	4a11      	ldr	r2, [pc, #68]	; (401818 <pmc_switch_mainck_to_xtal+0x4c>)
  4017d4:	401a      	ands	r2, r3
  4017d6:	4b11      	ldr	r3, [pc, #68]	; (40181c <pmc_switch_mainck_to_xtal+0x50>)
  4017d8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017da:	620b      	str	r3, [r1, #32]
  4017dc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4017de:	4a0d      	ldr	r2, [pc, #52]	; (401814 <pmc_switch_mainck_to_xtal+0x48>)
  4017e0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4017e2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4017e6:	f023 0303 	bic.w	r3, r3, #3
  4017ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4017ee:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4017f2:	0209      	lsls	r1, r1, #8
  4017f4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4017f6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4017f8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4017fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4017fc:	f013 0f01 	tst.w	r3, #1
  401800:	d0fb      	beq.n	4017fa <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401802:	4a04      	ldr	r2, [pc, #16]	; (401814 <pmc_switch_mainck_to_xtal+0x48>)
  401804:	6a13      	ldr	r3, [r2, #32]
  401806:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40180a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40180e:	6213      	str	r3, [r2, #32]
  401810:	4770      	bx	lr
  401812:	bf00      	nop
  401814:	400e0400 	.word	0x400e0400
  401818:	fec8fffc 	.word	0xfec8fffc
  40181c:	01370002 	.word	0x01370002

00401820 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401820:	4b02      	ldr	r3, [pc, #8]	; (40182c <pmc_osc_is_ready_mainck+0xc>)
  401822:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401824:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401828:	4770      	bx	lr
  40182a:	bf00      	nop
  40182c:	400e0400 	.word	0x400e0400

00401830 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401830:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401834:	4b01      	ldr	r3, [pc, #4]	; (40183c <pmc_disable_pllack+0xc>)
  401836:	629a      	str	r2, [r3, #40]	; 0x28
  401838:	4770      	bx	lr
  40183a:	bf00      	nop
  40183c:	400e0400 	.word	0x400e0400

00401840 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401840:	4b02      	ldr	r3, [pc, #8]	; (40184c <pmc_is_locked_pllack+0xc>)
  401842:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401844:	f000 0002 	and.w	r0, r0, #2
  401848:	4770      	bx	lr
  40184a:	bf00      	nop
  40184c:	400e0400 	.word	0x400e0400

00401850 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401850:	2200      	movs	r2, #0
  401852:	4b01      	ldr	r3, [pc, #4]	; (401858 <pmc_disable_pllbck+0x8>)
  401854:	62da      	str	r2, [r3, #44]	; 0x2c
  401856:	4770      	bx	lr
  401858:	400e0400 	.word	0x400e0400

0040185c <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  40185c:	4b02      	ldr	r3, [pc, #8]	; (401868 <pmc_is_locked_pllbck+0xc>)
  40185e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401860:	f000 0004 	and.w	r0, r0, #4
  401864:	4770      	bx	lr
  401866:	bf00      	nop
  401868:	400e0400 	.word	0x400e0400

0040186c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40186c:	2822      	cmp	r0, #34	; 0x22
  40186e:	d820      	bhi.n	4018b2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  401870:	281f      	cmp	r0, #31
  401872:	d80d      	bhi.n	401890 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401874:	4b12      	ldr	r3, [pc, #72]	; (4018c0 <pmc_enable_periph_clk+0x54>)
  401876:	699a      	ldr	r2, [r3, #24]
  401878:	2301      	movs	r3, #1
  40187a:	4083      	lsls	r3, r0
  40187c:	401a      	ands	r2, r3
  40187e:	4293      	cmp	r3, r2
  401880:	d019      	beq.n	4018b6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
  401882:	2301      	movs	r3, #1
  401884:	fa03 f000 	lsl.w	r0, r3, r0
  401888:	4b0d      	ldr	r3, [pc, #52]	; (4018c0 <pmc_enable_periph_clk+0x54>)
  40188a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40188c:	2000      	movs	r0, #0
  40188e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401890:	4b0b      	ldr	r3, [pc, #44]	; (4018c0 <pmc_enable_periph_clk+0x54>)
  401892:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  401896:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401898:	2301      	movs	r3, #1
  40189a:	4083      	lsls	r3, r0
  40189c:	401a      	ands	r2, r3
  40189e:	4293      	cmp	r3, r2
  4018a0:	d00b      	beq.n	4018ba <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
  4018a2:	2301      	movs	r3, #1
  4018a4:	fa03 f000 	lsl.w	r0, r3, r0
  4018a8:	4b05      	ldr	r3, [pc, #20]	; (4018c0 <pmc_enable_periph_clk+0x54>)
  4018aa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4018ae:	2000      	movs	r0, #0
  4018b0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4018b2:	2001      	movs	r0, #1
  4018b4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4018b6:	2000      	movs	r0, #0
  4018b8:	4770      	bx	lr
  4018ba:	2000      	movs	r0, #0
}
  4018bc:	4770      	bx	lr
  4018be:	bf00      	nop
  4018c0:	400e0400 	.word	0x400e0400

004018c4 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4018c4:	2822      	cmp	r0, #34	; 0x22
  4018c6:	d820      	bhi.n	40190a <pmc_disable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
  4018c8:	281f      	cmp	r0, #31
  4018ca:	d80d      	bhi.n	4018e8 <pmc_disable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  4018cc:	4b12      	ldr	r3, [pc, #72]	; (401918 <pmc_disable_periph_clk+0x54>)
  4018ce:	699a      	ldr	r2, [r3, #24]
  4018d0:	2301      	movs	r3, #1
  4018d2:	4083      	lsls	r3, r0
  4018d4:	401a      	ands	r2, r3
  4018d6:	4293      	cmp	r3, r2
  4018d8:	d119      	bne.n	40190e <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR0 = 1 << ul_id;
  4018da:	2301      	movs	r3, #1
  4018dc:	fa03 f000 	lsl.w	r0, r3, r0
  4018e0:	4b0d      	ldr	r3, [pc, #52]	; (401918 <pmc_disable_periph_clk+0x54>)
  4018e2:	6158      	str	r0, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  4018e4:	2000      	movs	r0, #0
  4018e6:	4770      	bx	lr
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4018e8:	4b0b      	ldr	r3, [pc, #44]	; (401918 <pmc_disable_periph_clk+0x54>)
  4018ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
	} else {
		ul_id -= 32;
  4018ee:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  4018f0:	2301      	movs	r3, #1
  4018f2:	4083      	lsls	r3, r0
  4018f4:	401a      	ands	r2, r3
  4018f6:	4293      	cmp	r3, r2
  4018f8:	d10b      	bne.n	401912 <pmc_disable_periph_clk+0x4e>
			PMC->PMC_PCDR1 = 1 << ul_id;
  4018fa:	2301      	movs	r3, #1
  4018fc:	fa03 f000 	lsl.w	r0, r3, r0
  401900:	4b05      	ldr	r3, [pc, #20]	; (401918 <pmc_disable_periph_clk+0x54>)
  401902:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
		}
#endif
	}
	return 0;
  401906:	2000      	movs	r0, #0
  401908:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40190a:	2001      	movs	r0, #1
  40190c:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  40190e:	2000      	movs	r0, #0
  401910:	4770      	bx	lr
  401912:	2000      	movs	r0, #0
}
  401914:	4770      	bx	lr
  401916:	bf00      	nop
  401918:	400e0400 	.word	0x400e0400

0040191c <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  40191c:	0200      	lsls	r0, r0, #8
  40191e:	f400 6270 	and.w	r2, r0, #3840	; 0xf00
  401922:	f042 0201 	orr.w	r2, r2, #1
  401926:	4b01      	ldr	r3, [pc, #4]	; (40192c <pmc_switch_udpck_to_pllbck+0x10>)
  401928:	639a      	str	r2, [r3, #56]	; 0x38
  40192a:	4770      	bx	lr
  40192c:	400e0400 	.word	0x400e0400

00401930 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
# if (SAM3S || SAM4S || SAM4E)
	PMC->PMC_SCER = PMC_SCER_UDP;
  401930:	2280      	movs	r2, #128	; 0x80
  401932:	4b01      	ldr	r3, [pc, #4]	; (401938 <pmc_enable_udpck+0x8>)
  401934:	601a      	str	r2, [r3, #0]
  401936:	4770      	bx	lr
  401938:	400e0400 	.word	0x400e0400

0040193c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  40193c:	4b03      	ldr	r3, [pc, #12]	; (40194c <pmc_set_fast_startup_input+0x10>)
  40193e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  401940:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  401944:	4302      	orrs	r2, r0
  401946:	671a      	str	r2, [r3, #112]	; 0x70
  401948:	4770      	bx	lr
  40194a:	bf00      	nop
  40194c:	400e0400 	.word	0x400e0400

00401950 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  401950:	4b02      	ldr	r3, [pc, #8]	; (40195c <pmc_is_wakeup_clocks_restored+0xc>)
  401952:	7818      	ldrb	r0, [r3, #0]
}
  401954:	f080 0001 	eor.w	r0, r0, #1
  401958:	4770      	bx	lr
  40195a:	bf00      	nop
  40195c:	20000b3c 	.word	0x20000b3c

00401960 <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  401960:	0189      	lsls	r1, r1, #6
  401962:	2302      	movs	r3, #2
  401964:	5043      	str	r3, [r0, r1]
  401966:	4770      	bx	lr

00401968 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
  401968:	4603      	mov	r3, r0
  40196a:	bb58      	cbnz	r0, 4019c4 <udd_sleep_mode+0x5c>
  40196c:	4a18      	ldr	r2, [pc, #96]	; (4019d0 <udd_sleep_mode+0x68>)
  40196e:	7812      	ldrb	r2, [r2, #0]
  401970:	b32a      	cbz	r2, 4019be <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401972:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401976:	b672      	cpsid	i
  401978:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40197c:	4a15      	ldr	r2, [pc, #84]	; (4019d4 <udd_sleep_mode+0x6c>)
  40197e:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  401980:	4a15      	ldr	r2, [pc, #84]	; (4019d8 <udd_sleep_mode+0x70>)
  401982:	7890      	ldrb	r0, [r2, #2]
  401984:	3801      	subs	r0, #1
  401986:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401988:	b9c9      	cbnz	r1, 4019be <udd_sleep_mode+0x56>
		cpu_irq_enable();
  40198a:	2101      	movs	r1, #1
  40198c:	4a11      	ldr	r2, [pc, #68]	; (4019d4 <udd_sleep_mode+0x6c>)
  40198e:	7011      	strb	r1, [r2, #0]
  401990:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401994:	b662      	cpsie	i
  401996:	e012      	b.n	4019be <udd_sleep_mode+0x56>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401998:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  40199c:	b672      	cpsid	i
  40199e:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4019a2:	2000      	movs	r0, #0
  4019a4:	4a0b      	ldr	r2, [pc, #44]	; (4019d4 <udd_sleep_mode+0x6c>)
  4019a6:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4019a8:	4a0b      	ldr	r2, [pc, #44]	; (4019d8 <udd_sleep_mode+0x70>)
  4019aa:	7890      	ldrb	r0, [r2, #2]
  4019ac:	3001      	adds	r0, #1
  4019ae:	7090      	strb	r0, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4019b0:	b929      	cbnz	r1, 4019be <udd_sleep_mode+0x56>
		cpu_irq_enable();
  4019b2:	2101      	movs	r1, #1
  4019b4:	4a07      	ldr	r2, [pc, #28]	; (4019d4 <udd_sleep_mode+0x6c>)
  4019b6:	7011      	strb	r1, [r2, #0]
  4019b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4019bc:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  4019be:	4a04      	ldr	r2, [pc, #16]	; (4019d0 <udd_sleep_mode+0x68>)
  4019c0:	7013      	strb	r3, [r2, #0]
  4019c2:	4770      	bx	lr
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  4019c4:	4a02      	ldr	r2, [pc, #8]	; (4019d0 <udd_sleep_mode+0x68>)
  4019c6:	7812      	ldrb	r2, [r2, #0]
  4019c8:	2a00      	cmp	r2, #0
  4019ca:	d0e5      	beq.n	401998 <udd_sleep_mode+0x30>
  4019cc:	e7f7      	b.n	4019be <udd_sleep_mode+0x56>
  4019ce:	bf00      	nop
  4019d0:	20000b7c 	.word	0x20000b7c
  4019d4:	200000b0 	.word	0x200000b0
  4019d8:	20000be4 	.word	0x20000be4

004019dc <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  4019dc:	4a03      	ldr	r2, [pc, #12]	; (4019ec <udd_ctrl_init+0x10>)
  4019de:	2300      	movs	r3, #0
  4019e0:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  4019e2:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  4019e4:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  4019e6:	4a02      	ldr	r2, [pc, #8]	; (4019f0 <udd_ctrl_init+0x14>)
  4019e8:	7013      	strb	r3, [r2, #0]
  4019ea:	4770      	bx	lr
  4019ec:	20000bf0 	.word	0x20000bf0
  4019f0:	20000b81 	.word	0x20000b81

004019f4 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  4019f4:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  4019f6:	2205      	movs	r2, #5
  4019f8:	4b0e      	ldr	r3, [pc, #56]	; (401a34 <udd_ctrl_stall_data+0x40>)
  4019fa:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  4019fc:	4b0e      	ldr	r3, [pc, #56]	; (401a38 <udd_ctrl_stall_data+0x44>)
  4019fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a00:	9200      	str	r2, [sp, #0]
  401a02:	9a00      	ldr	r2, [sp, #0]
  401a04:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a08:	9200      	str	r2, [sp, #0]
  401a0a:	9a00      	ldr	r2, [sp, #0]
  401a0c:	f042 0220 	orr.w	r2, r2, #32
  401a10:	9200      	str	r2, [sp, #0]
  401a12:	9a00      	ldr	r2, [sp, #0]
  401a14:	631a      	str	r2, [r3, #48]	; 0x30
  401a16:	2300      	movs	r3, #0
  401a18:	9301      	str	r3, [sp, #4]
  401a1a:	9b01      	ldr	r3, [sp, #4]
  401a1c:	2b13      	cmp	r3, #19
  401a1e:	d806      	bhi.n	401a2e <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401a20:	bf00      	nop
  401a22:	9b01      	ldr	r3, [sp, #4]
  401a24:	3301      	adds	r3, #1
  401a26:	9301      	str	r3, [sp, #4]
  401a28:	9b01      	ldr	r3, [sp, #4]
  401a2a:	2b13      	cmp	r3, #19
  401a2c:	d9f8      	bls.n	401a20 <udd_ctrl_stall_data+0x2c>
}
  401a2e:	b002      	add	sp, #8
  401a30:	4770      	bx	lr
  401a32:	bf00      	nop
  401a34:	20000b81 	.word	0x20000b81
  401a38:	40034000 	.word	0x40034000

00401a3c <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  401a3c:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  401a3e:	2203      	movs	r2, #3
  401a40:	4b0e      	ldr	r3, [pc, #56]	; (401a7c <udd_ctrl_send_zlp_in+0x40>)
  401a42:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  401a44:	4b0e      	ldr	r3, [pc, #56]	; (401a80 <udd_ctrl_send_zlp_in+0x44>)
  401a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a48:	9200      	str	r2, [sp, #0]
  401a4a:	9a00      	ldr	r2, [sp, #0]
  401a4c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401a50:	9200      	str	r2, [sp, #0]
  401a52:	9a00      	ldr	r2, [sp, #0]
  401a54:	f042 0210 	orr.w	r2, r2, #16
  401a58:	9200      	str	r2, [sp, #0]
  401a5a:	9a00      	ldr	r2, [sp, #0]
  401a5c:	631a      	str	r2, [r3, #48]	; 0x30
  401a5e:	2300      	movs	r3, #0
  401a60:	9301      	str	r3, [sp, #4]
  401a62:	9b01      	ldr	r3, [sp, #4]
  401a64:	2b13      	cmp	r3, #19
  401a66:	d806      	bhi.n	401a76 <udd_ctrl_send_zlp_in+0x3a>
  401a68:	bf00      	nop
  401a6a:	9b01      	ldr	r3, [sp, #4]
  401a6c:	3301      	adds	r3, #1
  401a6e:	9301      	str	r3, [sp, #4]
  401a70:	9b01      	ldr	r3, [sp, #4]
  401a72:	2b13      	cmp	r3, #19
  401a74:	d9f8      	bls.n	401a68 <udd_ctrl_send_zlp_in+0x2c>
}
  401a76:	b002      	add	sp, #8
  401a78:	4770      	bx	lr
  401a7a:	bf00      	nop
  401a7c:	20000b81 	.word	0x20000b81
  401a80:	40034000 	.word	0x40034000

00401a84 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401a84:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401a86:	4b02      	ldr	r3, [pc, #8]	; (401a90 <udd_ctrl_endofrequest+0xc>)
  401a88:	691b      	ldr	r3, [r3, #16]
  401a8a:	b103      	cbz	r3, 401a8e <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401a8c:	4798      	blx	r3
  401a8e:	bd08      	pop	{r3, pc}
  401a90:	20000bf0 	.word	0x20000bf0

00401a94 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  401a94:	b570      	push	{r4, r5, r6, lr}
  401a96:	b08a      	sub	sp, #40	; 0x28
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401a98:	4b75      	ldr	r3, [pc, #468]	; (401c70 <udd_ctrl_in_sent+0x1dc>)
  401a9a:	781b      	ldrb	r3, [r3, #0]
  401a9c:	2b03      	cmp	r3, #3
  401a9e:	d11d      	bne.n	401adc <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  401aa0:	4b74      	ldr	r3, [pc, #464]	; (401c74 <udd_ctrl_in_sent+0x1e0>)
  401aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401aa4:	9200      	str	r2, [sp, #0]
  401aa6:	9a00      	ldr	r2, [sp, #0]
  401aa8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401aac:	9200      	str	r2, [sp, #0]
  401aae:	9a00      	ldr	r2, [sp, #0]
  401ab0:	f022 0201 	bic.w	r2, r2, #1
  401ab4:	9200      	str	r2, [sp, #0]
  401ab6:	9a00      	ldr	r2, [sp, #0]
  401ab8:	631a      	str	r2, [r3, #48]	; 0x30
  401aba:	2300      	movs	r3, #0
  401abc:	9301      	str	r3, [sp, #4]
  401abe:	9b01      	ldr	r3, [sp, #4]
  401ac0:	2b13      	cmp	r3, #19
  401ac2:	d806      	bhi.n	401ad2 <udd_ctrl_in_sent+0x3e>
  401ac4:	bf00      	nop
  401ac6:	9b01      	ldr	r3, [sp, #4]
  401ac8:	3301      	adds	r3, #1
  401aca:	9301      	str	r3, [sp, #4]
  401acc:	9b01      	ldr	r3, [sp, #4]
  401ace:	2b13      	cmp	r3, #19
  401ad0:	d9f8      	bls.n	401ac4 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  401ad2:	4b69      	ldr	r3, [pc, #420]	; (401c78 <udd_ctrl_in_sent+0x1e4>)
  401ad4:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  401ad6:	4b69      	ldr	r3, [pc, #420]	; (401c7c <udd_ctrl_in_sent+0x1e8>)
  401ad8:	4798      	blx	r3
		return;
  401ada:	e0c6      	b.n	401c6a <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  401adc:	4b68      	ldr	r3, [pc, #416]	; (401c80 <udd_ctrl_in_sent+0x1ec>)
  401ade:	881b      	ldrh	r3, [r3, #0]
  401ae0:	4a68      	ldr	r2, [pc, #416]	; (401c84 <udd_ctrl_in_sent+0x1f0>)
  401ae2:	8994      	ldrh	r4, [r2, #12]
  401ae4:	1ae4      	subs	r4, r4, r3
  401ae6:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401ae8:	2c00      	cmp	r4, #0
  401aea:	d133      	bne.n	401b54 <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401aec:	4a66      	ldr	r2, [pc, #408]	; (401c88 <udd_ctrl_in_sent+0x1f4>)
  401aee:	8811      	ldrh	r1, [r2, #0]
  401af0:	440b      	add	r3, r1
  401af2:	b29b      	uxth	r3, r3
  401af4:	8013      	strh	r3, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  401af6:	4a63      	ldr	r2, [pc, #396]	; (401c84 <udd_ctrl_in_sent+0x1f0>)
  401af8:	88d2      	ldrh	r2, [r2, #6]
  401afa:	429a      	cmp	r2, r3
  401afc:	d002      	beq.n	401b04 <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  401afe:	4b63      	ldr	r3, [pc, #396]	; (401c8c <udd_ctrl_in_sent+0x1f8>)
  401b00:	781b      	ldrb	r3, [r3, #0]
  401b02:	b1eb      	cbz	r3, 401b40 <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401b04:	2204      	movs	r2, #4
  401b06:	4b5a      	ldr	r3, [pc, #360]	; (401c70 <udd_ctrl_in_sent+0x1dc>)
  401b08:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  401b0a:	4b5a      	ldr	r3, [pc, #360]	; (401c74 <udd_ctrl_in_sent+0x1e0>)
  401b0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401b0e:	9202      	str	r2, [sp, #8]
  401b10:	9a02      	ldr	r2, [sp, #8]
  401b12:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401b16:	9202      	str	r2, [sp, #8]
  401b18:	9a02      	ldr	r2, [sp, #8]
  401b1a:	f022 0201 	bic.w	r2, r2, #1
  401b1e:	9202      	str	r2, [sp, #8]
  401b20:	9a02      	ldr	r2, [sp, #8]
  401b22:	631a      	str	r2, [r3, #48]	; 0x30
  401b24:	2300      	movs	r3, #0
  401b26:	9303      	str	r3, [sp, #12]
  401b28:	9b03      	ldr	r3, [sp, #12]
  401b2a:	2b13      	cmp	r3, #19
  401b2c:	f200 809d 	bhi.w	401c6a <udd_ctrl_in_sent+0x1d6>
  401b30:	bf00      	nop
  401b32:	9b03      	ldr	r3, [sp, #12]
  401b34:	3301      	adds	r3, #1
  401b36:	9303      	str	r3, [sp, #12]
  401b38:	9b03      	ldr	r3, [sp, #12]
  401b3a:	2b13      	cmp	r3, #19
  401b3c:	d9f8      	bls.n	401b30 <udd_ctrl_in_sent+0x9c>
  401b3e:	e094      	b.n	401c6a <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  401b40:	4b50      	ldr	r3, [pc, #320]	; (401c84 <udd_ctrl_in_sent+0x1f0>)
  401b42:	695b      	ldr	r3, [r3, #20]
  401b44:	b16b      	cbz	r3, 401b62 <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  401b46:	4798      	blx	r3
  401b48:	b158      	cbz	r0, 401b62 <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  401b4a:	2200      	movs	r2, #0
  401b4c:	4b4c      	ldr	r3, [pc, #304]	; (401c80 <udd_ctrl_in_sent+0x1ec>)
  401b4e:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401b50:	4b4c      	ldr	r3, [pc, #304]	; (401c84 <udd_ctrl_in_sent+0x1f0>)
  401b52:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401b54:	2c3f      	cmp	r4, #63	; 0x3f
  401b56:	d904      	bls.n	401b62 <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  401b58:	2200      	movs	r2, #0
  401b5a:	4b4c      	ldr	r3, [pc, #304]	; (401c8c <udd_ctrl_in_sent+0x1f8>)
  401b5c:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401b5e:	2440      	movs	r4, #64	; 0x40
  401b60:	e002      	b.n	401b68 <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  401b62:	2201      	movs	r2, #1
  401b64:	4b49      	ldr	r3, [pc, #292]	; (401c8c <udd_ctrl_in_sent+0x1f8>)
  401b66:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401b68:	4b46      	ldr	r3, [pc, #280]	; (401c84 <udd_ctrl_in_sent+0x1f0>)
  401b6a:	6899      	ldr	r1, [r3, #8]
  401b6c:	4b44      	ldr	r3, [pc, #272]	; (401c80 <udd_ctrl_in_sent+0x1ec>)
  401b6e:	881e      	ldrh	r6, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401b70:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401b74:	f1d0 0001 	rsbs	r0, r0, #1
  401b78:	bf38      	it	cc
  401b7a:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401b7c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401b7e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b82:	2200      	movs	r2, #0
  401b84:	4b42      	ldr	r3, [pc, #264]	; (401c90 <udd_ctrl_in_sent+0x1fc>)
  401b86:	701a      	strb	r2, [r3, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  401b88:	4b3a      	ldr	r3, [pc, #232]	; (401c74 <udd_ctrl_in_sent+0x1e0>)
  401b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b8c:	f013 0f02 	tst.w	r3, #2
  401b90:	d101      	bne.n	401b96 <udd_ctrl_in_sent+0x102>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401b92:	bb24      	cbnz	r4, 401bde <udd_ctrl_in_sent+0x14a>
  401b94:	e02d      	b.n	401bf2 <udd_ctrl_in_sent+0x15e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401b96:	b128      	cbz	r0, 401ba4 <udd_ctrl_in_sent+0x110>
		cpu_irq_enable();
  401b98:	2201      	movs	r2, #1
  401b9a:	4b3d      	ldr	r3, [pc, #244]	; (401c90 <udd_ctrl_in_sent+0x1fc>)
  401b9c:	701a      	strb	r2, [r3, #0]
  401b9e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  401ba2:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401ba4:	2204      	movs	r2, #4
  401ba6:	4b32      	ldr	r3, [pc, #200]	; (401c70 <udd_ctrl_in_sent+0x1dc>)
  401ba8:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  401baa:	4b32      	ldr	r3, [pc, #200]	; (401c74 <udd_ctrl_in_sent+0x1e0>)
  401bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401bae:	9204      	str	r2, [sp, #16]
  401bb0:	9a04      	ldr	r2, [sp, #16]
  401bb2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401bb6:	9204      	str	r2, [sp, #16]
  401bb8:	9a04      	ldr	r2, [sp, #16]
  401bba:	f022 0201 	bic.w	r2, r2, #1
  401bbe:	9204      	str	r2, [sp, #16]
  401bc0:	9a04      	ldr	r2, [sp, #16]
  401bc2:	631a      	str	r2, [r3, #48]	; 0x30
  401bc4:	2300      	movs	r3, #0
  401bc6:	9305      	str	r3, [sp, #20]
  401bc8:	9b05      	ldr	r3, [sp, #20]
  401bca:	2b13      	cmp	r3, #19
  401bcc:	d84d      	bhi.n	401c6a <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401bce:	bf00      	nop
  401bd0:	9b05      	ldr	r3, [sp, #20]
  401bd2:	3301      	adds	r3, #1
  401bd4:	9305      	str	r3, [sp, #20]
  401bd6:	9b05      	ldr	r3, [sp, #20]
  401bd8:	2b13      	cmp	r3, #19
  401bda:	d9f8      	bls.n	401bce <udd_ctrl_in_sent+0x13a>
  401bdc:	e045      	b.n	401c6a <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401bde:	4431      	add	r1, r6
  401be0:	460b      	mov	r3, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  401be2:	4d24      	ldr	r5, [pc, #144]	; (401c74 <udd_ctrl_in_sent+0x1e0>)
  401be4:	f813 2b01 	ldrb.w	r2, [r3], #1
  401be8:	652a      	str	r2, [r5, #80]	; 0x50
  401bea:	1a5a      	subs	r2, r3, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401bec:	b2d2      	uxtb	r2, r2
  401bee:	42a2      	cmp	r2, r4
  401bf0:	d3f8      	bcc.n	401be4 <udd_ctrl_in_sent+0x150>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  401bf2:	4434      	add	r4, r6
  401bf4:	4b22      	ldr	r3, [pc, #136]	; (401c80 <udd_ctrl_in_sent+0x1ec>)
  401bf6:	801c      	strh	r4, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  401bf8:	4b1e      	ldr	r3, [pc, #120]	; (401c74 <udd_ctrl_in_sent+0x1e0>)
  401bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401bfc:	9206      	str	r2, [sp, #24]
  401bfe:	9a06      	ldr	r2, [sp, #24]
  401c00:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c04:	9206      	str	r2, [sp, #24]
  401c06:	9a06      	ldr	r2, [sp, #24]
  401c08:	f042 0210 	orr.w	r2, r2, #16
  401c0c:	9206      	str	r2, [sp, #24]
  401c0e:	9a06      	ldr	r2, [sp, #24]
  401c10:	631a      	str	r2, [r3, #48]	; 0x30
  401c12:	2300      	movs	r3, #0
  401c14:	9307      	str	r3, [sp, #28]
  401c16:	9b07      	ldr	r3, [sp, #28]
  401c18:	2b13      	cmp	r3, #19
  401c1a:	d806      	bhi.n	401c2a <udd_ctrl_in_sent+0x196>
  401c1c:	bf00      	nop
  401c1e:	9b07      	ldr	r3, [sp, #28]
  401c20:	3301      	adds	r3, #1
  401c22:	9307      	str	r3, [sp, #28]
  401c24:	9b07      	ldr	r3, [sp, #28]
  401c26:	2b13      	cmp	r3, #19
  401c28:	d9f8      	bls.n	401c1c <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  401c2a:	4b12      	ldr	r3, [pc, #72]	; (401c74 <udd_ctrl_in_sent+0x1e0>)
  401c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401c2e:	9208      	str	r2, [sp, #32]
  401c30:	9a08      	ldr	r2, [sp, #32]
  401c32:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401c36:	9208      	str	r2, [sp, #32]
  401c38:	9a08      	ldr	r2, [sp, #32]
  401c3a:	f022 0201 	bic.w	r2, r2, #1
  401c3e:	9208      	str	r2, [sp, #32]
  401c40:	9a08      	ldr	r2, [sp, #32]
  401c42:	631a      	str	r2, [r3, #48]	; 0x30
  401c44:	2300      	movs	r3, #0
  401c46:	9309      	str	r3, [sp, #36]	; 0x24
  401c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401c4a:	2b13      	cmp	r3, #19
  401c4c:	d806      	bhi.n	401c5c <udd_ctrl_in_sent+0x1c8>
  401c4e:	bf00      	nop
  401c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401c52:	3301      	adds	r3, #1
  401c54:	9309      	str	r3, [sp, #36]	; 0x24
  401c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401c58:	2b13      	cmp	r3, #19
  401c5a:	d9f8      	bls.n	401c4e <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401c5c:	b128      	cbz	r0, 401c6a <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  401c5e:	2201      	movs	r2, #1
  401c60:	4b0b      	ldr	r3, [pc, #44]	; (401c90 <udd_ctrl_in_sent+0x1fc>)
  401c62:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401c64:	f3bf 8f5f 	dmb	sy
  401c68:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  401c6a:	b00a      	add	sp, #40	; 0x28
  401c6c:	bd70      	pop	{r4, r5, r6, pc}
  401c6e:	bf00      	nop
  401c70:	20000b81 	.word	0x20000b81
  401c74:	40034000 	.word	0x40034000
  401c78:	00401a85 	.word	0x00401a85
  401c7c:	004019dd 	.word	0x004019dd
  401c80:	20000b7e 	.word	0x20000b7e
  401c84:	20000bf0 	.word	0x20000bf0
  401c88:	20000b3e 	.word	0x20000b3e
  401c8c:	20000b80 	.word	0x20000b80
  401c90:	200000b0 	.word	0x200000b0

00401c94 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401c94:	b538      	push	{r3, r4, r5, lr}
  401c96:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  401c98:	7c44      	ldrb	r4, [r0, #17]
  401c9a:	f014 0f10 	tst.w	r4, #16
  401c9e:	d015      	beq.n	401ccc <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  401ca0:	7c44      	ldrb	r4, [r0, #17]
  401ca2:	f36f 1404 	bfc	r4, #4, #1
  401ca6:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401ca8:	6804      	ldr	r4, [r0, #0]
  401caa:	b17c      	cbz	r4, 401ccc <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401cac:	f102 050c 	add.w	r5, r2, #12
  401cb0:	4807      	ldr	r0, [pc, #28]	; (401cd0 <udd_ep_finish_job+0x3c>)
  401cb2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  401cb6:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401cba:	bf18      	it	ne
  401cbc:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401cc0:	2901      	cmp	r1, #1
  401cc2:	bf14      	ite	ne
  401cc4:	2000      	movne	r0, #0
  401cc6:	2001      	moveq	r0, #1
  401cc8:	6899      	ldr	r1, [r3, #8]
  401cca:	47a0      	blx	r4
  401ccc:	bd38      	pop	{r3, r4, r5, pc}
  401cce:	bf00      	nop
  401cd0:	40034000 	.word	0x40034000

00401cd4 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  401cd4:	b084      	sub	sp, #16
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401cd6:	1e42      	subs	r2, r0, #1
  401cd8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401cdc:	4b2f      	ldr	r3, [pc, #188]	; (401d9c <udd_ep_ack_out_received+0xc8>)
  401cde:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  401ce2:	0083      	lsls	r3, r0, #2
  401ce4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  401ce8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	if (Is_udd_all_banks_received(ep)) {
  401cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401cee:	f001 0142 	and.w	r1, r1, #66	; 0x42
  401cf2:	2942      	cmp	r1, #66	; 0x42
  401cf4:	d00e      	beq.n	401d14 <udd_ep_ack_out_received+0x40>
		// The only way is to use ptr_job->bank
	} else if (Is_udd_bank0_received(ep)) {
  401cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401cf8:	f011 0f02 	tst.w	r1, #2
  401cfc:	d004      	beq.n	401d08 <udd_ep_ack_out_received+0x34>
		// Must be bank0
		ptr_job->bank = 0;
  401cfe:	7c51      	ldrb	r1, [r2, #17]
  401d00:	f36f 0183 	bfc	r1, #2, #2
  401d04:	7451      	strb	r1, [r2, #17]
  401d06:	e009      	b.n	401d1c <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  401d08:	7c51      	ldrb	r1, [r2, #17]
  401d0a:	2001      	movs	r0, #1
  401d0c:	f360 0183 	bfi	r1, r0, #2, #2
  401d10:	7451      	strb	r1, [r2, #17]
  401d12:	e024      	b.n	401d5e <udd_ep_ack_out_received+0x8a>
	}
	if (ptr_job->bank == 0) {
  401d14:	7c51      	ldrb	r1, [r2, #17]
  401d16:	f011 0f0c 	tst.w	r1, #12
  401d1a:	d120      	bne.n	401d5e <udd_ep_ack_out_received+0x8a>
		udd_ack_bank0_received(ep);
  401d1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401d1e:	9100      	str	r1, [sp, #0]
  401d20:	9900      	ldr	r1, [sp, #0]
  401d22:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401d26:	9100      	str	r1, [sp, #0]
  401d28:	9900      	ldr	r1, [sp, #0]
  401d2a:	f021 0102 	bic.w	r1, r1, #2
  401d2e:	9100      	str	r1, [sp, #0]
  401d30:	9900      	ldr	r1, [sp, #0]
  401d32:	6319      	str	r1, [r3, #48]	; 0x30
  401d34:	2300      	movs	r3, #0
  401d36:	9301      	str	r3, [sp, #4]
  401d38:	9b01      	ldr	r3, [sp, #4]
  401d3a:	2b13      	cmp	r3, #19
  401d3c:	d806      	bhi.n	401d4c <udd_ep_ack_out_received+0x78>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401d3e:	bf00      	nop
  401d40:	9b01      	ldr	r3, [sp, #4]
  401d42:	3301      	adds	r3, #1
  401d44:	9301      	str	r3, [sp, #4]
  401d46:	9b01      	ldr	r3, [sp, #4]
  401d48:	2b13      	cmp	r3, #19
  401d4a:	d9f8      	bls.n	401d3e <udd_ep_ack_out_received+0x6a>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  401d4c:	b318      	cbz	r0, 401d96 <udd_ep_ack_out_received+0xc2>
  401d4e:	2803      	cmp	r0, #3
  401d50:	d021      	beq.n	401d96 <udd_ep_ack_out_received+0xc2>
			ptr_job->bank = 1;
  401d52:	7c53      	ldrb	r3, [r2, #17]
  401d54:	2101      	movs	r1, #1
  401d56:	f361 0383 	bfi	r3, r1, #2, #2
  401d5a:	7453      	strb	r3, [r2, #17]
  401d5c:	e01b      	b.n	401d96 <udd_ep_ack_out_received+0xc2>
		}
	} else {
		udd_ack_bank1_received(ep);
  401d5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  401d60:	9102      	str	r1, [sp, #8]
  401d62:	9902      	ldr	r1, [sp, #8]
  401d64:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  401d68:	9102      	str	r1, [sp, #8]
  401d6a:	9902      	ldr	r1, [sp, #8]
  401d6c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  401d70:	9102      	str	r1, [sp, #8]
  401d72:	9902      	ldr	r1, [sp, #8]
  401d74:	6319      	str	r1, [r3, #48]	; 0x30
  401d76:	2300      	movs	r3, #0
  401d78:	9303      	str	r3, [sp, #12]
  401d7a:	9b03      	ldr	r3, [sp, #12]
  401d7c:	2b13      	cmp	r3, #19
  401d7e:	d806      	bhi.n	401d8e <udd_ep_ack_out_received+0xba>
  401d80:	bf00      	nop
  401d82:	9b03      	ldr	r3, [sp, #12]
  401d84:	3301      	adds	r3, #1
  401d86:	9303      	str	r3, [sp, #12]
  401d88:	9b03      	ldr	r3, [sp, #12]
  401d8a:	2b13      	cmp	r3, #19
  401d8c:	d9f8      	bls.n	401d80 <udd_ep_ack_out_received+0xac>
		ptr_job->bank = 0;
  401d8e:	7c53      	ldrb	r3, [r2, #17]
  401d90:	f36f 0383 	bfc	r3, #2, #2
  401d94:	7453      	strb	r3, [r2, #17]
	}
}
  401d96:	b004      	add	sp, #16
  401d98:	4770      	bx	lr
  401d9a:	bf00      	nop
  401d9c:	20000b40 	.word	0x20000b40

00401da0 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  401da0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  401da4:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  401da6:	4607      	mov	r7, r0
  401da8:	1e46      	subs	r6, r0, #1
  401daa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  401dae:	4b52      	ldr	r3, [pc, #328]	; (401ef8 <udd_ep_in_sent+0x158>)
  401db0:	eb03 0686 	add.w	r6, r3, r6, lsl #2

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  401db4:	7c73      	ldrb	r3, [r6, #17]
  401db6:	f3c3 0381 	ubfx	r3, r3, #2, #2
  401dba:	b120      	cbz	r0, 401dc6 <udd_ep_in_sent+0x26>
  401dbc:	2803      	cmp	r0, #3
  401dbe:	bf14      	ite	ne
  401dc0:	2202      	movne	r2, #2
  401dc2:	2201      	moveq	r2, #1
  401dc4:	e000      	b.n	401dc8 <udd_ep_in_sent+0x28>
  401dc6:	2201      	movs	r2, #1
  401dc8:	429a      	cmp	r2, r3
  401dca:	f340 8089 	ble.w	401ee0 <udd_ep_in_sent+0x140>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  401dce:	68f3      	ldr	r3, [r6, #12]
  401dd0:	68b2      	ldr	r2, [r6, #8]
  401dd2:	4293      	cmp	r3, r2
  401dd4:	d304      	bcc.n	401de0 <udd_ep_in_sent+0x40>
  401dd6:	7c74      	ldrb	r4, [r6, #17]
  401dd8:	f014 0f40 	tst.w	r4, #64	; 0x40
  401ddc:	f000 8082 	beq.w	401ee4 <udd_ep_in_sent+0x144>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  401de0:	6874      	ldr	r4, [r6, #4]
  401de2:	441c      	add	r4, r3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  401de4:	ebc3 0902 	rsb	r9, r3, r2
	uint32_t pkt_size = ptr_job->size;
  401de8:	8a32      	ldrh	r2, [r6, #16]
  401dea:	f3c2 0209 	ubfx	r2, r2, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  401dee:	4591      	cmp	r9, r2
static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
  401df0:	bf26      	itte	cs
  401df2:	4691      	movcs	r9, r2
	bool is_short_pkt = false;
  401df4:	f04f 0800 	movcs.w	r8, #0

	// Packet size
	if (nb_remain < pkt_size) {
		pkt_size = nb_remain;
		is_short_pkt = true;
  401df8:	f04f 0801 	movcc.w	r8, #1
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  401dfc:	444b      	add	r3, r9
  401dfe:	60f3      	str	r3, [r6, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401e00:	f1b9 0f07 	cmp.w	r9, #7
  401e04:	d926      	bls.n	401e54 <udd_ep_in_sent+0xb4>
  401e06:	4623      	mov	r3, r4
  401e08:	f1a9 0a08 	sub.w	sl, r9, #8
  401e0c:	ea4f 0ada 	mov.w	sl, sl, lsr #3
  401e10:	f104 0c08 	add.w	ip, r4, #8
  401e14:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  401e18:	0082      	lsls	r2, r0, #2
  401e1a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  401e1e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e22:	781d      	ldrb	r5, [r3, #0]
  401e24:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e26:	785d      	ldrb	r5, [r3, #1]
  401e28:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e2a:	789d      	ldrb	r5, [r3, #2]
  401e2c:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e2e:	78dd      	ldrb	r5, [r3, #3]
  401e30:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e32:	791d      	ldrb	r5, [r3, #4]
  401e34:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e36:	795d      	ldrb	r5, [r3, #5]
  401e38:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e3a:	799d      	ldrb	r5, [r3, #6]
  401e3c:	6515      	str	r5, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e3e:	79dd      	ldrb	r5, [r3, #7]
  401e40:	6515      	str	r5, [r2, #80]	; 0x50
  401e42:	3308      	adds	r3, #8

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  401e44:	4563      	cmp	r3, ip
  401e46:	d1ec      	bne.n	401e22 <udd_ep_in_sent+0x82>
  401e48:	f10a 0a01 	add.w	sl, sl, #1
  401e4c:	eb04 04ca 	add.w	r4, r4, sl, lsl #3
  401e50:	f009 0907 	and.w	r9, r9, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401e54:	f1b9 0f00 	cmp.w	r9, #0
  401e58:	d009      	beq.n	401e6e <udd_ep_in_sent+0xce>
  401e5a:	44a1      	add	r9, r4
		udd_endpoint_fifo_write(ep, *ptr_src++);
  401e5c:	4d27      	ldr	r5, [pc, #156]	; (401efc <udd_ep_in_sent+0x15c>)
  401e5e:	f814 2b01 	ldrb.w	r2, [r4], #1
  401e62:	f107 0314 	add.w	r3, r7, #20
  401e66:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  401e6a:	454c      	cmp	r4, r9
  401e6c:	d1f7      	bne.n	401e5e <udd_ep_in_sent+0xbe>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  401e6e:	7c73      	ldrb	r3, [r6, #17]
  401e70:	f3c3 0281 	ubfx	r2, r3, #2, #2
  401e74:	3201      	adds	r2, #1
  401e76:	f362 0383 	bfi	r3, r2, #2, #2
  401e7a:	7473      	strb	r3, [r6, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  401e7c:	b1e1      	cbz	r1, 401eb8 <udd_ep_in_sent+0x118>
  401e7e:	0080      	lsls	r0, r0, #2
  401e80:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  401e84:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  401e88:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401e8a:	9300      	str	r3, [sp, #0]
  401e8c:	9b00      	ldr	r3, [sp, #0]
  401e8e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e92:	9300      	str	r3, [sp, #0]
  401e94:	9b00      	ldr	r3, [sp, #0]
  401e96:	f043 0310 	orr.w	r3, r3, #16
  401e9a:	9300      	str	r3, [sp, #0]
  401e9c:	9b00      	ldr	r3, [sp, #0]
  401e9e:	6303      	str	r3, [r0, #48]	; 0x30
  401ea0:	2300      	movs	r3, #0
  401ea2:	9301      	str	r3, [sp, #4]
  401ea4:	9b01      	ldr	r3, [sp, #4]
  401ea6:	2b13      	cmp	r3, #19
  401ea8:	d806      	bhi.n	401eb8 <udd_ep_in_sent+0x118>
  401eaa:	bf00      	nop
  401eac:	9b01      	ldr	r3, [sp, #4]
  401eae:	3301      	adds	r3, #1
  401eb0:	9301      	str	r3, [sp, #4]
  401eb2:	9b01      	ldr	r3, [sp, #4]
  401eb4:	2b13      	cmp	r3, #19
  401eb6:	d9f8      	bls.n	401eaa <udd_ep_in_sent+0x10a>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  401eb8:	f1b8 0f00 	cmp.w	r8, #0
  401ebc:	d003      	beq.n	401ec6 <udd_ep_in_sent+0x126>
		ptr_job->b_shortpacket = false;
  401ebe:	7c73      	ldrb	r3, [r6, #17]
  401ec0:	f36f 1386 	bfc	r3, #6, #1
  401ec4:	7473      	strb	r3, [r6, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  401ec6:	68f2      	ldr	r2, [r6, #12]
  401ec8:	68b3      	ldr	r3, [r6, #8]
  401eca:	429a      	cmp	r2, r3
  401ecc:	d30c      	bcc.n	401ee8 <udd_ep_in_sent+0x148>
			&& (!ptr_job->b_shortpacket)) {
  401ece:	7c73      	ldrb	r3, [r6, #17]
  401ed0:	f013 0f40 	tst.w	r3, #64	; 0x40
  401ed4:	d10a      	bne.n	401eec <udd_ep_in_sent+0x14c>
		ptr_job->b_buf_end = true;
  401ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401eda:	7473      	strb	r3, [r6, #17]
		return false;
  401edc:	2000      	movs	r0, #0
  401ede:	e006      	b.n	401eee <udd_ep_in_sent+0x14e>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  401ee0:	2001      	movs	r0, #1
  401ee2:	e004      	b.n	401eee <udd_ep_in_sent+0x14e>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  401ee4:	2000      	movs	r0, #0
  401ee6:	e002      	b.n	401eee <udd_ep_in_sent+0x14e>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  401ee8:	2001      	movs	r0, #1
  401eea:	e000      	b.n	401eee <udd_ep_in_sent+0x14e>
  401eec:	2001      	movs	r0, #1
}
  401eee:	b003      	add	sp, #12
  401ef0:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
  401ef4:	4770      	bx	lr
  401ef6:	bf00      	nop
  401ef8:	20000b40 	.word	0x20000b40
  401efc:	40034000 	.word	0x40034000

00401f00 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  401f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f04:	b0b0      	sub	sp, #192	; 0xc0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  401f06:	4b94      	ldr	r3, [pc, #592]	; (402158 <UDP_Handler+0x258>)
  401f08:	4798      	blx	r3
  401f0a:	b960      	cbnz	r0, 401f26 <UDP_Handler+0x26>
  401f0c:	4b93      	ldr	r3, [pc, #588]	; (40215c <UDP_Handler+0x25c>)
  401f0e:	69db      	ldr	r3, [r3, #28]
  401f10:	f413 7f80 	tst.w	r3, #256	; 0x100
  401f14:	d107      	bne.n	401f26 <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  401f16:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401f18:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  401f1c:	2200      	movs	r2, #0
  401f1e:	4b90      	ldr	r3, [pc, #576]	; (402160 <UDP_Handler+0x260>)
  401f20:	701a      	strb	r2, [r3, #0]
		return;
  401f22:	f000 bd15 	b.w	402950 <UDP_Handler+0xa50>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  401f26:	2022      	movs	r0, #34	; 0x22
  401f28:	4b8e      	ldr	r3, [pc, #568]	; (402164 <UDP_Handler+0x264>)
  401f2a:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  401f2c:	4b8b      	ldr	r3, [pc, #556]	; (40215c <UDP_Handler+0x25c>)
  401f2e:	699b      	ldr	r3, [r3, #24]
  401f30:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401f34:	d00c      	beq.n	401f50 <UDP_Handler+0x50>
  401f36:	4b89      	ldr	r3, [pc, #548]	; (40215c <UDP_Handler+0x25c>)
  401f38:	69db      	ldr	r3, [r3, #28]
  401f3a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  401f3e:	d007      	beq.n	401f50 <UDP_Handler+0x50>
		udd_ack_sof();
  401f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401f44:	4b85      	ldr	r3, [pc, #532]	; (40215c <UDP_Handler+0x25c>)
  401f46:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  401f48:	4b87      	ldr	r3, [pc, #540]	; (402168 <UDP_Handler+0x268>)
  401f4a:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  401f4c:	f000 bd00 	b.w	402950 <UDP_Handler+0xa50>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  401f50:	4b82      	ldr	r3, [pc, #520]	; (40215c <UDP_Handler+0x25c>)
  401f52:	69db      	ldr	r3, [r3, #28]
  401f54:	f013 0f01 	tst.w	r3, #1
  401f58:	f000 81f1 	beq.w	40233e <UDP_Handler+0x43e>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  401f5c:	4b7f      	ldr	r3, [pc, #508]	; (40215c <UDP_Handler+0x25c>)
  401f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f60:	f013 0f04 	tst.w	r3, #4
  401f64:	f000 80c0 	beq.w	4020e8 <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  401f68:	4b80      	ldr	r3, [pc, #512]	; (40216c <UDP_Handler+0x26c>)
  401f6a:	781b      	ldrb	r3, [r3, #0]
  401f6c:	b11b      	cbz	r3, 401f76 <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  401f6e:	4b80      	ldr	r3, [pc, #512]	; (402170 <UDP_Handler+0x270>)
  401f70:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  401f72:	4b80      	ldr	r3, [pc, #512]	; (402174 <UDP_Handler+0x274>)
  401f74:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  401f76:	4b79      	ldr	r3, [pc, #484]	; (40215c <UDP_Handler+0x25c>)
  401f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f7a:	f3c3 430a 	ubfx	r3, r3, #16, #11
  401f7e:	2b08      	cmp	r3, #8
  401f80:	d01c      	beq.n	401fbc <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  401f82:	4b76      	ldr	r3, [pc, #472]	; (40215c <UDP_Handler+0x25c>)
  401f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401f86:	9202      	str	r2, [sp, #8]
  401f88:	9a02      	ldr	r2, [sp, #8]
  401f8a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401f8e:	9202      	str	r2, [sp, #8]
  401f90:	9a02      	ldr	r2, [sp, #8]
  401f92:	f022 0204 	bic.w	r2, r2, #4
  401f96:	9202      	str	r2, [sp, #8]
  401f98:	9a02      	ldr	r2, [sp, #8]
  401f9a:	631a      	str	r2, [r3, #48]	; 0x30
  401f9c:	2300      	movs	r3, #0
  401f9e:	9303      	str	r3, [sp, #12]
  401fa0:	9b03      	ldr	r3, [sp, #12]
  401fa2:	2b13      	cmp	r3, #19
  401fa4:	d806      	bhi.n	401fb4 <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401fa6:	bf00      	nop
  401fa8:	9b03      	ldr	r3, [sp, #12]
  401faa:	3301      	adds	r3, #1
  401fac:	9303      	str	r3, [sp, #12]
  401fae:	9b03      	ldr	r3, [sp, #12]
  401fb0:	2b13      	cmp	r3, #19
  401fb2:	d9f8      	bls.n	401fa6 <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  401fb4:	4b70      	ldr	r3, [pc, #448]	; (402178 <UDP_Handler+0x278>)
  401fb6:	4798      	blx	r3
  401fb8:	f000 bcca 	b.w	402950 <UDP_Handler+0xa50>
  401fbc:	4b6f      	ldr	r3, [pc, #444]	; (40217c <UDP_Handler+0x27c>)
  401fbe:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  401fc2:	4966      	ldr	r1, [pc, #408]	; (40215c <UDP_Handler+0x25c>)
  401fc4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  401fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  401fca:	4283      	cmp	r3, r0
  401fcc:	d1fa      	bne.n	401fc4 <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  401fce:	4b6c      	ldr	r3, [pc, #432]	; (402180 <UDP_Handler+0x280>)
  401fd0:	4798      	blx	r3
  401fd2:	b9e0      	cbnz	r0, 40200e <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  401fd4:	4b61      	ldr	r3, [pc, #388]	; (40215c <UDP_Handler+0x25c>)
  401fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401fd8:	9204      	str	r2, [sp, #16]
  401fda:	9a04      	ldr	r2, [sp, #16]
  401fdc:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  401fe0:	9204      	str	r2, [sp, #16]
  401fe2:	9a04      	ldr	r2, [sp, #16]
  401fe4:	f022 0204 	bic.w	r2, r2, #4
  401fe8:	9204      	str	r2, [sp, #16]
  401fea:	9a04      	ldr	r2, [sp, #16]
  401fec:	631a      	str	r2, [r3, #48]	; 0x30
  401fee:	2300      	movs	r3, #0
  401ff0:	9305      	str	r3, [sp, #20]
  401ff2:	9b05      	ldr	r3, [sp, #20]
  401ff4:	2b13      	cmp	r3, #19
  401ff6:	d806      	bhi.n	402006 <UDP_Handler+0x106>
  401ff8:	bf00      	nop
  401ffa:	9b05      	ldr	r3, [sp, #20]
  401ffc:	3301      	adds	r3, #1
  401ffe:	9305      	str	r3, [sp, #20]
  402000:	9b05      	ldr	r3, [sp, #20]
  402002:	2b13      	cmp	r3, #19
  402004:	d9f8      	bls.n	401ff8 <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  402006:	4b5c      	ldr	r3, [pc, #368]	; (402178 <UDP_Handler+0x278>)
  402008:	4798      	blx	r3
  40200a:	f000 bca1 	b.w	402950 <UDP_Handler+0xa50>
		return;
	}

	if (Udd_setup_is_in()) {
  40200e:	4b5d      	ldr	r3, [pc, #372]	; (402184 <UDP_Handler+0x284>)
  402010:	f993 3000 	ldrsb.w	r3, [r3]
  402014:	2b00      	cmp	r3, #0
  402016:	da3d      	bge.n	402094 <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  402018:	4b50      	ldr	r3, [pc, #320]	; (40215c <UDP_Handler+0x25c>)
  40201a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40201c:	9206      	str	r2, [sp, #24]
  40201e:	9a06      	ldr	r2, [sp, #24]
  402020:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402024:	9206      	str	r2, [sp, #24]
  402026:	9a06      	ldr	r2, [sp, #24]
  402028:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40202c:	9206      	str	r2, [sp, #24]
  40202e:	9a06      	ldr	r2, [sp, #24]
  402030:	631a      	str	r2, [r3, #48]	; 0x30
  402032:	2300      	movs	r3, #0
  402034:	9307      	str	r3, [sp, #28]
  402036:	9b07      	ldr	r3, [sp, #28]
  402038:	2b13      	cmp	r3, #19
  40203a:	d806      	bhi.n	40204a <UDP_Handler+0x14a>
  40203c:	bf00      	nop
  40203e:	9b07      	ldr	r3, [sp, #28]
  402040:	3301      	adds	r3, #1
  402042:	9307      	str	r3, [sp, #28]
  402044:	9b07      	ldr	r3, [sp, #28]
  402046:	2b13      	cmp	r3, #19
  402048:	d9f8      	bls.n	40203c <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  40204a:	4b44      	ldr	r3, [pc, #272]	; (40215c <UDP_Handler+0x25c>)
  40204c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40204e:	9208      	str	r2, [sp, #32]
  402050:	9a08      	ldr	r2, [sp, #32]
  402052:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402056:	9208      	str	r2, [sp, #32]
  402058:	9a08      	ldr	r2, [sp, #32]
  40205a:	f022 0204 	bic.w	r2, r2, #4
  40205e:	9208      	str	r2, [sp, #32]
  402060:	9a08      	ldr	r2, [sp, #32]
  402062:	631a      	str	r2, [r3, #48]	; 0x30
  402064:	2300      	movs	r3, #0
  402066:	9309      	str	r3, [sp, #36]	; 0x24
  402068:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40206a:	2b13      	cmp	r3, #19
  40206c:	d806      	bhi.n	40207c <UDP_Handler+0x17c>
  40206e:	bf00      	nop
  402070:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402072:	3301      	adds	r3, #1
  402074:	9309      	str	r3, [sp, #36]	; 0x24
  402076:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402078:	2b13      	cmp	r3, #19
  40207a:	d9f8      	bls.n	40206e <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  40207c:	2300      	movs	r3, #0
  40207e:	4a42      	ldr	r2, [pc, #264]	; (402188 <UDP_Handler+0x288>)
  402080:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  402082:	4a42      	ldr	r2, [pc, #264]	; (40218c <UDP_Handler+0x28c>)
  402084:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  402086:	2202      	movs	r2, #2
  402088:	4b38      	ldr	r3, [pc, #224]	; (40216c <UDP_Handler+0x26c>)
  40208a:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  40208c:	4b40      	ldr	r3, [pc, #256]	; (402190 <UDP_Handler+0x290>)
  40208e:	4798      	blx	r3
  402090:	f000 bc5e 	b.w	402950 <UDP_Handler+0xa50>
	} else {
		udd_ack_setup_received(0);
  402094:	4b31      	ldr	r3, [pc, #196]	; (40215c <UDP_Handler+0x25c>)
  402096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402098:	920a      	str	r2, [sp, #40]	; 0x28
  40209a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40209c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4020a0:	920a      	str	r2, [sp, #40]	; 0x28
  4020a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4020a4:	f022 0204 	bic.w	r2, r2, #4
  4020a8:	920a      	str	r2, [sp, #40]	; 0x28
  4020aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4020ac:	631a      	str	r2, [r3, #48]	; 0x30
  4020ae:	2300      	movs	r3, #0
  4020b0:	930b      	str	r3, [sp, #44]	; 0x2c
  4020b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4020b4:	2b13      	cmp	r3, #19
  4020b6:	d806      	bhi.n	4020c6 <UDP_Handler+0x1c6>
  4020b8:	bf00      	nop
  4020ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4020bc:	3301      	adds	r3, #1
  4020be:	930b      	str	r3, [sp, #44]	; 0x2c
  4020c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4020c2:	2b13      	cmp	r3, #19
  4020c4:	d9f8      	bls.n	4020b8 <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4020c6:	4b2f      	ldr	r3, [pc, #188]	; (402184 <UDP_Handler+0x284>)
  4020c8:	88db      	ldrh	r3, [r3, #6]
  4020ca:	b91b      	cbnz	r3, 4020d4 <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  4020cc:	4b31      	ldr	r3, [pc, #196]	; (402194 <UDP_Handler+0x294>)
  4020ce:	4798      	blx	r3
  4020d0:	f000 bc3e 	b.w	402950 <UDP_Handler+0xa50>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4020d4:	2300      	movs	r3, #0
  4020d6:	4a2c      	ldr	r2, [pc, #176]	; (402188 <UDP_Handler+0x288>)
  4020d8:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4020da:	4a2c      	ldr	r2, [pc, #176]	; (40218c <UDP_Handler+0x28c>)
  4020dc:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4020de:	2201      	movs	r2, #1
  4020e0:	4b22      	ldr	r3, [pc, #136]	; (40216c <UDP_Handler+0x26c>)
  4020e2:	701a      	strb	r2, [r3, #0]
  4020e4:	f000 bc34 	b.w	402950 <UDP_Handler+0xa50>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  4020e8:	4b1c      	ldr	r3, [pc, #112]	; (40215c <UDP_Handler+0x25c>)
  4020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020ec:	f013 0f01 	tst.w	r3, #1
  4020f0:	d003      	beq.n	4020fa <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  4020f2:	4b27      	ldr	r3, [pc, #156]	; (402190 <UDP_Handler+0x290>)
  4020f4:	4798      	blx	r3
  4020f6:	f000 bc2b 	b.w	402950 <UDP_Handler+0xa50>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  4020fa:	4b18      	ldr	r3, [pc, #96]	; (40215c <UDP_Handler+0x25c>)
  4020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4020fe:	f013 0f02 	tst.w	r3, #2
  402102:	f000 8117 	beq.w	402334 <UDP_Handler+0x434>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  402106:	4b19      	ldr	r3, [pc, #100]	; (40216c <UDP_Handler+0x26c>)
  402108:	781b      	ldrb	r3, [r3, #0]
  40210a:	2b01      	cmp	r3, #1
  40210c:	d044      	beq.n	402198 <UDP_Handler+0x298>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  40210e:	2b02      	cmp	r3, #2
  402110:	d001      	beq.n	402116 <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  402112:	2b04      	cmp	r3, #4
  402114:	d102      	bne.n	40211c <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  402116:	4b16      	ldr	r3, [pc, #88]	; (402170 <UDP_Handler+0x270>)
  402118:	4798      	blx	r3
  40211a:	e001      	b.n	402120 <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  40211c:	4b16      	ldr	r3, [pc, #88]	; (402178 <UDP_Handler+0x278>)
  40211e:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  402120:	4b0e      	ldr	r3, [pc, #56]	; (40215c <UDP_Handler+0x25c>)
  402122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402124:	920c      	str	r2, [sp, #48]	; 0x30
  402126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  402128:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40212c:	920c      	str	r2, [sp, #48]	; 0x30
  40212e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  402130:	f022 0202 	bic.w	r2, r2, #2
  402134:	920c      	str	r2, [sp, #48]	; 0x30
  402136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  402138:	631a      	str	r2, [r3, #48]	; 0x30
  40213a:	2300      	movs	r3, #0
  40213c:	930d      	str	r3, [sp, #52]	; 0x34
  40213e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402140:	2b13      	cmp	r3, #19
  402142:	d806      	bhi.n	402152 <UDP_Handler+0x252>
  402144:	bf00      	nop
  402146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402148:	3301      	adds	r3, #1
  40214a:	930d      	str	r3, [sp, #52]	; 0x34
  40214c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40214e:	2b13      	cmp	r3, #19
  402150:	d9f8      	bls.n	402144 <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  402152:	4b08      	ldr	r3, [pc, #32]	; (402174 <UDP_Handler+0x274>)
  402154:	4798      	blx	r3
  402156:	e3fb      	b.n	402950 <UDP_Handler+0xa50>
  402158:	00401951 	.word	0x00401951
  40215c:	40034000 	.word	0x40034000
  402160:	200000b0 	.word	0x200000b0
  402164:	0040186d 	.word	0x0040186d
  402168:	00401109 	.word	0x00401109
  40216c:	20000b81 	.word	0x20000b81
  402170:	00401a85 	.word	0x00401a85
  402174:	004019dd 	.word	0x004019dd
  402178:	004019f5 	.word	0x004019f5
  40217c:	20000bef 	.word	0x20000bef
  402180:	00401145 	.word	0x00401145
  402184:	20000bf0 	.word	0x20000bf0
  402188:	20000b3e 	.word	0x20000b3e
  40218c:	20000b7e 	.word	0x20000b7e
  402190:	00401a95 	.word	0x00401a95
  402194:	00401a3d 	.word	0x00401a3d
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  402198:	4b90      	ldr	r3, [pc, #576]	; (4023dc <UDP_Handler+0x4dc>)
  40219a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40219c:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  4021a0:	4b8f      	ldr	r3, [pc, #572]	; (4023e0 <UDP_Handler+0x4e0>)
  4021a2:	899b      	ldrh	r3, [r3, #12]
  4021a4:	4a8f      	ldr	r2, [pc, #572]	; (4023e4 <UDP_Handler+0x4e4>)
  4021a6:	8815      	ldrh	r5, [r2, #0]
  4021a8:	186a      	adds	r2, r5, r1
  4021aa:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  4021ac:	bfae      	itee	ge
  4021ae:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  4021b0:	ebc5 0303 	rsblt	r3, r5, r3
  4021b4:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4021b6:	4b8a      	ldr	r3, [pc, #552]	; (4023e0 <UDP_Handler+0x4e0>)
  4021b8:	6898      	ldr	r0, [r3, #8]
  4021ba:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  4021bc:	b1a9      	cbz	r1, 4021ea <UDP_Handler+0x2ea>
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4021be:	4603      	mov	r3, r0
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4021c0:	4c86      	ldr	r4, [pc, #536]	; (4023dc <UDP_Handler+0x4dc>)
  4021c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4021c4:	f803 2b01 	strb.w	r2, [r3], #1
  4021c8:	1a1a      	subs	r2, r3, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  4021ca:	b2d2      	uxtb	r2, r2
  4021cc:	428a      	cmp	r2, r1
  4021ce:	d3f8      	bcc.n	4021c2 <UDP_Handler+0x2c2>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  4021d0:	440d      	add	r5, r1
  4021d2:	b2ad      	uxth	r5, r5
  4021d4:	4b83      	ldr	r3, [pc, #524]	; (4023e4 <UDP_Handler+0x4e4>)
  4021d6:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  4021d8:	2940      	cmp	r1, #64	; 0x40
  4021da:	d106      	bne.n	4021ea <UDP_Handler+0x2ea>
			|| (udd_g_ctrlreq.req.wLength <=
  4021dc:	4b80      	ldr	r3, [pc, #512]	; (4023e0 <UDP_Handler+0x4e0>)
  4021de:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  4021e0:	4b81      	ldr	r3, [pc, #516]	; (4023e8 <UDP_Handler+0x4e8>)
  4021e2:	881b      	ldrh	r3, [r3, #0]
  4021e4:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  4021e6:	429a      	cmp	r2, r3
  4021e8:	dc3e      	bgt.n	402268 <UDP_Handler+0x368>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  4021ea:	4b7d      	ldr	r3, [pc, #500]	; (4023e0 <UDP_Handler+0x4e0>)
  4021ec:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  4021ee:	695b      	ldr	r3, [r3, #20]
  4021f0:	b1f3      	cbz	r3, 402230 <UDP_Handler+0x330>
			if (!udd_g_ctrlreq.over_under_run()) {
  4021f2:	4798      	blx	r3
  4021f4:	b9e0      	cbnz	r0, 402230 <UDP_Handler+0x330>
				// Stall ZLP
				udd_ctrl_stall_data();
  4021f6:	4b7d      	ldr	r3, [pc, #500]	; (4023ec <UDP_Handler+0x4ec>)
  4021f8:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  4021fa:	4b78      	ldr	r3, [pc, #480]	; (4023dc <UDP_Handler+0x4dc>)
  4021fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4021fe:	920e      	str	r2, [sp, #56]	; 0x38
  402200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402202:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402206:	920e      	str	r2, [sp, #56]	; 0x38
  402208:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40220a:	f022 0202 	bic.w	r2, r2, #2
  40220e:	920e      	str	r2, [sp, #56]	; 0x38
  402210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402212:	631a      	str	r2, [r3, #48]	; 0x30
  402214:	2300      	movs	r3, #0
  402216:	930f      	str	r3, [sp, #60]	; 0x3c
  402218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40221a:	2b13      	cmp	r3, #19
  40221c:	f200 8398 	bhi.w	402950 <UDP_Handler+0xa50>
  402220:	bf00      	nop
  402222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402224:	3301      	adds	r3, #1
  402226:	930f      	str	r3, [sp, #60]	; 0x3c
  402228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40222a:	2b13      	cmp	r3, #19
  40222c:	d9f8      	bls.n	402220 <UDP_Handler+0x320>
  40222e:	e38f      	b.n	402950 <UDP_Handler+0xa50>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  402230:	4b6a      	ldr	r3, [pc, #424]	; (4023dc <UDP_Handler+0x4dc>)
  402232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402234:	9210      	str	r2, [sp, #64]	; 0x40
  402236:	9a10      	ldr	r2, [sp, #64]	; 0x40
  402238:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40223c:	9210      	str	r2, [sp, #64]	; 0x40
  40223e:	9a10      	ldr	r2, [sp, #64]	; 0x40
  402240:	f022 0202 	bic.w	r2, r2, #2
  402244:	9210      	str	r2, [sp, #64]	; 0x40
  402246:	9a10      	ldr	r2, [sp, #64]	; 0x40
  402248:	631a      	str	r2, [r3, #48]	; 0x30
  40224a:	2300      	movs	r3, #0
  40224c:	9311      	str	r3, [sp, #68]	; 0x44
  40224e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402250:	2b13      	cmp	r3, #19
  402252:	d806      	bhi.n	402262 <UDP_Handler+0x362>
  402254:	bf00      	nop
  402256:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402258:	3301      	adds	r3, #1
  40225a:	9311      	str	r3, [sp, #68]	; 0x44
  40225c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40225e:	2b13      	cmp	r3, #19
  402260:	d9f8      	bls.n	402254 <UDP_Handler+0x354>
		udd_ctrl_send_zlp_in();
  402262:	4b63      	ldr	r3, [pc, #396]	; (4023f0 <UDP_Handler+0x4f0>)
  402264:	4798      	blx	r3
  402266:	e373      	b.n	402950 <UDP_Handler+0xa50>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  402268:	4b5d      	ldr	r3, [pc, #372]	; (4023e0 <UDP_Handler+0x4e0>)
  40226a:	899b      	ldrh	r3, [r3, #12]
  40226c:	42ab      	cmp	r3, r5
  40226e:	d146      	bne.n	4022fe <UDP_Handler+0x3fe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  402270:	4b5b      	ldr	r3, [pc, #364]	; (4023e0 <UDP_Handler+0x4e0>)
  402272:	695b      	ldr	r3, [r3, #20]
  402274:	b9e3      	cbnz	r3, 4022b0 <UDP_Handler+0x3b0>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  402276:	4b5d      	ldr	r3, [pc, #372]	; (4023ec <UDP_Handler+0x4ec>)
  402278:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  40227a:	4b58      	ldr	r3, [pc, #352]	; (4023dc <UDP_Handler+0x4dc>)
  40227c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40227e:	9212      	str	r2, [sp, #72]	; 0x48
  402280:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402282:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402286:	9212      	str	r2, [sp, #72]	; 0x48
  402288:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40228a:	f022 0202 	bic.w	r2, r2, #2
  40228e:	9212      	str	r2, [sp, #72]	; 0x48
  402290:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402292:	631a      	str	r2, [r3, #48]	; 0x30
  402294:	2300      	movs	r3, #0
  402296:	9313      	str	r3, [sp, #76]	; 0x4c
  402298:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40229a:	2b13      	cmp	r3, #19
  40229c:	f200 8358 	bhi.w	402950 <UDP_Handler+0xa50>
  4022a0:	bf00      	nop
  4022a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4022a4:	3301      	adds	r3, #1
  4022a6:	9313      	str	r3, [sp, #76]	; 0x4c
  4022a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4022aa:	2b13      	cmp	r3, #19
  4022ac:	d9f8      	bls.n	4022a0 <UDP_Handler+0x3a0>
  4022ae:	e34f      	b.n	402950 <UDP_Handler+0xa50>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  4022b0:	4798      	blx	r3
  4022b2:	b9e0      	cbnz	r0, 4022ee <UDP_Handler+0x3ee>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  4022b4:	4b4d      	ldr	r3, [pc, #308]	; (4023ec <UDP_Handler+0x4ec>)
  4022b6:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4022b8:	4b48      	ldr	r3, [pc, #288]	; (4023dc <UDP_Handler+0x4dc>)
  4022ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4022bc:	9214      	str	r2, [sp, #80]	; 0x50
  4022be:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4022c0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4022c4:	9214      	str	r2, [sp, #80]	; 0x50
  4022c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4022c8:	f022 0202 	bic.w	r2, r2, #2
  4022cc:	9214      	str	r2, [sp, #80]	; 0x50
  4022ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4022d0:	631a      	str	r2, [r3, #48]	; 0x30
  4022d2:	2300      	movs	r3, #0
  4022d4:	9315      	str	r3, [sp, #84]	; 0x54
  4022d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4022d8:	2b13      	cmp	r3, #19
  4022da:	f200 8339 	bhi.w	402950 <UDP_Handler+0xa50>
  4022de:	bf00      	nop
  4022e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4022e2:	3301      	adds	r3, #1
  4022e4:	9315      	str	r3, [sp, #84]	; 0x54
  4022e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4022e8:	2b13      	cmp	r3, #19
  4022ea:	d9f8      	bls.n	4022de <UDP_Handler+0x3de>
  4022ec:	e330      	b.n	402950 <UDP_Handler+0xa50>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  4022ee:	4a3e      	ldr	r2, [pc, #248]	; (4023e8 <UDP_Handler+0x4e8>)
  4022f0:	4b3c      	ldr	r3, [pc, #240]	; (4023e4 <UDP_Handler+0x4e4>)
  4022f2:	8818      	ldrh	r0, [r3, #0]
  4022f4:	8811      	ldrh	r1, [r2, #0]
  4022f6:	4401      	add	r1, r0
  4022f8:	8011      	strh	r1, [r2, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  4022fa:	2200      	movs	r2, #0
  4022fc:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  4022fe:	4b37      	ldr	r3, [pc, #220]	; (4023dc <UDP_Handler+0x4dc>)
  402300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402302:	9216      	str	r2, [sp, #88]	; 0x58
  402304:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402306:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40230a:	9216      	str	r2, [sp, #88]	; 0x58
  40230c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40230e:	f022 0202 	bic.w	r2, r2, #2
  402312:	9216      	str	r2, [sp, #88]	; 0x58
  402314:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402316:	631a      	str	r2, [r3, #48]	; 0x30
  402318:	2300      	movs	r3, #0
  40231a:	9317      	str	r3, [sp, #92]	; 0x5c
  40231c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40231e:	2b13      	cmp	r3, #19
  402320:	f200 8316 	bhi.w	402950 <UDP_Handler+0xa50>
  402324:	bf00      	nop
  402326:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402328:	3301      	adds	r3, #1
  40232a:	9317      	str	r3, [sp, #92]	; 0x5c
  40232c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40232e:	2b13      	cmp	r3, #19
  402330:	d9f8      	bls.n	402324 <UDP_Handler+0x424>
  402332:	e30d      	b.n	402950 <UDP_Handler+0xa50>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  402334:	4b29      	ldr	r3, [pc, #164]	; (4023dc <UDP_Handler+0x4dc>)
  402336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402338:	f013 0f08 	tst.w	r3, #8
  40233c:	d106      	bne.n	40234c <UDP_Handler+0x44c>
  40233e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 4023f4 <UDP_Handler+0x4f4>
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  402342:	4664      	mov	r4, ip
  402344:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402346:	4a25      	ldr	r2, [pc, #148]	; (4023dc <UDP_Handler+0x4dc>)
  402348:	461e      	mov	r6, r3
  40234a:	e01a      	b.n	402382 <UDP_Handler+0x482>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  40234c:	4b23      	ldr	r3, [pc, #140]	; (4023dc <UDP_Handler+0x4dc>)
  40234e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402350:	9200      	str	r2, [sp, #0]
  402352:	9a00      	ldr	r2, [sp, #0]
  402354:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402358:	9200      	str	r2, [sp, #0]
  40235a:	9a00      	ldr	r2, [sp, #0]
  40235c:	f022 0208 	bic.w	r2, r2, #8
  402360:	9200      	str	r2, [sp, #0]
  402362:	9a00      	ldr	r2, [sp, #0]
  402364:	631a      	str	r2, [r3, #48]	; 0x30
  402366:	2300      	movs	r3, #0
  402368:	9301      	str	r3, [sp, #4]
  40236a:	9b01      	ldr	r3, [sp, #4]
  40236c:	2b13      	cmp	r3, #19
  40236e:	f200 82ef 	bhi.w	402950 <UDP_Handler+0xa50>
  402372:	bf00      	nop
  402374:	9b01      	ldr	r3, [sp, #4]
  402376:	3301      	adds	r3, #1
  402378:	9301      	str	r3, [sp, #4]
  40237a:	9b01      	ldr	r3, [sp, #4]
  40237c:	2b13      	cmp	r3, #19
  40237e:	d9f8      	bls.n	402372 <UDP_Handler+0x472>
  402380:	e2e6      	b.n	402950 <UDP_Handler+0xa50>
  402382:	fa5f f883 	uxtb.w	r8, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  402386:	6991      	ldr	r1, [r2, #24]
  402388:	461f      	mov	r7, r3
  40238a:	fa06 f503 	lsl.w	r5, r6, r3
  40238e:	420d      	tst	r5, r1
  402390:	f000 81f1 	beq.w	402776 <UDP_Handler+0x876>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  402394:	46a1      	mov	r9, r4
  402396:	0099      	lsls	r1, r3, #2
  402398:	f101 2140 	add.w	r1, r1, #1073758208	; 0x40004000
  40239c:	f501 3140 	add.w	r1, r1, #196608	; 0x30000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  4023a0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4023a2:	f010 0f42 	tst.w	r0, #66	; 0x42
  4023a6:	d044      	beq.n	402432 <UDP_Handler+0x532>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4023a8:	68a2      	ldr	r2, [r4, #8]
  4023aa:	68e3      	ldr	r3, [r4, #12]
	uint32_t pkt_size = ptr_job->size;
  4023ac:	f8b4 a010 	ldrh.w	sl, [r4, #16]
  4023b0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  4023b4:	6860      	ldr	r0, [r4, #4]
  4023b6:	4418      	add	r0, r3
  4023b8:	460c      	mov	r4, r1
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  4023ba:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  4023bc:	f3c6 460a 	ubfx	r6, r6, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  4023c0:	2e00      	cmp	r6, #0
  4023c2:	f000 82b6 	beq.w	402932 <UDP_Handler+0xa32>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  4023c6:	1ad1      	subs	r1, r2, r3
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  4023c8:	42b1      	cmp	r1, r6
  4023ca:	f200 82a9 	bhi.w	402920 <UDP_Handler+0xa20>
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  4023ce:	f8c9 200c 	str.w	r2, [r9, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  4023d2:	2900      	cmp	r1, #0
  4023d4:	f040 82aa 	bne.w	40292c <UDP_Handler+0xa2c>
  4023d8:	e2b6      	b.n	402948 <UDP_Handler+0xa48>
  4023da:	bf00      	nop
  4023dc:	40034000 	.word	0x40034000
  4023e0:	20000bf0 	.word	0x20000bf0
  4023e4:	20000b7e 	.word	0x20000b7e
  4023e8:	20000b3e 	.word	0x20000b3e
  4023ec:	004019f5 	.word	0x004019f5
  4023f0:	00401a3d 	.word	0x00401a3d
  4023f4:	20000b40 	.word	0x20000b40
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  4023f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
  4023fa:	54c2      	strb	r2, [r0, r3]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  4023fc:	3301      	adds	r3, #1
  4023fe:	428b      	cmp	r3, r1
  402400:	d3fa      	bcc.n	4023f8 <UDP_Handler+0x4f8>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402402:	4640      	mov	r0, r8
  402404:	4b95      	ldr	r3, [pc, #596]	; (40265c <UDP_Handler+0x75c>)
  402406:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  402408:	b917      	cbnz	r7, 402410 <UDP_Handler+0x510>
  40240a:	45b2      	cmp	sl, r6
  40240c:	f240 82a0 	bls.w	402950 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
  402410:	6b23      	ldr	r3, [r4, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  402412:	f013 0f20 	tst.w	r3, #32
  402416:	f040 829b 	bne.w	402950 <UDP_Handler+0xa50>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  40241a:	4b91      	ldr	r3, [pc, #580]	; (402660 <UDP_Handler+0x760>)
  40241c:	615d      	str	r5, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40241e:	f8d9 300c 	ldr.w	r3, [r9, #12]
  402422:	f8c9 3008 	str.w	r3, [r9, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402426:	4648      	mov	r0, r9
  402428:	2100      	movs	r1, #0
  40242a:	4642      	mov	r2, r8
  40242c:	4b8d      	ldr	r3, [pc, #564]	; (402664 <UDP_Handler+0x764>)
  40242e:	4798      	blx	r3
  402430:	e28e      	b.n	402950 <UDP_Handler+0xa50>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  402432:	6b08      	ldr	r0, [r1, #48]	; 0x30
  402434:	f010 0f01 	tst.w	r0, #1
  402438:	f000 8173 	beq.w	402722 <UDP_Handler+0x822>

			ptr_job->bank--;
  40243c:	7c63      	ldrb	r3, [r4, #17]
  40243e:	f3c3 0281 	ubfx	r2, r3, #2, #2
  402442:	3203      	adds	r2, #3
  402444:	f002 0203 	and.w	r2, r2, #3
  402448:	f362 0383 	bfi	r3, r2, #2, #2
  40244c:	7463      	strb	r3, [r4, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  40244e:	f013 0f20 	tst.w	r3, #32
  402452:	d074      	beq.n	40253e <UDP_Handler+0x63e>
				if (ptr_job->bank) {
  402454:	2a00      	cmp	r2, #0
  402456:	d036      	beq.n	4024c6 <UDP_Handler+0x5c6>
  402458:	00ba      	lsls	r2, r7, #2
  40245a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40245e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
					// Send remaining
					udd_set_transmit_ready(ep);
  402462:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402464:	9318      	str	r3, [sp, #96]	; 0x60
  402466:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402468:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40246c:	9318      	str	r3, [sp, #96]	; 0x60
  40246e:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402470:	f043 0310 	orr.w	r3, r3, #16
  402474:	9318      	str	r3, [sp, #96]	; 0x60
  402476:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402478:	6313      	str	r3, [r2, #48]	; 0x30
  40247a:	2300      	movs	r3, #0
  40247c:	9319      	str	r3, [sp, #100]	; 0x64
  40247e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402480:	2b13      	cmp	r3, #19
  402482:	d806      	bhi.n	402492 <UDP_Handler+0x592>
  402484:	bf00      	nop
  402486:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402488:	3301      	adds	r3, #1
  40248a:	9319      	str	r3, [sp, #100]	; 0x64
  40248c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40248e:	2b13      	cmp	r3, #19
  402490:	d9f8      	bls.n	402484 <UDP_Handler+0x584>
					udd_ack_in_sent(ep);
  402492:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402494:	931a      	str	r3, [sp, #104]	; 0x68
  402496:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402498:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40249c:	931a      	str	r3, [sp, #104]	; 0x68
  40249e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4024a0:	f023 0301 	bic.w	r3, r3, #1
  4024a4:	931a      	str	r3, [sp, #104]	; 0x68
  4024a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4024a8:	6313      	str	r3, [r2, #48]	; 0x30
  4024aa:	2300      	movs	r3, #0
  4024ac:	931b      	str	r3, [sp, #108]	; 0x6c
  4024ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4024b0:	2b13      	cmp	r3, #19
  4024b2:	f200 824d 	bhi.w	402950 <UDP_Handler+0xa50>
  4024b6:	bf00      	nop
  4024b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4024ba:	3301      	adds	r3, #1
  4024bc:	931b      	str	r3, [sp, #108]	; 0x6c
  4024be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  4024c0:	2b13      	cmp	r3, #19
  4024c2:	d9f8      	bls.n	4024b6 <UDP_Handler+0x5b6>
  4024c4:	e244      	b.n	402950 <UDP_Handler+0xa50>
  4024c6:	00ba      	lsls	r2, r7, #2
  4024c8:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4024cc:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  4024d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024d2:	931c      	str	r3, [sp, #112]	; 0x70
  4024d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4024d6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024da:	931c      	str	r3, [sp, #112]	; 0x70
  4024dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4024de:	f023 0301 	bic.w	r3, r3, #1
  4024e2:	931c      	str	r3, [sp, #112]	; 0x70
  4024e4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  4024e6:	6313      	str	r3, [r2, #48]	; 0x30
  4024e8:	2300      	movs	r3, #0
  4024ea:	931d      	str	r3, [sp, #116]	; 0x74
  4024ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4024ee:	2b13      	cmp	r3, #19
  4024f0:	d806      	bhi.n	402500 <UDP_Handler+0x600>
  4024f2:	bf00      	nop
  4024f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4024f6:	3301      	adds	r3, #1
  4024f8:	931d      	str	r3, [sp, #116]	; 0x74
  4024fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4024fc:	2b13      	cmp	r3, #19
  4024fe:	d9f8      	bls.n	4024f2 <UDP_Handler+0x5f2>
					// Enable stall
					udd_enable_stall_handshake(ep);
  402500:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402502:	931e      	str	r3, [sp, #120]	; 0x78
  402504:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402506:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40250a:	931e      	str	r3, [sp, #120]	; 0x78
  40250c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40250e:	f043 0320 	orr.w	r3, r3, #32
  402512:	931e      	str	r3, [sp, #120]	; 0x78
  402514:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402516:	6313      	str	r3, [r2, #48]	; 0x30
  402518:	2300      	movs	r3, #0
  40251a:	931f      	str	r3, [sp, #124]	; 0x7c
  40251c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40251e:	2b13      	cmp	r3, #19
  402520:	d806      	bhi.n	402530 <UDP_Handler+0x630>
  402522:	bf00      	nop
  402524:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402526:	3301      	adds	r3, #1
  402528:	931f      	str	r3, [sp, #124]	; 0x7c
  40252a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40252c:	2b13      	cmp	r3, #19
  40252e:	d9f8      	bls.n	402522 <UDP_Handler+0x622>
					// Halt executed
					ptr_job->b_stall_requested = false;
  402530:	f899 3011 	ldrb.w	r3, [r9, #17]
  402534:	f36f 1345 	bfc	r3, #5, #1
  402538:	f889 3011 	strb.w	r3, [r9, #17]
  40253c:	e208      	b.n	402950 <UDP_Handler+0xa50>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  40253e:	7c63      	ldrb	r3, [r4, #17]
  402540:	09db      	lsrs	r3, r3, #7
  402542:	d00a      	beq.n	40255a <UDP_Handler+0x65a>
				ptr_job->b_buf_end = false;
  402544:	7c63      	ldrb	r3, [r4, #17]
  402546:	f36f 13c7 	bfc	r3, #7, #1
  40254a:	7463      	strb	r3, [r4, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40254c:	68e3      	ldr	r3, [r4, #12]
  40254e:	60a3      	str	r3, [r4, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402550:	4620      	mov	r0, r4
  402552:	2100      	movs	r1, #0
  402554:	4642      	mov	r2, r8
  402556:	4b43      	ldr	r3, [pc, #268]	; (402664 <UDP_Handler+0x764>)
  402558:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  40255a:	f8d9 200c 	ldr.w	r2, [r9, #12]
  40255e:	f8d9 3008 	ldr.w	r3, [r9, #8]
  402562:	429a      	cmp	r2, r3
  402564:	d334      	bcc.n	4025d0 <UDP_Handler+0x6d0>
					!ptr_job->b_shortpacket &&
  402566:	f899 3011 	ldrb.w	r3, [r9, #17]
  40256a:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  40256e:	d12f      	bne.n	4025d0 <UDP_Handler+0x6d0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402570:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402574:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402576:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40257a:	2100      	movs	r1, #0
  40257c:	4a3a      	ldr	r2, [pc, #232]	; (402668 <UDP_Handler+0x768>)
  40257e:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  402580:	4a37      	ldr	r2, [pc, #220]	; (402660 <UDP_Handler+0x760>)
  402582:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402584:	b92b      	cbnz	r3, 402592 <UDP_Handler+0x692>
		cpu_irq_enable();
  402586:	2201      	movs	r2, #1
  402588:	4b37      	ldr	r3, [pc, #220]	; (402668 <UDP_Handler+0x768>)
  40258a:	701a      	strb	r2, [r3, #0]
  40258c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402590:	b662      	cpsie	i
  402592:	00bb      	lsls	r3, r7, #2
  402594:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402598:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  40259c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40259e:	9220      	str	r2, [sp, #128]	; 0x80
  4025a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4025a2:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4025a6:	9220      	str	r2, [sp, #128]	; 0x80
  4025a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4025aa:	f022 0201 	bic.w	r2, r2, #1
  4025ae:	9220      	str	r2, [sp, #128]	; 0x80
  4025b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4025b2:	631a      	str	r2, [r3, #48]	; 0x30
  4025b4:	2300      	movs	r3, #0
  4025b6:	9321      	str	r3, [sp, #132]	; 0x84
  4025b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4025ba:	2b13      	cmp	r3, #19
  4025bc:	f200 81c8 	bhi.w	402950 <UDP_Handler+0xa50>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4025c0:	bf00      	nop
  4025c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4025c4:	3301      	adds	r3, #1
  4025c6:	9321      	str	r3, [sp, #132]	; 0x84
  4025c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4025ca:	2b13      	cmp	r3, #19
  4025cc:	d9f8      	bls.n	4025c0 <UDP_Handler+0x6c0>
  4025ce:	e1bf      	b.n	402950 <UDP_Handler+0xa50>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  4025d0:	f1b8 0f00 	cmp.w	r8, #0
  4025d4:	f000 8082 	beq.w	4026dc <UDP_Handler+0x7dc>
  4025d8:	f1b8 0f03 	cmp.w	r8, #3
  4025dc:	d07e      	beq.n	4026dc <UDP_Handler+0x7dc>
					&& ptr_job->bank > 0) {
  4025de:	f899 3011 	ldrb.w	r3, [r9, #17]
  4025e2:	f013 0f0c 	tst.w	r3, #12
  4025e6:	d043      	beq.n	402670 <UDP_Handler+0x770>
  4025e8:	00ba      	lsls	r2, r7, #2
  4025ea:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4025ee:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  4025f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025f4:	9322      	str	r3, [sp, #136]	; 0x88
  4025f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4025f8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4025fc:	9322      	str	r3, [sp, #136]	; 0x88
  4025fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402600:	f043 0310 	orr.w	r3, r3, #16
  402604:	9322      	str	r3, [sp, #136]	; 0x88
  402606:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402608:	6313      	str	r3, [r2, #48]	; 0x30
  40260a:	2300      	movs	r3, #0
  40260c:	9323      	str	r3, [sp, #140]	; 0x8c
  40260e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402610:	2b13      	cmp	r3, #19
  402612:	d806      	bhi.n	402622 <UDP_Handler+0x722>
  402614:	bf00      	nop
  402616:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402618:	3301      	adds	r3, #1
  40261a:	9323      	str	r3, [sp, #140]	; 0x8c
  40261c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40261e:	2b13      	cmp	r3, #19
  402620:	d9f8      	bls.n	402614 <UDP_Handler+0x714>
				udd_ack_in_sent(ep);
  402622:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402624:	9324      	str	r3, [sp, #144]	; 0x90
  402626:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402628:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40262c:	9324      	str	r3, [sp, #144]	; 0x90
  40262e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402630:	f023 0301 	bic.w	r3, r3, #1
  402634:	9324      	str	r3, [sp, #144]	; 0x90
  402636:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402638:	6313      	str	r3, [r2, #48]	; 0x30
  40263a:	2300      	movs	r3, #0
  40263c:	9325      	str	r3, [sp, #148]	; 0x94
  40263e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402640:	2b13      	cmp	r3, #19
  402642:	d806      	bhi.n	402652 <UDP_Handler+0x752>
  402644:	bf00      	nop
  402646:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402648:	3301      	adds	r3, #1
  40264a:	9325      	str	r3, [sp, #148]	; 0x94
  40264c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40264e:	2b13      	cmp	r3, #19
  402650:	d9f8      	bls.n	402644 <UDP_Handler+0x744>
				udd_ep_in_sent(ep, false);
  402652:	4640      	mov	r0, r8
  402654:	2100      	movs	r1, #0
  402656:	4b05      	ldr	r3, [pc, #20]	; (40266c <UDP_Handler+0x76c>)
  402658:	4798      	blx	r3
  40265a:	e179      	b.n	402950 <UDP_Handler+0xa50>
  40265c:	00401cd5 	.word	0x00401cd5
  402660:	40034000 	.word	0x40034000
  402664:	00401c95 	.word	0x00401c95
  402668:	200000b0 	.word	0x200000b0
  40266c:	00401da1 	.word	0x00401da1
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  402670:	4640      	mov	r0, r8
  402672:	2101      	movs	r1, #1
  402674:	4b67      	ldr	r3, [pc, #412]	; (402814 <UDP_Handler+0x914>)
  402676:	4798      	blx	r3
  402678:	b970      	cbnz	r0, 402698 <UDP_Handler+0x798>
					ptr_job->b_buf_end = false;
  40267a:	f899 3011 	ldrb.w	r3, [r9, #17]
  40267e:	f36f 13c7 	bfc	r3, #7, #1
  402682:	f889 3011 	strb.w	r3, [r9, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402686:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40268a:	f8c9 3008 	str.w	r3, [r9, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  40268e:	4648      	mov	r0, r9
  402690:	2100      	movs	r1, #0
  402692:	4642      	mov	r2, r8
  402694:	4b60      	ldr	r3, [pc, #384]	; (402818 <UDP_Handler+0x918>)
  402696:	4798      	blx	r3
  402698:	00bb      	lsls	r3, r7, #2
  40269a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40269e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				}
				udd_ack_in_sent(ep);
  4026a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026a4:	9226      	str	r2, [sp, #152]	; 0x98
  4026a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4026a8:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4026ac:	9226      	str	r2, [sp, #152]	; 0x98
  4026ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4026b0:	f022 0201 	bic.w	r2, r2, #1
  4026b4:	9226      	str	r2, [sp, #152]	; 0x98
  4026b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4026b8:	631a      	str	r2, [r3, #48]	; 0x30
  4026ba:	2300      	movs	r3, #0
  4026bc:	9327      	str	r3, [sp, #156]	; 0x9c
  4026be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4026c0:	2b13      	cmp	r3, #19
  4026c2:	d806      	bhi.n	4026d2 <UDP_Handler+0x7d2>
  4026c4:	bf00      	nop
  4026c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4026c8:	3301      	adds	r3, #1
  4026ca:	9327      	str	r3, [sp, #156]	; 0x9c
  4026cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4026ce:	2b13      	cmp	r3, #19
  4026d0:	d9f8      	bls.n	4026c4 <UDP_Handler+0x7c4>
				udd_ep_in_sent(ep, false);
  4026d2:	4640      	mov	r0, r8
  4026d4:	2100      	movs	r1, #0
  4026d6:	4b4f      	ldr	r3, [pc, #316]	; (402814 <UDP_Handler+0x914>)
  4026d8:	4798      	blx	r3
  4026da:	e139      	b.n	402950 <UDP_Handler+0xa50>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  4026dc:	4640      	mov	r0, r8
  4026de:	2101      	movs	r1, #1
  4026e0:	4b4c      	ldr	r3, [pc, #304]	; (402814 <UDP_Handler+0x914>)
  4026e2:	4798      	blx	r3
  4026e4:	00bb      	lsls	r3, r7, #2
  4026e6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  4026ea:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  4026ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4026f0:	9228      	str	r2, [sp, #160]	; 0xa0
  4026f2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4026f4:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4026f8:	9228      	str	r2, [sp, #160]	; 0xa0
  4026fa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4026fc:	f022 0201 	bic.w	r2, r2, #1
  402700:	9228      	str	r2, [sp, #160]	; 0xa0
  402702:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402704:	631a      	str	r2, [r3, #48]	; 0x30
  402706:	2300      	movs	r3, #0
  402708:	9329      	str	r3, [sp, #164]	; 0xa4
  40270a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40270c:	2b13      	cmp	r3, #19
  40270e:	f200 811f 	bhi.w	402950 <UDP_Handler+0xa50>
  402712:	bf00      	nop
  402714:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402716:	3301      	adds	r3, #1
  402718:	9329      	str	r3, [sp, #164]	; 0xa4
  40271a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  40271c:	2b13      	cmp	r3, #19
  40271e:	d9f8      	bls.n	402712 <UDP_Handler+0x812>
  402720:	e116      	b.n	402950 <UDP_Handler+0xa50>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  402722:	6b09      	ldr	r1, [r1, #48]	; 0x30
  402724:	f011 0f08 	tst.w	r1, #8
  402728:	d025      	beq.n	402776 <UDP_Handler+0x876>
  40272a:	009a      	lsls	r2, r3, #2
  40272c:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402730:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
			udd_ack_stall(ep);
  402734:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402736:	932a      	str	r3, [sp, #168]	; 0xa8
  402738:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  40273a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40273e:	932a      	str	r3, [sp, #168]	; 0xa8
  402740:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  402742:	f023 0308 	bic.w	r3, r3, #8
  402746:	932a      	str	r3, [sp, #168]	; 0xa8
  402748:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  40274a:	6313      	str	r3, [r2, #48]	; 0x30
  40274c:	2300      	movs	r3, #0
  40274e:	932b      	str	r3, [sp, #172]	; 0xac
  402750:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  402752:	2b13      	cmp	r3, #19
  402754:	d806      	bhi.n	402764 <UDP_Handler+0x864>
  402756:	bf00      	nop
  402758:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  40275a:	3301      	adds	r3, #1
  40275c:	932b      	str	r3, [sp, #172]	; 0xac
  40275e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
  402760:	2b13      	cmp	r3, #19
  402762:	d9f8      	bls.n	402756 <UDP_Handler+0x856>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  402764:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40276a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40276e:	f000 80ef 	beq.w	402950 <UDP_Handler+0xa50>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  402772:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402774:	e0ec      	b.n	402950 <UDP_Handler+0xa50>
  402776:	3301      	adds	r3, #1
  402778:	3414      	adds	r4, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40277a:	2b04      	cmp	r3, #4
  40277c:	f47f ae01 	bne.w	402382 <UDP_Handler+0x482>
  402780:	e0db      	b.n	40293a <UDP_Handler+0xa3a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402782:	4b26      	ldr	r3, [pc, #152]	; (40281c <UDP_Handler+0x91c>)
  402784:	69db      	ldr	r3, [r3, #28]
  402786:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  40278a:	d113      	bne.n	4027b4 <UDP_Handler+0x8b4>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40278c:	4b23      	ldr	r3, [pc, #140]	; (40281c <UDP_Handler+0x91c>)
  40278e:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402790:	f413 7f00 	tst.w	r3, #512	; 0x200
  402794:	d004      	beq.n	4027a0 <UDP_Handler+0x8a0>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402796:	4b21      	ldr	r3, [pc, #132]	; (40281c <UDP_Handler+0x91c>)
  402798:	69db      	ldr	r3, [r3, #28]
  40279a:	f413 7f00 	tst.w	r3, #512	; 0x200
  40279e:	d109      	bne.n	4027b4 <UDP_Handler+0x8b4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4027a0:	4b1e      	ldr	r3, [pc, #120]	; (40281c <UDP_Handler+0x91c>)
  4027a2:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  4027a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4027a8:	d014      	beq.n	4027d4 <UDP_Handler+0x8d4>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  4027aa:	4b1c      	ldr	r3, [pc, #112]	; (40281c <UDP_Handler+0x91c>)
  4027ac:	69db      	ldr	r3, [r3, #28]
  4027ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4027b2:	d00f      	beq.n	4027d4 <UDP_Handler+0x8d4>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  4027b4:	4c19      	ldr	r4, [pc, #100]	; (40281c <UDP_Handler+0x91c>)
  4027b6:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  4027ba:	6223      	str	r3, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  4027bc:	6163      	str	r3, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  4027be:	2001      	movs	r0, #1
  4027c0:	4b17      	ldr	r3, [pc, #92]	; (402820 <UDP_Handler+0x920>)
  4027c2:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  4027c4:	f44f 7380 	mov.w	r3, #256	; 0x100
  4027c8:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  4027ca:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  4027cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4027d0:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  4027d2:	e0bd      	b.n	402950 <UDP_Handler+0xa50>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  4027d4:	4b11      	ldr	r3, [pc, #68]	; (40281c <UDP_Handler+0x91c>)
  4027d6:	699b      	ldr	r3, [r3, #24]
  4027d8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4027dc:	d024      	beq.n	402828 <UDP_Handler+0x928>
  4027de:	4b0f      	ldr	r3, [pc, #60]	; (40281c <UDP_Handler+0x91c>)
  4027e0:	69db      	ldr	r3, [r3, #28]
  4027e2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4027e6:	d01f      	beq.n	402828 <UDP_Handler+0x928>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  4027e8:	4b0c      	ldr	r3, [pc, #48]	; (40281c <UDP_Handler+0x91c>)
  4027ea:	f44f 7280 	mov.w	r2, #256	; 0x100
  4027ee:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  4027f0:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4027f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4027f6:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4027fc:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4027fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402802:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  402804:	2022      	movs	r0, #34	; 0x22
  402806:	4b07      	ldr	r3, [pc, #28]	; (402824 <UDP_Handler+0x924>)
  402808:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  40280a:	2000      	movs	r0, #0
  40280c:	4b04      	ldr	r3, [pc, #16]	; (402820 <UDP_Handler+0x920>)
  40280e:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  402810:	e09e      	b.n	402950 <UDP_Handler+0xa50>
  402812:	bf00      	nop
  402814:	00401da1 	.word	0x00401da1
  402818:	00401c95 	.word	0x00401c95
  40281c:	40034000 	.word	0x40034000
  402820:	00401969 	.word	0x00401969
  402824:	004018c5 	.word	0x004018c5
	}
	if (Is_udd_reset()) {
  402828:	4b4b      	ldr	r3, [pc, #300]	; (402958 <UDP_Handler+0xa58>)
  40282a:	69db      	ldr	r3, [r3, #28]
  40282c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  402830:	f000 808e 	beq.w	402950 <UDP_Handler+0xa50>
		// USB bus reset detection
		udd_ack_reset();
  402834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402838:	4b47      	ldr	r3, [pc, #284]	; (402958 <UDP_Handler+0xa58>)
  40283a:	621a      	str	r2, [r3, #32]
  40283c:	4665      	mov	r5, ip
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40283e:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  402840:	2701      	movs	r7, #1
  402842:	4e46      	ldr	r6, [pc, #280]	; (40295c <UDP_Handler+0xa5c>)
  402844:	3401      	adds	r4, #1
  402846:	b2e4      	uxtb	r4, r4
  402848:	4628      	mov	r0, r5
  40284a:	4639      	mov	r1, r7
  40284c:	4622      	mov	r2, r4
  40284e:	47b0      	blx	r6
  402850:	3514      	adds	r5, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402852:	2c03      	cmp	r4, #3
  402854:	d1f6      	bne.n	402844 <UDP_Handler+0x944>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  402856:	4b42      	ldr	r3, [pc, #264]	; (402960 <UDP_Handler+0xa60>)
  402858:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  40285a:	4b3f      	ldr	r3, [pc, #252]	; (402958 <UDP_Handler+0xa58>)
  40285c:	685a      	ldr	r2, [r3, #4]
  40285e:	f022 0201 	bic.w	r2, r2, #1
  402862:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  402864:	685a      	ldr	r2, [r3, #4]
  402866:	f022 0202 	bic.w	r2, r2, #2
  40286a:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  40286c:	689a      	ldr	r2, [r3, #8]
  40286e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402872:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  402874:	689a      	ldr	r2, [r3, #8]
  402876:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40287a:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  40287c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40287e:	922c      	str	r2, [sp, #176]	; 0xb0
  402880:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402882:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402886:	922c      	str	r2, [sp, #176]	; 0xb0
  402888:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40288a:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  40288e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402892:	922c      	str	r2, [sp, #176]	; 0xb0
  402894:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40289a:	922c      	str	r2, [sp, #176]	; 0xb0
  40289c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  40289e:	631a      	str	r2, [r3, #48]	; 0x30
  4028a0:	2300      	movs	r3, #0
  4028a2:	932d      	str	r3, [sp, #180]	; 0xb4
  4028a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4028a6:	2b13      	cmp	r3, #19
  4028a8:	d806      	bhi.n	4028b8 <UDP_Handler+0x9b8>
  4028aa:	bf00      	nop
  4028ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4028ae:	3301      	adds	r3, #1
  4028b0:	932d      	str	r3, [sp, #180]	; 0xb4
  4028b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4028b4:	2b13      	cmp	r3, #19
  4028b6:	d9f8      	bls.n	4028aa <UDP_Handler+0x9aa>
	udd_enable_endpoint(0);
  4028b8:	4b27      	ldr	r3, [pc, #156]	; (402958 <UDP_Handler+0xa58>)
  4028ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4028bc:	922e      	str	r2, [sp, #184]	; 0xb8
  4028be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  4028c0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  4028c4:	922e      	str	r2, [sp, #184]	; 0xb8
  4028c6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  4028c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4028cc:	922e      	str	r2, [sp, #184]	; 0xb8
  4028ce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
  4028d0:	631a      	str	r2, [r3, #48]	; 0x30
  4028d2:	2300      	movs	r3, #0
  4028d4:	932f      	str	r3, [sp, #188]	; 0xbc
  4028d6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4028d8:	2b13      	cmp	r3, #19
  4028da:	d806      	bhi.n	4028ea <UDP_Handler+0x9ea>
  4028dc:	bf00      	nop
  4028de:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4028e0:	3301      	adds	r3, #1
  4028e2:	932f      	str	r3, [sp, #188]	; 0xbc
  4028e4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  4028e6:	2b13      	cmp	r3, #19
  4028e8:	d9f8      	bls.n	4028dc <UDP_Handler+0x9dc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4028ea:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4028ee:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4028f0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4028f4:	2100      	movs	r1, #0
  4028f6:	4a1b      	ldr	r2, [pc, #108]	; (402964 <UDP_Handler+0xa64>)
  4028f8:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  4028fa:	2101      	movs	r1, #1
  4028fc:	4a16      	ldr	r2, [pc, #88]	; (402958 <UDP_Handler+0xa58>)
  4028fe:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402900:	b923      	cbnz	r3, 40290c <UDP_Handler+0xa0c>
		cpu_irq_enable();
  402902:	4b18      	ldr	r3, [pc, #96]	; (402964 <UDP_Handler+0xa64>)
  402904:	7019      	strb	r1, [r3, #0]
  402906:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  40290a:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  40290c:	4b16      	ldr	r3, [pc, #88]	; (402968 <UDP_Handler+0xa68>)
  40290e:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  402910:	4b11      	ldr	r3, [pc, #68]	; (402958 <UDP_Handler+0xa58>)
  402912:	f44f 7280 	mov.w	r2, #256	; 0x100
  402916:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  402918:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40291c:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  40291e:	e017      	b.n	402950 <UDP_Handler+0xa50>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  402920:	4433      	add	r3, r6
  402922:	f8c9 300c 	str.w	r3, [r9, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  402926:	4631      	mov	r1, r6
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  402928:	2700      	movs	r7, #0
  40292a:	e000      	b.n	40292e <UDP_Handler+0xa2e>

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
  40292c:	2701      	movs	r7, #1
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  40292e:	2300      	movs	r3, #0
  402930:	e562      	b.n	4023f8 <UDP_Handler+0x4f8>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402932:	4640      	mov	r0, r8
  402934:	4b0d      	ldr	r3, [pc, #52]	; (40296c <UDP_Handler+0xa6c>)
  402936:	4798      	blx	r3
  402938:	e567      	b.n	40240a <UDP_Handler+0x50a>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40293a:	4b07      	ldr	r3, [pc, #28]	; (402958 <UDP_Handler+0xa58>)
  40293c:	699b      	ldr	r3, [r3, #24]
  40293e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402942:	f47f af1e 	bne.w	402782 <UDP_Handler+0x882>
  402946:	e721      	b.n	40278c <UDP_Handler+0x88c>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402948:	4640      	mov	r0, r8
  40294a:	4b08      	ldr	r3, [pc, #32]	; (40296c <UDP_Handler+0xa6c>)
  40294c:	4798      	blx	r3
  40294e:	e55f      	b.n	402410 <UDP_Handler+0x510>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  402950:	b030      	add	sp, #192	; 0xc0
  402952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402956:	bf00      	nop
  402958:	40034000 	.word	0x40034000
  40295c:	00401c95 	.word	0x00401c95
  402960:	004010c1 	.word	0x004010c1
  402964:	200000b0 	.word	0x200000b0
  402968:	004019dd 	.word	0x004019dd
  40296c:	00401cd5 	.word	0x00401cd5

00402970 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  402970:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402972:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402976:	b672      	cpsid	i
  402978:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40297c:	2200      	movs	r2, #0
  40297e:	4b14      	ldr	r3, [pc, #80]	; (4029d0 <udd_attach+0x60>)
  402980:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  402982:	2001      	movs	r0, #1
  402984:	4b13      	ldr	r3, [pc, #76]	; (4029d4 <udd_attach+0x64>)
  402986:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  402988:	2022      	movs	r0, #34	; 0x22
  40298a:	4b13      	ldr	r3, [pc, #76]	; (4029d8 <udd_attach+0x68>)
  40298c:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  40298e:	4b13      	ldr	r3, [pc, #76]	; (4029dc <udd_attach+0x6c>)
  402990:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402996:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  402998:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40299a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  40299e:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  4029a0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4029a4:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  4029a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4029aa:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  4029ac:	f44f 7200 	mov.w	r2, #512	; 0x200
  4029b0:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  4029b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4029b6:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  4029b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4029bc:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4029be:	b92c      	cbnz	r4, 4029cc <udd_attach+0x5c>
		cpu_irq_enable();
  4029c0:	2201      	movs	r2, #1
  4029c2:	4b03      	ldr	r3, [pc, #12]	; (4029d0 <udd_attach+0x60>)
  4029c4:	701a      	strb	r2, [r3, #0]
  4029c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  4029ca:	b662      	cpsie	i
  4029cc:	bd10      	pop	{r4, pc}
  4029ce:	bf00      	nop
  4029d0:	200000b0 	.word	0x200000b0
  4029d4:	00401969 	.word	0x00401969
  4029d8:	0040186d 	.word	0x0040186d
  4029dc:	40034000 	.word	0x40034000

004029e0 <udd_enable>:
#endif
}


void udd_enable(void)
{
  4029e0:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4029e2:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  4029e6:	b672      	cpsid	i
  4029e8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4029ec:	2500      	movs	r5, #0
  4029ee:	4b21      	ldr	r3, [pc, #132]	; (402a74 <udd_enable+0x94>)
  4029f0:	701d      	strb	r5, [r3, #0]
	irqflags_t flags;

	flags = cpu_irq_save();

	// Enable USB hardware
	udd_enable_periph_ck();
  4029f2:	2022      	movs	r0, #34	; 0x22
  4029f4:	4b20      	ldr	r3, [pc, #128]	; (402a78 <udd_enable+0x98>)
  4029f6:	4798      	blx	r3
	sysclk_enable_usb();
  4029f8:	4b20      	ldr	r3, [pc, #128]	; (402a7c <udd_enable+0x9c>)
  4029fa:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  4029fc:	4b20      	ldr	r3, [pc, #128]	; (402a80 <udd_enable+0xa0>)
  4029fe:	2250      	movs	r2, #80	; 0x50
  402a00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  402a04:	2204      	movs	r2, #4
  402a06:	605a      	str	r2, [r3, #4]
  402a08:	462b      	mov	r3, r5

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].bank = 0;
  402a0a:	481e      	ldr	r0, [pc, #120]	; (402a84 <udd_enable+0xa4>)
  402a0c:	0099      	lsls	r1, r3, #2
  402a0e:	18ca      	adds	r2, r1, r3
  402a10:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402a14:	7c52      	ldrb	r2, [r2, #17]
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
  402a16:	4419      	add	r1, r3
  402a18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  402a1c:	f002 0283 	and.w	r2, r2, #131	; 0x83
  402a20:	f36f 12c7 	bfc	r2, #7, #1
  402a24:	744a      	strb	r2, [r1, #17]
  402a26:	3301      	adds	r3, #1
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402a28:	2b03      	cmp	r3, #3
  402a2a:	d1ef      	bne.n	402a0c <udd_enable+0x2c>
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  402a2c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402a30:	4b15      	ldr	r3, [pc, #84]	; (402a88 <udd_enable+0xa8>)
  402a32:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  402a34:	2300      	movs	r3, #0
  402a36:	4a15      	ldr	r2, [pc, #84]	; (402a8c <udd_enable+0xac>)
  402a38:	7013      	strb	r3, [r2, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402a3a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402a3e:	b672      	cpsid	i
  402a40:	f3bf 8f5f 	dmb	sy
  402a44:	490b      	ldr	r1, [pc, #44]	; (402a74 <udd_enable+0x94>)
  402a46:	700b      	strb	r3, [r1, #0]
  402a48:	4b11      	ldr	r3, [pc, #68]	; (402a90 <udd_enable+0xb0>)
  402a4a:	78d9      	ldrb	r1, [r3, #3]
  402a4c:	3101      	adds	r1, #1
  402a4e:	70d9      	strb	r1, [r3, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402a50:	b92a      	cbnz	r2, 402a5e <udd_enable+0x7e>
		cpu_irq_enable();
  402a52:	2201      	movs	r2, #1
  402a54:	4b07      	ldr	r3, [pc, #28]	; (402a74 <udd_enable+0x94>)
  402a56:	701a      	strb	r2, [r3, #0]
  402a58:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402a5c:	b662      	cpsie	i
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  402a5e:	4b0d      	ldr	r3, [pc, #52]	; (402a94 <udd_enable+0xb4>)
  402a60:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402a62:	b92c      	cbnz	r4, 402a70 <udd_enable+0x90>
		cpu_irq_enable();
  402a64:	2201      	movs	r2, #1
  402a66:	4b03      	ldr	r3, [pc, #12]	; (402a74 <udd_enable+0x94>)
  402a68:	701a      	strb	r2, [r3, #0]
  402a6a:	f3bf 8f5f 	dmb	sy
  402a6e:	b662      	cpsie	i
  402a70:	bd38      	pop	{r3, r4, r5, pc}
  402a72:	bf00      	nop
  402a74:	200000b0 	.word	0x200000b0
  402a78:	0040186d 	.word	0x0040186d
  402a7c:	0040072d 	.word	0x0040072d
  402a80:	e000e100 	.word	0xe000e100
  402a84:	20000b40 	.word	0x20000b40
  402a88:	0040193d 	.word	0x0040193d
  402a8c:	20000b7c 	.word	0x20000b7c
  402a90:	20000be4 	.word	0x20000be4
  402a94:	00402971 	.word	0x00402971

00402a98 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
	return false;
}
  402a98:	2000      	movs	r0, #0
  402a9a:	4770      	bx	lr

00402a9c <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  402a9c:	4b0c      	ldr	r3, [pc, #48]	; (402ad0 <udd_set_address+0x34>)
  402a9e:	685a      	ldr	r2, [r3, #4]
  402aa0:	f022 0201 	bic.w	r2, r2, #1
  402aa4:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402aa6:	689a      	ldr	r2, [r3, #8]
  402aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402aac:	609a      	str	r2, [r3, #8]
	if (address) {
  402aae:	b170      	cbz	r0, 402ace <udd_set_address+0x32>
		udd_configure_address(address);
  402ab0:	6899      	ldr	r1, [r3, #8]
  402ab2:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  402ab6:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
  402aba:	430a      	orrs	r2, r1
  402abc:	609a      	str	r2, [r3, #8]
		udd_enable_address();
  402abe:	689a      	ldr	r2, [r3, #8]
  402ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402ac4:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402ac6:	685a      	ldr	r2, [r3, #4]
  402ac8:	f042 0201 	orr.w	r2, r2, #1
  402acc:	605a      	str	r2, [r3, #4]
  402ace:	4770      	bx	lr
  402ad0:	40034000 	.word	0x40034000

00402ad4 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  402ad4:	4b05      	ldr	r3, [pc, #20]	; (402aec <udd_getaddress+0x18>)
  402ad6:	685b      	ldr	r3, [r3, #4]
  402ad8:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402adc:	bf1d      	ittte	ne
  402ade:	4b03      	ldrne	r3, [pc, #12]	; (402aec <udd_getaddress+0x18>)
  402ae0:	6898      	ldrne	r0, [r3, #8]
  402ae2:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  402ae6:	2000      	moveq	r0, #0
}
  402ae8:	4770      	bx	lr
  402aea:	bf00      	nop
  402aec:	40034000 	.word	0x40034000

00402af0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
  402af0:	4b02      	ldr	r3, [pc, #8]	; (402afc <udd_get_frame_number+0xc>)
  402af2:	6818      	ldr	r0, [r3, #0]
}
  402af4:	f3c0 000a 	ubfx	r0, r0, #0, #11
  402af8:	4770      	bx	lr
  402afa:	bf00      	nop
  402afc:	40034000 	.word	0x40034000

00402b00 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
  402b00:	2000      	movs	r0, #0
  402b02:	4770      	bx	lr

00402b04 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  402b04:	4b01      	ldr	r3, [pc, #4]	; (402b0c <udd_set_setup_payload+0x8>)
  402b06:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402b08:	8199      	strh	r1, [r3, #12]
  402b0a:	4770      	bx	lr
  402b0c:	20000bf0 	.word	0x20000bf0

00402b10 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402b10:	b470      	push	{r4, r5, r6}
  402b12:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  402b14:	f000 030f 	and.w	r3, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  402b18:	2b03      	cmp	r3, #3
  402b1a:	d866      	bhi.n	402bea <udd_ep_alloc+0xda>
  402b1c:	009c      	lsls	r4, r3, #2
  402b1e:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  402b22:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  402b26:	6b25      	ldr	r5, [r4, #48]	; 0x30
  402b28:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  402b2c:	d15f      	bne.n	402bee <udd_ep_alloc+0xde>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  402b2e:	f001 0503 	and.w	r5, r1, #3
  402b32:	2d01      	cmp	r5, #1
  402b34:	d103      	bne.n	402b3e <udd_ep_alloc+0x2e>
  402b36:	2b00      	cmp	r3, #0
  402b38:	d05b      	beq.n	402bf2 <udd_ep_alloc+0xe2>
  402b3a:	2b03      	cmp	r3, #3
  402b3c:	d05b      	beq.n	402bf6 <udd_ep_alloc+0xe6>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  402b3e:	1f1d      	subs	r5, r3, #4
  402b40:	b2ed      	uxtb	r5, r5
  402b42:	2d01      	cmp	r5, #1
  402b44:	bf8c      	ite	hi
  402b46:	2540      	movhi	r5, #64	; 0x40
  402b48:	f44f 7500 	movls.w	r5, #512	; 0x200
  402b4c:	4295      	cmp	r5, r2
  402b4e:	db54      	blt.n	402bfa <udd_ep_alloc+0xea>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  402b50:	1e5d      	subs	r5, r3, #1
  402b52:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  402b56:	4e2d      	ldr	r6, [pc, #180]	; (402c0c <udd_ep_alloc+0xfc>)
  402b58:	eb06 0585 	add.w	r5, r6, r5, lsl #2

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  402b5c:	8a2e      	ldrh	r6, [r5, #16]
  402b5e:	f362 0609 	bfi	r6, r2, #0, #10
  402b62:	822e      	strh	r6, [r5, #16]
	ptr_job->b_buf_end = false;
  402b64:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  402b66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  402b6a:	f36f 1245 	bfc	r2, #5, #1
  402b6e:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  402b70:	09c0      	lsrs	r0, r0, #7
  402b72:	d003      	beq.n	402b7c <udd_ep_alloc+0x6c>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  402b74:	b2d2      	uxtb	r2, r2
  402b76:	f36f 0283 	bfc	r2, #2, #2
  402b7a:	746a      	strb	r2, [r5, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  402b7c:	4a24      	ldr	r2, [pc, #144]	; (402c10 <udd_ep_alloc+0x100>)
  402b7e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402b80:	2601      	movs	r6, #1
  402b82:	fa06 f303 	lsl.w	r3, r6, r3
  402b86:	431d      	orrs	r5, r3
  402b88:	6295      	str	r5, [r2, #40]	; 0x28
  402b8a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  402b8c:	ea25 0303 	bic.w	r3, r5, r3
  402b90:	6293      	str	r3, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  402b92:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402b94:	9300      	str	r3, [sp, #0]
  402b96:	9b00      	ldr	r3, [sp, #0]
  402b98:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402b9c:	9300      	str	r3, [sp, #0]
  402b9e:	9b00      	ldr	r3, [sp, #0]
  402ba0:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  402ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  402ba8:	9300      	str	r3, [sp, #0]
  402baa:	b138      	cbz	r0, 402bbc <udd_ep_alloc+0xac>
  402bac:	f041 0204 	orr.w	r2, r1, #4
  402bb0:	0212      	lsls	r2, r2, #8
  402bb2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  402bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402bba:	e004      	b.n	402bc6 <udd_ep_alloc+0xb6>
  402bbc:	020a      	lsls	r2, r1, #8
  402bbe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  402bc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402bc6:	9b00      	ldr	r3, [sp, #0]
  402bc8:	4313      	orrs	r3, r2
  402bca:	9300      	str	r3, [sp, #0]
  402bcc:	9b00      	ldr	r3, [sp, #0]
  402bce:	6323      	str	r3, [r4, #48]	; 0x30
  402bd0:	2300      	movs	r3, #0
  402bd2:	9301      	str	r3, [sp, #4]
  402bd4:	9b01      	ldr	r3, [sp, #4]
  402bd6:	2b13      	cmp	r3, #19
  402bd8:	d811      	bhi.n	402bfe <udd_ep_alloc+0xee>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402bda:	bf00      	nop
  402bdc:	9b01      	ldr	r3, [sp, #4]
  402bde:	3301      	adds	r3, #1
  402be0:	9301      	str	r3, [sp, #4]
  402be2:	9b01      	ldr	r3, [sp, #4]
  402be4:	2b13      	cmp	r3, #19
  402be6:	d9f8      	bls.n	402bda <udd_ep_alloc+0xca>
  402be8:	e00b      	b.n	402c02 <udd_ep_alloc+0xf2>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  402bea:	2000      	movs	r0, #0
  402bec:	e00a      	b.n	402c04 <udd_ep_alloc+0xf4>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  402bee:	2000      	movs	r0, #0
  402bf0:	e008      	b.n	402c04 <udd_ep_alloc+0xf4>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  402bf2:	2000      	movs	r0, #0
  402bf4:	e006      	b.n	402c04 <udd_ep_alloc+0xf4>
  402bf6:	2000      	movs	r0, #0
  402bf8:	e004      	b.n	402c04 <udd_ep_alloc+0xf4>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  402bfa:	2000      	movs	r0, #0
  402bfc:	e002      	b.n	402c04 <udd_ep_alloc+0xf4>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  402bfe:	2001      	movs	r0, #1
  402c00:	e000      	b.n	402c04 <udd_ep_alloc+0xf4>
  402c02:	2001      	movs	r0, #1
}
  402c04:	b003      	add	sp, #12
  402c06:	bc70      	pop	{r4, r5, r6}
  402c08:	4770      	bx	lr
  402c0a:	bf00      	nop
  402c0c:	20000b40 	.word	0x20000b40
  402c10:	40034000 	.word	0x40034000

00402c14 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  402c14:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402c16:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  402c1a:	2a03      	cmp	r2, #3
  402c1c:	d811      	bhi.n	402c42 <udd_ep_free+0x2e>
  402c1e:	0093      	lsls	r3, r2, #2
  402c20:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402c24:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		return;
	}
	udd_disable_endpoint(ep_index);
  402c28:	6b19      	ldr	r1, [r3, #48]	; 0x30
  402c2a:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  402c2e:	6319      	str	r1, [r3, #48]	; 0x30
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  402c30:	1e50      	subs	r0, r2, #1
  402c32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c36:	4b03      	ldr	r3, [pc, #12]	; (402c44 <udd_ep_free+0x30>)
  402c38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c3c:	2101      	movs	r1, #1
  402c3e:	4b02      	ldr	r3, [pc, #8]	; (402c48 <udd_ep_free+0x34>)
  402c40:	4798      	blx	r3
  402c42:	bd08      	pop	{r3, pc}
  402c44:	20000b40 	.word	0x20000b40
  402c48:	00401c95 	.word	0x00401c95

00402c4c <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402c4c:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  402c50:	2803      	cmp	r0, #3
  402c52:	d815      	bhi.n	402c80 <udd_ep_is_halted+0x34>


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402c54:	1e43      	subs	r3, r0, #1
  402c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402c5a:	4a0a      	ldr	r2, [pc, #40]	; (402c84 <udd_ep_is_halted+0x38>)
  402c5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402c60:	7c5b      	ldrb	r3, [r3, #17]
  402c62:	f013 0f20 	tst.w	r3, #32
  402c66:	d109      	bne.n	402c7c <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  402c68:	300c      	adds	r0, #12
  402c6a:	4b07      	ldr	r3, [pc, #28]	; (402c88 <udd_ep_is_halted+0x3c>)
  402c6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  402c70:	f013 0f28 	tst.w	r3, #40	; 0x28
  402c74:	bf0c      	ite	eq
  402c76:	2000      	moveq	r0, #0
  402c78:	2001      	movne	r0, #1
  402c7a:	4770      	bx	lr
  402c7c:	2001      	movs	r0, #1
  402c7e:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402c80:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  402c82:	4770      	bx	lr
  402c84:	20000b40 	.word	0x20000b40
  402c88:	40034000 	.word	0x40034000

00402c8c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  402c8c:	b410      	push	{r4}
  402c8e:	b083      	sub	sp, #12
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  402c90:	f000 020f 	and.w	r2, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  402c94:	2a03      	cmp	r2, #3
  402c96:	d85d      	bhi.n	402d54 <udd_ep_set_halt+0xc8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402c98:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402c9c:	f1d1 0101 	rsbs	r1, r1, #1
  402ca0:	bf38      	it	cc
  402ca2:	2100      	movcc	r1, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402ca4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402ca6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402caa:	2400      	movs	r4, #0
  402cac:	4b2e      	ldr	r3, [pc, #184]	; (402d68 <udd_ep_set_halt+0xdc>)
  402cae:	701c      	strb	r4, [r3, #0]
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402cb0:	f010 0f80 	tst.w	r0, #128	; 0x80
  402cb4:	d024      	beq.n	402d00 <udd_ep_set_halt+0x74>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  402cb6:	1e53      	subs	r3, r2, #1
  402cb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402cbc:	482b      	ldr	r0, [pc, #172]	; (402d6c <udd_ep_set_halt+0xe0>)
  402cbe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  402cc2:	f102 040c 	add.w	r4, r2, #12
  402cc6:	482a      	ldr	r0, [pc, #168]	; (402d70 <udd_ep_set_halt+0xe4>)
  402cc8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  402ccc:	f010 0f10 	tst.w	r0, #16
  402cd0:	d104      	bne.n	402cdc <udd_ep_set_halt+0x50>
				|| ptr_job->bank > 1)) {
  402cd2:	7c58      	ldrb	r0, [r3, #17]
  402cd4:	f3c0 0081 	ubfx	r0, r0, #2, #2
  402cd8:	2801      	cmp	r0, #1
  402cda:	dd11      	ble.n	402d00 <udd_ep_set_halt+0x74>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  402cdc:	7c58      	ldrb	r0, [r3, #17]
  402cde:	f040 0020 	orr.w	r0, r0, #32
  402ce2:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  402ce4:	2301      	movs	r3, #1
  402ce6:	fa03 f202 	lsl.w	r2, r3, r2
  402cea:	4b21      	ldr	r3, [pc, #132]	; (402d70 <udd_ep_set_halt+0xe4>)
  402cec:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402cee:	2900      	cmp	r1, #0
  402cf0:	d032      	beq.n	402d58 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
  402cf2:	2001      	movs	r0, #1
  402cf4:	4b1c      	ldr	r3, [pc, #112]	; (402d68 <udd_ep_set_halt+0xdc>)
  402cf6:	7018      	strb	r0, [r3, #0]
  402cf8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402cfc:	b662      	cpsie	i
  402cfe:	e02e      	b.n	402d5e <udd_ep_set_halt+0xd2>
  402d00:	0093      	lsls	r3, r2, #2
  402d02:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402d06:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		cpu_irq_restore(flags);
		return true;
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  402d0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
  402d0c:	9000      	str	r0, [sp, #0]
  402d0e:	9800      	ldr	r0, [sp, #0]
  402d10:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  402d14:	9000      	str	r0, [sp, #0]
  402d16:	9800      	ldr	r0, [sp, #0]
  402d18:	f040 0020 	orr.w	r0, r0, #32
  402d1c:	9000      	str	r0, [sp, #0]
  402d1e:	9800      	ldr	r0, [sp, #0]
  402d20:	6318      	str	r0, [r3, #48]	; 0x30
  402d22:	2300      	movs	r3, #0
  402d24:	9301      	str	r3, [sp, #4]
  402d26:	9b01      	ldr	r3, [sp, #4]
  402d28:	2b13      	cmp	r3, #19
  402d2a:	d806      	bhi.n	402d3a <udd_ep_set_halt+0xae>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402d2c:	bf00      	nop
  402d2e:	9b01      	ldr	r3, [sp, #4]
  402d30:	3301      	adds	r3, #1
  402d32:	9301      	str	r3, [sp, #4]
  402d34:	9b01      	ldr	r3, [sp, #4]
  402d36:	2b13      	cmp	r3, #19
  402d38:	d9f8      	bls.n	402d2c <udd_ep_set_halt+0xa0>
		udd_enable_endpoint_interrupt(ep_index);
  402d3a:	2301      	movs	r3, #1
  402d3c:	fa03 f202 	lsl.w	r2, r3, r2
  402d40:	4b0b      	ldr	r3, [pc, #44]	; (402d70 <udd_ep_set_halt+0xe4>)
  402d42:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402d44:	b151      	cbz	r1, 402d5c <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  402d46:	2001      	movs	r0, #1
  402d48:	4b07      	ldr	r3, [pc, #28]	; (402d68 <udd_ep_set_halt+0xdc>)
  402d4a:	7018      	strb	r0, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402d4c:	f3bf 8f5f 	dmb	sy
  402d50:	b662      	cpsie	i
  402d52:	e004      	b.n	402d5e <udd_ep_set_halt+0xd2>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  402d54:	2000      	movs	r0, #0
  402d56:	e002      	b.n	402d5e <udd_ep_set_halt+0xd2>
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  402d58:	2001      	movs	r0, #1
  402d5a:	e000      	b.n	402d5e <udd_ep_set_halt+0xd2>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  402d5c:	2001      	movs	r0, #1
}
  402d5e:	b003      	add	sp, #12
  402d60:	f85d 4b04 	ldr.w	r4, [sp], #4
  402d64:	4770      	bx	lr
  402d66:	bf00      	nop
  402d68:	200000b0 	.word	0x200000b0
  402d6c:	20000b40 	.word	0x20000b40
  402d70:	40034000 	.word	0x40034000

00402d74 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  402d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d76:	b085      	sub	sp, #20
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  402d78:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402d7c:	2803      	cmp	r0, #3
  402d7e:	d859      	bhi.n	402e34 <udd_ep_clear_halt+0xc0>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  402d80:	4c30      	ldr	r4, [pc, #192]	; (402e44 <udd_ep_clear_halt+0xd0>)
  402d82:	1e43      	subs	r3, r0, #1
  402d84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402d88:	009d      	lsls	r5, r3, #2
  402d8a:	1961      	adds	r1, r4, r5

	ptr_job->b_stall_requested = false;
  402d8c:	7c4b      	ldrb	r3, [r1, #17]
  402d8e:	f36f 1345 	bfc	r3, #5, #1
  402d92:	744b      	strb	r3, [r1, #17]
  402d94:	0082      	lsls	r2, r0, #2
  402d96:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402d9a:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  402d9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402da0:	f013 0f20 	tst.w	r3, #32
  402da4:	d048      	beq.n	402e38 <udd_ep_clear_halt+0xc4>
		// Remove stall
		udd_disable_stall_handshake(ep);
  402da6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402da8:	9300      	str	r3, [sp, #0]
  402daa:	9b00      	ldr	r3, [sp, #0]
  402dac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402db0:	9300      	str	r3, [sp, #0]
  402db2:	9b00      	ldr	r3, [sp, #0]
  402db4:	f023 0320 	bic.w	r3, r3, #32
  402db8:	9300      	str	r3, [sp, #0]
  402dba:	9b00      	ldr	r3, [sp, #0]
  402dbc:	6313      	str	r3, [r2, #48]	; 0x30
  402dbe:	2300      	movs	r3, #0
  402dc0:	9301      	str	r3, [sp, #4]
  402dc2:	9b01      	ldr	r3, [sp, #4]
  402dc4:	2b13      	cmp	r3, #19
  402dc6:	d806      	bhi.n	402dd6 <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402dc8:	bf00      	nop
  402dca:	9b01      	ldr	r3, [sp, #4]
  402dcc:	3301      	adds	r3, #1
  402dce:	9301      	str	r3, [sp, #4]
  402dd0:	9b01      	ldr	r3, [sp, #4]
  402dd2:	2b13      	cmp	r3, #19
  402dd4:	d9f8      	bls.n	402dc8 <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  402dd6:	4b1c      	ldr	r3, [pc, #112]	; (402e48 <udd_ep_clear_halt+0xd4>)
  402dd8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  402dda:	2701      	movs	r7, #1
  402ddc:	fa07 f000 	lsl.w	r0, r7, r0
  402de0:	4306      	orrs	r6, r0
  402de2:	629e      	str	r6, [r3, #40]	; 0x28
  402de4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  402de6:	ea26 0000 	bic.w	r0, r6, r0
  402dea:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  402dec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402dee:	9302      	str	r3, [sp, #8]
  402df0:	9b02      	ldr	r3, [sp, #8]
  402df2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402df6:	9302      	str	r3, [sp, #8]
  402df8:	9b02      	ldr	r3, [sp, #8]
  402dfa:	f023 0308 	bic.w	r3, r3, #8
  402dfe:	9302      	str	r3, [sp, #8]
  402e00:	9b02      	ldr	r3, [sp, #8]
  402e02:	6313      	str	r3, [r2, #48]	; 0x30
  402e04:	2300      	movs	r3, #0
  402e06:	9303      	str	r3, [sp, #12]
  402e08:	9b03      	ldr	r3, [sp, #12]
  402e0a:	2b13      	cmp	r3, #19
  402e0c:	d806      	bhi.n	402e1c <udd_ep_clear_halt+0xa8>
  402e0e:	bf00      	nop
  402e10:	9b03      	ldr	r3, [sp, #12]
  402e12:	3301      	adds	r3, #1
  402e14:	9303      	str	r3, [sp, #12]
  402e16:	9b03      	ldr	r3, [sp, #12]
  402e18:	2b13      	cmp	r3, #19
  402e1a:	d9f8      	bls.n	402e0e <udd_ep_clear_halt+0x9a>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  402e1c:	7c4b      	ldrb	r3, [r1, #17]
  402e1e:	f013 0f10 	tst.w	r3, #16
  402e22:	d00b      	beq.n	402e3c <udd_ep_clear_halt+0xc8>
			ptr_job->busy = false;
  402e24:	7c4b      	ldrb	r3, [r1, #17]
  402e26:	f36f 1304 	bfc	r3, #4, #1
  402e2a:	744b      	strb	r3, [r1, #17]
			ptr_job->call_nohalt();
  402e2c:	5963      	ldr	r3, [r4, r5]
  402e2e:	4798      	blx	r3
		}
	}
	return true;
  402e30:	2001      	movs	r0, #1
  402e32:	e004      	b.n	402e3e <udd_ep_clear_halt+0xca>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  402e34:	2000      	movs	r0, #0
  402e36:	e002      	b.n	402e3e <udd_ep_clear_halt+0xca>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  402e38:	2001      	movs	r0, #1
  402e3a:	e000      	b.n	402e3e <udd_ep_clear_halt+0xca>
  402e3c:	2001      	movs	r0, #1
}
  402e3e:	b005      	add	sp, #20
  402e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402e42:	bf00      	nop
  402e44:	20000b40 	.word	0x20000b40
  402e48:	40034000 	.word	0x40034000

00402e4c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  402e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  402e50:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  402e54:	2c03      	cmp	r4, #3
  402e56:	f200 8088 	bhi.w	402f6a <udd_ep_run+0x11e>
  402e5a:	00a5      	lsls	r5, r4, #2
  402e5c:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402e60:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  402e64:	6b2e      	ldr	r6, [r5, #48]	; 0x30
  402e66:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  402e6a:	f000 8081 	beq.w	402f70 <udd_ep_run+0x124>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  402e6e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 402f9c <udd_ep_run+0x150>
  402e72:	1e66      	subs	r6, r4, #1
  402e74:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402e78:	00b7      	lsls	r7, r6, #2
  402e7a:	eb0c 0607 	add.w	r6, ip, r7

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  402e7e:	f896 8011 	ldrb.w	r8, [r6, #17]
  402e82:	f018 0f20 	tst.w	r8, #32
  402e86:	d176      	bne.n	402f76 <udd_ep_run+0x12a>
			|| Is_udd_endpoint_stall_requested(ep)) {
  402e88:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
  402e8c:	f018 0f20 	tst.w	r8, #32
  402e90:	d174      	bne.n	402f7c <udd_ep_run+0x130>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402e92:	f3ef 8810 	mrs	r8, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  402e96:	f1d8 0a01 	rsbs	sl, r8, #1
  402e9a:	bf38      	it	cc
  402e9c:	f04f 0a00 	movcc.w	sl, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402ea0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402ea2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402ea6:	f04f 0900 	mov.w	r9, #0
  402eaa:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 402f90 <udd_ep_run+0x144>
  402eae:	f888 9000 	strb.w	r9, [r8]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  402eb2:	f896 8011 	ldrb.w	r8, [r6, #17]
  402eb6:	f018 0f10 	tst.w	r8, #16
  402eba:	d00b      	beq.n	402ed4 <udd_ep_run+0x88>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402ebc:	f1ba 0f00 	cmp.w	sl, #0
  402ec0:	d05f      	beq.n	402f82 <udd_ep_run+0x136>
		cpu_irq_enable();
  402ec2:	2201      	movs	r2, #1
  402ec4:	4b32      	ldr	r3, [pc, #200]	; (402f90 <udd_ep_run+0x144>)
  402ec6:	701a      	strb	r2, [r3, #0]
  402ec8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402ecc:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  402ece:	4648      	mov	r0, r9
  402ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}
	ptr_job->busy = true;
  402ed4:	f896 8011 	ldrb.w	r8, [r6, #17]
  402ed8:	f048 0810 	orr.w	r8, r8, #16
  402edc:	f886 8011 	strb.w	r8, [r6, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402ee0:	f1ba 0f00 	cmp.w	sl, #0
  402ee4:	d008      	beq.n	402ef8 <udd_ep_run+0xac>
		cpu_irq_enable();
  402ee6:	f04f 0901 	mov.w	r9, #1
  402eea:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 402f90 <udd_ep_run+0x144>
  402eee:	f888 9000 	strb.w	r9, [r8]
  402ef2:	f3bf 8f5f 	dmb	sy
  402ef6:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  402ef8:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
  402efa:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
  402efc:	2200      	movs	r2, #0
  402efe:	60f2      	str	r2, [r6, #12]
	ptr_job->call_trans = callback;
  402f00:	9a08      	ldr	r2, [sp, #32]
  402f02:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  402f06:	b921      	cbnz	r1, 402f12 <udd_ep_run+0xc6>
  402f08:	f1d3 0201 	rsbs	r2, r3, #1
  402f0c:	bf38      	it	cc
  402f0e:	2200      	movcc	r2, #0
  402f10:	e000      	b.n	402f14 <udd_ep_run+0xc8>
  402f12:	2201      	movs	r2, #1
  402f14:	7c73      	ldrb	r3, [r6, #17]
  402f16:	f362 1386 	bfi	r3, r2, #6, #1
	ptr_job->b_buf_end = false;
  402f1a:	f36f 13c7 	bfc	r3, #7, #1
  402f1e:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402f20:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402f24:	b672      	cpsid	i
  402f26:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402f2a:	2200      	movs	r2, #0
  402f2c:	4b18      	ldr	r3, [pc, #96]	; (402f90 <udd_ep_run+0x144>)
  402f2e:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  402f30:	2201      	movs	r2, #1
  402f32:	40a2      	lsls	r2, r4
  402f34:	4b17      	ldr	r3, [pc, #92]	; (402f94 <udd_ep_run+0x148>)
  402f36:	611a      	str	r2, [r3, #16]
	// Request first transfer
	if (b_dir_in) {
  402f38:	f010 0f80 	tst.w	r0, #128	; 0x80
  402f3c:	d00c      	beq.n	402f58 <udd_ep_run+0x10c>
		if (Is_udd_in_pending(ep)) {
  402f3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402f40:	f013 0f11 	tst.w	r3, #17
  402f44:	d108      	bne.n	402f58 <udd_ep_run+0x10c>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  402f46:	4620      	mov	r0, r4
  402f48:	2101      	movs	r1, #1
  402f4a:	4b13      	ldr	r3, [pc, #76]	; (402f98 <udd_ep_run+0x14c>)
  402f4c:	4798      	blx	r3
  402f4e:	b118      	cbz	r0, 402f58 <udd_ep_run+0x10c>
				// Over one bank
				udd_ep_in_sent(ep, false);
  402f50:	4620      	mov	r0, r4
  402f52:	2100      	movs	r1, #0
  402f54:	4b10      	ldr	r3, [pc, #64]	; (402f98 <udd_ep_run+0x14c>)
  402f56:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f58:	b9b6      	cbnz	r6, 402f88 <udd_ep_run+0x13c>
		cpu_irq_enable();
  402f5a:	2001      	movs	r0, #1
  402f5c:	4b0c      	ldr	r3, [pc, #48]	; (402f90 <udd_ep_run+0x144>)
  402f5e:	7018      	strb	r0, [r3, #0]
  402f60:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402f64:	b662      	cpsie	i
  402f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  402f6a:	2000      	movs	r0, #0
  402f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  402f70:	2000      	movs	r0, #0
  402f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f76:	2000      	movs	r0, #0
  402f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f7c:	2000      	movs	r0, #0
  402f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  402f82:	2000      	movs	r0, #0
  402f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  402f88:	2001      	movs	r0, #1
}
  402f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402f8e:	bf00      	nop
  402f90:	200000b0 	.word	0x200000b0
  402f94:	40034000 	.word	0x40034000
  402f98:	00401da1 	.word	0x00401da1
  402f9c:	20000b40 	.word	0x20000b40

00402fa0 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  402fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  402fa2:	b085      	sub	sp, #20
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  402fa4:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  402fa8:	2c03      	cmp	r4, #3
  402faa:	f200 8090 	bhi.w	4030ce <udd_ep_abort+0x12e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402fae:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
  402fb2:	b672      	cpsid	i
  402fb4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402fb8:	2100      	movs	r1, #0
  402fba:	4a46      	ldr	r2, [pc, #280]	; (4030d4 <udd_ep_abort+0x134>)
  402fbc:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  402fbe:	2601      	movs	r6, #1
  402fc0:	40a6      	lsls	r6, r4
  402fc2:	4a45      	ldr	r2, [pc, #276]	; (4030d8 <udd_ep_abort+0x138>)
  402fc4:	6156      	str	r6, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402fc6:	b92b      	cbnz	r3, 402fd4 <udd_ep_abort+0x34>
		cpu_irq_enable();
  402fc8:	2201      	movs	r2, #1
  402fca:	4b42      	ldr	r3, [pc, #264]	; (4030d4 <udd_ep_abort+0x134>)
  402fcc:	701a      	strb	r2, [r3, #0]
  402fce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
  402fd2:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  402fd4:	f010 0f80 	tst.w	r0, #128	; 0x80
  402fd8:	d109      	bne.n	402fee <udd_ep_abort+0x4e>
  402fda:	00a5      	lsls	r5, r4, #2
  402fdc:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  402fe0:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  402fe4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  402fe6:	f013 0f42 	tst.w	r3, #66	; 0x42
  402fea:	d157      	bne.n	40309c <udd_ep_abort+0xfc>
  402fec:	e05d      	b.n	4030aa <udd_ep_abort+0x10a>
  402fee:	00a3      	lsls	r3, r4, #2
  402ff0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402ff4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  402ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402ffa:	f012 0f10 	tst.w	r2, #16
  402ffe:	d02a      	beq.n	403056 <udd_ep_abort+0xb6>
			udd_kill_data_in_fifo(ep,
  403000:	b18c      	cbz	r4, 403026 <udd_ep_abort+0x86>
  403002:	2c03      	cmp	r4, #3
  403004:	d00f      	beq.n	403026 <udd_ep_abort+0x86>
  403006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403008:	f022 0210 	bic.w	r2, r2, #16
  40300c:	631a      	str	r2, [r3, #48]	; 0x30
  40300e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403010:	f012 0f10 	tst.w	r2, #16
  403014:	d1fb      	bne.n	40300e <udd_ep_abort+0x6e>
  403016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403018:	f042 0210 	orr.w	r2, r2, #16
  40301c:	631a      	str	r2, [r3, #48]	; 0x30
  40301e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403020:	f012 0f10 	tst.w	r2, #16
  403024:	d0fb      	beq.n	40301e <udd_ep_abort+0x7e>
  403026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403028:	9200      	str	r2, [sp, #0]
  40302a:	9a00      	ldr	r2, [sp, #0]
  40302c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403030:	9200      	str	r2, [sp, #0]
  403032:	9a00      	ldr	r2, [sp, #0]
  403034:	f022 0210 	bic.w	r2, r2, #16
  403038:	9200      	str	r2, [sp, #0]
  40303a:	9a00      	ldr	r2, [sp, #0]
  40303c:	631a      	str	r2, [r3, #48]	; 0x30
  40303e:	2200      	movs	r2, #0
  403040:	9201      	str	r2, [sp, #4]
  403042:	9a01      	ldr	r2, [sp, #4]
  403044:	2a13      	cmp	r2, #19
  403046:	d806      	bhi.n	403056 <udd_ep_abort+0xb6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403048:	bf00      	nop
  40304a:	9a01      	ldr	r2, [sp, #4]
  40304c:	3201      	adds	r2, #1
  40304e:	9201      	str	r2, [sp, #4]
  403050:	9a01      	ldr	r2, [sp, #4]
  403052:	2a13      	cmp	r2, #19
  403054:	d9f8      	bls.n	403048 <udd_ep_abort+0xa8>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  403056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403058:	9202      	str	r2, [sp, #8]
  40305a:	9a02      	ldr	r2, [sp, #8]
  40305c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  403060:	9202      	str	r2, [sp, #8]
  403062:	9a02      	ldr	r2, [sp, #8]
  403064:	f022 0201 	bic.w	r2, r2, #1
  403068:	9202      	str	r2, [sp, #8]
  40306a:	9a02      	ldr	r2, [sp, #8]
  40306c:	631a      	str	r2, [r3, #48]	; 0x30
  40306e:	2300      	movs	r3, #0
  403070:	9303      	str	r3, [sp, #12]
  403072:	9b03      	ldr	r3, [sp, #12]
  403074:	2b13      	cmp	r3, #19
  403076:	d806      	bhi.n	403086 <udd_ep_abort+0xe6>
  403078:	bf00      	nop
  40307a:	9b03      	ldr	r3, [sp, #12]
  40307c:	3301      	adds	r3, #1
  40307e:	9303      	str	r3, [sp, #12]
  403080:	9b03      	ldr	r3, [sp, #12]
  403082:	2b13      	cmp	r3, #19
  403084:	d9f8      	bls.n	403078 <udd_ep_abort+0xd8>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  403086:	1e63      	subs	r3, r4, #1
  403088:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40308c:	4a13      	ldr	r2, [pc, #76]	; (4030dc <udd_ep_abort+0x13c>)
  40308e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403092:	7c5a      	ldrb	r2, [r3, #17]
  403094:	f36f 0283 	bfc	r2, #2, #2
  403098:	745a      	strb	r2, [r3, #17]
  40309a:	e006      	b.n	4030aa <udd_ep_abort+0x10a>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  40309c:	4f10      	ldr	r7, [pc, #64]	; (4030e0 <udd_ep_abort+0x140>)
  40309e:	4620      	mov	r0, r4
  4030a0:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  4030a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4030a4:	f013 0f42 	tst.w	r3, #66	; 0x42
  4030a8:	d1f9      	bne.n	40309e <udd_ep_abort+0xfe>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  4030aa:	4b0b      	ldr	r3, [pc, #44]	; (4030d8 <udd_ep_abort+0x138>)
  4030ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4030ae:	4332      	orrs	r2, r6
  4030b0:	629a      	str	r2, [r3, #40]	; 0x28
  4030b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4030b4:	ea22 0606 	bic.w	r6, r2, r6
  4030b8:	629e      	str	r6, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4030ba:	1e60      	subs	r0, r4, #1
  4030bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4030c0:	4b06      	ldr	r3, [pc, #24]	; (4030dc <udd_ep_abort+0x13c>)
  4030c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4030c6:	2101      	movs	r1, #1
  4030c8:	4622      	mov	r2, r4
  4030ca:	4b06      	ldr	r3, [pc, #24]	; (4030e4 <udd_ep_abort+0x144>)
  4030cc:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  4030ce:	b005      	add	sp, #20
  4030d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4030d2:	bf00      	nop
  4030d4:	200000b0 	.word	0x200000b0
  4030d8:	40034000 	.word	0x40034000
  4030dc:	20000b40 	.word	0x20000b40
  4030e0:	00401cd5 	.word	0x00401cd5
  4030e4:	00401c95 	.word	0x00401c95

004030e8 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  4030e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4030ec:	6043      	str	r3, [r0, #4]
  4030ee:	4770      	bx	lr

004030f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4030f0:	e7fe      	b.n	4030f0 <Dummy_Handler>
  4030f2:	bf00      	nop

004030f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4030f4:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4030f6:	4b1e      	ldr	r3, [pc, #120]	; (403170 <Reset_Handler+0x7c>)
  4030f8:	4a1e      	ldr	r2, [pc, #120]	; (403174 <Reset_Handler+0x80>)
  4030fa:	429a      	cmp	r2, r3
  4030fc:	d003      	beq.n	403106 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  4030fe:	4b1e      	ldr	r3, [pc, #120]	; (403178 <Reset_Handler+0x84>)
  403100:	4a1b      	ldr	r2, [pc, #108]	; (403170 <Reset_Handler+0x7c>)
  403102:	429a      	cmp	r2, r3
  403104:	d304      	bcc.n	403110 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403106:	4b1d      	ldr	r3, [pc, #116]	; (40317c <Reset_Handler+0x88>)
  403108:	4a1d      	ldr	r2, [pc, #116]	; (403180 <Reset_Handler+0x8c>)
  40310a:	429a      	cmp	r2, r3
  40310c:	d30f      	bcc.n	40312e <Reset_Handler+0x3a>
  40310e:	e01a      	b.n	403146 <Reset_Handler+0x52>
  403110:	4b1c      	ldr	r3, [pc, #112]	; (403184 <Reset_Handler+0x90>)
  403112:	4c1d      	ldr	r4, [pc, #116]	; (403188 <Reset_Handler+0x94>)
  403114:	1ae4      	subs	r4, r4, r3
  403116:	f024 0403 	bic.w	r4, r4, #3
  40311a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  40311c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  40311e:	4814      	ldr	r0, [pc, #80]	; (403170 <Reset_Handler+0x7c>)
  403120:	4914      	ldr	r1, [pc, #80]	; (403174 <Reset_Handler+0x80>)
  403122:	585a      	ldr	r2, [r3, r1]
  403124:	501a      	str	r2, [r3, r0]
  403126:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  403128:	42a3      	cmp	r3, r4
  40312a:	d1fa      	bne.n	403122 <Reset_Handler+0x2e>
  40312c:	e7eb      	b.n	403106 <Reset_Handler+0x12>
  40312e:	4b17      	ldr	r3, [pc, #92]	; (40318c <Reset_Handler+0x98>)
  403130:	4917      	ldr	r1, [pc, #92]	; (403190 <Reset_Handler+0x9c>)
  403132:	1ac9      	subs	r1, r1, r3
  403134:	f021 0103 	bic.w	r1, r1, #3
  403138:	1d1a      	adds	r2, r3, #4
  40313a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  40313c:	2200      	movs	r2, #0
  40313e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403142:	428b      	cmp	r3, r1
  403144:	d1fb      	bne.n	40313e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  403146:	4a13      	ldr	r2, [pc, #76]	; (403194 <Reset_Handler+0xa0>)
  403148:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
  40314c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403150:	4911      	ldr	r1, [pc, #68]	; (403198 <Reset_Handler+0xa4>)
  403152:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM_ADDR) && ((uint32_t) pSrc < IRAM_ADDR + IRAM_SIZE)) {
  403154:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
  403158:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
  40315c:	d203      	bcs.n	403166 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
  40315e:	688a      	ldr	r2, [r1, #8]
  403160:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  403164:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
  403166:	4b0d      	ldr	r3, [pc, #52]	; (40319c <Reset_Handler+0xa8>)
  403168:	4798      	blx	r3

	/* Branch to main function */
	main();
  40316a:	4b0d      	ldr	r3, [pc, #52]	; (4031a0 <Reset_Handler+0xac>)
  40316c:	4798      	blx	r3
  40316e:	e7fe      	b.n	40316e <Reset_Handler+0x7a>
  403170:	20000000 	.word	0x20000000
  403174:	004083b8 	.word	0x004083b8
  403178:	20000930 	.word	0x20000930
  40317c:	20000c0c 	.word	0x20000c0c
  403180:	20000930 	.word	0x20000930
  403184:	20000004 	.word	0x20000004
  403188:	20000933 	.word	0x20000933
  40318c:	2000092c 	.word	0x2000092c
  403190:	20000c07 	.word	0x20000c07
  403194:	00400000 	.word	0x00400000
  403198:	e000ed00 	.word	0xe000ed00
  40319c:	0040336d 	.word	0x0040336d
  4031a0:	00403331 	.word	0x00403331

004031a4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4031a4:	4b3d      	ldr	r3, [pc, #244]	; (40329c <SystemCoreClockUpdate+0xf8>)
  4031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031a8:	f003 0303 	and.w	r3, r3, #3
  4031ac:	2b03      	cmp	r3, #3
  4031ae:	d85d      	bhi.n	40326c <SystemCoreClockUpdate+0xc8>
  4031b0:	e8df f003 	tbb	[pc, r3]
  4031b4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4031b8:	4b39      	ldr	r3, [pc, #228]	; (4032a0 <SystemCoreClockUpdate+0xfc>)
  4031ba:	695b      	ldr	r3, [r3, #20]
  4031bc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4031c0:	bf14      	ite	ne
  4031c2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4031c6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4031ca:	4b36      	ldr	r3, [pc, #216]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  4031cc:	601a      	str	r2, [r3, #0]
  4031ce:	e04d      	b.n	40326c <SystemCoreClockUpdate+0xc8>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4031d0:	4b32      	ldr	r3, [pc, #200]	; (40329c <SystemCoreClockUpdate+0xf8>)
  4031d2:	6a1b      	ldr	r3, [r3, #32]
  4031d4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4031d8:	d003      	beq.n	4031e2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4031da:	4a33      	ldr	r2, [pc, #204]	; (4032a8 <SystemCoreClockUpdate+0x104>)
  4031dc:	4b31      	ldr	r3, [pc, #196]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  4031de:	601a      	str	r2, [r3, #0]
  4031e0:	e044      	b.n	40326c <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4031e2:	4a32      	ldr	r2, [pc, #200]	; (4032ac <SystemCoreClockUpdate+0x108>)
  4031e4:	4b2f      	ldr	r3, [pc, #188]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  4031e6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4031e8:	4b2c      	ldr	r3, [pc, #176]	; (40329c <SystemCoreClockUpdate+0xf8>)
  4031ea:	6a1b      	ldr	r3, [r3, #32]
  4031ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4031f0:	2b10      	cmp	r3, #16
  4031f2:	d002      	beq.n	4031fa <SystemCoreClockUpdate+0x56>
  4031f4:	2b20      	cmp	r3, #32
  4031f6:	d004      	beq.n	403202 <SystemCoreClockUpdate+0x5e>
  4031f8:	e038      	b.n	40326c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4031fa:	4a2d      	ldr	r2, [pc, #180]	; (4032b0 <SystemCoreClockUpdate+0x10c>)
  4031fc:	4b29      	ldr	r3, [pc, #164]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  4031fe:	601a      	str	r2, [r3, #0]
				break;
  403200:	e034      	b.n	40326c <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  403202:	4a29      	ldr	r2, [pc, #164]	; (4032a8 <SystemCoreClockUpdate+0x104>)
  403204:	4b27      	ldr	r3, [pc, #156]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  403206:	601a      	str	r2, [r3, #0]
				break;
  403208:	e030      	b.n	40326c <SystemCoreClockUpdate+0xc8>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40320a:	4b24      	ldr	r3, [pc, #144]	; (40329c <SystemCoreClockUpdate+0xf8>)
  40320c:	6a1b      	ldr	r3, [r3, #32]
  40320e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403212:	d003      	beq.n	40321c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403214:	4a24      	ldr	r2, [pc, #144]	; (4032a8 <SystemCoreClockUpdate+0x104>)
  403216:	4b23      	ldr	r3, [pc, #140]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  403218:	601a      	str	r2, [r3, #0]
  40321a:	e012      	b.n	403242 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40321c:	4a23      	ldr	r2, [pc, #140]	; (4032ac <SystemCoreClockUpdate+0x108>)
  40321e:	4b21      	ldr	r3, [pc, #132]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  403220:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  403222:	4b1e      	ldr	r3, [pc, #120]	; (40329c <SystemCoreClockUpdate+0xf8>)
  403224:	6a1b      	ldr	r3, [r3, #32]
  403226:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40322a:	2b10      	cmp	r3, #16
  40322c:	d002      	beq.n	403234 <SystemCoreClockUpdate+0x90>
  40322e:	2b20      	cmp	r3, #32
  403230:	d004      	beq.n	40323c <SystemCoreClockUpdate+0x98>
  403232:	e006      	b.n	403242 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  403234:	4a1e      	ldr	r2, [pc, #120]	; (4032b0 <SystemCoreClockUpdate+0x10c>)
  403236:	4b1b      	ldr	r3, [pc, #108]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  403238:	601a      	str	r2, [r3, #0]
				break;
  40323a:	e002      	b.n	403242 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  40323c:	4a1a      	ldr	r2, [pc, #104]	; (4032a8 <SystemCoreClockUpdate+0x104>)
  40323e:	4b19      	ldr	r3, [pc, #100]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  403240:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
  403242:	4b16      	ldr	r3, [pc, #88]	; (40329c <SystemCoreClockUpdate+0xf8>)
  403244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403246:	f003 0303 	and.w	r3, r3, #3
  40324a:	2b02      	cmp	r3, #2
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
  40324c:	4b13      	ldr	r3, [pc, #76]	; (40329c <SystemCoreClockUpdate+0xf8>)
  40324e:	bf07      	ittee	eq
  403250:	6a98      	ldreq	r0, [r3, #40]	; 0x28
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
  403252:	6a99      	ldreq	r1, [r3, #40]	; 0x28
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  403254:	6ad8      	ldrne	r0, [r3, #44]	; 0x2c
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  403256:	6ad9      	ldrne	r1, [r3, #44]	; 0x2c
  403258:	4b12      	ldr	r3, [pc, #72]	; (4032a4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                          CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                          CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk) >> 
  40325a:	f3c0 400a 	ubfx	r0, r0, #16, #11
  40325e:	681a      	ldr	r2, [r3, #0]
  403260:	fb00 2202 	mla	r2, r0, r2, r2
				                           CKGR_PLLBR_MULB_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk) >> 
  403264:	b2c9      	uxtb	r1, r1
  403266:	fbb2 f2f1 	udiv	r2, r2, r1
  40326a:	601a      	str	r2, [r3, #0]
		break;
	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40326c:	4b0b      	ldr	r3, [pc, #44]	; (40329c <SystemCoreClockUpdate+0xf8>)
  40326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403270:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403274:	2b70      	cmp	r3, #112	; 0x70
  403276:	d107      	bne.n	403288 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  403278:	4b0a      	ldr	r3, [pc, #40]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  40327a:	681a      	ldr	r2, [r3, #0]
  40327c:	490d      	ldr	r1, [pc, #52]	; (4032b4 <SystemCoreClockUpdate+0x110>)
  40327e:	fba1 0202 	umull	r0, r2, r1, r2
  403282:	0852      	lsrs	r2, r2, #1
  403284:	601a      	str	r2, [r3, #0]
  403286:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403288:	4b04      	ldr	r3, [pc, #16]	; (40329c <SystemCoreClockUpdate+0xf8>)
  40328a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40328c:	4b05      	ldr	r3, [pc, #20]	; (4032a4 <SystemCoreClockUpdate+0x100>)
  40328e:	f3c1 1102 	ubfx	r1, r1, #4, #3
  403292:	681a      	ldr	r2, [r3, #0]
  403294:	40ca      	lsrs	r2, r1
  403296:	601a      	str	r2, [r3, #0]
  403298:	4770      	bx	lr
  40329a:	bf00      	nop
  40329c:	400e0400 	.word	0x400e0400
  4032a0:	400e1410 	.word	0x400e1410
  4032a4:	200000b4 	.word	0x200000b4
  4032a8:	00b71b00 	.word	0x00b71b00
  4032ac:	003d0900 	.word	0x003d0900
  4032b0:	007a1200 	.word	0x007a1200
  4032b4:	aaaaaaab 	.word	0xaaaaaaab

004032b8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  4032b8:	4b0c      	ldr	r3, [pc, #48]	; (4032ec <system_init_flash+0x34>)
  4032ba:	4298      	cmp	r0, r3
  4032bc:	d803      	bhi.n	4032c6 <system_init_flash+0xe>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0);
  4032be:	2200      	movs	r2, #0
  4032c0:	4b0b      	ldr	r3, [pc, #44]	; (4032f0 <system_init_flash+0x38>)
  4032c2:	601a      	str	r2, [r3, #0]
  4032c4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
  4032c6:	4b0b      	ldr	r3, [pc, #44]	; (4032f4 <system_init_flash+0x3c>)
  4032c8:	4298      	cmp	r0, r3
  4032ca:	d804      	bhi.n	4032d6 <system_init_flash+0x1e>
		EFC->EEFC_FMR = EEFC_FMR_FWS(1);
  4032cc:	f44f 7280 	mov.w	r2, #256	; 0x100
  4032d0:	4b07      	ldr	r3, [pc, #28]	; (4032f0 <system_init_flash+0x38>)
  4032d2:	601a      	str	r2, [r3, #0]
  4032d4:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
  4032d6:	4b08      	ldr	r3, [pc, #32]	; (4032f8 <system_init_flash+0x40>)
  4032d8:	4298      	cmp	r0, r3
		EFC->EEFC_FMR = EEFC_FMR_FWS(2);
  4032da:	bf94      	ite	ls
  4032dc:	f44f 7200 	movls.w	r2, #512	; 0x200
	} else {
		EFC->EEFC_FMR = EEFC_FMR_FWS(3);
  4032e0:	f44f 7240 	movhi.w	r2, #768	; 0x300
  4032e4:	4b02      	ldr	r3, [pc, #8]	; (4032f0 <system_init_flash+0x38>)
  4032e6:	601a      	str	r2, [r3, #0]
  4032e8:	4770      	bx	lr
  4032ea:	bf00      	nop
  4032ec:	0103663f 	.word	0x0103663f
  4032f0:	400e0a00 	.word	0x400e0a00
  4032f4:	01c9c37f 	.word	0x01c9c37f
  4032f8:	0337f97f 	.word	0x0337f97f

004032fc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4032fc:	4b09      	ldr	r3, [pc, #36]	; (403324 <_sbrk+0x28>)
  4032fe:	681b      	ldr	r3, [r3, #0]
  403300:	b913      	cbnz	r3, 403308 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  403302:	4a09      	ldr	r2, [pc, #36]	; (403328 <_sbrk+0x2c>)
  403304:	4b07      	ldr	r3, [pc, #28]	; (403324 <_sbrk+0x28>)
  403306:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403308:	4b06      	ldr	r3, [pc, #24]	; (403324 <_sbrk+0x28>)
  40330a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40330c:	181a      	adds	r2, r3, r0
  40330e:	4907      	ldr	r1, [pc, #28]	; (40332c <_sbrk+0x30>)
  403310:	4291      	cmp	r1, r2
  403312:	db04      	blt.n	40331e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403314:	4610      	mov	r0, r2
  403316:	4a03      	ldr	r2, [pc, #12]	; (403324 <_sbrk+0x28>)
  403318:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  40331a:	4618      	mov	r0, r3
  40331c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  40331e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  403322:	4770      	bx	lr
  403324:	20000b84 	.word	0x20000b84
  403328:	20002c10 	.word	0x20002c10
  40332c:	2000bffc 	.word	0x2000bffc

00403330 <main>:


uint16_t angle;

int main (void)
{
  403330:	b508      	push	{r3, lr}
	// Insert system clock initialization code here (sysclk_init()).
	

	board_init();
  403332:	4b07      	ldr	r3, [pc, #28]	; (403350 <main+0x20>)
  403334:	4798      	blx	r3
	sysclk_init();
  403336:	4b07      	ldr	r3, [pc, #28]	; (403354 <main+0x24>)
  403338:	4798      	blx	r3
	/*
	ADC_init();
	timer_init();
	pio_set_output(PIOA, PIO_PA17, LOW, DISABLE, DISABLE);
	*/
	udc_start();
  40333a:	4b07      	ldr	r3, [pc, #28]	; (403358 <main+0x28>)
  40333c:	4798      	blx	r3
	
	
	while(1)
	{
		parse_comands();
  40333e:	4e07      	ldr	r6, [pc, #28]	; (40335c <main+0x2c>)
		delay_ms(10);
  403340:	f24b 2593 	movw	r5, #45715	; 0xb293
  403344:	4c06      	ldr	r4, [pc, #24]	; (403360 <main+0x30>)
	udc_start();
	
	
	while(1)
	{
		parse_comands();
  403346:	47b0      	blx	r6
		delay_ms(10);
  403348:	4628      	mov	r0, r5
  40334a:	47a0      	blx	r4
  40334c:	e7fb      	b.n	403346 <main+0x16>
  40334e:	bf00      	nop
  403350:	004006d9 	.word	0x004006d9
  403354:	0040077d 	.word	0x0040077d
  403358:	004010b5 	.word	0x004010b5
  40335c:	004002a5 	.word	0x004002a5
  403360:	20000001 	.word	0x20000001

00403364 <atoi>:
  403364:	2100      	movs	r1, #0
  403366:	220a      	movs	r2, #10
  403368:	f000 b9f0 	b.w	40374c <strtol>

0040336c <__libc_init_array>:
  40336c:	b570      	push	{r4, r5, r6, lr}
  40336e:	4e0f      	ldr	r6, [pc, #60]	; (4033ac <__libc_init_array+0x40>)
  403370:	4d0f      	ldr	r5, [pc, #60]	; (4033b0 <__libc_init_array+0x44>)
  403372:	1b76      	subs	r6, r6, r5
  403374:	10b6      	asrs	r6, r6, #2
  403376:	d007      	beq.n	403388 <__libc_init_array+0x1c>
  403378:	3d04      	subs	r5, #4
  40337a:	2400      	movs	r4, #0
  40337c:	3401      	adds	r4, #1
  40337e:	f855 3f04 	ldr.w	r3, [r5, #4]!
  403382:	4798      	blx	r3
  403384:	42a6      	cmp	r6, r4
  403386:	d1f9      	bne.n	40337c <__libc_init_array+0x10>
  403388:	4e0a      	ldr	r6, [pc, #40]	; (4033b4 <__libc_init_array+0x48>)
  40338a:	4d0b      	ldr	r5, [pc, #44]	; (4033b8 <__libc_init_array+0x4c>)
  40338c:	f004 fffe 	bl	40838c <_init>
  403390:	1b76      	subs	r6, r6, r5
  403392:	10b6      	asrs	r6, r6, #2
  403394:	d008      	beq.n	4033a8 <__libc_init_array+0x3c>
  403396:	3d04      	subs	r5, #4
  403398:	2400      	movs	r4, #0
  40339a:	3401      	adds	r4, #1
  40339c:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4033a0:	4798      	blx	r3
  4033a2:	42a6      	cmp	r6, r4
  4033a4:	d1f9      	bne.n	40339a <__libc_init_array+0x2e>
  4033a6:	bd70      	pop	{r4, r5, r6, pc}
  4033a8:	bd70      	pop	{r4, r5, r6, pc}
  4033aa:	bf00      	nop
  4033ac:	00408398 	.word	0x00408398
  4033b0:	00408398 	.word	0x00408398
  4033b4:	004083a0 	.word	0x004083a0
  4033b8:	00408398 	.word	0x00408398

004033bc <memcpy>:
  4033bc:	4684      	mov	ip, r0
  4033be:	ea41 0300 	orr.w	r3, r1, r0
  4033c2:	f013 0303 	ands.w	r3, r3, #3
  4033c6:	d149      	bne.n	40345c <memcpy+0xa0>
  4033c8:	3a40      	subs	r2, #64	; 0x40
  4033ca:	d323      	bcc.n	403414 <memcpy+0x58>
  4033cc:	680b      	ldr	r3, [r1, #0]
  4033ce:	6003      	str	r3, [r0, #0]
  4033d0:	684b      	ldr	r3, [r1, #4]
  4033d2:	6043      	str	r3, [r0, #4]
  4033d4:	688b      	ldr	r3, [r1, #8]
  4033d6:	6083      	str	r3, [r0, #8]
  4033d8:	68cb      	ldr	r3, [r1, #12]
  4033da:	60c3      	str	r3, [r0, #12]
  4033dc:	690b      	ldr	r3, [r1, #16]
  4033de:	6103      	str	r3, [r0, #16]
  4033e0:	694b      	ldr	r3, [r1, #20]
  4033e2:	6143      	str	r3, [r0, #20]
  4033e4:	698b      	ldr	r3, [r1, #24]
  4033e6:	6183      	str	r3, [r0, #24]
  4033e8:	69cb      	ldr	r3, [r1, #28]
  4033ea:	61c3      	str	r3, [r0, #28]
  4033ec:	6a0b      	ldr	r3, [r1, #32]
  4033ee:	6203      	str	r3, [r0, #32]
  4033f0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  4033f2:	6243      	str	r3, [r0, #36]	; 0x24
  4033f4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  4033f6:	6283      	str	r3, [r0, #40]	; 0x28
  4033f8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  4033fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  4033fc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4033fe:	6303      	str	r3, [r0, #48]	; 0x30
  403400:	6b4b      	ldr	r3, [r1, #52]	; 0x34
  403402:	6343      	str	r3, [r0, #52]	; 0x34
  403404:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  403406:	6383      	str	r3, [r0, #56]	; 0x38
  403408:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  40340a:	63c3      	str	r3, [r0, #60]	; 0x3c
  40340c:	3040      	adds	r0, #64	; 0x40
  40340e:	3140      	adds	r1, #64	; 0x40
  403410:	3a40      	subs	r2, #64	; 0x40
  403412:	d2db      	bcs.n	4033cc <memcpy+0x10>
  403414:	3230      	adds	r2, #48	; 0x30
  403416:	d30b      	bcc.n	403430 <memcpy+0x74>
  403418:	680b      	ldr	r3, [r1, #0]
  40341a:	6003      	str	r3, [r0, #0]
  40341c:	684b      	ldr	r3, [r1, #4]
  40341e:	6043      	str	r3, [r0, #4]
  403420:	688b      	ldr	r3, [r1, #8]
  403422:	6083      	str	r3, [r0, #8]
  403424:	68cb      	ldr	r3, [r1, #12]
  403426:	60c3      	str	r3, [r0, #12]
  403428:	3010      	adds	r0, #16
  40342a:	3110      	adds	r1, #16
  40342c:	3a10      	subs	r2, #16
  40342e:	d2f3      	bcs.n	403418 <memcpy+0x5c>
  403430:	320c      	adds	r2, #12
  403432:	d305      	bcc.n	403440 <memcpy+0x84>
  403434:	f851 3b04 	ldr.w	r3, [r1], #4
  403438:	f840 3b04 	str.w	r3, [r0], #4
  40343c:	3a04      	subs	r2, #4
  40343e:	d2f9      	bcs.n	403434 <memcpy+0x78>
  403440:	3204      	adds	r2, #4
  403442:	d008      	beq.n	403456 <memcpy+0x9a>
  403444:	07d2      	lsls	r2, r2, #31
  403446:	bf1c      	itt	ne
  403448:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40344c:	f800 3b01 	strbne.w	r3, [r0], #1
  403450:	d301      	bcc.n	403456 <memcpy+0x9a>
  403452:	880b      	ldrh	r3, [r1, #0]
  403454:	8003      	strh	r3, [r0, #0]
  403456:	4660      	mov	r0, ip
  403458:	4770      	bx	lr
  40345a:	bf00      	nop
  40345c:	2a08      	cmp	r2, #8
  40345e:	d313      	bcc.n	403488 <memcpy+0xcc>
  403460:	078b      	lsls	r3, r1, #30
  403462:	d0b1      	beq.n	4033c8 <memcpy+0xc>
  403464:	f010 0303 	ands.w	r3, r0, #3
  403468:	d0ae      	beq.n	4033c8 <memcpy+0xc>
  40346a:	f1c3 0304 	rsb	r3, r3, #4
  40346e:	1ad2      	subs	r2, r2, r3
  403470:	07db      	lsls	r3, r3, #31
  403472:	bf1c      	itt	ne
  403474:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403478:	f800 3b01 	strbne.w	r3, [r0], #1
  40347c:	d3a4      	bcc.n	4033c8 <memcpy+0xc>
  40347e:	f831 3b02 	ldrh.w	r3, [r1], #2
  403482:	f820 3b02 	strh.w	r3, [r0], #2
  403486:	e79f      	b.n	4033c8 <memcpy+0xc>
  403488:	3a04      	subs	r2, #4
  40348a:	d3d9      	bcc.n	403440 <memcpy+0x84>
  40348c:	3a01      	subs	r2, #1
  40348e:	f811 3b01 	ldrb.w	r3, [r1], #1
  403492:	f800 3b01 	strb.w	r3, [r0], #1
  403496:	d2f9      	bcs.n	40348c <memcpy+0xd0>
  403498:	780b      	ldrb	r3, [r1, #0]
  40349a:	7003      	strb	r3, [r0, #0]
  40349c:	784b      	ldrb	r3, [r1, #1]
  40349e:	7043      	strb	r3, [r0, #1]
  4034a0:	788b      	ldrb	r3, [r1, #2]
  4034a2:	7083      	strb	r3, [r0, #2]
  4034a4:	4660      	mov	r0, ip
  4034a6:	4770      	bx	lr

004034a8 <memset>:
  4034a8:	b4f0      	push	{r4, r5, r6, r7}
  4034aa:	0784      	lsls	r4, r0, #30
  4034ac:	d043      	beq.n	403536 <memset+0x8e>
  4034ae:	1e54      	subs	r4, r2, #1
  4034b0:	2a00      	cmp	r2, #0
  4034b2:	d03e      	beq.n	403532 <memset+0x8a>
  4034b4:	b2cd      	uxtb	r5, r1
  4034b6:	4603      	mov	r3, r0
  4034b8:	e003      	b.n	4034c2 <memset+0x1a>
  4034ba:	1e62      	subs	r2, r4, #1
  4034bc:	2c00      	cmp	r4, #0
  4034be:	d038      	beq.n	403532 <memset+0x8a>
  4034c0:	4614      	mov	r4, r2
  4034c2:	f803 5b01 	strb.w	r5, [r3], #1
  4034c6:	079a      	lsls	r2, r3, #30
  4034c8:	d1f7      	bne.n	4034ba <memset+0x12>
  4034ca:	2c03      	cmp	r4, #3
  4034cc:	d92a      	bls.n	403524 <memset+0x7c>
  4034ce:	b2cd      	uxtb	r5, r1
  4034d0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4034d4:	2c0f      	cmp	r4, #15
  4034d6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4034da:	d915      	bls.n	403508 <memset+0x60>
  4034dc:	f1a4 0710 	sub.w	r7, r4, #16
  4034e0:	093f      	lsrs	r7, r7, #4
  4034e2:	f103 0610 	add.w	r6, r3, #16
  4034e6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
  4034ea:	461a      	mov	r2, r3
  4034ec:	6015      	str	r5, [r2, #0]
  4034ee:	6055      	str	r5, [r2, #4]
  4034f0:	6095      	str	r5, [r2, #8]
  4034f2:	60d5      	str	r5, [r2, #12]
  4034f4:	3210      	adds	r2, #16
  4034f6:	42b2      	cmp	r2, r6
  4034f8:	d1f8      	bne.n	4034ec <memset+0x44>
  4034fa:	f004 040f 	and.w	r4, r4, #15
  4034fe:	3701      	adds	r7, #1
  403500:	2c03      	cmp	r4, #3
  403502:	eb03 1307 	add.w	r3, r3, r7, lsl #4
  403506:	d90d      	bls.n	403524 <memset+0x7c>
  403508:	461e      	mov	r6, r3
  40350a:	4622      	mov	r2, r4
  40350c:	3a04      	subs	r2, #4
  40350e:	2a03      	cmp	r2, #3
  403510:	f846 5b04 	str.w	r5, [r6], #4
  403514:	d8fa      	bhi.n	40350c <memset+0x64>
  403516:	1f22      	subs	r2, r4, #4
  403518:	f022 0203 	bic.w	r2, r2, #3
  40351c:	3204      	adds	r2, #4
  40351e:	4413      	add	r3, r2
  403520:	f004 0403 	and.w	r4, r4, #3
  403524:	b12c      	cbz	r4, 403532 <memset+0x8a>
  403526:	b2c9      	uxtb	r1, r1
  403528:	441c      	add	r4, r3
  40352a:	f803 1b01 	strb.w	r1, [r3], #1
  40352e:	42a3      	cmp	r3, r4
  403530:	d1fb      	bne.n	40352a <memset+0x82>
  403532:	bcf0      	pop	{r4, r5, r6, r7}
  403534:	4770      	bx	lr
  403536:	4614      	mov	r4, r2
  403538:	4603      	mov	r3, r0
  40353a:	e7c6      	b.n	4034ca <memset+0x22>

0040353c <sprintf>:
  40353c:	b40e      	push	{r1, r2, r3}
  40353e:	b5f0      	push	{r4, r5, r6, r7, lr}
  403540:	b09c      	sub	sp, #112	; 0x70
  403542:	ac21      	add	r4, sp, #132	; 0x84
  403544:	f854 2b04 	ldr.w	r2, [r4], #4
  403548:	490e      	ldr	r1, [pc, #56]	; (403584 <sprintf+0x48>)
  40354a:	4606      	mov	r6, r0
  40354c:	4623      	mov	r3, r4
  40354e:	f44f 7e02 	mov.w	lr, #520	; 0x208
  403552:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  403556:	6808      	ldr	r0, [r1, #0]
  403558:	f64f 77ff 	movw	r7, #65535	; 0xffff
  40355c:	a902      	add	r1, sp, #8
  40355e:	9602      	str	r6, [sp, #8]
  403560:	9606      	str	r6, [sp, #24]
  403562:	9401      	str	r4, [sp, #4]
  403564:	f8ad e014 	strh.w	lr, [sp, #20]
  403568:	9504      	str	r5, [sp, #16]
  40356a:	9507      	str	r5, [sp, #28]
  40356c:	f8ad 7016 	strh.w	r7, [sp, #22]
  403570:	f000 f8f8 	bl	403764 <_svfprintf_r>
  403574:	9b02      	ldr	r3, [sp, #8]
  403576:	2200      	movs	r2, #0
  403578:	701a      	strb	r2, [r3, #0]
  40357a:	b01c      	add	sp, #112	; 0x70
  40357c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403580:	b003      	add	sp, #12
  403582:	4770      	bx	lr
  403584:	200004e0 	.word	0x200004e0

00403588 <strlen>:
  403588:	f020 0103 	bic.w	r1, r0, #3
  40358c:	f010 0003 	ands.w	r0, r0, #3
  403590:	f1c0 0000 	rsb	r0, r0, #0
  403594:	f851 3b04 	ldr.w	r3, [r1], #4
  403598:	f100 0c04 	add.w	ip, r0, #4
  40359c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4035a0:	f06f 0200 	mvn.w	r2, #0
  4035a4:	bf1c      	itt	ne
  4035a6:	fa22 f20c 	lsrne.w	r2, r2, ip
  4035aa:	4313      	orrne	r3, r2
  4035ac:	f04f 0c01 	mov.w	ip, #1
  4035b0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4035b4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4035b8:	eba3 020c 	sub.w	r2, r3, ip
  4035bc:	ea22 0203 	bic.w	r2, r2, r3
  4035c0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4035c4:	bf04      	itt	eq
  4035c6:	f851 3b04 	ldreq.w	r3, [r1], #4
  4035ca:	3004      	addeq	r0, #4
  4035cc:	d0f4      	beq.n	4035b8 <strlen+0x30>
  4035ce:	f013 0fff 	tst.w	r3, #255	; 0xff
  4035d2:	bf1f      	itttt	ne
  4035d4:	3001      	addne	r0, #1
  4035d6:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
  4035da:	3001      	addne	r0, #1
  4035dc:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
  4035e0:	bf18      	it	ne
  4035e2:	3001      	addne	r0, #1
  4035e4:	4770      	bx	lr
  4035e6:	bf00      	nop

004035e8 <strpbrk>:
  4035e8:	b4f0      	push	{r4, r5, r6, r7}
  4035ea:	7804      	ldrb	r4, [r0, #0]
  4035ec:	b30c      	cbz	r4, 403632 <strpbrk+0x4a>
  4035ee:	780e      	ldrb	r6, [r1, #0]
  4035f0:	4607      	mov	r7, r0
  4035f2:	b1c6      	cbz	r6, 403626 <strpbrk+0x3e>
  4035f4:	42a6      	cmp	r6, r4
  4035f6:	d010      	beq.n	40361a <strpbrk+0x32>
  4035f8:	1c4b      	adds	r3, r1, #1
  4035fa:	e001      	b.n	403600 <strpbrk+0x18>
  4035fc:	4294      	cmp	r4, r2
  4035fe:	d00b      	beq.n	403618 <strpbrk+0x30>
  403600:	461d      	mov	r5, r3
  403602:	f813 2b01 	ldrb.w	r2, [r3], #1
  403606:	2a00      	cmp	r2, #0
  403608:	d1f8      	bne.n	4035fc <strpbrk+0x14>
  40360a:	7844      	ldrb	r4, [r0, #1]
  40360c:	3001      	adds	r0, #1
  40360e:	2c00      	cmp	r4, #0
  403610:	d1ee      	bne.n	4035f0 <strpbrk+0x8>
  403612:	782e      	ldrb	r6, [r5, #0]
  403614:	4607      	mov	r7, r0
  403616:	e000      	b.n	40361a <strpbrk+0x32>
  403618:	4626      	mov	r6, r4
  40361a:	2e00      	cmp	r6, #0
  40361c:	bf14      	ite	ne
  40361e:	4638      	movne	r0, r7
  403620:	2000      	moveq	r0, #0
  403622:	bcf0      	pop	{r4, r5, r6, r7}
  403624:	4770      	bx	lr
  403626:	7844      	ldrb	r4, [r0, #1]
  403628:	460d      	mov	r5, r1
  40362a:	3001      	adds	r0, #1
  40362c:	2c00      	cmp	r4, #0
  40362e:	d1df      	bne.n	4035f0 <strpbrk+0x8>
  403630:	e7ef      	b.n	403612 <strpbrk+0x2a>
  403632:	4620      	mov	r0, r4
  403634:	bcf0      	pop	{r4, r5, r6, r7}
  403636:	4770      	bx	lr

00403638 <_strtol_r>:
  403638:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40363c:	4c42      	ldr	r4, [pc, #264]	; (403748 <_strtol_r+0x110>)
  40363e:	b082      	sub	sp, #8
  403640:	f8d4 c000 	ldr.w	ip, [r4]
  403644:	9001      	str	r0, [sp, #4]
  403646:	460e      	mov	r6, r1
  403648:	e000      	b.n	40364c <_strtol_r+0x14>
  40364a:	4626      	mov	r6, r4
  40364c:	4634      	mov	r4, r6
  40364e:	f814 5b01 	ldrb.w	r5, [r4], #1
  403652:	eb0c 0005 	add.w	r0, ip, r5
  403656:	7840      	ldrb	r0, [r0, #1]
  403658:	f000 0008 	and.w	r0, r0, #8
  40365c:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  403660:	2800      	cmp	r0, #0
  403662:	d1f2      	bne.n	40364a <_strtol_r+0x12>
  403664:	2d2d      	cmp	r5, #45	; 0x2d
  403666:	d05b      	beq.n	403720 <_strtol_r+0xe8>
  403668:	2d2b      	cmp	r5, #43	; 0x2b
  40366a:	bf04      	itt	eq
  40366c:	7875      	ldrbeq	r5, [r6, #1]
  40366e:	1cb4      	addeq	r4, r6, #2
  403670:	f033 0010 	bics.w	r0, r3, #16
  403674:	d03c      	beq.n	4036f0 <_strtol_r+0xb8>
  403676:	4699      	mov	r9, r3
  403678:	f1ba 0f00 	cmp.w	sl, #0
  40367c:	bf0c      	ite	eq
  40367e:	f06f 4b00 	mvneq.w	fp, #2147483648	; 0x80000000
  403682:	f04f 4b00 	movne.w	fp, #2147483648	; 0x80000000
  403686:	fbbb f8f9 	udiv	r8, fp, r9
  40368a:	2700      	movs	r7, #0
  40368c:	fb09 bb18 	mls	fp, r9, r8, fp
  403690:	4638      	mov	r0, r7
  403692:	e00c      	b.n	4036ae <_strtol_r+0x76>
  403694:	3d30      	subs	r5, #48	; 0x30
  403696:	42ab      	cmp	r3, r5
  403698:	dd19      	ble.n	4036ce <_strtol_r+0x96>
  40369a:	1c7e      	adds	r6, r7, #1
  40369c:	d005      	beq.n	4036aa <_strtol_r+0x72>
  40369e:	4540      	cmp	r0, r8
  4036a0:	d823      	bhi.n	4036ea <_strtol_r+0xb2>
  4036a2:	d020      	beq.n	4036e6 <_strtol_r+0xae>
  4036a4:	fb09 5000 	mla	r0, r9, r0, r5
  4036a8:	2701      	movs	r7, #1
  4036aa:	f814 5b01 	ldrb.w	r5, [r4], #1
  4036ae:	eb0c 0605 	add.w	r6, ip, r5
  4036b2:	7876      	ldrb	r6, [r6, #1]
  4036b4:	f016 0f04 	tst.w	r6, #4
  4036b8:	d1ec      	bne.n	403694 <_strtol_r+0x5c>
  4036ba:	f016 0603 	ands.w	r6, r6, #3
  4036be:	d006      	beq.n	4036ce <_strtol_r+0x96>
  4036c0:	2e01      	cmp	r6, #1
  4036c2:	bf14      	ite	ne
  4036c4:	2657      	movne	r6, #87	; 0x57
  4036c6:	2637      	moveq	r6, #55	; 0x37
  4036c8:	1bad      	subs	r5, r5, r6
  4036ca:	42ab      	cmp	r3, r5
  4036cc:	dce5      	bgt.n	40369a <_strtol_r+0x62>
  4036ce:	1c7b      	adds	r3, r7, #1
  4036d0:	d015      	beq.n	4036fe <_strtol_r+0xc6>
  4036d2:	f1ba 0f00 	cmp.w	sl, #0
  4036d6:	d121      	bne.n	40371c <_strtol_r+0xe4>
  4036d8:	b10a      	cbz	r2, 4036de <_strtol_r+0xa6>
  4036da:	b9ef      	cbnz	r7, 403718 <_strtol_r+0xe0>
  4036dc:	6011      	str	r1, [r2, #0]
  4036de:	b002      	add	sp, #8
  4036e0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4036e4:	4770      	bx	lr
  4036e6:	455d      	cmp	r5, fp
  4036e8:	dddc      	ble.n	4036a4 <_strtol_r+0x6c>
  4036ea:	f04f 37ff 	mov.w	r7, #4294967295
  4036ee:	e7dc      	b.n	4036aa <_strtol_r+0x72>
  4036f0:	2d30      	cmp	r5, #48	; 0x30
  4036f2:	d01a      	beq.n	40372a <_strtol_r+0xf2>
  4036f4:	2b00      	cmp	r3, #0
  4036f6:	d1be      	bne.n	403676 <_strtol_r+0x3e>
  4036f8:	230a      	movs	r3, #10
  4036fa:	4699      	mov	r9, r3
  4036fc:	e7bc      	b.n	403678 <_strtol_r+0x40>
  4036fe:	9901      	ldr	r1, [sp, #4]
  403700:	f1ba 0f00 	cmp.w	sl, #0
  403704:	f04f 0322 	mov.w	r3, #34	; 0x22
  403708:	bf0c      	ite	eq
  40370a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40370e:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
  403712:	600b      	str	r3, [r1, #0]
  403714:	2a00      	cmp	r2, #0
  403716:	d0e2      	beq.n	4036de <_strtol_r+0xa6>
  403718:	1e61      	subs	r1, r4, #1
  40371a:	e7df      	b.n	4036dc <_strtol_r+0xa4>
  40371c:	4240      	negs	r0, r0
  40371e:	e7db      	b.n	4036d8 <_strtol_r+0xa0>
  403720:	1cb4      	adds	r4, r6, #2
  403722:	7875      	ldrb	r5, [r6, #1]
  403724:	f04f 0a01 	mov.w	sl, #1
  403728:	e7a2      	b.n	403670 <_strtol_r+0x38>
  40372a:	7820      	ldrb	r0, [r4, #0]
  40372c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  403730:	2858      	cmp	r0, #88	; 0x58
  403732:	d003      	beq.n	40373c <_strtol_r+0x104>
  403734:	2b00      	cmp	r3, #0
  403736:	d19e      	bne.n	403676 <_strtol_r+0x3e>
  403738:	2308      	movs	r3, #8
  40373a:	e79c      	b.n	403676 <_strtol_r+0x3e>
  40373c:	2310      	movs	r3, #16
  40373e:	7865      	ldrb	r5, [r4, #1]
  403740:	4699      	mov	r9, r3
  403742:	3402      	adds	r4, #2
  403744:	e798      	b.n	403678 <_strtol_r+0x40>
  403746:	bf00      	nop
  403748:	200004e4 	.word	0x200004e4

0040374c <strtol>:
  40374c:	b430      	push	{r4, r5}
  40374e:	4c04      	ldr	r4, [pc, #16]	; (403760 <strtol+0x14>)
  403750:	460d      	mov	r5, r1
  403752:	4613      	mov	r3, r2
  403754:	4601      	mov	r1, r0
  403756:	462a      	mov	r2, r5
  403758:	6820      	ldr	r0, [r4, #0]
  40375a:	bc30      	pop	{r4, r5}
  40375c:	f7ff bf6c 	b.w	403638 <_strtol_r>
  403760:	200004e0 	.word	0x200004e0

00403764 <_svfprintf_r>:
  403764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403768:	b0c9      	sub	sp, #292	; 0x124
  40376a:	9310      	str	r3, [sp, #64]	; 0x40
  40376c:	910c      	str	r1, [sp, #48]	; 0x30
  40376e:	4691      	mov	r9, r2
  403770:	900d      	str	r0, [sp, #52]	; 0x34
  403772:	f002 fb5f 	bl	405e34 <_localeconv_r>
  403776:	6800      	ldr	r0, [r0, #0]
  403778:	9015      	str	r0, [sp, #84]	; 0x54
  40377a:	f7ff ff05 	bl	403588 <strlen>
  40377e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403780:	9018      	str	r0, [sp, #96]	; 0x60
  403782:	89a3      	ldrh	r3, [r4, #12]
  403784:	061e      	lsls	r6, r3, #24
  403786:	d503      	bpl.n	403790 <_svfprintf_r+0x2c>
  403788:	6923      	ldr	r3, [r4, #16]
  40378a:	2b00      	cmp	r3, #0
  40378c:	f001 8081 	beq.w	404892 <_svfprintf_r+0x112e>
  403790:	ac38      	add	r4, sp, #224	; 0xe0
  403792:	46a4      	mov	ip, r4
  403794:	9408      	str	r4, [sp, #32]
  403796:	942b      	str	r4, [sp, #172]	; 0xac
  403798:	2500      	movs	r5, #0
  40379a:	2400      	movs	r4, #0
  40379c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  4037a0:	2300      	movs	r3, #0
  4037a2:	9311      	str	r3, [sp, #68]	; 0x44
  4037a4:	932d      	str	r3, [sp, #180]	; 0xb4
  4037a6:	932c      	str	r3, [sp, #176]	; 0xb0
  4037a8:	931a      	str	r3, [sp, #104]	; 0x68
  4037aa:	9319      	str	r3, [sp, #100]	; 0x64
  4037ac:	930e      	str	r3, [sp, #56]	; 0x38
  4037ae:	4666      	mov	r6, ip
  4037b0:	f899 3000 	ldrb.w	r3, [r9]
  4037b4:	2b00      	cmp	r3, #0
  4037b6:	f000 80f8 	beq.w	4039aa <_svfprintf_r+0x246>
  4037ba:	2b25      	cmp	r3, #37	; 0x25
  4037bc:	f000 80f5 	beq.w	4039aa <_svfprintf_r+0x246>
  4037c0:	f109 0201 	add.w	r2, r9, #1
  4037c4:	e001      	b.n	4037ca <_svfprintf_r+0x66>
  4037c6:	2b25      	cmp	r3, #37	; 0x25
  4037c8:	d004      	beq.n	4037d4 <_svfprintf_r+0x70>
  4037ca:	7813      	ldrb	r3, [r2, #0]
  4037cc:	4614      	mov	r4, r2
  4037ce:	3201      	adds	r2, #1
  4037d0:	2b00      	cmp	r3, #0
  4037d2:	d1f8      	bne.n	4037c6 <_svfprintf_r+0x62>
  4037d4:	ebc9 0504 	rsb	r5, r9, r4
  4037d8:	b17d      	cbz	r5, 4037fa <_svfprintf_r+0x96>
  4037da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4037dc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  4037de:	3301      	adds	r3, #1
  4037e0:	442a      	add	r2, r5
  4037e2:	2b07      	cmp	r3, #7
  4037e4:	f8c6 9000 	str.w	r9, [r6]
  4037e8:	6075      	str	r5, [r6, #4]
  4037ea:	922d      	str	r2, [sp, #180]	; 0xb4
  4037ec:	932c      	str	r3, [sp, #176]	; 0xb0
  4037ee:	f300 80c2 	bgt.w	403976 <_svfprintf_r+0x212>
  4037f2:	3608      	adds	r6, #8
  4037f4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4037f6:	4428      	add	r0, r5
  4037f8:	900e      	str	r0, [sp, #56]	; 0x38
  4037fa:	7823      	ldrb	r3, [r4, #0]
  4037fc:	2b00      	cmp	r3, #0
  4037fe:	f000 80c2 	beq.w	403986 <_svfprintf_r+0x222>
  403802:	2300      	movs	r3, #0
  403804:	f894 8001 	ldrb.w	r8, [r4, #1]
  403808:	461a      	mov	r2, r3
  40380a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  40380e:	930f      	str	r3, [sp, #60]	; 0x3c
  403810:	9309      	str	r3, [sp, #36]	; 0x24
  403812:	f104 0901 	add.w	r9, r4, #1
  403816:	f04f 34ff 	mov.w	r4, #4294967295
  40381a:	940a      	str	r4, [sp, #40]	; 0x28
  40381c:	f109 0901 	add.w	r9, r9, #1
  403820:	f1a8 0320 	sub.w	r3, r8, #32
  403824:	2b58      	cmp	r3, #88	; 0x58
  403826:	f200 83c5 	bhi.w	403fb4 <_svfprintf_r+0x850>
  40382a:	e8df f013 	tbh	[pc, r3, lsl #1]
  40382e:	026a      	.short	0x026a
  403830:	03c303c3 	.word	0x03c303c3
  403834:	03c30271 	.word	0x03c30271
  403838:	03c303c3 	.word	0x03c303c3
  40383c:	03c303c3 	.word	0x03c303c3
  403840:	031403c3 	.word	0x031403c3
  403844:	03c30366 	.word	0x03c30366
  403848:	00c0009d 	.word	0x00c0009d
  40384c:	027803c3 	.word	0x027803c3
  403850:	027f027f 	.word	0x027f027f
  403854:	027f027f 	.word	0x027f027f
  403858:	027f027f 	.word	0x027f027f
  40385c:	027f027f 	.word	0x027f027f
  403860:	03c3027f 	.word	0x03c3027f
  403864:	03c303c3 	.word	0x03c303c3
  403868:	03c303c3 	.word	0x03c303c3
  40386c:	03c303c3 	.word	0x03c303c3
  403870:	03c303c3 	.word	0x03c303c3
  403874:	029003c3 	.word	0x029003c3
  403878:	03c30371 	.word	0x03c30371
  40387c:	03c30371 	.word	0x03c30371
  403880:	03c303c3 	.word	0x03c303c3
  403884:	036a03c3 	.word	0x036a03c3
  403888:	03c303c3 	.word	0x03c303c3
  40388c:	03c30078 	.word	0x03c30078
  403890:	03c303c3 	.word	0x03c303c3
  403894:	03c303c3 	.word	0x03c303c3
  403898:	03c30059 	.word	0x03c30059
  40389c:	02af03c3 	.word	0x02af03c3
  4038a0:	03c303c3 	.word	0x03c303c3
  4038a4:	03c303c3 	.word	0x03c303c3
  4038a8:	03c303c3 	.word	0x03c303c3
  4038ac:	03c303c3 	.word	0x03c303c3
  4038b0:	03c303c3 	.word	0x03c303c3
  4038b4:	03480337 	.word	0x03480337
  4038b8:	03710371 	.word	0x03710371
  4038bc:	02ff0371 	.word	0x02ff0371
  4038c0:	03c30348 	.word	0x03c30348
  4038c4:	030803c3 	.word	0x030803c3
  4038c8:	02c503c3 	.word	0x02c503c3
  4038cc:	0320007c 	.word	0x0320007c
  4038d0:	03c303a3 	.word	0x03c303a3
  4038d4:	03c302d9 	.word	0x03c302d9
  4038d8:	03c3005f 	.word	0x03c3005f
  4038dc:	00de03c3 	.word	0x00de03c3
  4038e0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4038e4:	f04c 0c10 	orr.w	ip, ip, #16
  4038e8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  4038ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4038ee:	06a2      	lsls	r2, r4, #26
  4038f0:	f100 8354 	bmi.w	403f9c <_svfprintf_r+0x838>
  4038f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4038f6:	06e3      	lsls	r3, r4, #27
  4038f8:	f100 85bd 	bmi.w	404476 <_svfprintf_r+0xd12>
  4038fc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403900:	f01c 0f40 	tst.w	ip, #64	; 0x40
  403904:	f000 85b7 	beq.w	404476 <_svfprintf_r+0xd12>
  403908:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40390c:	2500      	movs	r5, #0
  40390e:	f8bc 4000 	ldrh.w	r4, [ip]
  403912:	f10c 0c04 	add.w	ip, ip, #4
  403916:	2301      	movs	r3, #1
  403918:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40391c:	e08c      	b.n	403a38 <_svfprintf_r+0x2d4>
  40391e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403920:	f045 0510 	orr.w	r5, r5, #16
  403924:	9509      	str	r5, [sp, #36]	; 0x24
  403926:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40392a:	f01c 0320 	ands.w	r3, ip, #32
  40392e:	f040 832a 	bne.w	403f86 <_svfprintf_r+0x822>
  403932:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403936:	f01c 0210 	ands.w	r2, ip, #16
  40393a:	f040 85a4 	bne.w	404486 <_svfprintf_r+0xd22>
  40393e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403942:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
  403946:	f000 859e 	beq.w	404486 <_svfprintf_r+0xd22>
  40394a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  40394e:	4613      	mov	r3, r2
  403950:	f8bc 4000 	ldrh.w	r4, [ip]
  403954:	f10c 0c04 	add.w	ip, ip, #4
  403958:	2500      	movs	r5, #0
  40395a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  40395e:	e06b      	b.n	403a38 <_svfprintf_r+0x2d4>
  403960:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403962:	9310      	str	r3, [sp, #64]	; 0x40
  403964:	4264      	negs	r4, r4
  403966:	940f      	str	r4, [sp, #60]	; 0x3c
  403968:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40396a:	f045 0504 	orr.w	r5, r5, #4
  40396e:	9509      	str	r5, [sp, #36]	; 0x24
  403970:	f899 8000 	ldrb.w	r8, [r9]
  403974:	e752      	b.n	40381c <_svfprintf_r+0xb8>
  403976:	980d      	ldr	r0, [sp, #52]	; 0x34
  403978:	990c      	ldr	r1, [sp, #48]	; 0x30
  40397a:	aa2b      	add	r2, sp, #172	; 0xac
  40397c:	f003 fad2 	bl	406f24 <__ssprint_r>
  403980:	b940      	cbnz	r0, 403994 <_svfprintf_r+0x230>
  403982:	ae38      	add	r6, sp, #224	; 0xe0
  403984:	e736      	b.n	4037f4 <_svfprintf_r+0x90>
  403986:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  403988:	b123      	cbz	r3, 403994 <_svfprintf_r+0x230>
  40398a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40398c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40398e:	aa2b      	add	r2, sp, #172	; 0xac
  403990:	f003 fac8 	bl	406f24 <__ssprint_r>
  403994:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403996:	980e      	ldr	r0, [sp, #56]	; 0x38
  403998:	89a3      	ldrh	r3, [r4, #12]
  40399a:	f013 0f40 	tst.w	r3, #64	; 0x40
  40399e:	bf18      	it	ne
  4039a0:	f04f 30ff 	movne.w	r0, #4294967295
  4039a4:	b049      	add	sp, #292	; 0x124
  4039a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4039aa:	464c      	mov	r4, r9
  4039ac:	e725      	b.n	4037fa <_svfprintf_r+0x96>
  4039ae:	f899 8000 	ldrb.w	r8, [r9]
  4039b2:	f109 0001 	add.w	r0, r9, #1
  4039b6:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
  4039ba:	f001 810c 	beq.w	404bd6 <_svfprintf_r+0x1472>
  4039be:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  4039c2:	2b09      	cmp	r3, #9
  4039c4:	bf98      	it	ls
  4039c6:	2100      	movls	r1, #0
  4039c8:	f201 806b 	bhi.w	404aa2 <_svfprintf_r+0x133e>
  4039cc:	f810 8b01 	ldrb.w	r8, [r0], #1
  4039d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4039d4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  4039d8:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  4039dc:	2b09      	cmp	r3, #9
  4039de:	d9f5      	bls.n	4039cc <_svfprintf_r+0x268>
  4039e0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  4039e4:	910a      	str	r1, [sp, #40]	; 0x28
  4039e6:	4681      	mov	r9, r0
  4039e8:	e71a      	b.n	403820 <_svfprintf_r+0xbc>
  4039ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4039ec:	4ca1      	ldr	r4, [pc, #644]	; (403c74 <_svfprintf_r+0x510>)
  4039ee:	06af      	lsls	r7, r5, #26
  4039f0:	941a      	str	r4, [sp, #104]	; 0x68
  4039f2:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  4039f6:	f140 81d1 	bpl.w	403d9c <_svfprintf_r+0x638>
  4039fa:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4039fe:	f10c 0307 	add.w	r3, ip, #7
  403a02:	f023 0307 	bic.w	r3, r3, #7
  403a06:	f103 0408 	add.w	r4, r3, #8
  403a0a:	9410      	str	r4, [sp, #64]	; 0x40
  403a0c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403a10:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403a14:	f01c 0f01 	tst.w	ip, #1
  403a18:	f000 8462 	beq.w	4042e0 <_svfprintf_r+0xb7c>
  403a1c:	ea54 0005 	orrs.w	r0, r4, r5
  403a20:	f000 845e 	beq.w	4042e0 <_svfprintf_r+0xb7c>
  403a24:	2330      	movs	r3, #48	; 0x30
  403a26:	f04c 0c02 	orr.w	ip, ip, #2
  403a2a:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  403a2e:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  403a32:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403a36:	2302      	movs	r3, #2
  403a38:	f04f 0a00 	mov.w	sl, #0
  403a3c:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  403a40:	990a      	ldr	r1, [sp, #40]	; 0x28
  403a42:	2900      	cmp	r1, #0
  403a44:	db05      	blt.n	403a52 <_svfprintf_r+0x2ee>
  403a46:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403a4a:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
  403a4e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403a52:	ea54 0005 	orrs.w	r0, r4, r5
  403a56:	f040 82c5 	bne.w	403fe4 <_svfprintf_r+0x880>
  403a5a:	990a      	ldr	r1, [sp, #40]	; 0x28
  403a5c:	2900      	cmp	r1, #0
  403a5e:	f040 82c1 	bne.w	403fe4 <_svfprintf_r+0x880>
  403a62:	2b00      	cmp	r3, #0
  403a64:	f040 8438 	bne.w	4042d8 <_svfprintf_r+0xb74>
  403a68:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403a6c:	f01c 0f01 	tst.w	ip, #1
  403a70:	f000 8432 	beq.w	4042d8 <_svfprintf_r+0xb74>
  403a74:	af48      	add	r7, sp, #288	; 0x120
  403a76:	2330      	movs	r3, #48	; 0x30
  403a78:	9d08      	ldr	r5, [sp, #32]
  403a7a:	f807 3d41 	strb.w	r3, [r7, #-65]!
  403a7e:	1bec      	subs	r4, r5, r7
  403a80:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
  403a84:	2500      	movs	r5, #0
  403a86:	4564      	cmp	r4, ip
  403a88:	bfa8      	it	ge
  403a8a:	46a4      	movge	ip, r4
  403a8c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  403a90:	9514      	str	r5, [sp, #80]	; 0x50
  403a92:	f1ba 0f00 	cmp.w	sl, #0
  403a96:	d002      	beq.n	403a9e <_svfprintf_r+0x33a>
  403a98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403a9a:	3501      	adds	r5, #1
  403a9c:	950b      	str	r5, [sp, #44]	; 0x2c
  403a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403aa0:	f013 0302 	ands.w	r3, r3, #2
  403aa4:	9312      	str	r3, [sp, #72]	; 0x48
  403aa6:	d002      	beq.n	403aae <_svfprintf_r+0x34a>
  403aa8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403aaa:	3502      	adds	r5, #2
  403aac:	950b      	str	r5, [sp, #44]	; 0x2c
  403aae:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403ab2:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
  403ab6:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
  403aba:	f040 8290 	bne.w	403fde <_svfprintf_r+0x87a>
  403abe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403ac0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
  403ac4:	ebcc 0b05 	rsb	fp, ip, r5
  403ac8:	f1bb 0f00 	cmp.w	fp, #0
  403acc:	f340 8287 	ble.w	403fde <_svfprintf_r+0x87a>
  403ad0:	f1bb 0f10 	cmp.w	fp, #16
  403ad4:	992d      	ldr	r1, [sp, #180]	; 0xb4
  403ad6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  403ad8:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 403c7c <_svfprintf_r+0x518>
  403adc:	dd2c      	ble.n	403b38 <_svfprintf_r+0x3d4>
  403ade:	971b      	str	r7, [sp, #108]	; 0x6c
  403ae0:	4630      	mov	r0, r6
  403ae2:	4657      	mov	r7, sl
  403ae4:	2510      	movs	r5, #16
  403ae6:	46ca      	mov	sl, r9
  403ae8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  403aea:	46a1      	mov	r9, r4
  403aec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  403aee:	e006      	b.n	403afe <_svfprintf_r+0x39a>
  403af0:	f1ab 0b10 	sub.w	fp, fp, #16
  403af4:	f1bb 0f10 	cmp.w	fp, #16
  403af8:	f100 0008 	add.w	r0, r0, #8
  403afc:	dd17      	ble.n	403b2e <_svfprintf_r+0x3ca>
  403afe:	3201      	adds	r2, #1
  403b00:	3110      	adds	r1, #16
  403b02:	2a07      	cmp	r2, #7
  403b04:	912d      	str	r1, [sp, #180]	; 0xb4
  403b06:	922c      	str	r2, [sp, #176]	; 0xb0
  403b08:	6007      	str	r7, [r0, #0]
  403b0a:	6045      	str	r5, [r0, #4]
  403b0c:	ddf0      	ble.n	403af0 <_svfprintf_r+0x38c>
  403b0e:	4620      	mov	r0, r4
  403b10:	4631      	mov	r1, r6
  403b12:	aa2b      	add	r2, sp, #172	; 0xac
  403b14:	f003 fa06 	bl	406f24 <__ssprint_r>
  403b18:	2800      	cmp	r0, #0
  403b1a:	f47f af3b 	bne.w	403994 <_svfprintf_r+0x230>
  403b1e:	f1ab 0b10 	sub.w	fp, fp, #16
  403b22:	f1bb 0f10 	cmp.w	fp, #16
  403b26:	992d      	ldr	r1, [sp, #180]	; 0xb4
  403b28:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  403b2a:	a838      	add	r0, sp, #224	; 0xe0
  403b2c:	dce7      	bgt.n	403afe <_svfprintf_r+0x39a>
  403b2e:	464c      	mov	r4, r9
  403b30:	46d1      	mov	r9, sl
  403b32:	46ba      	mov	sl, r7
  403b34:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
  403b36:	4606      	mov	r6, r0
  403b38:	3201      	adds	r2, #1
  403b3a:	eb0b 0c01 	add.w	ip, fp, r1
  403b3e:	2a07      	cmp	r2, #7
  403b40:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403b44:	922c      	str	r2, [sp, #176]	; 0xb0
  403b46:	e886 0c00 	stmia.w	r6, {sl, fp}
  403b4a:	f300 841a 	bgt.w	404382 <_svfprintf_r+0xc1e>
  403b4e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403b52:	3608      	adds	r6, #8
  403b54:	f1ba 0f00 	cmp.w	sl, #0
  403b58:	d00f      	beq.n	403b7a <_svfprintf_r+0x416>
  403b5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403b5c:	f10c 0c01 	add.w	ip, ip, #1
  403b60:	3301      	adds	r3, #1
  403b62:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
  403b66:	2201      	movs	r2, #1
  403b68:	2b07      	cmp	r3, #7
  403b6a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403b6e:	932c      	str	r3, [sp, #176]	; 0xb0
  403b70:	e886 0006 	stmia.w	r6, {r1, r2}
  403b74:	f300 83a4 	bgt.w	4042c0 <_svfprintf_r+0xb5c>
  403b78:	3608      	adds	r6, #8
  403b7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403b7c:	b173      	cbz	r3, 403b9c <_svfprintf_r+0x438>
  403b7e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403b80:	f10c 0c02 	add.w	ip, ip, #2
  403b84:	3301      	adds	r3, #1
  403b86:	a924      	add	r1, sp, #144	; 0x90
  403b88:	2202      	movs	r2, #2
  403b8a:	2b07      	cmp	r3, #7
  403b8c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403b90:	932c      	str	r3, [sp, #176]	; 0xb0
  403b92:	e886 0006 	stmia.w	r6, {r1, r2}
  403b96:	f300 8387 	bgt.w	4042a8 <_svfprintf_r+0xb44>
  403b9a:	3608      	adds	r6, #8
  403b9c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  403b9e:	2d80      	cmp	r5, #128	; 0x80
  403ba0:	f000 82ca 	beq.w	404138 <_svfprintf_r+0x9d4>
  403ba4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403ba6:	ebc4 0a05 	rsb	sl, r4, r5
  403baa:	f1ba 0f00 	cmp.w	sl, #0
  403bae:	dd3b      	ble.n	403c28 <_svfprintf_r+0x4c4>
  403bb0:	f1ba 0f10 	cmp.w	sl, #16
  403bb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403bb6:	4d30      	ldr	r5, [pc, #192]	; (403c78 <_svfprintf_r+0x514>)
  403bb8:	dd2b      	ble.n	403c12 <_svfprintf_r+0x4ae>
  403bba:	940a      	str	r4, [sp, #40]	; 0x28
  403bbc:	4632      	mov	r2, r6
  403bbe:	f04f 0b10 	mov.w	fp, #16
  403bc2:	462e      	mov	r6, r5
  403bc4:	4661      	mov	r1, ip
  403bc6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  403bc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  403bca:	e006      	b.n	403bda <_svfprintf_r+0x476>
  403bcc:	f1aa 0a10 	sub.w	sl, sl, #16
  403bd0:	f1ba 0f10 	cmp.w	sl, #16
  403bd4:	f102 0208 	add.w	r2, r2, #8
  403bd8:	dd17      	ble.n	403c0a <_svfprintf_r+0x4a6>
  403bda:	3301      	adds	r3, #1
  403bdc:	3110      	adds	r1, #16
  403bde:	2b07      	cmp	r3, #7
  403be0:	912d      	str	r1, [sp, #180]	; 0xb4
  403be2:	932c      	str	r3, [sp, #176]	; 0xb0
  403be4:	e882 0840 	stmia.w	r2, {r6, fp}
  403be8:	ddf0      	ble.n	403bcc <_svfprintf_r+0x468>
  403bea:	4620      	mov	r0, r4
  403bec:	4629      	mov	r1, r5
  403bee:	aa2b      	add	r2, sp, #172	; 0xac
  403bf0:	f003 f998 	bl	406f24 <__ssprint_r>
  403bf4:	2800      	cmp	r0, #0
  403bf6:	f47f aecd 	bne.w	403994 <_svfprintf_r+0x230>
  403bfa:	f1aa 0a10 	sub.w	sl, sl, #16
  403bfe:	f1ba 0f10 	cmp.w	sl, #16
  403c02:	992d      	ldr	r1, [sp, #180]	; 0xb4
  403c04:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403c06:	aa38      	add	r2, sp, #224	; 0xe0
  403c08:	dce7      	bgt.n	403bda <_svfprintf_r+0x476>
  403c0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403c0c:	4635      	mov	r5, r6
  403c0e:	468c      	mov	ip, r1
  403c10:	4616      	mov	r6, r2
  403c12:	3301      	adds	r3, #1
  403c14:	44d4      	add	ip, sl
  403c16:	2b07      	cmp	r3, #7
  403c18:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403c1c:	932c      	str	r3, [sp, #176]	; 0xb0
  403c1e:	e886 0420 	stmia.w	r6, {r5, sl}
  403c22:	f300 8335 	bgt.w	404290 <_svfprintf_r+0xb2c>
  403c26:	3608      	adds	r6, #8
  403c28:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403c2a:	05ed      	lsls	r5, r5, #23
  403c2c:	f100 8224 	bmi.w	404078 <_svfprintf_r+0x914>
  403c30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403c32:	44a4      	add	ip, r4
  403c34:	3301      	adds	r3, #1
  403c36:	2b07      	cmp	r3, #7
  403c38:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403c3c:	6037      	str	r7, [r6, #0]
  403c3e:	6074      	str	r4, [r6, #4]
  403c40:	932c      	str	r3, [sp, #176]	; 0xb0
  403c42:	f300 830f 	bgt.w	404264 <_svfprintf_r+0xb00>
  403c46:	3608      	adds	r6, #8
  403c48:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403c4a:	0763      	lsls	r3, r4, #29
  403c4c:	d549      	bpl.n	403ce2 <_svfprintf_r+0x57e>
  403c4e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403c50:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403c52:	1a2c      	subs	r4, r5, r0
  403c54:	2c00      	cmp	r4, #0
  403c56:	dd44      	ble.n	403ce2 <_svfprintf_r+0x57e>
  403c58:	2c10      	cmp	r4, #16
  403c5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403c5c:	f8df a01c 	ldr.w	sl, [pc, #28]	; 403c7c <_svfprintf_r+0x518>
  403c60:	dd2b      	ble.n	403cba <_svfprintf_r+0x556>
  403c62:	4657      	mov	r7, sl
  403c64:	2510      	movs	r5, #16
  403c66:	4662      	mov	r2, ip
  403c68:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  403c6c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  403c70:	e00b      	b.n	403c8a <_svfprintf_r+0x526>
  403c72:	bf00      	nop
  403c74:	0040813c 	.word	0x0040813c
  403c78:	00408108 	.word	0x00408108
  403c7c:	0040815c 	.word	0x0040815c
  403c80:	3c10      	subs	r4, #16
  403c82:	2c10      	cmp	r4, #16
  403c84:	f106 0608 	add.w	r6, r6, #8
  403c88:	dd15      	ble.n	403cb6 <_svfprintf_r+0x552>
  403c8a:	3301      	adds	r3, #1
  403c8c:	3210      	adds	r2, #16
  403c8e:	2b07      	cmp	r3, #7
  403c90:	922d      	str	r2, [sp, #180]	; 0xb4
  403c92:	932c      	str	r3, [sp, #176]	; 0xb0
  403c94:	6037      	str	r7, [r6, #0]
  403c96:	6075      	str	r5, [r6, #4]
  403c98:	ddf2      	ble.n	403c80 <_svfprintf_r+0x51c>
  403c9a:	4650      	mov	r0, sl
  403c9c:	4641      	mov	r1, r8
  403c9e:	aa2b      	add	r2, sp, #172	; 0xac
  403ca0:	f003 f940 	bl	406f24 <__ssprint_r>
  403ca4:	2800      	cmp	r0, #0
  403ca6:	f47f ae75 	bne.w	403994 <_svfprintf_r+0x230>
  403caa:	3c10      	subs	r4, #16
  403cac:	2c10      	cmp	r4, #16
  403cae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  403cb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  403cb2:	ae38      	add	r6, sp, #224	; 0xe0
  403cb4:	dce9      	bgt.n	403c8a <_svfprintf_r+0x526>
  403cb6:	4694      	mov	ip, r2
  403cb8:	46ba      	mov	sl, r7
  403cba:	3301      	adds	r3, #1
  403cbc:	44a4      	add	ip, r4
  403cbe:	2b07      	cmp	r3, #7
  403cc0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  403cc4:	932c      	str	r3, [sp, #176]	; 0xb0
  403cc6:	f8c6 a000 	str.w	sl, [r6]
  403cca:	6074      	str	r4, [r6, #4]
  403ccc:	dd09      	ble.n	403ce2 <_svfprintf_r+0x57e>
  403cce:	980d      	ldr	r0, [sp, #52]	; 0x34
  403cd0:	990c      	ldr	r1, [sp, #48]	; 0x30
  403cd2:	aa2b      	add	r2, sp, #172	; 0xac
  403cd4:	f003 f926 	bl	406f24 <__ssprint_r>
  403cd8:	2800      	cmp	r0, #0
  403cda:	f47f ae5b 	bne.w	403994 <_svfprintf_r+0x230>
  403cde:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  403ce2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403ce4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403ce6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403ce8:	42a8      	cmp	r0, r5
  403cea:	bfac      	ite	ge
  403cec:	1824      	addge	r4, r4, r0
  403cee:	1964      	addlt	r4, r4, r5
  403cf0:	940e      	str	r4, [sp, #56]	; 0x38
  403cf2:	f1bc 0f00 	cmp.w	ip, #0
  403cf6:	f040 82c1 	bne.w	40427c <_svfprintf_r+0xb18>
  403cfa:	2300      	movs	r3, #0
  403cfc:	932c      	str	r3, [sp, #176]	; 0xb0
  403cfe:	ae38      	add	r6, sp, #224	; 0xe0
  403d00:	e556      	b.n	4037b0 <_svfprintf_r+0x4c>
  403d02:	f899 8000 	ldrb.w	r8, [r9]
  403d06:	2a00      	cmp	r2, #0
  403d08:	f47f ad88 	bne.w	40381c <_svfprintf_r+0xb8>
  403d0c:	2220      	movs	r2, #32
  403d0e:	e585      	b.n	40381c <_svfprintf_r+0xb8>
  403d10:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403d12:	f045 0501 	orr.w	r5, r5, #1
  403d16:	9509      	str	r5, [sp, #36]	; 0x24
  403d18:	f899 8000 	ldrb.w	r8, [r9]
  403d1c:	e57e      	b.n	40381c <_svfprintf_r+0xb8>
  403d1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403d20:	f045 0580 	orr.w	r5, r5, #128	; 0x80
  403d24:	9509      	str	r5, [sp, #36]	; 0x24
  403d26:	f899 8000 	ldrb.w	r8, [r9]
  403d2a:	e577      	b.n	40381c <_svfprintf_r+0xb8>
  403d2c:	2400      	movs	r4, #0
  403d2e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  403d32:	940f      	str	r4, [sp, #60]	; 0x3c
  403d34:	4621      	mov	r1, r4
  403d36:	f819 8b01 	ldrb.w	r8, [r9], #1
  403d3a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  403d3e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
  403d42:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
  403d46:	2b09      	cmp	r3, #9
  403d48:	d9f5      	bls.n	403d36 <_svfprintf_r+0x5d2>
  403d4a:	910f      	str	r1, [sp, #60]	; 0x3c
  403d4c:	e568      	b.n	403820 <_svfprintf_r+0xbc>
  403d4e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403d52:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403d56:	f04c 0c10 	orr.w	ip, ip, #16
  403d5a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403d5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403d60:	06a5      	lsls	r5, r4, #26
  403d62:	f140 80b2 	bpl.w	403eca <_svfprintf_r+0x766>
  403d66:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403d68:	1de9      	adds	r1, r5, #7
  403d6a:	f021 0107 	bic.w	r1, r1, #7
  403d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403d72:	3108      	adds	r1, #8
  403d74:	9110      	str	r1, [sp, #64]	; 0x40
  403d76:	4614      	mov	r4, r2
  403d78:	461d      	mov	r5, r3
  403d7a:	2a00      	cmp	r2, #0
  403d7c:	f173 0c00 	sbcs.w	ip, r3, #0
  403d80:	f2c0 8394 	blt.w	4044ac <_svfprintf_r+0xd48>
  403d84:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403d88:	2301      	movs	r3, #1
  403d8a:	e659      	b.n	403a40 <_svfprintf_r+0x2dc>
  403d8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403d8e:	4cb6      	ldr	r4, [pc, #728]	; (404068 <_svfprintf_r+0x904>)
  403d90:	06af      	lsls	r7, r5, #26
  403d92:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403d96:	941a      	str	r4, [sp, #104]	; 0x68
  403d98:	f53f ae2f 	bmi.w	4039fa <_svfprintf_r+0x296>
  403d9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403d9e:	06ed      	lsls	r5, r5, #27
  403da0:	f140 8443 	bpl.w	40462a <_svfprintf_r+0xec6>
  403da4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  403da8:	2500      	movs	r5, #0
  403daa:	f8dc 4000 	ldr.w	r4, [ip]
  403dae:	f10c 0c04 	add.w	ip, ip, #4
  403db2:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403db6:	e62b      	b.n	403a10 <_svfprintf_r+0x2ac>
  403db8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403dbc:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403dc0:	f01c 0f20 	tst.w	ip, #32
  403dc4:	f000 8440 	beq.w	404648 <_svfprintf_r+0xee4>
  403dc8:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403dca:	6821      	ldr	r1, [r4, #0]
  403dcc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  403dce:	17e5      	asrs	r5, r4, #31
  403dd0:	462b      	mov	r3, r5
  403dd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403dd4:	4622      	mov	r2, r4
  403dd6:	3504      	adds	r5, #4
  403dd8:	9510      	str	r5, [sp, #64]	; 0x40
  403dda:	e9c1 2300 	strd	r2, r3, [r1]
  403dde:	e4e7      	b.n	4037b0 <_svfprintf_r+0x4c>
  403de0:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403de2:	f04f 0a00 	mov.w	sl, #0
  403de6:	6827      	ldr	r7, [r4, #0]
  403de8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  403dec:	1d25      	adds	r5, r4, #4
  403dee:	2f00      	cmp	r7, #0
  403df0:	f000 85e9 	beq.w	4049c6 <_svfprintf_r+0x1262>
  403df4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403df6:	4638      	mov	r0, r7
  403df8:	2c00      	cmp	r4, #0
  403dfa:	f2c0 859b 	blt.w	404934 <_svfprintf_r+0x11d0>
  403dfe:	4651      	mov	r1, sl
  403e00:	4622      	mov	r2, r4
  403e02:	f002 fab7 	bl	406374 <memchr>
  403e06:	2800      	cmp	r0, #0
  403e08:	f000 8613 	beq.w	404a32 <_svfprintf_r+0x12ce>
  403e0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  403e0e:	1bc0      	subs	r0, r0, r7
  403e10:	42a0      	cmp	r0, r4
  403e12:	bfb8      	it	lt
  403e14:	4604      	movlt	r4, r0
  403e16:	9510      	str	r5, [sp, #64]	; 0x40
  403e18:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
  403e1c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  403e20:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  403e24:	950b      	str	r5, [sp, #44]	; 0x2c
  403e26:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403e2a:	e632      	b.n	403a92 <_svfprintf_r+0x32e>
  403e2c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403e30:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
  403e34:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403e38:	f899 8000 	ldrb.w	r8, [r9]
  403e3c:	e4ee      	b.n	40381c <_svfprintf_r+0xb8>
  403e3e:	f899 8000 	ldrb.w	r8, [r9]
  403e42:	464b      	mov	r3, r9
  403e44:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
  403e48:	f000 847f 	beq.w	40474a <_svfprintf_r+0xfe6>
  403e4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403e4e:	f045 0510 	orr.w	r5, r5, #16
  403e52:	9509      	str	r5, [sp, #36]	; 0x24
  403e54:	e4e2      	b.n	40381c <_svfprintf_r+0xb8>
  403e56:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403e58:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403e5a:	6824      	ldr	r4, [r4, #0]
  403e5c:	1d2b      	adds	r3, r5, #4
  403e5e:	2c00      	cmp	r4, #0
  403e60:	940f      	str	r4, [sp, #60]	; 0x3c
  403e62:	f6ff ad7d 	blt.w	403960 <_svfprintf_r+0x1fc>
  403e66:	9310      	str	r3, [sp, #64]	; 0x40
  403e68:	f899 8000 	ldrb.w	r8, [r9]
  403e6c:	e4d6      	b.n	40381c <_svfprintf_r+0xb8>
  403e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403e70:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403e74:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403e76:	487d      	ldr	r0, [pc, #500]	; (40406c <_svfprintf_r+0x908>)
  403e78:	3504      	adds	r5, #4
  403e7a:	681c      	ldr	r4, [r3, #0]
  403e7c:	f04f 0878 	mov.w	r8, #120	; 0x78
  403e80:	2330      	movs	r3, #48	; 0x30
  403e82:	f04c 0c02 	orr.w	ip, ip, #2
  403e86:	9510      	str	r5, [sp, #64]	; 0x40
  403e88:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  403e8c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403e90:	2500      	movs	r5, #0
  403e92:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
  403e96:	901a      	str	r0, [sp, #104]	; 0x68
  403e98:	2302      	movs	r3, #2
  403e9a:	e5cd      	b.n	403a38 <_svfprintf_r+0x2d4>
  403e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403e9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403ea0:	681a      	ldr	r2, [r3, #0]
  403ea2:	2401      	movs	r4, #1
  403ea4:	2300      	movs	r3, #0
  403ea6:	3504      	adds	r5, #4
  403ea8:	469a      	mov	sl, r3
  403eaa:	940b      	str	r4, [sp, #44]	; 0x2c
  403eac:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
  403eb0:	9510      	str	r5, [sp, #64]	; 0x40
  403eb2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  403eb6:	930a      	str	r3, [sp, #40]	; 0x28
  403eb8:	9314      	str	r3, [sp, #80]	; 0x50
  403eba:	af2e      	add	r7, sp, #184	; 0xb8
  403ebc:	e5ef      	b.n	403a9e <_svfprintf_r+0x33a>
  403ebe:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403ec0:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403ec4:	06a5      	lsls	r5, r4, #26
  403ec6:	f53f af4e 	bmi.w	403d66 <_svfprintf_r+0x602>
  403eca:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403ece:	f01c 0f10 	tst.w	ip, #16
  403ed2:	f040 82df 	bne.w	404494 <_svfprintf_r+0xd30>
  403ed6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403eda:	f01c 0f40 	tst.w	ip, #64	; 0x40
  403ede:	f000 82d9 	beq.w	404494 <_svfprintf_r+0xd30>
  403ee2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  403ee6:	f9bc 4000 	ldrsh.w	r4, [ip]
  403eea:	f10c 0c04 	add.w	ip, ip, #4
  403eee:	17e5      	asrs	r5, r4, #31
  403ef0:	4622      	mov	r2, r4
  403ef2:	462b      	mov	r3, r5
  403ef4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403ef8:	e73f      	b.n	403d7a <_svfprintf_r+0x616>
  403efa:	f899 8000 	ldrb.w	r8, [r9]
  403efe:	222b      	movs	r2, #43	; 0x2b
  403f00:	e48c      	b.n	40381c <_svfprintf_r+0xb8>
  403f02:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403f04:	f045 0508 	orr.w	r5, r5, #8
  403f08:	9509      	str	r5, [sp, #36]	; 0x24
  403f0a:	f899 8000 	ldrb.w	r8, [r9]
  403f0e:	e485      	b.n	40381c <_svfprintf_r+0xb8>
  403f10:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403f12:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403f16:	1deb      	adds	r3, r5, #7
  403f18:	f023 0307 	bic.w	r3, r3, #7
  403f1c:	f103 0c08 	add.w	ip, r3, #8
  403f20:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403f24:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f28:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  403f2c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  403f30:	f002 ffbe 	bl	406eb0 <__fpclassifyd>
  403f34:	2801      	cmp	r0, #1
  403f36:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  403f3a:	f040 835c 	bne.w	4045f6 <_svfprintf_r+0xe92>
  403f3e:	2200      	movs	r2, #0
  403f40:	2300      	movs	r3, #0
  403f42:	f003 fd1d 	bl	407980 <__aeabi_dcmplt>
  403f46:	2800      	cmp	r0, #0
  403f48:	f040 8563 	bne.w	404a12 <_svfprintf_r+0x12ae>
  403f4c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  403f50:	2503      	movs	r5, #3
  403f52:	950b      	str	r5, [sp, #44]	; 0x2c
  403f54:	9d09      	ldr	r5, [sp, #36]	; 0x24
  403f56:	4f46      	ldr	r7, [pc, #280]	; (404070 <_svfprintf_r+0x90c>)
  403f58:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  403f5c:	4b45      	ldr	r3, [pc, #276]	; (404074 <_svfprintf_r+0x910>)
  403f5e:	2400      	movs	r4, #0
  403f60:	9509      	str	r5, [sp, #36]	; 0x24
  403f62:	2500      	movs	r5, #0
  403f64:	940a      	str	r4, [sp, #40]	; 0x28
  403f66:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  403f6a:	bfd8      	it	le
  403f6c:	461f      	movle	r7, r3
  403f6e:	2403      	movs	r4, #3
  403f70:	9514      	str	r5, [sp, #80]	; 0x50
  403f72:	e58e      	b.n	403a92 <_svfprintf_r+0x32e>
  403f74:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  403f78:	f04c 0c20 	orr.w	ip, ip, #32
  403f7c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
  403f80:	f899 8000 	ldrb.w	r8, [r9]
  403f84:	e44a      	b.n	40381c <_svfprintf_r+0xb8>
  403f86:	9c10      	ldr	r4, [sp, #64]	; 0x40
  403f88:	1de3      	adds	r3, r4, #7
  403f8a:	f023 0307 	bic.w	r3, r3, #7
  403f8e:	f103 0508 	add.w	r5, r3, #8
  403f92:	9510      	str	r5, [sp, #64]	; 0x40
  403f94:	e9d3 4500 	ldrd	r4, r5, [r3]
  403f98:	2300      	movs	r3, #0
  403f9a:	e54d      	b.n	403a38 <_svfprintf_r+0x2d4>
  403f9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
  403f9e:	1deb      	adds	r3, r5, #7
  403fa0:	f023 0307 	bic.w	r3, r3, #7
  403fa4:	f103 0c08 	add.w	ip, r3, #8
  403fa8:	e9d3 4500 	ldrd	r4, r5, [r3]
  403fac:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  403fb0:	2301      	movs	r3, #1
  403fb2:	e541      	b.n	403a38 <_svfprintf_r+0x2d4>
  403fb4:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
  403fb8:	f1b8 0f00 	cmp.w	r8, #0
  403fbc:	f43f ace3 	beq.w	403986 <_svfprintf_r+0x222>
  403fc0:	2300      	movs	r3, #0
  403fc2:	f04f 0c01 	mov.w	ip, #1
  403fc6:	469a      	mov	sl, r3
  403fc8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  403fcc:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
  403fd0:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
  403fd4:	930a      	str	r3, [sp, #40]	; 0x28
  403fd6:	9314      	str	r3, [sp, #80]	; 0x50
  403fd8:	4664      	mov	r4, ip
  403fda:	af2e      	add	r7, sp, #184	; 0xb8
  403fdc:	e55f      	b.n	403a9e <_svfprintf_r+0x33a>
  403fde:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  403fe2:	e5b7      	b.n	403b54 <_svfprintf_r+0x3f0>
  403fe4:	2b01      	cmp	r3, #1
  403fe6:	f000 80ec 	beq.w	4041c2 <_svfprintf_r+0xa5e>
  403fea:	2b02      	cmp	r3, #2
  403fec:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
  403ff0:	d118      	bne.n	404024 <_svfprintf_r+0x8c0>
  403ff2:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
  403ff6:	4619      	mov	r1, r3
  403ff8:	f004 000f 	and.w	r0, r4, #15
  403ffc:	0922      	lsrs	r2, r4, #4
  403ffe:	f81c 0000 	ldrb.w	r0, [ip, r0]
  404002:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
  404006:	092b      	lsrs	r3, r5, #4
  404008:	7008      	strb	r0, [r1, #0]
  40400a:	ea52 0003 	orrs.w	r0, r2, r3
  40400e:	460f      	mov	r7, r1
  404010:	4614      	mov	r4, r2
  404012:	461d      	mov	r5, r3
  404014:	f101 31ff 	add.w	r1, r1, #4294967295
  404018:	d1ee      	bne.n	403ff8 <_svfprintf_r+0x894>
  40401a:	9d08      	ldr	r5, [sp, #32]
  40401c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  404020:	1bec      	subs	r4, r5, r7
  404022:	e52d      	b.n	403a80 <_svfprintf_r+0x31c>
  404024:	08e0      	lsrs	r0, r4, #3
  404026:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
  40402a:	f004 0207 	and.w	r2, r4, #7
  40402e:	08e9      	lsrs	r1, r5, #3
  404030:	3230      	adds	r2, #48	; 0x30
  404032:	ea50 0c01 	orrs.w	ip, r0, r1
  404036:	461f      	mov	r7, r3
  404038:	701a      	strb	r2, [r3, #0]
  40403a:	4604      	mov	r4, r0
  40403c:	460d      	mov	r5, r1
  40403e:	f103 33ff 	add.w	r3, r3, #4294967295
  404042:	d1ef      	bne.n	404024 <_svfprintf_r+0x8c0>
  404044:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404046:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
  40404a:	07e0      	lsls	r0, r4, #31
  40404c:	4639      	mov	r1, r7
  40404e:	f140 80c1 	bpl.w	4041d4 <_svfprintf_r+0xa70>
  404052:	2a30      	cmp	r2, #48	; 0x30
  404054:	f000 80be 	beq.w	4041d4 <_svfprintf_r+0xa70>
  404058:	9d08      	ldr	r5, [sp, #32]
  40405a:	461f      	mov	r7, r3
  40405c:	2330      	movs	r3, #48	; 0x30
  40405e:	1bec      	subs	r4, r5, r7
  404060:	f801 3c01 	strb.w	r3, [r1, #-1]
  404064:	e50c      	b.n	403a80 <_svfprintf_r+0x31c>
  404066:	bf00      	nop
  404068:	00408128 	.word	0x00408128
  40406c:	0040813c 	.word	0x0040813c
  404070:	0040811c 	.word	0x0040811c
  404074:	00408118 	.word	0x00408118
  404078:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  40407c:	f340 80ad 	ble.w	4041da <_svfprintf_r+0xa76>
  404080:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  404084:	2200      	movs	r2, #0
  404086:	2300      	movs	r3, #0
  404088:	f8cd c01c 	str.w	ip, [sp, #28]
  40408c:	f003 fc6e 	bl	40796c <__aeabi_dcmpeq>
  404090:	f8dd c01c 	ldr.w	ip, [sp, #28]
  404094:	2800      	cmp	r0, #0
  404096:	f000 8126 	beq.w	4042e6 <_svfprintf_r+0xb82>
  40409a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40409c:	49aa      	ldr	r1, [pc, #680]	; (404348 <_svfprintf_r+0xbe4>)
  40409e:	3301      	adds	r3, #1
  4040a0:	f10c 0c01 	add.w	ip, ip, #1
  4040a4:	2201      	movs	r2, #1
  4040a6:	2b07      	cmp	r3, #7
  4040a8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4040ac:	932c      	str	r3, [sp, #176]	; 0xb0
  4040ae:	e886 0006 	stmia.w	r6, {r1, r2}
  4040b2:	f300 82ed 	bgt.w	404690 <_svfprintf_r+0xf2c>
  4040b6:	3608      	adds	r6, #8
  4040b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4040ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4040bc:	42a3      	cmp	r3, r4
  4040be:	db03      	blt.n	4040c8 <_svfprintf_r+0x964>
  4040c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4040c2:	07ec      	lsls	r4, r5, #31
  4040c4:	f57f adc0 	bpl.w	403c48 <_svfprintf_r+0x4e4>
  4040c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4040ca:	9c18      	ldr	r4, [sp, #96]	; 0x60
  4040cc:	3301      	adds	r3, #1
  4040ce:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4040d0:	44a4      	add	ip, r4
  4040d2:	2b07      	cmp	r3, #7
  4040d4:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4040d8:	6035      	str	r5, [r6, #0]
  4040da:	6074      	str	r4, [r6, #4]
  4040dc:	932c      	str	r3, [sp, #176]	; 0xb0
  4040de:	f300 833e 	bgt.w	40475e <_svfprintf_r+0xffa>
  4040e2:	3608      	adds	r6, #8
  4040e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4040e6:	1e6c      	subs	r4, r5, #1
  4040e8:	2c00      	cmp	r4, #0
  4040ea:	f77f adad 	ble.w	403c48 <_svfprintf_r+0x4e4>
  4040ee:	2c10      	cmp	r4, #16
  4040f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4040f2:	4d96      	ldr	r5, [pc, #600]	; (40434c <_svfprintf_r+0xbe8>)
  4040f4:	f340 8197 	ble.w	404426 <_svfprintf_r+0xcc2>
  4040f8:	2710      	movs	r7, #16
  4040fa:	4662      	mov	r2, ip
  4040fc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  404100:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  404104:	e004      	b.n	404110 <_svfprintf_r+0x9ac>
  404106:	3608      	adds	r6, #8
  404108:	3c10      	subs	r4, #16
  40410a:	2c10      	cmp	r4, #16
  40410c:	f340 818a 	ble.w	404424 <_svfprintf_r+0xcc0>
  404110:	3301      	adds	r3, #1
  404112:	3210      	adds	r2, #16
  404114:	2b07      	cmp	r3, #7
  404116:	922d      	str	r2, [sp, #180]	; 0xb4
  404118:	932c      	str	r3, [sp, #176]	; 0xb0
  40411a:	e886 00a0 	stmia.w	r6, {r5, r7}
  40411e:	ddf2      	ble.n	404106 <_svfprintf_r+0x9a2>
  404120:	4640      	mov	r0, r8
  404122:	4651      	mov	r1, sl
  404124:	aa2b      	add	r2, sp, #172	; 0xac
  404126:	f002 fefd 	bl	406f24 <__ssprint_r>
  40412a:	2800      	cmp	r0, #0
  40412c:	f47f ac32 	bne.w	403994 <_svfprintf_r+0x230>
  404130:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  404132:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404134:	ae38      	add	r6, sp, #224	; 0xe0
  404136:	e7e7      	b.n	404108 <_svfprintf_r+0x9a4>
  404138:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40413a:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40413c:	ebc0 0a05 	rsb	sl, r0, r5
  404140:	f1ba 0f00 	cmp.w	sl, #0
  404144:	f77f ad2e 	ble.w	403ba4 <_svfprintf_r+0x440>
  404148:	f1ba 0f10 	cmp.w	sl, #16
  40414c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40414e:	4d7f      	ldr	r5, [pc, #508]	; (40434c <_svfprintf_r+0xbe8>)
  404150:	dd2b      	ble.n	4041aa <_svfprintf_r+0xa46>
  404152:	9412      	str	r4, [sp, #72]	; 0x48
  404154:	4632      	mov	r2, r6
  404156:	f04f 0b10 	mov.w	fp, #16
  40415a:	462e      	mov	r6, r5
  40415c:	4661      	mov	r1, ip
  40415e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  404160:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  404162:	e006      	b.n	404172 <_svfprintf_r+0xa0e>
  404164:	f1aa 0a10 	sub.w	sl, sl, #16
  404168:	f1ba 0f10 	cmp.w	sl, #16
  40416c:	f102 0208 	add.w	r2, r2, #8
  404170:	dd17      	ble.n	4041a2 <_svfprintf_r+0xa3e>
  404172:	3301      	adds	r3, #1
  404174:	3110      	adds	r1, #16
  404176:	2b07      	cmp	r3, #7
  404178:	912d      	str	r1, [sp, #180]	; 0xb4
  40417a:	932c      	str	r3, [sp, #176]	; 0xb0
  40417c:	e882 0840 	stmia.w	r2, {r6, fp}
  404180:	ddf0      	ble.n	404164 <_svfprintf_r+0xa00>
  404182:	4620      	mov	r0, r4
  404184:	4629      	mov	r1, r5
  404186:	aa2b      	add	r2, sp, #172	; 0xac
  404188:	f002 fecc 	bl	406f24 <__ssprint_r>
  40418c:	2800      	cmp	r0, #0
  40418e:	f47f ac01 	bne.w	403994 <_svfprintf_r+0x230>
  404192:	f1aa 0a10 	sub.w	sl, sl, #16
  404196:	f1ba 0f10 	cmp.w	sl, #16
  40419a:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40419c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40419e:	aa38      	add	r2, sp, #224	; 0xe0
  4041a0:	dce7      	bgt.n	404172 <_svfprintf_r+0xa0e>
  4041a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4041a4:	4635      	mov	r5, r6
  4041a6:	468c      	mov	ip, r1
  4041a8:	4616      	mov	r6, r2
  4041aa:	3301      	adds	r3, #1
  4041ac:	44d4      	add	ip, sl
  4041ae:	2b07      	cmp	r3, #7
  4041b0:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4041b4:	932c      	str	r3, [sp, #176]	; 0xb0
  4041b6:	e886 0420 	stmia.w	r6, {r5, sl}
  4041ba:	f300 820f 	bgt.w	4045dc <_svfprintf_r+0xe78>
  4041be:	3608      	adds	r6, #8
  4041c0:	e4f0      	b.n	403ba4 <_svfprintf_r+0x440>
  4041c2:	2d00      	cmp	r5, #0
  4041c4:	bf08      	it	eq
  4041c6:	2c0a      	cmpeq	r4, #10
  4041c8:	f080 8138 	bcs.w	40443c <_svfprintf_r+0xcd8>
  4041cc:	3430      	adds	r4, #48	; 0x30
  4041ce:	af48      	add	r7, sp, #288	; 0x120
  4041d0:	f807 4d41 	strb.w	r4, [r7, #-65]!
  4041d4:	9d08      	ldr	r5, [sp, #32]
  4041d6:	1bec      	subs	r4, r5, r7
  4041d8:	e452      	b.n	403a80 <_svfprintf_r+0x31c>
  4041da:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4041dc:	2c01      	cmp	r4, #1
  4041de:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4041e0:	f340 81d2 	ble.w	404588 <_svfprintf_r+0xe24>
  4041e4:	3401      	adds	r4, #1
  4041e6:	f10c 0301 	add.w	r3, ip, #1
  4041ea:	2201      	movs	r2, #1
  4041ec:	2c07      	cmp	r4, #7
  4041ee:	932d      	str	r3, [sp, #180]	; 0xb4
  4041f0:	6037      	str	r7, [r6, #0]
  4041f2:	942c      	str	r4, [sp, #176]	; 0xb0
  4041f4:	6072      	str	r2, [r6, #4]
  4041f6:	f300 81d8 	bgt.w	4045aa <_svfprintf_r+0xe46>
  4041fa:	3608      	adds	r6, #8
  4041fc:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4041fe:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  404202:	3401      	adds	r4, #1
  404204:	6035      	str	r5, [r6, #0]
  404206:	9d18      	ldr	r5, [sp, #96]	; 0x60
  404208:	4498      	add	r8, r3
  40420a:	2c07      	cmp	r4, #7
  40420c:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  404210:	942c      	str	r4, [sp, #176]	; 0xb0
  404212:	6075      	str	r5, [r6, #4]
  404214:	f300 81d5 	bgt.w	4045c2 <_svfprintf_r+0xe5e>
  404218:	3608      	adds	r6, #8
  40421a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40421e:	2200      	movs	r2, #0
  404220:	2300      	movs	r3, #0
  404222:	f003 fba3 	bl	40796c <__aeabi_dcmpeq>
  404226:	9d11      	ldr	r5, [sp, #68]	; 0x44
  404228:	2800      	cmp	r0, #0
  40422a:	f040 80b9 	bne.w	4043a0 <_svfprintf_r+0xc3c>
  40422e:	1e6b      	subs	r3, r5, #1
  404230:	3401      	adds	r4, #1
  404232:	3701      	adds	r7, #1
  404234:	4498      	add	r8, r3
  404236:	2c07      	cmp	r4, #7
  404238:	942c      	str	r4, [sp, #176]	; 0xb0
  40423a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40423e:	6037      	str	r7, [r6, #0]
  404240:	6073      	str	r3, [r6, #4]
  404242:	f300 80e2 	bgt.w	40440a <_svfprintf_r+0xca6>
  404246:	3608      	adds	r6, #8
  404248:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
  40424c:	3401      	adds	r4, #1
  40424e:	9d19      	ldr	r5, [sp, #100]	; 0x64
  404250:	44c4      	add	ip, r8
  404252:	ab27      	add	r3, sp, #156	; 0x9c
  404254:	2c07      	cmp	r4, #7
  404256:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40425a:	942c      	str	r4, [sp, #176]	; 0xb0
  40425c:	e886 0028 	stmia.w	r6, {r3, r5}
  404260:	f77f acf1 	ble.w	403c46 <_svfprintf_r+0x4e2>
  404264:	980d      	ldr	r0, [sp, #52]	; 0x34
  404266:	990c      	ldr	r1, [sp, #48]	; 0x30
  404268:	aa2b      	add	r2, sp, #172	; 0xac
  40426a:	f002 fe5b 	bl	406f24 <__ssprint_r>
  40426e:	2800      	cmp	r0, #0
  404270:	f47f ab90 	bne.w	403994 <_svfprintf_r+0x230>
  404274:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404278:	ae38      	add	r6, sp, #224	; 0xe0
  40427a:	e4e5      	b.n	403c48 <_svfprintf_r+0x4e4>
  40427c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40427e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404280:	aa2b      	add	r2, sp, #172	; 0xac
  404282:	f002 fe4f 	bl	406f24 <__ssprint_r>
  404286:	2800      	cmp	r0, #0
  404288:	f43f ad37 	beq.w	403cfa <_svfprintf_r+0x596>
  40428c:	f7ff bb82 	b.w	403994 <_svfprintf_r+0x230>
  404290:	980d      	ldr	r0, [sp, #52]	; 0x34
  404292:	990c      	ldr	r1, [sp, #48]	; 0x30
  404294:	aa2b      	add	r2, sp, #172	; 0xac
  404296:	f002 fe45 	bl	406f24 <__ssprint_r>
  40429a:	2800      	cmp	r0, #0
  40429c:	f47f ab7a 	bne.w	403994 <_svfprintf_r+0x230>
  4042a0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4042a4:	ae38      	add	r6, sp, #224	; 0xe0
  4042a6:	e4bf      	b.n	403c28 <_svfprintf_r+0x4c4>
  4042a8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4042aa:	990c      	ldr	r1, [sp, #48]	; 0x30
  4042ac:	aa2b      	add	r2, sp, #172	; 0xac
  4042ae:	f002 fe39 	bl	406f24 <__ssprint_r>
  4042b2:	2800      	cmp	r0, #0
  4042b4:	f47f ab6e 	bne.w	403994 <_svfprintf_r+0x230>
  4042b8:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4042bc:	ae38      	add	r6, sp, #224	; 0xe0
  4042be:	e46d      	b.n	403b9c <_svfprintf_r+0x438>
  4042c0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4042c2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4042c4:	aa2b      	add	r2, sp, #172	; 0xac
  4042c6:	f002 fe2d 	bl	406f24 <__ssprint_r>
  4042ca:	2800      	cmp	r0, #0
  4042cc:	f47f ab62 	bne.w	403994 <_svfprintf_r+0x230>
  4042d0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4042d4:	ae38      	add	r6, sp, #224	; 0xe0
  4042d6:	e450      	b.n	403b7a <_svfprintf_r+0x416>
  4042d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4042da:	af38      	add	r7, sp, #224	; 0xe0
  4042dc:	f7ff bbd0 	b.w	403a80 <_svfprintf_r+0x31c>
  4042e0:	2302      	movs	r3, #2
  4042e2:	f7ff bba9 	b.w	403a38 <_svfprintf_r+0x2d4>
  4042e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4042e8:	2b00      	cmp	r3, #0
  4042ea:	f340 81dd 	ble.w	4046a8 <_svfprintf_r+0xf44>
  4042ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
  4042f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4042f2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  4042f6:	42ac      	cmp	r4, r5
  4042f8:	bfa8      	it	ge
  4042fa:	462c      	movge	r4, r5
  4042fc:	2c00      	cmp	r4, #0
  4042fe:	44ba      	add	sl, r7
  404300:	dd0b      	ble.n	40431a <_svfprintf_r+0xbb6>
  404302:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404304:	44a4      	add	ip, r4
  404306:	3301      	adds	r3, #1
  404308:	2b07      	cmp	r3, #7
  40430a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40430e:	6037      	str	r7, [r6, #0]
  404310:	6074      	str	r4, [r6, #4]
  404312:	932c      	str	r3, [sp, #176]	; 0xb0
  404314:	f300 831e 	bgt.w	404954 <_svfprintf_r+0x11f0>
  404318:	3608      	adds	r6, #8
  40431a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40431c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  404320:	1b2c      	subs	r4, r5, r4
  404322:	2c00      	cmp	r4, #0
  404324:	f340 80d7 	ble.w	4044d6 <_svfprintf_r+0xd72>
  404328:	2c10      	cmp	r4, #16
  40432a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40432c:	4d07      	ldr	r5, [pc, #28]	; (40434c <_svfprintf_r+0xbe8>)
  40432e:	f340 81a3 	ble.w	404678 <_svfprintf_r+0xf14>
  404332:	970a      	str	r7, [sp, #40]	; 0x28
  404334:	f04f 0810 	mov.w	r8, #16
  404338:	462f      	mov	r7, r5
  40433a:	4662      	mov	r2, ip
  40433c:	4625      	mov	r5, r4
  40433e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  404342:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404344:	e009      	b.n	40435a <_svfprintf_r+0xbf6>
  404346:	bf00      	nop
  404348:	00408158 	.word	0x00408158
  40434c:	00408108 	.word	0x00408108
  404350:	3608      	adds	r6, #8
  404352:	3d10      	subs	r5, #16
  404354:	2d10      	cmp	r5, #16
  404356:	f340 818b 	ble.w	404670 <_svfprintf_r+0xf0c>
  40435a:	3301      	adds	r3, #1
  40435c:	3210      	adds	r2, #16
  40435e:	2b07      	cmp	r3, #7
  404360:	922d      	str	r2, [sp, #180]	; 0xb4
  404362:	932c      	str	r3, [sp, #176]	; 0xb0
  404364:	e886 0180 	stmia.w	r6, {r7, r8}
  404368:	ddf2      	ble.n	404350 <_svfprintf_r+0xbec>
  40436a:	4658      	mov	r0, fp
  40436c:	4621      	mov	r1, r4
  40436e:	aa2b      	add	r2, sp, #172	; 0xac
  404370:	f002 fdd8 	bl	406f24 <__ssprint_r>
  404374:	2800      	cmp	r0, #0
  404376:	f47f ab0d 	bne.w	403994 <_svfprintf_r+0x230>
  40437a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  40437c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40437e:	ae38      	add	r6, sp, #224	; 0xe0
  404380:	e7e7      	b.n	404352 <_svfprintf_r+0xbee>
  404382:	980d      	ldr	r0, [sp, #52]	; 0x34
  404384:	990c      	ldr	r1, [sp, #48]	; 0x30
  404386:	aa2b      	add	r2, sp, #172	; 0xac
  404388:	f002 fdcc 	bl	406f24 <__ssprint_r>
  40438c:	2800      	cmp	r0, #0
  40438e:	f47f ab01 	bne.w	403994 <_svfprintf_r+0x230>
  404392:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  404396:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  40439a:	ae38      	add	r6, sp, #224	; 0xe0
  40439c:	f7ff bbda 	b.w	403b54 <_svfprintf_r+0x3f0>
  4043a0:	1e6f      	subs	r7, r5, #1
  4043a2:	2f00      	cmp	r7, #0
  4043a4:	f77f af50 	ble.w	404248 <_svfprintf_r+0xae4>
  4043a8:	2f10      	cmp	r7, #16
  4043aa:	4dae      	ldr	r5, [pc, #696]	; (404664 <_svfprintf_r+0xf00>)
  4043ac:	dd23      	ble.n	4043f6 <_svfprintf_r+0xc92>
  4043ae:	4643      	mov	r3, r8
  4043b0:	f04f 0a10 	mov.w	sl, #16
  4043b4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4043b8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4043bc:	e004      	b.n	4043c8 <_svfprintf_r+0xc64>
  4043be:	3f10      	subs	r7, #16
  4043c0:	2f10      	cmp	r7, #16
  4043c2:	f106 0608 	add.w	r6, r6, #8
  4043c6:	dd15      	ble.n	4043f4 <_svfprintf_r+0xc90>
  4043c8:	3401      	adds	r4, #1
  4043ca:	3310      	adds	r3, #16
  4043cc:	2c07      	cmp	r4, #7
  4043ce:	932d      	str	r3, [sp, #180]	; 0xb4
  4043d0:	942c      	str	r4, [sp, #176]	; 0xb0
  4043d2:	e886 0420 	stmia.w	r6, {r5, sl}
  4043d6:	ddf2      	ble.n	4043be <_svfprintf_r+0xc5a>
  4043d8:	4640      	mov	r0, r8
  4043da:	4659      	mov	r1, fp
  4043dc:	aa2b      	add	r2, sp, #172	; 0xac
  4043de:	f002 fda1 	bl	406f24 <__ssprint_r>
  4043e2:	2800      	cmp	r0, #0
  4043e4:	f47f aad6 	bne.w	403994 <_svfprintf_r+0x230>
  4043e8:	3f10      	subs	r7, #16
  4043ea:	2f10      	cmp	r7, #16
  4043ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4043ee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4043f0:	ae38      	add	r6, sp, #224	; 0xe0
  4043f2:	dce9      	bgt.n	4043c8 <_svfprintf_r+0xc64>
  4043f4:	4698      	mov	r8, r3
  4043f6:	3401      	adds	r4, #1
  4043f8:	44b8      	add	r8, r7
  4043fa:	2c07      	cmp	r4, #7
  4043fc:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  404400:	942c      	str	r4, [sp, #176]	; 0xb0
  404402:	e886 00a0 	stmia.w	r6, {r5, r7}
  404406:	f77f af1e 	ble.w	404246 <_svfprintf_r+0xae2>
  40440a:	980d      	ldr	r0, [sp, #52]	; 0x34
  40440c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40440e:	aa2b      	add	r2, sp, #172	; 0xac
  404410:	f002 fd88 	bl	406f24 <__ssprint_r>
  404414:	2800      	cmp	r0, #0
  404416:	f47f aabd 	bne.w	403994 <_svfprintf_r+0x230>
  40441a:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  40441e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  404420:	ae38      	add	r6, sp, #224	; 0xe0
  404422:	e711      	b.n	404248 <_svfprintf_r+0xae4>
  404424:	4694      	mov	ip, r2
  404426:	3301      	adds	r3, #1
  404428:	44a4      	add	ip, r4
  40442a:	2b07      	cmp	r3, #7
  40442c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404430:	932c      	str	r3, [sp, #176]	; 0xb0
  404432:	6035      	str	r5, [r6, #0]
  404434:	6074      	str	r4, [r6, #4]
  404436:	f77f ac06 	ble.w	403c46 <_svfprintf_r+0x4e2>
  40443a:	e713      	b.n	404264 <_svfprintf_r+0xb00>
  40443c:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
  404440:	4620      	mov	r0, r4
  404442:	4629      	mov	r1, r5
  404444:	220a      	movs	r2, #10
  404446:	2300      	movs	r3, #0
  404448:	f003 faea 	bl	407a20 <__aeabi_uldivmod>
  40444c:	3230      	adds	r2, #48	; 0x30
  40444e:	f88b 2000 	strb.w	r2, [fp]
  404452:	4620      	mov	r0, r4
  404454:	4629      	mov	r1, r5
  404456:	220a      	movs	r2, #10
  404458:	2300      	movs	r3, #0
  40445a:	f003 fae1 	bl	407a20 <__aeabi_uldivmod>
  40445e:	4604      	mov	r4, r0
  404460:	460d      	mov	r5, r1
  404462:	ea54 0c05 	orrs.w	ip, r4, r5
  404466:	465f      	mov	r7, fp
  404468:	f10b 3bff 	add.w	fp, fp, #4294967295
  40446c:	d1e8      	bne.n	404440 <_svfprintf_r+0xcdc>
  40446e:	9d08      	ldr	r5, [sp, #32]
  404470:	1bec      	subs	r4, r5, r7
  404472:	f7ff bb05 	b.w	403a80 <_svfprintf_r+0x31c>
  404476:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404478:	2301      	movs	r3, #1
  40447a:	682c      	ldr	r4, [r5, #0]
  40447c:	3504      	adds	r5, #4
  40447e:	9510      	str	r5, [sp, #64]	; 0x40
  404480:	2500      	movs	r5, #0
  404482:	f7ff bad9 	b.w	403a38 <_svfprintf_r+0x2d4>
  404486:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404488:	682c      	ldr	r4, [r5, #0]
  40448a:	3504      	adds	r5, #4
  40448c:	9510      	str	r5, [sp, #64]	; 0x40
  40448e:	2500      	movs	r5, #0
  404490:	f7ff bad2 	b.w	403a38 <_svfprintf_r+0x2d4>
  404494:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404496:	682c      	ldr	r4, [r5, #0]
  404498:	3504      	adds	r5, #4
  40449a:	9510      	str	r5, [sp, #64]	; 0x40
  40449c:	17e5      	asrs	r5, r4, #31
  40449e:	4622      	mov	r2, r4
  4044a0:	462b      	mov	r3, r5
  4044a2:	2a00      	cmp	r2, #0
  4044a4:	f173 0c00 	sbcs.w	ip, r3, #0
  4044a8:	f6bf ac6c 	bge.w	403d84 <_svfprintf_r+0x620>
  4044ac:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4044b0:	4264      	negs	r4, r4
  4044b2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4044b6:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  4044ba:	2301      	movs	r3, #1
  4044bc:	f7ff bac0 	b.w	403a40 <_svfprintf_r+0x2dc>
  4044c0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4044c2:	990c      	ldr	r1, [sp, #48]	; 0x30
  4044c4:	aa2b      	add	r2, sp, #172	; 0xac
  4044c6:	f002 fd2d 	bl	406f24 <__ssprint_r>
  4044ca:	2800      	cmp	r0, #0
  4044cc:	f47f aa62 	bne.w	403994 <_svfprintf_r+0x230>
  4044d0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4044d4:	ae38      	add	r6, sp, #224	; 0xe0
  4044d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4044d8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4044da:	442f      	add	r7, r5
  4044dc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4044de:	42ac      	cmp	r4, r5
  4044e0:	db42      	blt.n	404568 <_svfprintf_r+0xe04>
  4044e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4044e4:	07e9      	lsls	r1, r5, #31
  4044e6:	d43f      	bmi.n	404568 <_svfprintf_r+0xe04>
  4044e8:	9811      	ldr	r0, [sp, #68]	; 0x44
  4044ea:	ebc7 050a 	rsb	r5, r7, sl
  4044ee:	1b04      	subs	r4, r0, r4
  4044f0:	42ac      	cmp	r4, r5
  4044f2:	bfb8      	it	lt
  4044f4:	4625      	movlt	r5, r4
  4044f6:	2d00      	cmp	r5, #0
  4044f8:	dd0b      	ble.n	404512 <_svfprintf_r+0xdae>
  4044fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4044fc:	44ac      	add	ip, r5
  4044fe:	3301      	adds	r3, #1
  404500:	2b07      	cmp	r3, #7
  404502:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404506:	6037      	str	r7, [r6, #0]
  404508:	6075      	str	r5, [r6, #4]
  40450a:	932c      	str	r3, [sp, #176]	; 0xb0
  40450c:	f300 824c 	bgt.w	4049a8 <_svfprintf_r+0x1244>
  404510:	3608      	adds	r6, #8
  404512:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  404516:	1b64      	subs	r4, r4, r5
  404518:	2c00      	cmp	r4, #0
  40451a:	f77f ab95 	ble.w	403c48 <_svfprintf_r+0x4e4>
  40451e:	2c10      	cmp	r4, #16
  404520:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404522:	4d50      	ldr	r5, [pc, #320]	; (404664 <_svfprintf_r+0xf00>)
  404524:	f77f af7f 	ble.w	404426 <_svfprintf_r+0xcc2>
  404528:	2710      	movs	r7, #16
  40452a:	4662      	mov	r2, ip
  40452c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  404530:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  404534:	e004      	b.n	404540 <_svfprintf_r+0xddc>
  404536:	3608      	adds	r6, #8
  404538:	3c10      	subs	r4, #16
  40453a:	2c10      	cmp	r4, #16
  40453c:	f77f af72 	ble.w	404424 <_svfprintf_r+0xcc0>
  404540:	3301      	adds	r3, #1
  404542:	3210      	adds	r2, #16
  404544:	2b07      	cmp	r3, #7
  404546:	922d      	str	r2, [sp, #180]	; 0xb4
  404548:	932c      	str	r3, [sp, #176]	; 0xb0
  40454a:	e886 00a0 	stmia.w	r6, {r5, r7}
  40454e:	ddf2      	ble.n	404536 <_svfprintf_r+0xdd2>
  404550:	4640      	mov	r0, r8
  404552:	4651      	mov	r1, sl
  404554:	aa2b      	add	r2, sp, #172	; 0xac
  404556:	f002 fce5 	bl	406f24 <__ssprint_r>
  40455a:	2800      	cmp	r0, #0
  40455c:	f47f aa1a 	bne.w	403994 <_svfprintf_r+0x230>
  404560:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
  404562:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404564:	ae38      	add	r6, sp, #224	; 0xe0
  404566:	e7e7      	b.n	404538 <_svfprintf_r+0xdd4>
  404568:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40456a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  40456c:	44ac      	add	ip, r5
  40456e:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404570:	3301      	adds	r3, #1
  404572:	6035      	str	r5, [r6, #0]
  404574:	9d18      	ldr	r5, [sp, #96]	; 0x60
  404576:	2b07      	cmp	r3, #7
  404578:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  40457c:	6075      	str	r5, [r6, #4]
  40457e:	932c      	str	r3, [sp, #176]	; 0xb0
  404580:	f300 81f4 	bgt.w	40496c <_svfprintf_r+0x1208>
  404584:	3608      	adds	r6, #8
  404586:	e7af      	b.n	4044e8 <_svfprintf_r+0xd84>
  404588:	9d09      	ldr	r5, [sp, #36]	; 0x24
  40458a:	07ea      	lsls	r2, r5, #31
  40458c:	f53f ae2a 	bmi.w	4041e4 <_svfprintf_r+0xa80>
  404590:	3401      	adds	r4, #1
  404592:	f10c 0801 	add.w	r8, ip, #1
  404596:	2301      	movs	r3, #1
  404598:	2c07      	cmp	r4, #7
  40459a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
  40459e:	942c      	str	r4, [sp, #176]	; 0xb0
  4045a0:	6037      	str	r7, [r6, #0]
  4045a2:	6073      	str	r3, [r6, #4]
  4045a4:	f77f ae4f 	ble.w	404246 <_svfprintf_r+0xae2>
  4045a8:	e72f      	b.n	40440a <_svfprintf_r+0xca6>
  4045aa:	980d      	ldr	r0, [sp, #52]	; 0x34
  4045ac:	990c      	ldr	r1, [sp, #48]	; 0x30
  4045ae:	aa2b      	add	r2, sp, #172	; 0xac
  4045b0:	f002 fcb8 	bl	406f24 <__ssprint_r>
  4045b4:	2800      	cmp	r0, #0
  4045b6:	f47f a9ed 	bne.w	403994 <_svfprintf_r+0x230>
  4045ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  4045bc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4045be:	ae38      	add	r6, sp, #224	; 0xe0
  4045c0:	e61c      	b.n	4041fc <_svfprintf_r+0xa98>
  4045c2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4045c4:	990c      	ldr	r1, [sp, #48]	; 0x30
  4045c6:	aa2b      	add	r2, sp, #172	; 0xac
  4045c8:	f002 fcac 	bl	406f24 <__ssprint_r>
  4045cc:	2800      	cmp	r0, #0
  4045ce:	f47f a9e1 	bne.w	403994 <_svfprintf_r+0x230>
  4045d2:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
  4045d6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
  4045d8:	ae38      	add	r6, sp, #224	; 0xe0
  4045da:	e61e      	b.n	40421a <_svfprintf_r+0xab6>
  4045dc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4045de:	990c      	ldr	r1, [sp, #48]	; 0x30
  4045e0:	aa2b      	add	r2, sp, #172	; 0xac
  4045e2:	f002 fc9f 	bl	406f24 <__ssprint_r>
  4045e6:	2800      	cmp	r0, #0
  4045e8:	f47f a9d4 	bne.w	403994 <_svfprintf_r+0x230>
  4045ec:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4045f0:	ae38      	add	r6, sp, #224	; 0xe0
  4045f2:	f7ff bad7 	b.w	403ba4 <_svfprintf_r+0x440>
  4045f6:	f002 fc5b 	bl	406eb0 <__fpclassifyd>
  4045fa:	2800      	cmp	r0, #0
  4045fc:	f040 80bb 	bne.w	404776 <_svfprintf_r+0x1012>
  404600:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404602:	4f19      	ldr	r7, [pc, #100]	; (404668 <_svfprintf_r+0xf04>)
  404604:	4b19      	ldr	r3, [pc, #100]	; (40466c <_svfprintf_r+0xf08>)
  404606:	f04f 0c03 	mov.w	ip, #3
  40460a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  40460e:	9409      	str	r4, [sp, #36]	; 0x24
  404610:	900a      	str	r0, [sp, #40]	; 0x28
  404612:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  404616:	9014      	str	r0, [sp, #80]	; 0x50
  404618:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  40461c:	bfd8      	it	le
  40461e:	461f      	movle	r7, r3
  404620:	4664      	mov	r4, ip
  404622:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  404626:	f7ff ba34 	b.w	403a92 <_svfprintf_r+0x32e>
  40462a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40462c:	0664      	lsls	r4, r4, #25
  40462e:	f140 8150 	bpl.w	4048d2 <_svfprintf_r+0x116e>
  404632:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  404636:	2500      	movs	r5, #0
  404638:	f8bc 4000 	ldrh.w	r4, [ip]
  40463c:	f10c 0c04 	add.w	ip, ip, #4
  404640:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404644:	f7ff b9e4 	b.w	403a10 <_svfprintf_r+0x2ac>
  404648:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  40464c:	f01c 0f10 	tst.w	ip, #16
  404650:	f000 8146 	beq.w	4048e0 <_svfprintf_r+0x117c>
  404654:	9c10      	ldr	r4, [sp, #64]	; 0x40
  404656:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  404658:	6823      	ldr	r3, [r4, #0]
  40465a:	3404      	adds	r4, #4
  40465c:	9410      	str	r4, [sp, #64]	; 0x40
  40465e:	601d      	str	r5, [r3, #0]
  404660:	f7ff b8a6 	b.w	4037b0 <_svfprintf_r+0x4c>
  404664:	00408108 	.word	0x00408108
  404668:	00408124 	.word	0x00408124
  40466c:	00408120 	.word	0x00408120
  404670:	462c      	mov	r4, r5
  404672:	463d      	mov	r5, r7
  404674:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404676:	4694      	mov	ip, r2
  404678:	3301      	adds	r3, #1
  40467a:	44a4      	add	ip, r4
  40467c:	2b07      	cmp	r3, #7
  40467e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404682:	932c      	str	r3, [sp, #176]	; 0xb0
  404684:	6035      	str	r5, [r6, #0]
  404686:	6074      	str	r4, [r6, #4]
  404688:	f73f af1a 	bgt.w	4044c0 <_svfprintf_r+0xd5c>
  40468c:	3608      	adds	r6, #8
  40468e:	e722      	b.n	4044d6 <_svfprintf_r+0xd72>
  404690:	980d      	ldr	r0, [sp, #52]	; 0x34
  404692:	990c      	ldr	r1, [sp, #48]	; 0x30
  404694:	aa2b      	add	r2, sp, #172	; 0xac
  404696:	f002 fc45 	bl	406f24 <__ssprint_r>
  40469a:	2800      	cmp	r0, #0
  40469c:	f47f a97a 	bne.w	403994 <_svfprintf_r+0x230>
  4046a0:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4046a4:	ae38      	add	r6, sp, #224	; 0xe0
  4046a6:	e507      	b.n	4040b8 <_svfprintf_r+0x954>
  4046a8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  4046aa:	49b7      	ldr	r1, [pc, #732]	; (404988 <_svfprintf_r+0x1224>)
  4046ac:	3201      	adds	r2, #1
  4046ae:	f10c 0c01 	add.w	ip, ip, #1
  4046b2:	2001      	movs	r0, #1
  4046b4:	2a07      	cmp	r2, #7
  4046b6:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  4046ba:	922c      	str	r2, [sp, #176]	; 0xb0
  4046bc:	6031      	str	r1, [r6, #0]
  4046be:	6070      	str	r0, [r6, #4]
  4046c0:	f300 80f7 	bgt.w	4048b2 <_svfprintf_r+0x114e>
  4046c4:	3608      	adds	r6, #8
  4046c6:	461c      	mov	r4, r3
  4046c8:	b92c      	cbnz	r4, 4046d6 <_svfprintf_r+0xf72>
  4046ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
  4046cc:	b91d      	cbnz	r5, 4046d6 <_svfprintf_r+0xf72>
  4046ce:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4046d0:	07e8      	lsls	r0, r5, #31
  4046d2:	f57f aab9 	bpl.w	403c48 <_svfprintf_r+0x4e4>
  4046d6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  4046d8:	9d15      	ldr	r5, [sp, #84]	; 0x54
  4046da:	9918      	ldr	r1, [sp, #96]	; 0x60
  4046dc:	3301      	adds	r3, #1
  4046de:	6035      	str	r5, [r6, #0]
  4046e0:	9d18      	ldr	r5, [sp, #96]	; 0x60
  4046e2:	4461      	add	r1, ip
  4046e4:	2b07      	cmp	r3, #7
  4046e6:	912d      	str	r1, [sp, #180]	; 0xb4
  4046e8:	6075      	str	r5, [r6, #4]
  4046ea:	932c      	str	r3, [sp, #176]	; 0xb0
  4046ec:	f300 81de 	bgt.w	404aac <_svfprintf_r+0x1348>
  4046f0:	f106 0208 	add.w	r2, r6, #8
  4046f4:	4264      	negs	r4, r4
  4046f6:	2c00      	cmp	r4, #0
  4046f8:	f340 810b 	ble.w	404912 <_svfprintf_r+0x11ae>
  4046fc:	2c10      	cmp	r4, #16
  4046fe:	4da3      	ldr	r5, [pc, #652]	; (40498c <_svfprintf_r+0x1228>)
  404700:	f340 8148 	ble.w	404994 <_svfprintf_r+0x1230>
  404704:	46a3      	mov	fp, r4
  404706:	2610      	movs	r6, #16
  404708:	460c      	mov	r4, r1
  40470a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  40470e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  404712:	e006      	b.n	404722 <_svfprintf_r+0xfbe>
  404714:	3208      	adds	r2, #8
  404716:	f1ab 0b10 	sub.w	fp, fp, #16
  40471a:	f1bb 0f10 	cmp.w	fp, #16
  40471e:	f340 8137 	ble.w	404990 <_svfprintf_r+0x122c>
  404722:	3301      	adds	r3, #1
  404724:	3410      	adds	r4, #16
  404726:	2b07      	cmp	r3, #7
  404728:	942d      	str	r4, [sp, #180]	; 0xb4
  40472a:	932c      	str	r3, [sp, #176]	; 0xb0
  40472c:	e882 0060 	stmia.w	r2, {r5, r6}
  404730:	ddf0      	ble.n	404714 <_svfprintf_r+0xfb0>
  404732:	4640      	mov	r0, r8
  404734:	4651      	mov	r1, sl
  404736:	aa2b      	add	r2, sp, #172	; 0xac
  404738:	f002 fbf4 	bl	406f24 <__ssprint_r>
  40473c:	2800      	cmp	r0, #0
  40473e:	f47f a929 	bne.w	403994 <_svfprintf_r+0x230>
  404742:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
  404744:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404746:	aa38      	add	r2, sp, #224	; 0xe0
  404748:	e7e5      	b.n	404716 <_svfprintf_r+0xfb2>
  40474a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40474c:	f109 0901 	add.w	r9, r9, #1
  404750:	f044 0420 	orr.w	r4, r4, #32
  404754:	9409      	str	r4, [sp, #36]	; 0x24
  404756:	f893 8001 	ldrb.w	r8, [r3, #1]
  40475a:	f7ff b85f 	b.w	40381c <_svfprintf_r+0xb8>
  40475e:	980d      	ldr	r0, [sp, #52]	; 0x34
  404760:	990c      	ldr	r1, [sp, #48]	; 0x30
  404762:	aa2b      	add	r2, sp, #172	; 0xac
  404764:	f002 fbde 	bl	406f24 <__ssprint_r>
  404768:	2800      	cmp	r0, #0
  40476a:	f47f a913 	bne.w	403994 <_svfprintf_r+0x230>
  40476e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404772:	ae38      	add	r6, sp, #224	; 0xe0
  404774:	e4b6      	b.n	4040e4 <_svfprintf_r+0x980>
  404776:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404778:	f028 0a20 	bic.w	sl, r8, #32
  40477c:	3501      	adds	r5, #1
  40477e:	f000 80a5 	beq.w	4048cc <_svfprintf_r+0x1168>
  404782:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  404786:	d104      	bne.n	404792 <_svfprintf_r+0x102e>
  404788:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40478a:	2d00      	cmp	r5, #0
  40478c:	bf08      	it	eq
  40478e:	2501      	moveq	r5, #1
  404790:	950a      	str	r5, [sp, #40]	; 0x28
  404792:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  404796:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40479a:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
  40479e:	2b00      	cmp	r3, #0
  4047a0:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  4047a4:	f2c0 819c 	blt.w	404ae0 <_svfprintf_r+0x137c>
  4047a8:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
  4047ac:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
  4047b0:	f04f 0b00 	mov.w	fp, #0
  4047b4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  4047b8:	f000 819b 	beq.w	404af2 <_svfprintf_r+0x138e>
  4047bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
  4047c0:	f000 81a9 	beq.w	404b16 <_svfprintf_r+0x13b2>
  4047c4:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  4047c8:	bf0a      	itet	eq
  4047ca:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
  4047cc:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4047ce:	1c65      	addeq	r5, r4, #1
  4047d0:	2002      	movs	r0, #2
  4047d2:	a925      	add	r1, sp, #148	; 0x94
  4047d4:	aa26      	add	r2, sp, #152	; 0x98
  4047d6:	ab29      	add	r3, sp, #164	; 0xa4
  4047d8:	e88d 0021 	stmia.w	sp, {r0, r5}
  4047dc:	9203      	str	r2, [sp, #12]
  4047de:	9304      	str	r3, [sp, #16]
  4047e0:	9102      	str	r1, [sp, #8]
  4047e2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4047e4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  4047e8:	f000 fad6 	bl	404d98 <_dtoa_r>
  4047ec:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
  4047f0:	4607      	mov	r7, r0
  4047f2:	d002      	beq.n	4047fa <_svfprintf_r+0x1096>
  4047f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
  4047f8:	d105      	bne.n	404806 <_svfprintf_r+0x10a2>
  4047fa:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4047fe:	f01c 0f01 	tst.w	ip, #1
  404802:	f000 819c 	beq.w	404b3e <_svfprintf_r+0x13da>
  404806:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  40480a:	eb07 0405 	add.w	r4, r7, r5
  40480e:	f000 811c 	beq.w	404a4a <_svfprintf_r+0x12e6>
  404812:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  404816:	2200      	movs	r2, #0
  404818:	2300      	movs	r3, #0
  40481a:	f003 f8a7 	bl	40796c <__aeabi_dcmpeq>
  40481e:	2800      	cmp	r0, #0
  404820:	f040 8105 	bne.w	404a2e <_svfprintf_r+0x12ca>
  404824:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  404826:	429c      	cmp	r4, r3
  404828:	d906      	bls.n	404838 <_svfprintf_r+0x10d4>
  40482a:	2130      	movs	r1, #48	; 0x30
  40482c:	1c5a      	adds	r2, r3, #1
  40482e:	9229      	str	r2, [sp, #164]	; 0xa4
  404830:	7019      	strb	r1, [r3, #0]
  404832:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  404834:	429c      	cmp	r4, r3
  404836:	d8f9      	bhi.n	40482c <_svfprintf_r+0x10c8>
  404838:	1bdb      	subs	r3, r3, r7
  40483a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  40483e:	9311      	str	r3, [sp, #68]	; 0x44
  404840:	f000 80ed 	beq.w	404a1e <_svfprintf_r+0x12ba>
  404844:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
  404848:	f340 81f2 	ble.w	404c30 <_svfprintf_r+0x14cc>
  40484c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
  404850:	f000 8168 	beq.w	404b24 <_svfprintf_r+0x13c0>
  404854:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404856:	9414      	str	r4, [sp, #80]	; 0x50
  404858:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40485a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40485c:	42ac      	cmp	r4, r5
  40485e:	f300 8132 	bgt.w	404ac6 <_svfprintf_r+0x1362>
  404862:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  404866:	f01c 0f01 	tst.w	ip, #1
  40486a:	f040 81ad 	bne.w	404bc8 <_svfprintf_r+0x1464>
  40486e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  404872:	462c      	mov	r4, r5
  404874:	f04f 0867 	mov.w	r8, #103	; 0x67
  404878:	f1bb 0f00 	cmp.w	fp, #0
  40487c:	f040 80b2 	bne.w	4049e4 <_svfprintf_r+0x1280>
  404880:	9d12      	ldr	r5, [sp, #72]	; 0x48
  404882:	930b      	str	r3, [sp, #44]	; 0x2c
  404884:	9509      	str	r5, [sp, #36]	; 0x24
  404886:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
  40488a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  40488e:	f7ff b900 	b.w	403a92 <_svfprintf_r+0x32e>
  404892:	980d      	ldr	r0, [sp, #52]	; 0x34
  404894:	2140      	movs	r1, #64	; 0x40
  404896:	f001 fad1 	bl	405e3c <_malloc_r>
  40489a:	6020      	str	r0, [r4, #0]
  40489c:	6120      	str	r0, [r4, #16]
  40489e:	2800      	cmp	r0, #0
  4048a0:	f000 81bf 	beq.w	404c22 <_svfprintf_r+0x14be>
  4048a4:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
  4048a8:	2340      	movs	r3, #64	; 0x40
  4048aa:	f8cc 3014 	str.w	r3, [ip, #20]
  4048ae:	f7fe bf6f 	b.w	403790 <_svfprintf_r+0x2c>
  4048b2:	980d      	ldr	r0, [sp, #52]	; 0x34
  4048b4:	990c      	ldr	r1, [sp, #48]	; 0x30
  4048b6:	aa2b      	add	r2, sp, #172	; 0xac
  4048b8:	f002 fb34 	bl	406f24 <__ssprint_r>
  4048bc:	2800      	cmp	r0, #0
  4048be:	f47f a869 	bne.w	403994 <_svfprintf_r+0x230>
  4048c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4048c4:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4048c8:	ae38      	add	r6, sp, #224	; 0xe0
  4048ca:	e6fd      	b.n	4046c8 <_svfprintf_r+0xf64>
  4048cc:	2406      	movs	r4, #6
  4048ce:	940a      	str	r4, [sp, #40]	; 0x28
  4048d0:	e75f      	b.n	404792 <_svfprintf_r+0x102e>
  4048d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  4048d4:	682c      	ldr	r4, [r5, #0]
  4048d6:	3504      	adds	r5, #4
  4048d8:	9510      	str	r5, [sp, #64]	; 0x40
  4048da:	2500      	movs	r5, #0
  4048dc:	f7ff b898 	b.w	403a10 <_svfprintf_r+0x2ac>
  4048e0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  4048e4:	f01c 0f40 	tst.w	ip, #64	; 0x40
  4048e8:	f000 8087 	beq.w	4049fa <_svfprintf_r+0x1296>
  4048ec:	9c10      	ldr	r4, [sp, #64]	; 0x40
  4048ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  4048f0:	6823      	ldr	r3, [r4, #0]
  4048f2:	3404      	adds	r4, #4
  4048f4:	9410      	str	r4, [sp, #64]	; 0x40
  4048f6:	801d      	strh	r5, [r3, #0]
  4048f8:	f7fe bf5a 	b.w	4037b0 <_svfprintf_r+0x4c>
  4048fc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4048fe:	990c      	ldr	r1, [sp, #48]	; 0x30
  404900:	aa2b      	add	r2, sp, #172	; 0xac
  404902:	f002 fb0f 	bl	406f24 <__ssprint_r>
  404906:	2800      	cmp	r0, #0
  404908:	f47f a844 	bne.w	403994 <_svfprintf_r+0x230>
  40490c:	992d      	ldr	r1, [sp, #180]	; 0xb4
  40490e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404910:	aa38      	add	r2, sp, #224	; 0xe0
  404912:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
  404916:	3301      	adds	r3, #1
  404918:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40491a:	448c      	add	ip, r1
  40491c:	2b07      	cmp	r3, #7
  40491e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
  404922:	932c      	str	r3, [sp, #176]	; 0xb0
  404924:	6017      	str	r7, [r2, #0]
  404926:	6054      	str	r4, [r2, #4]
  404928:	f73f ac9c 	bgt.w	404264 <_svfprintf_r+0xb00>
  40492c:	f102 0608 	add.w	r6, r2, #8
  404930:	f7ff b98a 	b.w	403c48 <_svfprintf_r+0x4e4>
  404934:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  404938:	f7fe fe26 	bl	403588 <strlen>
  40493c:	9510      	str	r5, [sp, #64]	; 0x40
  40493e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404940:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
  404944:	4604      	mov	r4, r0
  404946:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  40494a:	9514      	str	r5, [sp, #80]	; 0x50
  40494c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  404950:	f7ff b89f 	b.w	403a92 <_svfprintf_r+0x32e>
  404954:	980d      	ldr	r0, [sp, #52]	; 0x34
  404956:	990c      	ldr	r1, [sp, #48]	; 0x30
  404958:	aa2b      	add	r2, sp, #172	; 0xac
  40495a:	f002 fae3 	bl	406f24 <__ssprint_r>
  40495e:	2800      	cmp	r0, #0
  404960:	f47f a818 	bne.w	403994 <_svfprintf_r+0x230>
  404964:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404968:	ae38      	add	r6, sp, #224	; 0xe0
  40496a:	e4d6      	b.n	40431a <_svfprintf_r+0xbb6>
  40496c:	980d      	ldr	r0, [sp, #52]	; 0x34
  40496e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404970:	aa2b      	add	r2, sp, #172	; 0xac
  404972:	f002 fad7 	bl	406f24 <__ssprint_r>
  404976:	2800      	cmp	r0, #0
  404978:	f47f a80c 	bne.w	403994 <_svfprintf_r+0x230>
  40497c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40497e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  404982:	ae38      	add	r6, sp, #224	; 0xe0
  404984:	e5b0      	b.n	4044e8 <_svfprintf_r+0xd84>
  404986:	bf00      	nop
  404988:	00408158 	.word	0x00408158
  40498c:	00408108 	.word	0x00408108
  404990:	4621      	mov	r1, r4
  404992:	465c      	mov	r4, fp
  404994:	3301      	adds	r3, #1
  404996:	4421      	add	r1, r4
  404998:	2b07      	cmp	r3, #7
  40499a:	912d      	str	r1, [sp, #180]	; 0xb4
  40499c:	932c      	str	r3, [sp, #176]	; 0xb0
  40499e:	6015      	str	r5, [r2, #0]
  4049a0:	6054      	str	r4, [r2, #4]
  4049a2:	dcab      	bgt.n	4048fc <_svfprintf_r+0x1198>
  4049a4:	3208      	adds	r2, #8
  4049a6:	e7b4      	b.n	404912 <_svfprintf_r+0x11ae>
  4049a8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4049aa:	990c      	ldr	r1, [sp, #48]	; 0x30
  4049ac:	aa2b      	add	r2, sp, #172	; 0xac
  4049ae:	f002 fab9 	bl	406f24 <__ssprint_r>
  4049b2:	2800      	cmp	r0, #0
  4049b4:	f47e afee 	bne.w	403994 <_svfprintf_r+0x230>
  4049b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049ba:	9911      	ldr	r1, [sp, #68]	; 0x44
  4049bc:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
  4049c0:	1b0c      	subs	r4, r1, r4
  4049c2:	ae38      	add	r6, sp, #224	; 0xe0
  4049c4:	e5a5      	b.n	404512 <_svfprintf_r+0xdae>
  4049c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4049c8:	46ba      	mov	sl, r7
  4049ca:	2c06      	cmp	r4, #6
  4049cc:	bf28      	it	cs
  4049ce:	2406      	movcs	r4, #6
  4049d0:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  4049d4:	970a      	str	r7, [sp, #40]	; 0x28
  4049d6:	9714      	str	r7, [sp, #80]	; 0x50
  4049d8:	9510      	str	r5, [sp, #64]	; 0x40
  4049da:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  4049de:	4f97      	ldr	r7, [pc, #604]	; (404c3c <_svfprintf_r+0x14d8>)
  4049e0:	f7ff b857 	b.w	403a92 <_svfprintf_r+0x32e>
  4049e4:	9d12      	ldr	r5, [sp, #72]	; 0x48
  4049e6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  4049ea:	9509      	str	r5, [sp, #36]	; 0x24
  4049ec:	2500      	movs	r5, #0
  4049ee:	930b      	str	r3, [sp, #44]	; 0x2c
  4049f0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  4049f4:	950a      	str	r5, [sp, #40]	; 0x28
  4049f6:	f7ff b84f 	b.w	403a98 <_svfprintf_r+0x334>
  4049fa:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  4049fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404a00:	f8dc 3000 	ldr.w	r3, [ip]
  404a04:	f10c 0c04 	add.w	ip, ip, #4
  404a08:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  404a0c:	601c      	str	r4, [r3, #0]
  404a0e:	f7fe becf 	b.w	4037b0 <_svfprintf_r+0x4c>
  404a12:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
  404a16:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
  404a1a:	f7ff ba99 	b.w	403f50 <_svfprintf_r+0x7ec>
  404a1e:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404a20:	1cdc      	adds	r4, r3, #3
  404a22:	db19      	blt.n	404a58 <_svfprintf_r+0x12f4>
  404a24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404a26:	429c      	cmp	r4, r3
  404a28:	db16      	blt.n	404a58 <_svfprintf_r+0x12f4>
  404a2a:	9314      	str	r3, [sp, #80]	; 0x50
  404a2c:	e714      	b.n	404858 <_svfprintf_r+0x10f4>
  404a2e:	4623      	mov	r3, r4
  404a30:	e702      	b.n	404838 <_svfprintf_r+0x10d4>
  404a32:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  404a36:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  404a3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404a3c:	9510      	str	r5, [sp, #64]	; 0x40
  404a3e:	900a      	str	r0, [sp, #40]	; 0x28
  404a40:	9014      	str	r0, [sp, #80]	; 0x50
  404a42:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
  404a46:	f7ff b824 	b.w	403a92 <_svfprintf_r+0x32e>
  404a4a:	783b      	ldrb	r3, [r7, #0]
  404a4c:	2b30      	cmp	r3, #48	; 0x30
  404a4e:	f000 80ad 	beq.w	404bac <_svfprintf_r+0x1448>
  404a52:	9d25      	ldr	r5, [sp, #148]	; 0x94
  404a54:	442c      	add	r4, r5
  404a56:	e6dc      	b.n	404812 <_svfprintf_r+0x10ae>
  404a58:	f1a8 0802 	sub.w	r8, r8, #2
  404a5c:	1e59      	subs	r1, r3, #1
  404a5e:	2900      	cmp	r1, #0
  404a60:	9125      	str	r1, [sp, #148]	; 0x94
  404a62:	bfba      	itte	lt
  404a64:	4249      	neglt	r1, r1
  404a66:	232d      	movlt	r3, #45	; 0x2d
  404a68:	232b      	movge	r3, #43	; 0x2b
  404a6a:	2909      	cmp	r1, #9
  404a6c:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
  404a70:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
  404a74:	dc65      	bgt.n	404b42 <_svfprintf_r+0x13de>
  404a76:	2330      	movs	r3, #48	; 0x30
  404a78:	3130      	adds	r1, #48	; 0x30
  404a7a:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
  404a7e:	f88d 109f 	strb.w	r1, [sp, #159]	; 0x9f
  404a82:	ab28      	add	r3, sp, #160	; 0xa0
  404a84:	9d11      	ldr	r5, [sp, #68]	; 0x44
  404a86:	aa27      	add	r2, sp, #156	; 0x9c
  404a88:	9c11      	ldr	r4, [sp, #68]	; 0x44
  404a8a:	1a9a      	subs	r2, r3, r2
  404a8c:	2d01      	cmp	r5, #1
  404a8e:	9219      	str	r2, [sp, #100]	; 0x64
  404a90:	4414      	add	r4, r2
  404a92:	f340 80b7 	ble.w	404c04 <_svfprintf_r+0x14a0>
  404a96:	3401      	adds	r4, #1
  404a98:	2500      	movs	r5, #0
  404a9a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404a9e:	9514      	str	r5, [sp, #80]	; 0x50
  404aa0:	e6ea      	b.n	404878 <_svfprintf_r+0x1114>
  404aa2:	2400      	movs	r4, #0
  404aa4:	4681      	mov	r9, r0
  404aa6:	940a      	str	r4, [sp, #40]	; 0x28
  404aa8:	f7fe beba 	b.w	403820 <_svfprintf_r+0xbc>
  404aac:	980d      	ldr	r0, [sp, #52]	; 0x34
  404aae:	990c      	ldr	r1, [sp, #48]	; 0x30
  404ab0:	aa2b      	add	r2, sp, #172	; 0xac
  404ab2:	f002 fa37 	bl	406f24 <__ssprint_r>
  404ab6:	2800      	cmp	r0, #0
  404ab8:	f47e af6c 	bne.w	403994 <_svfprintf_r+0x230>
  404abc:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404abe:	992d      	ldr	r1, [sp, #180]	; 0xb4
  404ac0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  404ac2:	aa38      	add	r2, sp, #224	; 0xe0
  404ac4:	e616      	b.n	4046f4 <_svfprintf_r+0xf90>
  404ac6:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404ac8:	9d11      	ldr	r5, [sp, #68]	; 0x44
  404aca:	2c00      	cmp	r4, #0
  404acc:	bfd4      	ite	le
  404ace:	f1c4 0402 	rsble	r4, r4, #2
  404ad2:	2401      	movgt	r4, #1
  404ad4:	442c      	add	r4, r5
  404ad6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404ada:	f04f 0867 	mov.w	r8, #103	; 0x67
  404ade:	e6cb      	b.n	404878 <_svfprintf_r+0x1114>
  404ae0:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404ae2:	9816      	ldr	r0, [sp, #88]	; 0x58
  404ae4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404ae8:	9020      	str	r0, [sp, #128]	; 0x80
  404aea:	9121      	str	r1, [sp, #132]	; 0x84
  404aec:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
  404af0:	e660      	b.n	4047b4 <_svfprintf_r+0x1050>
  404af2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404af4:	2003      	movs	r0, #3
  404af6:	a925      	add	r1, sp, #148	; 0x94
  404af8:	aa26      	add	r2, sp, #152	; 0x98
  404afa:	ab29      	add	r3, sp, #164	; 0xa4
  404afc:	9501      	str	r5, [sp, #4]
  404afe:	9000      	str	r0, [sp, #0]
  404b00:	9203      	str	r2, [sp, #12]
  404b02:	9304      	str	r3, [sp, #16]
  404b04:	9102      	str	r1, [sp, #8]
  404b06:	980d      	ldr	r0, [sp, #52]	; 0x34
  404b08:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
  404b0c:	f000 f944 	bl	404d98 <_dtoa_r>
  404b10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404b12:	4607      	mov	r7, r0
  404b14:	e677      	b.n	404806 <_svfprintf_r+0x10a2>
  404b16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404b18:	2003      	movs	r0, #3
  404b1a:	a925      	add	r1, sp, #148	; 0x94
  404b1c:	aa26      	add	r2, sp, #152	; 0x98
  404b1e:	ab29      	add	r3, sp, #164	; 0xa4
  404b20:	9401      	str	r4, [sp, #4]
  404b22:	e7ec      	b.n	404afe <_svfprintf_r+0x139a>
  404b24:	9d25      	ldr	r5, [sp, #148]	; 0x94
  404b26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404b28:	2d00      	cmp	r5, #0
  404b2a:	9514      	str	r5, [sp, #80]	; 0x50
  404b2c:	dd63      	ble.n	404bf6 <_svfprintf_r+0x1492>
  404b2e:	bbb4      	cbnz	r4, 404b9e <_svfprintf_r+0x143a>
  404b30:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404b32:	07e8      	lsls	r0, r5, #31
  404b34:	d433      	bmi.n	404b9e <_svfprintf_r+0x143a>
  404b36:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404b38:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404b3c:	e69c      	b.n	404878 <_svfprintf_r+0x1114>
  404b3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  404b40:	e67a      	b.n	404838 <_svfprintf_r+0x10d4>
  404b42:	f10d 02aa 	add.w	r2, sp, #170	; 0xaa
  404b46:	4d3e      	ldr	r5, [pc, #248]	; (404c40 <_svfprintf_r+0x14dc>)
  404b48:	17cb      	asrs	r3, r1, #31
  404b4a:	fb85 5001 	smull	r5, r0, r5, r1
  404b4e:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
  404b52:	eb00 0380 	add.w	r3, r0, r0, lsl #2
  404b56:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
  404b5a:	2809      	cmp	r0, #9
  404b5c:	4613      	mov	r3, r2
  404b5e:	f101 0230 	add.w	r2, r1, #48	; 0x30
  404b62:	701a      	strb	r2, [r3, #0]
  404b64:	4601      	mov	r1, r0
  404b66:	f103 32ff 	add.w	r2, r3, #4294967295
  404b6a:	dcec      	bgt.n	404b46 <_svfprintf_r+0x13e2>
  404b6c:	f100 0130 	add.w	r1, r0, #48	; 0x30
  404b70:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
  404b74:	b2c9      	uxtb	r1, r1
  404b76:	4294      	cmp	r4, r2
  404b78:	f803 1c01 	strb.w	r1, [r3, #-1]
  404b7c:	d95a      	bls.n	404c34 <_svfprintf_r+0x14d0>
  404b7e:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
  404b82:	461a      	mov	r2, r3
  404b84:	e001      	b.n	404b8a <_svfprintf_r+0x1426>
  404b86:	f812 1b01 	ldrb.w	r1, [r2], #1
  404b8a:	42a2      	cmp	r2, r4
  404b8c:	f800 1f01 	strb.w	r1, [r0, #1]!
  404b90:	d1f9      	bne.n	404b86 <_svfprintf_r+0x1422>
  404b92:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
  404b96:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
  404b9a:	3bf6      	subs	r3, #246	; 0xf6
  404b9c:	e772      	b.n	404a84 <_svfprintf_r+0x1320>
  404b9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404ba0:	1c6c      	adds	r4, r5, #1
  404ba2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404ba4:	442c      	add	r4, r5
  404ba6:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404baa:	e665      	b.n	404878 <_svfprintf_r+0x1114>
  404bac:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
  404bb0:	2200      	movs	r2, #0
  404bb2:	2300      	movs	r3, #0
  404bb4:	f002 feda 	bl	40796c <__aeabi_dcmpeq>
  404bb8:	2800      	cmp	r0, #0
  404bba:	f47f af4a 	bne.w	404a52 <_svfprintf_r+0x12ee>
  404bbe:	f1c5 0501 	rsb	r5, r5, #1
  404bc2:	9525      	str	r5, [sp, #148]	; 0x94
  404bc4:	442c      	add	r4, r5
  404bc6:	e624      	b.n	404812 <_svfprintf_r+0x10ae>
  404bc8:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404bca:	f04f 0867 	mov.w	r8, #103	; 0x67
  404bce:	1c6c      	adds	r4, r5, #1
  404bd0:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404bd4:	e650      	b.n	404878 <_svfprintf_r+0x1114>
  404bd6:	9d10      	ldr	r5, [sp, #64]	; 0x40
  404bd8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  404bdc:	682d      	ldr	r5, [r5, #0]
  404bde:	f10c 0304 	add.w	r3, ip, #4
  404be2:	2d00      	cmp	r5, #0
  404be4:	f899 8001 	ldrb.w	r8, [r9, #1]
  404be8:	950a      	str	r5, [sp, #40]	; 0x28
  404bea:	9310      	str	r3, [sp, #64]	; 0x40
  404bec:	4681      	mov	r9, r0
  404bee:	f6be ae15 	bge.w	40381c <_svfprintf_r+0xb8>
  404bf2:	f7fe be10 	b.w	403816 <_svfprintf_r+0xb2>
  404bf6:	b97c      	cbnz	r4, 404c18 <_svfprintf_r+0x14b4>
  404bf8:	9d09      	ldr	r5, [sp, #36]	; 0x24
  404bfa:	07e9      	lsls	r1, r5, #31
  404bfc:	d40c      	bmi.n	404c18 <_svfprintf_r+0x14b4>
  404bfe:	2301      	movs	r3, #1
  404c00:	461c      	mov	r4, r3
  404c02:	e639      	b.n	404878 <_svfprintf_r+0x1114>
  404c04:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
  404c08:	f01c 0301 	ands.w	r3, ip, #1
  404c0c:	f47f af43 	bne.w	404a96 <_svfprintf_r+0x1332>
  404c10:	9314      	str	r3, [sp, #80]	; 0x50
  404c12:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404c16:	e62f      	b.n	404878 <_svfprintf_r+0x1114>
  404c18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404c1a:	1cac      	adds	r4, r5, #2
  404c1c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  404c20:	e62a      	b.n	404878 <_svfprintf_r+0x1114>
  404c22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  404c24:	230c      	movs	r3, #12
  404c26:	602b      	str	r3, [r5, #0]
  404c28:	f04f 30ff 	mov.w	r0, #4294967295
  404c2c:	f7fe beba 	b.w	4039a4 <_svfprintf_r+0x240>
  404c30:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404c32:	e713      	b.n	404a5c <_svfprintf_r+0x12f8>
  404c34:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
  404c38:	e724      	b.n	404a84 <_svfprintf_r+0x1320>
  404c3a:	bf00      	nop
  404c3c:	00408150 	.word	0x00408150
  404c40:	66666667 	.word	0x66666667

00404c44 <register_fini>:
  404c44:	4b02      	ldr	r3, [pc, #8]	; (404c50 <register_fini+0xc>)
  404c46:	b113      	cbz	r3, 404c4e <register_fini+0xa>
  404c48:	4802      	ldr	r0, [pc, #8]	; (404c54 <register_fini+0x10>)
  404c4a:	f000 b805 	b.w	404c58 <atexit>
  404c4e:	4770      	bx	lr
  404c50:	00000000 	.word	0x00000000
  404c54:	00405bd1 	.word	0x00405bd1

00404c58 <atexit>:
  404c58:	4601      	mov	r1, r0
  404c5a:	2000      	movs	r0, #0
  404c5c:	4602      	mov	r2, r0
  404c5e:	4603      	mov	r3, r0
  404c60:	f002 b9e0 	b.w	407024 <__register_exitproc>

00404c64 <quorem>:
  404c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c68:	6903      	ldr	r3, [r0, #16]
  404c6a:	690d      	ldr	r5, [r1, #16]
  404c6c:	b083      	sub	sp, #12
  404c6e:	429d      	cmp	r5, r3
  404c70:	4683      	mov	fp, r0
  404c72:	f300 808c 	bgt.w	404d8e <quorem+0x12a>
  404c76:	3d01      	subs	r5, #1
  404c78:	f101 0414 	add.w	r4, r1, #20
  404c7c:	f100 0a14 	add.w	sl, r0, #20
  404c80:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
  404c84:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  404c88:	3201      	adds	r2, #1
  404c8a:	fbb3 f8f2 	udiv	r8, r3, r2
  404c8e:	00aa      	lsls	r2, r5, #2
  404c90:	4691      	mov	r9, r2
  404c92:	9200      	str	r2, [sp, #0]
  404c94:	4452      	add	r2, sl
  404c96:	44a1      	add	r9, r4
  404c98:	9201      	str	r2, [sp, #4]
  404c9a:	f1b8 0f00 	cmp.w	r8, #0
  404c9e:	d03e      	beq.n	404d1e <quorem+0xba>
  404ca0:	2600      	movs	r6, #0
  404ca2:	4630      	mov	r0, r6
  404ca4:	4622      	mov	r2, r4
  404ca6:	4653      	mov	r3, sl
  404ca8:	468c      	mov	ip, r1
  404caa:	f852 7b04 	ldr.w	r7, [r2], #4
  404cae:	6819      	ldr	r1, [r3, #0]
  404cb0:	fa1f fe87 	uxth.w	lr, r7
  404cb4:	0c3f      	lsrs	r7, r7, #16
  404cb6:	fb0e 6e08 	mla	lr, lr, r8, r6
  404cba:	fb07 f608 	mul.w	r6, r7, r8
  404cbe:	eb06 461e 	add.w	r6, r6, lr, lsr #16
  404cc2:	fa1f fe8e 	uxth.w	lr, lr
  404cc6:	ebce 0e00 	rsb	lr, lr, r0
  404cca:	b28f      	uxth	r7, r1
  404ccc:	b2b0      	uxth	r0, r6
  404cce:	4477      	add	r7, lr
  404cd0:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
  404cd4:	eb00 4027 	add.w	r0, r0, r7, asr #16
  404cd8:	b2bf      	uxth	r7, r7
  404cda:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
  404cde:	4591      	cmp	r9, r2
  404ce0:	f843 7b04 	str.w	r7, [r3], #4
  404ce4:	ea4f 4020 	mov.w	r0, r0, asr #16
  404ce8:	ea4f 4616 	mov.w	r6, r6, lsr #16
  404cec:	d2dd      	bcs.n	404caa <quorem+0x46>
  404cee:	9a00      	ldr	r2, [sp, #0]
  404cf0:	4661      	mov	r1, ip
  404cf2:	f85a 3002 	ldr.w	r3, [sl, r2]
  404cf6:	b993      	cbnz	r3, 404d1e <quorem+0xba>
  404cf8:	9a01      	ldr	r2, [sp, #4]
  404cfa:	1f13      	subs	r3, r2, #4
  404cfc:	459a      	cmp	sl, r3
  404cfe:	d20c      	bcs.n	404d1a <quorem+0xb6>
  404d00:	f852 3c04 	ldr.w	r3, [r2, #-4]
  404d04:	b94b      	cbnz	r3, 404d1a <quorem+0xb6>
  404d06:	f1a2 0308 	sub.w	r3, r2, #8
  404d0a:	e002      	b.n	404d12 <quorem+0xae>
  404d0c:	681a      	ldr	r2, [r3, #0]
  404d0e:	3b04      	subs	r3, #4
  404d10:	b91a      	cbnz	r2, 404d1a <quorem+0xb6>
  404d12:	459a      	cmp	sl, r3
  404d14:	f105 35ff 	add.w	r5, r5, #4294967295
  404d18:	d3f8      	bcc.n	404d0c <quorem+0xa8>
  404d1a:	f8cb 5010 	str.w	r5, [fp, #16]
  404d1e:	4658      	mov	r0, fp
  404d20:	f001 fdf8 	bl	406914 <__mcmp>
  404d24:	2800      	cmp	r0, #0
  404d26:	db2e      	blt.n	404d86 <quorem+0x122>
  404d28:	f108 0801 	add.w	r8, r8, #1
  404d2c:	4653      	mov	r3, sl
  404d2e:	2200      	movs	r2, #0
  404d30:	f854 6b04 	ldr.w	r6, [r4], #4
  404d34:	6818      	ldr	r0, [r3, #0]
  404d36:	b2b1      	uxth	r1, r6
  404d38:	1a51      	subs	r1, r2, r1
  404d3a:	b287      	uxth	r7, r0
  404d3c:	0c36      	lsrs	r6, r6, #16
  404d3e:	4439      	add	r1, r7
  404d40:	ebc6 4010 	rsb	r0, r6, r0, lsr #16
  404d44:	eb00 4221 	add.w	r2, r0, r1, asr #16
  404d48:	b289      	uxth	r1, r1
  404d4a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  404d4e:	45a1      	cmp	r9, r4
  404d50:	f843 1b04 	str.w	r1, [r3], #4
  404d54:	ea4f 4222 	mov.w	r2, r2, asr #16
  404d58:	d2ea      	bcs.n	404d30 <quorem+0xcc>
  404d5a:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
  404d5e:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
  404d62:	b982      	cbnz	r2, 404d86 <quorem+0x122>
  404d64:	1f1a      	subs	r2, r3, #4
  404d66:	4592      	cmp	sl, r2
  404d68:	d20b      	bcs.n	404d82 <quorem+0x11e>
  404d6a:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404d6e:	b942      	cbnz	r2, 404d82 <quorem+0x11e>
  404d70:	3b08      	subs	r3, #8
  404d72:	e002      	b.n	404d7a <quorem+0x116>
  404d74:	681a      	ldr	r2, [r3, #0]
  404d76:	3b04      	subs	r3, #4
  404d78:	b91a      	cbnz	r2, 404d82 <quorem+0x11e>
  404d7a:	459a      	cmp	sl, r3
  404d7c:	f105 35ff 	add.w	r5, r5, #4294967295
  404d80:	d3f8      	bcc.n	404d74 <quorem+0x110>
  404d82:	f8cb 5010 	str.w	r5, [fp, #16]
  404d86:	4640      	mov	r0, r8
  404d88:	b003      	add	sp, #12
  404d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d8e:	2000      	movs	r0, #0
  404d90:	b003      	add	sp, #12
  404d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d96:	bf00      	nop

00404d98 <_dtoa_r>:
  404d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404d9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404d9e:	b09b      	sub	sp, #108	; 0x6c
  404da0:	4604      	mov	r4, r0
  404da2:	4692      	mov	sl, r2
  404da4:	469b      	mov	fp, r3
  404da6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
  404da8:	b141      	cbz	r1, 404dbc <_dtoa_r+0x24>
  404daa:	6c43      	ldr	r3, [r0, #68]	; 0x44
  404dac:	2201      	movs	r2, #1
  404dae:	409a      	lsls	r2, r3
  404db0:	604b      	str	r3, [r1, #4]
  404db2:	608a      	str	r2, [r1, #8]
  404db4:	f001 fbb8 	bl	406528 <_Bfree>
  404db8:	2300      	movs	r3, #0
  404dba:	6423      	str	r3, [r4, #64]	; 0x40
  404dbc:	f1bb 0f00 	cmp.w	fp, #0
  404dc0:	46d9      	mov	r9, fp
  404dc2:	db33      	blt.n	404e2c <_dtoa_r+0x94>
  404dc4:	2300      	movs	r3, #0
  404dc6:	602b      	str	r3, [r5, #0]
  404dc8:	4ba5      	ldr	r3, [pc, #660]	; (405060 <_dtoa_r+0x2c8>)
  404dca:	461a      	mov	r2, r3
  404dcc:	ea09 0303 	and.w	r3, r9, r3
  404dd0:	4293      	cmp	r3, r2
  404dd2:	d014      	beq.n	404dfe <_dtoa_r+0x66>
  404dd4:	4650      	mov	r0, sl
  404dd6:	4659      	mov	r1, fp
  404dd8:	2200      	movs	r2, #0
  404dda:	2300      	movs	r3, #0
  404ddc:	f002 fdc6 	bl	40796c <__aeabi_dcmpeq>
  404de0:	4680      	mov	r8, r0
  404de2:	b348      	cbz	r0, 404e38 <_dtoa_r+0xa0>
  404de4:	9e26      	ldr	r6, [sp, #152]	; 0x98
  404de6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  404de8:	2301      	movs	r3, #1
  404dea:	6033      	str	r3, [r6, #0]
  404dec:	2d00      	cmp	r5, #0
  404dee:	f000 80ca 	beq.w	404f86 <_dtoa_r+0x1ee>
  404df2:	489c      	ldr	r0, [pc, #624]	; (405064 <_dtoa_r+0x2cc>)
  404df4:	6028      	str	r0, [r5, #0]
  404df6:	3801      	subs	r0, #1
  404df8:	b01b      	add	sp, #108	; 0x6c
  404dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dfe:	9d26      	ldr	r5, [sp, #152]	; 0x98
  404e00:	f242 730f 	movw	r3, #9999	; 0x270f
  404e04:	602b      	str	r3, [r5, #0]
  404e06:	f1ba 0f00 	cmp.w	sl, #0
  404e0a:	f000 80a5 	beq.w	404f58 <_dtoa_r+0x1c0>
  404e0e:	4896      	ldr	r0, [pc, #600]	; (405068 <_dtoa_r+0x2d0>)
  404e10:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  404e12:	2e00      	cmp	r6, #0
  404e14:	d0f0      	beq.n	404df8 <_dtoa_r+0x60>
  404e16:	78c3      	ldrb	r3, [r0, #3]
  404e18:	2b00      	cmp	r3, #0
  404e1a:	f000 80b6 	beq.w	404f8a <_dtoa_r+0x1f2>
  404e1e:	f100 0308 	add.w	r3, r0, #8
  404e22:	9d28      	ldr	r5, [sp, #160]	; 0xa0
  404e24:	602b      	str	r3, [r5, #0]
  404e26:	b01b      	add	sp, #108	; 0x6c
  404e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e2c:	2301      	movs	r3, #1
  404e2e:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  404e32:	602b      	str	r3, [r5, #0]
  404e34:	46cb      	mov	fp, r9
  404e36:	e7c7      	b.n	404dc8 <_dtoa_r+0x30>
  404e38:	aa19      	add	r2, sp, #100	; 0x64
  404e3a:	ab18      	add	r3, sp, #96	; 0x60
  404e3c:	e88d 000c 	stmia.w	sp, {r2, r3}
  404e40:	4620      	mov	r0, r4
  404e42:	4652      	mov	r2, sl
  404e44:	465b      	mov	r3, fp
  404e46:	f001 fdf5 	bl	406a34 <__d2b>
  404e4a:	ea5f 5519 	movs.w	r5, r9, lsr #20
  404e4e:	900a      	str	r0, [sp, #40]	; 0x28
  404e50:	f040 808b 	bne.w	404f6a <_dtoa_r+0x1d2>
  404e54:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404e56:	9d19      	ldr	r5, [sp, #100]	; 0x64
  404e58:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  404e5c:	443d      	add	r5, r7
  404e5e:	429d      	cmp	r5, r3
  404e60:	f2c0 8295 	blt.w	40538e <_dtoa_r+0x5f6>
  404e64:	331f      	adds	r3, #31
  404e66:	f205 4212 	addw	r2, r5, #1042	; 0x412
  404e6a:	1b5b      	subs	r3, r3, r5
  404e6c:	fa09 f303 	lsl.w	r3, r9, r3
  404e70:	fa2a f202 	lsr.w	r2, sl, r2
  404e74:	ea43 0002 	orr.w	r0, r3, r2
  404e78:	f002 fa9a 	bl	4073b0 <__aeabi_ui2d>
  404e7c:	2601      	movs	r6, #1
  404e7e:	3d01      	subs	r5, #1
  404e80:	46b8      	mov	r8, r7
  404e82:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404e86:	9616      	str	r6, [sp, #88]	; 0x58
  404e88:	2200      	movs	r2, #0
  404e8a:	4b78      	ldr	r3, [pc, #480]	; (40506c <_dtoa_r+0x2d4>)
  404e8c:	f002 f952 	bl	407134 <__aeabi_dsub>
  404e90:	a36d      	add	r3, pc, #436	; (adr r3, 405048 <_dtoa_r+0x2b0>)
  404e92:	e9d3 2300 	ldrd	r2, r3, [r3]
  404e96:	f002 fb01 	bl	40749c <__aeabi_dmul>
  404e9a:	a36d      	add	r3, pc, #436	; (adr r3, 405050 <_dtoa_r+0x2b8>)
  404e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ea0:	f002 f94a 	bl	407138 <__adddf3>
  404ea4:	4606      	mov	r6, r0
  404ea6:	4628      	mov	r0, r5
  404ea8:	460f      	mov	r7, r1
  404eaa:	f002 fa91 	bl	4073d0 <__aeabi_i2d>
  404eae:	a36a      	add	r3, pc, #424	; (adr r3, 405058 <_dtoa_r+0x2c0>)
  404eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404eb4:	f002 faf2 	bl	40749c <__aeabi_dmul>
  404eb8:	4602      	mov	r2, r0
  404eba:	460b      	mov	r3, r1
  404ebc:	4630      	mov	r0, r6
  404ebe:	4639      	mov	r1, r7
  404ec0:	f002 f93a 	bl	407138 <__adddf3>
  404ec4:	4606      	mov	r6, r0
  404ec6:	460f      	mov	r7, r1
  404ec8:	f002 fd82 	bl	4079d0 <__aeabi_d2iz>
  404ecc:	4639      	mov	r1, r7
  404ece:	9007      	str	r0, [sp, #28]
  404ed0:	2200      	movs	r2, #0
  404ed2:	4630      	mov	r0, r6
  404ed4:	2300      	movs	r3, #0
  404ed6:	f002 fd53 	bl	407980 <__aeabi_dcmplt>
  404eda:	2800      	cmp	r0, #0
  404edc:	f040 8229 	bne.w	405332 <_dtoa_r+0x59a>
  404ee0:	9e07      	ldr	r6, [sp, #28]
  404ee2:	2e16      	cmp	r6, #22
  404ee4:	f200 8222 	bhi.w	40532c <_dtoa_r+0x594>
  404ee8:	4961      	ldr	r1, [pc, #388]	; (405070 <_dtoa_r+0x2d8>)
  404eea:	4652      	mov	r2, sl
  404eec:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
  404ef0:	465b      	mov	r3, fp
  404ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
  404ef6:	f002 fd61 	bl	4079bc <__aeabi_dcmpgt>
  404efa:	2800      	cmp	r0, #0
  404efc:	f000 824c 	beq.w	405398 <_dtoa_r+0x600>
  404f00:	3e01      	subs	r6, #1
  404f02:	9607      	str	r6, [sp, #28]
  404f04:	2600      	movs	r6, #0
  404f06:	960e      	str	r6, [sp, #56]	; 0x38
  404f08:	ebc5 0508 	rsb	r5, r5, r8
  404f0c:	3d01      	subs	r5, #1
  404f0e:	9506      	str	r5, [sp, #24]
  404f10:	f100 8226 	bmi.w	405360 <_dtoa_r+0x5c8>
  404f14:	2500      	movs	r5, #0
  404f16:	9508      	str	r5, [sp, #32]
  404f18:	9e07      	ldr	r6, [sp, #28]
  404f1a:	2e00      	cmp	r6, #0
  404f1c:	f2c0 8217 	blt.w	40534e <_dtoa_r+0x5b6>
  404f20:	9d06      	ldr	r5, [sp, #24]
  404f22:	960d      	str	r6, [sp, #52]	; 0x34
  404f24:	4435      	add	r5, r6
  404f26:	2600      	movs	r6, #0
  404f28:	9506      	str	r5, [sp, #24]
  404f2a:	960c      	str	r6, [sp, #48]	; 0x30
  404f2c:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404f2e:	2d09      	cmp	r5, #9
  404f30:	d82d      	bhi.n	404f8e <_dtoa_r+0x1f6>
  404f32:	2d05      	cmp	r5, #5
  404f34:	bfc4      	itt	gt
  404f36:	3d04      	subgt	r5, #4
  404f38:	9524      	strgt	r5, [sp, #144]	; 0x90
  404f3a:	9e24      	ldr	r6, [sp, #144]	; 0x90
  404f3c:	bfc8      	it	gt
  404f3e:	2500      	movgt	r5, #0
  404f40:	f1a6 0302 	sub.w	r3, r6, #2
  404f44:	bfd8      	it	le
  404f46:	2501      	movle	r5, #1
  404f48:	2b03      	cmp	r3, #3
  404f4a:	d822      	bhi.n	404f92 <_dtoa_r+0x1fa>
  404f4c:	e8df f013 	tbh	[pc, r3, lsl #1]
  404f50:	029e03b7 	.word	0x029e03b7
  404f54:	049a03c0 	.word	0x049a03c0
  404f58:	4a46      	ldr	r2, [pc, #280]	; (405074 <_dtoa_r+0x2dc>)
  404f5a:	4b43      	ldr	r3, [pc, #268]	; (405068 <_dtoa_r+0x2d0>)
  404f5c:	f3c9 0013 	ubfx	r0, r9, #0, #20
  404f60:	2800      	cmp	r0, #0
  404f62:	bf0c      	ite	eq
  404f64:	4610      	moveq	r0, r2
  404f66:	4618      	movne	r0, r3
  404f68:	e752      	b.n	404e10 <_dtoa_r+0x78>
  404f6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  404f6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  404f72:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  404f76:	4650      	mov	r0, sl
  404f78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  404f7c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404f80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  404f84:	e780      	b.n	404e88 <_dtoa_r+0xf0>
  404f86:	483c      	ldr	r0, [pc, #240]	; (405078 <_dtoa_r+0x2e0>)
  404f88:	e736      	b.n	404df8 <_dtoa_r+0x60>
  404f8a:	1cc3      	adds	r3, r0, #3
  404f8c:	e749      	b.n	404e22 <_dtoa_r+0x8a>
  404f8e:	2500      	movs	r5, #0
  404f90:	9524      	str	r5, [sp, #144]	; 0x90
  404f92:	2500      	movs	r5, #0
  404f94:	6465      	str	r5, [r4, #68]	; 0x44
  404f96:	4629      	mov	r1, r5
  404f98:	4620      	mov	r0, r4
  404f9a:	f001 fa9f 	bl	4064dc <_Balloc>
  404f9e:	f04f 39ff 	mov.w	r9, #4294967295
  404fa2:	2601      	movs	r6, #1
  404fa4:	9009      	str	r0, [sp, #36]	; 0x24
  404fa6:	9525      	str	r5, [sp, #148]	; 0x94
  404fa8:	6420      	str	r0, [r4, #64]	; 0x40
  404faa:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404fae:	960b      	str	r6, [sp, #44]	; 0x2c
  404fb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404fb2:	2b00      	cmp	r3, #0
  404fb4:	f2c0 80d2 	blt.w	40515c <_dtoa_r+0x3c4>
  404fb8:	9e07      	ldr	r6, [sp, #28]
  404fba:	2e0e      	cmp	r6, #14
  404fbc:	f300 80ce 	bgt.w	40515c <_dtoa_r+0x3c4>
  404fc0:	4b2b      	ldr	r3, [pc, #172]	; (405070 <_dtoa_r+0x2d8>)
  404fc2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  404fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
  404fca:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404fce:	9925      	ldr	r1, [sp, #148]	; 0x94
  404fd0:	2900      	cmp	r1, #0
  404fd2:	f2c0 8380 	blt.w	4056d6 <_dtoa_r+0x93e>
  404fd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404fda:	4659      	mov	r1, fp
  404fdc:	4650      	mov	r0, sl
  404fde:	f002 fb87 	bl	4076f0 <__aeabi_ddiv>
  404fe2:	f002 fcf5 	bl	4079d0 <__aeabi_d2iz>
  404fe6:	4605      	mov	r5, r0
  404fe8:	f002 f9f2 	bl	4073d0 <__aeabi_i2d>
  404fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404ff0:	f002 fa54 	bl	40749c <__aeabi_dmul>
  404ff4:	4602      	mov	r2, r0
  404ff6:	460b      	mov	r3, r1
  404ff8:	4650      	mov	r0, sl
  404ffa:	4659      	mov	r1, fp
  404ffc:	f002 f89a 	bl	407134 <__aeabi_dsub>
  405000:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405002:	f105 0330 	add.w	r3, r5, #48	; 0x30
  405006:	f1b9 0f01 	cmp.w	r9, #1
  40500a:	4606      	mov	r6, r0
  40500c:	460f      	mov	r7, r1
  40500e:	7013      	strb	r3, [r2, #0]
  405010:	f102 0b01 	add.w	fp, r2, #1
  405014:	d064      	beq.n	4050e0 <_dtoa_r+0x348>
  405016:	2200      	movs	r2, #0
  405018:	4b18      	ldr	r3, [pc, #96]	; (40507c <_dtoa_r+0x2e4>)
  40501a:	f002 fa3f 	bl	40749c <__aeabi_dmul>
  40501e:	2200      	movs	r2, #0
  405020:	2300      	movs	r3, #0
  405022:	4606      	mov	r6, r0
  405024:	460f      	mov	r7, r1
  405026:	f002 fca1 	bl	40796c <__aeabi_dcmpeq>
  40502a:	2800      	cmp	r0, #0
  40502c:	f040 8081 	bne.w	405132 <_dtoa_r+0x39a>
  405030:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  405034:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405036:	44c8      	add	r8, r9
  405038:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  40503c:	f105 0902 	add.w	r9, r5, #2
  405040:	9403      	str	r4, [sp, #12]
  405042:	e028      	b.n	405096 <_dtoa_r+0x2fe>
  405044:	f3af 8000 	nop.w
  405048:	636f4361 	.word	0x636f4361
  40504c:	3fd287a7 	.word	0x3fd287a7
  405050:	8b60c8b3 	.word	0x8b60c8b3
  405054:	3fc68a28 	.word	0x3fc68a28
  405058:	509f79fb 	.word	0x509f79fb
  40505c:	3fd34413 	.word	0x3fd34413
  405060:	7ff00000 	.word	0x7ff00000
  405064:	00408159 	.word	0x00408159
  405068:	0040827c 	.word	0x0040827c
  40506c:	3ff80000 	.word	0x3ff80000
  405070:	00408290 	.word	0x00408290
  405074:	00408270 	.word	0x00408270
  405078:	00408158 	.word	0x00408158
  40507c:	40240000 	.word	0x40240000
  405080:	f002 fa0c 	bl	40749c <__aeabi_dmul>
  405084:	2200      	movs	r2, #0
  405086:	2300      	movs	r3, #0
  405088:	4606      	mov	r6, r0
  40508a:	460f      	mov	r7, r1
  40508c:	f002 fc6e 	bl	40796c <__aeabi_dcmpeq>
  405090:	2800      	cmp	r0, #0
  405092:	f040 83c1 	bne.w	405818 <_dtoa_r+0xa80>
  405096:	4652      	mov	r2, sl
  405098:	465b      	mov	r3, fp
  40509a:	4630      	mov	r0, r6
  40509c:	4639      	mov	r1, r7
  40509e:	f002 fb27 	bl	4076f0 <__aeabi_ddiv>
  4050a2:	f002 fc95 	bl	4079d0 <__aeabi_d2iz>
  4050a6:	4605      	mov	r5, r0
  4050a8:	f002 f992 	bl	4073d0 <__aeabi_i2d>
  4050ac:	4652      	mov	r2, sl
  4050ae:	465b      	mov	r3, fp
  4050b0:	f002 f9f4 	bl	40749c <__aeabi_dmul>
  4050b4:	4602      	mov	r2, r0
  4050b6:	460b      	mov	r3, r1
  4050b8:	4630      	mov	r0, r6
  4050ba:	4639      	mov	r1, r7
  4050bc:	f002 f83a 	bl	407134 <__aeabi_dsub>
  4050c0:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  4050c4:	45c1      	cmp	r9, r8
  4050c6:	f809 ec01 	strb.w	lr, [r9, #-1]
  4050ca:	464c      	mov	r4, r9
  4050cc:	4606      	mov	r6, r0
  4050ce:	460f      	mov	r7, r1
  4050d0:	f04f 0200 	mov.w	r2, #0
  4050d4:	4ba7      	ldr	r3, [pc, #668]	; (405374 <_dtoa_r+0x5dc>)
  4050d6:	f109 0901 	add.w	r9, r9, #1
  4050da:	d1d1      	bne.n	405080 <_dtoa_r+0x2e8>
  4050dc:	46a3      	mov	fp, r4
  4050de:	9c03      	ldr	r4, [sp, #12]
  4050e0:	4632      	mov	r2, r6
  4050e2:	463b      	mov	r3, r7
  4050e4:	4630      	mov	r0, r6
  4050e6:	4639      	mov	r1, r7
  4050e8:	f002 f826 	bl	407138 <__adddf3>
  4050ec:	4606      	mov	r6, r0
  4050ee:	460f      	mov	r7, r1
  4050f0:	4632      	mov	r2, r6
  4050f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4050f6:	463b      	mov	r3, r7
  4050f8:	f002 fc42 	bl	407980 <__aeabi_dcmplt>
  4050fc:	b940      	cbnz	r0, 405110 <_dtoa_r+0x378>
  4050fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405102:	4632      	mov	r2, r6
  405104:	463b      	mov	r3, r7
  405106:	f002 fc31 	bl	40796c <__aeabi_dcmpeq>
  40510a:	b190      	cbz	r0, 405132 <_dtoa_r+0x39a>
  40510c:	07eb      	lsls	r3, r5, #31
  40510e:	d510      	bpl.n	405132 <_dtoa_r+0x39a>
  405110:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  405114:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405116:	e005      	b.n	405124 <_dtoa_r+0x38c>
  405118:	429a      	cmp	r2, r3
  40511a:	f000 8429 	beq.w	405970 <_dtoa_r+0xbd8>
  40511e:	f813 5c01 	ldrb.w	r5, [r3, #-1]
  405122:	469b      	mov	fp, r3
  405124:	2d39      	cmp	r5, #57	; 0x39
  405126:	f10b 33ff 	add.w	r3, fp, #4294967295
  40512a:	d0f5      	beq.n	405118 <_dtoa_r+0x380>
  40512c:	1c6a      	adds	r2, r5, #1
  40512e:	b2d2      	uxtb	r2, r2
  405130:	701a      	strb	r2, [r3, #0]
  405132:	4620      	mov	r0, r4
  405134:	990a      	ldr	r1, [sp, #40]	; 0x28
  405136:	f001 f9f7 	bl	406528 <_Bfree>
  40513a:	9e07      	ldr	r6, [sp, #28]
  40513c:	9d26      	ldr	r5, [sp, #152]	; 0x98
  40513e:	1c73      	adds	r3, r6, #1
  405140:	9e28      	ldr	r6, [sp, #160]	; 0xa0
  405142:	2200      	movs	r2, #0
  405144:	f88b 2000 	strb.w	r2, [fp]
  405148:	602b      	str	r3, [r5, #0]
  40514a:	2e00      	cmp	r6, #0
  40514c:	f000 8325 	beq.w	40579a <_dtoa_r+0xa02>
  405150:	9809      	ldr	r0, [sp, #36]	; 0x24
  405152:	f8c6 b000 	str.w	fp, [r6]
  405156:	b01b      	add	sp, #108	; 0x6c
  405158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40515c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40515e:	2d00      	cmp	r5, #0
  405160:	f000 8103 	beq.w	40536a <_dtoa_r+0x5d2>
  405164:	9e24      	ldr	r6, [sp, #144]	; 0x90
  405166:	2e01      	cmp	r6, #1
  405168:	f340 82dc 	ble.w	405724 <_dtoa_r+0x98c>
  40516c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  40516e:	f109 37ff 	add.w	r7, r9, #4294967295
  405172:	42be      	cmp	r6, r7
  405174:	f2c0 8389 	blt.w	40588a <_dtoa_r+0xaf2>
  405178:	1bf7      	subs	r7, r6, r7
  40517a:	f1b9 0f00 	cmp.w	r9, #0
  40517e:	f2c0 8487 	blt.w	405a90 <_dtoa_r+0xcf8>
  405182:	9d08      	ldr	r5, [sp, #32]
  405184:	464b      	mov	r3, r9
  405186:	9e08      	ldr	r6, [sp, #32]
  405188:	4620      	mov	r0, r4
  40518a:	441e      	add	r6, r3
  40518c:	9608      	str	r6, [sp, #32]
  40518e:	9e06      	ldr	r6, [sp, #24]
  405190:	2101      	movs	r1, #1
  405192:	441e      	add	r6, r3
  405194:	9606      	str	r6, [sp, #24]
  405196:	f001 fa69 	bl	40666c <__i2b>
  40519a:	4606      	mov	r6, r0
  40519c:	b165      	cbz	r5, 4051b8 <_dtoa_r+0x420>
  40519e:	9806      	ldr	r0, [sp, #24]
  4051a0:	2800      	cmp	r0, #0
  4051a2:	dd09      	ble.n	4051b8 <_dtoa_r+0x420>
  4051a4:	4603      	mov	r3, r0
  4051a6:	9908      	ldr	r1, [sp, #32]
  4051a8:	42ab      	cmp	r3, r5
  4051aa:	bfa8      	it	ge
  4051ac:	462b      	movge	r3, r5
  4051ae:	1ac9      	subs	r1, r1, r3
  4051b0:	1ac0      	subs	r0, r0, r3
  4051b2:	9108      	str	r1, [sp, #32]
  4051b4:	1aed      	subs	r5, r5, r3
  4051b6:	9006      	str	r0, [sp, #24]
  4051b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4051ba:	2a00      	cmp	r2, #0
  4051bc:	dd1d      	ble.n	4051fa <_dtoa_r+0x462>
  4051be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4051c0:	2b00      	cmp	r3, #0
  4051c2:	f000 8358 	beq.w	405876 <_dtoa_r+0xade>
  4051c6:	2f00      	cmp	r7, #0
  4051c8:	dd11      	ble.n	4051ee <_dtoa_r+0x456>
  4051ca:	4631      	mov	r1, r6
  4051cc:	463a      	mov	r2, r7
  4051ce:	4620      	mov	r0, r4
  4051d0:	f001 faf4 	bl	4067bc <__pow5mult>
  4051d4:	4606      	mov	r6, r0
  4051d6:	4631      	mov	r1, r6
  4051d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4051da:	4620      	mov	r0, r4
  4051dc:	f001 fa50 	bl	406680 <__multiply>
  4051e0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4051e2:	4680      	mov	r8, r0
  4051e4:	4620      	mov	r0, r4
  4051e6:	f001 f99f 	bl	406528 <_Bfree>
  4051ea:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  4051ee:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
  4051f2:	ebbe 0207 	subs.w	r2, lr, r7
  4051f6:	f040 828f 	bne.w	405718 <_dtoa_r+0x980>
  4051fa:	4620      	mov	r0, r4
  4051fc:	2101      	movs	r1, #1
  4051fe:	f001 fa35 	bl	40666c <__i2b>
  405202:	4680      	mov	r8, r0
  405204:	980d      	ldr	r0, [sp, #52]	; 0x34
  405206:	2800      	cmp	r0, #0
  405208:	dd05      	ble.n	405216 <_dtoa_r+0x47e>
  40520a:	4641      	mov	r1, r8
  40520c:	4620      	mov	r0, r4
  40520e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405210:	f001 fad4 	bl	4067bc <__pow5mult>
  405214:	4680      	mov	r8, r0
  405216:	9924      	ldr	r1, [sp, #144]	; 0x90
  405218:	2901      	cmp	r1, #1
  40521a:	f340 82c1 	ble.w	4057a0 <_dtoa_r+0xa08>
  40521e:	2700      	movs	r7, #0
  405220:	980d      	ldr	r0, [sp, #52]	; 0x34
  405222:	2800      	cmp	r0, #0
  405224:	f040 82af 	bne.w	405786 <_dtoa_r+0x9ee>
  405228:	2001      	movs	r0, #1
  40522a:	9b06      	ldr	r3, [sp, #24]
  40522c:	4403      	add	r3, r0
  40522e:	f013 031f 	ands.w	r3, r3, #31
  405232:	f000 80a1 	beq.w	405378 <_dtoa_r+0x5e0>
  405236:	f1c3 0220 	rsb	r2, r3, #32
  40523a:	2a04      	cmp	r2, #4
  40523c:	f340 84b7 	ble.w	405bae <_dtoa_r+0xe16>
  405240:	9908      	ldr	r1, [sp, #32]
  405242:	9a06      	ldr	r2, [sp, #24]
  405244:	f1c3 031c 	rsb	r3, r3, #28
  405248:	4419      	add	r1, r3
  40524a:	441a      	add	r2, r3
  40524c:	9108      	str	r1, [sp, #32]
  40524e:	441d      	add	r5, r3
  405250:	9206      	str	r2, [sp, #24]
  405252:	9908      	ldr	r1, [sp, #32]
  405254:	2900      	cmp	r1, #0
  405256:	dd05      	ble.n	405264 <_dtoa_r+0x4cc>
  405258:	990a      	ldr	r1, [sp, #40]	; 0x28
  40525a:	9a08      	ldr	r2, [sp, #32]
  40525c:	4620      	mov	r0, r4
  40525e:	f001 fafb 	bl	406858 <__lshift>
  405262:	900a      	str	r0, [sp, #40]	; 0x28
  405264:	9a06      	ldr	r2, [sp, #24]
  405266:	2a00      	cmp	r2, #0
  405268:	dd04      	ble.n	405274 <_dtoa_r+0x4dc>
  40526a:	4641      	mov	r1, r8
  40526c:	4620      	mov	r0, r4
  40526e:	f001 faf3 	bl	406858 <__lshift>
  405272:	4680      	mov	r8, r0
  405274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405276:	2b00      	cmp	r3, #0
  405278:	f040 826a 	bne.w	405750 <_dtoa_r+0x9b8>
  40527c:	f1b9 0f00 	cmp.w	r9, #0
  405280:	f340 82a6 	ble.w	4057d0 <_dtoa_r+0xa38>
  405284:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405286:	2800      	cmp	r0, #0
  405288:	f040 8088 	bne.w	40539c <_dtoa_r+0x604>
  40528c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40528e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405290:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  405294:	e006      	b.n	4052a4 <_dtoa_r+0x50c>
  405296:	4639      	mov	r1, r7
  405298:	4620      	mov	r0, r4
  40529a:	220a      	movs	r2, #10
  40529c:	2300      	movs	r3, #0
  40529e:	f001 f94d 	bl	40653c <__multadd>
  4052a2:	4607      	mov	r7, r0
  4052a4:	4638      	mov	r0, r7
  4052a6:	4641      	mov	r1, r8
  4052a8:	f7ff fcdc 	bl	404c64 <quorem>
  4052ac:	3030      	adds	r0, #48	; 0x30
  4052ae:	f80b 0005 	strb.w	r0, [fp, r5]
  4052b2:	3501      	adds	r5, #1
  4052b4:	45a9      	cmp	r9, r5
  4052b6:	dcee      	bgt.n	405296 <_dtoa_r+0x4fe>
  4052b8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4052bc:	4682      	mov	sl, r0
  4052be:	970a      	str	r7, [sp, #40]	; 0x28
  4052c0:	f1b9 0f01 	cmp.w	r9, #1
  4052c4:	bfac      	ite	ge
  4052c6:	44cb      	addge	fp, r9
  4052c8:	f10b 0b01 	addlt.w	fp, fp, #1
  4052cc:	2500      	movs	r5, #0
  4052ce:	990a      	ldr	r1, [sp, #40]	; 0x28
  4052d0:	2201      	movs	r2, #1
  4052d2:	4620      	mov	r0, r4
  4052d4:	f001 fac0 	bl	406858 <__lshift>
  4052d8:	4641      	mov	r1, r8
  4052da:	900a      	str	r0, [sp, #40]	; 0x28
  4052dc:	f001 fb1a 	bl	406914 <__mcmp>
  4052e0:	2800      	cmp	r0, #0
  4052e2:	f340 8309 	ble.w	4058f8 <_dtoa_r+0xb60>
  4052e6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
  4052ea:	9909      	ldr	r1, [sp, #36]	; 0x24
  4052ec:	e005      	b.n	4052fa <_dtoa_r+0x562>
  4052ee:	4299      	cmp	r1, r3
  4052f0:	f000 828b 	beq.w	40580a <_dtoa_r+0xa72>
  4052f4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  4052f8:	469b      	mov	fp, r3
  4052fa:	2a39      	cmp	r2, #57	; 0x39
  4052fc:	f10b 33ff 	add.w	r3, fp, #4294967295
  405300:	d0f5      	beq.n	4052ee <_dtoa_r+0x556>
  405302:	3201      	adds	r2, #1
  405304:	701a      	strb	r2, [r3, #0]
  405306:	4641      	mov	r1, r8
  405308:	4620      	mov	r0, r4
  40530a:	f001 f90d 	bl	406528 <_Bfree>
  40530e:	2e00      	cmp	r6, #0
  405310:	f43f af0f 	beq.w	405132 <_dtoa_r+0x39a>
  405314:	b12d      	cbz	r5, 405322 <_dtoa_r+0x58a>
  405316:	42b5      	cmp	r5, r6
  405318:	d003      	beq.n	405322 <_dtoa_r+0x58a>
  40531a:	4629      	mov	r1, r5
  40531c:	4620      	mov	r0, r4
  40531e:	f001 f903 	bl	406528 <_Bfree>
  405322:	4631      	mov	r1, r6
  405324:	4620      	mov	r0, r4
  405326:	f001 f8ff 	bl	406528 <_Bfree>
  40532a:	e702      	b.n	405132 <_dtoa_r+0x39a>
  40532c:	2601      	movs	r6, #1
  40532e:	960e      	str	r6, [sp, #56]	; 0x38
  405330:	e5ea      	b.n	404f08 <_dtoa_r+0x170>
  405332:	9807      	ldr	r0, [sp, #28]
  405334:	f002 f84c 	bl	4073d0 <__aeabi_i2d>
  405338:	4632      	mov	r2, r6
  40533a:	463b      	mov	r3, r7
  40533c:	f002 fb16 	bl	40796c <__aeabi_dcmpeq>
  405340:	2800      	cmp	r0, #0
  405342:	f47f adcd 	bne.w	404ee0 <_dtoa_r+0x148>
  405346:	9e07      	ldr	r6, [sp, #28]
  405348:	3e01      	subs	r6, #1
  40534a:	9607      	str	r6, [sp, #28]
  40534c:	e5c8      	b.n	404ee0 <_dtoa_r+0x148>
  40534e:	9e07      	ldr	r6, [sp, #28]
  405350:	9d08      	ldr	r5, [sp, #32]
  405352:	1bad      	subs	r5, r5, r6
  405354:	9508      	str	r5, [sp, #32]
  405356:	4275      	negs	r5, r6
  405358:	2600      	movs	r6, #0
  40535a:	950c      	str	r5, [sp, #48]	; 0x30
  40535c:	960d      	str	r6, [sp, #52]	; 0x34
  40535e:	e5e5      	b.n	404f2c <_dtoa_r+0x194>
  405360:	426d      	negs	r5, r5
  405362:	2600      	movs	r6, #0
  405364:	9508      	str	r5, [sp, #32]
  405366:	9606      	str	r6, [sp, #24]
  405368:	e5d6      	b.n	404f18 <_dtoa_r+0x180>
  40536a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40536c:	9d08      	ldr	r5, [sp, #32]
  40536e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405370:	e714      	b.n	40519c <_dtoa_r+0x404>
  405372:	bf00      	nop
  405374:	40240000 	.word	0x40240000
  405378:	231c      	movs	r3, #28
  40537a:	f8dd e020 	ldr.w	lr, [sp, #32]
  40537e:	9806      	ldr	r0, [sp, #24]
  405380:	449e      	add	lr, r3
  405382:	4418      	add	r0, r3
  405384:	f8cd e020 	str.w	lr, [sp, #32]
  405388:	441d      	add	r5, r3
  40538a:	9006      	str	r0, [sp, #24]
  40538c:	e761      	b.n	405252 <_dtoa_r+0x4ba>
  40538e:	48a7      	ldr	r0, [pc, #668]	; (40562c <_dtoa_r+0x894>)
  405390:	1b40      	subs	r0, r0, r5
  405392:	fa0a f000 	lsl.w	r0, sl, r0
  405396:	e56f      	b.n	404e78 <_dtoa_r+0xe0>
  405398:	900e      	str	r0, [sp, #56]	; 0x38
  40539a:	e5b5      	b.n	404f08 <_dtoa_r+0x170>
  40539c:	2d00      	cmp	r5, #0
  40539e:	dd05      	ble.n	4053ac <_dtoa_r+0x614>
  4053a0:	4631      	mov	r1, r6
  4053a2:	462a      	mov	r2, r5
  4053a4:	4620      	mov	r0, r4
  4053a6:	f001 fa57 	bl	406858 <__lshift>
  4053aa:	4606      	mov	r6, r0
  4053ac:	2f00      	cmp	r7, #0
  4053ae:	f040 82e9 	bne.w	405984 <_dtoa_r+0xbec>
  4053b2:	4637      	mov	r7, r6
  4053b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
  4053b6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4053b8:	444d      	add	r5, r9
  4053ba:	9508      	str	r5, [sp, #32]
  4053bc:	f00a 0501 	and.w	r5, sl, #1
  4053c0:	950b      	str	r5, [sp, #44]	; 0x2c
  4053c2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  4053c6:	1c45      	adds	r5, r0, #1
  4053c8:	e00a      	b.n	4053e0 <_dtoa_r+0x648>
  4053ca:	f001 f8b7 	bl	40653c <__multadd>
  4053ce:	4639      	mov	r1, r7
  4053d0:	4606      	mov	r6, r0
  4053d2:	220a      	movs	r2, #10
  4053d4:	4620      	mov	r0, r4
  4053d6:	2300      	movs	r3, #0
  4053d8:	f001 f8b0 	bl	40653c <__multadd>
  4053dc:	4607      	mov	r7, r0
  4053de:	3501      	adds	r5, #1
  4053e0:	4641      	mov	r1, r8
  4053e2:	4648      	mov	r0, r9
  4053e4:	f7ff fc3e 	bl	404c64 <quorem>
  4053e8:	4631      	mov	r1, r6
  4053ea:	4683      	mov	fp, r0
  4053ec:	4648      	mov	r0, r9
  4053ee:	f001 fa91 	bl	406914 <__mcmp>
  4053f2:	4641      	mov	r1, r8
  4053f4:	9003      	str	r0, [sp, #12]
  4053f6:	463a      	mov	r2, r7
  4053f8:	4620      	mov	r0, r4
  4053fa:	f001 faaf 	bl	40695c <__mdiff>
  4053fe:	68c2      	ldr	r2, [r0, #12]
  405400:	1e69      	subs	r1, r5, #1
  405402:	4603      	mov	r3, r0
  405404:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
  405408:	9106      	str	r1, [sp, #24]
  40540a:	2a00      	cmp	r2, #0
  40540c:	f040 8193 	bne.w	405736 <_dtoa_r+0x99e>
  405410:	4619      	mov	r1, r3
  405412:	4648      	mov	r0, r9
  405414:	9302      	str	r3, [sp, #8]
  405416:	f001 fa7d 	bl	406914 <__mcmp>
  40541a:	9b02      	ldr	r3, [sp, #8]
  40541c:	4602      	mov	r2, r0
  40541e:	4619      	mov	r1, r3
  405420:	4620      	mov	r0, r4
  405422:	9202      	str	r2, [sp, #8]
  405424:	f001 f880 	bl	406528 <_Bfree>
  405428:	9a02      	ldr	r2, [sp, #8]
  40542a:	b92a      	cbnz	r2, 405438 <_dtoa_r+0x6a0>
  40542c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40542e:	b91b      	cbnz	r3, 405438 <_dtoa_r+0x6a0>
  405430:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405432:	2800      	cmp	r0, #0
  405434:	f000 8393 	beq.w	405b5e <_dtoa_r+0xdc6>
  405438:	9b03      	ldr	r3, [sp, #12]
  40543a:	2b00      	cmp	r3, #0
  40543c:	f2c0 8234 	blt.w	4058a8 <_dtoa_r+0xb10>
  405440:	d105      	bne.n	40544e <_dtoa_r+0x6b6>
  405442:	9824      	ldr	r0, [sp, #144]	; 0x90
  405444:	b918      	cbnz	r0, 40544e <_dtoa_r+0x6b6>
  405446:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405448:	2900      	cmp	r1, #0
  40544a:	f000 822d 	beq.w	4058a8 <_dtoa_r+0xb10>
  40544e:	2a00      	cmp	r2, #0
  405450:	f300 82ac 	bgt.w	4059ac <_dtoa_r+0xc14>
  405454:	f8dd e020 	ldr.w	lr, [sp, #32]
  405458:	f805 ac01 	strb.w	sl, [r5, #-1]
  40545c:	4575      	cmp	r5, lr
  40545e:	46ab      	mov	fp, r5
  405460:	f000 82b4 	beq.w	4059cc <_dtoa_r+0xc34>
  405464:	4649      	mov	r1, r9
  405466:	220a      	movs	r2, #10
  405468:	2300      	movs	r3, #0
  40546a:	4620      	mov	r0, r4
  40546c:	f001 f866 	bl	40653c <__multadd>
  405470:	42be      	cmp	r6, r7
  405472:	4681      	mov	r9, r0
  405474:	4631      	mov	r1, r6
  405476:	4620      	mov	r0, r4
  405478:	f04f 020a 	mov.w	r2, #10
  40547c:	f04f 0300 	mov.w	r3, #0
  405480:	d1a3      	bne.n	4053ca <_dtoa_r+0x632>
  405482:	f001 f85b 	bl	40653c <__multadd>
  405486:	4606      	mov	r6, r0
  405488:	4607      	mov	r7, r0
  40548a:	e7a8      	b.n	4053de <_dtoa_r+0x646>
  40548c:	2600      	movs	r6, #0
  40548e:	960b      	str	r6, [sp, #44]	; 0x2c
  405490:	9e07      	ldr	r6, [sp, #28]
  405492:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
  405496:	44b6      	add	lr, r6
  405498:	f10e 0901 	add.w	r9, lr, #1
  40549c:	f1b9 0f00 	cmp.w	r9, #0
  4054a0:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
  4054a4:	464e      	mov	r6, r9
  4054a6:	f340 8150 	ble.w	40574a <_dtoa_r+0x9b2>
  4054aa:	2100      	movs	r1, #0
  4054ac:	2e17      	cmp	r6, #23
  4054ae:	6461      	str	r1, [r4, #68]	; 0x44
  4054b0:	d90a      	bls.n	4054c8 <_dtoa_r+0x730>
  4054b2:	2201      	movs	r2, #1
  4054b4:	2304      	movs	r3, #4
  4054b6:	005b      	lsls	r3, r3, #1
  4054b8:	f103 0014 	add.w	r0, r3, #20
  4054bc:	42b0      	cmp	r0, r6
  4054be:	4611      	mov	r1, r2
  4054c0:	f102 0201 	add.w	r2, r2, #1
  4054c4:	d9f7      	bls.n	4054b6 <_dtoa_r+0x71e>
  4054c6:	6461      	str	r1, [r4, #68]	; 0x44
  4054c8:	4620      	mov	r0, r4
  4054ca:	f001 f807 	bl	4064dc <_Balloc>
  4054ce:	2e0e      	cmp	r6, #14
  4054d0:	9009      	str	r0, [sp, #36]	; 0x24
  4054d2:	6420      	str	r0, [r4, #64]	; 0x40
  4054d4:	f63f ad6c 	bhi.w	404fb0 <_dtoa_r+0x218>
  4054d8:	2d00      	cmp	r5, #0
  4054da:	f43f ad69 	beq.w	404fb0 <_dtoa_r+0x218>
  4054de:	9d07      	ldr	r5, [sp, #28]
  4054e0:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
  4054e4:	2d00      	cmp	r5, #0
  4054e6:	f340 821c 	ble.w	405922 <_dtoa_r+0xb8a>
  4054ea:	4b51      	ldr	r3, [pc, #324]	; (405630 <_dtoa_r+0x898>)
  4054ec:	f005 020f 	and.w	r2, r5, #15
  4054f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4054f4:	112d      	asrs	r5, r5, #4
  4054f6:	e9d3 6700 	ldrd	r6, r7, [r3]
  4054fa:	06eb      	lsls	r3, r5, #27
  4054fc:	f140 81cd 	bpl.w	40589a <_dtoa_r+0xb02>
  405500:	4b4c      	ldr	r3, [pc, #304]	; (405634 <_dtoa_r+0x89c>)
  405502:	4650      	mov	r0, sl
  405504:	4659      	mov	r1, fp
  405506:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40550a:	f002 f8f1 	bl	4076f0 <__aeabi_ddiv>
  40550e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  405512:	f005 050f 	and.w	r5, r5, #15
  405516:	f04f 0803 	mov.w	r8, #3
  40551a:	b18d      	cbz	r5, 405540 <_dtoa_r+0x7a8>
  40551c:	f8df a114 	ldr.w	sl, [pc, #276]	; 405634 <_dtoa_r+0x89c>
  405520:	4630      	mov	r0, r6
  405522:	4639      	mov	r1, r7
  405524:	07ee      	lsls	r6, r5, #31
  405526:	d505      	bpl.n	405534 <_dtoa_r+0x79c>
  405528:	e9da 2300 	ldrd	r2, r3, [sl]
  40552c:	f108 0801 	add.w	r8, r8, #1
  405530:	f001 ffb4 	bl	40749c <__aeabi_dmul>
  405534:	106d      	asrs	r5, r5, #1
  405536:	f10a 0a08 	add.w	sl, sl, #8
  40553a:	d1f3      	bne.n	405524 <_dtoa_r+0x78c>
  40553c:	4606      	mov	r6, r0
  40553e:	460f      	mov	r7, r1
  405540:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405544:	4632      	mov	r2, r6
  405546:	463b      	mov	r3, r7
  405548:	f002 f8d2 	bl	4076f0 <__aeabi_ddiv>
  40554c:	4682      	mov	sl, r0
  40554e:	468b      	mov	fp, r1
  405550:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  405552:	b145      	cbz	r5, 405566 <_dtoa_r+0x7ce>
  405554:	4650      	mov	r0, sl
  405556:	4659      	mov	r1, fp
  405558:	2200      	movs	r2, #0
  40555a:	4b37      	ldr	r3, [pc, #220]	; (405638 <_dtoa_r+0x8a0>)
  40555c:	f002 fa10 	bl	407980 <__aeabi_dcmplt>
  405560:	2800      	cmp	r0, #0
  405562:	f040 82aa 	bne.w	405aba <_dtoa_r+0xd22>
  405566:	4640      	mov	r0, r8
  405568:	f001 ff32 	bl	4073d0 <__aeabi_i2d>
  40556c:	4652      	mov	r2, sl
  40556e:	465b      	mov	r3, fp
  405570:	f001 ff94 	bl	40749c <__aeabi_dmul>
  405574:	2200      	movs	r2, #0
  405576:	4b31      	ldr	r3, [pc, #196]	; (40563c <_dtoa_r+0x8a4>)
  405578:	f001 fdde 	bl	407138 <__adddf3>
  40557c:	4606      	mov	r6, r0
  40557e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  405582:	f1b9 0f00 	cmp.w	r9, #0
  405586:	f000 815a 	beq.w	40583e <_dtoa_r+0xaa6>
  40558a:	9d07      	ldr	r5, [sp, #28]
  40558c:	46c8      	mov	r8, r9
  40558e:	9517      	str	r5, [sp, #92]	; 0x5c
  405590:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405592:	2d00      	cmp	r5, #0
  405594:	f000 8223 	beq.w	4059de <_dtoa_r+0xc46>
  405598:	4b25      	ldr	r3, [pc, #148]	; (405630 <_dtoa_r+0x898>)
  40559a:	2000      	movs	r0, #0
  40559c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  4055a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4055a4:	4926      	ldr	r1, [pc, #152]	; (405640 <_dtoa_r+0x8a8>)
  4055a6:	f002 f8a3 	bl	4076f0 <__aeabi_ddiv>
  4055aa:	4632      	mov	r2, r6
  4055ac:	463b      	mov	r3, r7
  4055ae:	f001 fdc1 	bl	407134 <__aeabi_dsub>
  4055b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4055b6:	4659      	mov	r1, fp
  4055b8:	4650      	mov	r0, sl
  4055ba:	f002 fa09 	bl	4079d0 <__aeabi_d2iz>
  4055be:	4605      	mov	r5, r0
  4055c0:	f001 ff06 	bl	4073d0 <__aeabi_i2d>
  4055c4:	4602      	mov	r2, r0
  4055c6:	460b      	mov	r3, r1
  4055c8:	4650      	mov	r0, sl
  4055ca:	4659      	mov	r1, fp
  4055cc:	f001 fdb2 	bl	407134 <__aeabi_dsub>
  4055d0:	3530      	adds	r5, #48	; 0x30
  4055d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4055d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  4055d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4055dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4055e0:	b2ed      	uxtb	r5, r5
  4055e2:	7035      	strb	r5, [r6, #0]
  4055e4:	f106 0b01 	add.w	fp, r6, #1
  4055e8:	f002 f9e8 	bl	4079bc <__aeabi_dcmpgt>
  4055ec:	2800      	cmp	r0, #0
  4055ee:	f040 82ab 	bne.w	405b48 <_dtoa_r+0xdb0>
  4055f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4055f6:	2000      	movs	r0, #0
  4055f8:	490f      	ldr	r1, [pc, #60]	; (405638 <_dtoa_r+0x8a0>)
  4055fa:	f001 fd9b 	bl	407134 <__aeabi_dsub>
  4055fe:	4602      	mov	r2, r0
  405600:	460b      	mov	r3, r1
  405602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405606:	f002 f9d9 	bl	4079bc <__aeabi_dcmpgt>
  40560a:	2800      	cmp	r0, #0
  40560c:	f040 82a2 	bne.w	405b54 <_dtoa_r+0xdbc>
  405610:	f1b8 0f01 	cmp.w	r8, #1
  405614:	f340 8181 	ble.w	40591a <_dtoa_r+0xb82>
  405618:	44b0      	add	r8, r6
  40561a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  40561e:	46a2      	mov	sl, r4
  405620:	46c1      	mov	r9, r8
  405622:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
  405626:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
  40562a:	e019      	b.n	405660 <_dtoa_r+0x8c8>
  40562c:	fffffbee 	.word	0xfffffbee
  405630:	00408290 	.word	0x00408290
  405634:	00408358 	.word	0x00408358
  405638:	3ff00000 	.word	0x3ff00000
  40563c:	401c0000 	.word	0x401c0000
  405640:	3fe00000 	.word	0x3fe00000
  405644:	2000      	movs	r0, #0
  405646:	49a8      	ldr	r1, [pc, #672]	; (4058e8 <_dtoa_r+0xb50>)
  405648:	f001 fd74 	bl	407134 <__aeabi_dsub>
  40564c:	4622      	mov	r2, r4
  40564e:	462b      	mov	r3, r5
  405650:	f002 f996 	bl	407980 <__aeabi_dcmplt>
  405654:	2800      	cmp	r0, #0
  405656:	f040 827b 	bne.w	405b50 <_dtoa_r+0xdb8>
  40565a:	45cb      	cmp	fp, r9
  40565c:	f000 815a 	beq.w	405914 <_dtoa_r+0xb7c>
  405660:	4620      	mov	r0, r4
  405662:	4629      	mov	r1, r5
  405664:	2200      	movs	r2, #0
  405666:	4ba1      	ldr	r3, [pc, #644]	; (4058ec <_dtoa_r+0xb54>)
  405668:	f001 ff18 	bl	40749c <__aeabi_dmul>
  40566c:	2200      	movs	r2, #0
  40566e:	4b9f      	ldr	r3, [pc, #636]	; (4058ec <_dtoa_r+0xb54>)
  405670:	4604      	mov	r4, r0
  405672:	460d      	mov	r5, r1
  405674:	4630      	mov	r0, r6
  405676:	4639      	mov	r1, r7
  405678:	f001 ff10 	bl	40749c <__aeabi_dmul>
  40567c:	460f      	mov	r7, r1
  40567e:	4606      	mov	r6, r0
  405680:	f002 f9a6 	bl	4079d0 <__aeabi_d2iz>
  405684:	4680      	mov	r8, r0
  405686:	f001 fea3 	bl	4073d0 <__aeabi_i2d>
  40568a:	4602      	mov	r2, r0
  40568c:	460b      	mov	r3, r1
  40568e:	4630      	mov	r0, r6
  405690:	4639      	mov	r1, r7
  405692:	f001 fd4f 	bl	407134 <__aeabi_dsub>
  405696:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40569a:	fa5f f888 	uxtb.w	r8, r8
  40569e:	4622      	mov	r2, r4
  4056a0:	462b      	mov	r3, r5
  4056a2:	f80b 8b01 	strb.w	r8, [fp], #1
  4056a6:	4606      	mov	r6, r0
  4056a8:	460f      	mov	r7, r1
  4056aa:	f002 f969 	bl	407980 <__aeabi_dcmplt>
  4056ae:	4632      	mov	r2, r6
  4056b0:	463b      	mov	r3, r7
  4056b2:	2800      	cmp	r0, #0
  4056b4:	d0c6      	beq.n	405644 <_dtoa_r+0x8ac>
  4056b6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  4056b8:	4654      	mov	r4, sl
  4056ba:	9607      	str	r6, [sp, #28]
  4056bc:	e539      	b.n	405132 <_dtoa_r+0x39a>
  4056be:	2600      	movs	r6, #0
  4056c0:	960b      	str	r6, [sp, #44]	; 0x2c
  4056c2:	9825      	ldr	r0, [sp, #148]	; 0x94
  4056c4:	2800      	cmp	r0, #0
  4056c6:	dd3c      	ble.n	405742 <_dtoa_r+0x9aa>
  4056c8:	4606      	mov	r6, r0
  4056ca:	900f      	str	r0, [sp, #60]	; 0x3c
  4056cc:	4681      	mov	r9, r0
  4056ce:	e6ec      	b.n	4054aa <_dtoa_r+0x712>
  4056d0:	2601      	movs	r6, #1
  4056d2:	960b      	str	r6, [sp, #44]	; 0x2c
  4056d4:	e7f5      	b.n	4056c2 <_dtoa_r+0x92a>
  4056d6:	f1b9 0f00 	cmp.w	r9, #0
  4056da:	f73f ac7c 	bgt.w	404fd6 <_dtoa_r+0x23e>
  4056de:	f040 80c6 	bne.w	40586e <_dtoa_r+0xad6>
  4056e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4056e6:	2200      	movs	r2, #0
  4056e8:	4b81      	ldr	r3, [pc, #516]	; (4058f0 <_dtoa_r+0xb58>)
  4056ea:	f001 fed7 	bl	40749c <__aeabi_dmul>
  4056ee:	4652      	mov	r2, sl
  4056f0:	465b      	mov	r3, fp
  4056f2:	f002 f959 	bl	4079a8 <__aeabi_dcmpge>
  4056f6:	46c8      	mov	r8, r9
  4056f8:	464e      	mov	r6, r9
  4056fa:	2800      	cmp	r0, #0
  4056fc:	d07c      	beq.n	4057f8 <_dtoa_r+0xa60>
  4056fe:	9d25      	ldr	r5, [sp, #148]	; 0x94
  405700:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  405704:	43ed      	mvns	r5, r5
  405706:	9507      	str	r5, [sp, #28]
  405708:	4641      	mov	r1, r8
  40570a:	4620      	mov	r0, r4
  40570c:	f000 ff0c 	bl	406528 <_Bfree>
  405710:	2e00      	cmp	r6, #0
  405712:	f47f ae06 	bne.w	405322 <_dtoa_r+0x58a>
  405716:	e50c      	b.n	405132 <_dtoa_r+0x39a>
  405718:	990a      	ldr	r1, [sp, #40]	; 0x28
  40571a:	4620      	mov	r0, r4
  40571c:	f001 f84e 	bl	4067bc <__pow5mult>
  405720:	900a      	str	r0, [sp, #40]	; 0x28
  405722:	e56a      	b.n	4051fa <_dtoa_r+0x462>
  405724:	9d16      	ldr	r5, [sp, #88]	; 0x58
  405726:	2d00      	cmp	r5, #0
  405728:	f000 81b8 	beq.w	405a9c <_dtoa_r+0xd04>
  40572c:	f203 4333 	addw	r3, r3, #1075	; 0x433
  405730:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405732:	9d08      	ldr	r5, [sp, #32]
  405734:	e527      	b.n	405186 <_dtoa_r+0x3ee>
  405736:	4601      	mov	r1, r0
  405738:	4620      	mov	r0, r4
  40573a:	f000 fef5 	bl	406528 <_Bfree>
  40573e:	2201      	movs	r2, #1
  405740:	e67a      	b.n	405438 <_dtoa_r+0x6a0>
  405742:	2601      	movs	r6, #1
  405744:	9625      	str	r6, [sp, #148]	; 0x94
  405746:	960f      	str	r6, [sp, #60]	; 0x3c
  405748:	46b1      	mov	r9, r6
  40574a:	2100      	movs	r1, #0
  40574c:	6461      	str	r1, [r4, #68]	; 0x44
  40574e:	e6bb      	b.n	4054c8 <_dtoa_r+0x730>
  405750:	980a      	ldr	r0, [sp, #40]	; 0x28
  405752:	4641      	mov	r1, r8
  405754:	f001 f8de 	bl	406914 <__mcmp>
  405758:	2800      	cmp	r0, #0
  40575a:	f6bf ad8f 	bge.w	40527c <_dtoa_r+0x4e4>
  40575e:	f8dd e01c 	ldr.w	lr, [sp, #28]
  405762:	990a      	ldr	r1, [sp, #40]	; 0x28
  405764:	f10e 3eff 	add.w	lr, lr, #4294967295
  405768:	4620      	mov	r0, r4
  40576a:	220a      	movs	r2, #10
  40576c:	2300      	movs	r3, #0
  40576e:	f8cd e01c 	str.w	lr, [sp, #28]
  405772:	f000 fee3 	bl	40653c <__multadd>
  405776:	900a      	str	r0, [sp, #40]	; 0x28
  405778:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40577a:	2800      	cmp	r0, #0
  40577c:	f040 8209 	bne.w	405b92 <_dtoa_r+0xdfa>
  405780:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  405784:	e57a      	b.n	40527c <_dtoa_r+0x4e4>
  405786:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40578a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  40578e:	6918      	ldr	r0, [r3, #16]
  405790:	f000 ff1e 	bl	4065d0 <__hi0bits>
  405794:	f1c0 0020 	rsb	r0, r0, #32
  405798:	e547      	b.n	40522a <_dtoa_r+0x492>
  40579a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40579c:	f7ff bb2c 	b.w	404df8 <_dtoa_r+0x60>
  4057a0:	f1ba 0f00 	cmp.w	sl, #0
  4057a4:	f47f ad3b 	bne.w	40521e <_dtoa_r+0x486>
  4057a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4057ac:	2b00      	cmp	r3, #0
  4057ae:	f040 817c 	bne.w	405aaa <_dtoa_r+0xd12>
  4057b2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4057b6:	0d3f      	lsrs	r7, r7, #20
  4057b8:	053f      	lsls	r7, r7, #20
  4057ba:	2f00      	cmp	r7, #0
  4057bc:	f43f ad30 	beq.w	405220 <_dtoa_r+0x488>
  4057c0:	9a08      	ldr	r2, [sp, #32]
  4057c2:	9b06      	ldr	r3, [sp, #24]
  4057c4:	3201      	adds	r2, #1
  4057c6:	3301      	adds	r3, #1
  4057c8:	9208      	str	r2, [sp, #32]
  4057ca:	9306      	str	r3, [sp, #24]
  4057cc:	2701      	movs	r7, #1
  4057ce:	e527      	b.n	405220 <_dtoa_r+0x488>
  4057d0:	9924      	ldr	r1, [sp, #144]	; 0x90
  4057d2:	2902      	cmp	r1, #2
  4057d4:	f77f ad56 	ble.w	405284 <_dtoa_r+0x4ec>
  4057d8:	f1b9 0f00 	cmp.w	r9, #0
  4057dc:	d18f      	bne.n	4056fe <_dtoa_r+0x966>
  4057de:	4641      	mov	r1, r8
  4057e0:	464b      	mov	r3, r9
  4057e2:	2205      	movs	r2, #5
  4057e4:	4620      	mov	r0, r4
  4057e6:	f000 fea9 	bl	40653c <__multadd>
  4057ea:	4680      	mov	r8, r0
  4057ec:	4641      	mov	r1, r8
  4057ee:	980a      	ldr	r0, [sp, #40]	; 0x28
  4057f0:	f001 f890 	bl	406914 <__mcmp>
  4057f4:	2800      	cmp	r0, #0
  4057f6:	dd82      	ble.n	4056fe <_dtoa_r+0x966>
  4057f8:	9d07      	ldr	r5, [sp, #28]
  4057fa:	2331      	movs	r3, #49	; 0x31
  4057fc:	3501      	adds	r5, #1
  4057fe:	9507      	str	r5, [sp, #28]
  405800:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405802:	702b      	strb	r3, [r5, #0]
  405804:	f105 0b01 	add.w	fp, r5, #1
  405808:	e77e      	b.n	405708 <_dtoa_r+0x970>
  40580a:	9807      	ldr	r0, [sp, #28]
  40580c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40580e:	2331      	movs	r3, #49	; 0x31
  405810:	3001      	adds	r0, #1
  405812:	9007      	str	r0, [sp, #28]
  405814:	700b      	strb	r3, [r1, #0]
  405816:	e576      	b.n	405306 <_dtoa_r+0x56e>
  405818:	46a3      	mov	fp, r4
  40581a:	9c03      	ldr	r4, [sp, #12]
  40581c:	e489      	b.n	405132 <_dtoa_r+0x39a>
  40581e:	4640      	mov	r0, r8
  405820:	f001 fdd6 	bl	4073d0 <__aeabi_i2d>
  405824:	4602      	mov	r2, r0
  405826:	460b      	mov	r3, r1
  405828:	4650      	mov	r0, sl
  40582a:	4659      	mov	r1, fp
  40582c:	f001 fe36 	bl	40749c <__aeabi_dmul>
  405830:	2200      	movs	r2, #0
  405832:	4b30      	ldr	r3, [pc, #192]	; (4058f4 <_dtoa_r+0xb5c>)
  405834:	f001 fc80 	bl	407138 <__adddf3>
  405838:	4606      	mov	r6, r0
  40583a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40583e:	4650      	mov	r0, sl
  405840:	4659      	mov	r1, fp
  405842:	2200      	movs	r2, #0
  405844:	4b2a      	ldr	r3, [pc, #168]	; (4058f0 <_dtoa_r+0xb58>)
  405846:	f001 fc75 	bl	407134 <__aeabi_dsub>
  40584a:	4632      	mov	r2, r6
  40584c:	463b      	mov	r3, r7
  40584e:	4682      	mov	sl, r0
  405850:	468b      	mov	fp, r1
  405852:	f002 f8b3 	bl	4079bc <__aeabi_dcmpgt>
  405856:	2800      	cmp	r0, #0
  405858:	f040 80bd 	bne.w	4059d6 <_dtoa_r+0xc3e>
  40585c:	4632      	mov	r2, r6
  40585e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  405862:	4650      	mov	r0, sl
  405864:	4659      	mov	r1, fp
  405866:	f002 f88b 	bl	407980 <__aeabi_dcmplt>
  40586a:	2800      	cmp	r0, #0
  40586c:	d055      	beq.n	40591a <_dtoa_r+0xb82>
  40586e:	f04f 0800 	mov.w	r8, #0
  405872:	4646      	mov	r6, r8
  405874:	e743      	b.n	4056fe <_dtoa_r+0x966>
  405876:	990a      	ldr	r1, [sp, #40]	; 0x28
  405878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40587a:	4620      	mov	r0, r4
  40587c:	f000 ff9e 	bl	4067bc <__pow5mult>
  405880:	900a      	str	r0, [sp, #40]	; 0x28
  405882:	e4ba      	b.n	4051fa <_dtoa_r+0x462>
  405884:	2601      	movs	r6, #1
  405886:	960b      	str	r6, [sp, #44]	; 0x2c
  405888:	e602      	b.n	405490 <_dtoa_r+0x6f8>
  40588a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40588c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  40588e:	1b7b      	subs	r3, r7, r5
  405890:	441e      	add	r6, r3
  405892:	970c      	str	r7, [sp, #48]	; 0x30
  405894:	960d      	str	r6, [sp, #52]	; 0x34
  405896:	2700      	movs	r7, #0
  405898:	e46f      	b.n	40517a <_dtoa_r+0x3e2>
  40589a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40589e:	f04f 0802 	mov.w	r8, #2
  4058a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  4058a6:	e638      	b.n	40551a <_dtoa_r+0x782>
  4058a8:	2a00      	cmp	r2, #0
  4058aa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4058ae:	46d9      	mov	r9, fp
  4058b0:	dd11      	ble.n	4058d6 <_dtoa_r+0xb3e>
  4058b2:	990a      	ldr	r1, [sp, #40]	; 0x28
  4058b4:	2201      	movs	r2, #1
  4058b6:	4620      	mov	r0, r4
  4058b8:	f000 ffce 	bl	406858 <__lshift>
  4058bc:	4641      	mov	r1, r8
  4058be:	900a      	str	r0, [sp, #40]	; 0x28
  4058c0:	f001 f828 	bl	406914 <__mcmp>
  4058c4:	2800      	cmp	r0, #0
  4058c6:	f340 815d 	ble.w	405b84 <_dtoa_r+0xdec>
  4058ca:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4058ce:	f000 811b 	beq.w	405b08 <_dtoa_r+0xd70>
  4058d2:	f109 0a31 	add.w	sl, r9, #49	; 0x31
  4058d6:	9b06      	ldr	r3, [sp, #24]
  4058d8:	4635      	mov	r5, r6
  4058da:	f883 a000 	strb.w	sl, [r3]
  4058de:	f103 0b01 	add.w	fp, r3, #1
  4058e2:	463e      	mov	r6, r7
  4058e4:	e50f      	b.n	405306 <_dtoa_r+0x56e>
  4058e6:	bf00      	nop
  4058e8:	3ff00000 	.word	0x3ff00000
  4058ec:	40240000 	.word	0x40240000
  4058f0:	40140000 	.word	0x40140000
  4058f4:	401c0000 	.word	0x401c0000
  4058f8:	d103      	bne.n	405902 <_dtoa_r+0xb6a>
  4058fa:	f01a 0f01 	tst.w	sl, #1
  4058fe:	f47f acf2 	bne.w	4052e6 <_dtoa_r+0x54e>
  405902:	465b      	mov	r3, fp
  405904:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  405908:	469b      	mov	fp, r3
  40590a:	2a30      	cmp	r2, #48	; 0x30
  40590c:	f103 33ff 	add.w	r3, r3, #4294967295
  405910:	d0f8      	beq.n	405904 <_dtoa_r+0xb6c>
  405912:	e4f8      	b.n	405306 <_dtoa_r+0x56e>
  405914:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  405918:	4654      	mov	r4, sl
  40591a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  40591e:	f7ff bb47 	b.w	404fb0 <_dtoa_r+0x218>
  405922:	9e07      	ldr	r6, [sp, #28]
  405924:	4275      	negs	r5, r6
  405926:	2d00      	cmp	r5, #0
  405928:	f000 80c2 	beq.w	405ab0 <_dtoa_r+0xd18>
  40592c:	4ba3      	ldr	r3, [pc, #652]	; (405bbc <_dtoa_r+0xe24>)
  40592e:	f005 020f 	and.w	r2, r5, #15
  405932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405936:	e9d3 2300 	ldrd	r2, r3, [r3]
  40593a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40593e:	f001 fdad 	bl	40749c <__aeabi_dmul>
  405942:	112d      	asrs	r5, r5, #4
  405944:	4682      	mov	sl, r0
  405946:	468b      	mov	fp, r1
  405948:	f000 812e 	beq.w	405ba8 <_dtoa_r+0xe10>
  40594c:	4e9c      	ldr	r6, [pc, #624]	; (405bc0 <_dtoa_r+0xe28>)
  40594e:	f04f 0802 	mov.w	r8, #2
  405952:	07ea      	lsls	r2, r5, #31
  405954:	d505      	bpl.n	405962 <_dtoa_r+0xbca>
  405956:	e9d6 2300 	ldrd	r2, r3, [r6]
  40595a:	f108 0801 	add.w	r8, r8, #1
  40595e:	f001 fd9d 	bl	40749c <__aeabi_dmul>
  405962:	106d      	asrs	r5, r5, #1
  405964:	f106 0608 	add.w	r6, r6, #8
  405968:	d1f3      	bne.n	405952 <_dtoa_r+0xbba>
  40596a:	4682      	mov	sl, r0
  40596c:	468b      	mov	fp, r1
  40596e:	e5ef      	b.n	405550 <_dtoa_r+0x7b8>
  405970:	9e07      	ldr	r6, [sp, #28]
  405972:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405974:	2230      	movs	r2, #48	; 0x30
  405976:	702a      	strb	r2, [r5, #0]
  405978:	3601      	adds	r6, #1
  40597a:	2231      	movs	r2, #49	; 0x31
  40597c:	9607      	str	r6, [sp, #28]
  40597e:	701a      	strb	r2, [r3, #0]
  405980:	f7ff bbd7 	b.w	405132 <_dtoa_r+0x39a>
  405984:	6871      	ldr	r1, [r6, #4]
  405986:	4620      	mov	r0, r4
  405988:	f000 fda8 	bl	4064dc <_Balloc>
  40598c:	6933      	ldr	r3, [r6, #16]
  40598e:	4605      	mov	r5, r0
  405990:	1c9a      	adds	r2, r3, #2
  405992:	0092      	lsls	r2, r2, #2
  405994:	f106 010c 	add.w	r1, r6, #12
  405998:	300c      	adds	r0, #12
  40599a:	f7fd fd0f 	bl	4033bc <memcpy>
  40599e:	4620      	mov	r0, r4
  4059a0:	4629      	mov	r1, r5
  4059a2:	2201      	movs	r2, #1
  4059a4:	f000 ff58 	bl	406858 <__lshift>
  4059a8:	4607      	mov	r7, r0
  4059aa:	e503      	b.n	4053b4 <_dtoa_r+0x61c>
  4059ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4059b0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4059b4:	f000 80a8 	beq.w	405b08 <_dtoa_r+0xd70>
  4059b8:	9d06      	ldr	r5, [sp, #24]
  4059ba:	f10a 0301 	add.w	r3, sl, #1
  4059be:	702b      	strb	r3, [r5, #0]
  4059c0:	4635      	mov	r5, r6
  4059c2:	9e06      	ldr	r6, [sp, #24]
  4059c4:	f106 0b01 	add.w	fp, r6, #1
  4059c8:	463e      	mov	r6, r7
  4059ca:	e49c      	b.n	405306 <_dtoa_r+0x56e>
  4059cc:	4635      	mov	r5, r6
  4059ce:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  4059d2:	463e      	mov	r6, r7
  4059d4:	e47b      	b.n	4052ce <_dtoa_r+0x536>
  4059d6:	f04f 0800 	mov.w	r8, #0
  4059da:	4646      	mov	r6, r8
  4059dc:	e70c      	b.n	4057f8 <_dtoa_r+0xa60>
  4059de:	4977      	ldr	r1, [pc, #476]	; (405bbc <_dtoa_r+0xe24>)
  4059e0:	f108 35ff 	add.w	r5, r8, #4294967295
  4059e4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  4059e8:	4632      	mov	r2, r6
  4059ea:	463b      	mov	r3, r7
  4059ec:	e9d1 0100 	ldrd	r0, r1, [r1]
  4059f0:	9510      	str	r5, [sp, #64]	; 0x40
  4059f2:	f001 fd53 	bl	40749c <__aeabi_dmul>
  4059f6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  4059fa:	4659      	mov	r1, fp
  4059fc:	4650      	mov	r0, sl
  4059fe:	f001 ffe7 	bl	4079d0 <__aeabi_d2iz>
  405a02:	4605      	mov	r5, r0
  405a04:	f001 fce4 	bl	4073d0 <__aeabi_i2d>
  405a08:	4602      	mov	r2, r0
  405a0a:	460b      	mov	r3, r1
  405a0c:	4650      	mov	r0, sl
  405a0e:	4659      	mov	r1, fp
  405a10:	f001 fb90 	bl	407134 <__aeabi_dsub>
  405a14:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  405a18:	3530      	adds	r5, #48	; 0x30
  405a1a:	f1b8 0f01 	cmp.w	r8, #1
  405a1e:	4606      	mov	r6, r0
  405a20:	460f      	mov	r7, r1
  405a22:	f88e 5000 	strb.w	r5, [lr]
  405a26:	f10e 0b01 	add.w	fp, lr, #1
  405a2a:	d01e      	beq.n	405a6a <_dtoa_r+0xcd2>
  405a2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
  405a2e:	1e6b      	subs	r3, r5, #1
  405a30:	eb03 0a08 	add.w	sl, r3, r8
  405a34:	2200      	movs	r2, #0
  405a36:	4b63      	ldr	r3, [pc, #396]	; (405bc4 <_dtoa_r+0xe2c>)
  405a38:	f001 fd30 	bl	40749c <__aeabi_dmul>
  405a3c:	460f      	mov	r7, r1
  405a3e:	4606      	mov	r6, r0
  405a40:	f001 ffc6 	bl	4079d0 <__aeabi_d2iz>
  405a44:	4680      	mov	r8, r0
  405a46:	f001 fcc3 	bl	4073d0 <__aeabi_i2d>
  405a4a:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405a4e:	4602      	mov	r2, r0
  405a50:	460b      	mov	r3, r1
  405a52:	4630      	mov	r0, r6
  405a54:	4639      	mov	r1, r7
  405a56:	f001 fb6d 	bl	407134 <__aeabi_dsub>
  405a5a:	f805 8f01 	strb.w	r8, [r5, #1]!
  405a5e:	4555      	cmp	r5, sl
  405a60:	d1e8      	bne.n	405a34 <_dtoa_r+0xc9c>
  405a62:	9d10      	ldr	r5, [sp, #64]	; 0x40
  405a64:	4606      	mov	r6, r0
  405a66:	460f      	mov	r7, r1
  405a68:	44ab      	add	fp, r5
  405a6a:	2200      	movs	r2, #0
  405a6c:	4b56      	ldr	r3, [pc, #344]	; (405bc8 <_dtoa_r+0xe30>)
  405a6e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
  405a72:	f001 fb61 	bl	407138 <__adddf3>
  405a76:	4632      	mov	r2, r6
  405a78:	463b      	mov	r3, r7
  405a7a:	f001 ff81 	bl	407980 <__aeabi_dcmplt>
  405a7e:	2800      	cmp	r0, #0
  405a80:	d04d      	beq.n	405b1e <_dtoa_r+0xd86>
  405a82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  405a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405a86:	9607      	str	r6, [sp, #28]
  405a88:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
  405a8c:	f7ff bb4a 	b.w	405124 <_dtoa_r+0x38c>
  405a90:	9e08      	ldr	r6, [sp, #32]
  405a92:	2300      	movs	r3, #0
  405a94:	ebc9 0506 	rsb	r5, r9, r6
  405a98:	f7ff bb75 	b.w	405186 <_dtoa_r+0x3ee>
  405a9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  405a9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405aa0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  405aa4:	9d08      	ldr	r5, [sp, #32]
  405aa6:	f7ff bb6e 	b.w	405186 <_dtoa_r+0x3ee>
  405aaa:	4657      	mov	r7, sl
  405aac:	f7ff bbb8 	b.w	405220 <_dtoa_r+0x488>
  405ab0:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
  405ab4:	f04f 0802 	mov.w	r8, #2
  405ab8:	e54a      	b.n	405550 <_dtoa_r+0x7b8>
  405aba:	f1b9 0f00 	cmp.w	r9, #0
  405abe:	f43f aeae 	beq.w	40581e <_dtoa_r+0xa86>
  405ac2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
  405ac4:	2e00      	cmp	r6, #0
  405ac6:	f77f af28 	ble.w	40591a <_dtoa_r+0xb82>
  405aca:	2200      	movs	r2, #0
  405acc:	4b3d      	ldr	r3, [pc, #244]	; (405bc4 <_dtoa_r+0xe2c>)
  405ace:	4650      	mov	r0, sl
  405ad0:	4659      	mov	r1, fp
  405ad2:	f001 fce3 	bl	40749c <__aeabi_dmul>
  405ad6:	4682      	mov	sl, r0
  405ad8:	f108 0001 	add.w	r0, r8, #1
  405adc:	468b      	mov	fp, r1
  405ade:	f001 fc77 	bl	4073d0 <__aeabi_i2d>
  405ae2:	4602      	mov	r2, r0
  405ae4:	460b      	mov	r3, r1
  405ae6:	4650      	mov	r0, sl
  405ae8:	4659      	mov	r1, fp
  405aea:	f001 fcd7 	bl	40749c <__aeabi_dmul>
  405aee:	2200      	movs	r2, #0
  405af0:	4b36      	ldr	r3, [pc, #216]	; (405bcc <_dtoa_r+0xe34>)
  405af2:	f001 fb21 	bl	407138 <__adddf3>
  405af6:	9d07      	ldr	r5, [sp, #28]
  405af8:	4606      	mov	r6, r0
  405afa:	3d01      	subs	r5, #1
  405afc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  405b00:	9517      	str	r5, [sp, #92]	; 0x5c
  405b02:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  405b06:	e543      	b.n	405590 <_dtoa_r+0x7f8>
  405b08:	4635      	mov	r5, r6
  405b0a:	9b06      	ldr	r3, [sp, #24]
  405b0c:	9e06      	ldr	r6, [sp, #24]
  405b0e:	2239      	movs	r2, #57	; 0x39
  405b10:	7032      	strb	r2, [r6, #0]
  405b12:	f103 0b01 	add.w	fp, r3, #1
  405b16:	463e      	mov	r6, r7
  405b18:	9909      	ldr	r1, [sp, #36]	; 0x24
  405b1a:	f7ff bbee 	b.w	4052fa <_dtoa_r+0x562>
  405b1e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
  405b22:	2000      	movs	r0, #0
  405b24:	4928      	ldr	r1, [pc, #160]	; (405bc8 <_dtoa_r+0xe30>)
  405b26:	f001 fb05 	bl	407134 <__aeabi_dsub>
  405b2a:	4632      	mov	r2, r6
  405b2c:	463b      	mov	r3, r7
  405b2e:	f001 ff45 	bl	4079bc <__aeabi_dcmpgt>
  405b32:	2800      	cmp	r0, #0
  405b34:	f43f aef1 	beq.w	40591a <_dtoa_r+0xb82>
  405b38:	465b      	mov	r3, fp
  405b3a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
  405b3e:	469b      	mov	fp, r3
  405b40:	2a30      	cmp	r2, #48	; 0x30
  405b42:	f103 33ff 	add.w	r3, r3, #4294967295
  405b46:	d0f8      	beq.n	405b3a <_dtoa_r+0xda2>
  405b48:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  405b4a:	9507      	str	r5, [sp, #28]
  405b4c:	f7ff baf1 	b.w	405132 <_dtoa_r+0x39a>
  405b50:	4645      	mov	r5, r8
  405b52:	4654      	mov	r4, sl
  405b54:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  405b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405b58:	9607      	str	r6, [sp, #28]
  405b5a:	f7ff bae3 	b.w	405124 <_dtoa_r+0x38c>
  405b5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405b62:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  405b66:	d0cf      	beq.n	405b08 <_dtoa_r+0xd70>
  405b68:	9b03      	ldr	r3, [sp, #12]
  405b6a:	4635      	mov	r5, r6
  405b6c:	2b00      	cmp	r3, #0
  405b6e:	9e06      	ldr	r6, [sp, #24]
  405b70:	bfc8      	it	gt
  405b72:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
  405b76:	f886 a000 	strb.w	sl, [r6]
  405b7a:	f106 0b01 	add.w	fp, r6, #1
  405b7e:	463e      	mov	r6, r7
  405b80:	f7ff bbc1 	b.w	405306 <_dtoa_r+0x56e>
  405b84:	f47f aea7 	bne.w	4058d6 <_dtoa_r+0xb3e>
  405b88:	f01a 0f01 	tst.w	sl, #1
  405b8c:	f43f aea3 	beq.w	4058d6 <_dtoa_r+0xb3e>
  405b90:	e69b      	b.n	4058ca <_dtoa_r+0xb32>
  405b92:	4631      	mov	r1, r6
  405b94:	4620      	mov	r0, r4
  405b96:	220a      	movs	r2, #10
  405b98:	2300      	movs	r3, #0
  405b9a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  405b9e:	f000 fccd 	bl	40653c <__multadd>
  405ba2:	4606      	mov	r6, r0
  405ba4:	f7ff bb6a 	b.w	40527c <_dtoa_r+0x4e4>
  405ba8:	f04f 0802 	mov.w	r8, #2
  405bac:	e4d0      	b.n	405550 <_dtoa_r+0x7b8>
  405bae:	f43f ab50 	beq.w	405252 <_dtoa_r+0x4ba>
  405bb2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
  405bb6:	f7ff bbe0 	b.w	40537a <_dtoa_r+0x5e2>
  405bba:	bf00      	nop
  405bbc:	00408290 	.word	0x00408290
  405bc0:	00408358 	.word	0x00408358
  405bc4:	40240000 	.word	0x40240000
  405bc8:	3fe00000 	.word	0x3fe00000
  405bcc:	401c0000 	.word	0x401c0000

00405bd0 <__libc_fini_array>:
  405bd0:	b538      	push	{r3, r4, r5, lr}
  405bd2:	4d09      	ldr	r5, [pc, #36]	; (405bf8 <__libc_fini_array+0x28>)
  405bd4:	4c09      	ldr	r4, [pc, #36]	; (405bfc <__libc_fini_array+0x2c>)
  405bd6:	1b64      	subs	r4, r4, r5
  405bd8:	10a4      	asrs	r4, r4, #2
  405bda:	bf18      	it	ne
  405bdc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  405be0:	d005      	beq.n	405bee <__libc_fini_array+0x1e>
  405be2:	3c01      	subs	r4, #1
  405be4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  405be8:	4798      	blx	r3
  405bea:	2c00      	cmp	r4, #0
  405bec:	d1f9      	bne.n	405be2 <__libc_fini_array+0x12>
  405bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405bf2:	f002 bbd5 	b.w	4083a0 <_fini>
  405bf6:	bf00      	nop
  405bf8:	004083ac 	.word	0x004083ac
  405bfc:	004083b0 	.word	0x004083b0

00405c00 <_malloc_trim_r>:
  405c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405c02:	4d23      	ldr	r5, [pc, #140]	; (405c90 <_malloc_trim_r+0x90>)
  405c04:	460f      	mov	r7, r1
  405c06:	4604      	mov	r4, r0
  405c08:	f000 fc64 	bl	4064d4 <__malloc_lock>
  405c0c:	68ab      	ldr	r3, [r5, #8]
  405c0e:	685e      	ldr	r6, [r3, #4]
  405c10:	f026 0603 	bic.w	r6, r6, #3
  405c14:	1bf1      	subs	r1, r6, r7
  405c16:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  405c1a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405c1e:	f021 010f 	bic.w	r1, r1, #15
  405c22:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
  405c26:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
  405c2a:	db07      	blt.n	405c3c <_malloc_trim_r+0x3c>
  405c2c:	4620      	mov	r0, r4
  405c2e:	2100      	movs	r1, #0
  405c30:	f001 f966 	bl	406f00 <_sbrk_r>
  405c34:	68ab      	ldr	r3, [r5, #8]
  405c36:	4433      	add	r3, r6
  405c38:	4298      	cmp	r0, r3
  405c3a:	d004      	beq.n	405c46 <_malloc_trim_r+0x46>
  405c3c:	4620      	mov	r0, r4
  405c3e:	f000 fc4b 	bl	4064d8 <__malloc_unlock>
  405c42:	2000      	movs	r0, #0
  405c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405c46:	4620      	mov	r0, r4
  405c48:	4279      	negs	r1, r7
  405c4a:	f001 f959 	bl	406f00 <_sbrk_r>
  405c4e:	3001      	adds	r0, #1
  405c50:	d00d      	beq.n	405c6e <_malloc_trim_r+0x6e>
  405c52:	4b10      	ldr	r3, [pc, #64]	; (405c94 <_malloc_trim_r+0x94>)
  405c54:	68aa      	ldr	r2, [r5, #8]
  405c56:	6819      	ldr	r1, [r3, #0]
  405c58:	1bf6      	subs	r6, r6, r7
  405c5a:	f046 0601 	orr.w	r6, r6, #1
  405c5e:	4620      	mov	r0, r4
  405c60:	1bc9      	subs	r1, r1, r7
  405c62:	6056      	str	r6, [r2, #4]
  405c64:	6019      	str	r1, [r3, #0]
  405c66:	f000 fc37 	bl	4064d8 <__malloc_unlock>
  405c6a:	2001      	movs	r0, #1
  405c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405c6e:	4620      	mov	r0, r4
  405c70:	2100      	movs	r1, #0
  405c72:	f001 f945 	bl	406f00 <_sbrk_r>
  405c76:	68ab      	ldr	r3, [r5, #8]
  405c78:	1ac2      	subs	r2, r0, r3
  405c7a:	2a0f      	cmp	r2, #15
  405c7c:	ddde      	ble.n	405c3c <_malloc_trim_r+0x3c>
  405c7e:	4d06      	ldr	r5, [pc, #24]	; (405c98 <_malloc_trim_r+0x98>)
  405c80:	4904      	ldr	r1, [pc, #16]	; (405c94 <_malloc_trim_r+0x94>)
  405c82:	682d      	ldr	r5, [r5, #0]
  405c84:	f042 0201 	orr.w	r2, r2, #1
  405c88:	1b40      	subs	r0, r0, r5
  405c8a:	605a      	str	r2, [r3, #4]
  405c8c:	6008      	str	r0, [r1, #0]
  405c8e:	e7d5      	b.n	405c3c <_malloc_trim_r+0x3c>
  405c90:	20000520 	.word	0x20000520
  405c94:	20000b94 	.word	0x20000b94
  405c98:	2000092c 	.word	0x2000092c

00405c9c <_free_r>:
  405c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405ca0:	460d      	mov	r5, r1
  405ca2:	4606      	mov	r6, r0
  405ca4:	2900      	cmp	r1, #0
  405ca6:	d055      	beq.n	405d54 <_free_r+0xb8>
  405ca8:	f000 fc14 	bl	4064d4 <__malloc_lock>
  405cac:	f855 1c04 	ldr.w	r1, [r5, #-4]
  405cb0:	f8df c170 	ldr.w	ip, [pc, #368]	; 405e24 <_free_r+0x188>
  405cb4:	f1a5 0408 	sub.w	r4, r5, #8
  405cb8:	f021 0301 	bic.w	r3, r1, #1
  405cbc:	18e2      	adds	r2, r4, r3
  405cbe:	f8dc 0008 	ldr.w	r0, [ip, #8]
  405cc2:	6857      	ldr	r7, [r2, #4]
  405cc4:	4290      	cmp	r0, r2
  405cc6:	f027 0703 	bic.w	r7, r7, #3
  405cca:	d068      	beq.n	405d9e <_free_r+0x102>
  405ccc:	f011 0101 	ands.w	r1, r1, #1
  405cd0:	6057      	str	r7, [r2, #4]
  405cd2:	d032      	beq.n	405d3a <_free_r+0x9e>
  405cd4:	2100      	movs	r1, #0
  405cd6:	19d0      	adds	r0, r2, r7
  405cd8:	6840      	ldr	r0, [r0, #4]
  405cda:	07c0      	lsls	r0, r0, #31
  405cdc:	d406      	bmi.n	405cec <_free_r+0x50>
  405cde:	443b      	add	r3, r7
  405ce0:	6890      	ldr	r0, [r2, #8]
  405ce2:	2900      	cmp	r1, #0
  405ce4:	d04d      	beq.n	405d82 <_free_r+0xe6>
  405ce6:	68d2      	ldr	r2, [r2, #12]
  405ce8:	60c2      	str	r2, [r0, #12]
  405cea:	6090      	str	r0, [r2, #8]
  405cec:	f043 0201 	orr.w	r2, r3, #1
  405cf0:	6062      	str	r2, [r4, #4]
  405cf2:	50e3      	str	r3, [r4, r3]
  405cf4:	b9e1      	cbnz	r1, 405d30 <_free_r+0x94>
  405cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405cfa:	d32d      	bcc.n	405d58 <_free_r+0xbc>
  405cfc:	0a5a      	lsrs	r2, r3, #9
  405cfe:	2a04      	cmp	r2, #4
  405d00:	d869      	bhi.n	405dd6 <_free_r+0x13a>
  405d02:	0998      	lsrs	r0, r3, #6
  405d04:	3038      	adds	r0, #56	; 0x38
  405d06:	0041      	lsls	r1, r0, #1
  405d08:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
  405d0c:	f8dc 2008 	ldr.w	r2, [ip, #8]
  405d10:	4944      	ldr	r1, [pc, #272]	; (405e24 <_free_r+0x188>)
  405d12:	4562      	cmp	r2, ip
  405d14:	d065      	beq.n	405de2 <_free_r+0x146>
  405d16:	6851      	ldr	r1, [r2, #4]
  405d18:	f021 0103 	bic.w	r1, r1, #3
  405d1c:	428b      	cmp	r3, r1
  405d1e:	d202      	bcs.n	405d26 <_free_r+0x8a>
  405d20:	6892      	ldr	r2, [r2, #8]
  405d22:	4594      	cmp	ip, r2
  405d24:	d1f7      	bne.n	405d16 <_free_r+0x7a>
  405d26:	68d3      	ldr	r3, [r2, #12]
  405d28:	60e3      	str	r3, [r4, #12]
  405d2a:	60a2      	str	r2, [r4, #8]
  405d2c:	609c      	str	r4, [r3, #8]
  405d2e:	60d4      	str	r4, [r2, #12]
  405d30:	4630      	mov	r0, r6
  405d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405d36:	f000 bbcf 	b.w	4064d8 <__malloc_unlock>
  405d3a:	f855 5c08 	ldr.w	r5, [r5, #-8]
  405d3e:	f10c 0808 	add.w	r8, ip, #8
  405d42:	1b64      	subs	r4, r4, r5
  405d44:	68a0      	ldr	r0, [r4, #8]
  405d46:	442b      	add	r3, r5
  405d48:	4540      	cmp	r0, r8
  405d4a:	d042      	beq.n	405dd2 <_free_r+0x136>
  405d4c:	68e5      	ldr	r5, [r4, #12]
  405d4e:	60c5      	str	r5, [r0, #12]
  405d50:	60a8      	str	r0, [r5, #8]
  405d52:	e7c0      	b.n	405cd6 <_free_r+0x3a>
  405d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405d58:	08db      	lsrs	r3, r3, #3
  405d5a:	109a      	asrs	r2, r3, #2
  405d5c:	2001      	movs	r0, #1
  405d5e:	4090      	lsls	r0, r2
  405d60:	f8dc 1004 	ldr.w	r1, [ip, #4]
  405d64:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
  405d68:	689a      	ldr	r2, [r3, #8]
  405d6a:	4301      	orrs	r1, r0
  405d6c:	60a2      	str	r2, [r4, #8]
  405d6e:	60e3      	str	r3, [r4, #12]
  405d70:	f8cc 1004 	str.w	r1, [ip, #4]
  405d74:	4630      	mov	r0, r6
  405d76:	609c      	str	r4, [r3, #8]
  405d78:	60d4      	str	r4, [r2, #12]
  405d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405d7e:	f000 bbab 	b.w	4064d8 <__malloc_unlock>
  405d82:	4d29      	ldr	r5, [pc, #164]	; (405e28 <_free_r+0x18c>)
  405d84:	42a8      	cmp	r0, r5
  405d86:	d1ae      	bne.n	405ce6 <_free_r+0x4a>
  405d88:	f043 0201 	orr.w	r2, r3, #1
  405d8c:	f8cc 4014 	str.w	r4, [ip, #20]
  405d90:	f8cc 4010 	str.w	r4, [ip, #16]
  405d94:	60e0      	str	r0, [r4, #12]
  405d96:	60a0      	str	r0, [r4, #8]
  405d98:	6062      	str	r2, [r4, #4]
  405d9a:	50e3      	str	r3, [r4, r3]
  405d9c:	e7c8      	b.n	405d30 <_free_r+0x94>
  405d9e:	441f      	add	r7, r3
  405da0:	07cb      	lsls	r3, r1, #31
  405da2:	d407      	bmi.n	405db4 <_free_r+0x118>
  405da4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405da8:	1a64      	subs	r4, r4, r1
  405daa:	68e3      	ldr	r3, [r4, #12]
  405dac:	68a2      	ldr	r2, [r4, #8]
  405dae:	440f      	add	r7, r1
  405db0:	60d3      	str	r3, [r2, #12]
  405db2:	609a      	str	r2, [r3, #8]
  405db4:	4b1d      	ldr	r3, [pc, #116]	; (405e2c <_free_r+0x190>)
  405db6:	f047 0201 	orr.w	r2, r7, #1
  405dba:	681b      	ldr	r3, [r3, #0]
  405dbc:	6062      	str	r2, [r4, #4]
  405dbe:	429f      	cmp	r7, r3
  405dc0:	f8cc 4008 	str.w	r4, [ip, #8]
  405dc4:	d3b4      	bcc.n	405d30 <_free_r+0x94>
  405dc6:	4b1a      	ldr	r3, [pc, #104]	; (405e30 <_free_r+0x194>)
  405dc8:	4630      	mov	r0, r6
  405dca:	6819      	ldr	r1, [r3, #0]
  405dcc:	f7ff ff18 	bl	405c00 <_malloc_trim_r>
  405dd0:	e7ae      	b.n	405d30 <_free_r+0x94>
  405dd2:	2101      	movs	r1, #1
  405dd4:	e77f      	b.n	405cd6 <_free_r+0x3a>
  405dd6:	2a14      	cmp	r2, #20
  405dd8:	d80b      	bhi.n	405df2 <_free_r+0x156>
  405dda:	f102 005b 	add.w	r0, r2, #91	; 0x5b
  405dde:	0041      	lsls	r1, r0, #1
  405de0:	e792      	b.n	405d08 <_free_r+0x6c>
  405de2:	1080      	asrs	r0, r0, #2
  405de4:	2501      	movs	r5, #1
  405de6:	4085      	lsls	r5, r0
  405de8:	6848      	ldr	r0, [r1, #4]
  405dea:	4613      	mov	r3, r2
  405dec:	4328      	orrs	r0, r5
  405dee:	6048      	str	r0, [r1, #4]
  405df0:	e79a      	b.n	405d28 <_free_r+0x8c>
  405df2:	2a54      	cmp	r2, #84	; 0x54
  405df4:	d803      	bhi.n	405dfe <_free_r+0x162>
  405df6:	0b18      	lsrs	r0, r3, #12
  405df8:	306e      	adds	r0, #110	; 0x6e
  405dfa:	0041      	lsls	r1, r0, #1
  405dfc:	e784      	b.n	405d08 <_free_r+0x6c>
  405dfe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405e02:	d803      	bhi.n	405e0c <_free_r+0x170>
  405e04:	0bd8      	lsrs	r0, r3, #15
  405e06:	3077      	adds	r0, #119	; 0x77
  405e08:	0041      	lsls	r1, r0, #1
  405e0a:	e77d      	b.n	405d08 <_free_r+0x6c>
  405e0c:	f240 5154 	movw	r1, #1364	; 0x554
  405e10:	428a      	cmp	r2, r1
  405e12:	d803      	bhi.n	405e1c <_free_r+0x180>
  405e14:	0c98      	lsrs	r0, r3, #18
  405e16:	307c      	adds	r0, #124	; 0x7c
  405e18:	0041      	lsls	r1, r0, #1
  405e1a:	e775      	b.n	405d08 <_free_r+0x6c>
  405e1c:	21fc      	movs	r1, #252	; 0xfc
  405e1e:	207e      	movs	r0, #126	; 0x7e
  405e20:	e772      	b.n	405d08 <_free_r+0x6c>
  405e22:	bf00      	nop
  405e24:	20000520 	.word	0x20000520
  405e28:	20000528 	.word	0x20000528
  405e2c:	20000928 	.word	0x20000928
  405e30:	20000b90 	.word	0x20000b90

00405e34 <_localeconv_r>:
  405e34:	4800      	ldr	r0, [pc, #0]	; (405e38 <_localeconv_r+0x4>)
  405e36:	4770      	bx	lr
  405e38:	200004e8 	.word	0x200004e8

00405e3c <_malloc_r>:
  405e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e40:	f101 050b 	add.w	r5, r1, #11
  405e44:	2d16      	cmp	r5, #22
  405e46:	b083      	sub	sp, #12
  405e48:	4606      	mov	r6, r0
  405e4a:	d927      	bls.n	405e9c <_malloc_r+0x60>
  405e4c:	f035 0507 	bics.w	r5, r5, #7
  405e50:	d427      	bmi.n	405ea2 <_malloc_r+0x66>
  405e52:	42a9      	cmp	r1, r5
  405e54:	d825      	bhi.n	405ea2 <_malloc_r+0x66>
  405e56:	4630      	mov	r0, r6
  405e58:	f000 fb3c 	bl	4064d4 <__malloc_lock>
  405e5c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  405e60:	d226      	bcs.n	405eb0 <_malloc_r+0x74>
  405e62:	4fc1      	ldr	r7, [pc, #772]	; (406168 <_malloc_r+0x32c>)
  405e64:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
  405e68:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
  405e6c:	68dc      	ldr	r4, [r3, #12]
  405e6e:	429c      	cmp	r4, r3
  405e70:	f000 81d2 	beq.w	406218 <_malloc_r+0x3dc>
  405e74:	6863      	ldr	r3, [r4, #4]
  405e76:	68e2      	ldr	r2, [r4, #12]
  405e78:	f023 0303 	bic.w	r3, r3, #3
  405e7c:	4423      	add	r3, r4
  405e7e:	6858      	ldr	r0, [r3, #4]
  405e80:	68a1      	ldr	r1, [r4, #8]
  405e82:	f040 0501 	orr.w	r5, r0, #1
  405e86:	60ca      	str	r2, [r1, #12]
  405e88:	4630      	mov	r0, r6
  405e8a:	6091      	str	r1, [r2, #8]
  405e8c:	605d      	str	r5, [r3, #4]
  405e8e:	f000 fb23 	bl	4064d8 <__malloc_unlock>
  405e92:	3408      	adds	r4, #8
  405e94:	4620      	mov	r0, r4
  405e96:	b003      	add	sp, #12
  405e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e9c:	2510      	movs	r5, #16
  405e9e:	42a9      	cmp	r1, r5
  405ea0:	d9d9      	bls.n	405e56 <_malloc_r+0x1a>
  405ea2:	2400      	movs	r4, #0
  405ea4:	230c      	movs	r3, #12
  405ea6:	4620      	mov	r0, r4
  405ea8:	6033      	str	r3, [r6, #0]
  405eaa:	b003      	add	sp, #12
  405eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405eb0:	ea5f 2c55 	movs.w	ip, r5, lsr #9
  405eb4:	f000 8089 	beq.w	405fca <_malloc_r+0x18e>
  405eb8:	f1bc 0f04 	cmp.w	ip, #4
  405ebc:	f200 8160 	bhi.w	406180 <_malloc_r+0x344>
  405ec0:	ea4f 1c95 	mov.w	ip, r5, lsr #6
  405ec4:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  405ec8:	ea4f 014c 	mov.w	r1, ip, lsl #1
  405ecc:	4fa6      	ldr	r7, [pc, #664]	; (406168 <_malloc_r+0x32c>)
  405ece:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  405ed2:	68cc      	ldr	r4, [r1, #12]
  405ed4:	42a1      	cmp	r1, r4
  405ed6:	d105      	bne.n	405ee4 <_malloc_r+0xa8>
  405ed8:	e00c      	b.n	405ef4 <_malloc_r+0xb8>
  405eda:	2b00      	cmp	r3, #0
  405edc:	da79      	bge.n	405fd2 <_malloc_r+0x196>
  405ede:	68e4      	ldr	r4, [r4, #12]
  405ee0:	42a1      	cmp	r1, r4
  405ee2:	d007      	beq.n	405ef4 <_malloc_r+0xb8>
  405ee4:	6862      	ldr	r2, [r4, #4]
  405ee6:	f022 0203 	bic.w	r2, r2, #3
  405eea:	1b53      	subs	r3, r2, r5
  405eec:	2b0f      	cmp	r3, #15
  405eee:	ddf4      	ble.n	405eda <_malloc_r+0x9e>
  405ef0:	f10c 3cff 	add.w	ip, ip, #4294967295
  405ef4:	f10c 0c01 	add.w	ip, ip, #1
  405ef8:	4b9b      	ldr	r3, [pc, #620]	; (406168 <_malloc_r+0x32c>)
  405efa:	693c      	ldr	r4, [r7, #16]
  405efc:	f103 0e08 	add.w	lr, r3, #8
  405f00:	4574      	cmp	r4, lr
  405f02:	f000 817e 	beq.w	406202 <_malloc_r+0x3c6>
  405f06:	6861      	ldr	r1, [r4, #4]
  405f08:	f021 0103 	bic.w	r1, r1, #3
  405f0c:	1b4a      	subs	r2, r1, r5
  405f0e:	2a0f      	cmp	r2, #15
  405f10:	f300 8164 	bgt.w	4061dc <_malloc_r+0x3a0>
  405f14:	2a00      	cmp	r2, #0
  405f16:	f8c3 e014 	str.w	lr, [r3, #20]
  405f1a:	f8c3 e010 	str.w	lr, [r3, #16]
  405f1e:	da69      	bge.n	405ff4 <_malloc_r+0x1b8>
  405f20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
  405f24:	f080 813a 	bcs.w	40619c <_malloc_r+0x360>
  405f28:	08c9      	lsrs	r1, r1, #3
  405f2a:	108a      	asrs	r2, r1, #2
  405f2c:	f04f 0801 	mov.w	r8, #1
  405f30:	fa08 f802 	lsl.w	r8, r8, r2
  405f34:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  405f38:	685a      	ldr	r2, [r3, #4]
  405f3a:	6888      	ldr	r0, [r1, #8]
  405f3c:	ea48 0202 	orr.w	r2, r8, r2
  405f40:	60a0      	str	r0, [r4, #8]
  405f42:	60e1      	str	r1, [r4, #12]
  405f44:	605a      	str	r2, [r3, #4]
  405f46:	608c      	str	r4, [r1, #8]
  405f48:	60c4      	str	r4, [r0, #12]
  405f4a:	ea4f 03ac 	mov.w	r3, ip, asr #2
  405f4e:	2001      	movs	r0, #1
  405f50:	4098      	lsls	r0, r3
  405f52:	4290      	cmp	r0, r2
  405f54:	d85b      	bhi.n	40600e <_malloc_r+0x1d2>
  405f56:	4202      	tst	r2, r0
  405f58:	d106      	bne.n	405f68 <_malloc_r+0x12c>
  405f5a:	f02c 0c03 	bic.w	ip, ip, #3
  405f5e:	0040      	lsls	r0, r0, #1
  405f60:	4202      	tst	r2, r0
  405f62:	f10c 0c04 	add.w	ip, ip, #4
  405f66:	d0fa      	beq.n	405f5e <_malloc_r+0x122>
  405f68:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
  405f6c:	4644      	mov	r4, r8
  405f6e:	46e1      	mov	r9, ip
  405f70:	68e3      	ldr	r3, [r4, #12]
  405f72:	429c      	cmp	r4, r3
  405f74:	d107      	bne.n	405f86 <_malloc_r+0x14a>
  405f76:	e146      	b.n	406206 <_malloc_r+0x3ca>
  405f78:	2a00      	cmp	r2, #0
  405f7a:	f280 8157 	bge.w	40622c <_malloc_r+0x3f0>
  405f7e:	68db      	ldr	r3, [r3, #12]
  405f80:	429c      	cmp	r4, r3
  405f82:	f000 8140 	beq.w	406206 <_malloc_r+0x3ca>
  405f86:	6859      	ldr	r1, [r3, #4]
  405f88:	f021 0103 	bic.w	r1, r1, #3
  405f8c:	1b4a      	subs	r2, r1, r5
  405f8e:	2a0f      	cmp	r2, #15
  405f90:	ddf2      	ble.n	405f78 <_malloc_r+0x13c>
  405f92:	461c      	mov	r4, r3
  405f94:	f854 cf08 	ldr.w	ip, [r4, #8]!
  405f98:	68d9      	ldr	r1, [r3, #12]
  405f9a:	f045 0901 	orr.w	r9, r5, #1
  405f9e:	f042 0801 	orr.w	r8, r2, #1
  405fa2:	441d      	add	r5, r3
  405fa4:	f8c3 9004 	str.w	r9, [r3, #4]
  405fa8:	4630      	mov	r0, r6
  405faa:	f8cc 100c 	str.w	r1, [ip, #12]
  405fae:	f8c1 c008 	str.w	ip, [r1, #8]
  405fb2:	617d      	str	r5, [r7, #20]
  405fb4:	613d      	str	r5, [r7, #16]
  405fb6:	f8c5 e00c 	str.w	lr, [r5, #12]
  405fba:	f8c5 e008 	str.w	lr, [r5, #8]
  405fbe:	f8c5 8004 	str.w	r8, [r5, #4]
  405fc2:	50aa      	str	r2, [r5, r2]
  405fc4:	f000 fa88 	bl	4064d8 <__malloc_unlock>
  405fc8:	e764      	b.n	405e94 <_malloc_r+0x58>
  405fca:	217e      	movs	r1, #126	; 0x7e
  405fcc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  405fd0:	e77c      	b.n	405ecc <_malloc_r+0x90>
  405fd2:	4422      	add	r2, r4
  405fd4:	6850      	ldr	r0, [r2, #4]
  405fd6:	68e3      	ldr	r3, [r4, #12]
  405fd8:	68a1      	ldr	r1, [r4, #8]
  405fda:	f040 0501 	orr.w	r5, r0, #1
  405fde:	60cb      	str	r3, [r1, #12]
  405fe0:	4630      	mov	r0, r6
  405fe2:	6099      	str	r1, [r3, #8]
  405fe4:	6055      	str	r5, [r2, #4]
  405fe6:	f000 fa77 	bl	4064d8 <__malloc_unlock>
  405fea:	3408      	adds	r4, #8
  405fec:	4620      	mov	r0, r4
  405fee:	b003      	add	sp, #12
  405ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ff4:	4421      	add	r1, r4
  405ff6:	684b      	ldr	r3, [r1, #4]
  405ff8:	4630      	mov	r0, r6
  405ffa:	f043 0301 	orr.w	r3, r3, #1
  405ffe:	604b      	str	r3, [r1, #4]
  406000:	f000 fa6a 	bl	4064d8 <__malloc_unlock>
  406004:	3408      	adds	r4, #8
  406006:	4620      	mov	r0, r4
  406008:	b003      	add	sp, #12
  40600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40600e:	68bc      	ldr	r4, [r7, #8]
  406010:	6863      	ldr	r3, [r4, #4]
  406012:	f023 0903 	bic.w	r9, r3, #3
  406016:	45a9      	cmp	r9, r5
  406018:	d304      	bcc.n	406024 <_malloc_r+0x1e8>
  40601a:	ebc5 0309 	rsb	r3, r5, r9
  40601e:	2b0f      	cmp	r3, #15
  406020:	f300 8091 	bgt.w	406146 <_malloc_r+0x30a>
  406024:	4b51      	ldr	r3, [pc, #324]	; (40616c <_malloc_r+0x330>)
  406026:	4a52      	ldr	r2, [pc, #328]	; (406170 <_malloc_r+0x334>)
  406028:	6819      	ldr	r1, [r3, #0]
  40602a:	6813      	ldr	r3, [r2, #0]
  40602c:	eb05 0a01 	add.w	sl, r5, r1
  406030:	3301      	adds	r3, #1
  406032:	eb04 0b09 	add.w	fp, r4, r9
  406036:	f000 8161 	beq.w	4062fc <_malloc_r+0x4c0>
  40603a:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
  40603e:	f10a 0a0f 	add.w	sl, sl, #15
  406042:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
  406046:	f02a 0a0f 	bic.w	sl, sl, #15
  40604a:	4630      	mov	r0, r6
  40604c:	4651      	mov	r1, sl
  40604e:	9201      	str	r2, [sp, #4]
  406050:	f000 ff56 	bl	406f00 <_sbrk_r>
  406054:	f1b0 3fff 	cmp.w	r0, #4294967295
  406058:	4680      	mov	r8, r0
  40605a:	9a01      	ldr	r2, [sp, #4]
  40605c:	f000 8101 	beq.w	406262 <_malloc_r+0x426>
  406060:	4583      	cmp	fp, r0
  406062:	f200 80fb 	bhi.w	40625c <_malloc_r+0x420>
  406066:	f8df c114 	ldr.w	ip, [pc, #276]	; 40617c <_malloc_r+0x340>
  40606a:	45c3      	cmp	fp, r8
  40606c:	f8dc 3000 	ldr.w	r3, [ip]
  406070:	4453      	add	r3, sl
  406072:	f8cc 3000 	str.w	r3, [ip]
  406076:	f000 814a 	beq.w	40630e <_malloc_r+0x4d2>
  40607a:	6812      	ldr	r2, [r2, #0]
  40607c:	493c      	ldr	r1, [pc, #240]	; (406170 <_malloc_r+0x334>)
  40607e:	3201      	adds	r2, #1
  406080:	bf1b      	ittet	ne
  406082:	ebcb 0b08 	rsbne	fp, fp, r8
  406086:	445b      	addne	r3, fp
  406088:	f8c1 8000 	streq.w	r8, [r1]
  40608c:	f8cc 3000 	strne.w	r3, [ip]
  406090:	f018 0307 	ands.w	r3, r8, #7
  406094:	f000 8114 	beq.w	4062c0 <_malloc_r+0x484>
  406098:	f1c3 0208 	rsb	r2, r3, #8
  40609c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  4060a0:	4490      	add	r8, r2
  4060a2:	3308      	adds	r3, #8
  4060a4:	44c2      	add	sl, r8
  4060a6:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
  4060aa:	ebca 0a03 	rsb	sl, sl, r3
  4060ae:	4651      	mov	r1, sl
  4060b0:	4630      	mov	r0, r6
  4060b2:	f8cd c004 	str.w	ip, [sp, #4]
  4060b6:	f000 ff23 	bl	406f00 <_sbrk_r>
  4060ba:	1c43      	adds	r3, r0, #1
  4060bc:	f8dd c004 	ldr.w	ip, [sp, #4]
  4060c0:	f000 8135 	beq.w	40632e <_malloc_r+0x4f2>
  4060c4:	ebc8 0200 	rsb	r2, r8, r0
  4060c8:	4452      	add	r2, sl
  4060ca:	f042 0201 	orr.w	r2, r2, #1
  4060ce:	f8dc 3000 	ldr.w	r3, [ip]
  4060d2:	42bc      	cmp	r4, r7
  4060d4:	4453      	add	r3, sl
  4060d6:	f8c7 8008 	str.w	r8, [r7, #8]
  4060da:	f8cc 3000 	str.w	r3, [ip]
  4060de:	f8c8 2004 	str.w	r2, [r8, #4]
  4060e2:	f8df a098 	ldr.w	sl, [pc, #152]	; 40617c <_malloc_r+0x340>
  4060e6:	d015      	beq.n	406114 <_malloc_r+0x2d8>
  4060e8:	f1b9 0f0f 	cmp.w	r9, #15
  4060ec:	f240 80eb 	bls.w	4062c6 <_malloc_r+0x48a>
  4060f0:	6861      	ldr	r1, [r4, #4]
  4060f2:	f1a9 020c 	sub.w	r2, r9, #12
  4060f6:	f022 0207 	bic.w	r2, r2, #7
  4060fa:	f001 0101 	and.w	r1, r1, #1
  4060fe:	ea42 0e01 	orr.w	lr, r2, r1
  406102:	2005      	movs	r0, #5
  406104:	18a1      	adds	r1, r4, r2
  406106:	2a0f      	cmp	r2, #15
  406108:	f8c4 e004 	str.w	lr, [r4, #4]
  40610c:	6048      	str	r0, [r1, #4]
  40610e:	6088      	str	r0, [r1, #8]
  406110:	f200 8111 	bhi.w	406336 <_malloc_r+0x4fa>
  406114:	4a17      	ldr	r2, [pc, #92]	; (406174 <_malloc_r+0x338>)
  406116:	68bc      	ldr	r4, [r7, #8]
  406118:	6811      	ldr	r1, [r2, #0]
  40611a:	428b      	cmp	r3, r1
  40611c:	bf88      	it	hi
  40611e:	6013      	strhi	r3, [r2, #0]
  406120:	4a15      	ldr	r2, [pc, #84]	; (406178 <_malloc_r+0x33c>)
  406122:	6811      	ldr	r1, [r2, #0]
  406124:	428b      	cmp	r3, r1
  406126:	bf88      	it	hi
  406128:	6013      	strhi	r3, [r2, #0]
  40612a:	6862      	ldr	r2, [r4, #4]
  40612c:	f022 0203 	bic.w	r2, r2, #3
  406130:	4295      	cmp	r5, r2
  406132:	ebc5 0302 	rsb	r3, r5, r2
  406136:	d801      	bhi.n	40613c <_malloc_r+0x300>
  406138:	2b0f      	cmp	r3, #15
  40613a:	dc04      	bgt.n	406146 <_malloc_r+0x30a>
  40613c:	4630      	mov	r0, r6
  40613e:	f000 f9cb 	bl	4064d8 <__malloc_unlock>
  406142:	2400      	movs	r4, #0
  406144:	e6a6      	b.n	405e94 <_malloc_r+0x58>
  406146:	f045 0201 	orr.w	r2, r5, #1
  40614a:	f043 0301 	orr.w	r3, r3, #1
  40614e:	4425      	add	r5, r4
  406150:	6062      	str	r2, [r4, #4]
  406152:	4630      	mov	r0, r6
  406154:	60bd      	str	r5, [r7, #8]
  406156:	606b      	str	r3, [r5, #4]
  406158:	f000 f9be 	bl	4064d8 <__malloc_unlock>
  40615c:	3408      	adds	r4, #8
  40615e:	4620      	mov	r0, r4
  406160:	b003      	add	sp, #12
  406162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406166:	bf00      	nop
  406168:	20000520 	.word	0x20000520
  40616c:	20000b90 	.word	0x20000b90
  406170:	2000092c 	.word	0x2000092c
  406174:	20000b8c 	.word	0x20000b8c
  406178:	20000b88 	.word	0x20000b88
  40617c:	20000b94 	.word	0x20000b94
  406180:	f1bc 0f14 	cmp.w	ip, #20
  406184:	d961      	bls.n	40624a <_malloc_r+0x40e>
  406186:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  40618a:	f200 808f 	bhi.w	4062ac <_malloc_r+0x470>
  40618e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
  406192:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  406196:	ea4f 014c 	mov.w	r1, ip, lsl #1
  40619a:	e697      	b.n	405ecc <_malloc_r+0x90>
  40619c:	0a4b      	lsrs	r3, r1, #9
  40619e:	2b04      	cmp	r3, #4
  4061a0:	d958      	bls.n	406254 <_malloc_r+0x418>
  4061a2:	2b14      	cmp	r3, #20
  4061a4:	f200 80ad 	bhi.w	406302 <_malloc_r+0x4c6>
  4061a8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
  4061ac:	0050      	lsls	r0, r2, #1
  4061ae:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  4061b2:	6883      	ldr	r3, [r0, #8]
  4061b4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 406370 <_malloc_r+0x534>
  4061b8:	4283      	cmp	r3, r0
  4061ba:	f000 808a 	beq.w	4062d2 <_malloc_r+0x496>
  4061be:	685a      	ldr	r2, [r3, #4]
  4061c0:	f022 0203 	bic.w	r2, r2, #3
  4061c4:	4291      	cmp	r1, r2
  4061c6:	d202      	bcs.n	4061ce <_malloc_r+0x392>
  4061c8:	689b      	ldr	r3, [r3, #8]
  4061ca:	4298      	cmp	r0, r3
  4061cc:	d1f7      	bne.n	4061be <_malloc_r+0x382>
  4061ce:	68d9      	ldr	r1, [r3, #12]
  4061d0:	687a      	ldr	r2, [r7, #4]
  4061d2:	60e1      	str	r1, [r4, #12]
  4061d4:	60a3      	str	r3, [r4, #8]
  4061d6:	608c      	str	r4, [r1, #8]
  4061d8:	60dc      	str	r4, [r3, #12]
  4061da:	e6b6      	b.n	405f4a <_malloc_r+0x10e>
  4061dc:	f045 0701 	orr.w	r7, r5, #1
  4061e0:	f042 0101 	orr.w	r1, r2, #1
  4061e4:	4425      	add	r5, r4
  4061e6:	6067      	str	r7, [r4, #4]
  4061e8:	4630      	mov	r0, r6
  4061ea:	615d      	str	r5, [r3, #20]
  4061ec:	611d      	str	r5, [r3, #16]
  4061ee:	f8c5 e00c 	str.w	lr, [r5, #12]
  4061f2:	f8c5 e008 	str.w	lr, [r5, #8]
  4061f6:	6069      	str	r1, [r5, #4]
  4061f8:	50aa      	str	r2, [r5, r2]
  4061fa:	3408      	adds	r4, #8
  4061fc:	f000 f96c 	bl	4064d8 <__malloc_unlock>
  406200:	e648      	b.n	405e94 <_malloc_r+0x58>
  406202:	685a      	ldr	r2, [r3, #4]
  406204:	e6a1      	b.n	405f4a <_malloc_r+0x10e>
  406206:	f109 0901 	add.w	r9, r9, #1
  40620a:	f019 0f03 	tst.w	r9, #3
  40620e:	f104 0408 	add.w	r4, r4, #8
  406212:	f47f aead 	bne.w	405f70 <_malloc_r+0x134>
  406216:	e02d      	b.n	406274 <_malloc_r+0x438>
  406218:	f104 0308 	add.w	r3, r4, #8
  40621c:	6964      	ldr	r4, [r4, #20]
  40621e:	42a3      	cmp	r3, r4
  406220:	bf08      	it	eq
  406222:	f10c 0c02 	addeq.w	ip, ip, #2
  406226:	f43f ae67 	beq.w	405ef8 <_malloc_r+0xbc>
  40622a:	e623      	b.n	405e74 <_malloc_r+0x38>
  40622c:	4419      	add	r1, r3
  40622e:	6848      	ldr	r0, [r1, #4]
  406230:	461c      	mov	r4, r3
  406232:	f854 2f08 	ldr.w	r2, [r4, #8]!
  406236:	68db      	ldr	r3, [r3, #12]
  406238:	f040 0501 	orr.w	r5, r0, #1
  40623c:	604d      	str	r5, [r1, #4]
  40623e:	4630      	mov	r0, r6
  406240:	60d3      	str	r3, [r2, #12]
  406242:	609a      	str	r2, [r3, #8]
  406244:	f000 f948 	bl	4064d8 <__malloc_unlock>
  406248:	e624      	b.n	405e94 <_malloc_r+0x58>
  40624a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  40624e:	ea4f 014c 	mov.w	r1, ip, lsl #1
  406252:	e63b      	b.n	405ecc <_malloc_r+0x90>
  406254:	098a      	lsrs	r2, r1, #6
  406256:	3238      	adds	r2, #56	; 0x38
  406258:	0050      	lsls	r0, r2, #1
  40625a:	e7a8      	b.n	4061ae <_malloc_r+0x372>
  40625c:	42bc      	cmp	r4, r7
  40625e:	f43f af02 	beq.w	406066 <_malloc_r+0x22a>
  406262:	68bc      	ldr	r4, [r7, #8]
  406264:	6862      	ldr	r2, [r4, #4]
  406266:	f022 0203 	bic.w	r2, r2, #3
  40626a:	e761      	b.n	406130 <_malloc_r+0x2f4>
  40626c:	f8d8 8000 	ldr.w	r8, [r8]
  406270:	4598      	cmp	r8, r3
  406272:	d17a      	bne.n	40636a <_malloc_r+0x52e>
  406274:	f01c 0f03 	tst.w	ip, #3
  406278:	f1a8 0308 	sub.w	r3, r8, #8
  40627c:	f10c 3cff 	add.w	ip, ip, #4294967295
  406280:	d1f4      	bne.n	40626c <_malloc_r+0x430>
  406282:	687b      	ldr	r3, [r7, #4]
  406284:	ea23 0300 	bic.w	r3, r3, r0
  406288:	607b      	str	r3, [r7, #4]
  40628a:	0040      	lsls	r0, r0, #1
  40628c:	4298      	cmp	r0, r3
  40628e:	f63f aebe 	bhi.w	40600e <_malloc_r+0x1d2>
  406292:	2800      	cmp	r0, #0
  406294:	f43f aebb 	beq.w	40600e <_malloc_r+0x1d2>
  406298:	4203      	tst	r3, r0
  40629a:	46cc      	mov	ip, r9
  40629c:	f47f ae64 	bne.w	405f68 <_malloc_r+0x12c>
  4062a0:	0040      	lsls	r0, r0, #1
  4062a2:	4203      	tst	r3, r0
  4062a4:	f10c 0c04 	add.w	ip, ip, #4
  4062a8:	d0fa      	beq.n	4062a0 <_malloc_r+0x464>
  4062aa:	e65d      	b.n	405f68 <_malloc_r+0x12c>
  4062ac:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  4062b0:	d819      	bhi.n	4062e6 <_malloc_r+0x4aa>
  4062b2:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
  4062b6:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  4062ba:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4062be:	e605      	b.n	405ecc <_malloc_r+0x90>
  4062c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4062c4:	e6ee      	b.n	4060a4 <_malloc_r+0x268>
  4062c6:	2301      	movs	r3, #1
  4062c8:	f8c8 3004 	str.w	r3, [r8, #4]
  4062cc:	4644      	mov	r4, r8
  4062ce:	2200      	movs	r2, #0
  4062d0:	e72e      	b.n	406130 <_malloc_r+0x2f4>
  4062d2:	1092      	asrs	r2, r2, #2
  4062d4:	2001      	movs	r0, #1
  4062d6:	4090      	lsls	r0, r2
  4062d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4062dc:	4619      	mov	r1, r3
  4062de:	4302      	orrs	r2, r0
  4062e0:	f8c8 2004 	str.w	r2, [r8, #4]
  4062e4:	e775      	b.n	4061d2 <_malloc_r+0x396>
  4062e6:	f240 5354 	movw	r3, #1364	; 0x554
  4062ea:	459c      	cmp	ip, r3
  4062ec:	d81b      	bhi.n	406326 <_malloc_r+0x4ea>
  4062ee:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  4062f2:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  4062f6:	ea4f 014c 	mov.w	r1, ip, lsl #1
  4062fa:	e5e7      	b.n	405ecc <_malloc_r+0x90>
  4062fc:	f10a 0a10 	add.w	sl, sl, #16
  406300:	e6a3      	b.n	40604a <_malloc_r+0x20e>
  406302:	2b54      	cmp	r3, #84	; 0x54
  406304:	d81f      	bhi.n	406346 <_malloc_r+0x50a>
  406306:	0b0a      	lsrs	r2, r1, #12
  406308:	326e      	adds	r2, #110	; 0x6e
  40630a:	0050      	lsls	r0, r2, #1
  40630c:	e74f      	b.n	4061ae <_malloc_r+0x372>
  40630e:	f3cb 010b 	ubfx	r1, fp, #0, #12
  406312:	2900      	cmp	r1, #0
  406314:	f47f aeb1 	bne.w	40607a <_malloc_r+0x23e>
  406318:	eb0a 0109 	add.w	r1, sl, r9
  40631c:	68ba      	ldr	r2, [r7, #8]
  40631e:	f041 0101 	orr.w	r1, r1, #1
  406322:	6051      	str	r1, [r2, #4]
  406324:	e6f6      	b.n	406114 <_malloc_r+0x2d8>
  406326:	21fc      	movs	r1, #252	; 0xfc
  406328:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40632c:	e5ce      	b.n	405ecc <_malloc_r+0x90>
  40632e:	2201      	movs	r2, #1
  406330:	f04f 0a00 	mov.w	sl, #0
  406334:	e6cb      	b.n	4060ce <_malloc_r+0x292>
  406336:	f104 0108 	add.w	r1, r4, #8
  40633a:	4630      	mov	r0, r6
  40633c:	f7ff fcae 	bl	405c9c <_free_r>
  406340:	f8da 3000 	ldr.w	r3, [sl]
  406344:	e6e6      	b.n	406114 <_malloc_r+0x2d8>
  406346:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40634a:	d803      	bhi.n	406354 <_malloc_r+0x518>
  40634c:	0bca      	lsrs	r2, r1, #15
  40634e:	3277      	adds	r2, #119	; 0x77
  406350:	0050      	lsls	r0, r2, #1
  406352:	e72c      	b.n	4061ae <_malloc_r+0x372>
  406354:	f240 5254 	movw	r2, #1364	; 0x554
  406358:	4293      	cmp	r3, r2
  40635a:	d803      	bhi.n	406364 <_malloc_r+0x528>
  40635c:	0c8a      	lsrs	r2, r1, #18
  40635e:	327c      	adds	r2, #124	; 0x7c
  406360:	0050      	lsls	r0, r2, #1
  406362:	e724      	b.n	4061ae <_malloc_r+0x372>
  406364:	20fc      	movs	r0, #252	; 0xfc
  406366:	227e      	movs	r2, #126	; 0x7e
  406368:	e721      	b.n	4061ae <_malloc_r+0x372>
  40636a:	687b      	ldr	r3, [r7, #4]
  40636c:	e78d      	b.n	40628a <_malloc_r+0x44e>
  40636e:	bf00      	nop
  406370:	20000520 	.word	0x20000520

00406374 <memchr>:
  406374:	0783      	lsls	r3, r0, #30
  406376:	b470      	push	{r4, r5, r6}
  406378:	b2c9      	uxtb	r1, r1
  40637a:	d040      	beq.n	4063fe <memchr+0x8a>
  40637c:	1e54      	subs	r4, r2, #1
  40637e:	b32a      	cbz	r2, 4063cc <memchr+0x58>
  406380:	7803      	ldrb	r3, [r0, #0]
  406382:	428b      	cmp	r3, r1
  406384:	d023      	beq.n	4063ce <memchr+0x5a>
  406386:	1c43      	adds	r3, r0, #1
  406388:	e004      	b.n	406394 <memchr+0x20>
  40638a:	b1fc      	cbz	r4, 4063cc <memchr+0x58>
  40638c:	7805      	ldrb	r5, [r0, #0]
  40638e:	4614      	mov	r4, r2
  406390:	428d      	cmp	r5, r1
  406392:	d01c      	beq.n	4063ce <memchr+0x5a>
  406394:	f013 0f03 	tst.w	r3, #3
  406398:	4618      	mov	r0, r3
  40639a:	f104 32ff 	add.w	r2, r4, #4294967295
  40639e:	f103 0301 	add.w	r3, r3, #1
  4063a2:	d1f2      	bne.n	40638a <memchr+0x16>
  4063a4:	2c03      	cmp	r4, #3
  4063a6:	d814      	bhi.n	4063d2 <memchr+0x5e>
  4063a8:	1e65      	subs	r5, r4, #1
  4063aa:	b354      	cbz	r4, 406402 <memchr+0x8e>
  4063ac:	7803      	ldrb	r3, [r0, #0]
  4063ae:	428b      	cmp	r3, r1
  4063b0:	d00d      	beq.n	4063ce <memchr+0x5a>
  4063b2:	1c42      	adds	r2, r0, #1
  4063b4:	2300      	movs	r3, #0
  4063b6:	e002      	b.n	4063be <memchr+0x4a>
  4063b8:	7804      	ldrb	r4, [r0, #0]
  4063ba:	428c      	cmp	r4, r1
  4063bc:	d007      	beq.n	4063ce <memchr+0x5a>
  4063be:	42ab      	cmp	r3, r5
  4063c0:	4610      	mov	r0, r2
  4063c2:	f103 0301 	add.w	r3, r3, #1
  4063c6:	f102 0201 	add.w	r2, r2, #1
  4063ca:	d1f5      	bne.n	4063b8 <memchr+0x44>
  4063cc:	2000      	movs	r0, #0
  4063ce:	bc70      	pop	{r4, r5, r6}
  4063d0:	4770      	bx	lr
  4063d2:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  4063d6:	4603      	mov	r3, r0
  4063d8:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  4063dc:	681a      	ldr	r2, [r3, #0]
  4063de:	4618      	mov	r0, r3
  4063e0:	4072      	eors	r2, r6
  4063e2:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
  4063e6:	ea25 0202 	bic.w	r2, r5, r2
  4063ea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4063ee:	f103 0304 	add.w	r3, r3, #4
  4063f2:	d1d9      	bne.n	4063a8 <memchr+0x34>
  4063f4:	3c04      	subs	r4, #4
  4063f6:	2c03      	cmp	r4, #3
  4063f8:	4618      	mov	r0, r3
  4063fa:	d8ef      	bhi.n	4063dc <memchr+0x68>
  4063fc:	e7d4      	b.n	4063a8 <memchr+0x34>
  4063fe:	4614      	mov	r4, r2
  406400:	e7d0      	b.n	4063a4 <memchr+0x30>
  406402:	4620      	mov	r0, r4
  406404:	e7e3      	b.n	4063ce <memchr+0x5a>
  406406:	bf00      	nop

00406408 <memmove>:
  406408:	4288      	cmp	r0, r1
  40640a:	b4f0      	push	{r4, r5, r6, r7}
  40640c:	d910      	bls.n	406430 <memmove+0x28>
  40640e:	188c      	adds	r4, r1, r2
  406410:	42a0      	cmp	r0, r4
  406412:	d20d      	bcs.n	406430 <memmove+0x28>
  406414:	1885      	adds	r5, r0, r2
  406416:	1e53      	subs	r3, r2, #1
  406418:	b142      	cbz	r2, 40642c <memmove+0x24>
  40641a:	4621      	mov	r1, r4
  40641c:	462a      	mov	r2, r5
  40641e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
  406422:	3b01      	subs	r3, #1
  406424:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406428:	1c5c      	adds	r4, r3, #1
  40642a:	d1f8      	bne.n	40641e <memmove+0x16>
  40642c:	bcf0      	pop	{r4, r5, r6, r7}
  40642e:	4770      	bx	lr
  406430:	2a0f      	cmp	r2, #15
  406432:	d944      	bls.n	4064be <memmove+0xb6>
  406434:	ea40 0301 	orr.w	r3, r0, r1
  406438:	079b      	lsls	r3, r3, #30
  40643a:	d144      	bne.n	4064c6 <memmove+0xbe>
  40643c:	f1a2 0710 	sub.w	r7, r2, #16
  406440:	093f      	lsrs	r7, r7, #4
  406442:	eb00 1607 	add.w	r6, r0, r7, lsl #4
  406446:	3610      	adds	r6, #16
  406448:	460c      	mov	r4, r1
  40644a:	4603      	mov	r3, r0
  40644c:	6825      	ldr	r5, [r4, #0]
  40644e:	3310      	adds	r3, #16
  406450:	f843 5c10 	str.w	r5, [r3, #-16]
  406454:	6865      	ldr	r5, [r4, #4]
  406456:	3410      	adds	r4, #16
  406458:	f843 5c0c 	str.w	r5, [r3, #-12]
  40645c:	f854 5c08 	ldr.w	r5, [r4, #-8]
  406460:	f843 5c08 	str.w	r5, [r3, #-8]
  406464:	f854 5c04 	ldr.w	r5, [r4, #-4]
  406468:	f843 5c04 	str.w	r5, [r3, #-4]
  40646c:	42b3      	cmp	r3, r6
  40646e:	d1ed      	bne.n	40644c <memmove+0x44>
  406470:	1c7b      	adds	r3, r7, #1
  406472:	f002 0c0f 	and.w	ip, r2, #15
  406476:	011b      	lsls	r3, r3, #4
  406478:	f1bc 0f03 	cmp.w	ip, #3
  40647c:	4419      	add	r1, r3
  40647e:	4403      	add	r3, r0
  406480:	d923      	bls.n	4064ca <memmove+0xc2>
  406482:	460e      	mov	r6, r1
  406484:	461d      	mov	r5, r3
  406486:	4664      	mov	r4, ip
  406488:	f856 7b04 	ldr.w	r7, [r6], #4
  40648c:	3c04      	subs	r4, #4
  40648e:	2c03      	cmp	r4, #3
  406490:	f845 7b04 	str.w	r7, [r5], #4
  406494:	d8f8      	bhi.n	406488 <memmove+0x80>
  406496:	f1ac 0404 	sub.w	r4, ip, #4
  40649a:	f024 0403 	bic.w	r4, r4, #3
  40649e:	3404      	adds	r4, #4
  4064a0:	f002 0203 	and.w	r2, r2, #3
  4064a4:	4423      	add	r3, r4
  4064a6:	4421      	add	r1, r4
  4064a8:	2a00      	cmp	r2, #0
  4064aa:	d0bf      	beq.n	40642c <memmove+0x24>
  4064ac:	441a      	add	r2, r3
  4064ae:	f811 4b01 	ldrb.w	r4, [r1], #1
  4064b2:	f803 4b01 	strb.w	r4, [r3], #1
  4064b6:	4293      	cmp	r3, r2
  4064b8:	d1f9      	bne.n	4064ae <memmove+0xa6>
  4064ba:	bcf0      	pop	{r4, r5, r6, r7}
  4064bc:	4770      	bx	lr
  4064be:	4603      	mov	r3, r0
  4064c0:	2a00      	cmp	r2, #0
  4064c2:	d1f3      	bne.n	4064ac <memmove+0xa4>
  4064c4:	e7b2      	b.n	40642c <memmove+0x24>
  4064c6:	4603      	mov	r3, r0
  4064c8:	e7f0      	b.n	4064ac <memmove+0xa4>
  4064ca:	4662      	mov	r2, ip
  4064cc:	2a00      	cmp	r2, #0
  4064ce:	d1ed      	bne.n	4064ac <memmove+0xa4>
  4064d0:	e7ac      	b.n	40642c <memmove+0x24>
  4064d2:	bf00      	nop

004064d4 <__malloc_lock>:
  4064d4:	4770      	bx	lr
  4064d6:	bf00      	nop

004064d8 <__malloc_unlock>:
  4064d8:	4770      	bx	lr
  4064da:	bf00      	nop

004064dc <_Balloc>:
  4064dc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4064de:	b570      	push	{r4, r5, r6, lr}
  4064e0:	4605      	mov	r5, r0
  4064e2:	460c      	mov	r4, r1
  4064e4:	b14a      	cbz	r2, 4064fa <_Balloc+0x1e>
  4064e6:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  4064ea:	b180      	cbz	r0, 40650e <_Balloc+0x32>
  4064ec:	6801      	ldr	r1, [r0, #0]
  4064ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  4064f2:	2200      	movs	r2, #0
  4064f4:	6102      	str	r2, [r0, #16]
  4064f6:	60c2      	str	r2, [r0, #12]
  4064f8:	bd70      	pop	{r4, r5, r6, pc}
  4064fa:	2221      	movs	r2, #33	; 0x21
  4064fc:	2104      	movs	r1, #4
  4064fe:	f000 fde5 	bl	4070cc <_calloc_r>
  406502:	64e8      	str	r0, [r5, #76]	; 0x4c
  406504:	4602      	mov	r2, r0
  406506:	2800      	cmp	r0, #0
  406508:	d1ed      	bne.n	4064e6 <_Balloc+0xa>
  40650a:	2000      	movs	r0, #0
  40650c:	bd70      	pop	{r4, r5, r6, pc}
  40650e:	2101      	movs	r1, #1
  406510:	fa01 f604 	lsl.w	r6, r1, r4
  406514:	1d72      	adds	r2, r6, #5
  406516:	4628      	mov	r0, r5
  406518:	0092      	lsls	r2, r2, #2
  40651a:	f000 fdd7 	bl	4070cc <_calloc_r>
  40651e:	2800      	cmp	r0, #0
  406520:	d0f3      	beq.n	40650a <_Balloc+0x2e>
  406522:	6044      	str	r4, [r0, #4]
  406524:	6086      	str	r6, [r0, #8]
  406526:	e7e4      	b.n	4064f2 <_Balloc+0x16>

00406528 <_Bfree>:
  406528:	b131      	cbz	r1, 406538 <_Bfree+0x10>
  40652a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40652c:	684a      	ldr	r2, [r1, #4]
  40652e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406532:	6008      	str	r0, [r1, #0]
  406534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406538:	4770      	bx	lr
  40653a:	bf00      	nop

0040653c <__multadd>:
  40653c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406540:	690f      	ldr	r7, [r1, #16]
  406542:	b083      	sub	sp, #12
  406544:	4688      	mov	r8, r1
  406546:	4681      	mov	r9, r0
  406548:	f101 0514 	add.w	r5, r1, #20
  40654c:	2400      	movs	r4, #0
  40654e:	682e      	ldr	r6, [r5, #0]
  406550:	3401      	adds	r4, #1
  406552:	b2b1      	uxth	r1, r6
  406554:	0c36      	lsrs	r6, r6, #16
  406556:	fb02 3301 	mla	r3, r2, r1, r3
  40655a:	fb02 f606 	mul.w	r6, r2, r6
  40655e:	b299      	uxth	r1, r3
  406560:	eb06 4313 	add.w	r3, r6, r3, lsr #16
  406564:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  406568:	42a7      	cmp	r7, r4
  40656a:	f845 1b04 	str.w	r1, [r5], #4
  40656e:	ea4f 4313 	mov.w	r3, r3, lsr #16
  406572:	dcec      	bgt.n	40654e <__multadd+0x12>
  406574:	b14b      	cbz	r3, 40658a <__multadd+0x4e>
  406576:	f8d8 2008 	ldr.w	r2, [r8, #8]
  40657a:	4297      	cmp	r7, r2
  40657c:	da09      	bge.n	406592 <__multadd+0x56>
  40657e:	eb08 0287 	add.w	r2, r8, r7, lsl #2
  406582:	3701      	adds	r7, #1
  406584:	6153      	str	r3, [r2, #20]
  406586:	f8c8 7010 	str.w	r7, [r8, #16]
  40658a:	4640      	mov	r0, r8
  40658c:	b003      	add	sp, #12
  40658e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406592:	f8d8 1004 	ldr.w	r1, [r8, #4]
  406596:	4648      	mov	r0, r9
  406598:	3101      	adds	r1, #1
  40659a:	9301      	str	r3, [sp, #4]
  40659c:	f7ff ff9e 	bl	4064dc <_Balloc>
  4065a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
  4065a4:	f108 010c 	add.w	r1, r8, #12
  4065a8:	3202      	adds	r2, #2
  4065aa:	4604      	mov	r4, r0
  4065ac:	0092      	lsls	r2, r2, #2
  4065ae:	300c      	adds	r0, #12
  4065b0:	f7fc ff04 	bl	4033bc <memcpy>
  4065b4:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
  4065b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
  4065bc:	9b01      	ldr	r3, [sp, #4]
  4065be:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4065c2:	f8c8 0000 	str.w	r0, [r8]
  4065c6:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
  4065ca:	46a0      	mov	r8, r4
  4065cc:	e7d7      	b.n	40657e <__multadd+0x42>
  4065ce:	bf00      	nop

004065d0 <__hi0bits>:
  4065d0:	0c03      	lsrs	r3, r0, #16
  4065d2:	041b      	lsls	r3, r3, #16
  4065d4:	b9b3      	cbnz	r3, 406604 <__hi0bits+0x34>
  4065d6:	0400      	lsls	r0, r0, #16
  4065d8:	2310      	movs	r3, #16
  4065da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  4065de:	bf04      	itt	eq
  4065e0:	0200      	lsleq	r0, r0, #8
  4065e2:	3308      	addeq	r3, #8
  4065e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  4065e8:	bf04      	itt	eq
  4065ea:	0100      	lsleq	r0, r0, #4
  4065ec:	3304      	addeq	r3, #4
  4065ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4065f2:	bf04      	itt	eq
  4065f4:	0080      	lsleq	r0, r0, #2
  4065f6:	3302      	addeq	r3, #2
  4065f8:	2800      	cmp	r0, #0
  4065fa:	db07      	blt.n	40660c <__hi0bits+0x3c>
  4065fc:	0042      	lsls	r2, r0, #1
  4065fe:	d403      	bmi.n	406608 <__hi0bits+0x38>
  406600:	2020      	movs	r0, #32
  406602:	4770      	bx	lr
  406604:	2300      	movs	r3, #0
  406606:	e7e8      	b.n	4065da <__hi0bits+0xa>
  406608:	1c58      	adds	r0, r3, #1
  40660a:	4770      	bx	lr
  40660c:	4618      	mov	r0, r3
  40660e:	4770      	bx	lr

00406610 <__lo0bits>:
  406610:	6803      	ldr	r3, [r0, #0]
  406612:	f013 0207 	ands.w	r2, r3, #7
  406616:	d007      	beq.n	406628 <__lo0bits+0x18>
  406618:	07d9      	lsls	r1, r3, #31
  40661a:	d420      	bmi.n	40665e <__lo0bits+0x4e>
  40661c:	079a      	lsls	r2, r3, #30
  40661e:	d420      	bmi.n	406662 <__lo0bits+0x52>
  406620:	089b      	lsrs	r3, r3, #2
  406622:	6003      	str	r3, [r0, #0]
  406624:	2002      	movs	r0, #2
  406626:	4770      	bx	lr
  406628:	b299      	uxth	r1, r3
  40662a:	b909      	cbnz	r1, 406630 <__lo0bits+0x20>
  40662c:	0c1b      	lsrs	r3, r3, #16
  40662e:	2210      	movs	r2, #16
  406630:	f013 0fff 	tst.w	r3, #255	; 0xff
  406634:	bf04      	itt	eq
  406636:	0a1b      	lsreq	r3, r3, #8
  406638:	3208      	addeq	r2, #8
  40663a:	0719      	lsls	r1, r3, #28
  40663c:	bf04      	itt	eq
  40663e:	091b      	lsreq	r3, r3, #4
  406640:	3204      	addeq	r2, #4
  406642:	0799      	lsls	r1, r3, #30
  406644:	bf04      	itt	eq
  406646:	089b      	lsreq	r3, r3, #2
  406648:	3202      	addeq	r2, #2
  40664a:	07d9      	lsls	r1, r3, #31
  40664c:	d404      	bmi.n	406658 <__lo0bits+0x48>
  40664e:	085b      	lsrs	r3, r3, #1
  406650:	d101      	bne.n	406656 <__lo0bits+0x46>
  406652:	2020      	movs	r0, #32
  406654:	4770      	bx	lr
  406656:	3201      	adds	r2, #1
  406658:	6003      	str	r3, [r0, #0]
  40665a:	4610      	mov	r0, r2
  40665c:	4770      	bx	lr
  40665e:	2000      	movs	r0, #0
  406660:	4770      	bx	lr
  406662:	085b      	lsrs	r3, r3, #1
  406664:	6003      	str	r3, [r0, #0]
  406666:	2001      	movs	r0, #1
  406668:	4770      	bx	lr
  40666a:	bf00      	nop

0040666c <__i2b>:
  40666c:	b510      	push	{r4, lr}
  40666e:	460c      	mov	r4, r1
  406670:	2101      	movs	r1, #1
  406672:	f7ff ff33 	bl	4064dc <_Balloc>
  406676:	2201      	movs	r2, #1
  406678:	6144      	str	r4, [r0, #20]
  40667a:	6102      	str	r2, [r0, #16]
  40667c:	bd10      	pop	{r4, pc}
  40667e:	bf00      	nop

00406680 <__multiply>:
  406680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406684:	690d      	ldr	r5, [r1, #16]
  406686:	f8d2 9010 	ldr.w	r9, [r2, #16]
  40668a:	b085      	sub	sp, #20
  40668c:	454d      	cmp	r5, r9
  40668e:	460c      	mov	r4, r1
  406690:	4692      	mov	sl, r2
  406692:	da04      	bge.n	40669e <__multiply+0x1e>
  406694:	462a      	mov	r2, r5
  406696:	4654      	mov	r4, sl
  406698:	464d      	mov	r5, r9
  40669a:	468a      	mov	sl, r1
  40669c:	4691      	mov	r9, r2
  40669e:	68a3      	ldr	r3, [r4, #8]
  4066a0:	eb05 0709 	add.w	r7, r5, r9
  4066a4:	6861      	ldr	r1, [r4, #4]
  4066a6:	429f      	cmp	r7, r3
  4066a8:	bfc8      	it	gt
  4066aa:	3101      	addgt	r1, #1
  4066ac:	f7ff ff16 	bl	4064dc <_Balloc>
  4066b0:	f100 0614 	add.w	r6, r0, #20
  4066b4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
  4066b8:	4546      	cmp	r6, r8
  4066ba:	9001      	str	r0, [sp, #4]
  4066bc:	d205      	bcs.n	4066ca <__multiply+0x4a>
  4066be:	4633      	mov	r3, r6
  4066c0:	2000      	movs	r0, #0
  4066c2:	f843 0b04 	str.w	r0, [r3], #4
  4066c6:	4598      	cmp	r8, r3
  4066c8:	d8fb      	bhi.n	4066c2 <__multiply+0x42>
  4066ca:	f10a 0c14 	add.w	ip, sl, #20
  4066ce:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
  4066d2:	3414      	adds	r4, #20
  4066d4:	45cc      	cmp	ip, r9
  4066d6:	9400      	str	r4, [sp, #0]
  4066d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
  4066dc:	d25b      	bcs.n	406796 <__multiply+0x116>
  4066de:	f8cd 8008 	str.w	r8, [sp, #8]
  4066e2:	9703      	str	r7, [sp, #12]
  4066e4:	46c8      	mov	r8, r9
  4066e6:	f85c 3b04 	ldr.w	r3, [ip], #4
  4066ea:	b29c      	uxth	r4, r3
  4066ec:	b324      	cbz	r4, 406738 <__multiply+0xb8>
  4066ee:	9a00      	ldr	r2, [sp, #0]
  4066f0:	4633      	mov	r3, r6
  4066f2:	f04f 0900 	mov.w	r9, #0
  4066f6:	e000      	b.n	4066fa <__multiply+0x7a>
  4066f8:	460b      	mov	r3, r1
  4066fa:	f852 7b04 	ldr.w	r7, [r2], #4
  4066fe:	6819      	ldr	r1, [r3, #0]
  406700:	fa1f fb87 	uxth.w	fp, r7
  406704:	fa1f fa81 	uxth.w	sl, r1
  406708:	0c38      	lsrs	r0, r7, #16
  40670a:	0c09      	lsrs	r1, r1, #16
  40670c:	fb04 aa0b 	mla	sl, r4, fp, sl
  406710:	fb04 1000 	mla	r0, r4, r0, r1
  406714:	44d1      	add	r9, sl
  406716:	eb00 4019 	add.w	r0, r0, r9, lsr #16
  40671a:	fa1f f989 	uxth.w	r9, r9
  40671e:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
  406722:	4619      	mov	r1, r3
  406724:	4295      	cmp	r5, r2
  406726:	ea4f 4910 	mov.w	r9, r0, lsr #16
  40672a:	f841 7b04 	str.w	r7, [r1], #4
  40672e:	d8e3      	bhi.n	4066f8 <__multiply+0x78>
  406730:	f8c3 9004 	str.w	r9, [r3, #4]
  406734:	f85c 3c04 	ldr.w	r3, [ip, #-4]
  406738:	ea5f 4913 	movs.w	r9, r3, lsr #16
  40673c:	d024      	beq.n	406788 <__multiply+0x108>
  40673e:	f8d6 a000 	ldr.w	sl, [r6]
  406742:	9b00      	ldr	r3, [sp, #0]
  406744:	4650      	mov	r0, sl
  406746:	4631      	mov	r1, r6
  406748:	f04f 0b00 	mov.w	fp, #0
  40674c:	e000      	b.n	406750 <__multiply+0xd0>
  40674e:	4611      	mov	r1, r2
  406750:	881a      	ldrh	r2, [r3, #0]
  406752:	0c00      	lsrs	r0, r0, #16
  406754:	fb09 0002 	mla	r0, r9, r2, r0
  406758:	fa1f fa8a 	uxth.w	sl, sl
  40675c:	4483      	add	fp, r0
  40675e:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
  406762:	460a      	mov	r2, r1
  406764:	f842 0b04 	str.w	r0, [r2], #4
  406768:	f853 7b04 	ldr.w	r7, [r3], #4
  40676c:	6848      	ldr	r0, [r1, #4]
  40676e:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406772:	b284      	uxth	r4, r0
  406774:	fb09 4a0a 	mla	sl, r9, sl, r4
  406778:	429d      	cmp	r5, r3
  40677a:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
  40677e:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
  406782:	d8e4      	bhi.n	40674e <__multiply+0xce>
  406784:	f8c1 a004 	str.w	sl, [r1, #4]
  406788:	45e0      	cmp	r8, ip
  40678a:	f106 0604 	add.w	r6, r6, #4
  40678e:	d8aa      	bhi.n	4066e6 <__multiply+0x66>
  406790:	f8dd 8008 	ldr.w	r8, [sp, #8]
  406794:	9f03      	ldr	r7, [sp, #12]
  406796:	2f00      	cmp	r7, #0
  406798:	dd0a      	ble.n	4067b0 <__multiply+0x130>
  40679a:	f858 3c04 	ldr.w	r3, [r8, #-4]
  40679e:	f1a8 0804 	sub.w	r8, r8, #4
  4067a2:	b11b      	cbz	r3, 4067ac <__multiply+0x12c>
  4067a4:	e004      	b.n	4067b0 <__multiply+0x130>
  4067a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
  4067aa:	b90b      	cbnz	r3, 4067b0 <__multiply+0x130>
  4067ac:	3f01      	subs	r7, #1
  4067ae:	d1fa      	bne.n	4067a6 <__multiply+0x126>
  4067b0:	9b01      	ldr	r3, [sp, #4]
  4067b2:	4618      	mov	r0, r3
  4067b4:	611f      	str	r7, [r3, #16]
  4067b6:	b005      	add	sp, #20
  4067b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004067bc <__pow5mult>:
  4067bc:	f012 0303 	ands.w	r3, r2, #3
  4067c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4067c4:	4614      	mov	r4, r2
  4067c6:	4607      	mov	r7, r0
  4067c8:	460e      	mov	r6, r1
  4067ca:	d12c      	bne.n	406826 <__pow5mult+0x6a>
  4067cc:	10a4      	asrs	r4, r4, #2
  4067ce:	d01c      	beq.n	40680a <__pow5mult+0x4e>
  4067d0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  4067d2:	2d00      	cmp	r5, #0
  4067d4:	d030      	beq.n	406838 <__pow5mult+0x7c>
  4067d6:	f04f 0800 	mov.w	r8, #0
  4067da:	e004      	b.n	4067e6 <__pow5mult+0x2a>
  4067dc:	1064      	asrs	r4, r4, #1
  4067de:	d014      	beq.n	40680a <__pow5mult+0x4e>
  4067e0:	6828      	ldr	r0, [r5, #0]
  4067e2:	b1a8      	cbz	r0, 406810 <__pow5mult+0x54>
  4067e4:	4605      	mov	r5, r0
  4067e6:	07e3      	lsls	r3, r4, #31
  4067e8:	d5f8      	bpl.n	4067dc <__pow5mult+0x20>
  4067ea:	4638      	mov	r0, r7
  4067ec:	4631      	mov	r1, r6
  4067ee:	462a      	mov	r2, r5
  4067f0:	f7ff ff46 	bl	406680 <__multiply>
  4067f4:	b1ae      	cbz	r6, 406822 <__pow5mult+0x66>
  4067f6:	6872      	ldr	r2, [r6, #4]
  4067f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4067fa:	1064      	asrs	r4, r4, #1
  4067fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  406800:	6031      	str	r1, [r6, #0]
  406802:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  406806:	4606      	mov	r6, r0
  406808:	d1ea      	bne.n	4067e0 <__pow5mult+0x24>
  40680a:	4630      	mov	r0, r6
  40680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406810:	4638      	mov	r0, r7
  406812:	4629      	mov	r1, r5
  406814:	462a      	mov	r2, r5
  406816:	f7ff ff33 	bl	406680 <__multiply>
  40681a:	6028      	str	r0, [r5, #0]
  40681c:	f8c0 8000 	str.w	r8, [r0]
  406820:	e7e0      	b.n	4067e4 <__pow5mult+0x28>
  406822:	4606      	mov	r6, r0
  406824:	e7da      	b.n	4067dc <__pow5mult+0x20>
  406826:	4a0b      	ldr	r2, [pc, #44]	; (406854 <__pow5mult+0x98>)
  406828:	3b01      	subs	r3, #1
  40682a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40682e:	2300      	movs	r3, #0
  406830:	f7ff fe84 	bl	40653c <__multadd>
  406834:	4606      	mov	r6, r0
  406836:	e7c9      	b.n	4067cc <__pow5mult+0x10>
  406838:	2101      	movs	r1, #1
  40683a:	4638      	mov	r0, r7
  40683c:	f7ff fe4e 	bl	4064dc <_Balloc>
  406840:	f240 2171 	movw	r1, #625	; 0x271
  406844:	2201      	movs	r2, #1
  406846:	2300      	movs	r3, #0
  406848:	6141      	str	r1, [r0, #20]
  40684a:	6102      	str	r2, [r0, #16]
  40684c:	4605      	mov	r5, r0
  40684e:	64b8      	str	r0, [r7, #72]	; 0x48
  406850:	6003      	str	r3, [r0, #0]
  406852:	e7c0      	b.n	4067d6 <__pow5mult+0x1a>
  406854:	00408380 	.word	0x00408380

00406858 <__lshift>:
  406858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40685c:	690b      	ldr	r3, [r1, #16]
  40685e:	ea4f 1a62 	mov.w	sl, r2, asr #5
  406862:	eb0a 0903 	add.w	r9, sl, r3
  406866:	688b      	ldr	r3, [r1, #8]
  406868:	f109 0601 	add.w	r6, r9, #1
  40686c:	429e      	cmp	r6, r3
  40686e:	460f      	mov	r7, r1
  406870:	4693      	mov	fp, r2
  406872:	4680      	mov	r8, r0
  406874:	6849      	ldr	r1, [r1, #4]
  406876:	dd04      	ble.n	406882 <__lshift+0x2a>
  406878:	005b      	lsls	r3, r3, #1
  40687a:	429e      	cmp	r6, r3
  40687c:	f101 0101 	add.w	r1, r1, #1
  406880:	dcfa      	bgt.n	406878 <__lshift+0x20>
  406882:	4640      	mov	r0, r8
  406884:	f7ff fe2a 	bl	4064dc <_Balloc>
  406888:	f1ba 0f00 	cmp.w	sl, #0
  40688c:	f100 0414 	add.w	r4, r0, #20
  406890:	dd09      	ble.n	4068a6 <__lshift+0x4e>
  406892:	2300      	movs	r3, #0
  406894:	461a      	mov	r2, r3
  406896:	4625      	mov	r5, r4
  406898:	3301      	adds	r3, #1
  40689a:	4553      	cmp	r3, sl
  40689c:	f845 2b04 	str.w	r2, [r5], #4
  4068a0:	d1fa      	bne.n	406898 <__lshift+0x40>
  4068a2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  4068a6:	693a      	ldr	r2, [r7, #16]
  4068a8:	f107 0314 	add.w	r3, r7, #20
  4068ac:	f01b 0b1f 	ands.w	fp, fp, #31
  4068b0:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
  4068b4:	d021      	beq.n	4068fa <__lshift+0xa2>
  4068b6:	f1cb 0a20 	rsb	sl, fp, #32
  4068ba:	2200      	movs	r2, #0
  4068bc:	e000      	b.n	4068c0 <__lshift+0x68>
  4068be:	462c      	mov	r4, r5
  4068c0:	6819      	ldr	r1, [r3, #0]
  4068c2:	4625      	mov	r5, r4
  4068c4:	fa01 f10b 	lsl.w	r1, r1, fp
  4068c8:	430a      	orrs	r2, r1
  4068ca:	f845 2b04 	str.w	r2, [r5], #4
  4068ce:	f853 2b04 	ldr.w	r2, [r3], #4
  4068d2:	4563      	cmp	r3, ip
  4068d4:	fa22 f20a 	lsr.w	r2, r2, sl
  4068d8:	d3f1      	bcc.n	4068be <__lshift+0x66>
  4068da:	6062      	str	r2, [r4, #4]
  4068dc:	b10a      	cbz	r2, 4068e2 <__lshift+0x8a>
  4068de:	f109 0602 	add.w	r6, r9, #2
  4068e2:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
  4068e6:	687a      	ldr	r2, [r7, #4]
  4068e8:	3e01      	subs	r6, #1
  4068ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4068ee:	6106      	str	r6, [r0, #16]
  4068f0:	6039      	str	r1, [r7, #0]
  4068f2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4068f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068fa:	f853 2b04 	ldr.w	r2, [r3], #4
  4068fe:	459c      	cmp	ip, r3
  406900:	f844 2b04 	str.w	r2, [r4], #4
  406904:	d9ed      	bls.n	4068e2 <__lshift+0x8a>
  406906:	f853 2b04 	ldr.w	r2, [r3], #4
  40690a:	459c      	cmp	ip, r3
  40690c:	f844 2b04 	str.w	r2, [r4], #4
  406910:	d8f3      	bhi.n	4068fa <__lshift+0xa2>
  406912:	e7e6      	b.n	4068e2 <__lshift+0x8a>

00406914 <__mcmp>:
  406914:	6902      	ldr	r2, [r0, #16]
  406916:	690b      	ldr	r3, [r1, #16]
  406918:	b410      	push	{r4}
  40691a:	1ad2      	subs	r2, r2, r3
  40691c:	d115      	bne.n	40694a <__mcmp+0x36>
  40691e:	009b      	lsls	r3, r3, #2
  406920:	3014      	adds	r0, #20
  406922:	3114      	adds	r1, #20
  406924:	4419      	add	r1, r3
  406926:	4403      	add	r3, r0
  406928:	e001      	b.n	40692e <__mcmp+0x1a>
  40692a:	4298      	cmp	r0, r3
  40692c:	d211      	bcs.n	406952 <__mcmp+0x3e>
  40692e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406932:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  406936:	42a2      	cmp	r2, r4
  406938:	d0f7      	beq.n	40692a <__mcmp+0x16>
  40693a:	4294      	cmp	r4, r2
  40693c:	bf94      	ite	ls
  40693e:	2001      	movls	r0, #1
  406940:	f04f 30ff 	movhi.w	r0, #4294967295
  406944:	f85d 4b04 	ldr.w	r4, [sp], #4
  406948:	4770      	bx	lr
  40694a:	4610      	mov	r0, r2
  40694c:	f85d 4b04 	ldr.w	r4, [sp], #4
  406950:	4770      	bx	lr
  406952:	2000      	movs	r0, #0
  406954:	f85d 4b04 	ldr.w	r4, [sp], #4
  406958:	4770      	bx	lr
  40695a:	bf00      	nop

0040695c <__mdiff>:
  40695c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406960:	460d      	mov	r5, r1
  406962:	4604      	mov	r4, r0
  406964:	4611      	mov	r1, r2
  406966:	4628      	mov	r0, r5
  406968:	4616      	mov	r6, r2
  40696a:	f7ff ffd3 	bl	406914 <__mcmp>
  40696e:	1e07      	subs	r7, r0, #0
  406970:	d056      	beq.n	406a20 <__mdiff+0xc4>
  406972:	db4f      	blt.n	406a14 <__mdiff+0xb8>
  406974:	f04f 0900 	mov.w	r9, #0
  406978:	6869      	ldr	r1, [r5, #4]
  40697a:	4620      	mov	r0, r4
  40697c:	f7ff fdae 	bl	4064dc <_Balloc>
  406980:	692f      	ldr	r7, [r5, #16]
  406982:	6932      	ldr	r2, [r6, #16]
  406984:	3514      	adds	r5, #20
  406986:	3614      	adds	r6, #20
  406988:	f8c0 900c 	str.w	r9, [r0, #12]
  40698c:	f100 0314 	add.w	r3, r0, #20
  406990:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
  406994:	eb06 0882 	add.w	r8, r6, r2, lsl #2
  406998:	2100      	movs	r1, #0
  40699a:	f855 4b04 	ldr.w	r4, [r5], #4
  40699e:	f856 2b04 	ldr.w	r2, [r6], #4
  4069a2:	fa1f fa84 	uxth.w	sl, r4
  4069a6:	448a      	add	sl, r1
  4069a8:	fa1f f982 	uxth.w	r9, r2
  4069ac:	0c11      	lsrs	r1, r2, #16
  4069ae:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
  4069b2:	ebc9 020a 	rsb	r2, r9, sl
  4069b6:	eb01 4122 	add.w	r1, r1, r2, asr #16
  4069ba:	b292      	uxth	r2, r2
  4069bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  4069c0:	45b0      	cmp	r8, r6
  4069c2:	f843 2b04 	str.w	r2, [r3], #4
  4069c6:	ea4f 4121 	mov.w	r1, r1, asr #16
  4069ca:	462c      	mov	r4, r5
  4069cc:	d8e5      	bhi.n	40699a <__mdiff+0x3e>
  4069ce:	45ac      	cmp	ip, r5
  4069d0:	4698      	mov	r8, r3
  4069d2:	d915      	bls.n	406a00 <__mdiff+0xa4>
  4069d4:	f854 6b04 	ldr.w	r6, [r4], #4
  4069d8:	b2b2      	uxth	r2, r6
  4069da:	4411      	add	r1, r2
  4069dc:	0c36      	lsrs	r6, r6, #16
  4069de:	eb06 4621 	add.w	r6, r6, r1, asr #16
  4069e2:	b289      	uxth	r1, r1
  4069e4:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
  4069e8:	45a4      	cmp	ip, r4
  4069ea:	f843 2b04 	str.w	r2, [r3], #4
  4069ee:	ea4f 4126 	mov.w	r1, r6, asr #16
  4069f2:	d8ef      	bhi.n	4069d4 <__mdiff+0x78>
  4069f4:	43eb      	mvns	r3, r5
  4069f6:	4463      	add	r3, ip
  4069f8:	f023 0303 	bic.w	r3, r3, #3
  4069fc:	3304      	adds	r3, #4
  4069fe:	4443      	add	r3, r8
  406a00:	3b04      	subs	r3, #4
  406a02:	b922      	cbnz	r2, 406a0e <__mdiff+0xb2>
  406a04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  406a08:	3f01      	subs	r7, #1
  406a0a:	2a00      	cmp	r2, #0
  406a0c:	d0fa      	beq.n	406a04 <__mdiff+0xa8>
  406a0e:	6107      	str	r7, [r0, #16]
  406a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a14:	462b      	mov	r3, r5
  406a16:	f04f 0901 	mov.w	r9, #1
  406a1a:	4635      	mov	r5, r6
  406a1c:	461e      	mov	r6, r3
  406a1e:	e7ab      	b.n	406978 <__mdiff+0x1c>
  406a20:	4620      	mov	r0, r4
  406a22:	4639      	mov	r1, r7
  406a24:	f7ff fd5a 	bl	4064dc <_Balloc>
  406a28:	2301      	movs	r3, #1
  406a2a:	6147      	str	r7, [r0, #20]
  406a2c:	6103      	str	r3, [r0, #16]
  406a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406a32:	bf00      	nop

00406a34 <__d2b>:
  406a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406a38:	2101      	movs	r1, #1
  406a3a:	b083      	sub	sp, #12
  406a3c:	461d      	mov	r5, r3
  406a3e:	f3c3 560a 	ubfx	r6, r3, #20, #11
  406a42:	4614      	mov	r4, r2
  406a44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406a46:	f7ff fd49 	bl	4064dc <_Balloc>
  406a4a:	f3c5 0313 	ubfx	r3, r5, #0, #20
  406a4e:	4680      	mov	r8, r0
  406a50:	b10e      	cbz	r6, 406a56 <__d2b+0x22>
  406a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406a56:	9301      	str	r3, [sp, #4]
  406a58:	b324      	cbz	r4, 406aa4 <__d2b+0x70>
  406a5a:	a802      	add	r0, sp, #8
  406a5c:	f840 4d08 	str.w	r4, [r0, #-8]!
  406a60:	4668      	mov	r0, sp
  406a62:	f7ff fdd5 	bl	406610 <__lo0bits>
  406a66:	2800      	cmp	r0, #0
  406a68:	d135      	bne.n	406ad6 <__d2b+0xa2>
  406a6a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406a6e:	f8c8 2014 	str.w	r2, [r8, #20]
  406a72:	2b00      	cmp	r3, #0
  406a74:	bf0c      	ite	eq
  406a76:	2401      	moveq	r4, #1
  406a78:	2402      	movne	r4, #2
  406a7a:	f8c8 3018 	str.w	r3, [r8, #24]
  406a7e:	f8c8 4010 	str.w	r4, [r8, #16]
  406a82:	b9de      	cbnz	r6, 406abc <__d2b+0x88>
  406a84:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  406a88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  406a8c:	6038      	str	r0, [r7, #0]
  406a8e:	6918      	ldr	r0, [r3, #16]
  406a90:	f7ff fd9e 	bl	4065d0 <__hi0bits>
  406a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406a96:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  406a9a:	6018      	str	r0, [r3, #0]
  406a9c:	4640      	mov	r0, r8
  406a9e:	b003      	add	sp, #12
  406aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406aa4:	a801      	add	r0, sp, #4
  406aa6:	f7ff fdb3 	bl	406610 <__lo0bits>
  406aaa:	9b01      	ldr	r3, [sp, #4]
  406aac:	2401      	movs	r4, #1
  406aae:	3020      	adds	r0, #32
  406ab0:	f8c8 3014 	str.w	r3, [r8, #20]
  406ab4:	f8c8 4010 	str.w	r4, [r8, #16]
  406ab8:	2e00      	cmp	r6, #0
  406aba:	d0e3      	beq.n	406a84 <__d2b+0x50>
  406abc:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
  406ac0:	eb09 0300 	add.w	r3, r9, r0
  406ac4:	603b      	str	r3, [r7, #0]
  406ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406ac8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  406acc:	6018      	str	r0, [r3, #0]
  406ace:	4640      	mov	r0, r8
  406ad0:	b003      	add	sp, #12
  406ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406ad6:	9b01      	ldr	r3, [sp, #4]
  406ad8:	f1c0 0120 	rsb	r1, r0, #32
  406adc:	fa03 f101 	lsl.w	r1, r3, r1
  406ae0:	40c3      	lsrs	r3, r0
  406ae2:	9a00      	ldr	r2, [sp, #0]
  406ae4:	9301      	str	r3, [sp, #4]
  406ae6:	430a      	orrs	r2, r1
  406ae8:	f8c8 2014 	str.w	r2, [r8, #20]
  406aec:	e7c1      	b.n	406a72 <__d2b+0x3e>
  406aee:	bf00      	nop

00406af0 <_realloc_r>:
  406af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406af4:	460c      	mov	r4, r1
  406af6:	b083      	sub	sp, #12
  406af8:	4690      	mov	r8, r2
  406afa:	4681      	mov	r9, r0
  406afc:	2900      	cmp	r1, #0
  406afe:	f000 80ba 	beq.w	406c76 <_realloc_r+0x186>
  406b02:	f7ff fce7 	bl	4064d4 <__malloc_lock>
  406b06:	f108 060b 	add.w	r6, r8, #11
  406b0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406b0e:	2e16      	cmp	r6, #22
  406b10:	f023 0503 	bic.w	r5, r3, #3
  406b14:	f1a4 0708 	sub.w	r7, r4, #8
  406b18:	d84b      	bhi.n	406bb2 <_realloc_r+0xc2>
  406b1a:	2110      	movs	r1, #16
  406b1c:	460e      	mov	r6, r1
  406b1e:	45b0      	cmp	r8, r6
  406b20:	d84c      	bhi.n	406bbc <_realloc_r+0xcc>
  406b22:	428d      	cmp	r5, r1
  406b24:	da51      	bge.n	406bca <_realloc_r+0xda>
  406b26:	f8df b384 	ldr.w	fp, [pc, #900]	; 406eac <_realloc_r+0x3bc>
  406b2a:	1978      	adds	r0, r7, r5
  406b2c:	f8db e008 	ldr.w	lr, [fp, #8]
  406b30:	4586      	cmp	lr, r0
  406b32:	f000 80a6 	beq.w	406c82 <_realloc_r+0x192>
  406b36:	6842      	ldr	r2, [r0, #4]
  406b38:	f022 0c01 	bic.w	ip, r2, #1
  406b3c:	4484      	add	ip, r0
  406b3e:	f8dc c004 	ldr.w	ip, [ip, #4]
  406b42:	f01c 0f01 	tst.w	ip, #1
  406b46:	d054      	beq.n	406bf2 <_realloc_r+0x102>
  406b48:	2200      	movs	r2, #0
  406b4a:	4610      	mov	r0, r2
  406b4c:	07db      	lsls	r3, r3, #31
  406b4e:	d46f      	bmi.n	406c30 <_realloc_r+0x140>
  406b50:	f854 3c08 	ldr.w	r3, [r4, #-8]
  406b54:	ebc3 0a07 	rsb	sl, r3, r7
  406b58:	f8da 3004 	ldr.w	r3, [sl, #4]
  406b5c:	f023 0303 	bic.w	r3, r3, #3
  406b60:	442b      	add	r3, r5
  406b62:	2800      	cmp	r0, #0
  406b64:	d062      	beq.n	406c2c <_realloc_r+0x13c>
  406b66:	4570      	cmp	r0, lr
  406b68:	f000 80e9 	beq.w	406d3e <_realloc_r+0x24e>
  406b6c:	eb02 0e03 	add.w	lr, r2, r3
  406b70:	458e      	cmp	lr, r1
  406b72:	db5b      	blt.n	406c2c <_realloc_r+0x13c>
  406b74:	68c3      	ldr	r3, [r0, #12]
  406b76:	6882      	ldr	r2, [r0, #8]
  406b78:	46d0      	mov	r8, sl
  406b7a:	60d3      	str	r3, [r2, #12]
  406b7c:	609a      	str	r2, [r3, #8]
  406b7e:	f858 1f08 	ldr.w	r1, [r8, #8]!
  406b82:	f8da 300c 	ldr.w	r3, [sl, #12]
  406b86:	1f2a      	subs	r2, r5, #4
  406b88:	2a24      	cmp	r2, #36	; 0x24
  406b8a:	60cb      	str	r3, [r1, #12]
  406b8c:	6099      	str	r1, [r3, #8]
  406b8e:	f200 8123 	bhi.w	406dd8 <_realloc_r+0x2e8>
  406b92:	2a13      	cmp	r2, #19
  406b94:	f240 80b0 	bls.w	406cf8 <_realloc_r+0x208>
  406b98:	6823      	ldr	r3, [r4, #0]
  406b9a:	2a1b      	cmp	r2, #27
  406b9c:	f8ca 3008 	str.w	r3, [sl, #8]
  406ba0:	6863      	ldr	r3, [r4, #4]
  406ba2:	f8ca 300c 	str.w	r3, [sl, #12]
  406ba6:	f200 812b 	bhi.w	406e00 <_realloc_r+0x310>
  406baa:	3408      	adds	r4, #8
  406bac:	f10a 0310 	add.w	r3, sl, #16
  406bb0:	e0a3      	b.n	406cfa <_realloc_r+0x20a>
  406bb2:	f026 0607 	bic.w	r6, r6, #7
  406bb6:	2e00      	cmp	r6, #0
  406bb8:	4631      	mov	r1, r6
  406bba:	dab0      	bge.n	406b1e <_realloc_r+0x2e>
  406bbc:	230c      	movs	r3, #12
  406bbe:	2000      	movs	r0, #0
  406bc0:	f8c9 3000 	str.w	r3, [r9]
  406bc4:	b003      	add	sp, #12
  406bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bca:	46a0      	mov	r8, r4
  406bcc:	1baa      	subs	r2, r5, r6
  406bce:	2a0f      	cmp	r2, #15
  406bd0:	f003 0301 	and.w	r3, r3, #1
  406bd4:	d81a      	bhi.n	406c0c <_realloc_r+0x11c>
  406bd6:	432b      	orrs	r3, r5
  406bd8:	607b      	str	r3, [r7, #4]
  406bda:	443d      	add	r5, r7
  406bdc:	686b      	ldr	r3, [r5, #4]
  406bde:	f043 0301 	orr.w	r3, r3, #1
  406be2:	606b      	str	r3, [r5, #4]
  406be4:	4648      	mov	r0, r9
  406be6:	f7ff fc77 	bl	4064d8 <__malloc_unlock>
  406bea:	4640      	mov	r0, r8
  406bec:	b003      	add	sp, #12
  406bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bf2:	f022 0203 	bic.w	r2, r2, #3
  406bf6:	eb02 0c05 	add.w	ip, r2, r5
  406bfa:	458c      	cmp	ip, r1
  406bfc:	dba6      	blt.n	406b4c <_realloc_r+0x5c>
  406bfe:	68c2      	ldr	r2, [r0, #12]
  406c00:	6881      	ldr	r1, [r0, #8]
  406c02:	46a0      	mov	r8, r4
  406c04:	60ca      	str	r2, [r1, #12]
  406c06:	4665      	mov	r5, ip
  406c08:	6091      	str	r1, [r2, #8]
  406c0a:	e7df      	b.n	406bcc <_realloc_r+0xdc>
  406c0c:	19b9      	adds	r1, r7, r6
  406c0e:	4333      	orrs	r3, r6
  406c10:	f042 0001 	orr.w	r0, r2, #1
  406c14:	607b      	str	r3, [r7, #4]
  406c16:	440a      	add	r2, r1
  406c18:	6048      	str	r0, [r1, #4]
  406c1a:	6853      	ldr	r3, [r2, #4]
  406c1c:	3108      	adds	r1, #8
  406c1e:	f043 0301 	orr.w	r3, r3, #1
  406c22:	6053      	str	r3, [r2, #4]
  406c24:	4648      	mov	r0, r9
  406c26:	f7ff f839 	bl	405c9c <_free_r>
  406c2a:	e7db      	b.n	406be4 <_realloc_r+0xf4>
  406c2c:	428b      	cmp	r3, r1
  406c2e:	da33      	bge.n	406c98 <_realloc_r+0x1a8>
  406c30:	4641      	mov	r1, r8
  406c32:	4648      	mov	r0, r9
  406c34:	f7ff f902 	bl	405e3c <_malloc_r>
  406c38:	4680      	mov	r8, r0
  406c3a:	2800      	cmp	r0, #0
  406c3c:	d0d2      	beq.n	406be4 <_realloc_r+0xf4>
  406c3e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406c42:	f1a0 0108 	sub.w	r1, r0, #8
  406c46:	f023 0201 	bic.w	r2, r3, #1
  406c4a:	443a      	add	r2, r7
  406c4c:	4291      	cmp	r1, r2
  406c4e:	f000 80bc 	beq.w	406dca <_realloc_r+0x2da>
  406c52:	1f2a      	subs	r2, r5, #4
  406c54:	2a24      	cmp	r2, #36	; 0x24
  406c56:	d86e      	bhi.n	406d36 <_realloc_r+0x246>
  406c58:	2a13      	cmp	r2, #19
  406c5a:	d842      	bhi.n	406ce2 <_realloc_r+0x1f2>
  406c5c:	4603      	mov	r3, r0
  406c5e:	4622      	mov	r2, r4
  406c60:	6811      	ldr	r1, [r2, #0]
  406c62:	6019      	str	r1, [r3, #0]
  406c64:	6851      	ldr	r1, [r2, #4]
  406c66:	6059      	str	r1, [r3, #4]
  406c68:	6892      	ldr	r2, [r2, #8]
  406c6a:	609a      	str	r2, [r3, #8]
  406c6c:	4621      	mov	r1, r4
  406c6e:	4648      	mov	r0, r9
  406c70:	f7ff f814 	bl	405c9c <_free_r>
  406c74:	e7b6      	b.n	406be4 <_realloc_r+0xf4>
  406c76:	4611      	mov	r1, r2
  406c78:	b003      	add	sp, #12
  406c7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406c7e:	f7ff b8dd 	b.w	405e3c <_malloc_r>
  406c82:	f8de 2004 	ldr.w	r2, [lr, #4]
  406c86:	f106 0c10 	add.w	ip, r6, #16
  406c8a:	f022 0203 	bic.w	r2, r2, #3
  406c8e:	1950      	adds	r0, r2, r5
  406c90:	4560      	cmp	r0, ip
  406c92:	da3d      	bge.n	406d10 <_realloc_r+0x220>
  406c94:	4670      	mov	r0, lr
  406c96:	e759      	b.n	406b4c <_realloc_r+0x5c>
  406c98:	46d0      	mov	r8, sl
  406c9a:	f858 0f08 	ldr.w	r0, [r8, #8]!
  406c9e:	f8da 100c 	ldr.w	r1, [sl, #12]
  406ca2:	1f2a      	subs	r2, r5, #4
  406ca4:	2a24      	cmp	r2, #36	; 0x24
  406ca6:	60c1      	str	r1, [r0, #12]
  406ca8:	6088      	str	r0, [r1, #8]
  406caa:	f200 80a0 	bhi.w	406dee <_realloc_r+0x2fe>
  406cae:	2a13      	cmp	r2, #19
  406cb0:	f240 809b 	bls.w	406dea <_realloc_r+0x2fa>
  406cb4:	6821      	ldr	r1, [r4, #0]
  406cb6:	2a1b      	cmp	r2, #27
  406cb8:	f8ca 1008 	str.w	r1, [sl, #8]
  406cbc:	6861      	ldr	r1, [r4, #4]
  406cbe:	f8ca 100c 	str.w	r1, [sl, #12]
  406cc2:	f200 80b2 	bhi.w	406e2a <_realloc_r+0x33a>
  406cc6:	3408      	adds	r4, #8
  406cc8:	f10a 0210 	add.w	r2, sl, #16
  406ccc:	6821      	ldr	r1, [r4, #0]
  406cce:	461d      	mov	r5, r3
  406cd0:	6011      	str	r1, [r2, #0]
  406cd2:	6861      	ldr	r1, [r4, #4]
  406cd4:	4657      	mov	r7, sl
  406cd6:	6051      	str	r1, [r2, #4]
  406cd8:	68a3      	ldr	r3, [r4, #8]
  406cda:	6093      	str	r3, [r2, #8]
  406cdc:	f8da 3004 	ldr.w	r3, [sl, #4]
  406ce0:	e774      	b.n	406bcc <_realloc_r+0xdc>
  406ce2:	6823      	ldr	r3, [r4, #0]
  406ce4:	2a1b      	cmp	r2, #27
  406ce6:	6003      	str	r3, [r0, #0]
  406ce8:	6863      	ldr	r3, [r4, #4]
  406cea:	6043      	str	r3, [r0, #4]
  406cec:	d862      	bhi.n	406db4 <_realloc_r+0x2c4>
  406cee:	f100 0308 	add.w	r3, r0, #8
  406cf2:	f104 0208 	add.w	r2, r4, #8
  406cf6:	e7b3      	b.n	406c60 <_realloc_r+0x170>
  406cf8:	4643      	mov	r3, r8
  406cfa:	6822      	ldr	r2, [r4, #0]
  406cfc:	4675      	mov	r5, lr
  406cfe:	601a      	str	r2, [r3, #0]
  406d00:	6862      	ldr	r2, [r4, #4]
  406d02:	4657      	mov	r7, sl
  406d04:	605a      	str	r2, [r3, #4]
  406d06:	68a2      	ldr	r2, [r4, #8]
  406d08:	609a      	str	r2, [r3, #8]
  406d0a:	f8da 3004 	ldr.w	r3, [sl, #4]
  406d0e:	e75d      	b.n	406bcc <_realloc_r+0xdc>
  406d10:	1b83      	subs	r3, r0, r6
  406d12:	4437      	add	r7, r6
  406d14:	f043 0301 	orr.w	r3, r3, #1
  406d18:	f8cb 7008 	str.w	r7, [fp, #8]
  406d1c:	607b      	str	r3, [r7, #4]
  406d1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406d22:	4648      	mov	r0, r9
  406d24:	f003 0301 	and.w	r3, r3, #1
  406d28:	431e      	orrs	r6, r3
  406d2a:	f844 6c04 	str.w	r6, [r4, #-4]
  406d2e:	f7ff fbd3 	bl	4064d8 <__malloc_unlock>
  406d32:	4620      	mov	r0, r4
  406d34:	e75a      	b.n	406bec <_realloc_r+0xfc>
  406d36:	4621      	mov	r1, r4
  406d38:	f7ff fb66 	bl	406408 <memmove>
  406d3c:	e796      	b.n	406c6c <_realloc_r+0x17c>
  406d3e:	eb02 0c03 	add.w	ip, r2, r3
  406d42:	f106 0210 	add.w	r2, r6, #16
  406d46:	4594      	cmp	ip, r2
  406d48:	f6ff af70 	blt.w	406c2c <_realloc_r+0x13c>
  406d4c:	4657      	mov	r7, sl
  406d4e:	f857 1f08 	ldr.w	r1, [r7, #8]!
  406d52:	f8da 300c 	ldr.w	r3, [sl, #12]
  406d56:	1f2a      	subs	r2, r5, #4
  406d58:	2a24      	cmp	r2, #36	; 0x24
  406d5a:	60cb      	str	r3, [r1, #12]
  406d5c:	6099      	str	r1, [r3, #8]
  406d5e:	f200 8086 	bhi.w	406e6e <_realloc_r+0x37e>
  406d62:	2a13      	cmp	r2, #19
  406d64:	d977      	bls.n	406e56 <_realloc_r+0x366>
  406d66:	6823      	ldr	r3, [r4, #0]
  406d68:	2a1b      	cmp	r2, #27
  406d6a:	f8ca 3008 	str.w	r3, [sl, #8]
  406d6e:	6863      	ldr	r3, [r4, #4]
  406d70:	f8ca 300c 	str.w	r3, [sl, #12]
  406d74:	f200 8084 	bhi.w	406e80 <_realloc_r+0x390>
  406d78:	3408      	adds	r4, #8
  406d7a:	f10a 0310 	add.w	r3, sl, #16
  406d7e:	6822      	ldr	r2, [r4, #0]
  406d80:	601a      	str	r2, [r3, #0]
  406d82:	6862      	ldr	r2, [r4, #4]
  406d84:	605a      	str	r2, [r3, #4]
  406d86:	68a2      	ldr	r2, [r4, #8]
  406d88:	609a      	str	r2, [r3, #8]
  406d8a:	ebc6 020c 	rsb	r2, r6, ip
  406d8e:	eb0a 0306 	add.w	r3, sl, r6
  406d92:	f042 0201 	orr.w	r2, r2, #1
  406d96:	f8cb 3008 	str.w	r3, [fp, #8]
  406d9a:	605a      	str	r2, [r3, #4]
  406d9c:	f8da 3004 	ldr.w	r3, [sl, #4]
  406da0:	4648      	mov	r0, r9
  406da2:	f003 0301 	and.w	r3, r3, #1
  406da6:	431e      	orrs	r6, r3
  406da8:	f8ca 6004 	str.w	r6, [sl, #4]
  406dac:	f7ff fb94 	bl	4064d8 <__malloc_unlock>
  406db0:	4638      	mov	r0, r7
  406db2:	e71b      	b.n	406bec <_realloc_r+0xfc>
  406db4:	68a3      	ldr	r3, [r4, #8]
  406db6:	2a24      	cmp	r2, #36	; 0x24
  406db8:	6083      	str	r3, [r0, #8]
  406dba:	68e3      	ldr	r3, [r4, #12]
  406dbc:	60c3      	str	r3, [r0, #12]
  406dbe:	d02b      	beq.n	406e18 <_realloc_r+0x328>
  406dc0:	f100 0310 	add.w	r3, r0, #16
  406dc4:	f104 0210 	add.w	r2, r4, #16
  406dc8:	e74a      	b.n	406c60 <_realloc_r+0x170>
  406dca:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406dce:	46a0      	mov	r8, r4
  406dd0:	f022 0203 	bic.w	r2, r2, #3
  406dd4:	4415      	add	r5, r2
  406dd6:	e6f9      	b.n	406bcc <_realloc_r+0xdc>
  406dd8:	4621      	mov	r1, r4
  406dda:	4640      	mov	r0, r8
  406ddc:	4675      	mov	r5, lr
  406dde:	4657      	mov	r7, sl
  406de0:	f7ff fb12 	bl	406408 <memmove>
  406de4:	f8da 3004 	ldr.w	r3, [sl, #4]
  406de8:	e6f0      	b.n	406bcc <_realloc_r+0xdc>
  406dea:	4642      	mov	r2, r8
  406dec:	e76e      	b.n	406ccc <_realloc_r+0x1dc>
  406dee:	4621      	mov	r1, r4
  406df0:	4640      	mov	r0, r8
  406df2:	461d      	mov	r5, r3
  406df4:	4657      	mov	r7, sl
  406df6:	f7ff fb07 	bl	406408 <memmove>
  406dfa:	f8da 3004 	ldr.w	r3, [sl, #4]
  406dfe:	e6e5      	b.n	406bcc <_realloc_r+0xdc>
  406e00:	68a3      	ldr	r3, [r4, #8]
  406e02:	2a24      	cmp	r2, #36	; 0x24
  406e04:	f8ca 3010 	str.w	r3, [sl, #16]
  406e08:	68e3      	ldr	r3, [r4, #12]
  406e0a:	f8ca 3014 	str.w	r3, [sl, #20]
  406e0e:	d018      	beq.n	406e42 <_realloc_r+0x352>
  406e10:	3410      	adds	r4, #16
  406e12:	f10a 0318 	add.w	r3, sl, #24
  406e16:	e770      	b.n	406cfa <_realloc_r+0x20a>
  406e18:	6922      	ldr	r2, [r4, #16]
  406e1a:	f100 0318 	add.w	r3, r0, #24
  406e1e:	6102      	str	r2, [r0, #16]
  406e20:	6961      	ldr	r1, [r4, #20]
  406e22:	f104 0218 	add.w	r2, r4, #24
  406e26:	6141      	str	r1, [r0, #20]
  406e28:	e71a      	b.n	406c60 <_realloc_r+0x170>
  406e2a:	68a1      	ldr	r1, [r4, #8]
  406e2c:	2a24      	cmp	r2, #36	; 0x24
  406e2e:	f8ca 1010 	str.w	r1, [sl, #16]
  406e32:	68e1      	ldr	r1, [r4, #12]
  406e34:	f8ca 1014 	str.w	r1, [sl, #20]
  406e38:	d00f      	beq.n	406e5a <_realloc_r+0x36a>
  406e3a:	3410      	adds	r4, #16
  406e3c:	f10a 0218 	add.w	r2, sl, #24
  406e40:	e744      	b.n	406ccc <_realloc_r+0x1dc>
  406e42:	6922      	ldr	r2, [r4, #16]
  406e44:	f10a 0320 	add.w	r3, sl, #32
  406e48:	f8ca 2018 	str.w	r2, [sl, #24]
  406e4c:	6962      	ldr	r2, [r4, #20]
  406e4e:	3418      	adds	r4, #24
  406e50:	f8ca 201c 	str.w	r2, [sl, #28]
  406e54:	e751      	b.n	406cfa <_realloc_r+0x20a>
  406e56:	463b      	mov	r3, r7
  406e58:	e791      	b.n	406d7e <_realloc_r+0x28e>
  406e5a:	6921      	ldr	r1, [r4, #16]
  406e5c:	f10a 0220 	add.w	r2, sl, #32
  406e60:	f8ca 1018 	str.w	r1, [sl, #24]
  406e64:	6961      	ldr	r1, [r4, #20]
  406e66:	3418      	adds	r4, #24
  406e68:	f8ca 101c 	str.w	r1, [sl, #28]
  406e6c:	e72e      	b.n	406ccc <_realloc_r+0x1dc>
  406e6e:	4621      	mov	r1, r4
  406e70:	4638      	mov	r0, r7
  406e72:	f8cd c004 	str.w	ip, [sp, #4]
  406e76:	f7ff fac7 	bl	406408 <memmove>
  406e7a:	f8dd c004 	ldr.w	ip, [sp, #4]
  406e7e:	e784      	b.n	406d8a <_realloc_r+0x29a>
  406e80:	68a3      	ldr	r3, [r4, #8]
  406e82:	2a24      	cmp	r2, #36	; 0x24
  406e84:	f8ca 3010 	str.w	r3, [sl, #16]
  406e88:	68e3      	ldr	r3, [r4, #12]
  406e8a:	f8ca 3014 	str.w	r3, [sl, #20]
  406e8e:	d003      	beq.n	406e98 <_realloc_r+0x3a8>
  406e90:	3410      	adds	r4, #16
  406e92:	f10a 0318 	add.w	r3, sl, #24
  406e96:	e772      	b.n	406d7e <_realloc_r+0x28e>
  406e98:	6922      	ldr	r2, [r4, #16]
  406e9a:	f10a 0320 	add.w	r3, sl, #32
  406e9e:	f8ca 2018 	str.w	r2, [sl, #24]
  406ea2:	6962      	ldr	r2, [r4, #20]
  406ea4:	3418      	adds	r4, #24
  406ea6:	f8ca 201c 	str.w	r2, [sl, #28]
  406eaa:	e768      	b.n	406d7e <_realloc_r+0x28e>
  406eac:	20000520 	.word	0x20000520

00406eb0 <__fpclassifyd>:
  406eb0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  406eb4:	b410      	push	{r4}
  406eb6:	d008      	beq.n	406eca <__fpclassifyd+0x1a>
  406eb8:	4a0f      	ldr	r2, [pc, #60]	; (406ef8 <__fpclassifyd+0x48>)
  406eba:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
  406ebe:	4294      	cmp	r4, r2
  406ec0:	d80a      	bhi.n	406ed8 <__fpclassifyd+0x28>
  406ec2:	2004      	movs	r0, #4
  406ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
  406ec8:	4770      	bx	lr
  406eca:	2800      	cmp	r0, #0
  406ecc:	bf0c      	ite	eq
  406ece:	2002      	moveq	r0, #2
  406ed0:	2003      	movne	r0, #3
  406ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
  406ed6:	4770      	bx	lr
  406ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  406edc:	d201      	bcs.n	406ee2 <__fpclassifyd+0x32>
  406ede:	2003      	movs	r0, #3
  406ee0:	e7f7      	b.n	406ed2 <__fpclassifyd+0x22>
  406ee2:	4a06      	ldr	r2, [pc, #24]	; (406efc <__fpclassifyd+0x4c>)
  406ee4:	4293      	cmp	r3, r2
  406ee6:	d001      	beq.n	406eec <__fpclassifyd+0x3c>
  406ee8:	2000      	movs	r0, #0
  406eea:	e7f2      	b.n	406ed2 <__fpclassifyd+0x22>
  406eec:	f1d0 0001 	rsbs	r0, r0, #1
  406ef0:	bf38      	it	cc
  406ef2:	2000      	movcc	r0, #0
  406ef4:	e7ed      	b.n	406ed2 <__fpclassifyd+0x22>
  406ef6:	bf00      	nop
  406ef8:	7fdfffff 	.word	0x7fdfffff
  406efc:	7ff00000 	.word	0x7ff00000

00406f00 <_sbrk_r>:
  406f00:	b538      	push	{r3, r4, r5, lr}
  406f02:	4c07      	ldr	r4, [pc, #28]	; (406f20 <_sbrk_r+0x20>)
  406f04:	2300      	movs	r3, #0
  406f06:	4605      	mov	r5, r0
  406f08:	4608      	mov	r0, r1
  406f0a:	6023      	str	r3, [r4, #0]
  406f0c:	f7fc f9f6 	bl	4032fc <_sbrk>
  406f10:	1c43      	adds	r3, r0, #1
  406f12:	d000      	beq.n	406f16 <_sbrk_r+0x16>
  406f14:	bd38      	pop	{r3, r4, r5, pc}
  406f16:	6823      	ldr	r3, [r4, #0]
  406f18:	2b00      	cmp	r3, #0
  406f1a:	d0fb      	beq.n	406f14 <_sbrk_r+0x14>
  406f1c:	602b      	str	r3, [r5, #0]
  406f1e:	bd38      	pop	{r3, r4, r5, pc}
  406f20:	20000c08 	.word	0x20000c08

00406f24 <__ssprint_r>:
  406f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406f28:	6894      	ldr	r4, [r2, #8]
  406f2a:	b083      	sub	sp, #12
  406f2c:	4692      	mov	sl, r2
  406f2e:	4680      	mov	r8, r0
  406f30:	460d      	mov	r5, r1
  406f32:	6816      	ldr	r6, [r2, #0]
  406f34:	2c00      	cmp	r4, #0
  406f36:	d06f      	beq.n	407018 <__ssprint_r+0xf4>
  406f38:	f04f 0b00 	mov.w	fp, #0
  406f3c:	6808      	ldr	r0, [r1, #0]
  406f3e:	688b      	ldr	r3, [r1, #8]
  406f40:	465c      	mov	r4, fp
  406f42:	2c00      	cmp	r4, #0
  406f44:	d043      	beq.n	406fce <__ssprint_r+0xaa>
  406f46:	429c      	cmp	r4, r3
  406f48:	461f      	mov	r7, r3
  406f4a:	d345      	bcc.n	406fd8 <__ssprint_r+0xb4>
  406f4c:	89ab      	ldrh	r3, [r5, #12]
  406f4e:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406f52:	d044      	beq.n	406fde <__ssprint_r+0xba>
  406f54:	696f      	ldr	r7, [r5, #20]
  406f56:	6929      	ldr	r1, [r5, #16]
  406f58:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  406f5c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  406f60:	ebc1 0900 	rsb	r9, r1, r0
  406f64:	1c62      	adds	r2, r4, #1
  406f66:	107f      	asrs	r7, r7, #1
  406f68:	444a      	add	r2, r9
  406f6a:	4297      	cmp	r7, r2
  406f6c:	bf34      	ite	cc
  406f6e:	4617      	movcc	r7, r2
  406f70:	463a      	movcs	r2, r7
  406f72:	055b      	lsls	r3, r3, #21
  406f74:	d535      	bpl.n	406fe2 <__ssprint_r+0xbe>
  406f76:	4611      	mov	r1, r2
  406f78:	4640      	mov	r0, r8
  406f7a:	f7fe ff5f 	bl	405e3c <_malloc_r>
  406f7e:	2800      	cmp	r0, #0
  406f80:	d039      	beq.n	406ff6 <__ssprint_r+0xd2>
  406f82:	6929      	ldr	r1, [r5, #16]
  406f84:	464a      	mov	r2, r9
  406f86:	9001      	str	r0, [sp, #4]
  406f88:	f7fc fa18 	bl	4033bc <memcpy>
  406f8c:	89aa      	ldrh	r2, [r5, #12]
  406f8e:	9b01      	ldr	r3, [sp, #4]
  406f90:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406f94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406f98:	81aa      	strh	r2, [r5, #12]
  406f9a:	ebc9 0207 	rsb	r2, r9, r7
  406f9e:	eb03 0009 	add.w	r0, r3, r9
  406fa2:	616f      	str	r7, [r5, #20]
  406fa4:	612b      	str	r3, [r5, #16]
  406fa6:	6028      	str	r0, [r5, #0]
  406fa8:	60aa      	str	r2, [r5, #8]
  406faa:	4627      	mov	r7, r4
  406fac:	46a1      	mov	r9, r4
  406fae:	464a      	mov	r2, r9
  406fb0:	4659      	mov	r1, fp
  406fb2:	f7ff fa29 	bl	406408 <memmove>
  406fb6:	f8da 2008 	ldr.w	r2, [sl, #8]
  406fba:	68ab      	ldr	r3, [r5, #8]
  406fbc:	6828      	ldr	r0, [r5, #0]
  406fbe:	1bdb      	subs	r3, r3, r7
  406fc0:	4448      	add	r0, r9
  406fc2:	1b14      	subs	r4, r2, r4
  406fc4:	60ab      	str	r3, [r5, #8]
  406fc6:	6028      	str	r0, [r5, #0]
  406fc8:	f8ca 4008 	str.w	r4, [sl, #8]
  406fcc:	b324      	cbz	r4, 407018 <__ssprint_r+0xf4>
  406fce:	f8d6 b000 	ldr.w	fp, [r6]
  406fd2:	6874      	ldr	r4, [r6, #4]
  406fd4:	3608      	adds	r6, #8
  406fd6:	e7b4      	b.n	406f42 <__ssprint_r+0x1e>
  406fd8:	4627      	mov	r7, r4
  406fda:	46a1      	mov	r9, r4
  406fdc:	e7e7      	b.n	406fae <__ssprint_r+0x8a>
  406fde:	46b9      	mov	r9, r7
  406fe0:	e7e5      	b.n	406fae <__ssprint_r+0x8a>
  406fe2:	4640      	mov	r0, r8
  406fe4:	f7ff fd84 	bl	406af0 <_realloc_r>
  406fe8:	4603      	mov	r3, r0
  406fea:	2800      	cmp	r0, #0
  406fec:	d1d5      	bne.n	406f9a <__ssprint_r+0x76>
  406fee:	4640      	mov	r0, r8
  406ff0:	6929      	ldr	r1, [r5, #16]
  406ff2:	f7fe fe53 	bl	405c9c <_free_r>
  406ff6:	89aa      	ldrh	r2, [r5, #12]
  406ff8:	230c      	movs	r3, #12
  406ffa:	f8c8 3000 	str.w	r3, [r8]
  406ffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  407002:	2300      	movs	r3, #0
  407004:	f04f 30ff 	mov.w	r0, #4294967295
  407008:	81aa      	strh	r2, [r5, #12]
  40700a:	f8ca 3008 	str.w	r3, [sl, #8]
  40700e:	f8ca 3004 	str.w	r3, [sl, #4]
  407012:	b003      	add	sp, #12
  407014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407018:	4620      	mov	r0, r4
  40701a:	f8ca 4004 	str.w	r4, [sl, #4]
  40701e:	b003      	add	sp, #12
  407020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407024 <__register_exitproc>:
  407024:	b5f0      	push	{r4, r5, r6, r7, lr}
  407026:	4c27      	ldr	r4, [pc, #156]	; (4070c4 <__register_exitproc+0xa0>)
  407028:	b085      	sub	sp, #20
  40702a:	6826      	ldr	r6, [r4, #0]
  40702c:	4607      	mov	r7, r0
  40702e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  407032:	2c00      	cmp	r4, #0
  407034:	d040      	beq.n	4070b8 <__register_exitproc+0x94>
  407036:	6865      	ldr	r5, [r4, #4]
  407038:	2d1f      	cmp	r5, #31
  40703a:	dd1e      	ble.n	40707a <__register_exitproc+0x56>
  40703c:	4822      	ldr	r0, [pc, #136]	; (4070c8 <__register_exitproc+0xa4>)
  40703e:	b918      	cbnz	r0, 407048 <__register_exitproc+0x24>
  407040:	f04f 30ff 	mov.w	r0, #4294967295
  407044:	b005      	add	sp, #20
  407046:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407048:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40704c:	9103      	str	r1, [sp, #12]
  40704e:	9202      	str	r2, [sp, #8]
  407050:	9301      	str	r3, [sp, #4]
  407052:	f3af 8000 	nop.w
  407056:	9903      	ldr	r1, [sp, #12]
  407058:	4604      	mov	r4, r0
  40705a:	9a02      	ldr	r2, [sp, #8]
  40705c:	9b01      	ldr	r3, [sp, #4]
  40705e:	2800      	cmp	r0, #0
  407060:	d0ee      	beq.n	407040 <__register_exitproc+0x1c>
  407062:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  407066:	2000      	movs	r0, #0
  407068:	6025      	str	r5, [r4, #0]
  40706a:	6060      	str	r0, [r4, #4]
  40706c:	4605      	mov	r5, r0
  40706e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  407072:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  407076:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  40707a:	b93f      	cbnz	r7, 40708c <__register_exitproc+0x68>
  40707c:	1c6b      	adds	r3, r5, #1
  40707e:	2000      	movs	r0, #0
  407080:	3502      	adds	r5, #2
  407082:	6063      	str	r3, [r4, #4]
  407084:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
  407088:	b005      	add	sp, #20
  40708a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40708c:	2601      	movs	r6, #1
  40708e:	40ae      	lsls	r6, r5
  407090:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  407094:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  407098:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
  40709c:	2f02      	cmp	r7, #2
  40709e:	ea42 0206 	orr.w	r2, r2, r6
  4070a2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
  4070a6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  4070aa:	d1e7      	bne.n	40707c <__register_exitproc+0x58>
  4070ac:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4070b0:	431e      	orrs	r6, r3
  4070b2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
  4070b6:	e7e1      	b.n	40707c <__register_exitproc+0x58>
  4070b8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  4070bc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4070c0:	e7b9      	b.n	407036 <__register_exitproc+0x12>
  4070c2:	bf00      	nop
  4070c4:	00408104 	.word	0x00408104
  4070c8:	00000000 	.word	0x00000000

004070cc <_calloc_r>:
  4070cc:	b510      	push	{r4, lr}
  4070ce:	fb02 f101 	mul.w	r1, r2, r1
  4070d2:	f7fe feb3 	bl	405e3c <_malloc_r>
  4070d6:	4604      	mov	r4, r0
  4070d8:	b168      	cbz	r0, 4070f6 <_calloc_r+0x2a>
  4070da:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4070de:	f022 0203 	bic.w	r2, r2, #3
  4070e2:	3a04      	subs	r2, #4
  4070e4:	2a24      	cmp	r2, #36	; 0x24
  4070e6:	d818      	bhi.n	40711a <_calloc_r+0x4e>
  4070e8:	2a13      	cmp	r2, #19
  4070ea:	d806      	bhi.n	4070fa <_calloc_r+0x2e>
  4070ec:	4603      	mov	r3, r0
  4070ee:	2200      	movs	r2, #0
  4070f0:	601a      	str	r2, [r3, #0]
  4070f2:	605a      	str	r2, [r3, #4]
  4070f4:	609a      	str	r2, [r3, #8]
  4070f6:	4620      	mov	r0, r4
  4070f8:	bd10      	pop	{r4, pc}
  4070fa:	2300      	movs	r3, #0
  4070fc:	2a1b      	cmp	r2, #27
  4070fe:	6003      	str	r3, [r0, #0]
  407100:	6043      	str	r3, [r0, #4]
  407102:	d90f      	bls.n	407124 <_calloc_r+0x58>
  407104:	2a24      	cmp	r2, #36	; 0x24
  407106:	6083      	str	r3, [r0, #8]
  407108:	60c3      	str	r3, [r0, #12]
  40710a:	bf05      	ittet	eq
  40710c:	6103      	streq	r3, [r0, #16]
  40710e:	6143      	streq	r3, [r0, #20]
  407110:	f100 0310 	addne.w	r3, r0, #16
  407114:	f100 0318 	addeq.w	r3, r0, #24
  407118:	e7e9      	b.n	4070ee <_calloc_r+0x22>
  40711a:	2100      	movs	r1, #0
  40711c:	f7fc f9c4 	bl	4034a8 <memset>
  407120:	4620      	mov	r0, r4
  407122:	bd10      	pop	{r4, pc}
  407124:	f100 0308 	add.w	r3, r0, #8
  407128:	e7e1      	b.n	4070ee <_calloc_r+0x22>
  40712a:	bf00      	nop

0040712c <__aeabi_drsub>:
  40712c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407130:	e002      	b.n	407138 <__adddf3>
  407132:	bf00      	nop

00407134 <__aeabi_dsub>:
  407134:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407138 <__adddf3>:
  407138:	b530      	push	{r4, r5, lr}
  40713a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40713e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  407142:	ea94 0f05 	teq	r4, r5
  407146:	bf08      	it	eq
  407148:	ea90 0f02 	teqeq	r0, r2
  40714c:	bf1f      	itttt	ne
  40714e:	ea54 0c00 	orrsne.w	ip, r4, r0
  407152:	ea55 0c02 	orrsne.w	ip, r5, r2
  407156:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40715a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40715e:	f000 80e2 	beq.w	407326 <__adddf3+0x1ee>
  407162:	ea4f 5454 	mov.w	r4, r4, lsr #21
  407166:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40716a:	bfb8      	it	lt
  40716c:	426d      	neglt	r5, r5
  40716e:	dd0c      	ble.n	40718a <__adddf3+0x52>
  407170:	442c      	add	r4, r5
  407172:	ea80 0202 	eor.w	r2, r0, r2
  407176:	ea81 0303 	eor.w	r3, r1, r3
  40717a:	ea82 0000 	eor.w	r0, r2, r0
  40717e:	ea83 0101 	eor.w	r1, r3, r1
  407182:	ea80 0202 	eor.w	r2, r0, r2
  407186:	ea81 0303 	eor.w	r3, r1, r3
  40718a:	2d36      	cmp	r5, #54	; 0x36
  40718c:	bf88      	it	hi
  40718e:	bd30      	pophi	{r4, r5, pc}
  407190:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407194:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407198:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40719c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4071a0:	d002      	beq.n	4071a8 <__adddf3+0x70>
  4071a2:	4240      	negs	r0, r0
  4071a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4071a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4071ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4071b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4071b4:	d002      	beq.n	4071bc <__adddf3+0x84>
  4071b6:	4252      	negs	r2, r2
  4071b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4071bc:	ea94 0f05 	teq	r4, r5
  4071c0:	f000 80a7 	beq.w	407312 <__adddf3+0x1da>
  4071c4:	f1a4 0401 	sub.w	r4, r4, #1
  4071c8:	f1d5 0e20 	rsbs	lr, r5, #32
  4071cc:	db0d      	blt.n	4071ea <__adddf3+0xb2>
  4071ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  4071d2:	fa22 f205 	lsr.w	r2, r2, r5
  4071d6:	1880      	adds	r0, r0, r2
  4071d8:	f141 0100 	adc.w	r1, r1, #0
  4071dc:	fa03 f20e 	lsl.w	r2, r3, lr
  4071e0:	1880      	adds	r0, r0, r2
  4071e2:	fa43 f305 	asr.w	r3, r3, r5
  4071e6:	4159      	adcs	r1, r3
  4071e8:	e00e      	b.n	407208 <__adddf3+0xd0>
  4071ea:	f1a5 0520 	sub.w	r5, r5, #32
  4071ee:	f10e 0e20 	add.w	lr, lr, #32
  4071f2:	2a01      	cmp	r2, #1
  4071f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4071f8:	bf28      	it	cs
  4071fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  4071fe:	fa43 f305 	asr.w	r3, r3, r5
  407202:	18c0      	adds	r0, r0, r3
  407204:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  407208:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40720c:	d507      	bpl.n	40721e <__adddf3+0xe6>
  40720e:	f04f 0e00 	mov.w	lr, #0
  407212:	f1dc 0c00 	rsbs	ip, ip, #0
  407216:	eb7e 0000 	sbcs.w	r0, lr, r0
  40721a:	eb6e 0101 	sbc.w	r1, lr, r1
  40721e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  407222:	d31b      	bcc.n	40725c <__adddf3+0x124>
  407224:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407228:	d30c      	bcc.n	407244 <__adddf3+0x10c>
  40722a:	0849      	lsrs	r1, r1, #1
  40722c:	ea5f 0030 	movs.w	r0, r0, rrx
  407230:	ea4f 0c3c 	mov.w	ip, ip, rrx
  407234:	f104 0401 	add.w	r4, r4, #1
  407238:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40723c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407240:	f080 809a 	bcs.w	407378 <__adddf3+0x240>
  407244:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407248:	bf08      	it	eq
  40724a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40724e:	f150 0000 	adcs.w	r0, r0, #0
  407252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407256:	ea41 0105 	orr.w	r1, r1, r5
  40725a:	bd30      	pop	{r4, r5, pc}
  40725c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407260:	4140      	adcs	r0, r0
  407262:	eb41 0101 	adc.w	r1, r1, r1
  407266:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40726a:	f1a4 0401 	sub.w	r4, r4, #1
  40726e:	d1e9      	bne.n	407244 <__adddf3+0x10c>
  407270:	f091 0f00 	teq	r1, #0
  407274:	bf04      	itt	eq
  407276:	4601      	moveq	r1, r0
  407278:	2000      	moveq	r0, #0
  40727a:	fab1 f381 	clz	r3, r1
  40727e:	bf08      	it	eq
  407280:	3320      	addeq	r3, #32
  407282:	f1a3 030b 	sub.w	r3, r3, #11
  407286:	f1b3 0220 	subs.w	r2, r3, #32
  40728a:	da0c      	bge.n	4072a6 <__adddf3+0x16e>
  40728c:	320c      	adds	r2, #12
  40728e:	dd08      	ble.n	4072a2 <__adddf3+0x16a>
  407290:	f102 0c14 	add.w	ip, r2, #20
  407294:	f1c2 020c 	rsb	r2, r2, #12
  407298:	fa01 f00c 	lsl.w	r0, r1, ip
  40729c:	fa21 f102 	lsr.w	r1, r1, r2
  4072a0:	e00c      	b.n	4072bc <__adddf3+0x184>
  4072a2:	f102 0214 	add.w	r2, r2, #20
  4072a6:	bfd8      	it	le
  4072a8:	f1c2 0c20 	rsble	ip, r2, #32
  4072ac:	fa01 f102 	lsl.w	r1, r1, r2
  4072b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4072b4:	bfdc      	itt	le
  4072b6:	ea41 010c 	orrle.w	r1, r1, ip
  4072ba:	4090      	lslle	r0, r2
  4072bc:	1ae4      	subs	r4, r4, r3
  4072be:	bfa2      	ittt	ge
  4072c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4072c4:	4329      	orrge	r1, r5
  4072c6:	bd30      	popge	{r4, r5, pc}
  4072c8:	ea6f 0404 	mvn.w	r4, r4
  4072cc:	3c1f      	subs	r4, #31
  4072ce:	da1c      	bge.n	40730a <__adddf3+0x1d2>
  4072d0:	340c      	adds	r4, #12
  4072d2:	dc0e      	bgt.n	4072f2 <__adddf3+0x1ba>
  4072d4:	f104 0414 	add.w	r4, r4, #20
  4072d8:	f1c4 0220 	rsb	r2, r4, #32
  4072dc:	fa20 f004 	lsr.w	r0, r0, r4
  4072e0:	fa01 f302 	lsl.w	r3, r1, r2
  4072e4:	ea40 0003 	orr.w	r0, r0, r3
  4072e8:	fa21 f304 	lsr.w	r3, r1, r4
  4072ec:	ea45 0103 	orr.w	r1, r5, r3
  4072f0:	bd30      	pop	{r4, r5, pc}
  4072f2:	f1c4 040c 	rsb	r4, r4, #12
  4072f6:	f1c4 0220 	rsb	r2, r4, #32
  4072fa:	fa20 f002 	lsr.w	r0, r0, r2
  4072fe:	fa01 f304 	lsl.w	r3, r1, r4
  407302:	ea40 0003 	orr.w	r0, r0, r3
  407306:	4629      	mov	r1, r5
  407308:	bd30      	pop	{r4, r5, pc}
  40730a:	fa21 f004 	lsr.w	r0, r1, r4
  40730e:	4629      	mov	r1, r5
  407310:	bd30      	pop	{r4, r5, pc}
  407312:	f094 0f00 	teq	r4, #0
  407316:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40731a:	bf06      	itte	eq
  40731c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  407320:	3401      	addeq	r4, #1
  407322:	3d01      	subne	r5, #1
  407324:	e74e      	b.n	4071c4 <__adddf3+0x8c>
  407326:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40732a:	bf18      	it	ne
  40732c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407330:	d029      	beq.n	407386 <__adddf3+0x24e>
  407332:	ea94 0f05 	teq	r4, r5
  407336:	bf08      	it	eq
  407338:	ea90 0f02 	teqeq	r0, r2
  40733c:	d005      	beq.n	40734a <__adddf3+0x212>
  40733e:	ea54 0c00 	orrs.w	ip, r4, r0
  407342:	bf04      	itt	eq
  407344:	4619      	moveq	r1, r3
  407346:	4610      	moveq	r0, r2
  407348:	bd30      	pop	{r4, r5, pc}
  40734a:	ea91 0f03 	teq	r1, r3
  40734e:	bf1e      	ittt	ne
  407350:	2100      	movne	r1, #0
  407352:	2000      	movne	r0, #0
  407354:	bd30      	popne	{r4, r5, pc}
  407356:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40735a:	d105      	bne.n	407368 <__adddf3+0x230>
  40735c:	0040      	lsls	r0, r0, #1
  40735e:	4149      	adcs	r1, r1
  407360:	bf28      	it	cs
  407362:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  407366:	bd30      	pop	{r4, r5, pc}
  407368:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40736c:	bf3c      	itt	cc
  40736e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  407372:	bd30      	popcc	{r4, r5, pc}
  407374:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407378:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40737c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407380:	f04f 0000 	mov.w	r0, #0
  407384:	bd30      	pop	{r4, r5, pc}
  407386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40738a:	bf1a      	itte	ne
  40738c:	4619      	movne	r1, r3
  40738e:	4610      	movne	r0, r2
  407390:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  407394:	bf1c      	itt	ne
  407396:	460b      	movne	r3, r1
  407398:	4602      	movne	r2, r0
  40739a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40739e:	bf06      	itte	eq
  4073a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4073a4:	ea91 0f03 	teqeq	r1, r3
  4073a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4073ac:	bd30      	pop	{r4, r5, pc}
  4073ae:	bf00      	nop

004073b0 <__aeabi_ui2d>:
  4073b0:	f090 0f00 	teq	r0, #0
  4073b4:	bf04      	itt	eq
  4073b6:	2100      	moveq	r1, #0
  4073b8:	4770      	bxeq	lr
  4073ba:	b530      	push	{r4, r5, lr}
  4073bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4073c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4073c4:	f04f 0500 	mov.w	r5, #0
  4073c8:	f04f 0100 	mov.w	r1, #0
  4073cc:	e750      	b.n	407270 <__adddf3+0x138>
  4073ce:	bf00      	nop

004073d0 <__aeabi_i2d>:
  4073d0:	f090 0f00 	teq	r0, #0
  4073d4:	bf04      	itt	eq
  4073d6:	2100      	moveq	r1, #0
  4073d8:	4770      	bxeq	lr
  4073da:	b530      	push	{r4, r5, lr}
  4073dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4073e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4073e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4073e8:	bf48      	it	mi
  4073ea:	4240      	negmi	r0, r0
  4073ec:	f04f 0100 	mov.w	r1, #0
  4073f0:	e73e      	b.n	407270 <__adddf3+0x138>
  4073f2:	bf00      	nop

004073f4 <__aeabi_f2d>:
  4073f4:	0042      	lsls	r2, r0, #1
  4073f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4073fa:	ea4f 0131 	mov.w	r1, r1, rrx
  4073fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  407402:	bf1f      	itttt	ne
  407404:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  407408:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40740c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  407410:	4770      	bxne	lr
  407412:	f092 0f00 	teq	r2, #0
  407416:	bf14      	ite	ne
  407418:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40741c:	4770      	bxeq	lr
  40741e:	b530      	push	{r4, r5, lr}
  407420:	f44f 7460 	mov.w	r4, #896	; 0x380
  407424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40742c:	e720      	b.n	407270 <__adddf3+0x138>
  40742e:	bf00      	nop

00407430 <__aeabi_ul2d>:
  407430:	ea50 0201 	orrs.w	r2, r0, r1
  407434:	bf08      	it	eq
  407436:	4770      	bxeq	lr
  407438:	b530      	push	{r4, r5, lr}
  40743a:	f04f 0500 	mov.w	r5, #0
  40743e:	e00a      	b.n	407456 <__aeabi_l2d+0x16>

00407440 <__aeabi_l2d>:
  407440:	ea50 0201 	orrs.w	r2, r0, r1
  407444:	bf08      	it	eq
  407446:	4770      	bxeq	lr
  407448:	b530      	push	{r4, r5, lr}
  40744a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40744e:	d502      	bpl.n	407456 <__aeabi_l2d+0x16>
  407450:	4240      	negs	r0, r0
  407452:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407456:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40745a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40745e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  407462:	f43f aedc 	beq.w	40721e <__adddf3+0xe6>
  407466:	f04f 0203 	mov.w	r2, #3
  40746a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40746e:	bf18      	it	ne
  407470:	3203      	addne	r2, #3
  407472:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407476:	bf18      	it	ne
  407478:	3203      	addne	r2, #3
  40747a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40747e:	f1c2 0320 	rsb	r3, r2, #32
  407482:	fa00 fc03 	lsl.w	ip, r0, r3
  407486:	fa20 f002 	lsr.w	r0, r0, r2
  40748a:	fa01 fe03 	lsl.w	lr, r1, r3
  40748e:	ea40 000e 	orr.w	r0, r0, lr
  407492:	fa21 f102 	lsr.w	r1, r1, r2
  407496:	4414      	add	r4, r2
  407498:	e6c1      	b.n	40721e <__adddf3+0xe6>
  40749a:	bf00      	nop

0040749c <__aeabi_dmul>:
  40749c:	b570      	push	{r4, r5, r6, lr}
  40749e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4074a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4074a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4074aa:	bf1d      	ittte	ne
  4074ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4074b0:	ea94 0f0c 	teqne	r4, ip
  4074b4:	ea95 0f0c 	teqne	r5, ip
  4074b8:	f000 f8de 	bleq	407678 <__aeabi_dmul+0x1dc>
  4074bc:	442c      	add	r4, r5
  4074be:	ea81 0603 	eor.w	r6, r1, r3
  4074c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4074c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4074ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4074ce:	bf18      	it	ne
  4074d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4074d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4074d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4074dc:	d038      	beq.n	407550 <__aeabi_dmul+0xb4>
  4074de:	fba0 ce02 	umull	ip, lr, r0, r2
  4074e2:	f04f 0500 	mov.w	r5, #0
  4074e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4074ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4074ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  4074f2:	f04f 0600 	mov.w	r6, #0
  4074f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4074fa:	f09c 0f00 	teq	ip, #0
  4074fe:	bf18      	it	ne
  407500:	f04e 0e01 	orrne.w	lr, lr, #1
  407504:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  407508:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40750c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  407510:	d204      	bcs.n	40751c <__aeabi_dmul+0x80>
  407512:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  407516:	416d      	adcs	r5, r5
  407518:	eb46 0606 	adc.w	r6, r6, r6
  40751c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  407520:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  407524:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407528:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40752c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407530:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407534:	bf88      	it	hi
  407536:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40753a:	d81e      	bhi.n	40757a <__aeabi_dmul+0xde>
  40753c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407540:	bf08      	it	eq
  407542:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  407546:	f150 0000 	adcs.w	r0, r0, #0
  40754a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40754e:	bd70      	pop	{r4, r5, r6, pc}
  407550:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  407554:	ea46 0101 	orr.w	r1, r6, r1
  407558:	ea40 0002 	orr.w	r0, r0, r2
  40755c:	ea81 0103 	eor.w	r1, r1, r3
  407560:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  407564:	bfc2      	ittt	gt
  407566:	ebd4 050c 	rsbsgt	r5, r4, ip
  40756a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40756e:	bd70      	popgt	{r4, r5, r6, pc}
  407570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407574:	f04f 0e00 	mov.w	lr, #0
  407578:	3c01      	subs	r4, #1
  40757a:	f300 80ab 	bgt.w	4076d4 <__aeabi_dmul+0x238>
  40757e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  407582:	bfde      	ittt	le
  407584:	2000      	movle	r0, #0
  407586:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40758a:	bd70      	pople	{r4, r5, r6, pc}
  40758c:	f1c4 0400 	rsb	r4, r4, #0
  407590:	3c20      	subs	r4, #32
  407592:	da35      	bge.n	407600 <__aeabi_dmul+0x164>
  407594:	340c      	adds	r4, #12
  407596:	dc1b      	bgt.n	4075d0 <__aeabi_dmul+0x134>
  407598:	f104 0414 	add.w	r4, r4, #20
  40759c:	f1c4 0520 	rsb	r5, r4, #32
  4075a0:	fa00 f305 	lsl.w	r3, r0, r5
  4075a4:	fa20 f004 	lsr.w	r0, r0, r4
  4075a8:	fa01 f205 	lsl.w	r2, r1, r5
  4075ac:	ea40 0002 	orr.w	r0, r0, r2
  4075b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4075b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4075b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4075bc:	fa21 f604 	lsr.w	r6, r1, r4
  4075c0:	eb42 0106 	adc.w	r1, r2, r6
  4075c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4075c8:	bf08      	it	eq
  4075ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4075ce:	bd70      	pop	{r4, r5, r6, pc}
  4075d0:	f1c4 040c 	rsb	r4, r4, #12
  4075d4:	f1c4 0520 	rsb	r5, r4, #32
  4075d8:	fa00 f304 	lsl.w	r3, r0, r4
  4075dc:	fa20 f005 	lsr.w	r0, r0, r5
  4075e0:	fa01 f204 	lsl.w	r2, r1, r4
  4075e4:	ea40 0002 	orr.w	r0, r0, r2
  4075e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4075ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4075f0:	f141 0100 	adc.w	r1, r1, #0
  4075f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4075f8:	bf08      	it	eq
  4075fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4075fe:	bd70      	pop	{r4, r5, r6, pc}
  407600:	f1c4 0520 	rsb	r5, r4, #32
  407604:	fa00 f205 	lsl.w	r2, r0, r5
  407608:	ea4e 0e02 	orr.w	lr, lr, r2
  40760c:	fa20 f304 	lsr.w	r3, r0, r4
  407610:	fa01 f205 	lsl.w	r2, r1, r5
  407614:	ea43 0302 	orr.w	r3, r3, r2
  407618:	fa21 f004 	lsr.w	r0, r1, r4
  40761c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407620:	fa21 f204 	lsr.w	r2, r1, r4
  407624:	ea20 0002 	bic.w	r0, r0, r2
  407628:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40762c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407630:	bf08      	it	eq
  407632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  407636:	bd70      	pop	{r4, r5, r6, pc}
  407638:	f094 0f00 	teq	r4, #0
  40763c:	d10f      	bne.n	40765e <__aeabi_dmul+0x1c2>
  40763e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  407642:	0040      	lsls	r0, r0, #1
  407644:	eb41 0101 	adc.w	r1, r1, r1
  407648:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40764c:	bf08      	it	eq
  40764e:	3c01      	subeq	r4, #1
  407650:	d0f7      	beq.n	407642 <__aeabi_dmul+0x1a6>
  407652:	ea41 0106 	orr.w	r1, r1, r6
  407656:	f095 0f00 	teq	r5, #0
  40765a:	bf18      	it	ne
  40765c:	4770      	bxne	lr
  40765e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  407662:	0052      	lsls	r2, r2, #1
  407664:	eb43 0303 	adc.w	r3, r3, r3
  407668:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40766c:	bf08      	it	eq
  40766e:	3d01      	subeq	r5, #1
  407670:	d0f7      	beq.n	407662 <__aeabi_dmul+0x1c6>
  407672:	ea43 0306 	orr.w	r3, r3, r6
  407676:	4770      	bx	lr
  407678:	ea94 0f0c 	teq	r4, ip
  40767c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407680:	bf18      	it	ne
  407682:	ea95 0f0c 	teqne	r5, ip
  407686:	d00c      	beq.n	4076a2 <__aeabi_dmul+0x206>
  407688:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40768c:	bf18      	it	ne
  40768e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407692:	d1d1      	bne.n	407638 <__aeabi_dmul+0x19c>
  407694:	ea81 0103 	eor.w	r1, r1, r3
  407698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40769c:	f04f 0000 	mov.w	r0, #0
  4076a0:	bd70      	pop	{r4, r5, r6, pc}
  4076a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4076a6:	bf06      	itte	eq
  4076a8:	4610      	moveq	r0, r2
  4076aa:	4619      	moveq	r1, r3
  4076ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4076b0:	d019      	beq.n	4076e6 <__aeabi_dmul+0x24a>
  4076b2:	ea94 0f0c 	teq	r4, ip
  4076b6:	d102      	bne.n	4076be <__aeabi_dmul+0x222>
  4076b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4076bc:	d113      	bne.n	4076e6 <__aeabi_dmul+0x24a>
  4076be:	ea95 0f0c 	teq	r5, ip
  4076c2:	d105      	bne.n	4076d0 <__aeabi_dmul+0x234>
  4076c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4076c8:	bf1c      	itt	ne
  4076ca:	4610      	movne	r0, r2
  4076cc:	4619      	movne	r1, r3
  4076ce:	d10a      	bne.n	4076e6 <__aeabi_dmul+0x24a>
  4076d0:	ea81 0103 	eor.w	r1, r1, r3
  4076d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4076dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4076e0:	f04f 0000 	mov.w	r0, #0
  4076e4:	bd70      	pop	{r4, r5, r6, pc}
  4076e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4076ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4076ee:	bd70      	pop	{r4, r5, r6, pc}

004076f0 <__aeabi_ddiv>:
  4076f0:	b570      	push	{r4, r5, r6, lr}
  4076f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4076f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4076fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4076fe:	bf1d      	ittte	ne
  407700:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407704:	ea94 0f0c 	teqne	r4, ip
  407708:	ea95 0f0c 	teqne	r5, ip
  40770c:	f000 f8a7 	bleq	40785e <__aeabi_ddiv+0x16e>
  407710:	eba4 0405 	sub.w	r4, r4, r5
  407714:	ea81 0e03 	eor.w	lr, r1, r3
  407718:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40771c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407720:	f000 8088 	beq.w	407834 <__aeabi_ddiv+0x144>
  407724:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407728:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40772c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407730:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  407734:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407738:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40773c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407740:	ea4f 2600 	mov.w	r6, r0, lsl #8
  407744:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407748:	429d      	cmp	r5, r3
  40774a:	bf08      	it	eq
  40774c:	4296      	cmpeq	r6, r2
  40774e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  407752:	f504 7440 	add.w	r4, r4, #768	; 0x300
  407756:	d202      	bcs.n	40775e <__aeabi_ddiv+0x6e>
  407758:	085b      	lsrs	r3, r3, #1
  40775a:	ea4f 0232 	mov.w	r2, r2, rrx
  40775e:	1ab6      	subs	r6, r6, r2
  407760:	eb65 0503 	sbc.w	r5, r5, r3
  407764:	085b      	lsrs	r3, r3, #1
  407766:	ea4f 0232 	mov.w	r2, r2, rrx
  40776a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40776e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  407772:	ebb6 0e02 	subs.w	lr, r6, r2
  407776:	eb75 0e03 	sbcs.w	lr, r5, r3
  40777a:	bf22      	ittt	cs
  40777c:	1ab6      	subcs	r6, r6, r2
  40777e:	4675      	movcs	r5, lr
  407780:	ea40 000c 	orrcs.w	r0, r0, ip
  407784:	085b      	lsrs	r3, r3, #1
  407786:	ea4f 0232 	mov.w	r2, r2, rrx
  40778a:	ebb6 0e02 	subs.w	lr, r6, r2
  40778e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407792:	bf22      	ittt	cs
  407794:	1ab6      	subcs	r6, r6, r2
  407796:	4675      	movcs	r5, lr
  407798:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40779c:	085b      	lsrs	r3, r3, #1
  40779e:	ea4f 0232 	mov.w	r2, r2, rrx
  4077a2:	ebb6 0e02 	subs.w	lr, r6, r2
  4077a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077aa:	bf22      	ittt	cs
  4077ac:	1ab6      	subcs	r6, r6, r2
  4077ae:	4675      	movcs	r5, lr
  4077b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4077b4:	085b      	lsrs	r3, r3, #1
  4077b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4077ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4077be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4077c2:	bf22      	ittt	cs
  4077c4:	1ab6      	subcs	r6, r6, r2
  4077c6:	4675      	movcs	r5, lr
  4077c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4077cc:	ea55 0e06 	orrs.w	lr, r5, r6
  4077d0:	d018      	beq.n	407804 <__aeabi_ddiv+0x114>
  4077d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4077d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4077da:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4077de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4077e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4077e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4077ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4077ee:	d1c0      	bne.n	407772 <__aeabi_ddiv+0x82>
  4077f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4077f4:	d10b      	bne.n	40780e <__aeabi_ddiv+0x11e>
  4077f6:	ea41 0100 	orr.w	r1, r1, r0
  4077fa:	f04f 0000 	mov.w	r0, #0
  4077fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  407802:	e7b6      	b.n	407772 <__aeabi_ddiv+0x82>
  407804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407808:	bf04      	itt	eq
  40780a:	4301      	orreq	r1, r0
  40780c:	2000      	moveq	r0, #0
  40780e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  407812:	bf88      	it	hi
  407814:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407818:	f63f aeaf 	bhi.w	40757a <__aeabi_dmul+0xde>
  40781c:	ebb5 0c03 	subs.w	ip, r5, r3
  407820:	bf04      	itt	eq
  407822:	ebb6 0c02 	subseq.w	ip, r6, r2
  407826:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40782a:	f150 0000 	adcs.w	r0, r0, #0
  40782e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407832:	bd70      	pop	{r4, r5, r6, pc}
  407834:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407838:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40783c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407840:	bfc2      	ittt	gt
  407842:	ebd4 050c 	rsbsgt	r5, r4, ip
  407846:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40784a:	bd70      	popgt	{r4, r5, r6, pc}
  40784c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407850:	f04f 0e00 	mov.w	lr, #0
  407854:	3c01      	subs	r4, #1
  407856:	e690      	b.n	40757a <__aeabi_dmul+0xde>
  407858:	ea45 0e06 	orr.w	lr, r5, r6
  40785c:	e68d      	b.n	40757a <__aeabi_dmul+0xde>
  40785e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407862:	ea94 0f0c 	teq	r4, ip
  407866:	bf08      	it	eq
  407868:	ea95 0f0c 	teqeq	r5, ip
  40786c:	f43f af3b 	beq.w	4076e6 <__aeabi_dmul+0x24a>
  407870:	ea94 0f0c 	teq	r4, ip
  407874:	d10a      	bne.n	40788c <__aeabi_ddiv+0x19c>
  407876:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40787a:	f47f af34 	bne.w	4076e6 <__aeabi_dmul+0x24a>
  40787e:	ea95 0f0c 	teq	r5, ip
  407882:	f47f af25 	bne.w	4076d0 <__aeabi_dmul+0x234>
  407886:	4610      	mov	r0, r2
  407888:	4619      	mov	r1, r3
  40788a:	e72c      	b.n	4076e6 <__aeabi_dmul+0x24a>
  40788c:	ea95 0f0c 	teq	r5, ip
  407890:	d106      	bne.n	4078a0 <__aeabi_ddiv+0x1b0>
  407892:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  407896:	f43f aefd 	beq.w	407694 <__aeabi_dmul+0x1f8>
  40789a:	4610      	mov	r0, r2
  40789c:	4619      	mov	r1, r3
  40789e:	e722      	b.n	4076e6 <__aeabi_dmul+0x24a>
  4078a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4078a4:	bf18      	it	ne
  4078a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4078aa:	f47f aec5 	bne.w	407638 <__aeabi_dmul+0x19c>
  4078ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4078b2:	f47f af0d 	bne.w	4076d0 <__aeabi_dmul+0x234>
  4078b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4078ba:	f47f aeeb 	bne.w	407694 <__aeabi_dmul+0x1f8>
  4078be:	e712      	b.n	4076e6 <__aeabi_dmul+0x24a>

004078c0 <__gedf2>:
  4078c0:	f04f 3cff 	mov.w	ip, #4294967295
  4078c4:	e006      	b.n	4078d4 <__cmpdf2+0x4>
  4078c6:	bf00      	nop

004078c8 <__ledf2>:
  4078c8:	f04f 0c01 	mov.w	ip, #1
  4078cc:	e002      	b.n	4078d4 <__cmpdf2+0x4>
  4078ce:	bf00      	nop

004078d0 <__cmpdf2>:
  4078d0:	f04f 0c01 	mov.w	ip, #1
  4078d4:	f84d cd04 	str.w	ip, [sp, #-4]!
  4078d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4078dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4078e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4078e4:	bf18      	it	ne
  4078e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4078ea:	d01b      	beq.n	407924 <__cmpdf2+0x54>
  4078ec:	b001      	add	sp, #4
  4078ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4078f2:	bf0c      	ite	eq
  4078f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4078f8:	ea91 0f03 	teqne	r1, r3
  4078fc:	bf02      	ittt	eq
  4078fe:	ea90 0f02 	teqeq	r0, r2
  407902:	2000      	moveq	r0, #0
  407904:	4770      	bxeq	lr
  407906:	f110 0f00 	cmn.w	r0, #0
  40790a:	ea91 0f03 	teq	r1, r3
  40790e:	bf58      	it	pl
  407910:	4299      	cmppl	r1, r3
  407912:	bf08      	it	eq
  407914:	4290      	cmpeq	r0, r2
  407916:	bf2c      	ite	cs
  407918:	17d8      	asrcs	r0, r3, #31
  40791a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40791e:	f040 0001 	orr.w	r0, r0, #1
  407922:	4770      	bx	lr
  407924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40792c:	d102      	bne.n	407934 <__cmpdf2+0x64>
  40792e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407932:	d107      	bne.n	407944 <__cmpdf2+0x74>
  407934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40793c:	d1d6      	bne.n	4078ec <__cmpdf2+0x1c>
  40793e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407942:	d0d3      	beq.n	4078ec <__cmpdf2+0x1c>
  407944:	f85d 0b04 	ldr.w	r0, [sp], #4
  407948:	4770      	bx	lr
  40794a:	bf00      	nop

0040794c <__aeabi_cdrcmple>:
  40794c:	4684      	mov	ip, r0
  40794e:	4610      	mov	r0, r2
  407950:	4662      	mov	r2, ip
  407952:	468c      	mov	ip, r1
  407954:	4619      	mov	r1, r3
  407956:	4663      	mov	r3, ip
  407958:	e000      	b.n	40795c <__aeabi_cdcmpeq>
  40795a:	bf00      	nop

0040795c <__aeabi_cdcmpeq>:
  40795c:	b501      	push	{r0, lr}
  40795e:	f7ff ffb7 	bl	4078d0 <__cmpdf2>
  407962:	2800      	cmp	r0, #0
  407964:	bf48      	it	mi
  407966:	f110 0f00 	cmnmi.w	r0, #0
  40796a:	bd01      	pop	{r0, pc}

0040796c <__aeabi_dcmpeq>:
  40796c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407970:	f7ff fff4 	bl	40795c <__aeabi_cdcmpeq>
  407974:	bf0c      	ite	eq
  407976:	2001      	moveq	r0, #1
  407978:	2000      	movne	r0, #0
  40797a:	f85d fb08 	ldr.w	pc, [sp], #8
  40797e:	bf00      	nop

00407980 <__aeabi_dcmplt>:
  407980:	f84d ed08 	str.w	lr, [sp, #-8]!
  407984:	f7ff ffea 	bl	40795c <__aeabi_cdcmpeq>
  407988:	bf34      	ite	cc
  40798a:	2001      	movcc	r0, #1
  40798c:	2000      	movcs	r0, #0
  40798e:	f85d fb08 	ldr.w	pc, [sp], #8
  407992:	bf00      	nop

00407994 <__aeabi_dcmple>:
  407994:	f84d ed08 	str.w	lr, [sp, #-8]!
  407998:	f7ff ffe0 	bl	40795c <__aeabi_cdcmpeq>
  40799c:	bf94      	ite	ls
  40799e:	2001      	movls	r0, #1
  4079a0:	2000      	movhi	r0, #0
  4079a2:	f85d fb08 	ldr.w	pc, [sp], #8
  4079a6:	bf00      	nop

004079a8 <__aeabi_dcmpge>:
  4079a8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079ac:	f7ff ffce 	bl	40794c <__aeabi_cdrcmple>
  4079b0:	bf94      	ite	ls
  4079b2:	2001      	movls	r0, #1
  4079b4:	2000      	movhi	r0, #0
  4079b6:	f85d fb08 	ldr.w	pc, [sp], #8
  4079ba:	bf00      	nop

004079bc <__aeabi_dcmpgt>:
  4079bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4079c0:	f7ff ffc4 	bl	40794c <__aeabi_cdrcmple>
  4079c4:	bf34      	ite	cc
  4079c6:	2001      	movcc	r0, #1
  4079c8:	2000      	movcs	r0, #0
  4079ca:	f85d fb08 	ldr.w	pc, [sp], #8
  4079ce:	bf00      	nop

004079d0 <__aeabi_d2iz>:
  4079d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4079d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4079d8:	d215      	bcs.n	407a06 <__aeabi_d2iz+0x36>
  4079da:	d511      	bpl.n	407a00 <__aeabi_d2iz+0x30>
  4079dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4079e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4079e4:	d912      	bls.n	407a0c <__aeabi_d2iz+0x3c>
  4079e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4079ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4079ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4079f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4079f6:	fa23 f002 	lsr.w	r0, r3, r2
  4079fa:	bf18      	it	ne
  4079fc:	4240      	negne	r0, r0
  4079fe:	4770      	bx	lr
  407a00:	f04f 0000 	mov.w	r0, #0
  407a04:	4770      	bx	lr
  407a06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407a0a:	d105      	bne.n	407a18 <__aeabi_d2iz+0x48>
  407a0c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407a10:	bf08      	it	eq
  407a12:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407a16:	4770      	bx	lr
  407a18:	f04f 0000 	mov.w	r0, #0
  407a1c:	4770      	bx	lr
  407a1e:	bf00      	nop

00407a20 <__aeabi_uldivmod>:
  407a20:	b94b      	cbnz	r3, 407a36 <__aeabi_uldivmod+0x16>
  407a22:	b942      	cbnz	r2, 407a36 <__aeabi_uldivmod+0x16>
  407a24:	2900      	cmp	r1, #0
  407a26:	bf08      	it	eq
  407a28:	2800      	cmpeq	r0, #0
  407a2a:	d002      	beq.n	407a32 <__aeabi_uldivmod+0x12>
  407a2c:	f04f 31ff 	mov.w	r1, #4294967295
  407a30:	4608      	mov	r0, r1
  407a32:	f000 b83b 	b.w	407aac <__aeabi_idiv0>
  407a36:	b082      	sub	sp, #8
  407a38:	46ec      	mov	ip, sp
  407a3a:	e92d 5000 	stmdb	sp!, {ip, lr}
  407a3e:	f000 f81d 	bl	407a7c <__gnu_uldivmod_helper>
  407a42:	f8dd e004 	ldr.w	lr, [sp, #4]
  407a46:	b002      	add	sp, #8
  407a48:	bc0c      	pop	{r2, r3}
  407a4a:	4770      	bx	lr

00407a4c <__gnu_ldivmod_helper>:
  407a4c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  407a50:	9e08      	ldr	r6, [sp, #32]
  407a52:	4614      	mov	r4, r2
  407a54:	461d      	mov	r5, r3
  407a56:	4680      	mov	r8, r0
  407a58:	4689      	mov	r9, r1
  407a5a:	f000 f829 	bl	407ab0 <__divdi3>
  407a5e:	fb04 f301 	mul.w	r3, r4, r1
  407a62:	fba4 ab00 	umull	sl, fp, r4, r0
  407a66:	fb00 3205 	mla	r2, r0, r5, r3
  407a6a:	4493      	add	fp, r2
  407a6c:	ebb8 080a 	subs.w	r8, r8, sl
  407a70:	eb69 090b 	sbc.w	r9, r9, fp
  407a74:	e9c6 8900 	strd	r8, r9, [r6]
  407a78:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00407a7c <__gnu_uldivmod_helper>:
  407a7c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  407a80:	9e08      	ldr	r6, [sp, #32]
  407a82:	4614      	mov	r4, r2
  407a84:	461d      	mov	r5, r3
  407a86:	4680      	mov	r8, r0
  407a88:	4689      	mov	r9, r1
  407a8a:	f000 f961 	bl	407d50 <__udivdi3>
  407a8e:	fb00 f505 	mul.w	r5, r0, r5
  407a92:	fba0 ab04 	umull	sl, fp, r0, r4
  407a96:	fb04 5401 	mla	r4, r4, r1, r5
  407a9a:	44a3      	add	fp, r4
  407a9c:	ebb8 080a 	subs.w	r8, r8, sl
  407aa0:	eb69 090b 	sbc.w	r9, r9, fp
  407aa4:	e9c6 8900 	strd	r8, r9, [r6]
  407aa8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00407aac <__aeabi_idiv0>:
  407aac:	4770      	bx	lr
  407aae:	bf00      	nop

00407ab0 <__divdi3>:
  407ab0:	2900      	cmp	r1, #0
  407ab2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407ab6:	f2c0 80a1 	blt.w	407bfc <__divdi3+0x14c>
  407aba:	2400      	movs	r4, #0
  407abc:	2b00      	cmp	r3, #0
  407abe:	f2c0 8098 	blt.w	407bf2 <__divdi3+0x142>
  407ac2:	4615      	mov	r5, r2
  407ac4:	4606      	mov	r6, r0
  407ac6:	460f      	mov	r7, r1
  407ac8:	2b00      	cmp	r3, #0
  407aca:	d13f      	bne.n	407b4c <__divdi3+0x9c>
  407acc:	428a      	cmp	r2, r1
  407ace:	d958      	bls.n	407b82 <__divdi3+0xd2>
  407ad0:	fab2 f382 	clz	r3, r2
  407ad4:	b14b      	cbz	r3, 407aea <__divdi3+0x3a>
  407ad6:	f1c3 0220 	rsb	r2, r3, #32
  407ada:	fa01 f703 	lsl.w	r7, r1, r3
  407ade:	fa20 f202 	lsr.w	r2, r0, r2
  407ae2:	409d      	lsls	r5, r3
  407ae4:	fa00 f603 	lsl.w	r6, r0, r3
  407ae8:	4317      	orrs	r7, r2
  407aea:	0c29      	lsrs	r1, r5, #16
  407aec:	fbb7 f2f1 	udiv	r2, r7, r1
  407af0:	fb01 7712 	mls	r7, r1, r2, r7
  407af4:	b2a8      	uxth	r0, r5
  407af6:	fb00 f302 	mul.w	r3, r0, r2
  407afa:	ea4f 4c16 	mov.w	ip, r6, lsr #16
  407afe:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
  407b02:	42bb      	cmp	r3, r7
  407b04:	d909      	bls.n	407b1a <__divdi3+0x6a>
  407b06:	197f      	adds	r7, r7, r5
  407b08:	f102 3cff 	add.w	ip, r2, #4294967295
  407b0c:	f080 8105 	bcs.w	407d1a <__divdi3+0x26a>
  407b10:	42bb      	cmp	r3, r7
  407b12:	f240 8102 	bls.w	407d1a <__divdi3+0x26a>
  407b16:	3a02      	subs	r2, #2
  407b18:	442f      	add	r7, r5
  407b1a:	1aff      	subs	r7, r7, r3
  407b1c:	fbb7 f3f1 	udiv	r3, r7, r1
  407b20:	fb01 7113 	mls	r1, r1, r3, r7
  407b24:	fb00 f003 	mul.w	r0, r0, r3
  407b28:	b2b6      	uxth	r6, r6
  407b2a:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
  407b2e:	4288      	cmp	r0, r1
  407b30:	d908      	bls.n	407b44 <__divdi3+0x94>
  407b32:	1949      	adds	r1, r1, r5
  407b34:	f103 37ff 	add.w	r7, r3, #4294967295
  407b38:	f080 80f1 	bcs.w	407d1e <__divdi3+0x26e>
  407b3c:	4288      	cmp	r0, r1
  407b3e:	f240 80ee 	bls.w	407d1e <__divdi3+0x26e>
  407b42:	3b02      	subs	r3, #2
  407b44:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  407b48:	2300      	movs	r3, #0
  407b4a:	e003      	b.n	407b54 <__divdi3+0xa4>
  407b4c:	428b      	cmp	r3, r1
  407b4e:	d90a      	bls.n	407b66 <__divdi3+0xb6>
  407b50:	2300      	movs	r3, #0
  407b52:	461a      	mov	r2, r3
  407b54:	4610      	mov	r0, r2
  407b56:	4619      	mov	r1, r3
  407b58:	b114      	cbz	r4, 407b60 <__divdi3+0xb0>
  407b5a:	4240      	negs	r0, r0
  407b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407b60:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407b64:	4770      	bx	lr
  407b66:	fab3 f883 	clz	r8, r3
  407b6a:	f1b8 0f00 	cmp.w	r8, #0
  407b6e:	f040 8088 	bne.w	407c82 <__divdi3+0x1d2>
  407b72:	428b      	cmp	r3, r1
  407b74:	d302      	bcc.n	407b7c <__divdi3+0xcc>
  407b76:	4282      	cmp	r2, r0
  407b78:	f200 80e2 	bhi.w	407d40 <__divdi3+0x290>
  407b7c:	2300      	movs	r3, #0
  407b7e:	2201      	movs	r2, #1
  407b80:	e7e8      	b.n	407b54 <__divdi3+0xa4>
  407b82:	b912      	cbnz	r2, 407b8a <__divdi3+0xda>
  407b84:	2301      	movs	r3, #1
  407b86:	fbb3 f5f2 	udiv	r5, r3, r2
  407b8a:	fab5 f285 	clz	r2, r5
  407b8e:	2a00      	cmp	r2, #0
  407b90:	d13a      	bne.n	407c08 <__divdi3+0x158>
  407b92:	1b7f      	subs	r7, r7, r5
  407b94:	0c28      	lsrs	r0, r5, #16
  407b96:	fa1f fc85 	uxth.w	ip, r5
  407b9a:	2301      	movs	r3, #1
  407b9c:	fbb7 f1f0 	udiv	r1, r7, r0
  407ba0:	fb00 7711 	mls	r7, r0, r1, r7
  407ba4:	fb0c f201 	mul.w	r2, ip, r1
  407ba8:	ea4f 4816 	mov.w	r8, r6, lsr #16
  407bac:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  407bb0:	42ba      	cmp	r2, r7
  407bb2:	d907      	bls.n	407bc4 <__divdi3+0x114>
  407bb4:	197f      	adds	r7, r7, r5
  407bb6:	f101 38ff 	add.w	r8, r1, #4294967295
  407bba:	d202      	bcs.n	407bc2 <__divdi3+0x112>
  407bbc:	42ba      	cmp	r2, r7
  407bbe:	f200 80c4 	bhi.w	407d4a <__divdi3+0x29a>
  407bc2:	4641      	mov	r1, r8
  407bc4:	1abf      	subs	r7, r7, r2
  407bc6:	fbb7 f2f0 	udiv	r2, r7, r0
  407bca:	fb00 7012 	mls	r0, r0, r2, r7
  407bce:	fb0c fc02 	mul.w	ip, ip, r2
  407bd2:	b2b6      	uxth	r6, r6
  407bd4:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
  407bd8:	4584      	cmp	ip, r0
  407bda:	d907      	bls.n	407bec <__divdi3+0x13c>
  407bdc:	1940      	adds	r0, r0, r5
  407bde:	f102 37ff 	add.w	r7, r2, #4294967295
  407be2:	d202      	bcs.n	407bea <__divdi3+0x13a>
  407be4:	4584      	cmp	ip, r0
  407be6:	f200 80ae 	bhi.w	407d46 <__divdi3+0x296>
  407bea:	463a      	mov	r2, r7
  407bec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  407bf0:	e7b0      	b.n	407b54 <__divdi3+0xa4>
  407bf2:	43e4      	mvns	r4, r4
  407bf4:	4252      	negs	r2, r2
  407bf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407bfa:	e762      	b.n	407ac2 <__divdi3+0x12>
  407bfc:	4240      	negs	r0, r0
  407bfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407c02:	f04f 34ff 	mov.w	r4, #4294967295
  407c06:	e759      	b.n	407abc <__divdi3+0xc>
  407c08:	4095      	lsls	r5, r2
  407c0a:	f1c2 0920 	rsb	r9, r2, #32
  407c0e:	fa27 f109 	lsr.w	r1, r7, r9
  407c12:	fa26 f909 	lsr.w	r9, r6, r9
  407c16:	4097      	lsls	r7, r2
  407c18:	0c28      	lsrs	r0, r5, #16
  407c1a:	fbb1 f8f0 	udiv	r8, r1, r0
  407c1e:	fb00 1118 	mls	r1, r0, r8, r1
  407c22:	fa1f fc85 	uxth.w	ip, r5
  407c26:	fb0c f308 	mul.w	r3, ip, r8
  407c2a:	ea49 0907 	orr.w	r9, r9, r7
  407c2e:	ea4f 4719 	mov.w	r7, r9, lsr #16
  407c32:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
  407c36:	428b      	cmp	r3, r1
  407c38:	fa06 f602 	lsl.w	r6, r6, r2
  407c3c:	d908      	bls.n	407c50 <__divdi3+0x1a0>
  407c3e:	1949      	adds	r1, r1, r5
  407c40:	f108 32ff 	add.w	r2, r8, #4294967295
  407c44:	d27a      	bcs.n	407d3c <__divdi3+0x28c>
  407c46:	428b      	cmp	r3, r1
  407c48:	d978      	bls.n	407d3c <__divdi3+0x28c>
  407c4a:	f1a8 0802 	sub.w	r8, r8, #2
  407c4e:	4429      	add	r1, r5
  407c50:	1ac9      	subs	r1, r1, r3
  407c52:	fbb1 f3f0 	udiv	r3, r1, r0
  407c56:	fb00 1713 	mls	r7, r0, r3, r1
  407c5a:	fb0c f203 	mul.w	r2, ip, r3
  407c5e:	fa1f f989 	uxth.w	r9, r9
  407c62:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
  407c66:	42ba      	cmp	r2, r7
  407c68:	d907      	bls.n	407c7a <__divdi3+0x1ca>
  407c6a:	197f      	adds	r7, r7, r5
  407c6c:	f103 31ff 	add.w	r1, r3, #4294967295
  407c70:	d260      	bcs.n	407d34 <__divdi3+0x284>
  407c72:	42ba      	cmp	r2, r7
  407c74:	d95e      	bls.n	407d34 <__divdi3+0x284>
  407c76:	3b02      	subs	r3, #2
  407c78:	442f      	add	r7, r5
  407c7a:	1abf      	subs	r7, r7, r2
  407c7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  407c80:	e78c      	b.n	407b9c <__divdi3+0xec>
  407c82:	f1c8 0220 	rsb	r2, r8, #32
  407c86:	fa25 f102 	lsr.w	r1, r5, r2
  407c8a:	fa03 fc08 	lsl.w	ip, r3, r8
  407c8e:	fa27 f302 	lsr.w	r3, r7, r2
  407c92:	fa20 f202 	lsr.w	r2, r0, r2
  407c96:	fa07 f708 	lsl.w	r7, r7, r8
  407c9a:	ea41 0c0c 	orr.w	ip, r1, ip
  407c9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
  407ca2:	fbb3 f1f9 	udiv	r1, r3, r9
  407ca6:	fb09 3311 	mls	r3, r9, r1, r3
  407caa:	fa1f fa8c 	uxth.w	sl, ip
  407cae:	fb0a fb01 	mul.w	fp, sl, r1
  407cb2:	4317      	orrs	r7, r2
  407cb4:	0c3a      	lsrs	r2, r7, #16
  407cb6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  407cba:	459b      	cmp	fp, r3
  407cbc:	fa05 f008 	lsl.w	r0, r5, r8
  407cc0:	d908      	bls.n	407cd4 <__divdi3+0x224>
  407cc2:	eb13 030c 	adds.w	r3, r3, ip
  407cc6:	f101 32ff 	add.w	r2, r1, #4294967295
  407cca:	d235      	bcs.n	407d38 <__divdi3+0x288>
  407ccc:	459b      	cmp	fp, r3
  407cce:	d933      	bls.n	407d38 <__divdi3+0x288>
  407cd0:	3902      	subs	r1, #2
  407cd2:	4463      	add	r3, ip
  407cd4:	ebcb 0303 	rsb	r3, fp, r3
  407cd8:	fbb3 f2f9 	udiv	r2, r3, r9
  407cdc:	fb09 3312 	mls	r3, r9, r2, r3
  407ce0:	fb0a fa02 	mul.w	sl, sl, r2
  407ce4:	b2bf      	uxth	r7, r7
  407ce6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  407cea:	45ba      	cmp	sl, r7
  407cec:	d908      	bls.n	407d00 <__divdi3+0x250>
  407cee:	eb17 070c 	adds.w	r7, r7, ip
  407cf2:	f102 33ff 	add.w	r3, r2, #4294967295
  407cf6:	d21b      	bcs.n	407d30 <__divdi3+0x280>
  407cf8:	45ba      	cmp	sl, r7
  407cfa:	d919      	bls.n	407d30 <__divdi3+0x280>
  407cfc:	3a02      	subs	r2, #2
  407cfe:	4467      	add	r7, ip
  407d00:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
  407d04:	fba5 0100 	umull	r0, r1, r5, r0
  407d08:	ebca 0707 	rsb	r7, sl, r7
  407d0c:	428f      	cmp	r7, r1
  407d0e:	f04f 0300 	mov.w	r3, #0
  407d12:	d30a      	bcc.n	407d2a <__divdi3+0x27a>
  407d14:	d005      	beq.n	407d22 <__divdi3+0x272>
  407d16:	462a      	mov	r2, r5
  407d18:	e71c      	b.n	407b54 <__divdi3+0xa4>
  407d1a:	4662      	mov	r2, ip
  407d1c:	e6fd      	b.n	407b1a <__divdi3+0x6a>
  407d1e:	463b      	mov	r3, r7
  407d20:	e710      	b.n	407b44 <__divdi3+0x94>
  407d22:	fa06 f608 	lsl.w	r6, r6, r8
  407d26:	4286      	cmp	r6, r0
  407d28:	d2f5      	bcs.n	407d16 <__divdi3+0x266>
  407d2a:	1e6a      	subs	r2, r5, #1
  407d2c:	2300      	movs	r3, #0
  407d2e:	e711      	b.n	407b54 <__divdi3+0xa4>
  407d30:	461a      	mov	r2, r3
  407d32:	e7e5      	b.n	407d00 <__divdi3+0x250>
  407d34:	460b      	mov	r3, r1
  407d36:	e7a0      	b.n	407c7a <__divdi3+0x1ca>
  407d38:	4611      	mov	r1, r2
  407d3a:	e7cb      	b.n	407cd4 <__divdi3+0x224>
  407d3c:	4690      	mov	r8, r2
  407d3e:	e787      	b.n	407c50 <__divdi3+0x1a0>
  407d40:	4643      	mov	r3, r8
  407d42:	4642      	mov	r2, r8
  407d44:	e706      	b.n	407b54 <__divdi3+0xa4>
  407d46:	3a02      	subs	r2, #2
  407d48:	e750      	b.n	407bec <__divdi3+0x13c>
  407d4a:	3902      	subs	r1, #2
  407d4c:	442f      	add	r7, r5
  407d4e:	e739      	b.n	407bc4 <__divdi3+0x114>

00407d50 <__udivdi3>:
  407d50:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407d54:	4614      	mov	r4, r2
  407d56:	4605      	mov	r5, r0
  407d58:	460e      	mov	r6, r1
  407d5a:	2b00      	cmp	r3, #0
  407d5c:	d143      	bne.n	407de6 <__udivdi3+0x96>
  407d5e:	428a      	cmp	r2, r1
  407d60:	d953      	bls.n	407e0a <__udivdi3+0xba>
  407d62:	fab2 f782 	clz	r7, r2
  407d66:	b157      	cbz	r7, 407d7e <__udivdi3+0x2e>
  407d68:	f1c7 0620 	rsb	r6, r7, #32
  407d6c:	fa20 f606 	lsr.w	r6, r0, r6
  407d70:	fa01 f307 	lsl.w	r3, r1, r7
  407d74:	fa02 f407 	lsl.w	r4, r2, r7
  407d78:	fa00 f507 	lsl.w	r5, r0, r7
  407d7c:	431e      	orrs	r6, r3
  407d7e:	0c21      	lsrs	r1, r4, #16
  407d80:	fbb6 f2f1 	udiv	r2, r6, r1
  407d84:	fb01 6612 	mls	r6, r1, r2, r6
  407d88:	b2a0      	uxth	r0, r4
  407d8a:	fb00 f302 	mul.w	r3, r0, r2
  407d8e:	0c2f      	lsrs	r7, r5, #16
  407d90:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  407d94:	42b3      	cmp	r3, r6
  407d96:	d909      	bls.n	407dac <__udivdi3+0x5c>
  407d98:	1936      	adds	r6, r6, r4
  407d9a:	f102 37ff 	add.w	r7, r2, #4294967295
  407d9e:	f080 80fd 	bcs.w	407f9c <__udivdi3+0x24c>
  407da2:	42b3      	cmp	r3, r6
  407da4:	f240 80fa 	bls.w	407f9c <__udivdi3+0x24c>
  407da8:	3a02      	subs	r2, #2
  407daa:	4426      	add	r6, r4
  407dac:	1af6      	subs	r6, r6, r3
  407dae:	fbb6 f3f1 	udiv	r3, r6, r1
  407db2:	fb01 6113 	mls	r1, r1, r3, r6
  407db6:	fb00 f003 	mul.w	r0, r0, r3
  407dba:	b2ad      	uxth	r5, r5
  407dbc:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
  407dc0:	4288      	cmp	r0, r1
  407dc2:	d908      	bls.n	407dd6 <__udivdi3+0x86>
  407dc4:	1909      	adds	r1, r1, r4
  407dc6:	f103 36ff 	add.w	r6, r3, #4294967295
  407dca:	f080 80e9 	bcs.w	407fa0 <__udivdi3+0x250>
  407dce:	4288      	cmp	r0, r1
  407dd0:	f240 80e6 	bls.w	407fa0 <__udivdi3+0x250>
  407dd4:	3b02      	subs	r3, #2
  407dd6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  407dda:	2300      	movs	r3, #0
  407ddc:	4610      	mov	r0, r2
  407dde:	4619      	mov	r1, r3
  407de0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407de4:	4770      	bx	lr
  407de6:	428b      	cmp	r3, r1
  407de8:	d84c      	bhi.n	407e84 <__udivdi3+0x134>
  407dea:	fab3 f683 	clz	r6, r3
  407dee:	2e00      	cmp	r6, #0
  407df0:	d14f      	bne.n	407e92 <__udivdi3+0x142>
  407df2:	428b      	cmp	r3, r1
  407df4:	d302      	bcc.n	407dfc <__udivdi3+0xac>
  407df6:	4282      	cmp	r2, r0
  407df8:	f200 80dd 	bhi.w	407fb6 <__udivdi3+0x266>
  407dfc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407e00:	2300      	movs	r3, #0
  407e02:	2201      	movs	r2, #1
  407e04:	4610      	mov	r0, r2
  407e06:	4619      	mov	r1, r3
  407e08:	4770      	bx	lr
  407e0a:	b912      	cbnz	r2, 407e12 <__udivdi3+0xc2>
  407e0c:	2401      	movs	r4, #1
  407e0e:	fbb4 f4f2 	udiv	r4, r4, r2
  407e12:	fab4 f284 	clz	r2, r4
  407e16:	2a00      	cmp	r2, #0
  407e18:	f040 8082 	bne.w	407f20 <__udivdi3+0x1d0>
  407e1c:	1b09      	subs	r1, r1, r4
  407e1e:	0c26      	lsrs	r6, r4, #16
  407e20:	b2a7      	uxth	r7, r4
  407e22:	2301      	movs	r3, #1
  407e24:	fbb1 f0f6 	udiv	r0, r1, r6
  407e28:	fb06 1110 	mls	r1, r6, r0, r1
  407e2c:	fb07 f200 	mul.w	r2, r7, r0
  407e30:	ea4f 4c15 	mov.w	ip, r5, lsr #16
  407e34:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
  407e38:	428a      	cmp	r2, r1
  407e3a:	d907      	bls.n	407e4c <__udivdi3+0xfc>
  407e3c:	1909      	adds	r1, r1, r4
  407e3e:	f100 3cff 	add.w	ip, r0, #4294967295
  407e42:	d202      	bcs.n	407e4a <__udivdi3+0xfa>
  407e44:	428a      	cmp	r2, r1
  407e46:	f200 80c8 	bhi.w	407fda <__udivdi3+0x28a>
  407e4a:	4660      	mov	r0, ip
  407e4c:	1a89      	subs	r1, r1, r2
  407e4e:	fbb1 f2f6 	udiv	r2, r1, r6
  407e52:	fb06 1112 	mls	r1, r6, r2, r1
  407e56:	fb07 f702 	mul.w	r7, r7, r2
  407e5a:	b2ad      	uxth	r5, r5
  407e5c:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  407e60:	42af      	cmp	r7, r5
  407e62:	d908      	bls.n	407e76 <__udivdi3+0x126>
  407e64:	192c      	adds	r4, r5, r4
  407e66:	f102 31ff 	add.w	r1, r2, #4294967295
  407e6a:	f080 809b 	bcs.w	407fa4 <__udivdi3+0x254>
  407e6e:	42a7      	cmp	r7, r4
  407e70:	f240 8098 	bls.w	407fa4 <__udivdi3+0x254>
  407e74:	3a02      	subs	r2, #2
  407e76:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  407e7a:	4610      	mov	r0, r2
  407e7c:	4619      	mov	r1, r3
  407e7e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407e82:	4770      	bx	lr
  407e84:	2300      	movs	r3, #0
  407e86:	461a      	mov	r2, r3
  407e88:	4610      	mov	r0, r2
  407e8a:	4619      	mov	r1, r3
  407e8c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  407e90:	4770      	bx	lr
  407e92:	f1c6 0520 	rsb	r5, r6, #32
  407e96:	fa22 f705 	lsr.w	r7, r2, r5
  407e9a:	fa03 f406 	lsl.w	r4, r3, r6
  407e9e:	fa21 f305 	lsr.w	r3, r1, r5
  407ea2:	fa01 fb06 	lsl.w	fp, r1, r6
  407ea6:	fa20 f505 	lsr.w	r5, r0, r5
  407eaa:	433c      	orrs	r4, r7
  407eac:	ea4f 4814 	mov.w	r8, r4, lsr #16
  407eb0:	fbb3 fcf8 	udiv	ip, r3, r8
  407eb4:	fb08 331c 	mls	r3, r8, ip, r3
  407eb8:	fa1f f984 	uxth.w	r9, r4
  407ebc:	fb09 fa0c 	mul.w	sl, r9, ip
  407ec0:	ea45 0b0b 	orr.w	fp, r5, fp
  407ec4:	ea4f 451b 	mov.w	r5, fp, lsr #16
  407ec8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
  407ecc:	459a      	cmp	sl, r3
  407ece:	fa02 f206 	lsl.w	r2, r2, r6
  407ed2:	d904      	bls.n	407ede <__udivdi3+0x18e>
  407ed4:	191b      	adds	r3, r3, r4
  407ed6:	f10c 35ff 	add.w	r5, ip, #4294967295
  407eda:	d36f      	bcc.n	407fbc <__udivdi3+0x26c>
  407edc:	46ac      	mov	ip, r5
  407ede:	ebca 0303 	rsb	r3, sl, r3
  407ee2:	fbb3 f5f8 	udiv	r5, r3, r8
  407ee6:	fb08 3315 	mls	r3, r8, r5, r3
  407eea:	fb09 f905 	mul.w	r9, r9, r5
  407eee:	fa1f fb8b 	uxth.w	fp, fp
  407ef2:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
  407ef6:	45b9      	cmp	r9, r7
  407ef8:	d904      	bls.n	407f04 <__udivdi3+0x1b4>
  407efa:	193f      	adds	r7, r7, r4
  407efc:	f105 33ff 	add.w	r3, r5, #4294967295
  407f00:	d362      	bcc.n	407fc8 <__udivdi3+0x278>
  407f02:	461d      	mov	r5, r3
  407f04:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
  407f08:	fbac 2302 	umull	r2, r3, ip, r2
  407f0c:	ebc9 0707 	rsb	r7, r9, r7
  407f10:	429f      	cmp	r7, r3
  407f12:	f04f 0500 	mov.w	r5, #0
  407f16:	d34a      	bcc.n	407fae <__udivdi3+0x25e>
  407f18:	d046      	beq.n	407fa8 <__udivdi3+0x258>
  407f1a:	4662      	mov	r2, ip
  407f1c:	462b      	mov	r3, r5
  407f1e:	e75d      	b.n	407ddc <__udivdi3+0x8c>
  407f20:	4094      	lsls	r4, r2
  407f22:	f1c2 0920 	rsb	r9, r2, #32
  407f26:	fa21 fc09 	lsr.w	ip, r1, r9
  407f2a:	4091      	lsls	r1, r2
  407f2c:	fa20 f909 	lsr.w	r9, r0, r9
  407f30:	0c26      	lsrs	r6, r4, #16
  407f32:	fbbc f8f6 	udiv	r8, ip, r6
  407f36:	fb06 cc18 	mls	ip, r6, r8, ip
  407f3a:	b2a7      	uxth	r7, r4
  407f3c:	fb07 f308 	mul.w	r3, r7, r8
  407f40:	ea49 0901 	orr.w	r9, r9, r1
  407f44:	ea4f 4119 	mov.w	r1, r9, lsr #16
  407f48:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
  407f4c:	4563      	cmp	r3, ip
  407f4e:	fa00 f502 	lsl.w	r5, r0, r2
  407f52:	d909      	bls.n	407f68 <__udivdi3+0x218>
  407f54:	eb1c 0c04 	adds.w	ip, ip, r4
  407f58:	f108 32ff 	add.w	r2, r8, #4294967295
  407f5c:	d23b      	bcs.n	407fd6 <__udivdi3+0x286>
  407f5e:	4563      	cmp	r3, ip
  407f60:	d939      	bls.n	407fd6 <__udivdi3+0x286>
  407f62:	f1a8 0802 	sub.w	r8, r8, #2
  407f66:	44a4      	add	ip, r4
  407f68:	ebc3 0c0c 	rsb	ip, r3, ip
  407f6c:	fbbc f3f6 	udiv	r3, ip, r6
  407f70:	fb06 c113 	mls	r1, r6, r3, ip
  407f74:	fb07 f203 	mul.w	r2, r7, r3
  407f78:	fa1f f989 	uxth.w	r9, r9
  407f7c:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
  407f80:	428a      	cmp	r2, r1
  407f82:	d907      	bls.n	407f94 <__udivdi3+0x244>
  407f84:	1909      	adds	r1, r1, r4
  407f86:	f103 30ff 	add.w	r0, r3, #4294967295
  407f8a:	d222      	bcs.n	407fd2 <__udivdi3+0x282>
  407f8c:	428a      	cmp	r2, r1
  407f8e:	d920      	bls.n	407fd2 <__udivdi3+0x282>
  407f90:	3b02      	subs	r3, #2
  407f92:	4421      	add	r1, r4
  407f94:	1a89      	subs	r1, r1, r2
  407f96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  407f9a:	e743      	b.n	407e24 <__udivdi3+0xd4>
  407f9c:	463a      	mov	r2, r7
  407f9e:	e705      	b.n	407dac <__udivdi3+0x5c>
  407fa0:	4633      	mov	r3, r6
  407fa2:	e718      	b.n	407dd6 <__udivdi3+0x86>
  407fa4:	460a      	mov	r2, r1
  407fa6:	e766      	b.n	407e76 <__udivdi3+0x126>
  407fa8:	40b0      	lsls	r0, r6
  407faa:	4290      	cmp	r0, r2
  407fac:	d2b5      	bcs.n	407f1a <__udivdi3+0x1ca>
  407fae:	f10c 32ff 	add.w	r2, ip, #4294967295
  407fb2:	2300      	movs	r3, #0
  407fb4:	e712      	b.n	407ddc <__udivdi3+0x8c>
  407fb6:	4633      	mov	r3, r6
  407fb8:	4632      	mov	r2, r6
  407fba:	e70f      	b.n	407ddc <__udivdi3+0x8c>
  407fbc:	459a      	cmp	sl, r3
  407fbe:	d98d      	bls.n	407edc <__udivdi3+0x18c>
  407fc0:	f1ac 0c02 	sub.w	ip, ip, #2
  407fc4:	4423      	add	r3, r4
  407fc6:	e78a      	b.n	407ede <__udivdi3+0x18e>
  407fc8:	45b9      	cmp	r9, r7
  407fca:	d99a      	bls.n	407f02 <__udivdi3+0x1b2>
  407fcc:	3d02      	subs	r5, #2
  407fce:	4427      	add	r7, r4
  407fd0:	e798      	b.n	407f04 <__udivdi3+0x1b4>
  407fd2:	4603      	mov	r3, r0
  407fd4:	e7de      	b.n	407f94 <__udivdi3+0x244>
  407fd6:	4690      	mov	r8, r2
  407fd8:	e7c6      	b.n	407f68 <__udivdi3+0x218>
  407fda:	3802      	subs	r0, #2
  407fdc:	4421      	add	r1, r4
  407fde:	e735      	b.n	407e4c <__udivdi3+0xfc>
  407fe0:	616d6f43 	.word	0x616d6f43
  407fe4:	6620646e 	.word	0x6620646e
  407fe8:	616d726f 	.word	0x616d726f
  407fec:	72652074 	.word	0x72652074
  407ff0:	21726f72 	.word	0x21726f72
  407ff4:	00000d0a 	.word	0x00000d0a
  407ff8:	41525453 	.word	0x41525453
  407ffc:	00444546 	.word	0x00444546
  408000:	75716341 	.word	0x75716341
  408004:	74697369 	.word	0x74697369
  408008:	206e6f69 	.word	0x206e6f69
  40800c:	72617473 	.word	0x72617473
  408010:	0a646574 	.word	0x0a646574
  408014:	0000000d 	.word	0x0000000d
  408018:	75716341 	.word	0x75716341
  40801c:	74697369 	.word	0x74697369
  408020:	206e6f69 	.word	0x206e6f69
  408024:	706f7473 	.word	0x706f7473
  408028:	0d0a6465 	.word	0x0d0a6465
  40802c:	00000000 	.word	0x00000000
  408030:	706d6153 	.word	0x706d6153
  408034:	7020656c 	.word	0x7020656c
  408038:	6f697265 	.word	0x6f697265
  40803c:	65732064 	.word	0x65732064
  408040:	6f742074 	.word	0x6f742074
  408044:	20752520 	.word	0x20752520
  408048:	0d0a5375 	.word	0x0d0a5375
  40804c:	00000000 	.word	0x00000000
  408050:	20514144 	.word	0x20514144
  408054:	6c6c6977 	.word	0x6c6c6977
  408058:	65746120 	.word	0x65746120
  40805c:	2074706d 	.word	0x2074706d
  408060:	74206f74 	.word	0x74206f74
  408064:	20656b61 	.word	0x20656b61
  408068:	73207525 	.word	0x73207525
  40806c:	6c706d61 	.word	0x6c706d61
  408070:	70207365 	.word	0x70207365
  408074:	63207265 	.word	0x63207265
  408078:	6e6e6168 	.word	0x6e6e6168
  40807c:	0d0a6c65 	.word	0x0d0a6c65
  408080:	00000000 	.word	0x00000000
  408084:	20514144 	.word	0x20514144
  408088:	6c6c6977 	.word	0x6c6c6977
  40808c:	6d617320 	.word	0x6d617320
  408090:	20656c70 	.word	0x20656c70
  408094:	206c6c61 	.word	0x206c6c61
  408098:	62656e65 	.word	0x62656e65
  40809c:	2064656c 	.word	0x2064656c
  4080a0:	6e616863 	.word	0x6e616863
  4080a4:	736c656e 	.word	0x736c656e
  4080a8:	20752520 	.word	0x20752520
  4080ac:	656d6974 	.word	0x656d6974
  4080b0:	000d0a73 	.word	0x000d0a73
  4080b4:	75716553 	.word	0x75716553
  4080b8:	65636e65 	.word	0x65636e65
  4080bc:	74657320 	.word	0x74657320
  4080c0:	3a6f7420 	.word	0x3a6f7420
  4080c4:	00000020 	.word	0x00000020
  4080c8:	00207525 	.word	0x00207525
  4080cc:	20434144 	.word	0x20434144
  4080d0:	6e616863 	.word	0x6e616863
  4080d4:	206c656e 	.word	0x206c656e
  4080d8:	73207525 	.word	0x73207525
  4080dc:	74207465 	.word	0x74207465
  4080e0:	6425206f 	.word	0x6425206f
  4080e4:	0a566d20 	.word	0x0a566d20
  4080e8:	0000000d 	.word	0x0000000d
  4080ec:	6e6b6e55 	.word	0x6e6b6e55
  4080f0:	206e776f 	.word	0x206e776f
  4080f4:	616d6f63 	.word	0x616d6f63
  4080f8:	0a21646e 	.word	0x0a21646e
  4080fc:	0000000d 	.word	0x0000000d
  408100:	00000043 	.word	0x00000043

00408104 <_global_impure_ptr>:
  408104:	200000b8                                ... 

00408108 <zeroes.6763>:
  408108:	30303030 30303030 30303030 30303030     0000000000000000
  408118:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  408128:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  408138:	00000000 33323130 37363534 62613938     ....0123456789ab
  408148:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  408158:	00000030                                0...

0040815c <blanks.6762>:
  40815c:	20202020 20202020 20202020 20202020                     

0040816c <_ctype_>:
  40816c:	20202000 20202020 28282020 20282828     .         ((((( 
  40817c:	20202020 20202020 20202020 20202020                     
  40818c:	10108820 10101010 10101010 10101010      ...............
  40819c:	04040410 04040404 10040404 10101010     ................
  4081ac:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4081bc:	01010101 01010101 01010101 10101010     ................
  4081cc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4081dc:	02020202 02020202 02020202 10101010     ................
  4081ec:	00000020 00000000 00000000 00000000      ...............
	...
  408270:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  408280:	49534f50 00000058 0000002e 00000000     POSIX...........

00408290 <__mprec_tens>:
  408290:	00000000 3ff00000 00000000 40240000     .......?......$@
  4082a0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4082b0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4082c0:	00000000 412e8480 00000000 416312d0     .......A......cA
  4082d0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4082e0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4082f0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408300:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408310:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408320:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408330:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408340:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408350:	79d99db4 44ea7843                       ...yCx.D

00408358 <__mprec_bigtens>:
  408358:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408368:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408378:	7f73bf3c 75154fdd                       <.s..O.u

00408380 <p05.5269>:
  408380:	00000005 00000019 0000007d              ........}...

0040838c <_init>:
  40838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40838e:	bf00      	nop
  408390:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408392:	bc08      	pop	{r3}
  408394:	469e      	mov	lr, r3
  408396:	4770      	bx	lr

00408398 <__init_array_start>:
  408398:	00404c45 	.word	0x00404c45

0040839c <__frame_dummy_init_array_entry>:
  40839c:	004000f5                                ..@.

004083a0 <_fini>:
  4083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4083a2:	bf00      	nop
  4083a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4083a6:	bc08      	pop	{r3}
  4083a8:	469e      	mov	lr, r3
  4083aa:	4770      	bx	lr

004083ac <__fini_array_start>:
  4083ac:	004000d1 	.word	0x004000d1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <sequencePosition>:
2000000c:	0001 0000                                   ....

20000010 <udi_api_cdc_data>:
20000010:	0b85 0040 0839 0040 0855 0040 0859 0040     ..@.9.@.U.@.Y.@.
20000020:	0a65 0040                                   e.@.

20000024 <udi_api_cdc_comm>:
20000024:	07dd 0040 0829 0040 085d 0040 0859 0040     ..@.).@.].@.Y.@.
20000034:	0000 0000                                   ....

20000038 <udc_config>:
20000038:	0054 2000 004c 2000 0000 0000               T.. L.. ....

20000044 <udi_apis>:
20000044:	0024 2000 0010 2000                         $.. ... 

2000004c <udc_config_fs>:
2000004c:	0068 2000 0044 2000                         h.. D.. 

20000054 <udc_device_desc>:
20000054:	0112 0200 0002 4000 03eb 2404 0100 0000     .......@...$....
20000064:	0100 0000                                   ....

20000068 <udc_desc_fs>:
20000068:	0209 0043 0102 8000 0932 0004 0100 0202     ..C.....2.......
20000078:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
20000088:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
20000098:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
200000a8:	0040 0000                                   @...

200000ac <udc_string_desc_languageid>:
200000ac:	0304 0409                                   ....

200000b0 <g_interrupt_enabled>:
200000b0:	0001 0000                                   ....

200000b4 <SystemCoreClock>:
200000b4:	0900 003d                                   ..=.

200000b8 <impure_data>:
200000b8:	0000 0000 03a4 2000 040c 2000 0474 2000     ....... ... t.. 
	...
200000ec:	8100 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
20000160:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000170:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200004e0 <_impure_ptr>:
200004e0:	00b8 2000                                   ... 

200004e4 <__ctype_ptr__>:
200004e4:	816c 0040                                   l.@.

200004e8 <lconv>:
200004e8:	8288 0040 804c 0040 804c 0040 804c 0040     ..@.L.@.L.@.L.@.
200004f8:	804c 0040 804c 0040 804c 0040 804c 0040     L.@.L.@.L.@.L.@.
20000508:	804c 0040 804c 0040 ffff ffff ffff ffff     L.@.L.@.........
20000518:	ffff ffff ffff 0000                         ........

20000520 <__malloc_av_>:
	...
20000528:	0520 2000 0520 2000 0528 2000 0528 2000      ..  .. (.. (.. 
20000538:	0530 2000 0530 2000 0538 2000 0538 2000     0.. 0.. 8.. 8.. 
20000548:	0540 2000 0540 2000 0548 2000 0548 2000     @.. @.. H.. H.. 
20000558:	0550 2000 0550 2000 0558 2000 0558 2000     P.. P.. X.. X.. 
20000568:	0560 2000 0560 2000 0568 2000 0568 2000     `.. `.. h.. h.. 
20000578:	0570 2000 0570 2000 0578 2000 0578 2000     p.. p.. x.. x.. 
20000588:	0580 2000 0580 2000 0588 2000 0588 2000     ... ... ... ... 
20000598:	0590 2000 0590 2000 0598 2000 0598 2000     ... ... ... ... 
200005a8:	05a0 2000 05a0 2000 05a8 2000 05a8 2000     ... ... ... ... 
200005b8:	05b0 2000 05b0 2000 05b8 2000 05b8 2000     ... ... ... ... 
200005c8:	05c0 2000 05c0 2000 05c8 2000 05c8 2000     ... ... ... ... 
200005d8:	05d0 2000 05d0 2000 05d8 2000 05d8 2000     ... ... ... ... 
200005e8:	05e0 2000 05e0 2000 05e8 2000 05e8 2000     ... ... ... ... 
200005f8:	05f0 2000 05f0 2000 05f8 2000 05f8 2000     ... ... ... ... 
20000608:	0600 2000 0600 2000 0608 2000 0608 2000     ... ... ... ... 
20000618:	0610 2000 0610 2000 0618 2000 0618 2000     ... ... ... ... 
20000628:	0620 2000 0620 2000 0628 2000 0628 2000      ..  .. (.. (.. 
20000638:	0630 2000 0630 2000 0638 2000 0638 2000     0.. 0.. 8.. 8.. 
20000648:	0640 2000 0640 2000 0648 2000 0648 2000     @.. @.. H.. H.. 
20000658:	0650 2000 0650 2000 0658 2000 0658 2000     P.. P.. X.. X.. 
20000668:	0660 2000 0660 2000 0668 2000 0668 2000     `.. `.. h.. h.. 
20000678:	0670 2000 0670 2000 0678 2000 0678 2000     p.. p.. x.. x.. 
20000688:	0680 2000 0680 2000 0688 2000 0688 2000     ... ... ... ... 
20000698:	0690 2000 0690 2000 0698 2000 0698 2000     ... ... ... ... 
200006a8:	06a0 2000 06a0 2000 06a8 2000 06a8 2000     ... ... ... ... 
200006b8:	06b0 2000 06b0 2000 06b8 2000 06b8 2000     ... ... ... ... 
200006c8:	06c0 2000 06c0 2000 06c8 2000 06c8 2000     ... ... ... ... 
200006d8:	06d0 2000 06d0 2000 06d8 2000 06d8 2000     ... ... ... ... 
200006e8:	06e0 2000 06e0 2000 06e8 2000 06e8 2000     ... ... ... ... 
200006f8:	06f0 2000 06f0 2000 06f8 2000 06f8 2000     ... ... ... ... 
20000708:	0700 2000 0700 2000 0708 2000 0708 2000     ... ... ... ... 
20000718:	0710 2000 0710 2000 0718 2000 0718 2000     ... ... ... ... 
20000728:	0720 2000 0720 2000 0728 2000 0728 2000      ..  .. (.. (.. 
20000738:	0730 2000 0730 2000 0738 2000 0738 2000     0.. 0.. 8.. 8.. 
20000748:	0740 2000 0740 2000 0748 2000 0748 2000     @.. @.. H.. H.. 
20000758:	0750 2000 0750 2000 0758 2000 0758 2000     P.. P.. X.. X.. 
20000768:	0760 2000 0760 2000 0768 2000 0768 2000     `.. `.. h.. h.. 
20000778:	0770 2000 0770 2000 0778 2000 0778 2000     p.. p.. x.. x.. 
20000788:	0780 2000 0780 2000 0788 2000 0788 2000     ... ... ... ... 
20000798:	0790 2000 0790 2000 0798 2000 0798 2000     ... ... ... ... 
200007a8:	07a0 2000 07a0 2000 07a8 2000 07a8 2000     ... ... ... ... 
200007b8:	07b0 2000 07b0 2000 07b8 2000 07b8 2000     ... ... ... ... 
200007c8:	07c0 2000 07c0 2000 07c8 2000 07c8 2000     ... ... ... ... 
200007d8:	07d0 2000 07d0 2000 07d8 2000 07d8 2000     ... ... ... ... 
200007e8:	07e0 2000 07e0 2000 07e8 2000 07e8 2000     ... ... ... ... 
200007f8:	07f0 2000 07f0 2000 07f8 2000 07f8 2000     ... ... ... ... 
20000808:	0800 2000 0800 2000 0808 2000 0808 2000     ... ... ... ... 
20000818:	0810 2000 0810 2000 0818 2000 0818 2000     ... ... ... ... 
20000828:	0820 2000 0820 2000 0828 2000 0828 2000      ..  .. (.. (.. 
20000838:	0830 2000 0830 2000 0838 2000 0838 2000     0.. 0.. 8.. 8.. 
20000848:	0840 2000 0840 2000 0848 2000 0848 2000     @.. @.. H.. H.. 
20000858:	0850 2000 0850 2000 0858 2000 0858 2000     P.. P.. X.. X.. 
20000868:	0860 2000 0860 2000 0868 2000 0868 2000     `.. `.. h.. h.. 
20000878:	0870 2000 0870 2000 0878 2000 0878 2000     p.. p.. x.. x.. 
20000888:	0880 2000 0880 2000 0888 2000 0888 2000     ... ... ... ... 
20000898:	0890 2000 0890 2000 0898 2000 0898 2000     ... ... ... ... 
200008a8:	08a0 2000 08a0 2000 08a8 2000 08a8 2000     ... ... ... ... 
200008b8:	08b0 2000 08b0 2000 08b8 2000 08b8 2000     ... ... ... ... 
200008c8:	08c0 2000 08c0 2000 08c8 2000 08c8 2000     ... ... ... ... 
200008d8:	08d0 2000 08d0 2000 08d8 2000 08d8 2000     ... ... ... ... 
200008e8:	08e0 2000 08e0 2000 08e8 2000 08e8 2000     ... ... ... ... 
200008f8:	08f0 2000 08f0 2000 08f8 2000 08f8 2000     ... ... ... ... 
20000908:	0900 2000 0900 2000 0908 2000 0908 2000     ... ... ... ... 
20000918:	0910 2000 0910 2000 0918 2000 0918 2000     ... ... ... ... 

20000928 <__malloc_trim_threshold>:
20000928:	0000 0002                                   ....

2000092c <__malloc_sbrk_base>:
2000092c:	ffff ffff                                   ....
